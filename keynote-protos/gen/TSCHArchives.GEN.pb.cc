// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.GEN.proto

#include "TSCHArchives.GEN.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSCH {
namespace Generated {
PROTOBUF_CONSTEXPR ChartStyleArchive::ChartStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartinfoarea3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfobar3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfocolumn3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfoline3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfopie3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultbackgroundfill_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultbackgroundstroke_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultbordershadow_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultborderstroke_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaultgridbackgroundfill_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefaulttitlecolor_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dchartopacity_)*/0
  , /*decltype(_impl_.tschchartinfodefaultborderopacity_)*/0
  , /*decltype(_impl_.tschchartinfodefaultgridbackgroundopacity_)*/0
  , /*decltype(_impl_.tschchartinfodefaultinterbargap_)*/0
  , /*decltype(_impl_.tschchartinfodefaultintersetgap_)*/0
  , /*decltype(_impl_.tschchartinfodefaulttitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartinfodefaultcombinelayers_)*/false
  , /*decltype(_impl_.tschchartinfodefaultradarradiusgridlinecurve_)*/false
  , /*decltype(_impl_.tschchartinfodefaultroundedcornerouterendonly_)*/false
  , /*decltype(_impl_.tschchartinfodefaultshowborder_)*/false
  , /*decltype(_impl_.tschchartinfodefaultroundedcornerradius_)*/0} {}
struct ChartStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartStyleArchiveDefaultTypeInternal() {}
  union {
    ChartStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartStyleArchiveDefaultTypeInternal _ChartStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartNonStyleArchive::ChartNonStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartinfodefaulttitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartinfodefault3drotation_)*/nullptr
  , /*decltype(_impl_.tschchartinfoarea3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfobar3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfocolumn3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfoline3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfopie3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dviewport_)*/nullptr
  , /*decltype(_impl_.tschchartinfodefault3dbarshape_)*/0
  , /*decltype(_impl_.tschchartinfodefault3dintersetdepthgap_)*/0
  , /*decltype(_impl_.tschchartinfodefaultpiestartangle_)*/0
  , /*decltype(_impl_.tschchartinfodefaultshowtitle_)*/false
  , /*decltype(_impl_.tschchartinfodefaultskiphiddendata_)*/false
  , /*decltype(_impl_.tschchartinfodefaultdatasetnamelocation_)*/0
  , /*decltype(_impl_.tschchartinfodefaultmultidatacontroltype_)*/0
  , /*decltype(_impl_.tschchartinfodefaultinnerradius_)*/0
  , /*decltype(_impl_.tschchartinfodefaultradarstartangle_)*/0
  , /*decltype(_impl_.tschchartinfodefault3dbeveledges_)*/false
  , /*decltype(_impl_.tschchartinfodefaultdeprecatedroundedcornerouterendonly_)*/false
  , /*decltype(_impl_.tschchartinfodefaultdonutplacetitleatcenter_)*/false
  , /*decltype(_impl_.tschchartinfodefaultshowlegend_)*/false
  , /*decltype(_impl_.tschchartinfopiecalloutlinetype_)*/0
  , /*decltype(_impl_.tschchartinfoareacalloutlinetype_)*/0
  , /*decltype(_impl_.tschchartinfobarcalloutlinetype_)*/0
  , /*decltype(_impl_.tschchartinfobubblecalloutlinetype_)*/0
  , /*decltype(_impl_.tschchartinfolinecalloutlinetype_)*/0
  , /*decltype(_impl_.tschchartinfoscattercalloutlinetype_)*/0
  , /*decltype(_impl_.tschchartinfostackedareacalloutlinetype_)*/0
  , /*decltype(_impl_.tschchartinfostackedbarcalloutlinetype_)*/0
  , /*decltype(_impl_.tschchartinfodefaultcalloutlinetype_)*/0
  , /*decltype(_impl_.tschchartinfodefaultdeprecatedroundedcornerradius_)*/0} {}
struct ChartNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartNonStyleArchiveDefaultTypeInternal _ChartNonStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR LegendStyleArchive::LegendStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschlegendmodeldefaultfill_)*/nullptr
  , /*decltype(_impl_.tschlegendmodeldefaultshadow_)*/nullptr
  , /*decltype(_impl_.tschlegendmodeldefaultstroke_)*/nullptr
  , /*decltype(_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschlegendmodeldefaultopacity_)*/0} {}
struct LegendStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LegendStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LegendStyleArchiveDefaultTypeInternal() {}
  union {
    LegendStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LegendStyleArchiveDefaultTypeInternal _LegendStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR LegendNonStyleArchive::LegendNonStyleArchive(
    ::_pbi::ConstantInitialized) {}
struct LegendNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LegendNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LegendNonStyleArchiveDefaultTypeInternal() {}
  union {
    LegendNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LegendNonStyleArchiveDefaultTypeInternal _LegendNonStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisStyleArchive::ChartAxisStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartaxiscategory3dgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvalue3dgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategorymajorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvaluemajorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategorymajorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvaluemajorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategoryminorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvalueminorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategoryminorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisvalueminorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxiscategory3dgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisvalue3dgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryhorizontalspacing_)*/0
  , /*decltype(_impl_.tschchartaxiscategorylabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisdefaultlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisvaluelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxiscategorylabelsorientation_)*/0
  , /*decltype(_impl_.tschchartaxisdefaultlabelsorientation_)*/0
  , /*decltype(_impl_.tschchartaxisvaluelabelsorientation_)*/0
  , /*decltype(_impl_.tschchartaxiscategorymajorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisvaluemajorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryminorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisvalueminorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisvalueshowmajorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowmajortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowmajortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowminimumlabel_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowminorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowminorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowminortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowminortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowaxis_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowaxis_)*/false
  , /*decltype(_impl_.tschchartaxisdefaultshowextensionlines_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowgridlinetickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowgridlinetickmarks_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowlastlabel_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowmajorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxispolarcategoryshowmajorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxiscategorytickmarklocation_)*/0
  , /*decltype(_impl_.tschchartaxisvaluetickmarklocation_)*/0
  , /*decltype(_impl_.tschchartaxiscategorytitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisdefaulttitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisvaluetitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryverticalspacing_)*/0
  , /*decltype(_impl_.tschchartaxisdefaultlabelanglebaselinedirection_)*/0} {}
struct ChartAxisStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisStyleArchiveDefaultTypeInternal() {}
  union {
    ChartAxisStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisStyleArchiveDefaultTypeInternal _ChartAxisStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartaxiscategorytitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartaxisvaluetitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartaxisdefault1_0numberformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefaultusermax_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefaultusermin_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefault1_0dateformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefaultdurationformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefaultdateformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefaultnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdefault3dlabelposition_)*/0
  , /*decltype(_impl_.tschchartaxisdefaultnumberformattype_)*/0
  , /*decltype(_impl_.tschchartaxisvaluenumberofdecades_)*/0
  , /*decltype(_impl_.tschchartaxisvaluenumberofmajorgridlines_)*/0
  , /*decltype(_impl_.tschchartaxisvaluenumberofminorgridlines_)*/0
  , /*decltype(_impl_.tschchartaxisvaluescale_)*/0
  , /*decltype(_impl_.tschchartaxiscategoryplottoedges_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowlabels_)*/false
  , /*decltype(_impl_.tschchartaxisdefaultshowlabels_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowlabels_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowserieslabels_)*/false
  , /*decltype(_impl_.tschchartaxismultidatashowserieslabels_)*/false
  , /*decltype(_impl_.tschchartaxiscategoryshowtitle_)*/false
  , /*decltype(_impl_.tschchartaxisvalueshowtitle_)*/false
  , /*decltype(_impl_.tschchartaxisdefaultlabelexplosion_)*/0} {}
struct ChartAxisNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartAxisNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisNonStyleArchiveDefaultTypeInternal _ChartAxisNonStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSeriesStyleArchive::ChartSeriesStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarlineend_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dareafill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dbarfill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dcolumnfill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dlinefill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dpiefill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareafill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbarfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriescolumnfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareafill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedcolumnfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriespiefill_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dareashadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dbarshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dcolumnshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseries3dpieshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareashadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbarshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubbleshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultshadow_)*/nullptr
  , /*decltype(_impl_.tschchartserieslineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareashadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedcolumnshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriespieshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscattershadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareastroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbarstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubblestroke_)*/nullptr
  , /*decltype(_impl_.tschchartserieslinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareastroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedcolumnstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriespiestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscatterstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareasymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubblesymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartserieslinesymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareasymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscattersymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesareasymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubblesymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartserieslinesymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedareasymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesscattersymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultcalloutlinestrokestyle_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultcalloutlinestartlineend_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultcalloutlineendlineend_)*/nullptr
  , /*decltype(_impl_.tschchartseriesradarareafill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesradarareashadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesradarareastroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesradarareasymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesradarareasymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriesarealabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesbarlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartserieslinelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriespielabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultopacity_)*/0
  , /*decltype(_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesscattersymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesareasymbolsize_)*/0
  , /*decltype(_impl_.tschchartserieslinesymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesmixedareasymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesscattersymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationopacity_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredopacity_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesareavaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesbarvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesbubblevaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartserieslinevaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesmixedareavaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriesradarareasymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriesareasymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesradarareafilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesareasymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartserieslinesymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriesmixedcolumnvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlinevaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesscattervaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartserieslinesymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesradarareasymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesstackedareavaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesstackedbarvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarspacing_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarspacingscatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultvaluelabelspacing_)*/0
  , /*decltype(_impl_.tschchartseriesdonutlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesdonutoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesradarlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesradaroutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesradarareasymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriesradarareavaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_)*/0} {}
struct ChartSeriesStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSeriesStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSeriesStyleArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSeriesStyleArchiveDefaultTypeInternal _ChartSeriesStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinelabelstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefault1_0numberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriespie1_0numberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesstackedpercentnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefault1_0dateformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultdurationformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultdateformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdefaultnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriespienumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesbubbleadjustmentscale_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarfixedvalue_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarpercentvalue_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarsetting_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarsettingscatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstddevvalue_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbartype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulterrorbartypescatterx_)*/0
  , /*decltype(_impl_.tschchartseriespie2_3labelexplosion_)*/0
  , /*decltype(_impl_.tschchartseriesbubblelinetype_)*/0
  , /*decltype(_impl_.tschchartserieslinelinetype_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlinelinetype_)*/0
  , /*decltype(_impl_.tschchartseriesscatterlinetype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultnumberformattype_)*/0
  , /*decltype(_impl_.tschchartseriespienumberformattype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultseriestype_)*/0
  , /*decltype(_impl_.tschchartseriesscattershowline_)*/false
  , /*decltype(_impl_.tschchartseriesbubbleshownegativedata_)*/false
  , /*decltype(_impl_.tschchartseriesbubbleshowserieslabels_)*/false
  , /*decltype(_impl_.tschchartseriespieshowserieslabels_)*/false
  , /*decltype(_impl_.tschchartseriesareashowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesbarshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesbubbleshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesscattershowserieslabels_)*/false
  , /*decltype(_impl_.tschchartseriesareashowsymbol_)*/false
  , /*decltype(_impl_.tschchartserieslineshowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesmixedareashowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesbubblesizedimension_)*/0
  , /*decltype(_impl_.tschchartseriesareasymboltype_)*/0
  , /*decltype(_impl_.tschchartserieslinesymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesmixedareasymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlinesymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesscattersymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsetx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsety_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineorder_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineperiod_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_)*/0
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshowr2value_)*/false
  , /*decltype(_impl_.tschchartseriesdefaulttrendlinetype_)*/0
  , /*decltype(_impl_.tschchartseriespiewedgeexplosion_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultyaxisordinal_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultshowerrorbar_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultshowerrorbarscatterx_)*/false
  , /*decltype(_impl_.tschchartseriesbubbleshowlabelsinfront_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultshowlabelsinfront_)*/false
  , /*decltype(_impl_.tschchartseriesbubblevaluelabelsaxis_)*/0
  , /*decltype(_impl_.tschchartseriesmixedlineshowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesradarareashowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesscattershowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultshowtrendline_)*/false
  , /*decltype(_impl_.tschchartseriesscattervaluelabelsaxis_)*/0
  , /*decltype(_impl_.tschchartserieslineshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesmixedshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriespieshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesradarshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriespieenablecalloutline_)*/0
  , /*decltype(_impl_.tschchartseriesstackedareastacklabels_)*/false
  , /*decltype(_impl_.tschchartseriesstackedbarstacklabels_)*/false
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshowequation_)*/false
  , /*decltype(_impl_.tschchartseriesdefaulttrendlineshowlabel_)*/false
  , /*decltype(_impl_.tschchartseriesareaenablecalloutline_)*/0
  , /*decltype(_impl_.tschchartseriesbarenablecalloutline_)*/0
  , /*decltype(_impl_.tschchartseriesbubbleenablecalloutline_)*/0
  , /*decltype(_impl_.tschchartserieslineenablecalloutline_)*/0
  , /*decltype(_impl_.tschchartseriesscatterenablecalloutline_)*/0
  , /*decltype(_impl_.tschchartseriesstackedareaenablecalloutline_)*/0
  , /*decltype(_impl_.tschchartseriesstackedbarenablecalloutline_)*/0
  , /*decltype(_impl_.tschchartseriesdefaultenablecalloutline_)*/0
  , /*decltype(_impl_.tschchartseriesscattershowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesareastacklabels_)*/false
  , /*decltype(_impl_.tschchartseriesbarstacklabels_)*/false
  , /*decltype(_impl_.tschchartseriesbubblestacklabels_)*/false
  , /*decltype(_impl_.tschchartseriesdefaultstacklabels_)*/false
  , /*decltype(_impl_.tschchartserieslinestacklabels_)*/false
  , /*decltype(_impl_.tschchartseriespiestacklabels_)*/false
  , /*decltype(_impl_.tschchartseriesscatterstacklabels_)*/false
  , /*decltype(_impl_.tschchartseriespielabelexplosion_)*/0
  , /*decltype(_impl_.tschchartseriesradarareasymboltype_)*/0
  , /*decltype(_impl_.tschchartseriesradararealinetype_)*/0} {}
struct ChartSeriesNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSeriesNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSeriesNonStyleArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSeriesNonStyleArchiveDefaultTypeInternal _ChartSeriesNonStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ReferenceLineStyleArchive::ReferenceLineStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschreferencelinedefaultstroke_)*/nullptr
  , /*decltype(_impl_.tschreferencelinedefaultshadow_)*/nullptr
  , /*decltype(_impl_.tschreferencelinedefaultlabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_)*/0} {}
struct ReferenceLineStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceLineStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceLineStyleArchiveDefaultTypeInternal() {}
  union {
    ReferenceLineStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceLineStyleArchiveDefaultTypeInternal _ReferenceLineStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ReferenceLineNonStyleArchive::ReferenceLineNonStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschreferencelinedefaultlabel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschreferencelinedefaultcustomvalue_)*/nullptr
  , /*decltype(_impl_.tschreferencelinedefaulttype_)*/0
  , /*decltype(_impl_.tschreferencelinedefaultshowlabel_)*/false
  , /*decltype(_impl_.tschreferencelinedefaultshowline_)*/false
  , /*decltype(_impl_.tschreferencelinedefaultshowvaluelabel_)*/false} {}
struct ReferenceLineNonStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceLineNonStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceLineNonStyleArchiveDefaultTypeInternal() {}
  union {
    ReferenceLineNonStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceLineNonStyleArchiveDefaultTypeInternal _ReferenceLineNonStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartGenericPropertyMapArchive::ChartGenericPropertyMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartinfotitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartinfo3dlightingpackage_)*/nullptr
  , /*decltype(_impl_.tschchartinfo3drotation_)*/nullptr
  , /*decltype(_impl_.tschchartinfo3dscale_)*/nullptr
  , /*decltype(_impl_.tschchartinfo3dviewport_)*/nullptr
  , /*decltype(_impl_.tschchartinfobackgroundfill_)*/nullptr
  , /*decltype(_impl_.tschchartinfobackgroundstroke_)*/nullptr
  , /*decltype(_impl_.tschchartinfobordershadow_)*/nullptr
  , /*decltype(_impl_.tschchartinfoborderstroke_)*/nullptr
  , /*decltype(_impl_.tschchartinfogridbackgroundfill_)*/nullptr
  , /*decltype(_impl_.tschchartinfotitlecolor_)*/nullptr
  , /*decltype(_impl_.tschchartinfo3dbarshape_)*/0
  , /*decltype(_impl_.tschchartinfo3dchartopacity_)*/0
  , /*decltype(_impl_.tschchartinfo3dintersetdepthgap_)*/0
  , /*decltype(_impl_.tschchartinfoborderopacity_)*/0
  , /*decltype(_impl_.tschchartinfo3dbeveledges_)*/false
  , /*decltype(_impl_.tschchartinfocombinelayers_)*/false
  , /*decltype(_impl_.tschchartinfodeprecatedroundedcornerouterendonly_)*/false
  , /*decltype(_impl_.tschchartinfodonutplacetitleatcenter_)*/false
  , /*decltype(_impl_.tschchartinfocalloutlinetype_)*/0
  , /*decltype(_impl_.tschchartinfodeprecatedroundedcornerradius_)*/0
  , /*decltype(_impl_.tschchartinfodatasetnamelocation_)*/0
  , /*decltype(_impl_.tschchartinfodatasetnameparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartinfogridbackgroundopacity_)*/0
  , /*decltype(_impl_.tschchartinfoinnerradius_)*/0
  , /*decltype(_impl_.tschchartinfointerbargap_)*/0
  , /*decltype(_impl_.tschchartinfointersetgap_)*/0
  , /*decltype(_impl_.tschchartinfomultidatacontroltype_)*/0
  , /*decltype(_impl_.tschchartinfopiestartangle_)*/0
  , /*decltype(_impl_.tschchartinforadarstartangle_)*/0
  , /*decltype(_impl_.tschchartinforadarradiusgridlinecurve_)*/false
  , /*decltype(_impl_.tschchartinforoundedcornerouterendonly_)*/false
  , /*decltype(_impl_.tschchartinfoshowborder_)*/false
  , /*decltype(_impl_.tschchartinfoshowlegend_)*/false
  , /*decltype(_impl_.tschchartinforoundedcornerradius_)*/0
  , /*decltype(_impl_.tschchartinfoshowtitle_)*/false
  , /*decltype(_impl_.tschchartinfoskiphiddendata_)*/false
  , /*decltype(_impl_.tschchartinfotitleparagraphstyleindex_)*/0} {}
struct ChartGenericPropertyMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartGenericPropertyMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartGenericPropertyMapArchiveDefaultTypeInternal() {}
  union {
    ChartGenericPropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartGenericPropertyMapArchiveDefaultTypeInternal _ChartGenericPropertyMapArchive_default_instance_;
PROTOBUF_CONSTEXPR LegendGenericPropertyMapArchive::LegendGenericPropertyMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschlegendmodelfill_)*/nullptr
  , /*decltype(_impl_.tschlegendmodelshadow_)*/nullptr
  , /*decltype(_impl_.tschlegendmodelstroke_)*/nullptr
  , /*decltype(_impl_.tschlegendmodellabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschlegendmodelopacity_)*/0} {}
struct LegendGenericPropertyMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LegendGenericPropertyMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LegendGenericPropertyMapArchiveDefaultTypeInternal() {}
  union {
    LegendGenericPropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LegendGenericPropertyMapArchiveDefaultTypeInternal _LegendGenericPropertyMapArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartAxisGenericPropertyMapArchive::ChartAxisGenericPropertyMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartaxistitle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartaxis1_0dateformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxis1_0numberformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxis3dgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdateformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxisdurationformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxismajorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxismajorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisminorgridlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartaxisminorgridlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartaxisnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartaxisusermax_)*/nullptr
  , /*decltype(_impl_.tschchartaxisusermin_)*/nullptr
  , /*decltype(_impl_.tschchartaxis3dgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxis3dlabelposition_)*/0
  , /*decltype(_impl_.tschchartaxishorizontalspacing_)*/0
  , /*decltype(_impl_.tschchartaxislabelanglebaselinedirection_)*/0
  , /*decltype(_impl_.tschchartaxislabelexplosion_)*/0
  , /*decltype(_impl_.tschchartaxislabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxislabelsorientation_)*/0
  , /*decltype(_impl_.tschchartaxismajorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisminorgridlineopacity_)*/0
  , /*decltype(_impl_.tschchartaxisnumberformattype_)*/0
  , /*decltype(_impl_.tschchartaxisnumberofdecades_)*/0
  , /*decltype(_impl_.tschchartaxisnumberofmajorgridlines_)*/0
  , /*decltype(_impl_.tschchartaxisnumberofminorgridlines_)*/0
  , /*decltype(_impl_.tschchartaxisscale_)*/0
  , /*decltype(_impl_.tschchartaxisplottoedges_)*/false
  , /*decltype(_impl_.tschchartaxisshowaxis_)*/false
  , /*decltype(_impl_.tschchartaxisshowextensionlines_)*/false
  , /*decltype(_impl_.tschchartaxisshowgridlinetickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisshowlabels_)*/false
  , /*decltype(_impl_.tschchartaxisshowlastlabel_)*/false
  , /*decltype(_impl_.tschchartaxisshowmajorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxisshowmajortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisshowminimumlabel_)*/false
  , /*decltype(_impl_.tschchartaxisshowminorgridlines_)*/false
  , /*decltype(_impl_.tschchartaxisshowminortickmarks_)*/false
  , /*decltype(_impl_.tschchartaxisshowserieslabels_)*/false
  , /*decltype(_impl_.tschchartaxisshowtitle_)*/false
  , /*decltype(_impl_.tschchartaxistickmarklocation_)*/0
  , /*decltype(_impl_.tschchartaxistitleparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartaxisverticalspacing_)*/0} {}
struct ChartAxisGenericPropertyMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartAxisGenericPropertyMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartAxisGenericPropertyMapArchiveDefaultTypeInternal() {}
  union {
    ChartAxisGenericPropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartAxisGenericPropertyMapArchiveDefaultTypeInternal _ChartAxisGenericPropertyMapArchive_default_instance_;
PROTOBUF_CONSTEXPR ChartSeriesGenericPropertyMapArchive::ChartSeriesGenericPropertyMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschchartseriestrendlinelabelstring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschchartseries1_0dateformat_)*/nullptr
  , /*decltype(_impl_.tschchartseries1_0numberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriescalloutlineendlineend_)*/nullptr
  , /*decltype(_impl_.tschchartseriescalloutlinestartlineend_)*/nullptr
  , /*decltype(_impl_.tschchartseriescalloutlinestrokestyle_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdateformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesdurationformat_)*/nullptr
  , /*decltype(_impl_.tschchartserieserrorbarcustomnegativedata_)*/nullptr
  , /*decltype(_impl_.tschchartserieserrorbarcustomnegativedatascatterx_)*/nullptr
  , /*decltype(_impl_.tschchartserieserrorbarcustompositivedata_)*/nullptr
  , /*decltype(_impl_.tschchartserieserrorbarcustompositivedatascatterx_)*/nullptr
  , /*decltype(_impl_.tschchartserieserrorbarlineend_)*/nullptr
  , /*decltype(_impl_.tschchartserieserrorbarlineendscatterx_)*/nullptr
  , /*decltype(_impl_.tschchartserieserrorbarshadow_)*/nullptr
  , /*decltype(_impl_.tschchartserieserrorbarstroke_)*/nullptr
  , /*decltype(_impl_.tschchartserieserrorbarstrokescatterx_)*/nullptr
  , /*decltype(_impl_.tschchartseriesfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriesnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriespercentnumberformat_)*/nullptr
  , /*decltype(_impl_.tschchartseriesshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriesstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriessymbolfill_)*/nullptr
  , /*decltype(_impl_.tschchartseriessymbolstroke_)*/nullptr
  , /*decltype(_impl_.tschchartseriestrendlineshadow_)*/nullptr
  , /*decltype(_impl_.tschchartseriestrendlinestroke_)*/nullptr
  , /*decltype(_impl_.tschchartseries2_3labelexplosion_)*/0
  , /*decltype(_impl_.tschchartseriesadjustmentscale_)*/0
  , /*decltype(_impl_.tschchartseriesenablecalloutline_)*/0
  , /*decltype(_impl_.tschchartserieserrorbarfixedvalue_)*/0
  , /*decltype(_impl_.tschchartserieserrorbarfixedvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartserieserrorbarpercentvalue_)*/0
  , /*decltype(_impl_.tschchartserieserrorbarpercentvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartserieserrorbarsetting_)*/0
  , /*decltype(_impl_.tschchartserieserrorbarsettingscatterx_)*/0
  , /*decltype(_impl_.tschchartserieserrorbarspacing_)*/0
  , /*decltype(_impl_.tschchartserieserrorbarspacingscatterx_)*/0
  , /*decltype(_impl_.tschchartserieserrorbarstddevvalue_)*/0
  , /*decltype(_impl_.tschchartserieserrorbarstddevvaluescatterx_)*/0
  , /*decltype(_impl_.tschchartserieserrorbartype_)*/0
  , /*decltype(_impl_.tschchartserieserrorbartypescatterx_)*/0
  , /*decltype(_impl_.tschchartseriesfilluseseriesstrokealphamultiplier_)*/0
  , /*decltype(_impl_.tschchartserieslabelexplosion_)*/0
  , /*decltype(_impl_.tschchartserieslabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartserieslinetype_)*/0
  , /*decltype(_impl_.tschchartseriesnumberformattype_)*/0
  , /*decltype(_impl_.tschchartseriesopacity_)*/0
  , /*decltype(_impl_.tschchartseriesoutsidelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesseriestype_)*/0
  , /*decltype(_impl_.tschchartseriesfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriesshowerrorbar_)*/false
  , /*decltype(_impl_.tschchartseriesshowerrorbarscatterx_)*/false
  , /*decltype(_impl_.tschchartseriesshowlabelsinfront_)*/false
  , /*decltype(_impl_.tschchartseriesshowline_)*/false
  , /*decltype(_impl_.tschchartseriesshownegativedata_)*/false
  , /*decltype(_impl_.tschchartseriesshowserieslabels_)*/false
  , /*decltype(_impl_.tschchartseriesshowsymbol_)*/false
  , /*decltype(_impl_.tschchartseriessizedimension_)*/0
  , /*decltype(_impl_.tschchartseriesshowtrendline_)*/false
  , /*decltype(_impl_.tschchartseriesshowvaluelabels_)*/false
  , /*decltype(_impl_.tschchartseriesstacklabels_)*/false
  , /*decltype(_impl_.tschchartseriessymbolfilluseseriesfill_)*/false
  , /*decltype(_impl_.tschchartseriessymbolsize_)*/0
  , /*decltype(_impl_.tschchartseriessymboltype_)*/0
  , /*decltype(_impl_.tschchartseriestrendlineequationoffsetx_)*/0
  , /*decltype(_impl_.tschchartseriestrendlineequationoffsety_)*/0
  , /*decltype(_impl_.tschchartseriestrendlineorder_)*/0
  , /*decltype(_impl_.tschchartseriestrendlineperiod_)*/0
  , /*decltype(_impl_.tschchartseriestrendlinersquaredoffsetx_)*/0
  , /*decltype(_impl_.tschchartseriessymbolfilluseseriesstroke_)*/false
  , /*decltype(_impl_.tschchartseriestrendlineshowequation_)*/false
  , /*decltype(_impl_.tschchartseriestrendlineshowlabel_)*/false
  , /*decltype(_impl_.tschchartseriestrendlineshowr2value_)*/false
  , /*decltype(_impl_.tschchartseriestrendlinersquaredoffsety_)*/0
  , /*decltype(_impl_.tschchartseriestrendlinetype_)*/0
  , /*decltype(_impl_.tschchartseriestrendlineequationopacity_)*/0
  , /*decltype(_impl_.tschchartseriestrendlineequationparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriestrendlinersquaredopacity_)*/0
  , /*decltype(_impl_.tschchartseriestrendlinersquaredparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschchartseriesvaluelabelposition_)*/0
  , /*decltype(_impl_.tschchartseriesvaluelabelspacing_)*/0
  , /*decltype(_impl_.tschchartseriesvaluelabelsaxis_)*/0
  , /*decltype(_impl_.tschchartserieswedgeexplosion_)*/0
  , /*decltype(_impl_.tschchartseriesyaxisordinal_)*/0} {}
struct ChartSeriesGenericPropertyMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChartSeriesGenericPropertyMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChartSeriesGenericPropertyMapArchiveDefaultTypeInternal() {}
  union {
    ChartSeriesGenericPropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChartSeriesGenericPropertyMapArchiveDefaultTypeInternal _ChartSeriesGenericPropertyMapArchive_default_instance_;
PROTOBUF_CONSTEXPR ReferenceLineGenericPropertyMapArchive::ReferenceLineGenericPropertyMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tschreferencelinelabel_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tschreferencelinecustomvalue_)*/nullptr
  , /*decltype(_impl_.tschreferencelineshadow_)*/nullptr
  , /*decltype(_impl_.tschreferencelinestroke_)*/nullptr
  , /*decltype(_impl_.tschreferencelinelabelparagraphstyleindex_)*/0
  , /*decltype(_impl_.tschreferencelineshowlabel_)*/false
  , /*decltype(_impl_.tschreferencelineshowline_)*/false
  , /*decltype(_impl_.tschreferencelineshowvaluelabel_)*/false
  , /*decltype(_impl_.tschreferencelinetype_)*/0
  , /*decltype(_impl_.tschreferencelinevaluelabelparagraphstyleindex_)*/0} {}
struct ReferenceLineGenericPropertyMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceLineGenericPropertyMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceLineGenericPropertyMapArchiveDefaultTypeInternal() {}
  union {
    ReferenceLineGenericPropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceLineGenericPropertyMapArchiveDefaultTypeInternal _ReferenceLineGenericPropertyMapArchive_default_instance_;
}  // namespace Generated
}  // namespace TSCH
static ::_pb::Metadata file_level_metadata_TSCHArchives_2eGEN_2eproto[15];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_TSCHArchives_2eGEN_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSCHArchives_2eGEN_2eproto = nullptr;

const uint32_t TableStruct_TSCHArchives_2eGEN_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefault3dchartopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfoarea3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfobar3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfocolumn3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefault3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfoline3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfopie3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultbackgroundstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultborderopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultbordershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultborderstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultcombinelayers_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultgridbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultgridbackgroundopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultinterbargap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultintersetgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultradarradiusgridlinecurve_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultroundedcornerouterendonly_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultroundedcornerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaultshowborder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaulttitlecolor_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartStyleArchive, _impl_.tschchartinfodefaulttitleparagraphstyleindex_),
  12,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  13,
  8,
  9,
  19,
  18,
  10,
  14,
  15,
  16,
  20,
  21,
  23,
  22,
  11,
  17,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3dbarshape_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3dintersetdepthgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3drotation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfoarea3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfobar3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfocolumn3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfoline3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfopie3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefault3dviewport_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfoareacalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfobarcalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfobubblecalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultcalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfolinecalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfopiecalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfoscattercalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfostackedareacalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfostackedbarcalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultdeprecatedroundedcornerouterendonly_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultdeprecatedroundedcornerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultdatasetnamelocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultdonutplacetitleatcenter_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultinnerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultmultidatacontroltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultpiestartangle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultradarstartangle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultshowlegend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaultskiphiddendata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartNonStyleArchive, _impl_.tschchartinfodefaulttitle_),
  9,
  18,
  10,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  23,
  24,
  25,
  30,
  26,
  22,
  27,
  28,
  29,
  19,
  31,
  14,
  20,
  16,
  15,
  11,
  17,
  21,
  12,
  13,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_.tschlegendmodeldefaultfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_.tschlegendmodeldefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_.tschlegendmodeldefaultopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_.tschlegendmodeldefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendStyleArchive, _impl_.tschlegendmodeldefaultstroke_),
  0,
  3,
  4,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategory3dgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalue3dgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategory3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalue3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryhorizontalspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisdefaultlabelanglebaselinedirection_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorylabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisdefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorylabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisdefaultlabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluelabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorymajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluemajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorymajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluemajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorymajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluemajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisdefaultshowextensionlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowgridlinetickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowgridlinetickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowlastlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxispolarcategoryshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowminimumlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvalueshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorytickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluetickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategorytitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisdefaulttitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxisvaluetitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisStyleArchive, _impl_.tschchartaxiscategoryverticalspacing_),
  10,
  11,
  0,
  1,
  12,
  45,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  2,
  3,
  4,
  5,
  21,
  22,
  6,
  7,
  8,
  9,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  39,
  40,
  41,
  42,
  43,
  44,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefault1_0dateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefault1_0numberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefault3dlabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultdateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultdurationformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultlabelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluenumberofdecades_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluenumberofmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluenumberofminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryplottoedges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluescale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvalueshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxismultidatashowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategoryshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvalueshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxiscategorytitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisvaluetitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultusermax_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultusermin_),
  5,
  2,
  9,
  7,
  6,
  23,
  8,
  10,
  11,
  12,
  13,
  15,
  14,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultcalloutlineendlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultcalloutlinestartlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultcalloutlinestrokestyle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarlineendscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarspacingscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarstrokescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dbarfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dcolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dlinefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dpiefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbarfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriescolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriespiefill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarareafill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarareafilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesarealabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbarlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdonutlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriespielabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdonutoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriespieoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradaroutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dcolumnshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseries3dpieshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubbleshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriespieshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarareashadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareastroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareastroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriespiestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarareastroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscatterstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarareasymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarareasymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarareasymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarareasymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareasymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareasymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinesymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarareasymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattersymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbarvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesbubblevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartserieslinevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedcolumnvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesmixedlinevaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesradarareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesscattervaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesstackedareavaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesstackedbarvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesStyleArchive, _impl_.tschchartseriesdefaultvaluelabelspacing_),
  57,
  56,
  55,
  0,
  1,
  2,
  108,
  109,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  58,
  117,
  95,
  63,
  64,
  65,
  111,
  66,
  67,
  68,
  113,
  69,
  70,
  71,
  72,
  112,
  73,
  74,
  114,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  59,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  60,
  40,
  41,
  42,
  43,
  44,
  45,
  61,
  46,
  96,
  97,
  98,
  91,
  92,
  93,
  94,
  102,
  103,
  104,
  105,
  75,
  76,
  77,
  78,
  79,
  115,
  80,
  47,
  48,
  49,
  50,
  51,
  62,
  52,
  53,
  54,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  99,
  100,
  116,
  101,
  106,
  107,
  110,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefault1_0dateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefault1_0numberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespie1_0numberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespie2_3labelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleadjustmentscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultdateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultdurationformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesareaenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbarenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartserieslineenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespieenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscatterenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesstackedareaenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesstackedbarenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustompositivedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarfixedvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarpercentvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarsetting_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarsettingscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarstddevvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbartype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbartypescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespielabelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubblelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartserieslinelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedlinelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesradararealinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscatterlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespienumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespienumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesstackedpercentnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultseriestype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowerrorbar_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowerrorbarscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleshowlabelsinfront_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowlabelsinfront_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattershowline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleshownegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespieshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattershowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesareashowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartserieslineshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedareashowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedlineshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesradarareashowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattershowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowtrendline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesareashowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbarshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubbleshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartserieslineshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespieshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesradarshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattershowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubblesizedimension_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesareastacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbarstacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubblestacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultstacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartserieslinestacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespiestacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscatterstacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesstackedareastacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesstackedbarstacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesareasymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartserieslinesymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedareasymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesmixedlinesymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesradarareasymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattersymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineequationoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinelabelstring_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineorder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineperiod_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinersquaredoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineshowequation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineshowlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlineshowr2value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulttrendlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesbubblevaluelabelsaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesscattervaluelabelsaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriespiewedgeexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaultyaxisordinal_),
  8,
  5,
  6,
  24,
  13,
  10,
  9,
  79,
  80,
  81,
  86,
  82,
  74,
  83,
  84,
  85,
  1,
  2,
  3,
  4,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  95,
  25,
  26,
  27,
  97,
  28,
  11,
  12,
  29,
  30,
  7,
  31,
  60,
  61,
  62,
  63,
  32,
  33,
  34,
  35,
  40,
  41,
  42,
  43,
  65,
  66,
  67,
  68,
  36,
  37,
  38,
  39,
  70,
  71,
  72,
  73,
  87,
  44,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  75,
  76,
  45,
  46,
  47,
  48,
  96,
  49,
  50,
  51,
  0,
  52,
  53,
  54,
  55,
  77,
  78,
  56,
  57,
  64,
  69,
  58,
  59,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, _impl_.tschreferencelinedefaultlabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, _impl_.tschreferencelinedefaultshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, _impl_.tschreferencelinedefaultstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineStyleArchive, _impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_),
  2,
  1,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, _impl_.tschreferencelinedefaultcustomvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, _impl_.tschreferencelinedefaultlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, _impl_.tschreferencelinedefaultshowlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, _impl_.tschreferencelinedefaultshowline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, _impl_.tschreferencelinedefaultshowvaluelabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineNonStyleArchive, _impl_.tschreferencelinedefaulttype_),
  1,
  0,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfo3dbarshape_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfo3dbeveledges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfo3dchartopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfo3dintersetdepthgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfo3dlightingpackage_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfo3drotation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfo3dscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfo3dviewport_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfobackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfobackgroundstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfoborderopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfobordershadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfoborderstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfocalloutlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfocombinelayers_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfodeprecatedroundedcornerouterendonly_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfodeprecatedroundedcornerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfodatasetnamelocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfodatasetnameparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfodonutplacetitleatcenter_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfogridbackgroundfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfogridbackgroundopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfoinnerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfointerbargap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfointersetgap_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfomultidatacontroltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfopiestartangle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinforadarradiusgridlinecurve_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinforadarstartangle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinforoundedcornerouterendonly_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinforoundedcornerradius_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfoshowborder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfoshowlegend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfoshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfoskiphiddendata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfotitlecolor_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfotitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartGenericPropertyMapArchive, _impl_.tschchartinfotitleparagraphstyleindex_),
  11,
  15,
  12,
  13,
  1,
  2,
  3,
  4,
  5,
  6,
  14,
  7,
  8,
  19,
  16,
  17,
  20,
  21,
  22,
  18,
  9,
  23,
  24,
  25,
  26,
  27,
  28,
  30,
  29,
  31,
  34,
  32,
  33,
  35,
  36,
  10,
  0,
  37,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, _impl_.tschlegendmodelfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, _impl_.tschlegendmodellabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, _impl_.tschlegendmodelopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, _impl_.tschlegendmodelshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::LegendGenericPropertyMapArchive, _impl_.tschlegendmodelstroke_),
  0,
  3,
  4,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxis1_0dateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxis1_0numberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxis3dgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxis3dgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxis3dlabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisdateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisdurationformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxishorizontalspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxislabelanglebaselinedirection_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxislabelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxislabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxislabelsorientation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxismajorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxismajorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxismajorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisminorgridlineopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisminorgridlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisminorgridlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisnumberofdecades_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisnumberofmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisnumberofminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisplottoedges_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowextensionlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowgridlinetickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowlabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowlastlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowmajorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowmajortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowminimumlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowminorgridlines_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowminortickmarks_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisshowtitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxistickmarklocation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxistitle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxistitleparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisusermax_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisusermin_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisverticalspacing_),
  1,
  2,
  13,
  3,
  14,
  4,
  5,
  15,
  16,
  17,
  18,
  19,
  20,
  6,
  7,
  21,
  8,
  9,
  10,
  22,
  23,
  24,
  25,
  27,
  26,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  0,
  41,
  11,
  12,
  42,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseries1_0dateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseries1_0numberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseries2_3labelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesadjustmentscale_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriescalloutlineendlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriescalloutlinestartlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriescalloutlinestrokestyle_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesdateformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesdurationformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesenablecalloutline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarcustomnegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarcustomnegativedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarcustompositivedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarcustompositivedatascatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarfixedvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarfixedvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarlineend_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarlineendscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarpercentvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarpercentvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarsetting_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarsettingscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarspacingscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarstddevvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarstddevvaluescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbarstrokescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbartype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieserrorbartypescatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesfilluseseriesstrokealphamultiplier_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieslabelexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieslabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieslinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesnumberformattype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesoutsidelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriespercentnumberformat_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesseriestype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesshowerrorbar_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesshowerrorbarscatterx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesshowlabelsinfront_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesshowline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesshownegativedata_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesshowserieslabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesshowsymbol_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesshowtrendline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesshowvaluelabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriessizedimension_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesstacklabels_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriessymbolfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriessymbolfilluseseriesfill_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriessymbolfilluseseriesstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriessymbolsize_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriessymbolstroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriessymboltype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlineequationoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlineequationoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlinelabelstring_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlineorder_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlineperiod_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlinersquaredoffsetx_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlinersquaredoffsety_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlineshowequation_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlineshowlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlineshowr2value_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlineequationopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlineequationparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlinersquaredopacity_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriestrendlinersquaredparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesvaluelabelposition_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesvaluelabelspacing_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesvaluelabelsaxis_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartserieswedgeexplosion_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesyaxisordinal_),
  1,
  2,
  26,
  27,
  3,
  4,
  5,
  6,
  7,
  28,
  8,
  9,
  10,
  11,
  29,
  30,
  12,
  13,
  31,
  32,
  33,
  34,
  14,
  35,
  36,
  37,
  38,
  15,
  16,
  39,
  40,
  17,
  41,
  49,
  42,
  43,
  44,
  18,
  45,
  46,
  47,
  19,
  48,
  20,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  58,
  59,
  57,
  60,
  21,
  22,
  61,
  69,
  62,
  23,
  63,
  64,
  65,
  0,
  66,
  67,
  68,
  73,
  24,
  70,
  71,
  72,
  25,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelinecustomvalue_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelinelabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelinelabelparagraphstyleindex_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelineshadow_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelineshowlabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelineshowline_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelineshowvaluelabel_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelinestroke_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelinetype_),
  PROTOBUF_FIELD_OFFSET(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelinevaluelabelparagraphstyleindex_),
  1,
  0,
  4,
  2,
  5,
  6,
  7,
  3,
  8,
  9,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 30, -1, sizeof(::TSCH::Generated::ChartStyleArchive)},
  { 54, 92, -1, sizeof(::TSCH::Generated::ChartNonStyleArchive)},
  { 124, 135, -1, sizeof(::TSCH::Generated::LegendStyleArchive)},
  { 140, -1, -1, sizeof(::TSCH::Generated::LegendNonStyleArchive)},
  { 146, 198, -1, sizeof(::TSCH::Generated::ChartAxisStyleArchive)},
  { 244, 274, -1, sizeof(::TSCH::Generated::ChartAxisNonStyleArchive)},
  { 298, 422, -1, sizeof(::TSCH::Generated::ChartSeriesStyleArchive)},
  { 540, 644, -1, sizeof(::TSCH::Generated::ChartSeriesNonStyleArchive)},
  { 742, 752, -1, sizeof(::TSCH::Generated::ReferenceLineStyleArchive)},
  { 756, 768, -1, sizeof(::TSCH::Generated::ReferenceLineNonStyleArchive)},
  { 774, 818, -1, sizeof(::TSCH::Generated::ChartGenericPropertyMapArchive)},
  { 856, 867, -1, sizeof(::TSCH::Generated::LegendGenericPropertyMapArchive)},
  { 872, 921, -1, sizeof(::TSCH::Generated::ChartAxisGenericPropertyMapArchive)},
  { 964, 1054, -1, sizeof(::TSCH::Generated::ChartSeriesGenericPropertyMapArchive)},
  { 1138, 1154, -1, sizeof(::TSCH::Generated::ReferenceLineGenericPropertyMapArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSCH::Generated::_ChartStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartNonStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_LegendStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_LegendNonStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartAxisStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartAxisNonStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartSeriesStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartSeriesNonStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ReferenceLineStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ReferenceLineNonStyleArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartGenericPropertyMapArchive_default_instance_._instance,
  &::TSCH::Generated::_LegendGenericPropertyMapArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartAxisGenericPropertyMapArchive_default_instance_._instance,
  &::TSCH::Generated::_ChartSeriesGenericPropertyMapArchive_default_instance_._instance,
  &::TSCH::Generated::_ReferenceLineGenericPropertyMapArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSCHArchives_2eGEN_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026TSCHArchives.GEN.proto\022\016TSCH.Generated"
  "\032\021TSPMessages.proto\032\021TSKArchives.proto\032\021"
  "TSDArchives.proto\032\021TSSArchives.proto\032\031TS"
  "CHArchives.Common.proto\032\024TSCH3DArchives."
  "proto\"\373\013\n\021ChartStyleArchive\022*\n\"tschchart"
  "infodefault3dchartopacity\030\001 \001(\002\022O\n\"tschc"
  "hartinfoarea3dlightingpackage\030\002 \001(\0132#.TS"
  "CH.Chart3DLightingPackageArchive\022N\n!tsch"
  "chartinfobar3dlightingpackage\030\003 \001(\0132#.TS"
  "CH.Chart3DLightingPackageArchive\022Q\n$tsch"
  "chartinfocolumn3dlightingpackage\030\004 \001(\0132#"
  ".TSCH.Chart3DLightingPackageArchive\022R\n%t"
  "schchartinfodefault3dlightingpackage\030\005 \001"
  "(\0132#.TSCH.Chart3DLightingPackageArchive\022"
  "O\n\"tschchartinfoline3dlightingpackage\030\006 "
  "\001(\0132#.TSCH.Chart3DLightingPackageArchive"
  "\022N\n!tschchartinfopie3dlightingpackage\030\007 "
  "\001(\0132#.TSCH.Chart3DLightingPackageArchive"
  "\022<\n\"tschchartinfodefaultbackgroundfill\030\010"
  " \001(\0132\020.TSD.FillArchive\022@\n$tschchartinfod"
  "efaultbackgroundstroke\030\t \001(\0132\022.TSD.Strok"
  "eArchive\022)\n!tschchartinfodefaultborderop"
  "acity\030\n \001(\002\022<\n tschchartinfodefaultborde"
  "rshadow\030\013 \001(\0132\022.TSD.ShadowArchive\022<\n tsc"
  "hchartinfodefaultborderstroke\030\014 \001(\0132\022.TS"
  "D.StrokeArchive\022)\n!tschchartinfodefaultc"
  "ombinelayers\030\r \001(\010\022:\n2tschchartinfodefau"
  "ltdatasetnameparagraphstyleindex\030\025 \001(\005\022@"
  "\n&tschchartinfodefaultgridbackgroundfill"
  "\030\016 \001(\0132\020.TSD.FillArchive\0221\n)tschchartinf"
  "odefaultgridbackgroundopacity\030\017 \001(\002\022\'\n\037t"
  "schchartinfodefaultinterbargap\030\020 \001(\002\022\'\n\037"
  "tschchartinfodefaultintersetgap\030\021 \001(\002\0224\n"
  ",tschchartinfodefaultradarradiusgridline"
  "curve\030\035 \001(\010\0225\n-tschchartinfodefaultround"
  "edcornerouterendonly\030{ \001(\010\022/\n\'tschcharti"
  "nfodefaultroundedcornerradius\030z \001(\002\022&\n\036t"
  "schchartinfodefaultshowborder\030\022 \001(\010\0222\n\036t"
  "schchartinfodefaulttitlecolor\030\023 \001(\0132\n.TS"
  "P.Color\0224\n,tschchartinfodefaulttitlepara"
  "graphstyleindex\030\024 \001(\0052L\n\007current\022\027.TSCH."
  "ChartStyleArchive\030\220N \001(\0132!.TSCH.Generate"
  "d.ChartStyleArchive\"\253\r\n\024ChartNonStyleArc"
  "hive\022&\n\036tschchartinfodefault3dbarshape\030\001"
  " \001(\005\022(\n tschchartinfodefault3dbeveledges"
  "\030\002 \001(\010\022.\n&tschchartinfodefault3dinterset"
  "depthgap\030\003 \001(\002\022B\n\036tschchartinfodefault3d"
  "rotation\030\004 \001(\0132\032.TSCH.Chart3DVectorArchi"
  "ve\022<\n\030tschchartinfoarea3dscale\030\005 \001(\0132\032.T"
  "SCH.Chart3DVectorArchive\022;\n\027tschchartinf"
  "obar3dscale\030\006 \001(\0132\032.TSCH.Chart3DVectorAr"
  "chive\022>\n\032tschchartinfocolumn3dscale\030\007 \001("
  "\0132\032.TSCH.Chart3DVectorArchive\022\?\n\033tschcha"
  "rtinfodefault3dscale\030\010 \001(\0132\032.TSCH.Chart3"
  "DVectorArchive\022<\n\030tschchartinfoline3dsca"
  "le\030\t \001(\0132\032.TSCH.Chart3DVectorArchive\022;\n\027"
  "tschchartinfopie3dscale\030\n \001(\0132\032.TSCH.Cha"
  "rt3DVectorArchive\022B\n\036tschchartinfodefaul"
  "t3dviewport\030\013 \001(\0132\032.TSCH.Chart3DVectorAr"
  "chive\022(\n tschchartinfoareacalloutlinetyp"
  "e\030p \001(\005\022\'\n\037tschchartinfobarcalloutlinety"
  "pe\030q \001(\005\022*\n\"tschchartinfobubblecalloutli"
  "netype\030r \001(\005\022+\n#tschchartinfodefaultcall"
  "outlinetype\030w \001(\005\022(\n tschchartinfolineca"
  "lloutlinetype\030s \001(\005\022\'\n\037tschchartinfopiec"
  "alloutlinetype\030o \001(\005\022+\n#tschchartinfosca"
  "ttercalloutlinetype\030t \001(\005\022/\n\'tschchartin"
  "fostackedareacalloutlinetype\030u \001(\005\022.\n&ts"
  "chchartinfostackedbarcalloutlinetype\030v \001"
  "(\005\022\?\n7tschchartinfodefaultdeprecatedroun"
  "dedcornerouterendonly\030y \001(\010\0229\n1tschchart"
  "infodefaultdeprecatedroundedcornerradius"
  "\030x \001(\002\022/\n\'tschchartinfodefaultdatasetnam"
  "elocation\030\030 \001(\005\0223\n+tschchartinfodefaultd"
  "onutplacetitleatcenter\030\034 \001(\010\022\'\n\037tschchar"
  "tinfodefaultinnerradius\030\033 \001(\002\0220\n(tschcha"
  "rtinfodefaultmultidatacontroltype\030\031 \001(\005\022"
  ")\n!tschchartinfodefaultpiestartangle\030\023 \001"
  "(\002\022+\n#tschchartinfodefaultradarstartangl"
  "e\030\035 \001(\002\022&\n\036tschchartinfodefaultshowlegen"
  "d\030\024 \001(\010\022%\n\035tschchartinfodefaultshowtitle"
  "\030\025 \001(\010\022*\n\"tschchartinfodefaultskiphidden"
  "data\030\026 \001(\010\022!\n\031tschchartinfodefaulttitle\030"
  "\027 \001(\t2R\n\007current\022\032.TSCH.ChartNonStyleArc"
  "hive\030\220N \001(\0132$.TSCH.Generated.ChartNonSty"
  "leArchive\"\355\002\n\022LegendStyleArchive\0224\n\032tsch"
  "legendmodeldefaultfill\030\001 \001(\0132\020.TSD.FillA"
  "rchive\0226\n.tschlegendmodeldefaultlabelpar"
  "agraphstyleindex\030\002 \001(\005\022%\n\035tschlegendmode"
  "ldefaultopacity\030\003 \001(\002\0228\n\034tschlegendmodel"
  "defaultshadow\030\004 \001(\0132\022.TSD.ShadowArchive\022"
  "8\n\034tschlegendmodeldefaultstroke\030\005 \001(\0132\022."
  "TSD.StrokeArchive2N\n\007current\022\030.TSCH.Lege"
  "ndStyleArchive\030\220N \001(\0132\".TSCH.Generated.L"
  "egendStyleArchive\"m\n\025LegendNonStyleArchi"
  "ve2T\n\007current\022\033.TSCH.LegendNonStyleArchi"
  "ve\030\220N \001(\0132%.TSCH.Generated.LegendNonStyl"
  "eArchive\"\341\023\n\025ChartAxisStyleArchive\022.\n&ts"
  "chchartaxiscategory3dgridlineopacity\030\001 \001"
  "(\002\022+\n#tschchartaxisvalue3dgridlineopacit"
  "y\030\002 \001(\002\022A\n%tschchartaxiscategory3dgridli"
  "nestroke\030\003 \001(\0132\022.TSD.StrokeArchive\022>\n\"ts"
  "chchartaxisvalue3dgridlinestroke\030\004 \001(\0132\022"
  ".TSD.StrokeArchive\022.\n&tschchartaxiscateg"
  "oryhorizontalspacing\030\005 \001(\005\0227\n/tschcharta"
  "xisdefaultlabelanglebaselinedirection\030. "
  "\001(\005\0225\n-tschchartaxiscategorylabelparagra"
  "phstyleindex\030\006 \001(\005\0224\n,tschchartaxisdefau"
  "ltlabelparagraphstyleindex\030\007 \001(\005\0222\n*tsch"
  "chartaxisvaluelabelparagraphstyleindex\030\010"
  " \001(\005\022.\n&tschchartaxiscategorylabelsorien"
  "tation\030\t \001(\002\022-\n%tschchartaxisdefaultlabe"
  "lsorientation\030\n \001(\002\022+\n#tschchartaxisvalu"
  "elabelsorientation\030\013 \001(\002\0221\n)tschchartaxi"
  "scategorymajorgridlineopacity\030\014 \001(\002\022.\n&t"
  "schchartaxisvaluemajorgridlineopacity\030\r "
  "\001(\002\022D\n(tschchartaxiscategorymajorgridlin"
  "eshadow\030\016 \001(\0132\022.TSD.ShadowArchive\022A\n%tsc"
  "hchartaxisvaluemajorgridlineshadow\030\017 \001(\013"
  "2\022.TSD.ShadowArchive\022D\n(tschchartaxiscat"
  "egorymajorgridlinestroke\030\020 \001(\0132\022.TSD.Str"
  "okeArchive\022A\n%tschchartaxisvaluemajorgri"
  "dlinestroke\030\021 \001(\0132\022.TSD.StrokeArchive\0221\n"
  ")tschchartaxiscategoryminorgridlineopaci"
  "ty\030\022 \001(\002\022.\n&tschchartaxisvalueminorgridl"
  "ineopacity\030\023 \001(\002\022D\n(tschchartaxiscategor"
  "yminorgridlineshadow\030\024 \001(\0132\022.TSD.ShadowA"
  "rchive\022A\n%tschchartaxisvalueminorgridlin"
  "eshadow\030\025 \001(\0132\022.TSD.ShadowArchive\022D\n(tsc"
  "hchartaxiscategoryminorgridlinestroke\030\026 "
  "\001(\0132\022.TSD.StrokeArchive\022A\n%tschchartaxis"
  "valueminorgridlinestroke\030\027 \001(\0132\022.TSD.Str"
  "okeArchive\022%\n\035tschchartaxiscategoryshowa"
  "xis\030\030 \001(\010\022\"\n\032tschchartaxisvalueshowaxis\030"
  "\031 \001(\010\022.\n&tschchartaxisdefaultshowextensi"
  "onlines\030/ \001(\010\0222\n*tschchartaxiscategorysh"
  "owgridlinetickmarks\030* \001(\010\022/\n\'tschchartax"
  "isvalueshowgridlinetickmarks\030+ \001(\010\022*\n\"ts"
  "chchartaxiscategoryshowlastlabel\030\032 \001(\010\022/"
  "\n\'tschchartaxiscategoryshowmajorgridline"
  "s\030\033 \001(\010\0224\n,tschchartaxispolarcategorysho"
  "wmajorgridlines\030, \001(\010\022,\n$tschchartaxisva"
  "lueshowmajorgridlines\030\034 \001(\010\022/\n\'tschchart"
  "axiscategoryshowmajortickmarks\030\035 \001(\010\022,\n$"
  "tschchartaxisvalueshowmajortickmarks\030\036 \001"
  "(\010\022*\n\"tschchartaxisvalueshowminimumlabel"
  "\030\037 \001(\010\022/\n\'tschchartaxiscategoryshowminor"
  "gridlines\030  \001(\010\022,\n$tschchartaxisvaluesho"
  "wminorgridlines\030! \001(\010\022/\n\'tschchartaxisca"
  "tegoryshowminortickmarks\030\" \001(\010\022,\n$tschch"
  "artaxisvalueshowminortickmarks\030# \001(\010\022-\n%"
  "tschchartaxiscategorytickmarklocation\030$ "
  "\001(\005\022*\n\"tschchartaxisvaluetickmarklocatio"
  "n\030% \001(\005\0225\n-tschchartaxiscategorytitlepar"
  "agraphstyleindex\030& \001(\005\0224\n,tschchartaxisd"
  "efaulttitleparagraphstyleindex\030\' \001(\005\0222\n*"
  "tschchartaxisvaluetitleparagraphstyleind"
  "ex\030( \001(\005\022,\n$tschchartaxiscategoryvertica"
  "lspacing\030) \001(\0052T\n\007current\022\033.TSCH.ChartAx"
  "isStyleArchive\030\220N \001(\0132%.TSCH.Generated.C"
  "hartAxisStyleArchive\"\247\n\n\030ChartAxisNonSty"
  "leArchive\022C\n!tschchartaxisdefault1_0date"
  "format\030\024 \001(\0132\030.TSK.FormatStructArchive\022E"
  "\n#tschchartaxisdefault1_0numberformat\030\002 "
  "\001(\0132\030.TSK.FormatStructArchive\022+\n#tschcha"
  "rtaxisdefault3dlabelposition\030\001 \001(\005\022@\n\036ts"
  "chchartaxisdefaultdateformat\030\026 \001(\0132\030.TSK"
  ".FormatStructArchive\022D\n\"tschchartaxisdef"
  "aultdurationformat\030\025 \001(\0132\030.TSK.FormatStr"
  "uctArchive\022*\n\"tschchartaxisdefaultlabele"
  "xplosion\030\027 \001(\002\022B\n tschchartaxisdefaultnu"
  "mberformat\030* \001(\0132\030.TSK.FormatStructArchi"
  "ve\022,\n$tschchartaxisdefaultnumberformatty"
  "pe\030\003 \001(\005\022)\n!tschchartaxisvaluenumberofde"
  "cades\030\004 \001(\005\0220\n(tschchartaxisvaluenumbero"
  "fmajorgridlines\030\005 \001(\005\0220\n(tschchartaxisva"
  "luenumberofminorgridlines\030\006 \001(\005\022(\n tschc"
  "hartaxiscategoryplottoedges\030\007 \001(\010\022\037\n\027tsc"
  "hchartaxisvaluescale\030\010 \001(\005\022\'\n\037tschcharta"
  "xiscategoryshowlabels\030\t \001(\010\022&\n\036tschchart"
  "axisdefaultshowlabels\030\n \001(\010\022$\n\034tschchart"
  "axisvalueshowlabels\030\013 \001(\010\022-\n%tschchartax"
  "iscategoryshowserieslabels\030\014 \001(\010\022.\n&tsch"
  "chartaxismultidatashowserieslabels\030\023 \001(\010"
  "\022&\n\036tschchartaxiscategoryshowtitle\030\r \001(\010"
  "\022#\n\033tschchartaxisvalueshowtitle\030\016 \001(\010\022\"\n"
  "\032tschchartaxiscategorytitle\030\017 \001(\t\022\037\n\027tsc"
  "hchartaxisvaluetitle\030\020 \001(\t\022F\n\033tschcharta"
  "xisdefaultusermax\030\021 \001(\0132!.TSCH.ChartsNSN"
  "umberDoubleArchive\022F\n\033tschchartaxisdefau"
  "ltusermin\030\022 \001(\0132!.TSCH.ChartsNSNumberDou"
  "bleArchive2Z\n\007current\022\036.TSCH.ChartAxisNo"
  "nStyleArchive\030\220N \001(\0132(.TSCH.Generated.Ch"
  "artAxisNonStyleArchive\"\2635\n\027ChartSeriesSt"
  "yleArchive\022I\n+tschchartseriesdefaultcall"
  "outlineendlineend\030\202\001 \001(\0132\023.TSD.LineEndAr"
  "chive\022K\n-tschchartseriesdefaultcalloutli"
  "nestartlineend\030\201\001 \001(\0132\023.TSD.LineEndArchi"
  "ve\022I\n,tschchartseriesdefaultcalloutlines"
  "trokestyle\030\200\001 \001(\0132\022.TSD.StrokeArchive\022B\n"
  "%tschchartseriesdefaulterrorbarlineend\030\001"
  " \001(\0132\023.TSD.LineEndArchive\022J\n-tschchartse"
  "riesdefaulterrorbarlineendscatterx\030\002 \001(\013"
  "2\023.TSD.LineEndArchive\022@\n$tschchartseries"
  "defaulterrorbarshadow\030\003 \001(\0132\022.TSD.Shadow"
  "Archive\022-\n%tschchartseriesdefaulterrorba"
  "rspacing\030b \001(\005\0225\n-tschchartseriesdefault"
  "errorbarspacingscatterx\030c \001(\005\022@\n$tschcha"
  "rtseriesdefaulterrorbarstroke\030\004 \001(\0132\022.TS"
  "D.StrokeArchive\022H\n,tschchartseriesdefaul"
  "terrorbarstrokescatterx\030\005 \001(\0132\022.TSD.Stro"
  "keArchive\0223\n\031tschchartseries3dareafill\030\006"
  " \001(\0132\020.TSD.FillArchive\0222\n\030tschchartserie"
  "s3dbarfill\030\007 \001(\0132\020.TSD.FillArchive\0225\n\033ts"
  "chchartseries3dcolumnfill\030\010 \001(\0132\020.TSD.Fi"
  "llArchive\0223\n\031tschchartseries3dlinefill\030\t"
  " \001(\0132\020.TSD.FillArchive\0222\n\030tschchartserie"
  "s3dpiefill\030\n \001(\0132\020.TSD.FillArchive\0221\n\027ts"
  "chchartseriesareafill\030\013 \001(\0132\020.TSD.FillAr"
  "chive\0220\n\026tschchartseriesbarfill\030\014 \001(\0132\020."
  "TSD.FillArchive\0223\n\031tschchartseriescolumn"
  "fill\030\r \001(\0132\020.TSD.FillArchive\0224\n\032tschchar"
  "tseriesdefaultfill\030\016 \001(\0132\020.TSD.FillArchi"
  "ve\0226\n\034tschchartseriesmixedareafill\030\017 \001(\013"
  "2\020.TSD.FillArchive\0228\n\036tschchartseriesmix"
  "edcolumnfill\030\020 \001(\0132\020.TSD.FillArchive\0220\n\026"
  "tschchartseriespiefill\030\021 \001(\0132\020.TSD.FillA"
  "rchive\0227\n\034tschchartseriesradarareafill\030\245"
  "\001 \001(\0132\020.TSD.FillArchive\022C\n:tschchartseri"
  "esradarareafilluseseriesstrokealphamulti"
  "plier\030\275\001 \001(\002\0224\n+tschchartseriesradararea"
  "filluseseriesstroke\030\274\001 \001(\010\0223\n+tschcharts"
  "eriesarealabelparagraphstyleindex\030\022 \001(\005\022"
  "2\n*tschchartseriesbarlabelparagraphstyle"
  "index\030\023 \001(\005\0226\n.tschchartseriesdefaultlab"
  "elparagraphstyleindex\030\024 \001(\005\0225\n,tschchart"
  "seriesdonutlabelparagraphstyleindex\030\230\001 \001"
  "(\005\0223\n+tschchartserieslinelabelparagraphs"
  "tyleindex\030\025 \001(\005\0224\n,tschchartseriesmixedl"
  "abelparagraphstyleindex\030\026 \001(\005\0222\n*tschcha"
  "rtseriespielabelparagraphstyleindex\030\027 \001("
  "\005\0225\n,tschchartseriesradarlabelparagraphs"
  "tyleindex\030\247\001 \001(\005\022%\n\035tschchartseriesdefau"
  "ltopacity\030\030 \001(\002\022:\n2tschchartseriesareaou"
  "tsidelabelparagraphstyleindex\030\031 \001(\005\0229\n1t"
  "schchartseriesbaroutsidelabelparagraphst"
  "yleindex\030\032 \001(\005\022=\n5tschchartseriesdefault"
  "outsidelabelparagraphstyleindex\030\033 \001(\005\022<\n"
  "3tschchartseriesdonutoutsidelabelparagra"
  "phstyleindex\030\231\001 \001(\005\022;\n3tschchartseriesmi"
  "xedoutsidelabelparagraphstyleindex\030\034 \001(\005"
  "\0229\n1tschchartseriespieoutsidelabelparagr"
  "aphstyleindex\030\035 \001(\005\022<\n3tschchartseriesra"
  "daroutsidelabelparagraphstyleindex\030\250\001 \001("
  "\005\0227\n\033tschchartseries3dareashadow\030\036 \001(\0132\022"
  ".TSD.ShadowArchive\0226\n\032tschchartseries3db"
  "arshadow\030\037 \001(\0132\022.TSD.ShadowArchive\0229\n\035ts"
  "chchartseries3dcolumnshadow\030  \001(\0132\022.TSD."
  "ShadowArchive\0227\n\033tschchartseries3dlinesh"
  "adow\030! \001(\0132\022.TSD.ShadowArchive\0226\n\032tschch"
  "artseries3dpieshadow\030\" \001(\0132\022.TSD.ShadowA"
  "rchive\0225\n\031tschchartseriesareashadow\030# \001("
  "\0132\022.TSD.ShadowArchive\0224\n\030tschchartseries"
  "barshadow\030$ \001(\0132\022.TSD.ShadowArchive\0227\n\033t"
  "schchartseriesbubbleshadow\030% \001(\0132\022.TSD.S"
  "hadowArchive\0228\n\034tschchartseriesdefaultsh"
  "adow\030& \001(\0132\022.TSD.ShadowArchive\0225\n\031tschch"
  "artserieslineshadow\030\' \001(\0132\022.TSD.ShadowAr"
  "chive\022:\n\036tschchartseriesmixedareashadow\030"
  "( \001(\0132\022.TSD.ShadowArchive\022<\n tschchartse"
  "riesmixedcolumnshadow\030) \001(\0132\022.TSD.Shadow"
  "Archive\022:\n\036tschchartseriesmixedlineshado"
  "w\030* \001(\0132\022.TSD.ShadowArchive\0224\n\030tschchart"
  "seriespieshadow\030+ \001(\0132\022.TSD.ShadowArchiv"
  "e\022;\n\036tschchartseriesradarareashadow\030\251\001 \001"
  "(\0132\022.TSD.ShadowArchive\0228\n\034tschchartserie"
  "sscattershadow\030, \001(\0132\022.TSD.ShadowArchive"
  "\0225\n\031tschchartseriesareastroke\030- \001(\0132\022.TS"
  "D.StrokeArchive\0224\n\030tschchartseriesbarstr"
  "oke\030. \001(\0132\022.TSD.StrokeArchive\0227\n\033tschcha"
  "rtseriesbubblestroke\030/ \001(\0132\022.TSD.StrokeA"
  "rchive\0225\n\031tschchartserieslinestroke\0300 \001("
  "\0132\022.TSD.StrokeArchive\022:\n\036tschchartseries"
  "mixedareastroke\0301 \001(\0132\022.TSD.StrokeArchiv"
  "e\022<\n tschchartseriesmixedcolumnstroke\0302 "
  "\001(\0132\022.TSD.StrokeArchive\022:\n\036tschchartseri"
  "esmixedlinestroke\0303 \001(\0132\022.TSD.StrokeArch"
  "ive\0224\n\030tschchartseriespiestroke\0304 \001(\0132\022."
  "TSD.StrokeArchive\022;\n\036tschchartseriesrada"
  "rareastroke\030\254\001 \001(\0132\022.TSD.StrokeArchive\0228"
  "\n\034tschchartseriesscatterstroke\0305 \001(\0132\022.T"
  "SD.StrokeArchive\0227\n\035tschchartseriesareas"
  "ymbolfill\0306 \001(\0132\020.TSD.FillArchive\0229\n\037tsc"
  "hchartseriesbubblesymbolfill\0307 \001(\0132\020.TSD"
  ".FillArchive\0227\n\035tschchartserieslinesymbo"
  "lfill\0308 \001(\0132\020.TSD.FillArchive\022<\n\"tschcha"
  "rtseriesmixedareasymbolfill\0309 \001(\0132\020.TSD."
  "FillArchive\022<\n\"tschchartseriesmixedlines"
  "ymbolfill\030: \001(\0132\020.TSD.FillArchive\022=\n\"tsc"
  "hchartseriesradarareasymbolfill\030\257\001 \001(\0132\020"
  ".TSD.FillArchive\022:\n tschchartseriesscatt"
  "ersymbolfill\030; \001(\0132\020.TSD.FillArchive\0222\n*"
  "tschchartseriesareasymbolfilluseseriesfi"
  "ll\030< \001(\010\0222\n*tschchartserieslinesymbolfil"
  "luseseriesfill\030= \001(\010\0227\n/tschchartseriesm"
  "ixedareasymbolfilluseseriesfill\030> \001(\010\0227\n"
  "/tschchartseriesmixedlinesymbolfillusese"
  "riesfill\030\? \001(\010\0228\n/tschchartseriesradarar"
  "easymbolfilluseseriesfill\030\261\001 \001(\010\0224\n,tsch"
  "chartseriesareasymbolfilluseseriesstroke"
  "\030@ \001(\010\0226\n.tschchartseriesbubblesymbolfil"
  "luseseriesstroke\030A \001(\010\0224\n,tschchartserie"
  "slinesymbolfilluseseriesstroke\030B \001(\010\0229\n1"
  "tschchartseriesmixedareasymbolfilluseser"
  "iesstroke\030C \001(\010\0229\n1tschchartseriesmixedl"
  "inesymbolfilluseseriesstroke\030D \001(\010\022:\n1ts"
  "chchartseriesradarareasymbolfilluseserie"
  "sstroke\030\263\001 \001(\010\0227\n/tschchartseriesscatter"
  "symbolfilluseseriesstroke\030E \001(\010\022%\n\035tschc"
  "hartseriesareasymbolsize\030F \001(\002\022%\n\035tschch"
  "artserieslinesymbolsize\030G \001(\002\022*\n\"tschcha"
  "rtseriesmixedareasymbolsize\030H \001(\002\022*\n\"tsc"
  "hchartseriesmixedlinesymbolsize\030I \001(\002\022+\n"
  "\"tschchartseriesradarareasymbolsize\030\265\001 \001"
  "(\002\022(\n tschchartseriesscattersymbolsize\030J"
  " \001(\002\022;\n\037tschchartseriesareasymbolstroke\030"
  "K \001(\0132\022.TSD.StrokeArchive\022=\n!tschchartse"
  "riesbubblesymbolstroke\030L \001(\0132\022.TSD.Strok"
  "eArchive\022;\n\037tschchartserieslinesymbolstr"
  "oke\030M \001(\0132\022.TSD.StrokeArchive\022@\n$tschcha"
  "rtseriesmixedareasymbolstroke\030N \001(\0132\022.TS"
  "D.StrokeArchive\022@\n$tschchartseriesmixedl"
  "inesymbolstroke\030O \001(\0132\022.TSD.StrokeArchiv"
  "e\022A\n$tschchartseriesradarareasymbolstrok"
  "e\030\267\001 \001(\0132\022.TSD.StrokeArchive\022>\n\"tschchar"
  "tseriesscattersymbolstroke\030P \001(\0132\022.TSD.S"
  "trokeArchive\022A\n%tschchartseriesdefaulttr"
  "endlineshadow\030U \001(\0132\022.TSD.ShadowArchive\022"
  "A\n%tschchartseriesdefaulttrendlinestroke"
  "\030V \001(\0132\022.TSD.StrokeArchive\0226\n.tschcharts"
  "eriesdefaulttrendlineequationopacity\030Q \001"
  "(\002\022B\n:tschchartseriesdefaulttrendlineequ"
  "ationparagraphstyleindex\030R \001(\005\0226\n.tschch"
  "artseriesdefaulttrendlinersquaredopacity"
  "\030S \001(\002\022B\n:tschchartseriesdefaulttrendlin"
  "ersquaredparagraphstyleindex\030T \001(\005\022-\n%ts"
  "chchartseriesareavaluelabelposition\030W \001("
  "\005\022,\n$tschchartseriesbarvaluelabelpositio"
  "n\030X \001(\005\022/\n\'tschchartseriesbubblevaluelab"
  "elposition\030Y \001(\005\0220\n(tschchartseriesdefau"
  "ltvaluelabelposition\030Z \001(\005\022-\n%tschcharts"
  "erieslinevaluelabelposition\030[ \001(\005\0222\n*tsc"
  "hchartseriesmixedareavaluelabelposition\030"
  "\\ \001(\005\0224\n,tschchartseriesmixedcolumnvalue"
  "labelposition\030] \001(\005\0222\n*tschchartseriesmi"
  "xedlinevaluelabelposition\030^ \001(\005\0223\n*tschc"
  "hartseriesradarareavaluelabelposition\030\271\001"
  " \001(\005\0220\n(tschchartseriesscattervaluelabel"
  "position\030_ \001(\005\0224\n,tschchartseriesstacked"
  "areavaluelabelposition\030` \001(\005\0223\n+tschchar"
  "tseriesstackedbarvaluelabelposition\030a \001("
  "\005\022/\n\'tschchartseriesdefaultvaluelabelspa"
  "cing\030d \001(\0052X\n\007current\022\035.TSCH.ChartSeries"
  "StyleArchive\030\220N \001(\0132\'.TSCH.Generated.Cha"
  "rtSeriesStyleArchive\"\353\'\n\032ChartSeriesNonS"
  "tyleArchive\022E\n#tschchartseriesdefault1_0"
  "dateformat\030E \001(\0132\030.TSK.FormatStructArchi"
  "ve\022G\n%tschchartseriesdefault1_0numberfor"
  "mat\030\025 \001(\0132\030.TSK.FormatStructArchive\022C\n!t"
  "schchartseriespie1_0numberformat\030\026 \001(\0132\030"
  ".TSK.FormatStructArchive\022+\n#tschchartser"
  "iespie2_3labelexplosion\030\020 \001(\002\022,\n$tschcha"
  "rtseriesbubbleadjustmentscale\030\001 \001(\002\022B\n t"
  "schchartseriesdefaultdateformat\030G \001(\0132\030."
  "TSK.FormatStructArchive\022F\n$tschchartseri"
  "esdefaultdurationformat\030F \001(\0132\030.TSK.Form"
  "atStructArchive\022,\n$tschchartseriesareaen"
  "ablecalloutline\030g \001(\005\022+\n#tschchartseries"
  "barenablecalloutline\030h \001(\005\022.\n&tschcharts"
  "eriesbubbleenablecalloutline\030i \001(\005\022/\n\'ts"
  "chchartseriesdefaultenablecalloutline\030n "
  "\001(\005\022,\n$tschchartserieslineenablecalloutl"
  "ine\030j \001(\005\022+\n#tschchartseriespieenablecal"
  "loutline\030f \001(\005\022/\n\'tschchartseriesscatter"
  "enablecalloutline\030k \001(\005\0223\n+tschchartseri"
  "esstackedareaenablecalloutline\030l \001(\005\0222\n*"
  "tschchartseriesstackedbarenablecalloutli"
  "ne\030m \001(\005\022d\n0tschchartseriesdefaulterrorb"
  "arcustomnegativedata\030\002 \001(\0132*.TSCH.Charts"
  "NSArrayOfNSNumberDoubleArchive\022l\n8tschch"
  "artseriesdefaulterrorbarcustomnegativeda"
  "tascatterx\030\003 \001(\0132*.TSCH.ChartsNSArrayOfN"
  "SNumberDoubleArchive\022d\n0tschchartseriesd"
  "efaulterrorbarcustompositivedata\030\004 \001(\0132*"
  ".TSCH.ChartsNSArrayOfNSNumberDoubleArchi"
  "ve\022l\n8tschchartseriesdefaulterrorbarcust"
  "ompositivedatascatterx\030\005 \001(\0132*.TSCH.Char"
  "tsNSArrayOfNSNumberDoubleArchive\0220\n(tsch"
  "chartseriesdefaulterrorbarfixedvalue\030\006 \001"
  "(\002\0228\n0tschchartseriesdefaulterrorbarfixe"
  "dvaluescatterx\030\007 \001(\002\0222\n*tschchartseriesd"
  "efaulterrorbarpercentvalue\030\010 \001(\002\022:\n2tsch"
  "chartseriesdefaulterrorbarpercentvaluesc"
  "atterx\030\t \001(\002\022-\n%tschchartseriesdefaulter"
  "rorbarsetting\030\n \001(\005\0225\n-tschchartseriesde"
  "faulterrorbarsettingscatterx\030\013 \001(\005\0221\n)ts"
  "chchartseriesdefaulterrorbarstddevvalue\030"
  "\014 \001(\002\0229\n1tschchartseriesdefaulterrorbars"
  "tddevvaluescatterx\030\r \001(\002\022*\n\"tschchartser"
  "iesdefaulterrorbartype\030\016 \001(\005\0222\n*tschchar"
  "tseriesdefaulterrorbartypescatterx\030\017 \001(\005"
  "\022)\n tschchartseriespielabelexplosion\030\223\001 "
  "\001(\002\022%\n\035tschchartseriesbubblelinetype\030\021 \001"
  "(\005\022#\n\033tschchartserieslinelinetype\030\022 \001(\005\022"
  "(\n tschchartseriesmixedlinelinetype\030\023 \001("
  "\005\022)\n tschchartseriesradararealinetype\030\275\001"
  " \001(\005\022&\n\036tschchartseriesscatterlinetype\030\024"
  " \001(\005\022D\n\"tschchartseriesdefaultnumberform"
  "at\030b \001(\0132\030.TSK.FormatStructArchive\022@\n\036ts"
  "chchartseriespienumberformat\030c \001(\0132\030.TSK"
  ".FormatStructArchive\022.\n&tschchartseriesd"
  "efaultnumberformattype\030\027 \001(\005\022*\n\"tschchar"
  "tseriespienumberformattype\030\030 \001(\005\022K\n)tsch"
  "chartseriesstackedpercentnumberformat\030\031 "
  "\001(\0132\030.TSK.FormatStructArchive\022(\n tschcha"
  "rtseriesdefaultseriestype\030\032 \001(\005\022*\n\"tschc"
  "hartseriesdefaultshowerrorbar\030\033 \001(\010\0222\n*t"
  "schchartseriesdefaultshowerrorbarscatter"
  "x\030\034 \001(\010\022.\n&tschchartseriesbubbleshowlabe"
  "lsinfront\030e \001(\010\022/\n\'tschchartseriesdefaul"
  "tshowlabelsinfront\030d \001(\010\022&\n\036tschchartser"
  "iesscattershowline\030\035 \001(\010\022-\n%tschchartser"
  "iesbubbleshownegativedata\030\036 \001(\010\022-\n%tschc"
  "hartseriesbubbleshowserieslabels\030A \001(\010\022*"
  "\n\"tschchartseriespieshowserieslabels\030\037 \001"
  "(\010\022.\n&tschchartseriesscattershowseriesla"
  "bels\030C \001(\010\022%\n\035tschchartseriesareashowsym"
  "bol\030  \001(\010\022%\n\035tschchartserieslineshowsymb"
  "ol\030! \001(\010\022*\n\"tschchartseriesmixedareashow"
  "symbol\030\" \001(\010\022*\n\"tschchartseriesmixedline"
  "showsymbol\030# \001(\010\022+\n\"tschchartseriesradar"
  "areashowsymbol\030\240\001 \001(\010\022(\n tschchartseries"
  "scattershowsymbol\030$ \001(\010\022+\n#tschchartseri"
  "esdefaultshowtrendline\030% \001(\010\022*\n\"tschchar"
  "tseriesareashowvaluelabels\030& \001(\010\022)\n!tsch"
  "chartseriesbarshowvaluelabels\030\' \001(\010\022,\n$t"
  "schchartseriesbubbleshowvaluelabels\030( \001("
  "\010\022-\n%tschchartseriesdefaultshowvaluelabe"
  "ls\030) \001(\010\022*\n\"tschchartserieslineshowvalue"
  "labels\030* \001(\010\022+\n#tschchartseriesmixedshow"
  "valuelabels\030+ \001(\010\022)\n!tschchartseriespies"
  "howvaluelabels\030, \001(\010\022,\n#tschchartseriesr"
  "adarshowvaluelabels\030\242\001 \001(\010\022-\n%tschcharts"
  "eriesscattershowvaluelabels\030- \001(\010\022*\n\"tsc"
  "hchartseriesbubblesizedimension\030. \001(\005\022\'\n"
  "\036tschchartseriesareastacklabels\030\213\001 \001(\010\022&"
  "\n\035tschchartseriesbarstacklabels\030\214\001 \001(\010\022)"
  "\n tschchartseriesbubblestacklabels\030\215\001 \001("
  "\010\022*\n!tschchartseriesdefaultstacklabels\030\222"
  "\001 \001(\010\022\'\n\036tschchartserieslinestacklabels\030"
  "\216\001 \001(\010\022&\n\035tschchartseriespiestacklabels\030"
  "\212\001 \001(\010\022*\n!tschchartseriesscatterstacklab"
  "els\030\217\001 \001(\010\022.\n%tschchartseriesstackedarea"
  "stacklabels\030\220\001 \001(\010\022-\n$tschchartseriessta"
  "ckedbarstacklabels\030\221\001 \001(\010\022%\n\035tschchartse"
  "riesareasymboltype\030/ \001(\005\022%\n\035tschchartser"
  "ieslinesymboltype\0300 \001(\005\022*\n\"tschchartseri"
  "esmixedareasymboltype\0301 \001(\005\022*\n\"tschchart"
  "seriesmixedlinesymboltype\0302 \001(\005\022+\n\"tschc"
  "hartseriesradarareasymboltype\030\243\001 \001(\005\022(\n "
  "tschchartseriesscattersymboltype\0303 \001(\005\0226"
  "\n.tschchartseriesdefaulttrendlineequatio"
  "noffsetx\0304 \001(\002\0226\n.tschchartseriesdefault"
  "trendlineequationoffsety\0305 \001(\002\0222\n*tschch"
  "artseriesdefaulttrendlinelabelstring\0306 \001"
  "(\t\022,\n$tschchartseriesdefaulttrendlineord"
  "er\0307 \001(\005\022-\n%tschchartseriesdefaulttrendl"
  "ineperiod\0308 \001(\005\0226\n.tschchartseriesdefaul"
  "ttrendlinersquaredoffsetx\0309 \001(\002\0226\n.tschc"
  "hartseriesdefaulttrendlinersquaredoffset"
  "y\030: \001(\002\0223\n+tschchartseriesdefaulttrendli"
  "neshowequation\030; \001(\010\0220\n(tschchartseriesd"
  "efaulttrendlineshowlabel\030< \001(\010\0222\n*tschch"
  "artseriesdefaulttrendlineshowr2value\030= \001"
  "(\010\022+\n#tschchartseriesdefaulttrendlinetyp"
  "e\030> \001(\005\022,\n$tschchartseriesbubblevaluelab"
  "elsaxis\030B \001(\005\022-\n%tschchartseriesscatterv"
  "aluelabelsaxis\030D \001(\005\022(\n tschchartseriesp"
  "iewedgeexplosion\030\? \001(\002\022*\n\"tschchartserie"
  "sdefaultyaxisordinal\030@ \001(\0052^\n\007current\022 ."
  "TSCH.ChartSeriesNonStyleArchive\030\220N \001(\0132*"
  ".TSCH.Generated.ChartSeriesNonStyleArchi"
  "ve\"\352\002\n\031ReferenceLineStyleArchive\0228\n0tsch"
  "referencelinedefaultlabelparagraphstylei"
  "ndex\030\003 \001(\005\022:\n\036tschreferencelinedefaultsh"
  "adow\030\002 \001(\0132\022.TSD.ShadowArchive\022:\n\036tschre"
  "ferencelinedefaultstroke\030\001 \001(\0132\022.TSD.Str"
  "okeArchive\022=\n5tschreferencelinedefaultva"
  "luelabelparagraphstyleindex\030\004 \001(\0052\\\n\007cur"
  "rent\022\037.TSCH.ReferenceLineStyleArchive\030\220N"
  " \001(\0132).TSCH.Generated.ReferenceLineStyle"
  "Archive\"\244\003\n\034ReferenceLineNonStyleArchive"
  "\022N\n#tschreferencelinedefaultcustomvalue\030"
  "\006 \001(\0132!.TSCH.ChartsNSNumberDoubleArchive"
  "\022%\n\035tschreferencelinedefaultlabel\030\005 \001(\t\022"
  ")\n!tschreferencelinedefaultshowlabel\030\003 \001"
  "(\010\022(\n tschreferencelinedefaultshowline\030\002"
  " \001(\010\022.\n&tschreferencelinedefaultshowvalu"
  "elabel\030\004 \001(\010\022$\n\034tschreferencelinedefault"
  "type\030\001 \001(\0052b\n\007current\022\".TSCH.ReferenceLi"
  "neNonStyleArchive\030\220N \001(\0132,.TSCH.Generate"
  "d.ReferenceLineNonStyleArchive\"\306\r\n\036Chart"
  "GenericPropertyMapArchive\022\037\n\027tschchartin"
  "fo3dbarshape\030\001 \001(\005\022!\n\031tschchartinfo3dbev"
  "eledges\030\002 \001(\010\022#\n\033tschchartinfo3dchartopa"
  "city\030\003 \001(\002\022\'\n\037tschchartinfo3dintersetdep"
  "thgap\030\004 \001(\002\022K\n\036tschchartinfo3dlightingpa"
  "ckage\030\005 \001(\0132#.TSCH.Chart3DLightingPackag"
  "eArchive\022;\n\027tschchartinfo3drotation\030\006 \001("
  "\0132\032.TSCH.Chart3DVectorArchive\0228\n\024tschcha"
  "rtinfo3dscale\030\007 \001(\0132\032.TSCH.Chart3DVector"
  "Archive\022;\n\027tschchartinfo3dviewport\030\010 \001(\013"
  "2\032.TSCH.Chart3DVectorArchive\0225\n\033tschchar"
  "tinfobackgroundfill\030\t \001(\0132\020.TSD.FillArch"
  "ive\0229\n\035tschchartinfobackgroundstroke\030\n \001"
  "(\0132\022.TSD.StrokeArchive\022\"\n\032tschchartinfob"
  "orderopacity\030\013 \001(\002\0225\n\031tschchartinfoborde"
  "rshadow\030\014 \001(\0132\022.TSD.ShadowArchive\0225\n\031tsc"
  "hchartinfoborderstroke\030\r \001(\0132\022.TSD.Strok"
  "eArchive\022$\n\034tschchartinfocalloutlinetype"
  "\030\016 \001(\005\022\"\n\032tschchartinfocombinelayers\030\017 \001"
  "(\010\0228\n0tschchartinfodeprecatedroundedcorn"
  "erouterendonly\030\020 \001(\010\0222\n*tschchartinfodep"
  "recatedroundedcornerradius\030\021 \001(\002\022(\n tsch"
  "chartinfodatasetnamelocation\030\022 \001(\005\0223\n+ts"
  "chchartinfodatasetnameparagraphstyleinde"
  "x\030\023 \001(\005\022,\n$tschchartinfodonutplacetitlea"
  "tcenter\030\024 \001(\010\0229\n\037tschchartinfogridbackgr"
  "oundfill\030\025 \001(\0132\020.TSD.FillArchive\022*\n\"tsch"
  "chartinfogridbackgroundopacity\030\026 \001(\002\022 \n\030"
  "tschchartinfoinnerradius\030\027 \001(\002\022 \n\030tschch"
  "artinfointerbargap\030\030 \001(\002\022 \n\030tschchartinf"
  "ointersetgap\030\031 \001(\002\022)\n!tschchartinfomulti"
  "datacontroltype\030\032 \001(\005\022\"\n\032tschchartinfopi"
  "estartangle\030\033 \001(\002\022-\n%tschchartinforadarr"
  "adiusgridlinecurve\030\034 \001(\010\022$\n\034tschchartinf"
  "oradarstartangle\030\035 \001(\002\022.\n&tschchartinfor"
  "oundedcornerouterendonly\030\036 \001(\010\022(\n tschch"
  "artinforoundedcornerradius\030\037 \001(\002\022\037\n\027tsch"
  "chartinfoshowborder\030  \001(\010\022\037\n\027tschchartin"
  "foshowlegend\030! \001(\010\022\036\n\026tschchartinfoshowt"
  "itle\030\" \001(\010\022#\n\033tschchartinfoskiphiddendat"
  "a\030# \001(\010\022+\n\027tschchartinfotitlecolor\030$ \001(\013"
  "2\n.TSP.Color\022\032\n\022tschchartinfotitle\030% \001(\t"
  "\022-\n%tschchartinfotitleparagraphstyleinde"
  "x\030& \001(\005\"\207\002\n\037LegendGenericPropertyMapArch"
  "ive\022-\n\023tschlegendmodelfill\030\001 \001(\0132\020.TSD.F"
  "illArchive\022/\n\'tschlegendmodellabelparagr"
  "aphstyleindex\030\002 \001(\005\022\036\n\026tschlegendmodelop"
  "acity\030\003 \001(\002\0221\n\025tschlegendmodelshadow\030\004 \001"
  "(\0132\022.TSD.ShadowArchive\0221\n\025tschlegendmode"
  "lstroke\030\005 \001(\0132\022.TSD.StrokeArchive\"\320\017\n\"Ch"
  "artAxisGenericPropertyMapArchive\022<\n\032tsch"
  "chartaxis1_0dateformat\030\001 \001(\0132\030.TSK.Forma"
  "tStructArchive\022>\n\034tschchartaxis1_0number"
  "format\030\002 \001(\0132\030.TSK.FormatStructArchive\022&"
  "\n\036tschchartaxis3dgridlineopacity\030\003 \001(\002\0229"
  "\n\035tschchartaxis3dgridlinestroke\030\004 \001(\0132\022."
  "TSD.StrokeArchive\022$\n\034tschchartaxis3dlabe"
  "lposition\030\005 \001(\005\0229\n\027tschchartaxisdateform"
  "at\030\006 \001(\0132\030.TSK.FormatStructArchive\022=\n\033ts"
  "chchartaxisdurationformat\030\007 \001(\0132\030.TSK.Fo"
  "rmatStructArchive\022&\n\036tschchartaxishorizo"
  "ntalspacing\030\010 \001(\005\0220\n(tschchartaxislabela"
  "nglebaselinedirection\030\t \001(\005\022#\n\033tschchart"
  "axislabelexplosion\030\n \001(\002\022-\n%tschchartaxi"
  "slabelparagraphstyleindex\030\013 \001(\005\022&\n\036tschc"
  "hartaxislabelsorientation\030\014 \001(\002\022)\n!tschc"
  "hartaxismajorgridlineopacity\030\r \001(\002\022<\n ts"
  "chchartaxismajorgridlineshadow\030\016 \001(\0132\022.T"
  "SD.ShadowArchive\022<\n tschchartaxismajorgr"
  "idlinestroke\030\017 \001(\0132\022.TSD.StrokeArchive\022)"
  "\n!tschchartaxisminorgridlineopacity\030\020 \001("
  "\002\022<\n tschchartaxisminorgridlineshadow\030\021 "
  "\001(\0132\022.TSD.ShadowArchive\022<\n tschchartaxis"
  "minorgridlinestroke\030\022 \001(\0132\022.TSD.StrokeAr"
  "chive\022;\n\031tschchartaxisnumberformat\030\023 \001(\013"
  "2\030.TSK.FormatStructArchive\022%\n\035tschcharta"
  "xisnumberformattype\030\024 \001(\005\022$\n\034tschchartax"
  "isnumberofdecades\030\025 \001(\005\022+\n#tschchartaxis"
  "numberofmajorgridlines\030\026 \001(\005\022+\n#tschchar"
  "taxisnumberofminorgridlines\030\027 \001(\005\022 \n\030tsc"
  "hchartaxisplottoedges\030\030 \001(\010\022\032\n\022tschchart"
  "axisscale\030\031 \001(\005\022\035\n\025tschchartaxisshowaxis"
  "\030\032 \001(\010\022\'\n\037tschchartaxisshowextensionline"
  "s\030\033 \001(\010\022*\n\"tschchartaxisshowgridlinetick"
  "marks\030\034 \001(\010\022\037\n\027tschchartaxisshowlabels\030\035"
  " \001(\010\022\"\n\032tschchartaxisshowlastlabel\030\036 \001(\010"
  "\022\'\n\037tschchartaxisshowmajorgridlines\030\037 \001("
  "\010\022\'\n\037tschchartaxisshowmajortickmarks\030  \001"
  "(\010\022%\n\035tschchartaxisshowminimumlabel\030! \001("
  "\010\022\'\n\037tschchartaxisshowminorgridlines\030\" \001"
  "(\010\022\'\n\037tschchartaxisshowminortickmarks\030# "
  "\001(\010\022%\n\035tschchartaxisshowserieslabels\030$ \001"
  "(\010\022\036\n\026tschchartaxisshowtitle\030% \001(\010\022%\n\035ts"
  "chchartaxistickmarklocation\030& \001(\005\022\032\n\022tsc"
  "hchartaxistitle\030\' \001(\t\022-\n%tschchartaxisti"
  "tleparagraphstyleindex\030( \001(\005\022\?\n\024tschchar"
  "taxisusermax\030) \001(\0132!.TSCH.ChartsNSNumber"
  "DoubleArchive\022\?\n\024tschchartaxisusermin\030* "
  "\001(\0132!.TSCH.ChartsNSNumberDoubleArchive\022$"
  "\n\034tschchartaxisverticalspacing\030+ \001(\005\"\275!\n"
  "$ChartSeriesGenericPropertyMapArchive\022>\n"
  "\034tschchartseries1_0dateformat\030\001 \001(\0132\030.TS"
  "K.FormatStructArchive\022@\n\036tschchartseries"
  "1_0numberformat\030\002 \001(\0132\030.TSK.FormatStruct"
  "Archive\022(\n tschchartseries2_3labelexplos"
  "ion\030\003 \001(\002\022&\n\036tschchartseriesadjustmentsc"
  "ale\030\004 \001(\002\022A\n$tschchartseriescalloutlinee"
  "ndlineend\030\005 \001(\0132\023.TSD.LineEndArchive\022C\n&"
  "tschchartseriescalloutlinestartlineend\030\006"
  " \001(\0132\023.TSD.LineEndArchive\022A\n%tschchartse"
  "riescalloutlinestrokestyle\030\007 \001(\0132\022.TSD.S"
  "trokeArchive\022;\n\031tschchartseriesdateforma"
  "t\030\010 \001(\0132\030.TSK.FormatStructArchive\022\?\n\035tsc"
  "hchartseriesdurationformat\030\t \001(\0132\030.TSK.F"
  "ormatStructArchive\022(\n tschchartseriesena"
  "blecalloutline\030\n \001(\005\022]\n)tschchartseriese"
  "rrorbarcustomnegativedata\030\013 \001(\0132*.TSCH.C"
  "hartsNSArrayOfNSNumberDoubleArchive\022e\n1t"
  "schchartserieserrorbarcustomnegativedata"
  "scatterx\030\014 \001(\0132*.TSCH.ChartsNSArrayOfNSN"
  "umberDoubleArchive\022]\n)tschchartserieserr"
  "orbarcustompositivedata\030\r \001(\0132*.TSCH.Cha"
  "rtsNSArrayOfNSNumberDoubleArchive\022e\n1tsc"
  "hchartserieserrorbarcustompositivedatasc"
  "atterx\030\016 \001(\0132*.TSCH.ChartsNSArrayOfNSNum"
  "berDoubleArchive\022)\n!tschchartserieserror"
  "barfixedvalue\030\017 \001(\002\0221\n)tschchartserieser"
  "rorbarfixedvaluescatterx\030\020 \001(\002\022;\n\036tschch"
  "artserieserrorbarlineend\030\021 \001(\0132\023.TSD.Lin"
  "eEndArchive\022C\n&tschchartserieserrorbarli"
  "neendscatterx\030\022 \001(\0132\023.TSD.LineEndArchive"
  "\022+\n#tschchartserieserrorbarpercentvalue\030"
  "\023 \001(\002\0223\n+tschchartserieserrorbarpercentv"
  "aluescatterx\030\024 \001(\002\022&\n\036tschchartserieserr"
  "orbarsetting\030\025 \001(\005\022.\n&tschchartserieserr"
  "orbarsettingscatterx\030\026 \001(\005\0229\n\035tschcharts"
  "erieserrorbarshadow\030\027 \001(\0132\022.TSD.ShadowAr"
  "chive\022&\n\036tschchartserieserrorbarspacing\030"
  "\030 \001(\005\022.\n&tschchartserieserrorbarspacings"
  "catterx\030\031 \001(\005\022*\n\"tschchartserieserrorbar"
  "stddevvalue\030\032 \001(\002\0222\n*tschchartserieserro"
  "rbarstddevvaluescatterx\030\033 \001(\002\0229\n\035tschcha"
  "rtserieserrorbarstroke\030\034 \001(\0132\022.TSD.Strok"
  "eArchive\022A\n%tschchartserieserrorbarstrok"
  "escatterx\030\035 \001(\0132\022.TSD.StrokeArchive\022#\n\033t"
  "schchartserieserrorbartype\030\036 \001(\005\022+\n#tsch"
  "chartserieserrorbartypescatterx\030\037 \001(\005\022-\n"
  "\023tschchartseriesfill\030  \001(\0132\020.TSD.FillArc"
  "hive\0229\n1tschchartseriesfilluseseriesstro"
  "kealphamultiplier\030! \001(\002\022*\n\"tschchartseri"
  "esfilluseseriesstroke\030\" \001(\010\022%\n\035tschchart"
  "serieslabelexplosion\030# \001(\002\022/\n\'tschcharts"
  "erieslabelparagraphstyleindex\030$ \001(\005\022\037\n\027t"
  "schchartserieslinetype\030% \001(\005\022=\n\033tschchar"
  "tseriesnumberformat\030& \001(\0132\030.TSK.FormatSt"
  "ructArchive\022\'\n\037tschchartseriesnumberform"
  "attype\030\' \001(\005\022\036\n\026tschchartseriesopacity\030("
  " \001(\002\0226\n.tschchartseriesoutsidelabelparag"
  "raphstyleindex\030) \001(\005\022D\n\"tschchartseriesp"
  "ercentnumberformat\030* \001(\0132\030.TSK.FormatStr"
  "uctArchive\022!\n\031tschchartseriesseriestype\030"
  "+ \001(\005\0221\n\025tschchartseriesshadow\030, \001(\0132\022.T"
  "SD.ShadowArchive\022#\n\033tschchartseriesshowe"
  "rrorbar\030- \001(\010\022+\n#tschchartseriesshowerro"
  "rbarscatterx\030. \001(\010\022(\n tschchartseriessho"
  "wlabelsinfront\030/ \001(\010\022\037\n\027tschchartseriess"
  "howline\0300 \001(\010\022\'\n\037tschchartseriesshownega"
  "tivedata\0301 \001(\010\022\'\n\037tschchartseriesshowser"
  "ieslabels\0302 \001(\010\022!\n\031tschchartseriesshowsy"
  "mbol\0303 \001(\010\022$\n\034tschchartseriesshowtrendli"
  "ne\0304 \001(\010\022&\n\036tschchartseriesshowvaluelabe"
  "ls\0305 \001(\010\022$\n\034tschchartseriessizedimension"
  "\0306 \001(\005\022\"\n\032tschchartseriesstacklabels\0307 \001"
  "(\010\0221\n\025tschchartseriesstroke\0308 \001(\0132\022.TSD."
  "StrokeArchive\0223\n\031tschchartseriessymbolfi"
  "ll\0309 \001(\0132\020.TSD.FillArchive\022.\n&tschcharts"
  "eriessymbolfilluseseriesfill\030: \001(\010\0220\n(ts"
  "chchartseriessymbolfilluseseriesstroke\030;"
  " \001(\010\022!\n\031tschchartseriessymbolsize\030< \001(\002\022"
  "7\n\033tschchartseriessymbolstroke\030= \001(\0132\022.T"
  "SD.StrokeArchive\022!\n\031tschchartseriessymbo"
  "ltype\030> \001(\005\022/\n\'tschchartseriestrendlinee"
  "quationoffsetx\030\? \001(\002\022/\n\'tschchartseriest"
  "rendlineequationoffsety\030@ \001(\002\022+\n#tschcha"
  "rtseriestrendlinelabelstring\030A \001(\t\022%\n\035ts"
  "chchartseriestrendlineorder\030B \001(\005\022&\n\036tsc"
  "hchartseriestrendlineperiod\030C \001(\005\022/\n\'tsc"
  "hchartseriestrendlinersquaredoffsetx\030D \001"
  "(\002\022/\n\'tschchartseriestrendlinersquaredof"
  "fsety\030E \001(\002\022:\n\036tschchartseriestrendlines"
  "hadow\030F \001(\0132\022.TSD.ShadowArchive\022,\n$tschc"
  "hartseriestrendlineshowequation\030G \001(\010\022)\n"
  "!tschchartseriestrendlineshowlabel\030H \001(\010"
  "\022+\n#tschchartseriestrendlineshowr2value\030"
  "I \001(\010\022:\n\036tschchartseriestrendlinestroke\030"
  "J \001(\0132\022.TSD.StrokeArchive\022$\n\034tschchartse"
  "riestrendlinetype\030K \001(\005\022/\n\'tschchartseri"
  "estrendlineequationopacity\030L \001(\002\022;\n3tsch"
  "chartseriestrendlineequationparagraphsty"
  "leindex\030M \001(\005\022/\n\'tschchartseriestrendlin"
  "ersquaredopacity\030N \001(\002\022;\n3tschchartserie"
  "strendlinersquaredparagraphstyleindex\030O "
  "\001(\005\022)\n!tschchartseriesvaluelabelposition"
  "\030P \001(\005\022(\n tschchartseriesvaluelabelspaci"
  "ng\030Q \001(\005\022&\n\036tschchartseriesvaluelabelsax"
  "is\030R \001(\005\022%\n\035tschchartserieswedgeexplosio"
  "n\030S \001(\002\022#\n\033tschchartseriesyaxisordinal\030T"
  " \001(\005\"\365\003\n&ReferenceLineGenericPropertyMap"
  "Archive\022G\n\034tschreferencelinecustomvalue\030"
  "\001 \001(\0132!.TSCH.ChartsNSNumberDoubleArchive"
  "\022\036\n\026tschreferencelinelabel\030\002 \001(\t\0221\n)tsch"
  "referencelinelabelparagraphstyleindex\030\003 "
  "\001(\005\0223\n\027tschreferencelineshadow\030\004 \001(\0132\022.T"
  "SD.ShadowArchive\022\"\n\032tschreferencelinesho"
  "wlabel\030\005 \001(\010\022!\n\031tschreferencelineshowlin"
  "e\030\006 \001(\010\022\'\n\037tschreferencelineshowvaluelab"
  "el\030\007 \001(\010\0223\n\027tschreferencelinestroke\030\010 \001("
  "\0132\022.TSD.StrokeArchive\022\035\n\025tschreferenceli"
  "netype\030\t \001(\005\0226\n.tschreferencelinevaluela"
  "belparagraphstyleindex\030\n \001(\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSCHArchives_2eGEN_2eproto_deps[6] = {
  &::descriptor_table_TSCH3DArchives_2eproto,
  &::descriptor_table_TSCHArchives_2eCommon_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSCHArchives_2eGEN_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSCHArchives_2eGEN_2eproto = {
    false, false, 29268, descriptor_table_protodef_TSCHArchives_2eGEN_2eproto,
    "TSCHArchives.GEN.proto",
    &descriptor_table_TSCHArchives_2eGEN_2eproto_once, descriptor_table_TSCHArchives_2eGEN_2eproto_deps, 6, 15,
    schemas, file_default_instances, TableStruct_TSCHArchives_2eGEN_2eproto::offsets,
    file_level_metadata_TSCHArchives_2eGEN_2eproto, file_level_enum_descriptors_TSCHArchives_2eGEN_2eproto,
    file_level_service_descriptors_TSCHArchives_2eGEN_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSCHArchives_2eGEN_2eproto_getter() {
  return &descriptor_table_TSCHArchives_2eGEN_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSCHArchives_2eGEN_2eproto(&descriptor_table_TSCHArchives_2eGEN_2eproto);
namespace TSCH {
namespace Generated {

// ===================================================================

class ChartStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartStyleArchive>()._impl_._has_bits_);
  static void set_has_tschchartinfodefault3dchartopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoarea3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoarea3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfobar3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfobar3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfocolumn3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfocolumn3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfodefault3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefault3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfoline3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfoline3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfopie3dlightingpackage(const ChartStyleArchive* msg);
  static void set_has_tschchartinfopie3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::FillArchive& tschchartinfodefaultbackgroundfill(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartinfodefaultbackgroundstroke(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbackgroundstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartinfodefaultborderopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::ShadowArchive& tschchartinfodefaultbordershadow(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultbordershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokeArchive& tschchartinfodefaultborderstroke(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultborderstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartinfodefaultcombinelayers(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartinfodefaultdatasetnameparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSD::FillArchive& tschchartinfodefaultgridbackgroundfill(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaultgridbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartinfodefaultgridbackgroundopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartinfodefaultinterbargap(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartinfodefaultintersetgap(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartinfodefaultradarradiusgridlinecurve(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartinfodefaultroundedcornerouterendonly(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartinfodefaultroundedcornerradius(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartinfodefaultshowborder(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSP::Color& tschchartinfodefaulttitlecolor(const ChartStyleArchive* msg);
  static void set_has_tschchartinfodefaulttitlecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartinfodefaulttitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
};

const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfoarea3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoarea3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfobar3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfobar3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfocolumn3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfocolumn3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfodefault3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfoline3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoline3dlightingpackage_;
}
const ::TSCH::Chart3DLightingPackageArchive&
ChartStyleArchive::_Internal::tschchartinfopie3dlightingpackage(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfopie3dlightingpackage_;
}
const ::TSD::FillArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbackgroundfill(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultbackgroundfill_;
}
const ::TSD::StrokeArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbackgroundstroke(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultbackgroundstroke_;
}
const ::TSD::ShadowArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultbordershadow(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultbordershadow_;
}
const ::TSD::StrokeArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultborderstroke(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultborderstroke_;
}
const ::TSD::FillArchive&
ChartStyleArchive::_Internal::tschchartinfodefaultgridbackgroundfill(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaultgridbackgroundfill_;
}
const ::TSP::Color&
ChartStyleArchive::_Internal::tschchartinfodefaulttitlecolor(const ChartStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefaulttitlecolor_;
}
void ChartStyleArchive::clear_tschchartinfoarea3dlightingpackage() {
  if (_impl_.tschchartinfoarea3dlightingpackage_ != nullptr) _impl_.tschchartinfoarea3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartStyleArchive::clear_tschchartinfobar3dlightingpackage() {
  if (_impl_.tschchartinfobar3dlightingpackage_ != nullptr) _impl_.tschchartinfobar3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartStyleArchive::clear_tschchartinfocolumn3dlightingpackage() {
  if (_impl_.tschchartinfocolumn3dlightingpackage_ != nullptr) _impl_.tschchartinfocolumn3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartStyleArchive::clear_tschchartinfodefault3dlightingpackage() {
  if (_impl_.tschchartinfodefault3dlightingpackage_ != nullptr) _impl_.tschchartinfodefault3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartStyleArchive::clear_tschchartinfoline3dlightingpackage() {
  if (_impl_.tschchartinfoline3dlightingpackage_ != nullptr) _impl_.tschchartinfoline3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartStyleArchive::clear_tschchartinfopie3dlightingpackage() {
  if (_impl_.tschchartinfopie3dlightingpackage_ != nullptr) _impl_.tschchartinfopie3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbackgroundfill() {
  if (_impl_.tschchartinfodefaultbackgroundfill_ != nullptr) _impl_.tschchartinfodefaultbackgroundfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbackgroundstroke() {
  if (_impl_.tschchartinfodefaultbackgroundstroke_ != nullptr) _impl_.tschchartinfodefaultbackgroundstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartStyleArchive::clear_tschchartinfodefaultbordershadow() {
  if (_impl_.tschchartinfodefaultbordershadow_ != nullptr) _impl_.tschchartinfodefaultbordershadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartStyleArchive::clear_tschchartinfodefaultborderstroke() {
  if (_impl_.tschchartinfodefaultborderstroke_ != nullptr) _impl_.tschchartinfodefaultborderstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartStyleArchive::clear_tschchartinfodefaultgridbackgroundfill() {
  if (_impl_.tschchartinfodefaultgridbackgroundfill_ != nullptr) _impl_.tschchartinfodefaultgridbackgroundfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ChartStyleArchive::clear_tschchartinfodefaulttitlecolor() {
  if (_impl_.tschchartinfodefaulttitlecolor_ != nullptr) _impl_.tschchartinfodefaulttitlecolor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
ChartStyleArchive::ChartStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartStyleArchive)
}
ChartStyleArchive::ChartStyleArchive(const ChartStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfoarea3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfobar3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfoline3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfopie3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbordershadow_){nullptr}
    , decltype(_impl_.tschchartinfodefaultborderstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaulttitlecolor_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dchartopacity_){}
    , decltype(_impl_.tschchartinfodefaultborderopacity_){}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundopacity_){}
    , decltype(_impl_.tschchartinfodefaultinterbargap_){}
    , decltype(_impl_.tschchartinfodefaultintersetgap_){}
    , decltype(_impl_.tschchartinfodefaulttitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_){}
    , decltype(_impl_.tschchartinfodefaultcombinelayers_){}
    , decltype(_impl_.tschchartinfodefaultradarradiusgridlinecurve_){}
    , decltype(_impl_.tschchartinfodefaultroundedcornerouterendonly_){}
    , decltype(_impl_.tschchartinfodefaultshowborder_){}
    , decltype(_impl_.tschchartinfodefaultroundedcornerradius_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschchartinfoarea3dlightingpackage()) {
    _this->_impl_.tschchartinfoarea3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfoarea3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfobar3dlightingpackage()) {
    _this->_impl_.tschchartinfobar3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfobar3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfocolumn3dlightingpackage()) {
    _this->_impl_.tschchartinfocolumn3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfocolumn3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfodefault3dlightingpackage()) {
    _this->_impl_.tschchartinfodefault3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfodefault3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfoline3dlightingpackage()) {
    _this->_impl_.tschchartinfoline3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfoline3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfopie3dlightingpackage()) {
    _this->_impl_.tschchartinfopie3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfopie3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfodefaultbackgroundfill()) {
    _this->_impl_.tschchartinfodefaultbackgroundfill_ = new ::TSD::FillArchive(*from._impl_.tschchartinfodefaultbackgroundfill_);
  }
  if (from._internal_has_tschchartinfodefaultbackgroundstroke()) {
    _this->_impl_.tschchartinfodefaultbackgroundstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartinfodefaultbackgroundstroke_);
  }
  if (from._internal_has_tschchartinfodefaultbordershadow()) {
    _this->_impl_.tschchartinfodefaultbordershadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartinfodefaultbordershadow_);
  }
  if (from._internal_has_tschchartinfodefaultborderstroke()) {
    _this->_impl_.tschchartinfodefaultborderstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartinfodefaultborderstroke_);
  }
  if (from._internal_has_tschchartinfodefaultgridbackgroundfill()) {
    _this->_impl_.tschchartinfodefaultgridbackgroundfill_ = new ::TSD::FillArchive(*from._impl_.tschchartinfodefaultgridbackgroundfill_);
  }
  if (from._internal_has_tschchartinfodefaulttitlecolor()) {
    _this->_impl_.tschchartinfodefaulttitlecolor_ = new ::TSP::Color(*from._impl_.tschchartinfodefaulttitlecolor_);
  }
  ::memcpy(&_impl_.tschchartinfodefault3dchartopacity_, &from._impl_.tschchartinfodefault3dchartopacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartinfodefaultroundedcornerradius_) -
    reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dchartopacity_)) + sizeof(_impl_.tschchartinfodefaultroundedcornerradius_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartStyleArchive)
}

inline void ChartStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfoarea3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfobar3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfoline3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfopie3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbackgroundstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaultbordershadow_){nullptr}
    , decltype(_impl_.tschchartinfodefaultborderstroke_){nullptr}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfodefaulttitlecolor_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dchartopacity_){0}
    , decltype(_impl_.tschchartinfodefaultborderopacity_){0}
    , decltype(_impl_.tschchartinfodefaultgridbackgroundopacity_){0}
    , decltype(_impl_.tschchartinfodefaultinterbargap_){0}
    , decltype(_impl_.tschchartinfodefaultintersetgap_){0}
    , decltype(_impl_.tschchartinfodefaulttitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_){0}
    , decltype(_impl_.tschchartinfodefaultcombinelayers_){false}
    , decltype(_impl_.tschchartinfodefaultradarradiusgridlinecurve_){false}
    , decltype(_impl_.tschchartinfodefaultroundedcornerouterendonly_){false}
    , decltype(_impl_.tschchartinfodefaultshowborder_){false}
    , decltype(_impl_.tschchartinfodefaultroundedcornerradius_){0}
  };
}

ChartStyleArchive::~ChartStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tschchartinfoarea3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfobar3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfocolumn3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoline3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfopie3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultbackgroundfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultbackgroundstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultbordershadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultborderstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaultgridbackgroundfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefaulttitlecolor_;
}

void ChartStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoarea3dlightingpackage_ != nullptr);
      _impl_.tschchartinfoarea3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartinfobar3dlightingpackage_ != nullptr);
      _impl_.tschchartinfobar3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartinfocolumn3dlightingpackage_ != nullptr);
      _impl_.tschchartinfocolumn3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefault3dlightingpackage_ != nullptr);
      _impl_.tschchartinfodefault3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoline3dlightingpackage_ != nullptr);
      _impl_.tschchartinfoline3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartinfopie3dlightingpackage_ != nullptr);
      _impl_.tschchartinfopie3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultbackgroundfill_ != nullptr);
      _impl_.tschchartinfodefaultbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultbackgroundstroke_ != nullptr);
      _impl_.tschchartinfodefaultbackgroundstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultbordershadow_ != nullptr);
      _impl_.tschchartinfodefaultbordershadow_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultborderstroke_ != nullptr);
      _impl_.tschchartinfodefaultborderstroke_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaultgridbackgroundfill_ != nullptr);
      _impl_.tschchartinfodefaultgridbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefaulttitlecolor_ != nullptr);
      _impl_.tschchartinfodefaulttitlecolor_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&_impl_.tschchartinfodefault3dchartopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultinterbargap_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dchartopacity_)) + sizeof(_impl_.tschchartinfodefaultinterbargap_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartinfodefaultintersetgap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultroundedcornerradius_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultintersetgap_)) + sizeof(_impl_.tschchartinfodefaultroundedcornerradius_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float tschchartinfodefault3dchartopacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_tschchartinfodefault3dchartopacity(&has_bits);
          _impl_.tschchartinfodefault3dchartopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoarea3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobar3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumn3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoline3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopie3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbackgroundfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbackgroundstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultborderopacity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_tschchartinfodefaultborderopacity(&has_bits);
          _impl_.tschchartinfodefaultborderopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultbordershadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultborderstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultcombinelayers = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartinfodefaultcombinelayers(&has_bits);
          _impl_.tschchartinfodefaultcombinelayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaultgridbackgroundfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultgridbackgroundopacity = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_tschchartinfodefaultgridbackgroundopacity(&has_bits);
          _impl_.tschchartinfodefaultgridbackgroundopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultinterbargap = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_tschchartinfodefaultinterbargap(&has_bits);
          _impl_.tschchartinfodefaultinterbargap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultintersetgap = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_tschchartinfodefaultintersetgap(&has_bits);
          _impl_.tschchartinfodefaultintersetgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowborder = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartinfodefaultshowborder(&has_bits);
          _impl_.tschchartinfodefaultshowborder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefaulttitlecolor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartinfodefaulttitleparagraphstyleindex(&has_bits);
          _impl_.tschchartinfodefaulttitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartinfodefaultdatasetnameparagraphstyleindex(&has_bits);
          _impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultradarradiusgridlinecurve = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartinfodefaultradarradiusgridlinecurve(&has_bits);
          _impl_.tschchartinfodefaultradarradiusgridlinecurve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultroundedcornerradius = 122;
      case 122:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _Internal::set_has_tschchartinfodefaultroundedcornerradius(&has_bits);
          _impl_.tschchartinfodefaultroundedcornerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultroundedcornerouterendonly = 123;
      case 123:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartinfodefaultroundedcornerouterendonly(&has_bits);
          _impl_.tschchartinfodefaultroundedcornerouterendonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float tschchartinfodefault3dchartopacity = 1;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_tschchartinfodefault3dchartopacity(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tschchartinfoarea3dlightingpackage(this),
        _Internal::tschchartinfoarea3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tschchartinfobar3dlightingpackage(this),
        _Internal::tschchartinfobar3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschchartinfocolumn3dlightingpackage(this),
        _Internal::tschchartinfocolumn3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschchartinfodefault3dlightingpackage(this),
        _Internal::tschchartinfodefault3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tschchartinfoline3dlightingpackage(this),
        _Internal::tschchartinfoline3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tschchartinfopie3dlightingpackage(this),
        _Internal::tschchartinfopie3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tschchartinfodefaultbackgroundfill(this),
        _Internal::tschchartinfodefaultbackgroundfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::tschchartinfodefaultbackgroundstroke(this),
        _Internal::tschchartinfodefaultbackgroundstroke(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfodefaultborderopacity = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_tschchartinfodefaultborderopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tschchartinfodefaultbordershadow(this),
        _Internal::tschchartinfodefaultbordershadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tschchartinfodefaultborderstroke(this),
        _Internal::tschchartinfodefaultborderstroke(this).GetCachedSize(), target, stream);
  }

  // optional bool tschchartinfodefaultcombinelayers = 13;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_tschchartinfodefaultcombinelayers(), target);
  }

  // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tschchartinfodefaultgridbackgroundfill(this),
        _Internal::tschchartinfodefaultgridbackgroundfill(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfodefaultgridbackgroundopacity = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_tschchartinfodefaultgridbackgroundopacity(), target);
  }

  // optional float tschchartinfodefaultinterbargap = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_tschchartinfodefaultinterbargap(), target);
  }

  // optional float tschchartinfodefaultintersetgap = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_tschchartinfodefaultintersetgap(), target);
  }

  // optional bool tschchartinfodefaultshowborder = 18;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(18, this->_internal_tschchartinfodefaultshowborder(), target);
  }

  // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::tschchartinfodefaulttitlecolor(this),
        _Internal::tschchartinfodefaulttitlecolor(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_tschchartinfodefaulttitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_tschchartinfodefaultdatasetnameparagraphstyleindex(), target);
  }

  // optional bool tschchartinfodefaultradarradiusgridlinecurve = 29;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_tschchartinfodefaultradarradiusgridlinecurve(), target);
  }

  // optional float tschchartinfodefaultroundedcornerradius = 122;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(122, this->_internal_tschchartinfodefaultroundedcornerradius(), target);
  }

  // optional bool tschchartinfodefaultroundedcornerouterendonly = 123;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(123, this->_internal_tschchartinfodefaultroundedcornerouterendonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartStyleArchive)
  return target;
}

size_t ChartStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoarea3dlightingpackage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoarea3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfobar3dlightingpackage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfobar3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfocolumn3dlightingpackage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfocolumn3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfodefault3dlightingpackage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfoline3dlightingpackage = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoline3dlightingpackage_);
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfopie3dlightingpackage = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfopie3dlightingpackage_);
    }

    // optional .TSD.FillArchive tschchartinfodefaultbackgroundfill = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultbackgroundfill_);
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultbackgroundstroke = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultbackgroundstroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.ShadowArchive tschchartinfodefaultbordershadow = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultbordershadow_);
    }

    // optional .TSD.StrokeArchive tschchartinfodefaultborderstroke = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultborderstroke_);
    }

    // optional .TSD.FillArchive tschchartinfodefaultgridbackgroundfill = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaultgridbackgroundfill_);
    }

    // optional .TSP.Color tschchartinfodefaulttitlecolor = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefaulttitlecolor_);
    }

    // optional float tschchartinfodefault3dchartopacity = 1;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultborderopacity = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultgridbackgroundopacity = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultinterbargap = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartinfodefaultintersetgap = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfodefaulttitleparagraphstyleindex = 20;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartinfodefaultdatasetnameparagraphstyleindex = 21;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdatasetnameparagraphstyleindex());
    }

    // optional bool tschchartinfodefaultcombinelayers = 13;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfodefaultradarradiusgridlinecurve = 29;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultroundedcornerouterendonly = 123;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultshowborder = 18;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartinfodefaultroundedcornerradius = 122;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartStyleArchive::GetClassData() const { return &_class_data_; }


void ChartStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschchartinfoarea3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfoarea3dlightingpackage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartinfobar3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfobar3dlightingpackage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartinfocolumn3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfocolumn3dlightingpackage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartinfodefault3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfodefault3dlightingpackage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartinfoline3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfoline3dlightingpackage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartinfopie3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfopie3dlightingpackage());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartinfodefaultbackgroundfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartinfodefaultbackgroundfill());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartinfodefaultbackgroundstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartinfodefaultbackgroundstroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartinfodefaultbordershadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartinfodefaultbordershadow());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartinfodefaultborderstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartinfodefaultborderstroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartinfodefaultgridbackgroundfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartinfodefaultgridbackgroundfill());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartinfodefaulttitlecolor()->::TSP::Color::MergeFrom(
          from._internal_tschchartinfodefaulttitlecolor());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartinfodefault3dchartopacity_ = from._impl_.tschchartinfodefault3dchartopacity_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartinfodefaultborderopacity_ = from._impl_.tschchartinfodefaultborderopacity_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartinfodefaultgridbackgroundopacity_ = from._impl_.tschchartinfodefaultgridbackgroundopacity_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartinfodefaultinterbargap_ = from._impl_.tschchartinfodefaultinterbargap_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartinfodefaultintersetgap_ = from._impl_.tschchartinfodefaultintersetgap_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartinfodefaulttitleparagraphstyleindex_ = from._impl_.tschchartinfodefaulttitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_ = from._impl_.tschchartinfodefaultdatasetnameparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartinfodefaultcombinelayers_ = from._impl_.tschchartinfodefaultcombinelayers_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartinfodefaultradarradiusgridlinecurve_ = from._impl_.tschchartinfodefaultradarradiusgridlinecurve_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartinfodefaultroundedcornerouterendonly_ = from._impl_.tschchartinfodefaultroundedcornerouterendonly_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartinfodefaultshowborder_ = from._impl_.tschchartinfodefaultshowborder_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartinfodefaultroundedcornerradius_ = from._impl_.tschchartinfodefaultroundedcornerradius_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartStyleArchive::CopyFrom(const ChartStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartinfoarea3dlightingpackage()) {
    if (!_impl_.tschchartinfoarea3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobar3dlightingpackage()) {
    if (!_impl_.tschchartinfobar3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumn3dlightingpackage()) {
    if (!_impl_.tschchartinfocolumn3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dlightingpackage()) {
    if (!_impl_.tschchartinfodefault3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoline3dlightingpackage()) {
    if (!_impl_.tschchartinfoline3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopie3dlightingpackage()) {
    if (!_impl_.tschchartinfopie3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbackgroundfill()) {
    if (!_impl_.tschchartinfodefaultbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbackgroundstroke()) {
    if (!_impl_.tschchartinfodefaultbackgroundstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultbordershadow()) {
    if (!_impl_.tschchartinfodefaultbordershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultborderstroke()) {
    if (!_impl_.tschchartinfodefaultborderstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaultgridbackgroundfill()) {
    if (!_impl_.tschchartinfodefaultgridbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefaulttitlecolor()) {
    if (!_impl_.tschchartinfodefaulttitlecolor_->IsInitialized()) return false;
  }
  return true;
}

void ChartStyleArchive::InternalSwap(ChartStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartStyleArchive, _impl_.tschchartinfodefaultroundedcornerradius_)
      + sizeof(ChartStyleArchive::_impl_.tschchartinfodefaultroundedcornerradius_)
      - PROTOBUF_FIELD_OFFSET(ChartStyleArchive, _impl_.tschchartinfoarea3dlightingpackage_)>(
          reinterpret_cast<char*>(&_impl_.tschchartinfoarea3dlightingpackage_),
          reinterpret_cast<char*>(&other->_impl_.tschchartinfoarea3dlightingpackage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[0]);
}

// ===================================================================

class ChartNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartNonStyleArchive>()._impl_._has_bits_);
  static void set_has_tschchartinfodefault3dbarshape(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartinfodefault3dbeveledges(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartinfodefault3dintersetdepthgap(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3drotation(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3drotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfoarea3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoarea3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfobar3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfobar3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfocolumn3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfocolumn3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfoline3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfoline3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfopie3dscale(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfopie3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfodefault3dviewport(const ChartNonStyleArchive* msg);
  static void set_has_tschchartinfodefault3dviewport(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartinfoareacalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartinfobarcalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartinfobubblecalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartinfodefaultcalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartinfolinecalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartinfopiecalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartinfoscattercalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartinfostackedareacalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartinfostackedbarcalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartinfodefaultdeprecatedroundedcornerouterendonly(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartinfodefaultdeprecatedroundedcornerradius(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartinfodefaultdatasetnamelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartinfodefaultdonutplacetitleatcenter(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartinfodefaultinnerradius(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartinfodefaultmultidatacontroltype(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartinfodefaultpiestartangle(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartinfodefaultradarstartangle(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartinfodefaultshowlegend(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartinfodefaultshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartinfodefaultskiphiddendata(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartinfodefaulttitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3drotation(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3drotation_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfoarea3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoarea3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfobar3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfobar3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfocolumn3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfocolumn3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfoline3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfoline3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfopie3dscale(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfopie3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartNonStyleArchive::_Internal::tschchartinfodefault3dviewport(const ChartNonStyleArchive* msg) {
  return *msg->_impl_.tschchartinfodefault3dviewport_;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3drotation() {
  if (_impl_.tschchartinfodefault3drotation_ != nullptr) _impl_.tschchartinfodefault3drotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartNonStyleArchive::clear_tschchartinfoarea3dscale() {
  if (_impl_.tschchartinfoarea3dscale_ != nullptr) _impl_.tschchartinfoarea3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartNonStyleArchive::clear_tschchartinfobar3dscale() {
  if (_impl_.tschchartinfobar3dscale_ != nullptr) _impl_.tschchartinfobar3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartNonStyleArchive::clear_tschchartinfocolumn3dscale() {
  if (_impl_.tschchartinfocolumn3dscale_ != nullptr) _impl_.tschchartinfocolumn3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3dscale() {
  if (_impl_.tschchartinfodefault3dscale_ != nullptr) _impl_.tschchartinfodefault3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartNonStyleArchive::clear_tschchartinfoline3dscale() {
  if (_impl_.tschchartinfoline3dscale_ != nullptr) _impl_.tschchartinfoline3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartNonStyleArchive::clear_tschchartinfopie3dscale() {
  if (_impl_.tschchartinfopie3dscale_ != nullptr) _impl_.tschchartinfopie3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartNonStyleArchive::clear_tschchartinfodefault3dviewport() {
  if (_impl_.tschchartinfodefault3dviewport_ != nullptr) _impl_.tschchartinfodefault3dviewport_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
ChartNonStyleArchive::ChartNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartNonStyleArchive)
}
ChartNonStyleArchive::ChartNonStyleArchive(const ChartNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartNonStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfodefaulttitle_){}
    , decltype(_impl_.tschchartinfodefault3drotation_){nullptr}
    , decltype(_impl_.tschchartinfoarea3dscale_){nullptr}
    , decltype(_impl_.tschchartinfobar3dscale_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dscale_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dscale_){nullptr}
    , decltype(_impl_.tschchartinfoline3dscale_){nullptr}
    , decltype(_impl_.tschchartinfopie3dscale_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dviewport_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dbarshape_){}
    , decltype(_impl_.tschchartinfodefault3dintersetdepthgap_){}
    , decltype(_impl_.tschchartinfodefaultpiestartangle_){}
    , decltype(_impl_.tschchartinfodefaultshowtitle_){}
    , decltype(_impl_.tschchartinfodefaultskiphiddendata_){}
    , decltype(_impl_.tschchartinfodefaultdatasetnamelocation_){}
    , decltype(_impl_.tschchartinfodefaultmultidatacontroltype_){}
    , decltype(_impl_.tschchartinfodefaultinnerradius_){}
    , decltype(_impl_.tschchartinfodefaultradarstartangle_){}
    , decltype(_impl_.tschchartinfodefault3dbeveledges_){}
    , decltype(_impl_.tschchartinfodefaultdeprecatedroundedcornerouterendonly_){}
    , decltype(_impl_.tschchartinfodefaultdonutplacetitleatcenter_){}
    , decltype(_impl_.tschchartinfodefaultshowlegend_){}
    , decltype(_impl_.tschchartinfopiecalloutlinetype_){}
    , decltype(_impl_.tschchartinfoareacalloutlinetype_){}
    , decltype(_impl_.tschchartinfobarcalloutlinetype_){}
    , decltype(_impl_.tschchartinfobubblecalloutlinetype_){}
    , decltype(_impl_.tschchartinfolinecalloutlinetype_){}
    , decltype(_impl_.tschchartinfoscattercalloutlinetype_){}
    , decltype(_impl_.tschchartinfostackedareacalloutlinetype_){}
    , decltype(_impl_.tschchartinfostackedbarcalloutlinetype_){}
    , decltype(_impl_.tschchartinfodefaultcalloutlinetype_){}
    , decltype(_impl_.tschchartinfodefaultdeprecatedroundedcornerradius_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartinfodefaulttitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartinfodefaulttitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartinfodefaulttitle()) {
    _this->_impl_.tschchartinfodefaulttitle_.Set(from._internal_tschchartinfodefaulttitle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tschchartinfodefault3drotation()) {
    _this->_impl_.tschchartinfodefault3drotation_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfodefault3drotation_);
  }
  if (from._internal_has_tschchartinfoarea3dscale()) {
    _this->_impl_.tschchartinfoarea3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfoarea3dscale_);
  }
  if (from._internal_has_tschchartinfobar3dscale()) {
    _this->_impl_.tschchartinfobar3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfobar3dscale_);
  }
  if (from._internal_has_tschchartinfocolumn3dscale()) {
    _this->_impl_.tschchartinfocolumn3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfocolumn3dscale_);
  }
  if (from._internal_has_tschchartinfodefault3dscale()) {
    _this->_impl_.tschchartinfodefault3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfodefault3dscale_);
  }
  if (from._internal_has_tschchartinfoline3dscale()) {
    _this->_impl_.tschchartinfoline3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfoline3dscale_);
  }
  if (from._internal_has_tschchartinfopie3dscale()) {
    _this->_impl_.tschchartinfopie3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfopie3dscale_);
  }
  if (from._internal_has_tschchartinfodefault3dviewport()) {
    _this->_impl_.tschchartinfodefault3dviewport_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfodefault3dviewport_);
  }
  ::memcpy(&_impl_.tschchartinfodefault3dbarshape_, &from._impl_.tschchartinfodefault3dbarshape_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartinfodefaultdeprecatedroundedcornerradius_) -
    reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dbarshape_)) + sizeof(_impl_.tschchartinfodefaultdeprecatedroundedcornerradius_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartNonStyleArchive)
}

inline void ChartNonStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfodefaulttitle_){}
    , decltype(_impl_.tschchartinfodefault3drotation_){nullptr}
    , decltype(_impl_.tschchartinfoarea3dscale_){nullptr}
    , decltype(_impl_.tschchartinfobar3dscale_){nullptr}
    , decltype(_impl_.tschchartinfocolumn3dscale_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dscale_){nullptr}
    , decltype(_impl_.tschchartinfoline3dscale_){nullptr}
    , decltype(_impl_.tschchartinfopie3dscale_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dviewport_){nullptr}
    , decltype(_impl_.tschchartinfodefault3dbarshape_){0}
    , decltype(_impl_.tschchartinfodefault3dintersetdepthgap_){0}
    , decltype(_impl_.tschchartinfodefaultpiestartangle_){0}
    , decltype(_impl_.tschchartinfodefaultshowtitle_){false}
    , decltype(_impl_.tschchartinfodefaultskiphiddendata_){false}
    , decltype(_impl_.tschchartinfodefaultdatasetnamelocation_){0}
    , decltype(_impl_.tschchartinfodefaultmultidatacontroltype_){0}
    , decltype(_impl_.tschchartinfodefaultinnerradius_){0}
    , decltype(_impl_.tschchartinfodefaultradarstartangle_){0}
    , decltype(_impl_.tschchartinfodefault3dbeveledges_){false}
    , decltype(_impl_.tschchartinfodefaultdeprecatedroundedcornerouterendonly_){false}
    , decltype(_impl_.tschchartinfodefaultdonutplacetitleatcenter_){false}
    , decltype(_impl_.tschchartinfodefaultshowlegend_){false}
    , decltype(_impl_.tschchartinfopiecalloutlinetype_){0}
    , decltype(_impl_.tschchartinfoareacalloutlinetype_){0}
    , decltype(_impl_.tschchartinfobarcalloutlinetype_){0}
    , decltype(_impl_.tschchartinfobubblecalloutlinetype_){0}
    , decltype(_impl_.tschchartinfolinecalloutlinetype_){0}
    , decltype(_impl_.tschchartinfoscattercalloutlinetype_){0}
    , decltype(_impl_.tschchartinfostackedareacalloutlinetype_){0}
    , decltype(_impl_.tschchartinfostackedbarcalloutlinetype_){0}
    , decltype(_impl_.tschchartinfodefaultcalloutlinetype_){0}
    , decltype(_impl_.tschchartinfodefaultdeprecatedroundedcornerradius_){0}
  };
  _impl_.tschchartinfodefaulttitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartinfodefaulttitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartNonStyleArchive::~ChartNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartNonStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartinfodefaulttitle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3drotation_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoarea3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfobar3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfocolumn3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoline3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfopie3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfodefault3dviewport_;
}

void ChartNonStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartNonStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartinfodefaulttitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefault3drotation_ != nullptr);
      _impl_.tschchartinfodefault3drotation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoarea3dscale_ != nullptr);
      _impl_.tschchartinfoarea3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartinfobar3dscale_ != nullptr);
      _impl_.tschchartinfobar3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartinfocolumn3dscale_ != nullptr);
      _impl_.tschchartinfocolumn3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartinfodefault3dscale_ != nullptr);
      _impl_.tschchartinfodefault3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoline3dscale_ != nullptr);
      _impl_.tschchartinfoline3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartinfopie3dscale_ != nullptr);
      _impl_.tschchartinfopie3dscale_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.tschchartinfodefault3dviewport_ != nullptr);
    _impl_.tschchartinfodefault3dviewport_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.tschchartinfodefault3dbarshape_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultmultidatacontroltype_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefault3dbarshape_)) + sizeof(_impl_.tschchartinfodefaultmultidatacontroltype_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartinfodefaultinnerradius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfoareacalloutlinetype_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultinnerradius_)) + sizeof(_impl_.tschchartinfoareacalloutlinetype_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartinfobarcalloutlinetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfodefaultdeprecatedroundedcornerradius_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfobarcalloutlinetype_)) + sizeof(_impl_.tschchartinfodefaultdeprecatedroundedcornerradius_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartNonStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tschchartinfodefault3dbarshape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartinfodefault3dbarshape(&has_bits);
          _impl_.tschchartinfodefault3dbarshape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefault3dbeveledges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartinfodefault3dbeveledges(&has_bits);
          _impl_.tschchartinfodefault3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefault3dintersetdepthgap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_tschchartinfodefault3dintersetdepthgap(&has_bits);
          _impl_.tschchartinfodefault3dintersetdepthgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3drotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoarea3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobar3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfocolumn3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoline3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfopie3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfodefault3dviewport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultpiestartangle = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_tschchartinfodefaultpiestartangle(&has_bits);
          _impl_.tschchartinfodefaultpiestartangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowlegend = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartinfodefaultshowlegend(&has_bits);
          _impl_.tschchartinfodefaultshowlegend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultshowtitle = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartinfodefaultshowtitle(&has_bits);
          _impl_.tschchartinfodefaultshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultskiphiddendata = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartinfodefaultskiphiddendata(&has_bits);
          _impl_.tschchartinfodefaultskiphiddendata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartinfodefaulttitle = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_tschchartinfodefaulttitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartinfodefaultdatasetnamelocation(&has_bits);
          _impl_.tschchartinfodefaultdatasetnamelocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartinfodefaultmultidatacontroltype(&has_bits);
          _impl_.tschchartinfodefaultmultidatacontroltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultinnerradius = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _Internal::set_has_tschchartinfodefaultinnerradius(&has_bits);
          _impl_.tschchartinfodefaultinnerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultdonutplacetitleatcenter = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartinfodefaultdonutplacetitleatcenter(&has_bits);
          _impl_.tschchartinfodefaultdonutplacetitleatcenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultradarstartangle = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _Internal::set_has_tschchartinfodefaultradarstartangle(&has_bits);
          _impl_.tschchartinfodefaultradarstartangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfopiecalloutlinetype = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartinfopiecalloutlinetype(&has_bits);
          _impl_.tschchartinfopiecalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfoareacalloutlinetype = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartinfoareacalloutlinetype(&has_bits);
          _impl_.tschchartinfoareacalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfobarcalloutlinetype = 113;
      case 113:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartinfobarcalloutlinetype(&has_bits);
          _impl_.tschchartinfobarcalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfobubblecalloutlinetype = 114;
      case 114:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartinfobubblecalloutlinetype(&has_bits);
          _impl_.tschchartinfobubblecalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfolinecalloutlinetype = 115;
      case 115:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartinfolinecalloutlinetype(&has_bits);
          _impl_.tschchartinfolinecalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfoscattercalloutlinetype = 116;
      case 116:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartinfoscattercalloutlinetype(&has_bits);
          _impl_.tschchartinfoscattercalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfostackedareacalloutlinetype = 117;
      case 117:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartinfostackedareacalloutlinetype(&has_bits);
          _impl_.tschchartinfostackedareacalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfostackedbarcalloutlinetype = 118;
      case 118:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartinfostackedbarcalloutlinetype(&has_bits);
          _impl_.tschchartinfostackedbarcalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodefaultcalloutlinetype = 119;
      case 119:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartinfodefaultcalloutlinetype(&has_bits);
          _impl_.tschchartinfodefaultcalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodefaultdeprecatedroundedcornerradius = 120;
      case 120:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedroundedcornerradius(&has_bits);
          _impl_.tschchartinfodefaultdeprecatedroundedcornerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodefaultdeprecatedroundedcornerouterendonly = 121;
      case 121:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartinfodefaultdeprecatedroundedcornerouterendonly(&has_bits);
          _impl_.tschchartinfodefaultdeprecatedroundedcornerouterendonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartNonStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartNonStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tschchartinfodefault3dbarshape = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tschchartinfodefault3dbarshape(), target);
  }

  // optional bool tschchartinfodefault3dbeveledges = 2;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_tschchartinfodefault3dbeveledges(), target);
  }

  // optional float tschchartinfodefault3dintersetdepthgap = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_tschchartinfodefault3dintersetdepthgap(), target);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschchartinfodefault3drotation(this),
        _Internal::tschchartinfodefault3drotation(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschchartinfoarea3dscale(this),
        _Internal::tschchartinfoarea3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tschchartinfobar3dscale(this),
        _Internal::tschchartinfobar3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tschchartinfocolumn3dscale(this),
        _Internal::tschchartinfocolumn3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tschchartinfodefault3dscale(this),
        _Internal::tschchartinfodefault3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::tschchartinfoline3dscale(this),
        _Internal::tschchartinfoline3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tschchartinfopie3dscale(this),
        _Internal::tschchartinfopie3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tschchartinfodefault3dviewport(this),
        _Internal::tschchartinfodefault3dviewport(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfodefaultpiestartangle = 19;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_tschchartinfodefaultpiestartangle(), target);
  }

  // optional bool tschchartinfodefaultshowlegend = 20;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_tschchartinfodefaultshowlegend(), target);
  }

  // optional bool tschchartinfodefaultshowtitle = 21;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_tschchartinfodefaultshowtitle(), target);
  }

  // optional bool tschchartinfodefaultskiphiddendata = 22;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_tschchartinfodefaultskiphiddendata(), target);
  }

  // optional string tschchartinfodefaulttitle = 23;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartinfodefaulttitle().data(), static_cast<int>(this->_internal_tschchartinfodefaulttitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartNonStyleArchive.tschchartinfodefaulttitle");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_tschchartinfodefaulttitle(), target);
  }

  // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_tschchartinfodefaultdatasetnamelocation(), target);
  }

  // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartinfodefaultmultidatacontroltype(), target);
  }

  // optional float tschchartinfodefaultinnerradius = 27;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_tschchartinfodefaultinnerradius(), target);
  }

  // optional bool tschchartinfodefaultdonutplacetitleatcenter = 28;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartinfodefaultdonutplacetitleatcenter(), target);
  }

  // optional float tschchartinfodefaultradarstartangle = 29;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_tschchartinfodefaultradarstartangle(), target);
  }

  // optional int32 tschchartinfopiecalloutlinetype = 111;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(111, this->_internal_tschchartinfopiecalloutlinetype(), target);
  }

  // optional int32 tschchartinfoareacalloutlinetype = 112;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(112, this->_internal_tschchartinfoareacalloutlinetype(), target);
  }

  // optional int32 tschchartinfobarcalloutlinetype = 113;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(113, this->_internal_tschchartinfobarcalloutlinetype(), target);
  }

  // optional int32 tschchartinfobubblecalloutlinetype = 114;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(114, this->_internal_tschchartinfobubblecalloutlinetype(), target);
  }

  // optional int32 tschchartinfolinecalloutlinetype = 115;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(115, this->_internal_tschchartinfolinecalloutlinetype(), target);
  }

  // optional int32 tschchartinfoscattercalloutlinetype = 116;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(116, this->_internal_tschchartinfoscattercalloutlinetype(), target);
  }

  // optional int32 tschchartinfostackedareacalloutlinetype = 117;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(117, this->_internal_tschchartinfostackedareacalloutlinetype(), target);
  }

  // optional int32 tschchartinfostackedbarcalloutlinetype = 118;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(118, this->_internal_tschchartinfostackedbarcalloutlinetype(), target);
  }

  // optional int32 tschchartinfodefaultcalloutlinetype = 119;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(119, this->_internal_tschchartinfodefaultcalloutlinetype(), target);
  }

  // optional float tschchartinfodefaultdeprecatedroundedcornerradius = 120;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(120, this->_internal_tschchartinfodefaultdeprecatedroundedcornerradius(), target);
  }

  // optional bool tschchartinfodefaultdeprecatedroundedcornerouterendonly = 121;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(121, this->_internal_tschchartinfodefaultdeprecatedroundedcornerouterendonly(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartNonStyleArchive)
  return target;
}

size_t ChartNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartNonStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartinfodefaulttitle = 23;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartinfodefaulttitle());
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3drotation = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3drotation_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoarea3dscale = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoarea3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfobar3dscale = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfobar3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfocolumn3dscale = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfocolumn3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dscale = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfoline3dscale = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoline3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfopie3dscale = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfopie3dscale_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCH.Chart3DVectorArchive tschchartinfodefault3dviewport = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfodefault3dviewport_);
    }

    // optional int32 tschchartinfodefault3dbarshape = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartinfodefault3dbarshape());
    }

    // optional float tschchartinfodefault3dintersetdepthgap = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfodefaultpiestartangle = 19;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinfodefaultshowtitle = 21;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultskiphiddendata = 22;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfodefaultdatasetnamelocation = 24;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultdatasetnamelocation());
    }

    // optional int32 tschchartinfodefaultmultidatacontroltype = 25;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultmultidatacontroltype());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartinfodefaultinnerradius = 27;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartinfodefaultradarstartangle = 29;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinfodefault3dbeveledges = 2;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfodefaultdeprecatedroundedcornerouterendonly = 121;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultdonutplacetitleatcenter = 28;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodefaultshowlegend = 20;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfopiecalloutlinetype = 111;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfopiecalloutlinetype());
    }

    // optional int32 tschchartinfoareacalloutlinetype = 112;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfoareacalloutlinetype());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartinfobarcalloutlinetype = 113;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfobarcalloutlinetype());
    }

    // optional int32 tschchartinfobubblecalloutlinetype = 114;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfobubblecalloutlinetype());
    }

    // optional int32 tschchartinfolinecalloutlinetype = 115;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfolinecalloutlinetype());
    }

    // optional int32 tschchartinfoscattercalloutlinetype = 116;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfoscattercalloutlinetype());
    }

    // optional int32 tschchartinfostackedareacalloutlinetype = 117;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfostackedareacalloutlinetype());
    }

    // optional int32 tschchartinfostackedbarcalloutlinetype = 118;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfostackedbarcalloutlinetype());
    }

    // optional int32 tschchartinfodefaultcalloutlinetype = 119;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodefaultcalloutlinetype());
    }

    // optional float tschchartinfodefaultdeprecatedroundedcornerradius = 120;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartNonStyleArchive::GetClassData() const { return &_class_data_; }


void ChartNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartNonStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartNonStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartinfodefaulttitle(from._internal_tschchartinfodefaulttitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartinfodefault3drotation()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfodefault3drotation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartinfoarea3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfoarea3dscale());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartinfobar3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfobar3dscale());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartinfocolumn3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfocolumn3dscale());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartinfodefault3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfodefault3dscale());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartinfoline3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfoline3dscale());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartinfopie3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfopie3dscale());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartinfodefault3dviewport()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfodefault3dviewport());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartinfodefault3dbarshape_ = from._impl_.tschchartinfodefault3dbarshape_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartinfodefault3dintersetdepthgap_ = from._impl_.tschchartinfodefault3dintersetdepthgap_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartinfodefaultpiestartangle_ = from._impl_.tschchartinfodefaultpiestartangle_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartinfodefaultshowtitle_ = from._impl_.tschchartinfodefaultshowtitle_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartinfodefaultskiphiddendata_ = from._impl_.tschchartinfodefaultskiphiddendata_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartinfodefaultdatasetnamelocation_ = from._impl_.tschchartinfodefaultdatasetnamelocation_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartinfodefaultmultidatacontroltype_ = from._impl_.tschchartinfodefaultmultidatacontroltype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartinfodefaultinnerradius_ = from._impl_.tschchartinfodefaultinnerradius_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartinfodefaultradarstartangle_ = from._impl_.tschchartinfodefaultradarstartangle_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartinfodefault3dbeveledges_ = from._impl_.tschchartinfodefault3dbeveledges_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartinfodefaultdeprecatedroundedcornerouterendonly_ = from._impl_.tschchartinfodefaultdeprecatedroundedcornerouterendonly_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartinfodefaultdonutplacetitleatcenter_ = from._impl_.tschchartinfodefaultdonutplacetitleatcenter_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartinfodefaultshowlegend_ = from._impl_.tschchartinfodefaultshowlegend_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartinfopiecalloutlinetype_ = from._impl_.tschchartinfopiecalloutlinetype_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartinfoareacalloutlinetype_ = from._impl_.tschchartinfoareacalloutlinetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartinfobarcalloutlinetype_ = from._impl_.tschchartinfobarcalloutlinetype_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartinfobubblecalloutlinetype_ = from._impl_.tschchartinfobubblecalloutlinetype_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartinfolinecalloutlinetype_ = from._impl_.tschchartinfolinecalloutlinetype_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartinfoscattercalloutlinetype_ = from._impl_.tschchartinfoscattercalloutlinetype_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartinfostackedareacalloutlinetype_ = from._impl_.tschchartinfostackedareacalloutlinetype_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartinfostackedbarcalloutlinetype_ = from._impl_.tschchartinfostackedbarcalloutlinetype_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartinfodefaultcalloutlinetype_ = from._impl_.tschchartinfodefaultcalloutlinetype_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartinfodefaultdeprecatedroundedcornerradius_ = from._impl_.tschchartinfodefaultdeprecatedroundedcornerradius_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartNonStyleArchive::CopyFrom(const ChartNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartNonStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartinfodefault3drotation()) {
    if (!_impl_.tschchartinfodefault3drotation_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoarea3dscale()) {
    if (!_impl_.tschchartinfoarea3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobar3dscale()) {
    if (!_impl_.tschchartinfobar3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfocolumn3dscale()) {
    if (!_impl_.tschchartinfocolumn3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dscale()) {
    if (!_impl_.tschchartinfodefault3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoline3dscale()) {
    if (!_impl_.tschchartinfoline3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfopie3dscale()) {
    if (!_impl_.tschchartinfopie3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfodefault3dviewport()) {
    if (!_impl_.tschchartinfodefault3dviewport_->IsInitialized()) return false;
  }
  return true;
}

void ChartNonStyleArchive::InternalSwap(ChartNonStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartinfodefaulttitle_, lhs_arena,
      &other->_impl_.tschchartinfodefaulttitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartNonStyleArchive, _impl_.tschchartinfodefaultdeprecatedroundedcornerradius_)
      + sizeof(ChartNonStyleArchive::_impl_.tschchartinfodefaultdeprecatedroundedcornerradius_)
      - PROTOBUF_FIELD_OFFSET(ChartNonStyleArchive, _impl_.tschchartinfodefault3drotation_)>(
          reinterpret_cast<char*>(&_impl_.tschchartinfodefault3drotation_),
          reinterpret_cast<char*>(&other->_impl_.tschchartinfodefault3drotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[1]);
}

// ===================================================================

class LegendStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LegendStyleArchive>()._impl_._has_bits_);
  static const ::TSD::FillArchive& tschlegendmodeldefaultfill(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultfill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschlegendmodeldefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschlegendmodeldefaultopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::ShadowArchive& tschlegendmodeldefaultshadow(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschlegendmodeldefaultstroke(const LegendStyleArchive* msg);
  static void set_has_tschlegendmodeldefaultstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSD::FillArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultfill(const LegendStyleArchive* msg) {
  return *msg->_impl_.tschlegendmodeldefaultfill_;
}
const ::TSD::ShadowArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultshadow(const LegendStyleArchive* msg) {
  return *msg->_impl_.tschlegendmodeldefaultshadow_;
}
const ::TSD::StrokeArchive&
LegendStyleArchive::_Internal::tschlegendmodeldefaultstroke(const LegendStyleArchive* msg) {
  return *msg->_impl_.tschlegendmodeldefaultstroke_;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultfill() {
  if (_impl_.tschlegendmodeldefaultfill_ != nullptr) _impl_.tschlegendmodeldefaultfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultshadow() {
  if (_impl_.tschlegendmodeldefaultshadow_ != nullptr) _impl_.tschlegendmodeldefaultshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LegendStyleArchive::clear_tschlegendmodeldefaultstroke() {
  if (_impl_.tschlegendmodeldefaultstroke_ != nullptr) _impl_.tschlegendmodeldefaultstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
LegendStyleArchive::LegendStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.LegendStyleArchive)
}
LegendStyleArchive::LegendStyleArchive(const LegendStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LegendStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschlegendmodeldefaultfill_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultshadow_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultstroke_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_){}
    , decltype(_impl_.tschlegendmodeldefaultopacity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschlegendmodeldefaultfill()) {
    _this->_impl_.tschlegendmodeldefaultfill_ = new ::TSD::FillArchive(*from._impl_.tschlegendmodeldefaultfill_);
  }
  if (from._internal_has_tschlegendmodeldefaultshadow()) {
    _this->_impl_.tschlegendmodeldefaultshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschlegendmodeldefaultshadow_);
  }
  if (from._internal_has_tschlegendmodeldefaultstroke()) {
    _this->_impl_.tschlegendmodeldefaultstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschlegendmodeldefaultstroke_);
  }
  ::memcpy(&_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_, &from._impl_.tschlegendmodeldefaultlabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultopacity_) -
    reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_)) + sizeof(_impl_.tschlegendmodeldefaultopacity_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.LegendStyleArchive)
}

inline void LegendStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschlegendmodeldefaultfill_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultshadow_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultstroke_){nullptr}
    , decltype(_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschlegendmodeldefaultopacity_){0}
  };
}

LegendStyleArchive::~LegendStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.LegendStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LegendStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tschlegendmodeldefaultfill_;
  if (this != internal_default_instance()) delete _impl_.tschlegendmodeldefaultshadow_;
  if (this != internal_default_instance()) delete _impl_.tschlegendmodeldefaultstroke_;
}

void LegendStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LegendStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.LegendStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodeldefaultfill_ != nullptr);
      _impl_.tschlegendmodeldefaultfill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodeldefaultshadow_ != nullptr);
      _impl_.tschlegendmodeldefaultshadow_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodeldefaultstroke_ != nullptr);
      _impl_.tschlegendmodeldefaultstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultopacity_) -
        reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_)) + sizeof(_impl_.tschlegendmodeldefaultopacity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschlegendmodeldefaultlabelparagraphstyleindex(&has_bits);
          _impl_.tschlegendmodeldefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschlegendmodeldefaultopacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_tschlegendmodeldefaultopacity(&has_bits);
          _impl_.tschlegendmodeldefaultopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodeldefaultstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LegendStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.LegendStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tschlegendmodeldefaultfill(this),
        _Internal::tschlegendmodeldefaultfill(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tschlegendmodeldefaultlabelparagraphstyleindex(), target);
  }

  // optional float tschlegendmodeldefaultopacity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_tschlegendmodeldefaultopacity(), target);
  }

  // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschlegendmodeldefaultshadow(this),
        _Internal::tschlegendmodeldefaultshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschlegendmodeldefaultstroke(this),
        _Internal::tschlegendmodeldefaultstroke(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.LegendStyleArchive)
  return target;
}

size_t LegendStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.LegendStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSD.FillArchive tschlegendmodeldefaultfill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodeldefaultfill_);
    }

    // optional .TSD.ShadowArchive tschlegendmodeldefaultshadow = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodeldefaultshadow_);
    }

    // optional .TSD.StrokeArchive tschlegendmodeldefaultstroke = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodeldefaultstroke_);
    }

    // optional int32 tschlegendmodeldefaultlabelparagraphstyleindex = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschlegendmodeldefaultlabelparagraphstyleindex());
    }

    // optional float tschlegendmodeldefaultopacity = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LegendStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LegendStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LegendStyleArchive::GetClassData() const { return &_class_data_; }


void LegendStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LegendStyleArchive*>(&to_msg);
  auto& from = static_cast<const LegendStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.LegendStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschlegendmodeldefaultfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschlegendmodeldefaultfill());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschlegendmodeldefaultshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschlegendmodeldefaultshadow());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschlegendmodeldefaultstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschlegendmodeldefaultstroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschlegendmodeldefaultlabelparagraphstyleindex_ = from._impl_.tschlegendmodeldefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschlegendmodeldefaultopacity_ = from._impl_.tschlegendmodeldefaultopacity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LegendStyleArchive::CopyFrom(const LegendStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.LegendStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendStyleArchive::IsInitialized() const {
  if (_internal_has_tschlegendmodeldefaultfill()) {
    if (!_impl_.tschlegendmodeldefaultfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultshadow()) {
    if (!_impl_.tschlegendmodeldefaultshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodeldefaultstroke()) {
    if (!_impl_.tschlegendmodeldefaultstroke_->IsInitialized()) return false;
  }
  return true;
}

void LegendStyleArchive::InternalSwap(LegendStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegendStyleArchive, _impl_.tschlegendmodeldefaultopacity_)
      + sizeof(LegendStyleArchive::_impl_.tschlegendmodeldefaultopacity_)
      - PROTOBUF_FIELD_OFFSET(LegendStyleArchive, _impl_.tschlegendmodeldefaultfill_)>(
          reinterpret_cast<char*>(&_impl_.tschlegendmodeldefaultfill_),
          reinterpret_cast<char*>(&other->_impl_.tschlegendmodeldefaultfill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[2]);
}

// ===================================================================

class LegendNonStyleArchive::_Internal {
 public:
};

LegendNonStyleArchive::LegendNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.LegendNonStyleArchive)
}
LegendNonStyleArchive::LegendNonStyleArchive(const LegendNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  LegendNonStyleArchive* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.LegendNonStyleArchive)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LegendNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LegendNonStyleArchive::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LegendNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[3]);
}

// ===================================================================

class ChartAxisStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisStyleArchive>()._impl_._has_bits_);
  static void set_has_tschchartaxiscategory3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxisvalue3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategory3dgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategory3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvalue3dgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalue3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tschchartaxiscategoryhorizontalspacing(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartaxisdefaultlabelanglebaselinedirection(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_tschchartaxiscategorylabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartaxisdefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartaxisvaluelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxiscategorylabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartaxisdefaultlabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxisvaluelabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartaxiscategorymajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartaxisvaluemajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartaxiscategorymajorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategorymajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisvaluemajorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvaluemajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategorymajorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategorymajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvaluemajorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvaluemajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschchartaxiscategoryminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartaxisvalueminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSD::ShadowArchive& tschchartaxiscategoryminorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategoryminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisvalueminorgridlineshadow(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalueminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschchartaxiscategoryminorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxiscategoryminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisvalueminorgridlinestroke(const ChartAxisStyleArchive* msg);
  static void set_has_tschchartaxisvalueminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartaxiscategoryshowaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartaxisvalueshowaxis(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartaxisdefaultshowextensionlines(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartaxiscategoryshowgridlinetickmarks(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartaxisvalueshowgridlinetickmarks(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartaxiscategoryshowlastlabel(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartaxiscategoryshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartaxispolarcategoryshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_tschchartaxisvalueshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartaxiscategoryshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartaxisvalueshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartaxisvalueshowminimumlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartaxiscategoryshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartaxisvalueshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartaxiscategoryshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartaxisvalueshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartaxiscategorytickmarklocation(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tschchartaxisvaluetickmarklocation(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_tschchartaxiscategorytitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_tschchartaxisdefaulttitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_tschchartaxisvaluetitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_tschchartaxiscategoryverticalspacing(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
};

const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategory3dgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategory3dgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalue3dgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvalue3dgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategorymajorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategorymajorgridlineshadow_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvaluemajorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvaluemajorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategorymajorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategorymajorgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvaluemajorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvaluemajorgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategoryminorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategoryminorgridlineshadow_;
}
const ::TSD::ShadowArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalueminorgridlineshadow(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvalueminorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxiscategoryminorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxiscategoryminorgridlinestroke_;
}
const ::TSD::StrokeArchive&
ChartAxisStyleArchive::_Internal::tschchartaxisvalueminorgridlinestroke(const ChartAxisStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisvalueminorgridlinestroke_;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategory3dgridlinestroke() {
  if (_impl_.tschchartaxiscategory3dgridlinestroke_ != nullptr) _impl_.tschchartaxiscategory3dgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalue3dgridlinestroke() {
  if (_impl_.tschchartaxisvalue3dgridlinestroke_ != nullptr) _impl_.tschchartaxisvalue3dgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlineshadow() {
  if (_impl_.tschchartaxiscategorymajorgridlineshadow_ != nullptr) _impl_.tschchartaxiscategorymajorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlineshadow() {
  if (_impl_.tschchartaxisvaluemajorgridlineshadow_ != nullptr) _impl_.tschchartaxisvaluemajorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategorymajorgridlinestroke() {
  if (_impl_.tschchartaxiscategorymajorgridlinestroke_ != nullptr) _impl_.tschchartaxiscategorymajorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvaluemajorgridlinestroke() {
  if (_impl_.tschchartaxisvaluemajorgridlinestroke_ != nullptr) _impl_.tschchartaxisvaluemajorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlineshadow() {
  if (_impl_.tschchartaxiscategoryminorgridlineshadow_ != nullptr) _impl_.tschchartaxiscategoryminorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlineshadow() {
  if (_impl_.tschchartaxisvalueminorgridlineshadow_ != nullptr) _impl_.tschchartaxisvalueminorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartAxisStyleArchive::clear_tschchartaxiscategoryminorgridlinestroke() {
  if (_impl_.tschchartaxiscategoryminorgridlinestroke_ != nullptr) _impl_.tschchartaxiscategoryminorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartAxisStyleArchive::clear_tschchartaxisvalueminorgridlinestroke() {
  if (_impl_.tschchartaxisvalueminorgridlinestroke_ != nullptr) _impl_.tschchartaxisvalueminorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
ChartAxisStyleArchive::ChartAxisStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartAxisStyleArchive)
}
ChartAxisStyleArchive::ChartAxisStyleArchive(const ChartAxisStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxiscategory3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalue3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategory3dgridlineopacity_){}
    , decltype(_impl_.tschchartaxisvalue3dgridlineopacity_){}
    , decltype(_impl_.tschchartaxiscategoryhorizontalspacing_){}
    , decltype(_impl_.tschchartaxiscategorylabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisdefaultlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisvaluelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxiscategorylabelsorientation_){}
    , decltype(_impl_.tschchartaxisdefaultlabelsorientation_){}
    , decltype(_impl_.tschchartaxisvaluelabelsorientation_){}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineopacity_){}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineopacity_){}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineopacity_){}
    , decltype(_impl_.tschchartaxisvalueminorgridlineopacity_){}
    , decltype(_impl_.tschchartaxisvalueshowmajorgridlines_){}
    , decltype(_impl_.tschchartaxiscategoryshowmajortickmarks_){}
    , decltype(_impl_.tschchartaxisvalueshowmajortickmarks_){}
    , decltype(_impl_.tschchartaxisvalueshowminimumlabel_){}
    , decltype(_impl_.tschchartaxiscategoryshowminorgridlines_){}
    , decltype(_impl_.tschchartaxisvalueshowminorgridlines_){}
    , decltype(_impl_.tschchartaxiscategoryshowminortickmarks_){}
    , decltype(_impl_.tschchartaxisvalueshowminortickmarks_){}
    , decltype(_impl_.tschchartaxiscategoryshowaxis_){}
    , decltype(_impl_.tschchartaxisvalueshowaxis_){}
    , decltype(_impl_.tschchartaxisdefaultshowextensionlines_){}
    , decltype(_impl_.tschchartaxiscategoryshowgridlinetickmarks_){}
    , decltype(_impl_.tschchartaxisvalueshowgridlinetickmarks_){}
    , decltype(_impl_.tschchartaxiscategoryshowlastlabel_){}
    , decltype(_impl_.tschchartaxiscategoryshowmajorgridlines_){}
    , decltype(_impl_.tschchartaxispolarcategoryshowmajorgridlines_){}
    , decltype(_impl_.tschchartaxiscategorytickmarklocation_){}
    , decltype(_impl_.tschchartaxisvaluetickmarklocation_){}
    , decltype(_impl_.tschchartaxiscategorytitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisdefaulttitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisvaluetitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxiscategoryverticalspacing_){}
    , decltype(_impl_.tschchartaxisdefaultlabelanglebaselinedirection_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschchartaxiscategory3dgridlinestroke()) {
    _this->_impl_.tschchartaxiscategory3dgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxiscategory3dgridlinestroke_);
  }
  if (from._internal_has_tschchartaxisvalue3dgridlinestroke()) {
    _this->_impl_.tschchartaxisvalue3dgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxisvalue3dgridlinestroke_);
  }
  if (from._internal_has_tschchartaxiscategorymajorgridlineshadow()) {
    _this->_impl_.tschchartaxiscategorymajorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxiscategorymajorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxisvaluemajorgridlineshadow()) {
    _this->_impl_.tschchartaxisvaluemajorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxisvaluemajorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxiscategorymajorgridlinestroke()) {
    _this->_impl_.tschchartaxiscategorymajorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxiscategorymajorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxisvaluemajorgridlinestroke()) {
    _this->_impl_.tschchartaxisvaluemajorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxisvaluemajorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxiscategoryminorgridlineshadow()) {
    _this->_impl_.tschchartaxiscategoryminorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxiscategoryminorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxisvalueminorgridlineshadow()) {
    _this->_impl_.tschchartaxisvalueminorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxisvalueminorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxiscategoryminorgridlinestroke()) {
    _this->_impl_.tschchartaxiscategoryminorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxiscategoryminorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxisvalueminorgridlinestroke()) {
    _this->_impl_.tschchartaxisvalueminorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxisvalueminorgridlinestroke_);
  }
  ::memcpy(&_impl_.tschchartaxiscategory3dgridlineopacity_, &from._impl_.tschchartaxiscategory3dgridlineopacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartaxisdefaultlabelanglebaselinedirection_) -
    reinterpret_cast<char*>(&_impl_.tschchartaxiscategory3dgridlineopacity_)) + sizeof(_impl_.tschchartaxisdefaultlabelanglebaselinedirection_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartAxisStyleArchive)
}

inline void ChartAxisStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxiscategory3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalue3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategorymajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvaluemajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxiscategoryminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisvalueminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxiscategory3dgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisvalue3dgridlineopacity_){0}
    , decltype(_impl_.tschchartaxiscategoryhorizontalspacing_){0}
    , decltype(_impl_.tschchartaxiscategorylabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisdefaultlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisvaluelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxiscategorylabelsorientation_){0}
    , decltype(_impl_.tschchartaxisdefaultlabelsorientation_){0}
    , decltype(_impl_.tschchartaxisvaluelabelsorientation_){0}
    , decltype(_impl_.tschchartaxiscategorymajorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisvaluemajorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxiscategoryminorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisvalueminorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisvalueshowmajorgridlines_){false}
    , decltype(_impl_.tschchartaxiscategoryshowmajortickmarks_){false}
    , decltype(_impl_.tschchartaxisvalueshowmajortickmarks_){false}
    , decltype(_impl_.tschchartaxisvalueshowminimumlabel_){false}
    , decltype(_impl_.tschchartaxiscategoryshowminorgridlines_){false}
    , decltype(_impl_.tschchartaxisvalueshowminorgridlines_){false}
    , decltype(_impl_.tschchartaxiscategoryshowminortickmarks_){false}
    , decltype(_impl_.tschchartaxisvalueshowminortickmarks_){false}
    , decltype(_impl_.tschchartaxiscategoryshowaxis_){false}
    , decltype(_impl_.tschchartaxisvalueshowaxis_){false}
    , decltype(_impl_.tschchartaxisdefaultshowextensionlines_){false}
    , decltype(_impl_.tschchartaxiscategoryshowgridlinetickmarks_){false}
    , decltype(_impl_.tschchartaxisvalueshowgridlinetickmarks_){false}
    , decltype(_impl_.tschchartaxiscategoryshowlastlabel_){false}
    , decltype(_impl_.tschchartaxiscategoryshowmajorgridlines_){false}
    , decltype(_impl_.tschchartaxispolarcategoryshowmajorgridlines_){false}
    , decltype(_impl_.tschchartaxiscategorytickmarklocation_){0}
    , decltype(_impl_.tschchartaxisvaluetickmarklocation_){0}
    , decltype(_impl_.tschchartaxiscategorytitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisdefaulttitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisvaluetitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxiscategoryverticalspacing_){0}
    , decltype(_impl_.tschchartaxisdefaultlabelanglebaselinedirection_){0}
  };
}

ChartAxisStyleArchive::~ChartAxisStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartAxisStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategory3dgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvalue3dgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategorymajorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvaluemajorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategorymajorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvaluemajorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategoryminorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvalueminorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxiscategoryminorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisvalueminorgridlinestroke_;
}

void ChartAxisStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartAxisStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategory3dgridlinestroke_ != nullptr);
      _impl_.tschchartaxiscategory3dgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvalue3dgridlinestroke_ != nullptr);
      _impl_.tschchartaxisvalue3dgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategorymajorgridlineshadow_ != nullptr);
      _impl_.tschchartaxiscategorymajorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvaluemajorgridlineshadow_ != nullptr);
      _impl_.tschchartaxisvaluemajorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategorymajorgridlinestroke_ != nullptr);
      _impl_.tschchartaxiscategorymajorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvaluemajorgridlinestroke_ != nullptr);
      _impl_.tschchartaxisvaluemajorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategoryminorgridlineshadow_ != nullptr);
      _impl_.tschchartaxiscategoryminorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvalueminorgridlineshadow_ != nullptr);
      _impl_.tschchartaxisvalueminorgridlineshadow_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartaxiscategoryminorgridlinestroke_ != nullptr);
      _impl_.tschchartaxiscategoryminorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisvalueminorgridlinestroke_ != nullptr);
      _impl_.tschchartaxisvalueminorgridlinestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&_impl_.tschchartaxiscategory3dgridlineopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisvaluelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategory3dgridlineopacity_)) + sizeof(_impl_.tschchartaxisvaluelabelparagraphstyleindex_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartaxiscategorylabelsorientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisvalueshowmajorgridlines_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategorylabelsorientation_)) + sizeof(_impl_.tschchartaxisvalueshowmajorgridlines_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartaxiscategoryshowmajortickmarks_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategoryshowaxis_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategoryshowmajortickmarks_)) + sizeof(_impl_.tschchartaxiscategoryshowaxis_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartaxisvalueshowaxis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategorytickmarklocation_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisvalueshowaxis_)) + sizeof(_impl_.tschchartaxiscategorytickmarklocation_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&_impl_.tschchartaxisvaluetickmarklocation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisdefaultlabelanglebaselinedirection_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisvaluetickmarklocation_)) + sizeof(_impl_.tschchartaxisdefaultlabelanglebaselinedirection_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float tschchartaxiscategory3dgridlineopacity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_tschchartaxiscategory3dgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxiscategory3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvalue3dgridlineopacity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_tschchartaxisvalue3dgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxisvalue3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategory3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalue3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartaxiscategoryhorizontalspacing(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryhorizontalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartaxiscategorylabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorylabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartaxisdefaultlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisdefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartaxisvaluelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxiscategorylabelsorientation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_tschchartaxiscategorylabelsorientation(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorylabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisdefaultlabelsorientation = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_tschchartaxisdefaultlabelsorientation(&_impl_._has_bits_);
          _impl_.tschchartaxisdefaultlabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvaluelabelsorientation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_tschchartaxisvaluelabelsorientation(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluelabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxiscategorymajorgridlineopacity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_tschchartaxiscategorymajorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorymajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvaluemajorgridlineopacity = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_tschchartaxisvaluemajorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluemajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategorymajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvaluemajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategorymajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvaluemajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxiscategoryminorgridlineopacity = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 149)) {
          _Internal::set_has_tschchartaxiscategoryminorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisvalueminorgridlineopacity = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_tschchartaxisvalueminorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategoryminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalueminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxiscategoryminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisvalueminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowaxis = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartaxiscategoryshowaxis(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowaxis = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartaxisvalueshowaxis(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowlastlabel = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartaxiscategoryshowlastlabel(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowlastlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartaxiscategoryshowmajorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowmajorgridlines = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartaxisvalueshowmajorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartaxiscategoryshowmajortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowmajortickmarks = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartaxisvalueshowmajortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminimumlabel = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartaxisvalueshowminimumlabel(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowminimumlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowminorgridlines = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartaxiscategoryshowminorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminorgridlines = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartaxisvalueshowminorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowminortickmarks = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartaxiscategoryshowminortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowminortickmarks = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartaxisvalueshowminortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorytickmarklocation = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartaxiscategorytickmarklocation(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorytickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluetickmarklocation = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartaxisvaluetickmarklocation(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluetickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartaxiscategorytitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxiscategorytitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartaxisdefaulttitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisdefaulttitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartaxisvaluetitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxisvaluetitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxiscategoryverticalspacing = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartaxiscategoryverticalspacing(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryverticalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowgridlinetickmarks = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartaxiscategoryshowgridlinetickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxiscategoryshowgridlinetickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowgridlinetickmarks = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartaxisvalueshowgridlinetickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxisvalueshowgridlinetickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxispolarcategoryshowmajorgridlines = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tschchartaxispolarcategoryshowmajorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxispolarcategoryshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaultlabelanglebaselinedirection = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartaxisdefaultlabelanglebaselinedirection(&_impl_._has_bits_);
          _impl_.tschchartaxisdefaultlabelanglebaselinedirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisdefaultshowextensionlines = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartaxisdefaultshowextensionlines(&_impl_._has_bits_);
          _impl_.tschchartaxisdefaultshowextensionlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartAxisStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float tschchartaxiscategory3dgridlineopacity = 1;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_tschchartaxiscategory3dgridlineopacity(), target);
  }

  // optional float tschchartaxisvalue3dgridlineopacity = 2;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_tschchartaxisvalue3dgridlineopacity(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tschchartaxiscategory3dgridlinestroke(this),
        _Internal::tschchartaxiscategory3dgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschchartaxisvalue3dgridlinestroke(this),
        _Internal::tschchartaxisvalue3dgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_tschchartaxiscategoryhorizontalspacing(), target);
  }

  // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_tschchartaxiscategorylabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_tschchartaxisdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_tschchartaxisvaluelabelparagraphstyleindex(), target);
  }

  // optional float tschchartaxiscategorylabelsorientation = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_tschchartaxiscategorylabelsorientation(), target);
  }

  // optional float tschchartaxisdefaultlabelsorientation = 10;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_tschchartaxisdefaultlabelsorientation(), target);
  }

  // optional float tschchartaxisvaluelabelsorientation = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_tschchartaxisvaluelabelsorientation(), target);
  }

  // optional float tschchartaxiscategorymajorgridlineopacity = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_tschchartaxiscategorymajorgridlineopacity(), target);
  }

  // optional float tschchartaxisvaluemajorgridlineopacity = 13;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_tschchartaxisvaluemajorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tschchartaxiscategorymajorgridlineshadow(this),
        _Internal::tschchartaxiscategorymajorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::tschchartaxisvaluemajorgridlineshadow(this),
        _Internal::tschchartaxisvaluemajorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::tschchartaxiscategorymajorgridlinestroke(this),
        _Internal::tschchartaxiscategorymajorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::tschchartaxisvaluemajorgridlinestroke(this),
        _Internal::tschchartaxisvaluemajorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartaxiscategoryminorgridlineopacity = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(18, this->_internal_tschchartaxiscategoryminorgridlineopacity(), target);
  }

  // optional float tschchartaxisvalueminorgridlineopacity = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_tschchartaxisvalueminorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::tschchartaxiscategoryminorgridlineshadow(this),
        _Internal::tschchartaxiscategoryminorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::tschchartaxisvalueminorgridlineshadow(this),
        _Internal::tschchartaxisvalueminorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::tschchartaxiscategoryminorgridlinestroke(this),
        _Internal::tschchartaxiscategoryminorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::tschchartaxisvalueminorgridlinestroke(this),
        _Internal::tschchartaxisvalueminorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional bool tschchartaxiscategoryshowaxis = 24;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_tschchartaxiscategoryshowaxis(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartaxisvalueshowaxis = 25;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(25, this->_internal_tschchartaxisvalueshowaxis(), target);
  }

  // optional bool tschchartaxiscategoryshowlastlabel = 26;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_tschchartaxiscategoryshowlastlabel(), target);
  }

  // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_tschchartaxiscategoryshowmajorgridlines(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool tschchartaxisvalueshowmajorgridlines = 28;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartaxisvalueshowmajorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_tschchartaxiscategoryshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowmajortickmarks = 30;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_tschchartaxisvalueshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowminimumlabel = 31;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_tschchartaxisvalueshowminimumlabel(), target);
  }

  // optional bool tschchartaxiscategoryshowminorgridlines = 32;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartaxiscategoryshowminorgridlines(), target);
  }

  // optional bool tschchartaxisvalueshowminorgridlines = 33;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_tschchartaxisvalueshowminorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryshowminortickmarks = 34;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_tschchartaxiscategoryshowminortickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowminortickmarks = 35;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_tschchartaxisvalueshowminortickmarks(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartaxiscategorytickmarklocation = 36;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_tschchartaxiscategorytickmarklocation(), target);
  }

  // optional int32 tschchartaxisvaluetickmarklocation = 37;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(37, this->_internal_tschchartaxisvaluetickmarklocation(), target);
  }

  // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(38, this->_internal_tschchartaxiscategorytitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(39, this->_internal_tschchartaxisdefaulttitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_tschchartaxisvaluetitleparagraphstyleindex(), target);
  }

  // optional int32 tschchartaxiscategoryverticalspacing = 41;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(41, this->_internal_tschchartaxiscategoryverticalspacing(), target);
  }

  // optional bool tschchartaxiscategoryshowgridlinetickmarks = 42;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_tschchartaxiscategoryshowgridlinetickmarks(), target);
  }

  // optional bool tschchartaxisvalueshowgridlinetickmarks = 43;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_tschchartaxisvalueshowgridlinetickmarks(), target);
  }

  // optional bool tschchartaxispolarcategoryshowmajorgridlines = 44;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(44, this->_internal_tschchartaxispolarcategoryshowmajorgridlines(), target);
  }

  // optional int32 tschchartaxisdefaultlabelanglebaselinedirection = 46;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_tschchartaxisdefaultlabelanglebaselinedirection(), target);
  }

  // optional bool tschchartaxisdefaultshowextensionlines = 47;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(47, this->_internal_tschchartaxisdefaultshowextensionlines(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartAxisStyleArchive)
  return target;
}

size_t ChartAxisStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartAxisStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.StrokeArchive tschchartaxiscategory3dgridlinestroke = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategory3dgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvalue3dgridlinestroke = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvalue3dgridlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartaxiscategorymajorgridlineshadow = 14;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategorymajorgridlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartaxisvaluemajorgridlineshadow = 15;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvaluemajorgridlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartaxiscategorymajorgridlinestroke = 16;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategorymajorgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvaluemajorgridlinestroke = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvaluemajorgridlinestroke_);
    }

    // optional .TSD.ShadowArchive tschchartaxiscategoryminorgridlineshadow = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategoryminorgridlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartaxisvalueminorgridlineshadow = 21;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvalueminorgridlineshadow_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.StrokeArchive tschchartaxiscategoryminorgridlinestroke = 22;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxiscategoryminorgridlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartaxisvalueminorgridlinestroke = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisvalueminorgridlinestroke_);
    }

    // optional float tschchartaxiscategory3dgridlineopacity = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvalue3dgridlineopacity = 2;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartaxiscategoryhorizontalspacing = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxiscategoryhorizontalspacing());
    }

    // optional int32 tschchartaxiscategorylabelparagraphstyleindex = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxiscategorylabelparagraphstyleindex());
    }

    // optional int32 tschchartaxisdefaultlabelparagraphstyleindex = 7;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluelabelparagraphstyleindex = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisvaluelabelparagraphstyleindex());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartaxiscategorylabelsorientation = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisdefaultlabelsorientation = 10;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvaluelabelsorientation = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxiscategorymajorgridlineopacity = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisvaluemajorgridlineopacity = 13;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxiscategoryminorgridlineopacity = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartaxisvalueminorgridlineopacity = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartaxisvalueshowmajorgridlines = 28;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool tschchartaxiscategoryshowmajortickmarks = 29;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowmajortickmarks = 30;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowminimumlabel = 31;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminorgridlines = 32;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowminorgridlines = 33;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowminortickmarks = 34;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowminortickmarks = 35;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowaxis = 24;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool tschchartaxisvalueshowaxis = 25;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisdefaultshowextensionlines = 47;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowgridlinetickmarks = 42;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisvalueshowgridlinetickmarks = 43;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowlastlabel = 26;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowmajorgridlines = 27;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxispolarcategoryshowmajorgridlines = 44;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartaxiscategorytickmarklocation = 36;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorytickmarklocation());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional int32 tschchartaxisvaluetickmarklocation = 37;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluetickmarklocation());
    }

    // optional int32 tschchartaxiscategorytitleparagraphstyleindex = 38;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategorytitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisdefaulttitleparagraphstyleindex = 39;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaulttitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisvaluetitleparagraphstyleindex = 40;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisvaluetitleparagraphstyleindex());
    }

    // optional int32 tschchartaxiscategoryverticalspacing = 41;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxiscategoryverticalspacing());
    }

    // optional int32 tschchartaxisdefaultlabelanglebaselinedirection = 46;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisdefaultlabelanglebaselinedirection());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisStyleArchive::GetClassData() const { return &_class_data_; }


void ChartAxisStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartAxisStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschchartaxiscategory3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxiscategory3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartaxisvalue3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxisvalue3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartaxiscategorymajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxiscategorymajorgridlineshadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartaxisvaluemajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxisvaluemajorgridlineshadow());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartaxiscategorymajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxiscategorymajorgridlinestroke());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartaxisvaluemajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxisvaluemajorgridlinestroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartaxiscategoryminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxiscategoryminorgridlineshadow());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartaxisvalueminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxisvalueminorgridlineshadow());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartaxiscategoryminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxiscategoryminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartaxisvalueminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxisvalueminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartaxiscategory3dgridlineopacity_ = from._impl_.tschchartaxiscategory3dgridlineopacity_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartaxisvalue3dgridlineopacity_ = from._impl_.tschchartaxisvalue3dgridlineopacity_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartaxiscategoryhorizontalspacing_ = from._impl_.tschchartaxiscategoryhorizontalspacing_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartaxiscategorylabelparagraphstyleindex_ = from._impl_.tschchartaxiscategorylabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartaxisdefaultlabelparagraphstyleindex_ = from._impl_.tschchartaxisdefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartaxisvaluelabelparagraphstyleindex_ = from._impl_.tschchartaxisvaluelabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartaxiscategorylabelsorientation_ = from._impl_.tschchartaxiscategorylabelsorientation_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartaxisdefaultlabelsorientation_ = from._impl_.tschchartaxisdefaultlabelsorientation_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartaxisvaluelabelsorientation_ = from._impl_.tschchartaxisvaluelabelsorientation_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartaxiscategorymajorgridlineopacity_ = from._impl_.tschchartaxiscategorymajorgridlineopacity_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartaxisvaluemajorgridlineopacity_ = from._impl_.tschchartaxisvaluemajorgridlineopacity_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartaxiscategoryminorgridlineopacity_ = from._impl_.tschchartaxiscategoryminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartaxisvalueminorgridlineopacity_ = from._impl_.tschchartaxisvalueminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartaxisvalueshowmajorgridlines_ = from._impl_.tschchartaxisvalueshowmajorgridlines_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartaxiscategoryshowmajortickmarks_ = from._impl_.tschchartaxiscategoryshowmajortickmarks_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartaxisvalueshowmajortickmarks_ = from._impl_.tschchartaxisvalueshowmajortickmarks_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartaxisvalueshowminimumlabel_ = from._impl_.tschchartaxisvalueshowminimumlabel_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartaxiscategoryshowminorgridlines_ = from._impl_.tschchartaxiscategoryshowminorgridlines_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartaxisvalueshowminorgridlines_ = from._impl_.tschchartaxisvalueshowminorgridlines_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartaxiscategoryshowminortickmarks_ = from._impl_.tschchartaxiscategoryshowminortickmarks_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartaxisvalueshowminortickmarks_ = from._impl_.tschchartaxisvalueshowminortickmarks_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartaxiscategoryshowaxis_ = from._impl_.tschchartaxiscategoryshowaxis_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartaxisvalueshowaxis_ = from._impl_.tschchartaxisvalueshowaxis_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartaxisdefaultshowextensionlines_ = from._impl_.tschchartaxisdefaultshowextensionlines_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartaxiscategoryshowgridlinetickmarks_ = from._impl_.tschchartaxiscategoryshowgridlinetickmarks_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartaxisvalueshowgridlinetickmarks_ = from._impl_.tschchartaxisvalueshowgridlinetickmarks_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartaxiscategoryshowlastlabel_ = from._impl_.tschchartaxiscategoryshowlastlabel_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartaxiscategoryshowmajorgridlines_ = from._impl_.tschchartaxiscategoryshowmajorgridlines_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartaxispolarcategoryshowmajorgridlines_ = from._impl_.tschchartaxispolarcategoryshowmajorgridlines_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartaxiscategorytickmarklocation_ = from._impl_.tschchartaxiscategorytickmarklocation_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartaxisvaluetickmarklocation_ = from._impl_.tschchartaxisvaluetickmarklocation_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartaxiscategorytitleparagraphstyleindex_ = from._impl_.tschchartaxiscategorytitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartaxisdefaulttitleparagraphstyleindex_ = from._impl_.tschchartaxisdefaulttitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartaxisvaluetitleparagraphstyleindex_ = from._impl_.tschchartaxisvaluetitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartaxiscategoryverticalspacing_ = from._impl_.tschchartaxiscategoryverticalspacing_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartaxisdefaultlabelanglebaselinedirection_ = from._impl_.tschchartaxisdefaultlabelanglebaselinedirection_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisStyleArchive::CopyFrom(const ChartAxisStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartAxisStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartaxiscategory3dgridlinestroke()) {
    if (!_impl_.tschchartaxiscategory3dgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalue3dgridlinestroke()) {
    if (!_impl_.tschchartaxisvalue3dgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategorymajorgridlineshadow()) {
    if (!_impl_.tschchartaxiscategorymajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvaluemajorgridlineshadow()) {
    if (!_impl_.tschchartaxisvaluemajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategorymajorgridlinestroke()) {
    if (!_impl_.tschchartaxiscategorymajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvaluemajorgridlinestroke()) {
    if (!_impl_.tschchartaxisvaluemajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategoryminorgridlineshadow()) {
    if (!_impl_.tschchartaxiscategoryminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalueminorgridlineshadow()) {
    if (!_impl_.tschchartaxisvalueminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxiscategoryminorgridlinestroke()) {
    if (!_impl_.tschchartaxiscategoryminorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisvalueminorgridlinestroke()) {
    if (!_impl_.tschchartaxisvalueminorgridlinestroke_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisStyleArchive::InternalSwap(ChartAxisStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisStyleArchive, _impl_.tschchartaxisdefaultlabelanglebaselinedirection_)
      + sizeof(ChartAxisStyleArchive::_impl_.tschchartaxisdefaultlabelanglebaselinedirection_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisStyleArchive, _impl_.tschchartaxiscategory3dgridlinestroke_)>(
          reinterpret_cast<char*>(&_impl_.tschchartaxiscategory3dgridlinestroke_),
          reinterpret_cast<char*>(&other->_impl_.tschchartaxiscategory3dgridlinestroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[4]);
}

// ===================================================================

class ChartAxisNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisNonStyleArchive>()._impl_._has_bits_);
  static const ::TSK::FormatStructArchive& tschchartaxisdefault1_0dateformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefault1_0dateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdefault1_0numberformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefault1_0numberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartaxisdefault3dlabelposition(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdefaultdateformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultdateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdefaultdurationformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultdurationformat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartaxisdefaultlabelexplosion(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdefaultnumberformat(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartaxisdefaultnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxisvaluenumberofdecades(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartaxisvaluenumberofmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartaxisvaluenumberofminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartaxiscategoryplottoedges(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxisvaluescale(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartaxiscategoryshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartaxisdefaultshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxisvalueshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartaxiscategoryshowserieslabels(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartaxismultidatashowserieslabels(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartaxiscategoryshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartaxisvalueshowtitle(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartaxiscategorytitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartaxisvaluetitle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermax(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultusermax(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisdefaultusermin(const ChartAxisNonStyleArchive* msg);
  static void set_has_tschchartaxisdefaultusermin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSK::FormatStructArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefault1_0dateformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefault1_0dateformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefault1_0numberformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefault1_0numberformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultdateformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefaultdateformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultdurationformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefaultdurationformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultnumberformat(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefaultnumberformat_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultusermax(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefaultusermax_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisNonStyleArchive::_Internal::tschchartaxisdefaultusermin(const ChartAxisNonStyleArchive* msg) {
  return *msg->_impl_.tschchartaxisdefaultusermin_;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefault1_0dateformat() {
  if (_impl_.tschchartaxisdefault1_0dateformat_ != nullptr) _impl_.tschchartaxisdefault1_0dateformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefault1_0numberformat() {
  if (_impl_.tschchartaxisdefault1_0numberformat_ != nullptr) _impl_.tschchartaxisdefault1_0numberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultdateformat() {
  if (_impl_.tschchartaxisdefaultdateformat_ != nullptr) _impl_.tschchartaxisdefaultdateformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultdurationformat() {
  if (_impl_.tschchartaxisdefaultdurationformat_ != nullptr) _impl_.tschchartaxisdefaultdurationformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultnumberformat() {
  if (_impl_.tschchartaxisdefaultnumberformat_ != nullptr) _impl_.tschchartaxisdefaultnumberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermax() {
  if (_impl_.tschchartaxisdefaultusermax_ != nullptr) _impl_.tschchartaxisdefaultusermax_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartAxisNonStyleArchive::clear_tschchartaxisdefaultusermin() {
  if (_impl_.tschchartaxisdefaultusermin_ != nullptr) _impl_.tschchartaxisdefaultusermin_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartAxisNonStyleArchive)
}
ChartAxisNonStyleArchive::ChartAxisNonStyleArchive(const ChartAxisNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisNonStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxiscategorytitle_){}
    , decltype(_impl_.tschchartaxisvaluetitle_){}
    , decltype(_impl_.tschchartaxisdefault1_0numberformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermax_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermin_){nullptr}
    , decltype(_impl_.tschchartaxisdefault1_0dateformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultdurationformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultdateformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefault3dlabelposition_){}
    , decltype(_impl_.tschchartaxisdefaultnumberformattype_){}
    , decltype(_impl_.tschchartaxisvaluenumberofdecades_){}
    , decltype(_impl_.tschchartaxisvaluenumberofmajorgridlines_){}
    , decltype(_impl_.tschchartaxisvaluenumberofminorgridlines_){}
    , decltype(_impl_.tschchartaxisvaluescale_){}
    , decltype(_impl_.tschchartaxiscategoryplottoedges_){}
    , decltype(_impl_.tschchartaxiscategoryshowlabels_){}
    , decltype(_impl_.tschchartaxisdefaultshowlabels_){}
    , decltype(_impl_.tschchartaxisvalueshowlabels_){}
    , decltype(_impl_.tschchartaxiscategoryshowserieslabels_){}
    , decltype(_impl_.tschchartaxismultidatashowserieslabels_){}
    , decltype(_impl_.tschchartaxiscategoryshowtitle_){}
    , decltype(_impl_.tschchartaxisvalueshowtitle_){}
    , decltype(_impl_.tschchartaxisdefaultlabelexplosion_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartaxiscategorytitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxiscategorytitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartaxiscategorytitle()) {
    _this->_impl_.tschchartaxiscategorytitle_.Set(from._internal_tschchartaxiscategorytitle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tschchartaxisvaluetitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxisvaluetitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartaxisvaluetitle()) {
    _this->_impl_.tschchartaxisvaluetitle_.Set(from._internal_tschchartaxisvaluetitle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tschchartaxisdefault1_0numberformat()) {
    _this->_impl_.tschchartaxisdefault1_0numberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartaxisdefault1_0numberformat_);
  }
  if (from._internal_has_tschchartaxisdefaultusermax()) {
    _this->_impl_.tschchartaxisdefaultusermax_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from._impl_.tschchartaxisdefaultusermax_);
  }
  if (from._internal_has_tschchartaxisdefaultusermin()) {
    _this->_impl_.tschchartaxisdefaultusermin_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from._impl_.tschchartaxisdefaultusermin_);
  }
  if (from._internal_has_tschchartaxisdefault1_0dateformat()) {
    _this->_impl_.tschchartaxisdefault1_0dateformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartaxisdefault1_0dateformat_);
  }
  if (from._internal_has_tschchartaxisdefaultdurationformat()) {
    _this->_impl_.tschchartaxisdefaultdurationformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartaxisdefaultdurationformat_);
  }
  if (from._internal_has_tschchartaxisdefaultdateformat()) {
    _this->_impl_.tschchartaxisdefaultdateformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartaxisdefaultdateformat_);
  }
  if (from._internal_has_tschchartaxisdefaultnumberformat()) {
    _this->_impl_.tschchartaxisdefaultnumberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartaxisdefaultnumberformat_);
  }
  ::memcpy(&_impl_.tschchartaxisdefault3dlabelposition_, &from._impl_.tschchartaxisdefault3dlabelposition_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartaxisdefaultlabelexplosion_) -
    reinterpret_cast<char*>(&_impl_.tschchartaxisdefault3dlabelposition_)) + sizeof(_impl_.tschchartaxisdefaultlabelexplosion_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartAxisNonStyleArchive)
}

inline void ChartAxisNonStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxiscategorytitle_){}
    , decltype(_impl_.tschchartaxisvaluetitle_){}
    , decltype(_impl_.tschchartaxisdefault1_0numberformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermax_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultusermin_){nullptr}
    , decltype(_impl_.tschchartaxisdefault1_0dateformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultdurationformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultdateformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartaxisdefault3dlabelposition_){0}
    , decltype(_impl_.tschchartaxisdefaultnumberformattype_){0}
    , decltype(_impl_.tschchartaxisvaluenumberofdecades_){0}
    , decltype(_impl_.tschchartaxisvaluenumberofmajorgridlines_){0}
    , decltype(_impl_.tschchartaxisvaluenumberofminorgridlines_){0}
    , decltype(_impl_.tschchartaxisvaluescale_){0}
    , decltype(_impl_.tschchartaxiscategoryplottoedges_){false}
    , decltype(_impl_.tschchartaxiscategoryshowlabels_){false}
    , decltype(_impl_.tschchartaxisdefaultshowlabels_){false}
    , decltype(_impl_.tschchartaxisvalueshowlabels_){false}
    , decltype(_impl_.tschchartaxiscategoryshowserieslabels_){false}
    , decltype(_impl_.tschchartaxismultidatashowserieslabels_){false}
    , decltype(_impl_.tschchartaxiscategoryshowtitle_){false}
    , decltype(_impl_.tschchartaxisvalueshowtitle_){false}
    , decltype(_impl_.tschchartaxisdefaultlabelexplosion_){0}
  };
  _impl_.tschchartaxiscategorytitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxiscategorytitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tschchartaxisvaluetitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxisvaluetitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartAxisNonStyleArchive::~ChartAxisNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartAxisNonStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartaxiscategorytitle_.Destroy();
  _impl_.tschchartaxisvaluetitle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefault1_0numberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefaultusermax_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefaultusermin_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefault1_0dateformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefaultdurationformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefaultdateformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdefaultnumberformat_;
}

void ChartAxisNonStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartAxisNonStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartaxiscategorytitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.tschchartaxisvaluetitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefault1_0numberformat_ != nullptr);
      _impl_.tschchartaxisdefault1_0numberformat_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefaultusermax_ != nullptr);
      _impl_.tschchartaxisdefaultusermax_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefaultusermin_ != nullptr);
      _impl_.tschchartaxisdefaultusermin_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefault1_0dateformat_ != nullptr);
      _impl_.tschchartaxisdefault1_0dateformat_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefaultdurationformat_ != nullptr);
      _impl_.tschchartaxisdefaultdurationformat_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdefaultdateformat_ != nullptr);
      _impl_.tschchartaxisdefaultdateformat_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.tschchartaxisdefaultnumberformat_ != nullptr);
    _impl_.tschchartaxisdefaultnumberformat_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&_impl_.tschchartaxisdefault3dlabelposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategoryplottoedges_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisdefault3dlabelposition_)) + sizeof(_impl_.tschchartaxiscategoryplottoedges_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartaxiscategoryshowlabels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisdefaultlabelexplosion_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxiscategoryshowlabels_)) + sizeof(_impl_.tschchartaxisdefaultlabelexplosion_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisNonStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tschchartaxisdefault3dlabelposition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartaxisdefault3dlabelposition(&has_bits);
          _impl_.tschchartaxisdefault3dlabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefault1_0numberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisdefaultnumberformattype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartaxisdefaultnumberformattype(&has_bits);
          _impl_.tschchartaxisdefaultnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofdecades = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartaxisvaluenumberofdecades(&has_bits);
          _impl_.tschchartaxisvaluenumberofdecades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartaxisvaluenumberofmajorgridlines(&has_bits);
          _impl_.tschchartaxisvaluenumberofmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartaxisvaluenumberofminorgridlines(&has_bits);
          _impl_.tschchartaxisvaluenumberofminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryplottoedges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartaxiscategoryplottoedges(&has_bits);
          _impl_.tschchartaxiscategoryplottoedges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisvaluescale = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartaxisvaluescale(&has_bits);
          _impl_.tschchartaxisvaluescale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowlabels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartaxiscategoryshowlabels(&has_bits);
          _impl_.tschchartaxiscategoryshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisdefaultshowlabels = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartaxisdefaultshowlabels(&has_bits);
          _impl_.tschchartaxisdefaultshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowlabels = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartaxisvalueshowlabels(&has_bits);
          _impl_.tschchartaxisvalueshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowserieslabels = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tschchartaxiscategoryshowserieslabels(&has_bits);
          _impl_.tschchartaxiscategoryshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxiscategoryshowtitle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartaxiscategoryshowtitle(&has_bits);
          _impl_.tschchartaxiscategoryshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisvalueshowtitle = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartaxisvalueshowtitle(&has_bits);
          _impl_.tschchartaxisvalueshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartaxiscategorytitle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_tschchartaxiscategorytitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartaxisvaluetitle = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_tschchartaxisvaluetitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultusermax(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultusermin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxismultidatashowserieslabels = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartaxismultidatashowserieslabels(&has_bits);
          _impl_.tschchartaxismultidatashowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefault1_0dateformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultdurationformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultdateformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisdefaultlabelexplosion = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_tschchartaxisdefaultlabelexplosion(&has_bits);
          _impl_.tschchartaxisdefaultlabelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdefaultnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisNonStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartAxisNonStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tschchartaxisdefault3dlabelposition = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tschchartaxisdefault3dlabelposition(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tschchartaxisdefault1_0numberformat(this),
        _Internal::tschchartaxisdefault1_0numberformat(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartaxisdefaultnumberformattype = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tschchartaxisdefaultnumberformattype(), target);
  }

  // optional int32 tschchartaxisvaluenumberofdecades = 4;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tschchartaxisvaluenumberofdecades(), target);
  }

  // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_tschchartaxisvaluenumberofmajorgridlines(), target);
  }

  // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_tschchartaxisvaluenumberofminorgridlines(), target);
  }

  // optional bool tschchartaxiscategoryplottoedges = 7;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_tschchartaxiscategoryplottoedges(), target);
  }

  // optional int32 tschchartaxisvaluescale = 8;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_tschchartaxisvaluescale(), target);
  }

  // optional bool tschchartaxiscategoryshowlabels = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_tschchartaxiscategoryshowlabels(), target);
  }

  // optional bool tschchartaxisdefaultshowlabels = 10;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_tschchartaxisdefaultshowlabels(), target);
  }

  // optional bool tschchartaxisvalueshowlabels = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_tschchartaxisvalueshowlabels(), target);
  }

  // optional bool tschchartaxiscategoryshowserieslabels = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_tschchartaxiscategoryshowserieslabels(), target);
  }

  // optional bool tschchartaxiscategoryshowtitle = 13;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_tschchartaxiscategoryshowtitle(), target);
  }

  // optional bool tschchartaxisvalueshowtitle = 14;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_tschchartaxisvalueshowtitle(), target);
  }

  // optional string tschchartaxiscategorytitle = 15;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxiscategorytitle().data(), static_cast<int>(this->_internal_tschchartaxiscategorytitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxiscategorytitle");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_tschchartaxiscategorytitle(), target);
  }

  // optional string tschchartaxisvaluetitle = 16;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxisvaluetitle().data(), static_cast<int>(this->_internal_tschchartaxisvaluetitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartAxisNonStyleArchive.tschchartaxisvaluetitle");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_tschchartaxisvaluetitle(), target);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::tschchartaxisdefaultusermax(this),
        _Internal::tschchartaxisdefaultusermax(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::tschchartaxisdefaultusermin(this),
        _Internal::tschchartaxisdefaultusermin(this).GetCachedSize(), target, stream);
  }

  // optional bool tschchartaxismultidatashowserieslabels = 19;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_tschchartaxismultidatashowserieslabels(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::tschchartaxisdefault1_0dateformat(this),
        _Internal::tschchartaxisdefault1_0dateformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::tschchartaxisdefaultdurationformat(this),
        _Internal::tschchartaxisdefaultdurationformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::tschchartaxisdefaultdateformat(this),
        _Internal::tschchartaxisdefaultdateformat(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartaxisdefaultlabelexplosion = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_tschchartaxisdefaultlabelexplosion(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::tschchartaxisdefaultnumberformat(this),
        _Internal::tschchartaxisdefaultnumberformat(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartAxisNonStyleArchive)
  return target;
}

size_t ChartAxisNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartAxisNonStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartaxiscategorytitle = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxiscategorytitle());
    }

    // optional string tschchartaxisvaluetitle = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxisvaluetitle());
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefault1_0numberformat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefault1_0numberformat_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermax = 17;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefaultusermax_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisdefaultusermin = 18;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefaultusermin_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefault1_0dateformat = 20;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefault1_0dateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefaultdurationformat = 21;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefaultdurationformat_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisdefaultdateformat = 22;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefaultdateformat_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSK.FormatStructArchive tschchartaxisdefaultnumberformat = 42;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdefaultnumberformat_);
    }

    // optional int32 tschchartaxisdefault3dlabelposition = 1;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisdefault3dlabelposition());
    }

    // optional int32 tschchartaxisdefaultnumberformattype = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisdefaultnumberformattype());
    }

    // optional int32 tschchartaxisvaluenumberofdecades = 4;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisvaluenumberofdecades());
    }

    // optional int32 tschchartaxisvaluenumberofmajorgridlines = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisvaluenumberofmajorgridlines());
    }

    // optional int32 tschchartaxisvaluenumberofminorgridlines = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisvaluenumberofminorgridlines());
    }

    // optional int32 tschchartaxisvaluescale = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxisvaluescale());
    }

    // optional bool tschchartaxiscategoryplottoedges = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool tschchartaxiscategoryshowlabels = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisdefaultshowlabels = 10;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowlabels = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxiscategoryshowserieslabels = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxismultidatashowserieslabels = 19;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxiscategoryshowtitle = 13;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartaxisvalueshowtitle = 14;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 1;
    }

    // optional float tschchartaxisdefaultlabelexplosion = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisNonStyleArchive::GetClassData() const { return &_class_data_; }


void ChartAxisNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisNonStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisNonStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartAxisNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartaxiscategorytitle(from._internal_tschchartaxiscategorytitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_tschchartaxisvaluetitle(from._internal_tschchartaxisvaluetitle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartaxisdefault1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartaxisdefault1_0numberformat());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartaxisdefaultusermax()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartaxisdefaultusermax());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartaxisdefaultusermin()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartaxisdefaultusermin());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartaxisdefault1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartaxisdefault1_0dateformat());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartaxisdefaultdurationformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartaxisdefaultdurationformat());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartaxisdefaultdateformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartaxisdefaultdateformat());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartaxisdefaultnumberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartaxisdefaultnumberformat());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartaxisdefault3dlabelposition_ = from._impl_.tschchartaxisdefault3dlabelposition_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartaxisdefaultnumberformattype_ = from._impl_.tschchartaxisdefaultnumberformattype_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartaxisvaluenumberofdecades_ = from._impl_.tschchartaxisvaluenumberofdecades_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartaxisvaluenumberofmajorgridlines_ = from._impl_.tschchartaxisvaluenumberofmajorgridlines_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartaxisvaluenumberofminorgridlines_ = from._impl_.tschchartaxisvaluenumberofminorgridlines_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartaxisvaluescale_ = from._impl_.tschchartaxisvaluescale_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartaxiscategoryplottoedges_ = from._impl_.tschchartaxiscategoryplottoedges_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartaxiscategoryshowlabels_ = from._impl_.tschchartaxiscategoryshowlabels_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartaxisdefaultshowlabels_ = from._impl_.tschchartaxisdefaultshowlabels_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartaxisvalueshowlabels_ = from._impl_.tschchartaxisvalueshowlabels_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartaxiscategoryshowserieslabels_ = from._impl_.tschchartaxiscategoryshowserieslabels_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartaxismultidatashowserieslabels_ = from._impl_.tschchartaxismultidatashowserieslabels_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartaxiscategoryshowtitle_ = from._impl_.tschchartaxiscategoryshowtitle_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartaxisvalueshowtitle_ = from._impl_.tschchartaxisvalueshowtitle_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartaxisdefaultlabelexplosion_ = from._impl_.tschchartaxisdefaultlabelexplosion_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisNonStyleArchive::CopyFrom(const ChartAxisNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartAxisNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisNonStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartaxisdefault1_0numberformat()) {
    if (!_impl_.tschchartaxisdefault1_0numberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdefault1_0dateformat()) {
    if (!_impl_.tschchartaxisdefault1_0dateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdefaultdurationformat()) {
    if (!_impl_.tschchartaxisdefaultdurationformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdefaultdateformat()) {
    if (!_impl_.tschchartaxisdefaultdateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdefaultnumberformat()) {
    if (!_impl_.tschchartaxisdefaultnumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisNonStyleArchive::InternalSwap(ChartAxisNonStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartaxiscategorytitle_, lhs_arena,
      &other->_impl_.tschchartaxiscategorytitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartaxisvaluetitle_, lhs_arena,
      &other->_impl_.tschchartaxisvaluetitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisNonStyleArchive, _impl_.tschchartaxisdefaultlabelexplosion_)
      + sizeof(ChartAxisNonStyleArchive::_impl_.tschchartaxisdefaultlabelexplosion_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisNonStyleArchive, _impl_.tschchartaxisdefault1_0numberformat_)>(
          reinterpret_cast<char*>(&_impl_.tschchartaxisdefault1_0numberformat_),
          reinterpret_cast<char*>(&other->_impl_.tschchartaxisdefault1_0numberformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[5]);
}

// ===================================================================

class ChartSeriesStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesStyleArchive>()._impl_._has_bits_);
  static const ::TSD::LineEndArchive& tschchartseriesdefaultcalloutlineendlineend(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultcalloutlineendlineend(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::TSD::LineEndArchive& tschchartseriesdefaultcalloutlinestartlineend(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultcalloutlinestartlineend(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaultcalloutlinestrokestyle(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultcalloutlinestrokestyle(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineend(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarlineend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::LineEndArchive& tschchartseriesdefaulterrorbarlineendscatterx(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarlineendscatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaulterrorbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartseriesdefaulterrorbarspacing(HasBits* has_bits) {
    (*has_bits)[3] |= 4096u;
  }
  static void set_has_tschchartseriesdefaulterrorbarspacingscatterx(HasBits* has_bits) {
    (*has_bits)[3] |= 8192u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulterrorbarstrokescatterx(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarstrokescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::FillArchive& tschchartseries3dareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::FillArchive& tschchartseries3dbarfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dbarfill(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::FillArchive& tschchartseries3dcolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dcolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::FillArchive& tschchartseries3dlinefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dlinefill(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::FillArchive& tschchartseries3dpiefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dpiefill(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSD::FillArchive& tschchartseriesareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSD::FillArchive& tschchartseriesbarfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarfill(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSD::FillArchive& tschchartseriescolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriescolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::FillArchive& tschchartseriesdefaultfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultfill(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareafill(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedcolumnfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnfill(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSD::FillArchive& tschchartseriespiefill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiefill(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSD::FillArchive& tschchartseriesradarareafill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesradarareafill(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_tschchartseriesradarareafilluseseriesstrokealphamultiplier(HasBits* has_bits) {
    (*has_bits)[3] |= 2097152u;
  }
  static void set_has_tschchartseriesradarareafilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_tschchartseriesarealabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartseriesbarlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_tschchartseriesdefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_tschchartseriesdonutlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 32768u;
  }
  static void set_has_tschchartserieslinelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_tschchartseriesmixedlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_tschchartseriespielabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_tschchartseriesradarlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 131072u;
  }
  static void set_has_tschchartseriesdefaultopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_tschchartseriesareaoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_tschchartseriesbaroutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_tschchartseriesdonutoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 65536u;
  }
  static void set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_tschchartseriespieoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_tschchartseriesradaroutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[3] |= 262144u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dcolumnshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dcolumnshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartseries3dpieshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseries3dpieshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesbarshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesbubbleshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubbleshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaultshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSD::ShadowArchive& tschchartserieslineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareashadow(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedcolumnshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesmixedlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSD::ShadowArchive& tschchartseriespieshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespieshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesradarareashadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesradarareashadow(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesscattershadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesareastroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareastroke(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbarstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbarstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbubblestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::TSD::StrokeArchive& tschchartserieslinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedareastroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareastroke(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedcolumnstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedcolumnstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedlinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartseriespiestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriespiestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesradarareastroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesradarareastroke(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesscatterstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscatterstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::TSD::FillArchive& tschchartseriesareasymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareasymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::TSD::FillArchive& tschchartseriesbubblesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblesymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::TSD::FillArchive& tschchartserieslinesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinesymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedareasymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareasymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::TSD::FillArchive& tschchartseriesmixedlinesymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinesymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::TSD::FillArchive& tschchartseriesradarareasymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesradarareasymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static const ::TSD::FillArchive& tschchartseriesscattersymbolfill(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattersymbolfill(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_tschchartseriesareasymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_tschchartserieslinesymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_tschchartseriesmixedareasymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[3] |= 4u;
  }
  static void set_has_tschchartseriesmixedlinesymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_tschchartseriesradarareasymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_tschchartseriesareasymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_tschchartseriesbubblesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_tschchartserieslinesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[3] |= 64u;
  }
  static void set_has_tschchartseriesmixedareasymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[3] |= 128u;
  }
  static void set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[3] |= 256u;
  }
  static void set_has_tschchartseriesradarareasymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[3] |= 512u;
  }
  static void set_has_tschchartseriesscattersymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_tschchartseriesareasymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_tschchartserieslinesymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_tschchartseriesmixedareasymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_tschchartseriesmixedlinesymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_tschchartseriesradarareasymbolsize(HasBits* has_bits) {
    (*has_bits)[3] |= 524288u;
  }
  static void set_has_tschchartseriesscattersymbolsize(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesareasymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesareasymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesbubblesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesbubblesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::TSD::StrokeArchive& tschchartserieslinesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartserieslinesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedareasymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedareasymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesmixedlinesymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesmixedlinesymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesradarareasymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesradarareasymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesscattersymbolstroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesscattersymbolstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesdefaulttrendlineshadow(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulttrendlineshadow(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesdefaulttrendlinestroke(const ChartSeriesStyleArchive* msg);
  static void set_has_tschchartseriesdefaulttrendlinestroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_tschchartseriesareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static void set_has_tschchartseriesbarvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_tschchartseriesbubblevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_tschchartseriesdefaultvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_tschchartserieslinevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_tschchartseriesmixedareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_tschchartseriesmixedcolumnvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 8u;
  }
  static void set_has_tschchartseriesmixedlinevaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 16u;
  }
  static void set_has_tschchartseriesradarareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 1048576u;
  }
  static void set_has_tschchartseriesscattervaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 32u;
  }
  static void set_has_tschchartseriesstackedareavaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 1024u;
  }
  static void set_has_tschchartseriesstackedbarvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[3] |= 2048u;
  }
  static void set_has_tschchartseriesdefaultvaluelabelspacing(HasBits* has_bits) {
    (*has_bits)[3] |= 16384u;
  }
};

const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultcalloutlineendlineend(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultcalloutlineendlineend_;
}
const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultcalloutlinestartlineend(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultcalloutlinestartlineend_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultcalloutlinestrokestyle(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultcalloutlinestrokestyle_;
}
const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarlineend(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarlineend_;
}
const ::TSD::LineEndArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarlineendscatterx(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarlineendscatterx_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulterrorbarstrokescatterx(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarstrokescatterx_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dareafill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dbarfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dbarfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dcolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dcolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dlinefill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dlinefill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dpiefill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dpiefill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareafill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbarfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriescolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriescolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareafill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedcolumnfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiefill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespiefill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesradarareafill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesradarareafill_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dbarshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dcolumnshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dcolumnshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseries3dpieshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseries3dpieshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbarshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubbleshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubbleshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaultshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedcolumnshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlineshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespieshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespieshadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesradarareashadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesradarareashadow_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattershadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscattershadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareastroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareastroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbarstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubblestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslinestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareastroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareastroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedcolumnstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedcolumnstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlinestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriespiestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespiestroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesradarareastroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesradarareastroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscatterstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscatterstroke_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareasymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareasymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubblesymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslinesymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareasymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareasymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinesymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlinesymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesradarareasymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesradarareasymbolfill_;
}
const ::TSD::FillArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattersymbolfill(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscattersymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesareasymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesareasymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesbubblesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesbubblesymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartserieslinesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartserieslinesymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedareasymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedareasymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesmixedlinesymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesmixedlinesymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesradarareasymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesradarareasymbolstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesscattersymbolstroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesscattersymbolstroke_;
}
const ::TSD::ShadowArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulttrendlineshadow(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulttrendlineshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesStyleArchive::_Internal::tschchartseriesdefaulttrendlinestroke(const ChartSeriesStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulttrendlinestroke_;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultcalloutlineendlineend() {
  if (_impl_.tschchartseriesdefaultcalloutlineendlineend_ != nullptr) _impl_.tschchartseriesdefaultcalloutlineendlineend_->Clear();
  _impl_._has_bits_[1] &= ~0x02000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultcalloutlinestartlineend() {
  if (_impl_.tschchartseriesdefaultcalloutlinestartlineend_ != nullptr) _impl_.tschchartseriesdefaultcalloutlinestartlineend_->Clear();
  _impl_._has_bits_[1] &= ~0x01000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultcalloutlinestrokestyle() {
  if (_impl_.tschchartseriesdefaultcalloutlinestrokestyle_ != nullptr) _impl_.tschchartseriesdefaultcalloutlinestrokestyle_->Clear();
  _impl_._has_bits_[1] &= ~0x00800000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineend() {
  if (_impl_.tschchartseriesdefaulterrorbarlineend_ != nullptr) _impl_.tschchartseriesdefaulterrorbarlineend_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarlineendscatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarlineendscatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarshadow() {
  if (_impl_.tschchartseriesdefaulterrorbarshadow_ != nullptr) _impl_.tschchartseriesdefaulterrorbarshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstroke() {
  if (_impl_.tschchartseriesdefaulterrorbarstroke_ != nullptr) _impl_.tschchartseriesdefaulterrorbarstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulterrorbarstrokescatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarstrokescatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dareafill() {
  if (_impl_.tschchartseries3dareafill_ != nullptr) _impl_.tschchartseries3dareafill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dbarfill() {
  if (_impl_.tschchartseries3dbarfill_ != nullptr) _impl_.tschchartseries3dbarfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnfill() {
  if (_impl_.tschchartseries3dcolumnfill_ != nullptr) _impl_.tschchartseries3dcolumnfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dlinefill() {
  if (_impl_.tschchartseries3dlinefill_ != nullptr) _impl_.tschchartseries3dlinefill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dpiefill() {
  if (_impl_.tschchartseries3dpiefill_ != nullptr) _impl_.tschchartseries3dpiefill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareafill() {
  if (_impl_.tschchartseriesareafill_ != nullptr) _impl_.tschchartseriesareafill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarfill() {
  if (_impl_.tschchartseriesbarfill_ != nullptr) _impl_.tschchartseriesbarfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void ChartSeriesStyleArchive::clear_tschchartseriescolumnfill() {
  if (_impl_.tschchartseriescolumnfill_ != nullptr) _impl_.tschchartseriescolumnfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultfill() {
  if (_impl_.tschchartseriesdefaultfill_ != nullptr) _impl_.tschchartseriesdefaultfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareafill() {
  if (_impl_.tschchartseriesmixedareafill_ != nullptr) _impl_.tschchartseriesmixedareafill_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnfill() {
  if (_impl_.tschchartseriesmixedcolumnfill_ != nullptr) _impl_.tschchartseriesmixedcolumnfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiefill() {
  if (_impl_.tschchartseriespiefill_ != nullptr) _impl_.tschchartseriespiefill_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesradarareafill() {
  if (_impl_.tschchartseriesradarareafill_ != nullptr) _impl_.tschchartseriesradarareafill_->Clear();
  _impl_._has_bits_[1] &= ~0x04000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dareashadow() {
  if (_impl_.tschchartseries3dareashadow_ != nullptr) _impl_.tschchartseries3dareashadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dbarshadow() {
  if (_impl_.tschchartseries3dbarshadow_ != nullptr) _impl_.tschchartseries3dbarshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dcolumnshadow() {
  if (_impl_.tschchartseries3dcolumnshadow_ != nullptr) _impl_.tschchartseries3dcolumnshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dlineshadow() {
  if (_impl_.tschchartseries3dlineshadow_ != nullptr) _impl_.tschchartseries3dlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void ChartSeriesStyleArchive::clear_tschchartseries3dpieshadow() {
  if (_impl_.tschchartseries3dpieshadow_ != nullptr) _impl_.tschchartseries3dpieshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareashadow() {
  if (_impl_.tschchartseriesareashadow_ != nullptr) _impl_.tschchartseriesareashadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarshadow() {
  if (_impl_.tschchartseriesbarshadow_ != nullptr) _impl_.tschchartseriesbarshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubbleshadow() {
  if (_impl_.tschchartseriesbubbleshadow_ != nullptr) _impl_.tschchartseriesbubbleshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaultshadow() {
  if (_impl_.tschchartseriesdefaultshadow_ != nullptr) _impl_.tschchartseriesdefaultshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslineshadow() {
  if (_impl_.tschchartserieslineshadow_ != nullptr) _impl_.tschchartserieslineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareashadow() {
  if (_impl_.tschchartseriesmixedareashadow_ != nullptr) _impl_.tschchartseriesmixedareashadow_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnshadow() {
  if (_impl_.tschchartseriesmixedcolumnshadow_ != nullptr) _impl_.tschchartseriesmixedcolumnshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlineshadow() {
  if (_impl_.tschchartseriesmixedlineshadow_ != nullptr) _impl_.tschchartseriesmixedlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespieshadow() {
  if (_impl_.tschchartseriespieshadow_ != nullptr) _impl_.tschchartseriespieshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesradarareashadow() {
  if (_impl_.tschchartseriesradarareashadow_ != nullptr) _impl_.tschchartseriesradarareashadow_->Clear();
  _impl_._has_bits_[1] &= ~0x08000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattershadow() {
  if (_impl_.tschchartseriesscattershadow_ != nullptr) _impl_.tschchartseriesscattershadow_->Clear();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareastroke() {
  if (_impl_.tschchartseriesareastroke_ != nullptr) _impl_.tschchartseriesareastroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbarstroke() {
  if (_impl_.tschchartseriesbarstroke_ != nullptr) _impl_.tschchartseriesbarstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblestroke() {
  if (_impl_.tschchartseriesbubblestroke_ != nullptr) _impl_.tschchartseriesbubblestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000004u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinestroke() {
  if (_impl_.tschchartserieslinestroke_ != nullptr) _impl_.tschchartserieslinestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000008u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareastroke() {
  if (_impl_.tschchartseriesmixedareastroke_ != nullptr) _impl_.tschchartseriesmixedareastroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000010u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedcolumnstroke() {
  if (_impl_.tschchartseriesmixedcolumnstroke_ != nullptr) _impl_.tschchartseriesmixedcolumnstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000020u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinestroke() {
  if (_impl_.tschchartseriesmixedlinestroke_ != nullptr) _impl_.tschchartseriesmixedlinestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000040u;
}
void ChartSeriesStyleArchive::clear_tschchartseriespiestroke() {
  if (_impl_.tschchartseriespiestroke_ != nullptr) _impl_.tschchartseriespiestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000080u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesradarareastroke() {
  if (_impl_.tschchartseriesradarareastroke_ != nullptr) _impl_.tschchartseriesradarareastroke_->Clear();
  _impl_._has_bits_[1] &= ~0x10000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscatterstroke() {
  if (_impl_.tschchartseriesscatterstroke_ != nullptr) _impl_.tschchartseriesscatterstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000100u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolfill() {
  if (_impl_.tschchartseriesareasymbolfill_ != nullptr) _impl_.tschchartseriesareasymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00000200u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolfill() {
  if (_impl_.tschchartseriesbubblesymbolfill_ != nullptr) _impl_.tschchartseriesbubblesymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00000400u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolfill() {
  if (_impl_.tschchartserieslinesymbolfill_ != nullptr) _impl_.tschchartserieslinesymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00000800u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolfill() {
  if (_impl_.tschchartseriesmixedareasymbolfill_ != nullptr) _impl_.tschchartseriesmixedareasymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00001000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolfill() {
  if (_impl_.tschchartseriesmixedlinesymbolfill_ != nullptr) _impl_.tschchartseriesmixedlinesymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00002000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesradarareasymbolfill() {
  if (_impl_.tschchartseriesradarareasymbolfill_ != nullptr) _impl_.tschchartseriesradarareasymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x20000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolfill() {
  if (_impl_.tschchartseriesscattersymbolfill_ != nullptr) _impl_.tschchartseriesscattersymbolfill_->Clear();
  _impl_._has_bits_[1] &= ~0x00004000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesareasymbolstroke() {
  if (_impl_.tschchartseriesareasymbolstroke_ != nullptr) _impl_.tschchartseriesareasymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00008000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesbubblesymbolstroke() {
  if (_impl_.tschchartseriesbubblesymbolstroke_ != nullptr) _impl_.tschchartseriesbubblesymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00010000u;
}
void ChartSeriesStyleArchive::clear_tschchartserieslinesymbolstroke() {
  if (_impl_.tschchartserieslinesymbolstroke_ != nullptr) _impl_.tschchartserieslinesymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00020000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedareasymbolstroke() {
  if (_impl_.tschchartseriesmixedareasymbolstroke_ != nullptr) _impl_.tschchartseriesmixedareasymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00040000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesmixedlinesymbolstroke() {
  if (_impl_.tschchartseriesmixedlinesymbolstroke_ != nullptr) _impl_.tschchartseriesmixedlinesymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00080000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesradarareasymbolstroke() {
  if (_impl_.tschchartseriesradarareasymbolstroke_ != nullptr) _impl_.tschchartseriesradarareasymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x40000000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesscattersymbolstroke() {
  if (_impl_.tschchartseriesscattersymbolstroke_ != nullptr) _impl_.tschchartseriesscattersymbolstroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00100000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlineshadow() {
  if (_impl_.tschchartseriesdefaulttrendlineshadow_ != nullptr) _impl_.tschchartseriesdefaulttrendlineshadow_->Clear();
  _impl_._has_bits_[1] &= ~0x00200000u;
}
void ChartSeriesStyleArchive::clear_tschchartseriesdefaulttrendlinestroke() {
  if (_impl_.tschchartseriesdefaulttrendlinestroke_ != nullptr) _impl_.tschchartseriesdefaulttrendlinestroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00400000u;
}
ChartSeriesStyleArchive::ChartSeriesStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartSeriesStyleArchive)
}
ChartSeriesStyleArchive::ChartSeriesStyleArchive(const ChartSeriesStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSeriesStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineend_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_){nullptr}
    , decltype(_impl_.tschchartseries3dareafill_){nullptr}
    , decltype(_impl_.tschchartseries3dbarfill_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseries3dlinefill_){nullptr}
    , decltype(_impl_.tschchartseries3dpiefill_){nullptr}
    , decltype(_impl_.tschchartseriesareafill_){nullptr}
    , decltype(_impl_.tschchartseriesbarfill_){nullptr}
    , decltype(_impl_.tschchartseriescolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareafill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriespiefill_){nullptr}
    , decltype(_impl_.tschchartseries3dareashadow_){nullptr}
    , decltype(_impl_.tschchartseries3dbarshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dlineshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dpieshadow_){nullptr}
    , decltype(_impl_.tschchartseriesareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesbubbleshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultshadow_){nullptr}
    , decltype(_impl_.tschchartserieslineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriespieshadow_){nullptr}
    , decltype(_impl_.tschchartseriesscattershadow_){nullptr}
    , decltype(_impl_.tschchartseriesareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesbarstroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubblestroke_){nullptr}
    , decltype(_impl_.tschchartserieslinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriespiestroke_){nullptr}
    , decltype(_impl_.tschchartseriesscatterstroke_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolfill_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultcalloutlinestrokestyle_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultcalloutlinestartlineend_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultcalloutlineendlineend_){nullptr}
    , decltype(_impl_.tschchartseriesradarareafill_){nullptr}
    , decltype(_impl_.tschchartseriesradarareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesradarareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesradarareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesradarareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesarealabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesbarlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdefaultlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartserieslinelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesmixedlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriespielabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdefaultopacity_){}
    , decltype(_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesscattersymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesareasymbolsize_){}
    , decltype(_impl_.tschchartserieslinesymbolsize_){}
    , decltype(_impl_.tschchartseriesmixedareasymbolsize_){}
    , decltype(_impl_.tschchartseriesmixedlinesymbolsize_){}
    , decltype(_impl_.tschchartseriesscattersymbolsize_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationopacity_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredopacity_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesareavaluelabelposition_){}
    , decltype(_impl_.tschchartseriesbarvaluelabelposition_){}
    , decltype(_impl_.tschchartseriesbubblevaluelabelposition_){}
    , decltype(_impl_.tschchartseriesdefaultvaluelabelposition_){}
    , decltype(_impl_.tschchartserieslinevaluelabelposition_){}
    , decltype(_impl_.tschchartseriesmixedareavaluelabelposition_){}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriesradarareasymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesradarareafilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriesmixedcolumnvaluelabelposition_){}
    , decltype(_impl_.tschchartseriesmixedlinevaluelabelposition_){}
    , decltype(_impl_.tschchartseriesscattervaluelabelposition_){}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesradarareasymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesstackedareavaluelabelposition_){}
    , decltype(_impl_.tschchartseriesstackedbarvaluelabelposition_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarspacing_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarspacingscatterx_){}
    , decltype(_impl_.tschchartseriesdefaultvaluelabelspacing_){}
    , decltype(_impl_.tschchartseriesdonutlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesdonutoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesradarlabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesradaroutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesradarareasymbolsize_){}
    , decltype(_impl_.tschchartseriesradarareavaluelabelposition_){}
    , decltype(_impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschchartseriesdefaulterrorbarlineend()) {
    _this->_impl_.tschchartseriesdefaulterrorbarlineend_ = new ::TSD::LineEndArchive(*from._impl_.tschchartseriesdefaulterrorbarlineend_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarlineendscatterx_ = new ::TSD::LineEndArchive(*from._impl_.tschchartseriesdefaulterrorbarlineendscatterx_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarshadow()) {
    _this->_impl_.tschchartseriesdefaulterrorbarshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesdefaulterrorbarshadow_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarstroke()) {
    _this->_impl_.tschchartseriesdefaulterrorbarstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesdefaulterrorbarstroke_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarstrokescatterx_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesdefaulterrorbarstrokescatterx_);
  }
  if (from._internal_has_tschchartseries3dareafill()) {
    _this->_impl_.tschchartseries3dareafill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dareafill_);
  }
  if (from._internal_has_tschchartseries3dbarfill()) {
    _this->_impl_.tschchartseries3dbarfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dbarfill_);
  }
  if (from._internal_has_tschchartseries3dcolumnfill()) {
    _this->_impl_.tschchartseries3dcolumnfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dcolumnfill_);
  }
  if (from._internal_has_tschchartseries3dlinefill()) {
    _this->_impl_.tschchartseries3dlinefill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dlinefill_);
  }
  if (from._internal_has_tschchartseries3dpiefill()) {
    _this->_impl_.tschchartseries3dpiefill_ = new ::TSD::FillArchive(*from._impl_.tschchartseries3dpiefill_);
  }
  if (from._internal_has_tschchartseriesareafill()) {
    _this->_impl_.tschchartseriesareafill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesareafill_);
  }
  if (from._internal_has_tschchartseriesbarfill()) {
    _this->_impl_.tschchartseriesbarfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesbarfill_);
  }
  if (from._internal_has_tschchartseriescolumnfill()) {
    _this->_impl_.tschchartseriescolumnfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriescolumnfill_);
  }
  if (from._internal_has_tschchartseriesdefaultfill()) {
    _this->_impl_.tschchartseriesdefaultfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesdefaultfill_);
  }
  if (from._internal_has_tschchartseriesmixedareafill()) {
    _this->_impl_.tschchartseriesmixedareafill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedareafill_);
  }
  if (from._internal_has_tschchartseriesmixedcolumnfill()) {
    _this->_impl_.tschchartseriesmixedcolumnfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedcolumnfill_);
  }
  if (from._internal_has_tschchartseriespiefill()) {
    _this->_impl_.tschchartseriespiefill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriespiefill_);
  }
  if (from._internal_has_tschchartseries3dareashadow()) {
    _this->_impl_.tschchartseries3dareashadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dareashadow_);
  }
  if (from._internal_has_tschchartseries3dbarshadow()) {
    _this->_impl_.tschchartseries3dbarshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dbarshadow_);
  }
  if (from._internal_has_tschchartseries3dcolumnshadow()) {
    _this->_impl_.tschchartseries3dcolumnshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dcolumnshadow_);
  }
  if (from._internal_has_tschchartseries3dlineshadow()) {
    _this->_impl_.tschchartseries3dlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dlineshadow_);
  }
  if (from._internal_has_tschchartseries3dpieshadow()) {
    _this->_impl_.tschchartseries3dpieshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseries3dpieshadow_);
  }
  if (from._internal_has_tschchartseriesareashadow()) {
    _this->_impl_.tschchartseriesareashadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesareashadow_);
  }
  if (from._internal_has_tschchartseriesbarshadow()) {
    _this->_impl_.tschchartseriesbarshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesbarshadow_);
  }
  if (from._internal_has_tschchartseriesbubbleshadow()) {
    _this->_impl_.tschchartseriesbubbleshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesbubbleshadow_);
  }
  if (from._internal_has_tschchartseriesdefaultshadow()) {
    _this->_impl_.tschchartseriesdefaultshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesdefaultshadow_);
  }
  if (from._internal_has_tschchartserieslineshadow()) {
    _this->_impl_.tschchartserieslineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartserieslineshadow_);
  }
  if (from._internal_has_tschchartseriesmixedareashadow()) {
    _this->_impl_.tschchartseriesmixedareashadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesmixedareashadow_);
  }
  if (from._internal_has_tschchartseriesmixedcolumnshadow()) {
    _this->_impl_.tschchartseriesmixedcolumnshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesmixedcolumnshadow_);
  }
  if (from._internal_has_tschchartseriesmixedlineshadow()) {
    _this->_impl_.tschchartseriesmixedlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesmixedlineshadow_);
  }
  if (from._internal_has_tschchartseriespieshadow()) {
    _this->_impl_.tschchartseriespieshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriespieshadow_);
  }
  if (from._internal_has_tschchartseriesscattershadow()) {
    _this->_impl_.tschchartseriesscattershadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesscattershadow_);
  }
  if (from._internal_has_tschchartseriesareastroke()) {
    _this->_impl_.tschchartseriesareastroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesareastroke_);
  }
  if (from._internal_has_tschchartseriesbarstroke()) {
    _this->_impl_.tschchartseriesbarstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesbarstroke_);
  }
  if (from._internal_has_tschchartseriesbubblestroke()) {
    _this->_impl_.tschchartseriesbubblestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesbubblestroke_);
  }
  if (from._internal_has_tschchartserieslinestroke()) {
    _this->_impl_.tschchartserieslinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartserieslinestroke_);
  }
  if (from._internal_has_tschchartseriesmixedareastroke()) {
    _this->_impl_.tschchartseriesmixedareastroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedareastroke_);
  }
  if (from._internal_has_tschchartseriesmixedcolumnstroke()) {
    _this->_impl_.tschchartseriesmixedcolumnstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedcolumnstroke_);
  }
  if (from._internal_has_tschchartseriesmixedlinestroke()) {
    _this->_impl_.tschchartseriesmixedlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedlinestroke_);
  }
  if (from._internal_has_tschchartseriespiestroke()) {
    _this->_impl_.tschchartseriespiestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriespiestroke_);
  }
  if (from._internal_has_tschchartseriesscatterstroke()) {
    _this->_impl_.tschchartseriesscatterstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesscatterstroke_);
  }
  if (from._internal_has_tschchartseriesareasymbolfill()) {
    _this->_impl_.tschchartseriesareasymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesareasymbolfill_);
  }
  if (from._internal_has_tschchartseriesbubblesymbolfill()) {
    _this->_impl_.tschchartseriesbubblesymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesbubblesymbolfill_);
  }
  if (from._internal_has_tschchartserieslinesymbolfill()) {
    _this->_impl_.tschchartserieslinesymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartserieslinesymbolfill_);
  }
  if (from._internal_has_tschchartseriesmixedareasymbolfill()) {
    _this->_impl_.tschchartseriesmixedareasymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedareasymbolfill_);
  }
  if (from._internal_has_tschchartseriesmixedlinesymbolfill()) {
    _this->_impl_.tschchartseriesmixedlinesymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesmixedlinesymbolfill_);
  }
  if (from._internal_has_tschchartseriesscattersymbolfill()) {
    _this->_impl_.tschchartseriesscattersymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesscattersymbolfill_);
  }
  if (from._internal_has_tschchartseriesareasymbolstroke()) {
    _this->_impl_.tschchartseriesareasymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesareasymbolstroke_);
  }
  if (from._internal_has_tschchartseriesbubblesymbolstroke()) {
    _this->_impl_.tschchartseriesbubblesymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesbubblesymbolstroke_);
  }
  if (from._internal_has_tschchartserieslinesymbolstroke()) {
    _this->_impl_.tschchartserieslinesymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartserieslinesymbolstroke_);
  }
  if (from._internal_has_tschchartseriesmixedareasymbolstroke()) {
    _this->_impl_.tschchartseriesmixedareasymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedareasymbolstroke_);
  }
  if (from._internal_has_tschchartseriesmixedlinesymbolstroke()) {
    _this->_impl_.tschchartseriesmixedlinesymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesmixedlinesymbolstroke_);
  }
  if (from._internal_has_tschchartseriesscattersymbolstroke()) {
    _this->_impl_.tschchartseriesscattersymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesscattersymbolstroke_);
  }
  if (from._internal_has_tschchartseriesdefaulttrendlineshadow()) {
    _this->_impl_.tschchartseriesdefaulttrendlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesdefaulttrendlineshadow_);
  }
  if (from._internal_has_tschchartseriesdefaulttrendlinestroke()) {
    _this->_impl_.tschchartseriesdefaulttrendlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesdefaulttrendlinestroke_);
  }
  if (from._internal_has_tschchartseriesdefaultcalloutlinestrokestyle()) {
    _this->_impl_.tschchartseriesdefaultcalloutlinestrokestyle_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesdefaultcalloutlinestrokestyle_);
  }
  if (from._internal_has_tschchartseriesdefaultcalloutlinestartlineend()) {
    _this->_impl_.tschchartseriesdefaultcalloutlinestartlineend_ = new ::TSD::LineEndArchive(*from._impl_.tschchartseriesdefaultcalloutlinestartlineend_);
  }
  if (from._internal_has_tschchartseriesdefaultcalloutlineendlineend()) {
    _this->_impl_.tschchartseriesdefaultcalloutlineendlineend_ = new ::TSD::LineEndArchive(*from._impl_.tschchartseriesdefaultcalloutlineendlineend_);
  }
  if (from._internal_has_tschchartseriesradarareafill()) {
    _this->_impl_.tschchartseriesradarareafill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesradarareafill_);
  }
  if (from._internal_has_tschchartseriesradarareashadow()) {
    _this->_impl_.tschchartseriesradarareashadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesradarareashadow_);
  }
  if (from._internal_has_tschchartseriesradarareastroke()) {
    _this->_impl_.tschchartseriesradarareastroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesradarareastroke_);
  }
  if (from._internal_has_tschchartseriesradarareasymbolfill()) {
    _this->_impl_.tschchartseriesradarareasymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesradarareasymbolfill_);
  }
  if (from._internal_has_tschchartseriesradarareasymbolstroke()) {
    _this->_impl_.tschchartseriesradarareasymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesradarareasymbolstroke_);
  }
  ::memcpy(&_impl_.tschchartseriesarealabelparagraphstyleindex_, &from._impl_.tschchartseriesarealabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_) -
    reinterpret_cast<char*>(&_impl_.tschchartseriesarealabelparagraphstyleindex_)) + sizeof(_impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartSeriesStyleArchive)
}

inline void ChartSeriesStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineend_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_){nullptr}
    , decltype(_impl_.tschchartseries3dareafill_){nullptr}
    , decltype(_impl_.tschchartseries3dbarfill_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseries3dlinefill_){nullptr}
    , decltype(_impl_.tschchartseries3dpiefill_){nullptr}
    , decltype(_impl_.tschchartseriesareafill_){nullptr}
    , decltype(_impl_.tschchartseriesbarfill_){nullptr}
    , decltype(_impl_.tschchartseriescolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareafill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnfill_){nullptr}
    , decltype(_impl_.tschchartseriespiefill_){nullptr}
    , decltype(_impl_.tschchartseries3dareashadow_){nullptr}
    , decltype(_impl_.tschchartseries3dbarshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dlineshadow_){nullptr}
    , decltype(_impl_.tschchartseries3dpieshadow_){nullptr}
    , decltype(_impl_.tschchartseriesareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesbarshadow_){nullptr}
    , decltype(_impl_.tschchartseriesbubbleshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultshadow_){nullptr}
    , decltype(_impl_.tschchartserieslineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnshadow_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriespieshadow_){nullptr}
    , decltype(_impl_.tschchartseriesscattershadow_){nullptr}
    , decltype(_impl_.tschchartseriesareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesbarstroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubblestroke_){nullptr}
    , decltype(_impl_.tschchartserieslinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedcolumnstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriespiestroke_){nullptr}
    , decltype(_impl_.tschchartseriesscatterstroke_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolfill_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesbubblesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartserieslinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesmixedlinesymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesscattersymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulttrendlinestroke_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultcalloutlinestrokestyle_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultcalloutlinestartlineend_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultcalloutlineendlineend_){nullptr}
    , decltype(_impl_.tschchartseriesradarareafill_){nullptr}
    , decltype(_impl_.tschchartseriesradarareashadow_){nullptr}
    , decltype(_impl_.tschchartseriesradarareastroke_){nullptr}
    , decltype(_impl_.tschchartseriesradarareasymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriesradarareasymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriesarealabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesbarlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdefaultlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartserieslinelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesmixedlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriespielabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdefaultopacity_){0}
    , decltype(_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesscattersymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesareasymbolsize_){0}
    , decltype(_impl_.tschchartserieslinesymbolsize_){0}
    , decltype(_impl_.tschchartseriesmixedareasymbolsize_){0}
    , decltype(_impl_.tschchartseriesmixedlinesymbolsize_){0}
    , decltype(_impl_.tschchartseriesscattersymbolsize_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationopacity_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredopacity_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesareavaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesbarvaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesbubblevaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesdefaultvaluelabelposition_){0}
    , decltype(_impl_.tschchartserieslinevaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesmixedareavaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriesradarareasymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesradarareafilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesareasymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriesmixedcolumnvaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesmixedlinevaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesscattervaluelabelposition_){0}
    , decltype(_impl_.tschchartserieslinesymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesradarareasymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesstackedareavaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesstackedbarvaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarspacing_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarspacingscatterx_){0}
    , decltype(_impl_.tschchartseriesdefaultvaluelabelspacing_){0}
    , decltype(_impl_.tschchartseriesdonutlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesdonutoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesradarlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesradaroutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesradarareasymbolsize_){0}
    , decltype(_impl_.tschchartseriesradarareavaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_){0}
  };
}

ChartSeriesStyleArchive::~ChartSeriesStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartSeriesStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSeriesStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarlineend_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarlineendscatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarstrokescatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dareafill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dbarfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dcolumnfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dlinefill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dpiefill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareafill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbarfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriescolumnfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareafill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedcolumnfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespiefill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dareashadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dbarshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dcolumnshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries3dpieshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareashadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbarshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubbleshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareashadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedcolumnshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespieshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscattershadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareastroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbarstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubblestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareastroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedcolumnstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespiestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscatterstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareasymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubblesymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslinesymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareasymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlinesymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscattersymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesareasymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesbubblesymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieslinesymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedareasymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesmixedlinesymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesscattersymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulttrendlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulttrendlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultcalloutlinestrokestyle_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultcalloutlinestartlineend_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultcalloutlineendlineend_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesradarareafill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesradarareashadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesradarareastroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesradarareasymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesradarareasymbolstroke_;
}

void ChartSeriesStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSeriesStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartSeriesStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarlineend_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarlineend_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarlineendscatterx_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarlineendscatterx_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarshadow_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarstroke_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarstroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarstrokescatterx_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarstrokescatterx_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dareafill_ != nullptr);
      _impl_.tschchartseries3dareafill_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dbarfill_ != nullptr);
      _impl_.tschchartseries3dbarfill_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dcolumnfill_ != nullptr);
      _impl_.tschchartseries3dcolumnfill_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dlinefill_ != nullptr);
      _impl_.tschchartseries3dlinefill_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dpiefill_ != nullptr);
      _impl_.tschchartseries3dpiefill_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareafill_ != nullptr);
      _impl_.tschchartseriesareafill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbarfill_ != nullptr);
      _impl_.tschchartseriesbarfill_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriescolumnfill_ != nullptr);
      _impl_.tschchartseriescolumnfill_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultfill_ != nullptr);
      _impl_.tschchartseriesdefaultfill_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareafill_ != nullptr);
      _impl_.tschchartseriesmixedareafill_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedcolumnfill_ != nullptr);
      _impl_.tschchartseriesmixedcolumnfill_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespiefill_ != nullptr);
      _impl_.tschchartseriespiefill_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dareashadow_ != nullptr);
      _impl_.tschchartseries3dareashadow_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dbarshadow_ != nullptr);
      _impl_.tschchartseries3dbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dcolumnshadow_ != nullptr);
      _impl_.tschchartseries3dcolumnshadow_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dlineshadow_ != nullptr);
      _impl_.tschchartseries3dlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.tschchartseries3dpieshadow_ != nullptr);
      _impl_.tschchartseries3dpieshadow_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareashadow_ != nullptr);
      _impl_.tschchartseriesareashadow_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbarshadow_ != nullptr);
      _impl_.tschchartseriesbarshadow_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubbleshadow_ != nullptr);
      _impl_.tschchartseriesbubbleshadow_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultshadow_ != nullptr);
      _impl_.tschchartseriesdefaultshadow_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslineshadow_ != nullptr);
      _impl_.tschchartserieslineshadow_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareashadow_ != nullptr);
      _impl_.tschchartseriesmixedareashadow_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedcolumnshadow_ != nullptr);
      _impl_.tschchartseriesmixedcolumnshadow_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlineshadow_ != nullptr);
      _impl_.tschchartseriesmixedlineshadow_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespieshadow_ != nullptr);
      _impl_.tschchartseriespieshadow_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscattershadow_ != nullptr);
      _impl_.tschchartseriesscattershadow_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareastroke_ != nullptr);
      _impl_.tschchartseriesareastroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbarstroke_ != nullptr);
      _impl_.tschchartseriesbarstroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubblestroke_ != nullptr);
      _impl_.tschchartseriesbubblestroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslinestroke_ != nullptr);
      _impl_.tschchartserieslinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareastroke_ != nullptr);
      _impl_.tschchartseriesmixedareastroke_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedcolumnstroke_ != nullptr);
      _impl_.tschchartseriesmixedcolumnstroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlinestroke_ != nullptr);
      _impl_.tschchartseriesmixedlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespiestroke_ != nullptr);
      _impl_.tschchartseriespiestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscatterstroke_ != nullptr);
      _impl_.tschchartseriesscatterstroke_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareasymbolfill_ != nullptr);
      _impl_.tschchartseriesareasymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubblesymbolfill_ != nullptr);
      _impl_.tschchartseriesbubblesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslinesymbolfill_ != nullptr);
      _impl_.tschchartserieslinesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareasymbolfill_ != nullptr);
      _impl_.tschchartseriesmixedareasymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlinesymbolfill_ != nullptr);
      _impl_.tschchartseriesmixedlinesymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscattersymbolfill_ != nullptr);
      _impl_.tschchartseriesscattersymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesareasymbolstroke_ != nullptr);
      _impl_.tschchartseriesareasymbolstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesbubblesymbolstroke_ != nullptr);
      _impl_.tschchartseriesbubblesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.tschchartserieslinesymbolstroke_ != nullptr);
      _impl_.tschchartserieslinesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedareasymbolstroke_ != nullptr);
      _impl_.tschchartseriesmixedareasymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesmixedlinesymbolstroke_ != nullptr);
      _impl_.tschchartseriesmixedlinesymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesscattersymbolstroke_ != nullptr);
      _impl_.tschchartseriesscattersymbolstroke_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulttrendlineshadow_ != nullptr);
      _impl_.tschchartseriesdefaulttrendlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulttrendlinestroke_ != nullptr);
      _impl_.tschchartseriesdefaulttrendlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultcalloutlinestrokestyle_ != nullptr);
      _impl_.tschchartseriesdefaultcalloutlinestrokestyle_->Clear();
    }
  }
  if (cached_has_bits & 0x7f000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultcalloutlinestartlineend_ != nullptr);
      _impl_.tschchartseriesdefaultcalloutlinestartlineend_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultcalloutlineendlineend_ != nullptr);
      _impl_.tschchartseriesdefaultcalloutlineendlineend_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesradarareafill_ != nullptr);
      _impl_.tschchartseriesradarareafill_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesradarareashadow_ != nullptr);
      _impl_.tschchartseriesradarareashadow_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesradarareastroke_ != nullptr);
      _impl_.tschchartseriesradarareastroke_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesradarareasymbolfill_ != nullptr);
      _impl_.tschchartseriesradarareasymbolfill_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesradarareasymbolstroke_ != nullptr);
      _impl_.tschchartseriesradarareasymbolstroke_->Clear();
    }
  }
  _impl_.tschchartseriesarealabelparagraphstyleindex_ = 0;
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartseriesbarlabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesbarlabelparagraphstyleindex_)) + sizeof(_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesmixedlinesymbolsize_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_)) + sizeof(_impl_.tschchartseriesmixedlinesymbolsize_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartseriesscattersymbolsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesbubblevaluelabelposition_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesscattersymbolsize_)) + sizeof(_impl_.tschchartseriesbubblevaluelabelposition_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriesdefaultvaluelabelposition_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesradarareafilluseseriesstroke_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaultvaluelabelposition_)) + sizeof(_impl_.tschchartseriesradarareafilluseseriesstroke_));
  }
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartseriesareasymbolfilluseseriesfill_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesareasymbolfilluseseriesfill_)) + sizeof(_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdonutlabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_)) + sizeof(_impl_.tschchartseriesdonutlabelparagraphstyleindex_));
  }
  if (cached_has_bits & 0x003f0000u) {
    ::memset(&_impl_.tschchartseriesdonutoutsidelabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdonutoutsidelabelparagraphstyleindex_)) + sizeof(_impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarlineend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dareafill = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dareafill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dbarfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dcolumnfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dlinefill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dpiefill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesareafill = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareafill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesbarfill = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescolumnfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareafill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriespiefill = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiefill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartseriesarealabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesarealabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartseriesbarlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesbarlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartseriesdefaultlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartserieslinelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartserieslinelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartseriesmixedlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriespielabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriespielabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaultopacity = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_tschchartseriesdefaultopacity(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartseriesareaoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartseriesbaroutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartseriesdefaultoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesmixedoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriespieoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriespieoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dareashadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dbarshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dcolumnshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries3dpieshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareashadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubbleshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareashadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespieshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattershadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareastroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbarstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareastroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedcolumnstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespiestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscatterstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareasymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblesymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinesymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareasymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinesymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattersymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesareasymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartserieslinesymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartseriesmixedareasymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartseriesareasymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartseriesbubblesymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartserieslinesymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartseriesmixedareasymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartseriesscattersymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesscattersymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesareasymbolsize = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_tschchartseriesareasymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartserieslinesymbolsize = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_tschchartserieslinesymbolsize(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesmixedareasymbolsize = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_tschchartseriesmixedareasymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesmixedlinesymbolsize = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_tschchartseriesmixedlinesymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesscattersymbolsize = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_tschchartseriesscattersymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesscattersymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesareasymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesbubblesymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieslinesymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedareasymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesmixedlinesymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesscattersymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationopacity(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredopacity(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulttrendlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulttrendlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareavaluelabelposition = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriesareavaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarvaluelabelposition = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartseriesbarvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesbarvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblevaluelabelposition = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartseriesbubblevaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartseriesdefaultvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinevaluelabelposition = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartserieslinevaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartserieslinevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesmixedareavaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
      case 93:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriesmixedcolumnvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedcolumnvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
      case 94:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartseriesmixedlinevaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinevaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattervaluelabelposition = 95;
      case 95:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartseriesscattervaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesscattervaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
      case 96:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartseriesstackedareavaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesstackedareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
      case 97:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartseriesstackedbarvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesstackedbarvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarspacing = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarspacing(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarspacingscatterx = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarspacingscatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarspacingscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultvaluelabelspacing = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartseriesdefaultvaluelabelspacing(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultvaluelabelspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesdefaultcalloutlinestrokestyle = 128;
      case 128:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultcalloutlinestrokestyle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlinestartlineend = 129;
      case 129:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultcalloutlinestartlineend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlineendlineend = 130;
      case 130:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultcalloutlineendlineend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdonutlabelparagraphstyleindex = 152;
      case 152:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartseriesdonutlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdonutlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdonutoutsidelabelparagraphstyleindex = 153;
      case 153:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartseriesdonutoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesdonutoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesradarareafill = 165;
      case 165:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesradarareafill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesradarlabelparagraphstyleindex = 167;
      case 167:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartseriesradarlabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesradarlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesradaroutsidelabelparagraphstyleindex = 168;
      case 168:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartseriesradaroutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesradaroutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesradarareashadow = 169;
      case 169:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesradarareashadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesradarareastroke = 172;
      case 172:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesradarareastroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesradarareasymbolfill = 175;
      case 175:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesradarareasymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesradarareasymbolfilluseseriesfill = 177;
      case 177:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartseriesradarareasymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartseriesradarareasymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesradarareasymbolfilluseseriesstroke = 179;
      case 179:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartseriesradarareasymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesradarareasymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesradarareasymbolsize = 181;
      case 181:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_tschchartseriesradarareasymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriesradarareasymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesradarareasymbolstroke = 183;
      case 183:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesradarareasymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesradarareavaluelabelposition = 185;
      case 185:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartseriesradarareavaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesradarareavaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesradarareafilluseseriesstroke = 188;
      case 188:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesradarareafilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesradarareafilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesradarareafilluseseriesstrokealphamultiplier = 189;
      case 189:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _Internal::set_has_tschchartseriesradarareafilluseseriesstrokealphamultiplier(&_impl_._has_bits_);
          _impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSeriesStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartSeriesStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tschchartseriesdefaulterrorbarlineend(this),
        _Internal::tschchartseriesdefaulterrorbarlineend(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tschchartseriesdefaulterrorbarlineendscatterx(this),
        _Internal::tschchartseriesdefaulterrorbarlineendscatterx(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tschchartseriesdefaulterrorbarshadow(this),
        _Internal::tschchartseriesdefaulterrorbarshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschchartseriesdefaulterrorbarstroke(this),
        _Internal::tschchartseriesdefaulterrorbarstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschchartseriesdefaulterrorbarstrokescatterx(this),
        _Internal::tschchartseriesdefaulterrorbarstrokescatterx(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dareafill = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tschchartseries3dareafill(this),
        _Internal::tschchartseries3dareafill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tschchartseries3dbarfill(this),
        _Internal::tschchartseries3dbarfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tschchartseries3dcolumnfill(this),
        _Internal::tschchartseries3dcolumnfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::tschchartseries3dlinefill(this),
        _Internal::tschchartseries3dlinefill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tschchartseries3dpiefill(this),
        _Internal::tschchartseries3dpiefill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesareafill = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tschchartseriesareafill(this),
        _Internal::tschchartseriesareafill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesbarfill = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tschchartseriesbarfill(this),
        _Internal::tschchartseriesbarfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::tschchartseriescolumnfill(this),
        _Internal::tschchartseriescolumnfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tschchartseriesdefaultfill(this),
        _Internal::tschchartseriesdefaultfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::tschchartseriesmixedareafill(this),
        _Internal::tschchartseriesmixedareafill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::tschchartseriesmixedcolumnfill(this),
        _Internal::tschchartseriesmixedcolumnfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriespiefill = 17;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::tschchartseriespiefill(this),
        _Internal::tschchartseriespiefill(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_tschchartseriesarealabelparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_tschchartseriesbarlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_tschchartseriesdefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_tschchartserieslinelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_tschchartseriesmixedlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_tschchartseriespielabelparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaultopacity = 24;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_tschchartseriesdefaultopacity(), target);
  }

  // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartseriesareaoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_tschchartseriesbaroutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_tschchartseriespieoutsidelabelparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::tschchartseries3dareashadow(this),
        _Internal::tschchartseries3dareashadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::tschchartseries3dbarshadow(this),
        _Internal::tschchartseries3dbarshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::tschchartseries3dcolumnshadow(this),
        _Internal::tschchartseries3dcolumnshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::tschchartseries3dlineshadow(this),
        _Internal::tschchartseries3dlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::tschchartseries3dpieshadow(this),
        _Internal::tschchartseries3dpieshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::tschchartseriesareashadow(this),
        _Internal::tschchartseriesareashadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::tschchartseriesbarshadow(this),
        _Internal::tschchartseriesbarshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::tschchartseriesbubbleshadow(this),
        _Internal::tschchartseriesbubbleshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::tschchartseriesdefaultshadow(this),
        _Internal::tschchartseriesdefaultshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::tschchartserieslineshadow(this),
        _Internal::tschchartserieslineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::tschchartseriesmixedareashadow(this),
        _Internal::tschchartseriesmixedareashadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::tschchartseriesmixedcolumnshadow(this),
        _Internal::tschchartseriesmixedcolumnshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::tschchartseriesmixedlineshadow(this),
        _Internal::tschchartseriesmixedlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::tschchartseriespieshadow(this),
        _Internal::tschchartseriespieshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::tschchartseriesscattershadow(this),
        _Internal::tschchartseriesscattershadow(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::tschchartseriesareastroke(this),
        _Internal::tschchartseriesareastroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::tschchartseriesbarstroke(this),
        _Internal::tschchartseriesbarstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::tschchartseriesbubblestroke(this),
        _Internal::tschchartseriesbubblestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::tschchartserieslinestroke(this),
        _Internal::tschchartserieslinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::tschchartseriesmixedareastroke(this),
        _Internal::tschchartseriesmixedareastroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::tschchartseriesmixedcolumnstroke(this),
        _Internal::tschchartseriesmixedcolumnstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::tschchartseriesmixedlinestroke(this),
        _Internal::tschchartseriesmixedlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::tschchartseriespiestroke(this),
        _Internal::tschchartseriespiestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::tschchartseriesscatterstroke(this),
        _Internal::tschchartseriesscatterstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::tschchartseriesareasymbolfill(this),
        _Internal::tschchartseriesareasymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::tschchartseriesbubblesymbolfill(this),
        _Internal::tschchartseriesbubblesymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::tschchartserieslinesymbolfill(this),
        _Internal::tschchartserieslinesymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::tschchartseriesmixedareasymbolfill(this),
        _Internal::tschchartseriesmixedareasymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, _Internal::tschchartseriesmixedlinesymbolfill(this),
        _Internal::tschchartseriesmixedlinesymbolfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(59, _Internal::tschchartseriesscattersymbolfill(this),
        _Internal::tschchartseriesscattersymbolfill(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(60, this->_internal_tschchartseriesareasymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(61, this->_internal_tschchartserieslinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(62, this->_internal_tschchartseriesmixedareasymbolfilluseseriesfill(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(63, this->_internal_tschchartseriesmixedlinesymbolfilluseseriesfill(), target);
  }

  // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(64, this->_internal_tschchartseriesareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(65, this->_internal_tschchartseriesbubblesymbolfilluseseriesstroke(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(66, this->_internal_tschchartserieslinesymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(67, this->_internal_tschchartseriesmixedareasymbolfilluseseriesstroke(), target);
  }

  // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(68, this->_internal_tschchartseriesmixedlinesymbolfilluseseriesstroke(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(69, this->_internal_tschchartseriesscattersymbolfilluseseriesstroke(), target);
  }

  // optional float tschchartseriesareasymbolsize = 70;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(70, this->_internal_tschchartseriesareasymbolsize(), target);
  }

  // optional float tschchartserieslinesymbolsize = 71;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(71, this->_internal_tschchartserieslinesymbolsize(), target);
  }

  // optional float tschchartseriesmixedareasymbolsize = 72;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(72, this->_internal_tschchartseriesmixedareasymbolsize(), target);
  }

  // optional float tschchartseriesmixedlinesymbolsize = 73;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(73, this->_internal_tschchartseriesmixedlinesymbolsize(), target);
  }

  // optional float tschchartseriesscattersymbolsize = 74;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(74, this->_internal_tschchartseriesscattersymbolsize(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(75, _Internal::tschchartseriesareasymbolstroke(this),
        _Internal::tschchartseriesareasymbolstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(76, _Internal::tschchartseriesbubblesymbolstroke(this),
        _Internal::tschchartseriesbubblesymbolstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(77, _Internal::tschchartserieslinesymbolstroke(this),
        _Internal::tschchartserieslinesymbolstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(78, _Internal::tschchartseriesmixedareasymbolstroke(this),
        _Internal::tschchartseriesmixedareasymbolstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(79, _Internal::tschchartseriesmixedlinesymbolstroke(this),
        _Internal::tschchartseriesmixedlinesymbolstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(80, _Internal::tschchartseriesscattersymbolstroke(this),
        _Internal::tschchartseriesscattersymbolstroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(81, this->_internal_tschchartseriesdefaulttrendlineequationopacity(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(82, this->_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(83, this->_internal_tschchartseriesdefaulttrendlinersquaredopacity(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(84, this->_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(85, _Internal::tschchartseriesdefaulttrendlineshadow(this),
        _Internal::tschchartseriesdefaulttrendlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(86, _Internal::tschchartseriesdefaulttrendlinestroke(this),
        _Internal::tschchartseriesdefaulttrendlinestroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesareavaluelabelposition = 87;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(87, this->_internal_tschchartseriesareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesbarvaluelabelposition = 88;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(88, this->_internal_tschchartseriesbarvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesbubblevaluelabelposition = 89;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(89, this->_internal_tschchartseriesbubblevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(90, this->_internal_tschchartseriesdefaultvaluelabelposition(), target);
  }

  // optional int32 tschchartserieslinevaluelabelposition = 91;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(91, this->_internal_tschchartserieslinevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(92, this->_internal_tschchartseriesmixedareavaluelabelposition(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(93, this->_internal_tschchartseriesmixedcolumnvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(94, this->_internal_tschchartseriesmixedlinevaluelabelposition(), target);
  }

  // optional int32 tschchartseriesscattervaluelabelposition = 95;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(95, this->_internal_tschchartseriesscattervaluelabelposition(), target);
  }

  // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(96, this->_internal_tschchartseriesstackedareavaluelabelposition(), target);
  }

  // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(97, this->_internal_tschchartseriesstackedbarvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarspacing = 98;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(98, this->_internal_tschchartseriesdefaulterrorbarspacing(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarspacingscatterx = 99;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(99, this->_internal_tschchartseriesdefaulterrorbarspacingscatterx(), target);
  }

  // optional int32 tschchartseriesdefaultvaluelabelspacing = 100;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(100, this->_internal_tschchartseriesdefaultvaluelabelspacing(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.StrokeArchive tschchartseriesdefaultcalloutlinestrokestyle = 128;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(128, _Internal::tschchartseriesdefaultcalloutlinestrokestyle(this),
        _Internal::tschchartseriesdefaultcalloutlinestrokestyle(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlinestartlineend = 129;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(129, _Internal::tschchartseriesdefaultcalloutlinestartlineend(this),
        _Internal::tschchartseriesdefaultcalloutlinestartlineend(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlineendlineend = 130;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(130, _Internal::tschchartseriesdefaultcalloutlineendlineend(this),
        _Internal::tschchartseriesdefaultcalloutlineendlineend(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 tschchartseriesdonutlabelparagraphstyleindex = 152;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(152, this->_internal_tschchartseriesdonutlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesdonutoutsidelabelparagraphstyleindex = 153;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(153, this->_internal_tschchartseriesdonutoutsidelabelparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.FillArchive tschchartseriesradarareafill = 165;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(165, _Internal::tschchartseriesradarareafill(this),
        _Internal::tschchartseriesradarareafill(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 tschchartseriesradarlabelparagraphstyleindex = 167;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(167, this->_internal_tschchartseriesradarlabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesradaroutsidelabelparagraphstyleindex = 168;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(168, this->_internal_tschchartseriesradaroutsidelabelparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.ShadowArchive tschchartseriesradarareashadow = 169;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(169, _Internal::tschchartseriesradarareashadow(this),
        _Internal::tschchartseriesradarareashadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriesradarareastroke = 172;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(172, _Internal::tschchartseriesradarareastroke(this),
        _Internal::tschchartseriesradarareastroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriesradarareasymbolfill = 175;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(175, _Internal::tschchartseriesradarareasymbolfill(this),
        _Internal::tschchartseriesradarareasymbolfill(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool tschchartseriesradarareasymbolfilluseseriesfill = 177;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(177, this->_internal_tschchartseriesradarareasymbolfilluseseriesfill(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional bool tschchartseriesradarareasymbolfilluseseriesstroke = 179;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(179, this->_internal_tschchartseriesradarareasymbolfilluseseriesstroke(), target);
  }

  // optional float tschchartseriesradarareasymbolsize = 181;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(181, this->_internal_tschchartseriesradarareasymbolsize(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.StrokeArchive tschchartseriesradarareasymbolstroke = 183;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(183, _Internal::tschchartseriesradarareasymbolstroke(this),
        _Internal::tschchartseriesradarareasymbolstroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 tschchartseriesradarareavaluelabelposition = 185;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(185, this->_internal_tschchartseriesradarareavaluelabelposition(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool tschchartseriesradarareafilluseseriesstroke = 188;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(188, this->_internal_tschchartseriesradarareafilluseseriesstroke(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional float tschchartseriesradarareafilluseseriesstrokealphamultiplier = 189;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(189, this->_internal_tschchartseriesradarareafilluseseriesstrokealphamultiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartSeriesStyleArchive)
  return target;
}

size_t ChartSeriesStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartSeriesStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineend = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarlineend_);
    }

    // optional .TSD.LineEndArchive tschchartseriesdefaulterrorbarlineendscatterx = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarlineendscatterx_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulterrorbarshadow = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstroke = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulterrorbarstrokescatterx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarstrokescatterx_);
    }

    // optional .TSD.FillArchive tschchartseries3dareafill = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dareafill_);
    }

    // optional .TSD.FillArchive tschchartseries3dbarfill = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dbarfill_);
    }

    // optional .TSD.FillArchive tschchartseries3dcolumnfill = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dcolumnfill_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.FillArchive tschchartseries3dlinefill = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dlinefill_);
    }

    // optional .TSD.FillArchive tschchartseries3dpiefill = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dpiefill_);
    }

    // optional .TSD.FillArchive tschchartseriesareafill = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareafill_);
    }

    // optional .TSD.FillArchive tschchartseriesbarfill = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbarfill_);
    }

    // optional .TSD.FillArchive tschchartseriescolumnfill = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriescolumnfill_);
    }

    // optional .TSD.FillArchive tschchartseriesdefaultfill = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultfill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedareafill = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareafill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedcolumnfill = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedcolumnfill_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.FillArchive tschchartseriespiefill = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespiefill_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dareashadow = 30;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dbarshadow = 31;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dbarshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dcolumnshadow = 32;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dcolumnshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dlineshadow = 33;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseries3dpieshadow = 34;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries3dpieshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesareashadow = 35;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesbarshadow = 36;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbarshadow_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.ShadowArchive tschchartseriesbubbleshadow = 37;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubbleshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaultshadow = 38;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultshadow_);
    }

    // optional .TSD.ShadowArchive tschchartserieslineshadow = 39;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedareashadow = 40;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareashadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedcolumnshadow = 41;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedcolumnshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesmixedlineshadow = 42;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlineshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriespieshadow = 43;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespieshadow_);
    }

    // optional .TSD.ShadowArchive tschchartseriesscattershadow = 44;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscattershadow_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.StrokeArchive tschchartseriesareastroke = 45;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareastroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbarstroke = 46;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbarstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesbubblestroke = 47;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubblestroke_);
    }

    // optional .TSD.StrokeArchive tschchartserieslinestroke = 48;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareastroke = 49;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareastroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedcolumnstroke = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedcolumnstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinestroke = 51;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriespiestroke = 52;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespiestroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.StrokeArchive tschchartseriesscatterstroke = 53;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscatterstroke_);
    }

    // optional .TSD.FillArchive tschchartseriesareasymbolfill = 54;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareasymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesbubblesymbolfill = 55;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubblesymbolfill_);
    }

    // optional .TSD.FillArchive tschchartserieslinesymbolfill = 56;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslinesymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedareasymbolfill = 57;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareasymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesmixedlinesymbolfill = 58;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlinesymbolfill_);
    }

    // optional .TSD.FillArchive tschchartseriesscattersymbolfill = 59;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscattersymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesareasymbolstroke = 75;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesareasymbolstroke_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.StrokeArchive tschchartseriesbubblesymbolstroke = 76;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesbubblesymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartserieslinesymbolstroke = 77;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieslinesymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedareasymbolstroke = 78;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedareasymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesmixedlinesymbolstroke = 79;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesmixedlinesymbolstroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesscattersymbolstroke = 80;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesscattersymbolstroke_);
    }

    // optional .TSD.ShadowArchive tschchartseriesdefaulttrendlineshadow = 85;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulttrendlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaulttrendlinestroke = 86;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulttrendlinestroke_);
    }

    // optional .TSD.StrokeArchive tschchartseriesdefaultcalloutlinestrokestyle = 128;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultcalloutlinestrokestyle_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlinestartlineend = 129;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultcalloutlinestartlineend_);
    }

    // optional .TSD.LineEndArchive tschchartseriesdefaultcalloutlineendlineend = 130;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultcalloutlineendlineend_);
    }

    // optional .TSD.FillArchive tschchartseriesradarareafill = 165;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesradarareafill_);
    }

    // optional .TSD.ShadowArchive tschchartseriesradarareashadow = 169;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesradarareashadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriesradarareastroke = 172;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesradarareastroke_);
    }

    // optional .TSD.FillArchive tschchartseriesradarareasymbolfill = 175;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesradarareasymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriesradarareasymbolstroke = 183;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesradarareasymbolstroke_);
    }

    // optional int32 tschchartseriesarealabelparagraphstyleindex = 18;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesarealabelparagraphstyleindex());
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 tschchartseriesbarlabelparagraphstyleindex = 19;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbarlabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesdefaultlabelparagraphstyleindex = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultlabelparagraphstyleindex());
    }

    // optional int32 tschchartserieslinelabelparagraphstyleindex = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedlabelparagraphstyleindex = 22;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespielabelparagraphstyleindex = 23;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespielabelparagraphstyleindex());
    }

    // optional float tschchartseriesdefaultopacity = 24;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesareaoutsidelabelparagraphstyleindex = 25;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareaoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesbaroutsidelabelparagraphstyleindex = 26;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbaroutsidelabelparagraphstyleindex());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tschchartseriesdefaultoutsidelabelparagraphstyleindex = 27;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesmixedoutsidelabelparagraphstyleindex = 28;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriespieoutsidelabelparagraphstyleindex = 29;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespieoutsidelabelparagraphstyleindex());
    }

    // optional bool tschchartseriesscattersymbolfilluseseriesstroke = 69;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriesareasymbolsize = 70;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartserieslinesymbolsize = 71;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesmixedareasymbolsize = 72;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesmixedlinesymbolsize = 73;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartseriesscattersymbolsize = 74;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlineequationopacity = 81;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaulttrendlineequationparagraphstyleindex = 82;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineequationparagraphstyleindex());
    }

    // optional float tschchartseriesdefaulttrendlinersquaredopacity = 83;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaulttrendlinersquaredparagraphstyleindex = 84;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlinersquaredparagraphstyleindex());
    }

    // optional int32 tschchartseriesareavaluelabelposition = 87;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareavaluelabelposition());
    }

    // optional int32 tschchartseriesbarvaluelabelposition = 88;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbarvaluelabelposition());
    }

    // optional int32 tschchartseriesbubblevaluelabelposition = 89;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblevaluelabelposition());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartseriesdefaultvaluelabelposition = 90;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultvaluelabelposition());
    }

    // optional int32 tschchartserieslinevaluelabelposition = 91;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinevaluelabelposition());
    }

    // optional int32 tschchartseriesmixedareavaluelabelposition = 92;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedareavaluelabelposition());
    }

    // optional bool tschchartseriesmixedlinesymbolfilluseseriesfill = 63;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesradarareasymbolfilluseseriesfill = 177;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareasymbolfilluseseriesstroke = 64;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubblesymbolfilluseseriesstroke = 65;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesradarareafilluseseriesstroke = 188;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool tschchartseriesareasymbolfilluseseriesfill = 60;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinesymbolfilluseseriesfill = 61;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesfill = 62;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesmixedcolumnvaluelabelposition = 93;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedcolumnvaluelabelposition());
    }

    // optional int32 tschchartseriesmixedlinevaluelabelposition = 94;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinevaluelabelposition());
    }

    // optional int32 tschchartseriesscattervaluelabelposition = 95;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattervaluelabelposition());
    }

    // optional bool tschchartserieslinesymbolfilluseseriesstroke = 66;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareasymbolfilluseseriesstroke = 67;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool tschchartseriesmixedlinesymbolfilluseseriesstroke = 68;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesradarareasymbolfilluseseriesstroke = 179;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesstackedareavaluelabelposition = 96;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedareavaluelabelposition());
    }

    // optional int32 tschchartseriesstackedbarvaluelabelposition = 97;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedbarvaluelabelposition());
    }

    // optional int32 tschchartseriesdefaulterrorbarspacing = 98;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbarspacing());
    }

    // optional int32 tschchartseriesdefaulterrorbarspacingscatterx = 99;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulterrorbarspacingscatterx());
    }

    // optional int32 tschchartseriesdefaultvaluelabelspacing = 100;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultvaluelabelspacing());
    }

    // optional int32 tschchartseriesdonutlabelparagraphstyleindex = 152;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdonutlabelparagraphstyleindex());
    }

  }
  if (cached_has_bits & 0x003f0000u) {
    // optional int32 tschchartseriesdonutoutsidelabelparagraphstyleindex = 153;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdonutoutsidelabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesradarlabelparagraphstyleindex = 167;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesradarlabelparagraphstyleindex());
    }

    // optional int32 tschchartseriesradaroutsidelabelparagraphstyleindex = 168;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesradaroutsidelabelparagraphstyleindex());
    }

    // optional float tschchartseriesradarareasymbolsize = 181;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesradarareavaluelabelposition = 185;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesradarareavaluelabelposition());
    }

    // optional float tschchartseriesradarareafilluseseriesstrokealphamultiplier = 189;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSeriesStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSeriesStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSeriesStyleArchive::GetClassData() const { return &_class_data_; }


void ChartSeriesStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSeriesStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartSeriesStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartSeriesStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarlineend()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarlineend());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarlineendscatterx()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarlineendscatterx());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarshadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarstroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarstrokescatterx()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarstrokescatterx());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartseries3dareafill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dareafill());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartseries3dbarfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dbarfill());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartseries3dcolumnfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dcolumnfill());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartseries3dlinefill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dlinefill());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartseries3dpiefill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseries3dpiefill());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartseriesareafill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesareafill());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartseriesbarfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesbarfill());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tschchartseriescolumnfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriescolumnfill());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_tschchartseriesdefaultfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesdefaultfill());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_tschchartseriesmixedareafill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedareafill());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_tschchartseriesmixedcolumnfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedcolumnfill());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_tschchartseriespiefill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriespiefill());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_tschchartseries3dareashadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dareashadow());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_tschchartseries3dbarshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dbarshadow());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_tschchartseries3dcolumnshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dcolumnshadow());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_tschchartseries3dlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dlineshadow());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_tschchartseries3dpieshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseries3dpieshadow());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_tschchartseriesareashadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesareashadow());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_tschchartseriesbarshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesbarshadow());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_tschchartseriesbubbleshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesbubbleshadow());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_tschchartseriesdefaultshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesdefaultshadow());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_tschchartserieslineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartserieslineshadow());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_tschchartseriesmixedareashadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesmixedareashadow());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_tschchartseriesmixedcolumnshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesmixedcolumnshadow());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_tschchartseriesmixedlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesmixedlineshadow());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_tschchartseriespieshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriespieshadow());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_mutable_tschchartseriesscattershadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesscattershadow());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschchartseriesareastroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesareastroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartseriesbarstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesbarstroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartseriesbubblestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesbubblestroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartserieslinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartserieslinestroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartseriesmixedareastroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedareastroke());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartseriesmixedcolumnstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedcolumnstroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartseriesmixedlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedlinestroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartseriespiestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriespiestroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartseriesscatterstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesscatterstroke());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartseriesareasymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesareasymbolfill());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartseriesbubblesymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesbubblesymbolfill());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartserieslinesymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartserieslinesymbolfill());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tschchartseriesmixedareasymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedareasymbolfill());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_tschchartseriesmixedlinesymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesmixedlinesymbolfill());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_tschchartseriesscattersymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesscattersymbolfill());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_tschchartseriesareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesareasymbolstroke());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_tschchartseriesbubblesymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesbubblesymbolstroke());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_tschchartserieslinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartserieslinesymbolstroke());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_tschchartseriesmixedareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedareasymbolstroke());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_tschchartseriesmixedlinesymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesmixedlinesymbolstroke());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_tschchartseriesscattersymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesscattersymbolstroke());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_tschchartseriesdefaulttrendlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesdefaulttrendlineshadow());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_tschchartseriesdefaulttrendlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesdefaulttrendlinestroke());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_tschchartseriesdefaultcalloutlinestrokestyle()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesdefaultcalloutlinestrokestyle());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_tschchartseriesdefaultcalloutlinestartlineend()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartseriesdefaultcalloutlinestartlineend());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_tschchartseriesdefaultcalloutlineendlineend()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartseriesdefaultcalloutlineendlineend());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_tschchartseriesradarareafill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesradarareafill());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_tschchartseriesradarareashadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesradarareashadow());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_tschchartseriesradarareastroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesradarareastroke());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_tschchartseriesradarareasymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesradarareasymbolfill());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_tschchartseriesradarareasymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesradarareasymbolstroke());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriesarealabelparagraphstyleindex_ = from._impl_.tschchartseriesarealabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartseriesbarlabelparagraphstyleindex_ = from._impl_.tschchartseriesbarlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartseriesdefaultlabelparagraphstyleindex_ = from._impl_.tschchartseriesdefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartserieslinelabelparagraphstyleindex_ = from._impl_.tschchartserieslinelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartseriesmixedlabelparagraphstyleindex_ = from._impl_.tschchartseriesmixedlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartseriespielabelparagraphstyleindex_ = from._impl_.tschchartseriespielabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartseriesdefaultopacity_ = from._impl_.tschchartseriesdefaultopacity_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesareaoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesbaroutsidelabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesdefaultoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesmixedoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartseriespieoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriespieoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartseriesscattersymbolfilluseseriesstroke_ = from._impl_.tschchartseriesscattersymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartseriesareasymbolsize_ = from._impl_.tschchartseriesareasymbolsize_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartserieslinesymbolsize_ = from._impl_.tschchartserieslinesymbolsize_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartseriesmixedareasymbolsize_ = from._impl_.tschchartseriesmixedareasymbolsize_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesmixedlinesymbolsize_ = from._impl_.tschchartseriesmixedlinesymbolsize_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesscattersymbolsize_ = from._impl_.tschchartseriesscattersymbolsize_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationopacity_ = from._impl_.tschchartseriesdefaulttrendlineequationopacity_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_ = from._impl_.tschchartseriesdefaulttrendlineequationparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredopacity_ = from._impl_.tschchartseriesdefaulttrendlinersquaredopacity_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_ = from._impl_.tschchartseriesdefaulttrendlinersquaredparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartseriesareavaluelabelposition_ = from._impl_.tschchartseriesareavaluelabelposition_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartseriesbarvaluelabelposition_ = from._impl_.tschchartseriesbarvaluelabelposition_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriesbubblevaluelabelposition_ = from._impl_.tschchartseriesbubblevaluelabelposition_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriesdefaultvaluelabelposition_ = from._impl_.tschchartseriesdefaultvaluelabelposition_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartserieslinevaluelabelposition_ = from._impl_.tschchartserieslinevaluelabelposition_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartseriesmixedareavaluelabelposition_ = from._impl_.tschchartseriesmixedareavaluelabelposition_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_ = from._impl_.tschchartseriesmixedlinesymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriesradarareasymbolfilluseseriesfill_ = from._impl_.tschchartseriesradarareasymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriesareasymbolfilluseseriesstroke_ = from._impl_.tschchartseriesareasymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriesbubblesymbolfilluseseriesstroke_ = from._impl_.tschchartseriesbubblesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriesradarareafilluseseriesstroke_ = from._impl_.tschchartseriesradarareafilluseseriesstroke_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[3];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartseriesareasymbolfilluseseriesfill_ = from._impl_.tschchartseriesareasymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartserieslinesymbolfilluseseriesfill_ = from._impl_.tschchartserieslinesymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartseriesmixedareasymbolfilluseseriesfill_ = from._impl_.tschchartseriesmixedareasymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartseriesmixedcolumnvaluelabelposition_ = from._impl_.tschchartseriesmixedcolumnvaluelabelposition_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartseriesmixedlinevaluelabelposition_ = from._impl_.tschchartseriesmixedlinevaluelabelposition_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartseriesscattervaluelabelposition_ = from._impl_.tschchartseriesscattervaluelabelposition_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartserieslinesymbolfilluseseriesstroke_ = from._impl_.tschchartserieslinesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_ = from._impl_.tschchartseriesmixedareasymbolfilluseseriesstroke_;
    }
    _this->_impl_._has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_ = from._impl_.tschchartseriesmixedlinesymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartseriesradarareasymbolfilluseseriesstroke_ = from._impl_.tschchartseriesradarareasymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartseriesstackedareavaluelabelposition_ = from._impl_.tschchartseriesstackedareavaluelabelposition_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartseriesstackedbarvaluelabelposition_ = from._impl_.tschchartseriesstackedbarvaluelabelposition_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarspacing_ = from._impl_.tschchartseriesdefaulterrorbarspacing_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarspacingscatterx_ = from._impl_.tschchartseriesdefaulterrorbarspacingscatterx_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartseriesdefaultvaluelabelspacing_ = from._impl_.tschchartseriesdefaultvaluelabelspacing_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesdonutlabelparagraphstyleindex_ = from._impl_.tschchartseriesdonutlabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[3] |= cached_has_bits;
  }
  if (cached_has_bits & 0x003f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesdonutoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesdonutoutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesradarlabelparagraphstyleindex_ = from._impl_.tschchartseriesradarlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartseriesradaroutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesradaroutsidelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesradarareasymbolsize_ = from._impl_.tschchartseriesradarareasymbolsize_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriesradarareavaluelabelposition_ = from._impl_.tschchartseriesradarareavaluelabelposition_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_ = from._impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_;
    }
    _this->_impl_._has_bits_[3] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSeriesStyleArchive::CopyFrom(const ChartSeriesStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartSeriesStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartseriesdefaulterrorbarlineend()) {
    if (!_impl_.tschchartseriesdefaulterrorbarlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarlineendscatterx()) {
    if (!_impl_.tschchartseriesdefaulterrorbarlineendscatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarshadow()) {
    if (!_impl_.tschchartseriesdefaulterrorbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarstroke()) {
    if (!_impl_.tschchartseriesdefaulterrorbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulterrorbarstrokescatterx()) {
    if (!_impl_.tschchartseriesdefaulterrorbarstrokescatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dareafill()) {
    if (!_impl_.tschchartseries3dareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dbarfill()) {
    if (!_impl_.tschchartseries3dbarfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dcolumnfill()) {
    if (!_impl_.tschchartseries3dcolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dlinefill()) {
    if (!_impl_.tschchartseries3dlinefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dpiefill()) {
    if (!_impl_.tschchartseries3dpiefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareafill()) {
    if (!_impl_.tschchartseriesareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarfill()) {
    if (!_impl_.tschchartseriesbarfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescolumnfill()) {
    if (!_impl_.tschchartseriescolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultfill()) {
    if (!_impl_.tschchartseriesdefaultfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareafill()) {
    if (!_impl_.tschchartseriesmixedareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnfill()) {
    if (!_impl_.tschchartseriesmixedcolumnfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiefill()) {
    if (!_impl_.tschchartseriespiefill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dareashadow()) {
    if (!_impl_.tschchartseries3dareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dbarshadow()) {
    if (!_impl_.tschchartseries3dbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dcolumnshadow()) {
    if (!_impl_.tschchartseries3dcolumnshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dlineshadow()) {
    if (!_impl_.tschchartseries3dlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries3dpieshadow()) {
    if (!_impl_.tschchartseries3dpieshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareashadow()) {
    if (!_impl_.tschchartseriesareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarshadow()) {
    if (!_impl_.tschchartseriesbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubbleshadow()) {
    if (!_impl_.tschchartseriesbubbleshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultshadow()) {
    if (!_impl_.tschchartseriesdefaultshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslineshadow()) {
    if (!_impl_.tschchartserieslineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareashadow()) {
    if (!_impl_.tschchartseriesmixedareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnshadow()) {
    if (!_impl_.tschchartseriesmixedcolumnshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlineshadow()) {
    if (!_impl_.tschchartseriesmixedlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespieshadow()) {
    if (!_impl_.tschchartseriespieshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattershadow()) {
    if (!_impl_.tschchartseriesscattershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareastroke()) {
    if (!_impl_.tschchartseriesareastroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbarstroke()) {
    if (!_impl_.tschchartseriesbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblestroke()) {
    if (!_impl_.tschchartseriesbubblestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinestroke()) {
    if (!_impl_.tschchartserieslinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareastroke()) {
    if (!_impl_.tschchartseriesmixedareastroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedcolumnstroke()) {
    if (!_impl_.tschchartseriesmixedcolumnstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinestroke()) {
    if (!_impl_.tschchartseriesmixedlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespiestroke()) {
    if (!_impl_.tschchartseriespiestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscatterstroke()) {
    if (!_impl_.tschchartseriesscatterstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareasymbolfill()) {
    if (!_impl_.tschchartseriesareasymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblesymbolfill()) {
    if (!_impl_.tschchartseriesbubblesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinesymbolfill()) {
    if (!_impl_.tschchartserieslinesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareasymbolfill()) {
    if (!_impl_.tschchartseriesmixedareasymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinesymbolfill()) {
    if (!_impl_.tschchartseriesmixedlinesymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattersymbolfill()) {
    if (!_impl_.tschchartseriesscattersymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesareasymbolstroke()) {
    if (!_impl_.tschchartseriesareasymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesbubblesymbolstroke()) {
    if (!_impl_.tschchartseriesbubblesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieslinesymbolstroke()) {
    if (!_impl_.tschchartserieslinesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedareasymbolstroke()) {
    if (!_impl_.tschchartseriesmixedareasymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesmixedlinesymbolstroke()) {
    if (!_impl_.tschchartseriesmixedlinesymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesscattersymbolstroke()) {
    if (!_impl_.tschchartseriesscattersymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulttrendlineshadow()) {
    if (!_impl_.tschchartseriesdefaulttrendlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaulttrendlinestroke()) {
    if (!_impl_.tschchartseriesdefaulttrendlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultcalloutlinestrokestyle()) {
    if (!_impl_.tschchartseriesdefaultcalloutlinestrokestyle_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultcalloutlinestartlineend()) {
    if (!_impl_.tschchartseriesdefaultcalloutlinestartlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultcalloutlineendlineend()) {
    if (!_impl_.tschchartseriesdefaultcalloutlineendlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesradarareafill()) {
    if (!_impl_.tschchartseriesradarareafill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesradarareashadow()) {
    if (!_impl_.tschchartseriesradarareashadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesradarareastroke()) {
    if (!_impl_.tschchartseriesradarareastroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesradarareasymbolfill()) {
    if (!_impl_.tschchartseriesradarareasymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesradarareasymbolstroke()) {
    if (!_impl_.tschchartseriesradarareasymbolstroke_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesStyleArchive::InternalSwap(ChartSeriesStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  swap(_impl_._has_bits_[3], other->_impl_._has_bits_[3]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesStyleArchive, _impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_)
      + sizeof(ChartSeriesStyleArchive::_impl_.tschchartseriesradarareafilluseseriesstrokealphamultiplier_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesStyleArchive, _impl_.tschchartseriesdefaulterrorbarlineend_)>(
          reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulterrorbarlineend_),
          reinterpret_cast<char*>(&other->_impl_.tschchartseriesdefaulterrorbarlineend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[6]);
}

// ===================================================================

class ChartSeriesNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesNonStyleArchive>()._impl_._has_bits_);
  static const ::TSK::FormatStructArchive& tschchartseriesdefault1_0dateformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefault1_0dateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdefault1_0numberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefault1_0numberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriespie1_0numberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriespie1_0numberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartseriespie2_3labelexplosion(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartseriesbubbleadjustmentscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdefaultdateformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaultdateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdefaultdurationformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaultdurationformat(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartseriesareaenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_tschchartseriesbarenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_tschchartseriesbubbleenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_tschchartseriesdefaultenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 4194304u;
  }
  static void set_has_tschchartserieslineenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_tschchartseriespieenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_tschchartseriesscatterenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
  static void set_has_tschchartseriesstackedareaenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 1048576u;
  }
  static void set_has_tschchartseriesstackedbarenablecalloutline(HasBits* has_bits) {
    (*has_bits)[2] |= 2097152u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedata(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustomnegativedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustomnegativedatascatterx(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedata(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustompositivedata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartseriesdefaulterrorbarcustompositivedatascatterx(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschchartseriesdefaulterrorbarfixedvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartseriesdefaulterrorbarpercentvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartseriesdefaulterrorbarsetting(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartseriesdefaulterrorbarsettingscatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartseriesdefaulterrorbarstddevvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartseriesdefaulterrorbartype(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartseriesdefaulterrorbartypescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartseriespielabelexplosion(HasBits* has_bits) {
    (*has_bits)[2] |= 2147483648u;
  }
  static void set_has_tschchartseriesbubblelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartserieslinelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartseriesmixedlinelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartseriesradararealinetype(HasBits* has_bits) {
    (*has_bits)[3] |= 2u;
  }
  static void set_has_tschchartseriesscatterlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdefaultnumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesdefaultnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriespienumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriespienumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartseriesdefaultnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartseriespienumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesstackedpercentnumberformat(const ChartSeriesNonStyleArchive* msg);
  static void set_has_tschchartseriesstackedpercentnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartseriesdefaultseriestype(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartseriesdefaultshowerrorbar(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static void set_has_tschchartseriesdefaultshowerrorbarscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_tschchartseriesbubbleshowlabelsinfront(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static void set_has_tschchartseriesdefaultshowlabelsinfront(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartseriesscattershowline(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartseriesbubbleshownegativedata(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartseriesbubbleshowserieslabels(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartseriespieshowserieslabels(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartseriesscattershowserieslabels(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_tschchartseriesareashowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_tschchartserieslineshowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_tschchartseriesmixedareashowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_tschchartseriesmixedlineshowsymbol(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_tschchartseriesradarareashowsymbol(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_tschchartseriesscattershowsymbol(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_tschchartseriesdefaultshowtrendline(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_tschchartseriesareashowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartseriesbarshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartseriesbubbleshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_tschchartseriesdefaultshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tschchartserieslineshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_tschchartseriesmixedshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_tschchartseriespieshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_tschchartseriesradarshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_tschchartseriesscattershowvaluelabels(HasBits* has_bits) {
    (*has_bits)[2] |= 8388608u;
  }
  static void set_has_tschchartseriesbubblesizedimension(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static void set_has_tschchartseriesareastacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 16777216u;
  }
  static void set_has_tschchartseriesbarstacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 33554432u;
  }
  static void set_has_tschchartseriesbubblestacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 67108864u;
  }
  static void set_has_tschchartseriesdefaultstacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 134217728u;
  }
  static void set_has_tschchartserieslinestacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 268435456u;
  }
  static void set_has_tschchartseriespiestacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 536870912u;
  }
  static void set_has_tschchartseriesscatterstacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 1073741824u;
  }
  static void set_has_tschchartseriesstackedareastacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_tschchartseriesstackedbarstacklabels(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_tschchartseriesareasymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_tschchartserieslinesymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_tschchartseriesmixedareasymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static void set_has_tschchartseriesmixedlinesymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static void set_has_tschchartseriesradarareasymboltype(HasBits* has_bits) {
    (*has_bits)[3] |= 1u;
  }
  static void set_has_tschchartseriesscattersymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationoffsetx(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_tschchartseriesdefaulttrendlineequationoffsety(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_tschchartseriesdefaulttrendlinelabelstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartseriesdefaulttrendlineorder(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_tschchartseriesdefaulttrendlineperiod(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredoffsetx(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_tschchartseriesdefaulttrendlinersquaredoffsety(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowequation(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowlabel(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_tschchartseriesdefaulttrendlineshowr2value(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_tschchartseriesdefaulttrendlinetype(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_tschchartseriesbubblevaluelabelsaxis(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_tschchartseriesscattervaluelabelsaxis(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_tschchartseriespiewedgeexplosion(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_tschchartseriesdefaultyaxisordinal(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
};

const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefault1_0dateformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefault1_0dateformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefault1_0numberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefault1_0numberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriespie1_0numberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespie1_0numberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaultdateformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultdateformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaultdurationformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultdurationformat_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustomnegativedata(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustompositivedata(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustompositivedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesdefaultnumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesdefaultnumberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriespienumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriespienumberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesNonStyleArchive::_Internal::tschchartseriesstackedpercentnumberformat(const ChartSeriesNonStyleArchive* msg) {
  return *msg->_impl_.tschchartseriesstackedpercentnumberformat_;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefault1_0dateformat() {
  if (_impl_.tschchartseriesdefault1_0dateformat_ != nullptr) _impl_.tschchartseriesdefault1_0dateformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefault1_0numberformat() {
  if (_impl_.tschchartseriesdefault1_0numberformat_ != nullptr) _impl_.tschchartseriesdefault1_0numberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriespie1_0numberformat() {
  if (_impl_.tschchartseriespie1_0numberformat_ != nullptr) _impl_.tschchartseriespie1_0numberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultdateformat() {
  if (_impl_.tschchartseriesdefaultdateformat_ != nullptr) _impl_.tschchartseriesdefaultdateformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultdurationformat() {
  if (_impl_.tschchartseriesdefaultdurationformat_ != nullptr) _impl_.tschchartseriesdefaultdurationformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedata() {
  if (_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustomnegativedatascatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedata() {
  if (_impl_.tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustompositivedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaulterrorbarcustompositivedatascatterx() {
  if (_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr) _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesdefaultnumberformat() {
  if (_impl_.tschchartseriesdefaultnumberformat_ != nullptr) _impl_.tschchartseriesdefaultnumberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriespienumberformat() {
  if (_impl_.tschchartseriespienumberformat_ != nullptr) _impl_.tschchartseriespienumberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void ChartSeriesNonStyleArchive::clear_tschchartseriesstackedpercentnumberformat() {
  if (_impl_.tschchartseriesstackedpercentnumberformat_ != nullptr) _impl_.tschchartseriesstackedpercentnumberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartSeriesNonStyleArchive)
}
ChartSeriesNonStyleArchive::ChartSeriesNonStyleArchive(const ChartSeriesNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSeriesNonStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriesdefaulttrendlinelabelstring_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefault1_0numberformat_){nullptr}
    , decltype(_impl_.tschchartseriespie1_0numberformat_){nullptr}
    , decltype(_impl_.tschchartseriesstackedpercentnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesdefault1_0dateformat_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultdurationformat_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultdateformat_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriespienumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesbubbleadjustmentscale_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvalue_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvalue_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsetting_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsettingscatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvalue_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbartype_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbartypescatterx_){}
    , decltype(_impl_.tschchartseriespie2_3labelexplosion_){}
    , decltype(_impl_.tschchartseriesbubblelinetype_){}
    , decltype(_impl_.tschchartserieslinelinetype_){}
    , decltype(_impl_.tschchartseriesmixedlinelinetype_){}
    , decltype(_impl_.tschchartseriesscatterlinetype_){}
    , decltype(_impl_.tschchartseriesdefaultnumberformattype_){}
    , decltype(_impl_.tschchartseriespienumberformattype_){}
    , decltype(_impl_.tschchartseriesdefaultseriestype_){}
    , decltype(_impl_.tschchartseriesscattershowline_){}
    , decltype(_impl_.tschchartseriesbubbleshownegativedata_){}
    , decltype(_impl_.tschchartseriesbubbleshowserieslabels_){}
    , decltype(_impl_.tschchartseriespieshowserieslabels_){}
    , decltype(_impl_.tschchartseriesareashowvaluelabels_){}
    , decltype(_impl_.tschchartseriesbarshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesbubbleshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesdefaultshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesscattershowserieslabels_){}
    , decltype(_impl_.tschchartseriesareashowsymbol_){}
    , decltype(_impl_.tschchartserieslineshowsymbol_){}
    , decltype(_impl_.tschchartseriesmixedareashowsymbol_){}
    , decltype(_impl_.tschchartseriesbubblesizedimension_){}
    , decltype(_impl_.tschchartseriesareasymboltype_){}
    , decltype(_impl_.tschchartserieslinesymboltype_){}
    , decltype(_impl_.tschchartseriesmixedareasymboltype_){}
    , decltype(_impl_.tschchartseriesmixedlinesymboltype_){}
    , decltype(_impl_.tschchartseriesscattersymboltype_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsetx_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsety_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineorder_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineperiod_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowr2value_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlinetype_){}
    , decltype(_impl_.tschchartseriespiewedgeexplosion_){}
    , decltype(_impl_.tschchartseriesdefaultyaxisordinal_){}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbar_){}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbarscatterx_){}
    , decltype(_impl_.tschchartseriesbubbleshowlabelsinfront_){}
    , decltype(_impl_.tschchartseriesdefaultshowlabelsinfront_){}
    , decltype(_impl_.tschchartseriesbubblevaluelabelsaxis_){}
    , decltype(_impl_.tschchartseriesmixedlineshowsymbol_){}
    , decltype(_impl_.tschchartseriesradarareashowsymbol_){}
    , decltype(_impl_.tschchartseriesscattershowsymbol_){}
    , decltype(_impl_.tschchartseriesdefaultshowtrendline_){}
    , decltype(_impl_.tschchartseriesscattervaluelabelsaxis_){}
    , decltype(_impl_.tschchartserieslineshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesmixedshowvaluelabels_){}
    , decltype(_impl_.tschchartseriespieshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesradarshowvaluelabels_){}
    , decltype(_impl_.tschchartseriespieenablecalloutline_){}
    , decltype(_impl_.tschchartseriesstackedareastacklabels_){}
    , decltype(_impl_.tschchartseriesstackedbarstacklabels_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowequation_){}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowlabel_){}
    , decltype(_impl_.tschchartseriesareaenablecalloutline_){}
    , decltype(_impl_.tschchartseriesbarenablecalloutline_){}
    , decltype(_impl_.tschchartseriesbubbleenablecalloutline_){}
    , decltype(_impl_.tschchartserieslineenablecalloutline_){}
    , decltype(_impl_.tschchartseriesscatterenablecalloutline_){}
    , decltype(_impl_.tschchartseriesstackedareaenablecalloutline_){}
    , decltype(_impl_.tschchartseriesstackedbarenablecalloutline_){}
    , decltype(_impl_.tschchartseriesdefaultenablecalloutline_){}
    , decltype(_impl_.tschchartseriesscattershowvaluelabels_){}
    , decltype(_impl_.tschchartseriesareastacklabels_){}
    , decltype(_impl_.tschchartseriesbarstacklabels_){}
    , decltype(_impl_.tschchartseriesbubblestacklabels_){}
    , decltype(_impl_.tschchartseriesdefaultstacklabels_){}
    , decltype(_impl_.tschchartserieslinestacklabels_){}
    , decltype(_impl_.tschchartseriespiestacklabels_){}
    , decltype(_impl_.tschchartseriesscatterstacklabels_){}
    , decltype(_impl_.tschchartseriespielabelexplosion_){}
    , decltype(_impl_.tschchartseriesradarareasymboltype_){}
    , decltype(_impl_.tschchartseriesradararealinetype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartseriesdefaulttrendlinelabelstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartseriesdefaulttrendlinelabelstring()) {
    _this->_impl_.tschchartseriesdefaulttrendlinelabelstring_.Set(from._internal_tschchartseriesdefaulttrendlinelabelstring(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustomnegativedata()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustomnegativedata_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustompositivedata()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustompositivedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustompositivedata_);
  }
  if (from._internal_has_tschchartseriesdefaulterrorbarcustompositivedatascatterx()) {
    _this->_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
  }
  if (from._internal_has_tschchartseriesdefault1_0numberformat()) {
    _this->_impl_.tschchartseriesdefault1_0numberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriesdefault1_0numberformat_);
  }
  if (from._internal_has_tschchartseriespie1_0numberformat()) {
    _this->_impl_.tschchartseriespie1_0numberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriespie1_0numberformat_);
  }
  if (from._internal_has_tschchartseriesstackedpercentnumberformat()) {
    _this->_impl_.tschchartseriesstackedpercentnumberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriesstackedpercentnumberformat_);
  }
  if (from._internal_has_tschchartseriesdefault1_0dateformat()) {
    _this->_impl_.tschchartseriesdefault1_0dateformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriesdefault1_0dateformat_);
  }
  if (from._internal_has_tschchartseriesdefaultdurationformat()) {
    _this->_impl_.tschchartseriesdefaultdurationformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriesdefaultdurationformat_);
  }
  if (from._internal_has_tschchartseriesdefaultdateformat()) {
    _this->_impl_.tschchartseriesdefaultdateformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriesdefaultdateformat_);
  }
  if (from._internal_has_tschchartseriesdefaultnumberformat()) {
    _this->_impl_.tschchartseriesdefaultnumberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriesdefaultnumberformat_);
  }
  if (from._internal_has_tschchartseriespienumberformat()) {
    _this->_impl_.tschchartseriespienumberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriespienumberformat_);
  }
  ::memcpy(&_impl_.tschchartseriesbubbleadjustmentscale_, &from._impl_.tschchartseriesbubbleadjustmentscale_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartseriesradararealinetype_) -
    reinterpret_cast<char*>(&_impl_.tschchartseriesbubbleadjustmentscale_)) + sizeof(_impl_.tschchartseriesradararealinetype_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartSeriesNonStyleArchive)
}

inline void ChartSeriesNonStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriesdefaulttrendlinelabelstring_){}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_){nullptr}
    , decltype(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_){nullptr}
    , decltype(_impl_.tschchartseriesdefault1_0numberformat_){nullptr}
    , decltype(_impl_.tschchartseriespie1_0numberformat_){nullptr}
    , decltype(_impl_.tschchartseriesstackedpercentnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesdefault1_0dateformat_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultdurationformat_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultdateformat_){nullptr}
    , decltype(_impl_.tschchartseriesdefaultnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriespienumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesbubbleadjustmentscale_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvalue_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvalue_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsetting_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarsettingscatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvalue_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbartype_){0}
    , decltype(_impl_.tschchartseriesdefaulterrorbartypescatterx_){0}
    , decltype(_impl_.tschchartseriespie2_3labelexplosion_){0}
    , decltype(_impl_.tschchartseriesbubblelinetype_){0}
    , decltype(_impl_.tschchartserieslinelinetype_){0}
    , decltype(_impl_.tschchartseriesmixedlinelinetype_){0}
    , decltype(_impl_.tschchartseriesscatterlinetype_){0}
    , decltype(_impl_.tschchartseriesdefaultnumberformattype_){0}
    , decltype(_impl_.tschchartseriespienumberformattype_){0}
    , decltype(_impl_.tschchartseriesdefaultseriestype_){0}
    , decltype(_impl_.tschchartseriesscattershowline_){false}
    , decltype(_impl_.tschchartseriesbubbleshownegativedata_){false}
    , decltype(_impl_.tschchartseriesbubbleshowserieslabels_){false}
    , decltype(_impl_.tschchartseriespieshowserieslabels_){false}
    , decltype(_impl_.tschchartseriesareashowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesbarshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesbubbleshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesdefaultshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesscattershowserieslabels_){false}
    , decltype(_impl_.tschchartseriesareashowsymbol_){false}
    , decltype(_impl_.tschchartserieslineshowsymbol_){false}
    , decltype(_impl_.tschchartseriesmixedareashowsymbol_){false}
    , decltype(_impl_.tschchartseriesbubblesizedimension_){0}
    , decltype(_impl_.tschchartseriesareasymboltype_){0}
    , decltype(_impl_.tschchartserieslinesymboltype_){0}
    , decltype(_impl_.tschchartseriesmixedareasymboltype_){0}
    , decltype(_impl_.tschchartseriesmixedlinesymboltype_){0}
    , decltype(_impl_.tschchartseriesscattersymboltype_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsetx_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineequationoffsety_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineorder_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineperiod_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_){0}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowr2value_){false}
    , decltype(_impl_.tschchartseriesdefaulttrendlinetype_){0}
    , decltype(_impl_.tschchartseriespiewedgeexplosion_){0}
    , decltype(_impl_.tschchartseriesdefaultyaxisordinal_){0}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbar_){false}
    , decltype(_impl_.tschchartseriesdefaultshowerrorbarscatterx_){false}
    , decltype(_impl_.tschchartseriesbubbleshowlabelsinfront_){false}
    , decltype(_impl_.tschchartseriesdefaultshowlabelsinfront_){false}
    , decltype(_impl_.tschchartseriesbubblevaluelabelsaxis_){0}
    , decltype(_impl_.tschchartseriesmixedlineshowsymbol_){false}
    , decltype(_impl_.tschchartseriesradarareashowsymbol_){false}
    , decltype(_impl_.tschchartseriesscattershowsymbol_){false}
    , decltype(_impl_.tschchartseriesdefaultshowtrendline_){false}
    , decltype(_impl_.tschchartseriesscattervaluelabelsaxis_){0}
    , decltype(_impl_.tschchartserieslineshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesmixedshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriespieshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesradarshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriespieenablecalloutline_){0}
    , decltype(_impl_.tschchartseriesstackedareastacklabels_){false}
    , decltype(_impl_.tschchartseriesstackedbarstacklabels_){false}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowequation_){false}
    , decltype(_impl_.tschchartseriesdefaulttrendlineshowlabel_){false}
    , decltype(_impl_.tschchartseriesareaenablecalloutline_){0}
    , decltype(_impl_.tschchartseriesbarenablecalloutline_){0}
    , decltype(_impl_.tschchartseriesbubbleenablecalloutline_){0}
    , decltype(_impl_.tschchartserieslineenablecalloutline_){0}
    , decltype(_impl_.tschchartseriesscatterenablecalloutline_){0}
    , decltype(_impl_.tschchartseriesstackedareaenablecalloutline_){0}
    , decltype(_impl_.tschchartseriesstackedbarenablecalloutline_){0}
    , decltype(_impl_.tschchartseriesdefaultenablecalloutline_){0}
    , decltype(_impl_.tschchartseriesscattershowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesareastacklabels_){false}
    , decltype(_impl_.tschchartseriesbarstacklabels_){false}
    , decltype(_impl_.tschchartseriesbubblestacklabels_){false}
    , decltype(_impl_.tschchartseriesdefaultstacklabels_){false}
    , decltype(_impl_.tschchartserieslinestacklabels_){false}
    , decltype(_impl_.tschchartseriespiestacklabels_){false}
    , decltype(_impl_.tschchartseriesscatterstacklabels_){false}
    , decltype(_impl_.tschchartseriespielabelexplosion_){0}
    , decltype(_impl_.tschchartseriesradarareasymboltype_){0}
    , decltype(_impl_.tschchartseriesradararealinetype_){0}
  };
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartseriesdefaulttrendlinelabelstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartSeriesNonStyleArchive::~ChartSeriesNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartSeriesNonStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSeriesNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartseriesdefaulttrendlinelabelstring_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustompositivedata_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefault1_0numberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespie1_0numberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesstackedpercentnumberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefault1_0dateformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultdurationformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultdateformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdefaultnumberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespienumberformat_;
}

void ChartSeriesNonStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSeriesNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartseriesdefaulttrendlinelabelstring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustompositivedata_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarcustompositivedata_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_ != nullptr);
      _impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefault1_0numberformat_ != nullptr);
      _impl_.tschchartseriesdefault1_0numberformat_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespie1_0numberformat_ != nullptr);
      _impl_.tschchartseriespie1_0numberformat_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesstackedpercentnumberformat_ != nullptr);
      _impl_.tschchartseriesstackedpercentnumberformat_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefault1_0dateformat_ != nullptr);
      _impl_.tschchartseriesdefault1_0dateformat_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultdurationformat_ != nullptr);
      _impl_.tschchartseriesdefaultdurationformat_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultdateformat_ != nullptr);
      _impl_.tschchartseriesdefaultdateformat_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdefaultnumberformat_ != nullptr);
      _impl_.tschchartseriesdefaultnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespienumberformat_ != nullptr);
      _impl_.tschchartseriespienumberformat_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.tschchartseriesbubbleadjustmentscale_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesbubbleadjustmentscale_)) + sizeof(_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartseriesdefaulterrorbarpercentvalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulterrorbartypescatterx_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulterrorbarpercentvalue_)) + sizeof(_impl_.tschchartseriesdefaulterrorbartypescatterx_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriespie2_3labelexplosion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaultseriestype_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriespie2_3labelexplosion_)) + sizeof(_impl_.tschchartseriesdefaultseriestype_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartseriesscattershowline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaultshowvaluelabels_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesscattershowline_)) + sizeof(_impl_.tschchartseriesdefaultshowvaluelabels_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartseriesscattershowserieslabels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesmixedareasymboltype_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesscattershowserieslabels_)) + sizeof(_impl_.tschchartseriesmixedareasymboltype_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartseriesmixedlinesymboltype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesmixedlinesymboltype_)) + sizeof(_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriesdefaulttrendlineshowr2value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaultshowlabelsinfront_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulttrendlineshowr2value_)) + sizeof(_impl_.tschchartseriesdefaultshowlabelsinfront_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartseriesbubblevaluelabelsaxis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesmixedshowvaluelabels_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesbubblevaluelabelsaxis_)) + sizeof(_impl_.tschchartseriesmixedshowvaluelabels_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartseriespieshowvaluelabels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesareaenablecalloutline_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriespieshowvaluelabels_)) + sizeof(_impl_.tschchartseriesareaenablecalloutline_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartseriesbarenablecalloutline_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesscattershowvaluelabels_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesbarenablecalloutline_)) + sizeof(_impl_.tschchartseriesscattershowvaluelabels_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriesareastacklabels_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriespielabelexplosion_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesareastacklabels_)) + sizeof(_impl_.tschchartseriespielabelexplosion_));
  }
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.tschchartseriesradarareasymboltype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesradararealinetype_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesradarareasymboltype_)) + sizeof(_impl_.tschchartseriesradararealinetype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesNonStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float tschchartseriesbubbleadjustmentscale = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_tschchartseriesbubbleadjustmentscale(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleadjustmentscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarfixedvalue(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarfixedvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarfixedvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarpercentvalue(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarpercentvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarpercentvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarsetting(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarsettingscatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarsettingscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarstddevvalue(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarstddevvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_tschchartseriesdefaulterrorbarstddevvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbartype = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartseriesdefaulterrorbartype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbartype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartseriesdefaulterrorbartypescatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulterrorbartypescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriespie2_3labelexplosion = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_tschchartseriespie2_3labelexplosion(&_impl_._has_bits_);
          _impl_.tschchartseriespie2_3labelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblelinetype = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartseriesbubblelinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinelinetype = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartserieslinelinetype(&_impl_._has_bits_);
          _impl_.tschchartserieslinelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinelinetype = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartseriesmixedlinelinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscatterlinetype = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartseriesscatterlinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesscatterlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefault1_0numberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespie1_0numberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultnumberformattype = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriesdefaultnumberformattype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriespienumberformattype = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartseriespienumberformattype(&_impl_._has_bits_);
          _impl_.tschchartseriespienumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesstackedpercentnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultseriestype = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartseriesdefaultseriestype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultseriestype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowerrorbar = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartseriesdefaultshowerrorbar(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowerrorbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesdefaultshowerrorbarscatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowerrorbarscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowline = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriesscattershowline(&_impl_._has_bits_);
          _impl_.tschchartseriesscattershowline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshownegativedata = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartseriesbubbleshownegativedata(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleshownegativedata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriespieshowserieslabels = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartseriespieshowserieslabels(&_impl_._has_bits_);
          _impl_.tschchartseriespieshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareashowsymbol = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartseriesareashowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesareashowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslineshowsymbol = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartserieslineshowsymbol(&_impl_._has_bits_);
          _impl_.tschchartserieslineshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedareashowsymbol = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartseriesmixedareashowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareashowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedlineshowsymbol = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartseriesmixedlineshowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlineshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowsymbol = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartseriesscattershowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesscattershowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowtrendline = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartseriesdefaultshowtrendline(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowtrendline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareashowvaluelabels = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartseriesareashowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesareashowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbarshowvaluelabels = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartseriesbarshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesbarshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshowvaluelabels = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartseriesbubbleshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowvaluelabels = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartseriesdefaultshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslineshowvaluelabels = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartserieslineshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartserieslineshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesmixedshowvaluelabels = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartseriesmixedshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriespieshowvaluelabels = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tschchartseriespieshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriespieshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowvaluelabels = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartseriesscattershowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesscattershowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblesizedimension = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartseriesbubblesizedimension(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblesizedimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareasymboltype = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartseriesareasymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesareasymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinesymboltype = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartserieslinesymboltype(&_impl_._has_bits_);
          _impl_.tschchartserieslinesymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedareasymboltype = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartseriesmixedareasymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedareasymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesmixedlinesymboltype = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartseriesmixedlinesymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesmixedlinesymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattersymboltype = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartseriesscattersymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesscattersymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationoffsetx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 173)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineequationoffsety(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineequationoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_tschchartseriesdefaulttrendlinelabelstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineorder = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineorder(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineperiod(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredoffsetx(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinersquaredoffsety(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinersquaredoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowequation(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineshowequation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowlabel(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineshowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriesdefaulttrendlineshowr2value(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlineshowr2value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaulttrendlinetype = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartseriesdefaulttrendlinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaulttrendlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriespiewedgeexplosion = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _Internal::set_has_tschchartseriespiewedgeexplosion(&_impl_._has_bits_);
          _impl_.tschchartseriespiewedgeexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultyaxisordinal = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartseriesdefaultyaxisordinal(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultyaxisordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshowserieslabels = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartseriesbubbleshowserieslabels(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartseriesbubblevaluelabelsaxis(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblevaluelabelsaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscattershowserieslabels = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartseriesscattershowserieslabels(&_impl_._has_bits_);
          _impl_.tschchartseriesscattershowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartseriesscattervaluelabelsaxis(&_impl_._has_bits_);
          _impl_.tschchartseriesscattervaluelabelsaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefault1_0dateformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultdurationformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultdateformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
      case 98:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdefaultnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespienumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartseriesdefaultshowlabelsinfront(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultshowlabelsinfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartseriesbubbleshowlabelsinfront(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleshowlabelsinfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriespieenablecalloutline = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartseriespieenablecalloutline(&_impl_._has_bits_);
          _impl_.tschchartseriespieenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesareaenablecalloutline = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartseriesareaenablecalloutline(&_impl_._has_bits_);
          _impl_.tschchartseriesareaenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbarenablecalloutline = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartseriesbarenablecalloutline(&_impl_._has_bits_);
          _impl_.tschchartseriesbarenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesbubbleenablecalloutline = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartseriesbubbleenablecalloutline(&_impl_._has_bits_);
          _impl_.tschchartseriesbubbleenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslineenablecalloutline = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartserieslineenablecalloutline(&_impl_._has_bits_);
          _impl_.tschchartserieslineenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesscatterenablecalloutline = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartseriesscatterenablecalloutline(&_impl_._has_bits_);
          _impl_.tschchartseriesscatterenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedareaenablecalloutline = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tschchartseriesstackedareaenablecalloutline(&_impl_._has_bits_);
          _impl_.tschchartseriesstackedareaenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesstackedbarenablecalloutline = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartseriesstackedbarenablecalloutline(&_impl_._has_bits_);
          _impl_.tschchartseriesstackedbarenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesdefaultenablecalloutline = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartseriesdefaultenablecalloutline(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriespiestacklabels = 138;
      case 138:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartseriespiestacklabels(&_impl_._has_bits_);
          _impl_.tschchartseriespiestacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesareastacklabels = 139;
      case 139:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartseriesareastacklabels(&_impl_._has_bits_);
          _impl_.tschchartseriesareastacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbarstacklabels = 140;
      case 140:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_tschchartseriesbarstacklabels(&_impl_._has_bits_);
          _impl_.tschchartseriesbarstacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesbubblestacklabels = 141;
      case 141:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartseriesbubblestacklabels(&_impl_._has_bits_);
          _impl_.tschchartseriesbubblestacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartserieslinestacklabels = 142;
      case 142:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartserieslinestacklabels(&_impl_._has_bits_);
          _impl_.tschchartserieslinestacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesscatterstacklabels = 143;
      case 143:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartseriesscatterstacklabels(&_impl_._has_bits_);
          _impl_.tschchartseriesscatterstacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesstackedareastacklabels = 144;
      case 144:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartseriesstackedareastacklabels(&_impl_._has_bits_);
          _impl_.tschchartseriesstackedareastacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesstackedbarstacklabels = 145;
      case 145:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartseriesstackedbarstacklabels(&_impl_._has_bits_);
          _impl_.tschchartseriesstackedbarstacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesdefaultstacklabels = 146;
      case 146:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartseriesdefaultstacklabels(&_impl_._has_bits_);
          _impl_.tschchartseriesdefaultstacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriespielabelexplosion = 147;
      case 147:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_tschchartseriespielabelexplosion(&_impl_._has_bits_);
          _impl_.tschchartseriespielabelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesradarareashowsymbol = 160;
      case 160:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartseriesradarareashowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesradarareashowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesradarshowvaluelabels = 162;
      case 162:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartseriesradarshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesradarshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesradarareasymboltype = 163;
      case 163:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartseriesradarareasymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriesradarareasymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesradararealinetype = 189;
      case 189:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartseriesradararealinetype(&_impl_._has_bits_);
          _impl_.tschchartseriesradararealinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSeriesNonStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional float tschchartseriesbubbleadjustmentscale = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_tschchartseriesbubbleadjustmentscale(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tschchartseriesdefaulterrorbarcustomnegativedata(this),
        _Internal::tschchartseriesdefaulterrorbarcustomnegativedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(this),
        _Internal::tschchartseriesdefaulterrorbarcustomnegativedatascatterx(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschchartseriesdefaulterrorbarcustompositivedata(this),
        _Internal::tschchartseriesdefaulterrorbarcustompositivedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(this),
        _Internal::tschchartseriesdefaulterrorbarcustompositivedatascatterx(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_tschchartseriesdefaulterrorbarfixedvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_tschchartseriesdefaulterrorbarfixedvaluescatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_tschchartseriesdefaulterrorbarpercentvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_tschchartseriesdefaulterrorbarpercentvaluescatterx(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_tschchartseriesdefaulterrorbarsetting(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_tschchartseriesdefaulterrorbarsettingscatterx(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_tschchartseriesdefaulterrorbarstddevvalue(), target);
  }

  // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_tschchartseriesdefaulterrorbarstddevvaluescatterx(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartype = 14;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_tschchartseriesdefaulterrorbartype(), target);
  }

  // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_tschchartseriesdefaulterrorbartypescatterx(), target);
  }

  // optional float tschchartseriespie2_3labelexplosion = 16;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_tschchartseriespie2_3labelexplosion(), target);
  }

  // optional int32 tschchartseriesbubblelinetype = 17;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_tschchartseriesbubblelinetype(), target);
  }

  // optional int32 tschchartserieslinelinetype = 18;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_tschchartserieslinelinetype(), target);
  }

  // optional int32 tschchartseriesmixedlinelinetype = 19;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_tschchartseriesmixedlinelinetype(), target);
  }

  // optional int32 tschchartseriesscatterlinetype = 20;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_tschchartseriesscatterlinetype(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::tschchartseriesdefault1_0numberformat(this),
        _Internal::tschchartseriesdefault1_0numberformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::tschchartseriespie1_0numberformat(this),
        _Internal::tschchartseriespie1_0numberformat(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartseriesdefaultnumberformattype = 23;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_tschchartseriesdefaultnumberformattype(), target);
  }

  // optional int32 tschchartseriespienumberformattype = 24;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_tschchartseriespienumberformattype(), target);
  }

  // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::tschchartseriesstackedpercentnumberformat(this),
        _Internal::tschchartseriesstackedpercentnumberformat(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartseriesdefaultseriestype = 26;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_tschchartseriesdefaultseriestype(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartseriesdefaultshowerrorbar = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_tschchartseriesdefaultshowerrorbar(), target);
  }

  // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartseriesdefaultshowerrorbarscatterx(), target);
  }

  // optional bool tschchartseriesscattershowline = 29;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_tschchartseriesscattershowline(), target);
  }

  // optional bool tschchartseriesbubbleshownegativedata = 30;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_tschchartseriesbubbleshownegativedata(), target);
  }

  // optional bool tschchartseriespieshowserieslabels = 31;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_tschchartseriespieshowserieslabels(), target);
  }

  // optional bool tschchartseriesareashowsymbol = 32;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartseriesareashowsymbol(), target);
  }

  // optional bool tschchartserieslineshowsymbol = 33;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_tschchartserieslineshowsymbol(), target);
  }

  // optional bool tschchartseriesmixedareashowsymbol = 34;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_tschchartseriesmixedareashowsymbol(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool tschchartseriesmixedlineshowsymbol = 35;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_tschchartseriesmixedlineshowsymbol(), target);
  }

  // optional bool tschchartseriesscattershowsymbol = 36;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_tschchartseriesscattershowsymbol(), target);
  }

  // optional bool tschchartseriesdefaultshowtrendline = 37;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_tschchartseriesdefaultshowtrendline(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartseriesareashowvaluelabels = 38;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_tschchartseriesareashowvaluelabels(), target);
  }

  // optional bool tschchartseriesbarshowvaluelabels = 39;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_tschchartseriesbarshowvaluelabels(), target);
  }

  // optional bool tschchartseriesbubbleshowvaluelabels = 40;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(40, this->_internal_tschchartseriesbubbleshowvaluelabels(), target);
  }

  // optional bool tschchartseriesdefaultshowvaluelabels = 41;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_tschchartseriesdefaultshowvaluelabels(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool tschchartserieslineshowvaluelabels = 42;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_tschchartserieslineshowvaluelabels(), target);
  }

  // optional bool tschchartseriesmixedshowvaluelabels = 43;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_tschchartseriesmixedshowvaluelabels(), target);
  }

  // optional bool tschchartseriespieshowvaluelabels = 44;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(44, this->_internal_tschchartseriespieshowvaluelabels(), target);
  }

  // optional bool tschchartseriesscattershowvaluelabels = 45;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(45, this->_internal_tschchartseriesscattershowvaluelabels(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartseriesbubblesizedimension = 46;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_tschchartseriesbubblesizedimension(), target);
  }

  // optional int32 tschchartseriesareasymboltype = 47;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(47, this->_internal_tschchartseriesareasymboltype(), target);
  }

  // optional int32 tschchartserieslinesymboltype = 48;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(48, this->_internal_tschchartserieslinesymboltype(), target);
  }

  // optional int32 tschchartseriesmixedareasymboltype = 49;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(49, this->_internal_tschchartseriesmixedareasymboltype(), target);
  }

  // optional int32 tschchartseriesmixedlinesymboltype = 50;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_tschchartseriesmixedlinesymboltype(), target);
  }

  // optional int32 tschchartseriesscattersymboltype = 51;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(51, this->_internal_tschchartseriesscattersymboltype(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(52, this->_internal_tschchartseriesdefaulttrendlineequationoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(53, this->_internal_tschchartseriesdefaulttrendlineequationoffsety(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartseriesdefaulttrendlinelabelstring().data(), static_cast<int>(this->_internal_tschchartseriesdefaulttrendlinelabelstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartSeriesNonStyleArchive.tschchartseriesdefaulttrendlinelabelstring");
    target = stream->WriteStringMaybeAliased(
        54, this->_internal_tschchartseriesdefaulttrendlinelabelstring(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartseriesdefaulttrendlineorder = 55;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(55, this->_internal_tschchartseriesdefaulttrendlineorder(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(56, this->_internal_tschchartseriesdefaulttrendlineperiod(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(57, this->_internal_tschchartseriesdefaulttrendlinersquaredoffsetx(), target);
  }

  // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(58, this->_internal_tschchartseriesdefaulttrendlinersquaredoffsety(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(59, this->_internal_tschchartseriesdefaulttrendlineshowequation(), target);
  }

  // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(60, this->_internal_tschchartseriesdefaulttrendlineshowlabel(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(61, this->_internal_tschchartseriesdefaulttrendlineshowr2value(), target);
  }

  // optional int32 tschchartseriesdefaulttrendlinetype = 62;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(62, this->_internal_tschchartseriesdefaulttrendlinetype(), target);
  }

  // optional float tschchartseriespiewedgeexplosion = 63;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(63, this->_internal_tschchartseriespiewedgeexplosion(), target);
  }

  // optional int32 tschchartseriesdefaultyaxisordinal = 64;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(64, this->_internal_tschchartseriesdefaultyaxisordinal(), target);
  }

  // optional bool tschchartseriesbubbleshowserieslabels = 65;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(65, this->_internal_tschchartseriesbubbleshowserieslabels(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(66, this->_internal_tschchartseriesbubblevaluelabelsaxis(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartseriesscattershowserieslabels = 67;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(67, this->_internal_tschchartseriesscattershowserieslabels(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(68, this->_internal_tschchartseriesscattervaluelabelsaxis(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(69, _Internal::tschchartseriesdefault1_0dateformat(this),
        _Internal::tschchartseriesdefault1_0dateformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, _Internal::tschchartseriesdefaultdurationformat(this),
        _Internal::tschchartseriesdefaultdurationformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(71, _Internal::tschchartseriesdefaultdateformat(this),
        _Internal::tschchartseriesdefaultdateformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(98, _Internal::tschchartseriesdefaultnumberformat(this),
        _Internal::tschchartseriesdefaultnumberformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::tschchartseriespienumberformat(this),
        _Internal::tschchartseriespienumberformat(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(100, this->_internal_tschchartseriesdefaultshowlabelsinfront(), target);
  }

  // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(101, this->_internal_tschchartseriesbubbleshowlabelsinfront(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriespieenablecalloutline = 102;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(102, this->_internal_tschchartseriespieenablecalloutline(), target);
  }

  // optional int32 tschchartseriesareaenablecalloutline = 103;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(103, this->_internal_tschchartseriesareaenablecalloutline(), target);
  }

  // optional int32 tschchartseriesbarenablecalloutline = 104;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(104, this->_internal_tschchartseriesbarenablecalloutline(), target);
  }

  // optional int32 tschchartseriesbubbleenablecalloutline = 105;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(105, this->_internal_tschchartseriesbubbleenablecalloutline(), target);
  }

  // optional int32 tschchartserieslineenablecalloutline = 106;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(106, this->_internal_tschchartserieslineenablecalloutline(), target);
  }

  // optional int32 tschchartseriesscatterenablecalloutline = 107;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(107, this->_internal_tschchartseriesscatterenablecalloutline(), target);
  }

  // optional int32 tschchartseriesstackedareaenablecalloutline = 108;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(108, this->_internal_tschchartseriesstackedareaenablecalloutline(), target);
  }

  // optional int32 tschchartseriesstackedbarenablecalloutline = 109;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(109, this->_internal_tschchartseriesstackedbarenablecalloutline(), target);
  }

  // optional int32 tschchartseriesdefaultenablecalloutline = 110;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(110, this->_internal_tschchartseriesdefaultenablecalloutline(), target);
  }

  // optional bool tschchartseriespiestacklabels = 138;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(138, this->_internal_tschchartseriespiestacklabels(), target);
  }

  // optional bool tschchartseriesareastacklabels = 139;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(139, this->_internal_tschchartseriesareastacklabels(), target);
  }

  // optional bool tschchartseriesbarstacklabels = 140;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(140, this->_internal_tschchartseriesbarstacklabels(), target);
  }

  // optional bool tschchartseriesbubblestacklabels = 141;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(141, this->_internal_tschchartseriesbubblestacklabels(), target);
  }

  // optional bool tschchartserieslinestacklabels = 142;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(142, this->_internal_tschchartserieslinestacklabels(), target);
  }

  // optional bool tschchartseriesscatterstacklabels = 143;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(143, this->_internal_tschchartseriesscatterstacklabels(), target);
  }

  // optional bool tschchartseriesstackedareastacklabels = 144;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(144, this->_internal_tschchartseriesstackedareastacklabels(), target);
  }

  // optional bool tschchartseriesstackedbarstacklabels = 145;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(145, this->_internal_tschchartseriesstackedbarstacklabels(), target);
  }

  // optional bool tschchartseriesdefaultstacklabels = 146;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(146, this->_internal_tschchartseriesdefaultstacklabels(), target);
  }

  // optional float tschchartseriespielabelexplosion = 147;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(147, this->_internal_tschchartseriespielabelexplosion(), target);
  }

  // optional bool tschchartseriesradarareashowsymbol = 160;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(160, this->_internal_tschchartseriesradarareashowsymbol(), target);
  }

  // optional bool tschchartseriesradarshowvaluelabels = 162;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(162, this->_internal_tschchartseriesradarshowvaluelabels(), target);
  }

  cached_has_bits = _impl_._has_bits_[3];
  // optional int32 tschchartseriesradarareasymboltype = 163;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(163, this->_internal_tschchartseriesradarareasymboltype(), target);
  }

  // optional int32 tschchartseriesradararealinetype = 189;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(189, this->_internal_tschchartseriesradararealinetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartSeriesNonStyleArchive)
  return target;
}

size_t ChartSeriesNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartseriesdefaulttrendlinelabelstring = 54;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartseriesdefaulttrendlinelabelstring());
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedata = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustomnegativedatascatterx = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustomnegativedatascatterx_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedata = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustompositivedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartseriesdefaulterrorbarcustompositivedatascatterx = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaulterrorbarcustompositivedatascatterx_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefault1_0numberformat = 21;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefault1_0numberformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriespie1_0numberformat = 22;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespie1_0numberformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesstackedpercentnumberformat = 25;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesstackedpercentnumberformat_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSK.FormatStructArchive tschchartseriesdefault1_0dateformat = 69;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefault1_0dateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefaultdurationformat = 70;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultdurationformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefaultdateformat = 71;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultdateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdefaultnumberformat = 98;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdefaultnumberformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriespienumberformat = 99;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespienumberformat_);
    }

    // optional float tschchartseriesbubbleadjustmentscale = 1;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarfixedvalue = 6;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarfixedvaluescatterx = 7;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float tschchartseriesdefaulterrorbarpercentvalue = 8;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarpercentvaluescatterx = 9;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartseriesdefaulterrorbarsetting = 10;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartseriesdefaulterrorbarsetting());
    }

    // optional int32 tschchartseriesdefaulterrorbarsettingscatterx = 11;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartseriesdefaulterrorbarsettingscatterx());
    }

    // optional float tschchartseriesdefaulterrorbarstddevvalue = 12;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesdefaulterrorbarstddevvaluescatterx = 13;
    if (cached_has_bits & 0x00200000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartseriesdefaulterrorbartype = 14;
    if (cached_has_bits & 0x00400000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartseriesdefaulterrorbartype());
    }

    // optional int32 tschchartseriesdefaulterrorbartypescatterx = 15;
    if (cached_has_bits & 0x00800000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartseriesdefaulterrorbartypescatterx());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float tschchartseriespie2_3labelexplosion = 16;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesbubblelinetype = 17;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblelinetype());
    }

    // optional int32 tschchartserieslinelinetype = 18;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinelinetype());
    }

    // optional int32 tschchartseriesmixedlinelinetype = 19;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinelinetype());
    }

    // optional int32 tschchartseriesscatterlinetype = 20;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscatterlinetype());
    }

    // optional int32 tschchartseriesdefaultnumberformattype = 23;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultnumberformattype());
    }

    // optional int32 tschchartseriespienumberformattype = 24;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespienumberformattype());
    }

    // optional int32 tschchartseriesdefaultseriestype = 26;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultseriestype());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool tschchartseriesscattershowline = 29;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshownegativedata = 30;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshowserieslabels = 65;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespieshowserieslabels = 31;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareashowvaluelabels = 38;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbarshowvaluelabels = 39;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshowvaluelabels = 40;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowvaluelabels = 41;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool tschchartseriesscattershowserieslabels = 67;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesareashowsymbol = 32;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslineshowsymbol = 33;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedareashowsymbol = 34;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesbubblesizedimension = 46;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblesizedimension());
    }

    // optional int32 tschchartseriesareasymboltype = 47;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareasymboltype());
    }

    // optional int32 tschchartserieslinesymboltype = 48;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinesymboltype());
    }

    // optional int32 tschchartseriesmixedareasymboltype = 49;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedareasymboltype());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 tschchartseriesmixedlinesymboltype = 50;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesmixedlinesymboltype());
    }

    // optional int32 tschchartseriesscattersymboltype = 51;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattersymboltype());
    }

    // optional float tschchartseriesdefaulttrendlineequationoffsetx = 52;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlineequationoffsety = 53;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaulttrendlineorder = 55;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineorder());
    }

    // optional int32 tschchartseriesdefaulttrendlineperiod = 56;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlineperiod());
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsetx = 57;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriesdefaulttrendlinersquaredoffsety = 58;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool tschchartseriesdefaulttrendlineshowr2value = 61;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesdefaulttrendlinetype = 62;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaulttrendlinetype());
    }

    // optional float tschchartseriespiewedgeexplosion = 63;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesdefaultyaxisordinal = 64;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultyaxisordinal());
    }

    // optional bool tschchartseriesdefaultshowerrorbar = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowerrorbarscatterx = 28;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubbleshowlabelsinfront = 101;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowlabelsinfront = 100;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 tschchartseriesbubblevaluelabelsaxis = 66;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubblevaluelabelsaxis());
    }

    // optional bool tschchartseriesmixedlineshowsymbol = 35;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesradarareashowsymbol = 160;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscattershowsymbol = 36;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultshowtrendline = 37;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesscattervaluelabelsaxis = 68;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscattervaluelabelsaxis());
    }

    // optional bool tschchartserieslineshowvaluelabels = 42;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesmixedshowvaluelabels = 43;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool tschchartseriespieshowvaluelabels = 44;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesradarshowvaluelabels = 162;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriespieenablecalloutline = 102;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriespieenablecalloutline());
    }

    // optional bool tschchartseriesstackedareastacklabels = 144;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesstackedbarstacklabels = 145;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaulttrendlineshowequation = 59;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaulttrendlineshowlabel = 60;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriesareaenablecalloutline = 103;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesareaenablecalloutline());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 tschchartseriesbarenablecalloutline = 104;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbarenablecalloutline());
    }

    // optional int32 tschchartseriesbubbleenablecalloutline = 105;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesbubbleenablecalloutline());
    }

    // optional int32 tschchartserieslineenablecalloutline = 106;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslineenablecalloutline());
    }

    // optional int32 tschchartseriesscatterenablecalloutline = 107;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesscatterenablecalloutline());
    }

    // optional int32 tschchartseriesstackedareaenablecalloutline = 108;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedareaenablecalloutline());
    }

    // optional int32 tschchartseriesstackedbarenablecalloutline = 109;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesstackedbarenablecalloutline());
    }

    // optional int32 tschchartseriesdefaultenablecalloutline = 110;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesdefaultenablecalloutline());
    }

    // optional bool tschchartseriesscattershowvaluelabels = 45;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool tschchartseriesareastacklabels = 139;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbarstacklabels = 140;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesbubblestacklabels = 141;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesdefaultstacklabels = 146;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartserieslinestacklabels = 142;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriespiestacklabels = 138;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesscatterstacklabels = 143;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriespielabelexplosion = 147;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _impl_._has_bits_[3];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 tschchartseriesradarareasymboltype = 163;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesradarareasymboltype());
    }

    // optional int32 tschchartseriesradararealinetype = 189;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesradararealinetype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSeriesNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSeriesNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSeriesNonStyleArchive::GetClassData() const { return &_class_data_; }


void ChartSeriesNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSeriesNonStyleArchive*>(&to_msg);
  auto& from = static_cast<const ChartSeriesNonStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartseriesdefaulttrendlinelabelstring(from._internal_tschchartseriesdefaulttrendlinelabelstring());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustomnegativedata());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustomnegativedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustomnegativedatascatterx());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustompositivedata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartseriesdefaulterrorbarcustompositivedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartseriesdefaulterrorbarcustompositivedatascatterx());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartseriesdefault1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriesdefault1_0numberformat());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartseriespie1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriespie1_0numberformat());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartseriesstackedpercentnumberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriesstackedpercentnumberformat());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartseriesdefault1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriesdefault1_0dateformat());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartseriesdefaultdurationformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriesdefaultdurationformat());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartseriesdefaultdateformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriesdefaultdateformat());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartseriesdefaultnumberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriesdefaultnumberformat());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tschchartseriespienumberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriespienumberformat());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartseriesbubbleadjustmentscale_ = from._impl_.tschchartseriesbubbleadjustmentscale_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarfixedvalue_ = from._impl_.tschchartseriesdefaulterrorbarfixedvalue_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_ = from._impl_.tschchartseriesdefaulterrorbarfixedvaluescatterx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarpercentvalue_ = from._impl_.tschchartseriesdefaulterrorbarpercentvalue_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_ = from._impl_.tschchartseriesdefaulterrorbarpercentvaluescatterx_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarsetting_ = from._impl_.tschchartseriesdefaulterrorbarsetting_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarsettingscatterx_ = from._impl_.tschchartseriesdefaulterrorbarsettingscatterx_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarstddevvalue_ = from._impl_.tschchartseriesdefaulterrorbarstddevvalue_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_ = from._impl_.tschchartseriesdefaulterrorbarstddevvaluescatterx_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartseriesdefaulterrorbartype_ = from._impl_.tschchartseriesdefaulterrorbartype_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriesdefaulterrorbartypescatterx_ = from._impl_.tschchartseriesdefaulterrorbartypescatterx_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriespie2_3labelexplosion_ = from._impl_.tschchartseriespie2_3labelexplosion_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartseriesbubblelinetype_ = from._impl_.tschchartseriesbubblelinetype_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartserieslinelinetype_ = from._impl_.tschchartserieslinelinetype_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesmixedlinelinetype_ = from._impl_.tschchartseriesmixedlinelinetype_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriesscatterlinetype_ = from._impl_.tschchartseriesscatterlinetype_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriesdefaultnumberformattype_ = from._impl_.tschchartseriesdefaultnumberformattype_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriespienumberformattype_ = from._impl_.tschchartseriespienumberformattype_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriesdefaultseriestype_ = from._impl_.tschchartseriesdefaultseriestype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartseriesscattershowline_ = from._impl_.tschchartseriesscattershowline_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartseriesbubbleshownegativedata_ = from._impl_.tschchartseriesbubbleshownegativedata_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartseriesbubbleshowserieslabels_ = from._impl_.tschchartseriesbubbleshowserieslabels_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartseriespieshowserieslabels_ = from._impl_.tschchartseriespieshowserieslabels_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartseriesareashowvaluelabels_ = from._impl_.tschchartseriesareashowvaluelabels_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartseriesbarshowvaluelabels_ = from._impl_.tschchartseriesbarshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartseriesbubbleshowvaluelabels_ = from._impl_.tschchartseriesbubbleshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartseriesdefaultshowvaluelabels_ = from._impl_.tschchartseriesdefaultshowvaluelabels_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartseriesscattershowserieslabels_ = from._impl_.tschchartseriesscattershowserieslabels_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartseriesareashowsymbol_ = from._impl_.tschchartseriesareashowsymbol_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartserieslineshowsymbol_ = from._impl_.tschchartserieslineshowsymbol_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartseriesmixedareashowsymbol_ = from._impl_.tschchartseriesmixedareashowsymbol_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartseriesbubblesizedimension_ = from._impl_.tschchartseriesbubblesizedimension_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartseriesareasymboltype_ = from._impl_.tschchartseriesareasymboltype_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartserieslinesymboltype_ = from._impl_.tschchartserieslinesymboltype_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesmixedareasymboltype_ = from._impl_.tschchartseriesmixedareasymboltype_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesmixedlinesymboltype_ = from._impl_.tschchartseriesmixedlinesymboltype_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesscattersymboltype_ = from._impl_.tschchartseriesscattersymboltype_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationoffsetx_ = from._impl_.tschchartseriesdefaulttrendlineequationoffsetx_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineequationoffsety_ = from._impl_.tschchartseriesdefaulttrendlineequationoffsety_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineorder_ = from._impl_.tschchartseriesdefaulttrendlineorder_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineperiod_ = from._impl_.tschchartseriesdefaulttrendlineperiod_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_ = from._impl_.tschchartseriesdefaulttrendlinersquaredoffsetx_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinersquaredoffsety_ = from._impl_.tschchartseriesdefaulttrendlinersquaredoffsety_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineshowr2value_ = from._impl_.tschchartseriesdefaulttrendlineshowr2value_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartseriesdefaulttrendlinetype_ = from._impl_.tschchartseriesdefaulttrendlinetype_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartseriespiewedgeexplosion_ = from._impl_.tschchartseriespiewedgeexplosion_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesdefaultyaxisordinal_ = from._impl_.tschchartseriesdefaultyaxisordinal_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriesdefaultshowerrorbar_ = from._impl_.tschchartseriesdefaultshowerrorbar_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriesdefaultshowerrorbarscatterx_ = from._impl_.tschchartseriesdefaultshowerrorbarscatterx_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriesbubbleshowlabelsinfront_ = from._impl_.tschchartseriesbubbleshowlabelsinfront_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriesdefaultshowlabelsinfront_ = from._impl_.tschchartseriesdefaultshowlabelsinfront_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartseriesbubblevaluelabelsaxis_ = from._impl_.tschchartseriesbubblevaluelabelsaxis_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartseriesmixedlineshowsymbol_ = from._impl_.tschchartseriesmixedlineshowsymbol_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartseriesradarareashowsymbol_ = from._impl_.tschchartseriesradarareashowsymbol_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartseriesscattershowsymbol_ = from._impl_.tschchartseriesscattershowsymbol_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartseriesdefaultshowtrendline_ = from._impl_.tschchartseriesdefaultshowtrendline_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartseriesscattervaluelabelsaxis_ = from._impl_.tschchartseriesscattervaluelabelsaxis_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartserieslineshowvaluelabels_ = from._impl_.tschchartserieslineshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartseriesmixedshowvaluelabels_ = from._impl_.tschchartseriesmixedshowvaluelabels_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartseriespieshowvaluelabels_ = from._impl_.tschchartseriespieshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartseriesradarshowvaluelabels_ = from._impl_.tschchartseriesradarshowvaluelabels_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartseriespieenablecalloutline_ = from._impl_.tschchartseriespieenablecalloutline_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartseriesstackedareastacklabels_ = from._impl_.tschchartseriesstackedareastacklabels_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartseriesstackedbarstacklabels_ = from._impl_.tschchartseriesstackedbarstacklabels_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineshowequation_ = from._impl_.tschchartseriesdefaulttrendlineshowequation_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartseriesdefaulttrendlineshowlabel_ = from._impl_.tschchartseriesdefaulttrendlineshowlabel_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesareaenablecalloutline_ = from._impl_.tschchartseriesareaenablecalloutline_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesbarenablecalloutline_ = from._impl_.tschchartseriesbarenablecalloutline_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesbubbleenablecalloutline_ = from._impl_.tschchartseriesbubbleenablecalloutline_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartserieslineenablecalloutline_ = from._impl_.tschchartserieslineenablecalloutline_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesscatterenablecalloutline_ = from._impl_.tschchartseriesscatterenablecalloutline_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriesstackedareaenablecalloutline_ = from._impl_.tschchartseriesstackedareaenablecalloutline_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartseriesstackedbarenablecalloutline_ = from._impl_.tschchartseriesstackedbarenablecalloutline_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartseriesdefaultenablecalloutline_ = from._impl_.tschchartseriesdefaultenablecalloutline_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriesscattershowvaluelabels_ = from._impl_.tschchartseriesscattershowvaluelabels_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriesareastacklabels_ = from._impl_.tschchartseriesareastacklabels_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartseriesbarstacklabels_ = from._impl_.tschchartseriesbarstacklabels_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartseriesbubblestacklabels_ = from._impl_.tschchartseriesbubblestacklabels_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesdefaultstacklabels_ = from._impl_.tschchartseriesdefaultstacklabels_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartserieslinestacklabels_ = from._impl_.tschchartserieslinestacklabels_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriespiestacklabels_ = from._impl_.tschchartseriespiestacklabels_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriesscatterstacklabels_ = from._impl_.tschchartseriesscatterstacklabels_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriespielabelexplosion_ = from._impl_.tschchartseriespielabelexplosion_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[3];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartseriesradarareasymboltype_ = from._impl_.tschchartseriesradarareasymboltype_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartseriesradararealinetype_ = from._impl_.tschchartseriesradararealinetype_;
    }
    _this->_impl_._has_bits_[3] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSeriesNonStyleArchive::CopyFrom(const ChartSeriesNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartSeriesNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesNonStyleArchive::IsInitialized() const {
  if (_internal_has_tschchartseriesdefault1_0numberformat()) {
    if (!_impl_.tschchartseriesdefault1_0numberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespie1_0numberformat()) {
    if (!_impl_.tschchartseriespie1_0numberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesstackedpercentnumberformat()) {
    if (!_impl_.tschchartseriesstackedpercentnumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefault1_0dateformat()) {
    if (!_impl_.tschchartseriesdefault1_0dateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultdurationformat()) {
    if (!_impl_.tschchartseriesdefaultdurationformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultdateformat()) {
    if (!_impl_.tschchartseriesdefaultdateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdefaultnumberformat()) {
    if (!_impl_.tschchartseriesdefaultnumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespienumberformat()) {
    if (!_impl_.tschchartseriespienumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesNonStyleArchive::InternalSwap(ChartSeriesNonStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  swap(_impl_._has_bits_[3], other->_impl_._has_bits_[3]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartseriesdefaulttrendlinelabelstring_, lhs_arena,
      &other->_impl_.tschchartseriesdefaulttrendlinelabelstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesNonStyleArchive, _impl_.tschchartseriesradararealinetype_)
      + sizeof(ChartSeriesNonStyleArchive::_impl_.tschchartseriesradararealinetype_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesNonStyleArchive, _impl_.tschchartseriesdefaulterrorbarcustomnegativedata_)>(
          reinterpret_cast<char*>(&_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_),
          reinterpret_cast<char*>(&other->_impl_.tschchartseriesdefaulterrorbarcustomnegativedata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[7]);
}

// ===================================================================

class ReferenceLineStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineStyleArchive>()._impl_._has_bits_);
  static void set_has_tschreferencelinedefaultlabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSD::ShadowArchive& tschreferencelinedefaultshadow(const ReferenceLineStyleArchive* msg);
  static void set_has_tschreferencelinedefaultshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschreferencelinedefaultstroke(const ReferenceLineStyleArchive* msg);
  static void set_has_tschreferencelinedefaultstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschreferencelinedefaultvaluelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSD::ShadowArchive&
ReferenceLineStyleArchive::_Internal::tschreferencelinedefaultshadow(const ReferenceLineStyleArchive* msg) {
  return *msg->_impl_.tschreferencelinedefaultshadow_;
}
const ::TSD::StrokeArchive&
ReferenceLineStyleArchive::_Internal::tschreferencelinedefaultstroke(const ReferenceLineStyleArchive* msg) {
  return *msg->_impl_.tschreferencelinedefaultstroke_;
}
void ReferenceLineStyleArchive::clear_tschreferencelinedefaultshadow() {
  if (_impl_.tschreferencelinedefaultshadow_ != nullptr) _impl_.tschreferencelinedefaultshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ReferenceLineStyleArchive::clear_tschreferencelinedefaultstroke() {
  if (_impl_.tschreferencelinedefaultstroke_ != nullptr) _impl_.tschreferencelinedefaultstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ReferenceLineStyleArchive::ReferenceLineStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ReferenceLineStyleArchive)
}
ReferenceLineStyleArchive::ReferenceLineStyleArchive(const ReferenceLineStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferenceLineStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschreferencelinedefaultstroke_){nullptr}
    , decltype(_impl_.tschreferencelinedefaultshadow_){nullptr}
    , decltype(_impl_.tschreferencelinedefaultlabelparagraphstyleindex_){}
    , decltype(_impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschreferencelinedefaultstroke()) {
    _this->_impl_.tschreferencelinedefaultstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschreferencelinedefaultstroke_);
  }
  if (from._internal_has_tschreferencelinedefaultshadow()) {
    _this->_impl_.tschreferencelinedefaultshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschreferencelinedefaultshadow_);
  }
  ::memcpy(&_impl_.tschreferencelinedefaultlabelparagraphstyleindex_, &from._impl_.tschreferencelinedefaultlabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_) -
    reinterpret_cast<char*>(&_impl_.tschreferencelinedefaultlabelparagraphstyleindex_)) + sizeof(_impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ReferenceLineStyleArchive)
}

inline void ReferenceLineStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschreferencelinedefaultstroke_){nullptr}
    , decltype(_impl_.tschreferencelinedefaultshadow_){nullptr}
    , decltype(_impl_.tschreferencelinedefaultlabelparagraphstyleindex_){0}
    , decltype(_impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_){0}
  };
}

ReferenceLineStyleArchive::~ReferenceLineStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ReferenceLineStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceLineStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tschreferencelinedefaultstroke_;
  if (this != internal_default_instance()) delete _impl_.tschreferencelinedefaultshadow_;
}

void ReferenceLineStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceLineStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ReferenceLineStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschreferencelinedefaultstroke_ != nullptr);
      _impl_.tschreferencelinedefaultstroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschreferencelinedefaultshadow_ != nullptr);
      _impl_.tschreferencelinedefaultshadow_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.tschreferencelinedefaultlabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschreferencelinedefaultlabelparagraphstyleindex_)) + sizeof(_impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLineStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.StrokeArchive tschreferencelinedefaultstroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelinedefaultstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschreferencelinedefaultshadow = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelinedefaultshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschreferencelinedefaultlabelparagraphstyleindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschreferencelinedefaultlabelparagraphstyleindex(&has_bits);
          _impl_.tschreferencelinedefaultlabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschreferencelinedefaultvaluelabelparagraphstyleindex = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschreferencelinedefaultvaluelabelparagraphstyleindex(&has_bits);
          _impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceLineStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ReferenceLineStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive tschreferencelinedefaultstroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tschreferencelinedefaultstroke(this),
        _Internal::tschreferencelinedefaultstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.ShadowArchive tschreferencelinedefaultshadow = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tschreferencelinedefaultshadow(this),
        _Internal::tschreferencelinedefaultshadow(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschreferencelinedefaultlabelparagraphstyleindex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tschreferencelinedefaultlabelparagraphstyleindex(), target);
  }

  // optional int32 tschreferencelinedefaultvaluelabelparagraphstyleindex = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tschreferencelinedefaultvaluelabelparagraphstyleindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ReferenceLineStyleArchive)
  return target;
}

size_t ReferenceLineStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ReferenceLineStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSD.StrokeArchive tschreferencelinedefaultstroke = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschreferencelinedefaultstroke_);
    }

    // optional .TSD.ShadowArchive tschreferencelinedefaultshadow = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschreferencelinedefaultshadow_);
    }

    // optional int32 tschreferencelinedefaultlabelparagraphstyleindex = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschreferencelinedefaultlabelparagraphstyleindex());
    }

    // optional int32 tschreferencelinedefaultvaluelabelparagraphstyleindex = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschreferencelinedefaultvaluelabelparagraphstyleindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLineStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferenceLineStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLineStyleArchive::GetClassData() const { return &_class_data_; }


void ReferenceLineStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferenceLineStyleArchive*>(&to_msg);
  auto& from = static_cast<const ReferenceLineStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ReferenceLineStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschreferencelinedefaultstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschreferencelinedefaultstroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschreferencelinedefaultshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschreferencelinedefaultshadow());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschreferencelinedefaultlabelparagraphstyleindex_ = from._impl_.tschreferencelinedefaultlabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_ = from._impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLineStyleArchive::CopyFrom(const ReferenceLineStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ReferenceLineStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineStyleArchive::IsInitialized() const {
  if (_internal_has_tschreferencelinedefaultstroke()) {
    if (!_impl_.tschreferencelinedefaultstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschreferencelinedefaultshadow()) {
    if (!_impl_.tschreferencelinedefaultshadow_->IsInitialized()) return false;
  }
  return true;
}

void ReferenceLineStyleArchive::InternalSwap(ReferenceLineStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceLineStyleArchive, _impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_)
      + sizeof(ReferenceLineStyleArchive::_impl_.tschreferencelinedefaultvaluelabelparagraphstyleindex_)
      - PROTOBUF_FIELD_OFFSET(ReferenceLineStyleArchive, _impl_.tschreferencelinedefaultstroke_)>(
          reinterpret_cast<char*>(&_impl_.tschreferencelinedefaultstroke_),
          reinterpret_cast<char*>(&other->_impl_.tschreferencelinedefaultstroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[8]);
}

// ===================================================================

class ReferenceLineNonStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineNonStyleArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschreferencelinedefaultcustomvalue(const ReferenceLineNonStyleArchive* msg);
  static void set_has_tschreferencelinedefaultcustomvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tschreferencelinedefaultlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschreferencelinedefaultshowlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschreferencelinedefaultshowline(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_tschreferencelinedefaultshowvaluelabel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschreferencelinedefaulttype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSCH::ChartsNSNumberDoubleArchive&
ReferenceLineNonStyleArchive::_Internal::tschreferencelinedefaultcustomvalue(const ReferenceLineNonStyleArchive* msg) {
  return *msg->_impl_.tschreferencelinedefaultcustomvalue_;
}
void ReferenceLineNonStyleArchive::clear_tschreferencelinedefaultcustomvalue() {
  if (_impl_.tschreferencelinedefaultcustomvalue_ != nullptr) _impl_.tschreferencelinedefaultcustomvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ReferenceLineNonStyleArchive::ReferenceLineNonStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ReferenceLineNonStyleArchive)
}
ReferenceLineNonStyleArchive::ReferenceLineNonStyleArchive(const ReferenceLineNonStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferenceLineNonStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschreferencelinedefaultlabel_){}
    , decltype(_impl_.tschreferencelinedefaultcustomvalue_){nullptr}
    , decltype(_impl_.tschreferencelinedefaulttype_){}
    , decltype(_impl_.tschreferencelinedefaultshowlabel_){}
    , decltype(_impl_.tschreferencelinedefaultshowline_){}
    , decltype(_impl_.tschreferencelinedefaultshowvaluelabel_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschreferencelinedefaultlabel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschreferencelinedefaultlabel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschreferencelinedefaultlabel()) {
    _this->_impl_.tschreferencelinedefaultlabel_.Set(from._internal_tschreferencelinedefaultlabel(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tschreferencelinedefaultcustomvalue()) {
    _this->_impl_.tschreferencelinedefaultcustomvalue_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from._impl_.tschreferencelinedefaultcustomvalue_);
  }
  ::memcpy(&_impl_.tschreferencelinedefaulttype_, &from._impl_.tschreferencelinedefaulttype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschreferencelinedefaultshowvaluelabel_) -
    reinterpret_cast<char*>(&_impl_.tschreferencelinedefaulttype_)) + sizeof(_impl_.tschreferencelinedefaultshowvaluelabel_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ReferenceLineNonStyleArchive)
}

inline void ReferenceLineNonStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschreferencelinedefaultlabel_){}
    , decltype(_impl_.tschreferencelinedefaultcustomvalue_){nullptr}
    , decltype(_impl_.tschreferencelinedefaulttype_){0}
    , decltype(_impl_.tschreferencelinedefaultshowlabel_){false}
    , decltype(_impl_.tschreferencelinedefaultshowline_){false}
    , decltype(_impl_.tschreferencelinedefaultshowvaluelabel_){false}
  };
  _impl_.tschreferencelinedefaultlabel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschreferencelinedefaultlabel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReferenceLineNonStyleArchive::~ReferenceLineNonStyleArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ReferenceLineNonStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceLineNonStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschreferencelinedefaultlabel_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tschreferencelinedefaultcustomvalue_;
}

void ReferenceLineNonStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceLineNonStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ReferenceLineNonStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschreferencelinedefaultlabel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschreferencelinedefaultcustomvalue_ != nullptr);
      _impl_.tschreferencelinedefaultcustomvalue_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&_impl_.tschreferencelinedefaulttype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschreferencelinedefaultshowvaluelabel_) -
        reinterpret_cast<char*>(&_impl_.tschreferencelinedefaulttype_)) + sizeof(_impl_.tschreferencelinedefaultshowvaluelabel_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLineNonStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tschreferencelinedefaulttype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschreferencelinedefaulttype(&has_bits);
          _impl_.tschreferencelinedefaulttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschreferencelinedefaultshowline = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschreferencelinedefaultshowline(&has_bits);
          _impl_.tschreferencelinedefaultshowline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschreferencelinedefaultshowlabel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschreferencelinedefaultshowlabel(&has_bits);
          _impl_.tschreferencelinedefaultshowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschreferencelinedefaultshowvaluelabel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschreferencelinedefaultshowvaluelabel(&has_bits);
          _impl_.tschreferencelinedefaultshowvaluelabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschreferencelinedefaultlabel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tschreferencelinedefaultlabel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultlabel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinedefaultcustomvalue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelinedefaultcustomvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceLineNonStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ReferenceLineNonStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tschreferencelinedefaulttype = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tschreferencelinedefaulttype(), target);
  }

  // optional bool tschreferencelinedefaultshowline = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_tschreferencelinedefaultshowline(), target);
  }

  // optional bool tschreferencelinedefaultshowlabel = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_tschreferencelinedefaultshowlabel(), target);
  }

  // optional bool tschreferencelinedefaultshowvaluelabel = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_tschreferencelinedefaultshowvaluelabel(), target);
  }

  // optional string tschreferencelinedefaultlabel = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschreferencelinedefaultlabel().data(), static_cast<int>(this->_internal_tschreferencelinedefaultlabel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ReferenceLineNonStyleArchive.tschreferencelinedefaultlabel");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tschreferencelinedefaultlabel(), target);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinedefaultcustomvalue = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tschreferencelinedefaultcustomvalue(this),
        _Internal::tschreferencelinedefaultcustomvalue(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ReferenceLineNonStyleArchive)
  return target;
}

size_t ReferenceLineNonStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ReferenceLineNonStyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string tschreferencelinedefaultlabel = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschreferencelinedefaultlabel());
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinedefaultcustomvalue = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschreferencelinedefaultcustomvalue_);
    }

    // optional int32 tschreferencelinedefaulttype = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschreferencelinedefaulttype());
    }

    // optional bool tschreferencelinedefaultshowlabel = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool tschreferencelinedefaultshowline = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool tschreferencelinedefaultshowvaluelabel = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLineNonStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferenceLineNonStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLineNonStyleArchive::GetClassData() const { return &_class_data_; }


void ReferenceLineNonStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferenceLineNonStyleArchive*>(&to_msg);
  auto& from = static_cast<const ReferenceLineNonStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ReferenceLineNonStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschreferencelinedefaultlabel(from._internal_tschreferencelinedefaultlabel());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschreferencelinedefaultcustomvalue()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(
          from._internal_tschreferencelinedefaultcustomvalue());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschreferencelinedefaulttype_ = from._impl_.tschreferencelinedefaulttype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschreferencelinedefaultshowlabel_ = from._impl_.tschreferencelinedefaultshowlabel_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschreferencelinedefaultshowline_ = from._impl_.tschreferencelinedefaultshowline_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschreferencelinedefaultshowvaluelabel_ = from._impl_.tschreferencelinedefaultshowvaluelabel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLineNonStyleArchive::CopyFrom(const ReferenceLineNonStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ReferenceLineNonStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineNonStyleArchive::IsInitialized() const {
  return true;
}

void ReferenceLineNonStyleArchive::InternalSwap(ReferenceLineNonStyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschreferencelinedefaultlabel_, lhs_arena,
      &other->_impl_.tschreferencelinedefaultlabel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceLineNonStyleArchive, _impl_.tschreferencelinedefaultshowvaluelabel_)
      + sizeof(ReferenceLineNonStyleArchive::_impl_.tschreferencelinedefaultshowvaluelabel_)
      - PROTOBUF_FIELD_OFFSET(ReferenceLineNonStyleArchive, _impl_.tschreferencelinedefaultcustomvalue_)>(
          reinterpret_cast<char*>(&_impl_.tschreferencelinedefaultcustomvalue_),
          reinterpret_cast<char*>(&other->_impl_.tschreferencelinedefaultcustomvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineNonStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[9]);
}

// ===================================================================

class ChartGenericPropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartGenericPropertyMapArchive>()._impl_._has_bits_);
  static void set_has_tschchartinfo3dbarshape(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartinfo3dbeveledges(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartinfo3dchartopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartinfo3dintersetdepthgap(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCH::Chart3DLightingPackageArchive& tschchartinfo3dlightingpackage(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfo3dlightingpackage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfo3drotation(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfo3drotation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfo3dscale(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfo3dscale(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCH::Chart3DVectorArchive& tschchartinfo3dviewport(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfo3dviewport(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::FillArchive& tschchartinfobackgroundfill(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfobackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::StrokeArchive& tschchartinfobackgroundstroke(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfobackgroundstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschchartinfoborderopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSD::ShadowArchive& tschchartinfobordershadow(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfobordershadow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschchartinfoborderstroke(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfoborderstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschchartinfocalloutlinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartinfocombinelayers(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartinfodeprecatedroundedcornerouterendonly(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartinfodeprecatedroundedcornerradius(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartinfodatasetnamelocation(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tschchartinfodatasetnameparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartinfodonutplacetitleatcenter(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSD::FillArchive& tschchartinfogridbackgroundfill(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfogridbackgroundfill(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tschchartinfogridbackgroundopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartinfoinnerradius(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartinfointerbargap(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartinfointersetgap(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartinfomultidatacontroltype(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartinfopiestartangle(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartinforadarradiusgridlinecurve(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartinforadarstartangle(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartinforoundedcornerouterendonly(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartinforoundedcornerradius(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartinfoshowborder(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartinfoshowlegend(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartinfoshowtitle(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartinfoskiphiddendata(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::TSP::Color& tschchartinfotitlecolor(const ChartGenericPropertyMapArchive* msg);
  static void set_has_tschchartinfotitlecolor(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartinfotitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartinfotitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
};

const ::TSCH::Chart3DLightingPackageArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfo3dlightingpackage(const ChartGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartinfo3dlightingpackage_;
}
const ::TSCH::Chart3DVectorArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfo3drotation(const ChartGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartinfo3drotation_;
}
const ::TSCH::Chart3DVectorArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfo3dscale(const ChartGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartinfo3dscale_;
}
const ::TSCH::Chart3DVectorArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfo3dviewport(const ChartGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartinfo3dviewport_;
}
const ::TSD::FillArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfobackgroundfill(const ChartGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartinfobackgroundfill_;
}
const ::TSD::StrokeArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfobackgroundstroke(const ChartGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartinfobackgroundstroke_;
}
const ::TSD::ShadowArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfobordershadow(const ChartGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartinfobordershadow_;
}
const ::TSD::StrokeArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfoborderstroke(const ChartGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartinfoborderstroke_;
}
const ::TSD::FillArchive&
ChartGenericPropertyMapArchive::_Internal::tschchartinfogridbackgroundfill(const ChartGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartinfogridbackgroundfill_;
}
const ::TSP::Color&
ChartGenericPropertyMapArchive::_Internal::tschchartinfotitlecolor(const ChartGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartinfotitlecolor_;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfo3dlightingpackage() {
  if (_impl_.tschchartinfo3dlightingpackage_ != nullptr) _impl_.tschchartinfo3dlightingpackage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfo3drotation() {
  if (_impl_.tschchartinfo3drotation_ != nullptr) _impl_.tschchartinfo3drotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfo3dscale() {
  if (_impl_.tschchartinfo3dscale_ != nullptr) _impl_.tschchartinfo3dscale_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfo3dviewport() {
  if (_impl_.tschchartinfo3dviewport_ != nullptr) _impl_.tschchartinfo3dviewport_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfobackgroundfill() {
  if (_impl_.tschchartinfobackgroundfill_ != nullptr) _impl_.tschchartinfobackgroundfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfobackgroundstroke() {
  if (_impl_.tschchartinfobackgroundstroke_ != nullptr) _impl_.tschchartinfobackgroundstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfobordershadow() {
  if (_impl_.tschchartinfobordershadow_ != nullptr) _impl_.tschchartinfobordershadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfoborderstroke() {
  if (_impl_.tschchartinfoborderstroke_ != nullptr) _impl_.tschchartinfoborderstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfogridbackgroundfill() {
  if (_impl_.tschchartinfogridbackgroundfill_ != nullptr) _impl_.tschchartinfogridbackgroundfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartGenericPropertyMapArchive::clear_tschchartinfotitlecolor() {
  if (_impl_.tschchartinfotitlecolor_ != nullptr) _impl_.tschchartinfotitlecolor_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
ChartGenericPropertyMapArchive::ChartGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartGenericPropertyMapArchive)
}
ChartGenericPropertyMapArchive::ChartGenericPropertyMapArchive(const ChartGenericPropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartGenericPropertyMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfotitle_){}
    , decltype(_impl_.tschchartinfo3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfo3drotation_){nullptr}
    , decltype(_impl_.tschchartinfo3dscale_){nullptr}
    , decltype(_impl_.tschchartinfo3dviewport_){nullptr}
    , decltype(_impl_.tschchartinfobackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfobackgroundstroke_){nullptr}
    , decltype(_impl_.tschchartinfobordershadow_){nullptr}
    , decltype(_impl_.tschchartinfoborderstroke_){nullptr}
    , decltype(_impl_.tschchartinfogridbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfotitlecolor_){nullptr}
    , decltype(_impl_.tschchartinfo3dbarshape_){}
    , decltype(_impl_.tschchartinfo3dchartopacity_){}
    , decltype(_impl_.tschchartinfo3dintersetdepthgap_){}
    , decltype(_impl_.tschchartinfoborderopacity_){}
    , decltype(_impl_.tschchartinfo3dbeveledges_){}
    , decltype(_impl_.tschchartinfocombinelayers_){}
    , decltype(_impl_.tschchartinfodeprecatedroundedcornerouterendonly_){}
    , decltype(_impl_.tschchartinfodonutplacetitleatcenter_){}
    , decltype(_impl_.tschchartinfocalloutlinetype_){}
    , decltype(_impl_.tschchartinfodeprecatedroundedcornerradius_){}
    , decltype(_impl_.tschchartinfodatasetnamelocation_){}
    , decltype(_impl_.tschchartinfodatasetnameparagraphstyleindex_){}
    , decltype(_impl_.tschchartinfogridbackgroundopacity_){}
    , decltype(_impl_.tschchartinfoinnerradius_){}
    , decltype(_impl_.tschchartinfointerbargap_){}
    , decltype(_impl_.tschchartinfointersetgap_){}
    , decltype(_impl_.tschchartinfomultidatacontroltype_){}
    , decltype(_impl_.tschchartinfopiestartangle_){}
    , decltype(_impl_.tschchartinforadarstartangle_){}
    , decltype(_impl_.tschchartinforadarradiusgridlinecurve_){}
    , decltype(_impl_.tschchartinforoundedcornerouterendonly_){}
    , decltype(_impl_.tschchartinfoshowborder_){}
    , decltype(_impl_.tschchartinfoshowlegend_){}
    , decltype(_impl_.tschchartinforoundedcornerradius_){}
    , decltype(_impl_.tschchartinfoshowtitle_){}
    , decltype(_impl_.tschchartinfoskiphiddendata_){}
    , decltype(_impl_.tschchartinfotitleparagraphstyleindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartinfotitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartinfotitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartinfotitle()) {
    _this->_impl_.tschchartinfotitle_.Set(from._internal_tschchartinfotitle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tschchartinfo3dlightingpackage()) {
    _this->_impl_.tschchartinfo3dlightingpackage_ = new ::TSCH::Chart3DLightingPackageArchive(*from._impl_.tschchartinfo3dlightingpackage_);
  }
  if (from._internal_has_tschchartinfo3drotation()) {
    _this->_impl_.tschchartinfo3drotation_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfo3drotation_);
  }
  if (from._internal_has_tschchartinfo3dscale()) {
    _this->_impl_.tschchartinfo3dscale_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfo3dscale_);
  }
  if (from._internal_has_tschchartinfo3dviewport()) {
    _this->_impl_.tschchartinfo3dviewport_ = new ::TSCH::Chart3DVectorArchive(*from._impl_.tschchartinfo3dviewport_);
  }
  if (from._internal_has_tschchartinfobackgroundfill()) {
    _this->_impl_.tschchartinfobackgroundfill_ = new ::TSD::FillArchive(*from._impl_.tschchartinfobackgroundfill_);
  }
  if (from._internal_has_tschchartinfobackgroundstroke()) {
    _this->_impl_.tschchartinfobackgroundstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartinfobackgroundstroke_);
  }
  if (from._internal_has_tschchartinfobordershadow()) {
    _this->_impl_.tschchartinfobordershadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartinfobordershadow_);
  }
  if (from._internal_has_tschchartinfoborderstroke()) {
    _this->_impl_.tschchartinfoborderstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartinfoborderstroke_);
  }
  if (from._internal_has_tschchartinfogridbackgroundfill()) {
    _this->_impl_.tschchartinfogridbackgroundfill_ = new ::TSD::FillArchive(*from._impl_.tschchartinfogridbackgroundfill_);
  }
  if (from._internal_has_tschchartinfotitlecolor()) {
    _this->_impl_.tschchartinfotitlecolor_ = new ::TSP::Color(*from._impl_.tschchartinfotitlecolor_);
  }
  ::memcpy(&_impl_.tschchartinfo3dbarshape_, &from._impl_.tschchartinfo3dbarshape_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartinfotitleparagraphstyleindex_) -
    reinterpret_cast<char*>(&_impl_.tschchartinfo3dbarshape_)) + sizeof(_impl_.tschchartinfotitleparagraphstyleindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartGenericPropertyMapArchive)
}

inline void ChartGenericPropertyMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartinfotitle_){}
    , decltype(_impl_.tschchartinfo3dlightingpackage_){nullptr}
    , decltype(_impl_.tschchartinfo3drotation_){nullptr}
    , decltype(_impl_.tschchartinfo3dscale_){nullptr}
    , decltype(_impl_.tschchartinfo3dviewport_){nullptr}
    , decltype(_impl_.tschchartinfobackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfobackgroundstroke_){nullptr}
    , decltype(_impl_.tschchartinfobordershadow_){nullptr}
    , decltype(_impl_.tschchartinfoborderstroke_){nullptr}
    , decltype(_impl_.tschchartinfogridbackgroundfill_){nullptr}
    , decltype(_impl_.tschchartinfotitlecolor_){nullptr}
    , decltype(_impl_.tschchartinfo3dbarshape_){0}
    , decltype(_impl_.tschchartinfo3dchartopacity_){0}
    , decltype(_impl_.tschchartinfo3dintersetdepthgap_){0}
    , decltype(_impl_.tschchartinfoborderopacity_){0}
    , decltype(_impl_.tschchartinfo3dbeveledges_){false}
    , decltype(_impl_.tschchartinfocombinelayers_){false}
    , decltype(_impl_.tschchartinfodeprecatedroundedcornerouterendonly_){false}
    , decltype(_impl_.tschchartinfodonutplacetitleatcenter_){false}
    , decltype(_impl_.tschchartinfocalloutlinetype_){0}
    , decltype(_impl_.tschchartinfodeprecatedroundedcornerradius_){0}
    , decltype(_impl_.tschchartinfodatasetnamelocation_){0}
    , decltype(_impl_.tschchartinfodatasetnameparagraphstyleindex_){0}
    , decltype(_impl_.tschchartinfogridbackgroundopacity_){0}
    , decltype(_impl_.tschchartinfoinnerradius_){0}
    , decltype(_impl_.tschchartinfointerbargap_){0}
    , decltype(_impl_.tschchartinfointersetgap_){0}
    , decltype(_impl_.tschchartinfomultidatacontroltype_){0}
    , decltype(_impl_.tschchartinfopiestartangle_){0}
    , decltype(_impl_.tschchartinforadarstartangle_){0}
    , decltype(_impl_.tschchartinforadarradiusgridlinecurve_){false}
    , decltype(_impl_.tschchartinforoundedcornerouterendonly_){false}
    , decltype(_impl_.tschchartinfoshowborder_){false}
    , decltype(_impl_.tschchartinfoshowlegend_){false}
    , decltype(_impl_.tschchartinforoundedcornerradius_){0}
    , decltype(_impl_.tschchartinfoshowtitle_){false}
    , decltype(_impl_.tschchartinfoskiphiddendata_){false}
    , decltype(_impl_.tschchartinfotitleparagraphstyleindex_){0}
  };
  _impl_.tschchartinfotitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartinfotitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartGenericPropertyMapArchive::~ChartGenericPropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartGenericPropertyMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartGenericPropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartinfotitle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tschchartinfo3dlightingpackage_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfo3drotation_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfo3dscale_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfo3dviewport_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfobackgroundfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfobackgroundstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfobordershadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfoborderstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfogridbackgroundfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartinfotitlecolor_;
}

void ChartGenericPropertyMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartGenericPropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartGenericPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartinfotitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartinfo3dlightingpackage_ != nullptr);
      _impl_.tschchartinfo3dlightingpackage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartinfo3drotation_ != nullptr);
      _impl_.tschchartinfo3drotation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartinfo3dscale_ != nullptr);
      _impl_.tschchartinfo3dscale_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartinfo3dviewport_ != nullptr);
      _impl_.tschchartinfo3dviewport_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartinfobackgroundfill_ != nullptr);
      _impl_.tschchartinfobackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartinfobackgroundstroke_ != nullptr);
      _impl_.tschchartinfobackgroundstroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartinfobordershadow_ != nullptr);
      _impl_.tschchartinfobordershadow_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartinfoborderstroke_ != nullptr);
      _impl_.tschchartinfoborderstroke_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartinfogridbackgroundfill_ != nullptr);
      _impl_.tschchartinfogridbackgroundfill_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartinfotitlecolor_ != nullptr);
      _impl_.tschchartinfotitlecolor_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&_impl_.tschchartinfo3dbarshape_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfo3dbeveledges_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfo3dbarshape_)) + sizeof(_impl_.tschchartinfo3dbeveledges_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartinfocombinelayers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfogridbackgroundopacity_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfocombinelayers_)) + sizeof(_impl_.tschchartinfogridbackgroundopacity_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartinfoinnerradius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinforoundedcornerouterendonly_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfoinnerradius_)) + sizeof(_impl_.tschchartinforoundedcornerouterendonly_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.tschchartinfoshowborder_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartinfotitleparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartinfoshowborder_)) + sizeof(_impl_.tschchartinfotitleparagraphstyleindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartGenericPropertyMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 tschchartinfo3dbarshape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartinfo3dbarshape(&_impl_._has_bits_);
          _impl_.tschchartinfo3dbarshape_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfo3dbeveledges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartinfo3dbeveledges(&_impl_._has_bits_);
          _impl_.tschchartinfo3dbeveledges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfo3dchartopacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_tschchartinfo3dchartopacity(&_impl_._has_bits_);
          _impl_.tschchartinfo3dchartopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfo3dintersetdepthgap = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_tschchartinfo3dintersetdepthgap(&_impl_._has_bits_);
          _impl_.tschchartinfo3dintersetdepthgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfo3dlightingpackage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfo3drotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfo3dscale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfo3dviewport(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfobackgroundfill = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobackgroundfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobackgroundstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfoborderopacity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_tschchartinfoborderopacity(&_impl_._has_bits_);
          _impl_.tschchartinfoborderopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartinfobordershadow = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfobordershadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartinfoborderstroke = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfoborderstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfocalloutlinetype = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartinfocalloutlinetype(&_impl_._has_bits_);
          _impl_.tschchartinfocalloutlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfocombinelayers = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartinfocombinelayers(&_impl_._has_bits_);
          _impl_.tschchartinfocombinelayers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodeprecatedroundedcornerouterendonly = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartinfodeprecatedroundedcornerouterendonly(&_impl_._has_bits_);
          _impl_.tschchartinfodeprecatedroundedcornerouterendonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfodeprecatedroundedcornerradius = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _Internal::set_has_tschchartinfodeprecatedroundedcornerradius(&_impl_._has_bits_);
          _impl_.tschchartinfodeprecatedroundedcornerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodatasetnamelocation = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartinfodatasetnamelocation(&_impl_._has_bits_);
          _impl_.tschchartinfodatasetnamelocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfodatasetnameparagraphstyleindex = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartinfodatasetnameparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartinfodatasetnameparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfodonutplacetitleatcenter = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartinfodonutplacetitleatcenter(&_impl_._has_bits_);
          _impl_.tschchartinfodonutplacetitleatcenter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfogridbackgroundfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfogridbackgroundopacity = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 181)) {
          _Internal::set_has_tschchartinfogridbackgroundopacity(&_impl_._has_bits_);
          _impl_.tschchartinfogridbackgroundopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfoinnerradius = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 189)) {
          _Internal::set_has_tschchartinfoinnerradius(&_impl_._has_bits_);
          _impl_.tschchartinfoinnerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfointerbargap = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 197)) {
          _Internal::set_has_tschchartinfointerbargap(&_impl_._has_bits_);
          _impl_.tschchartinfointerbargap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfointersetgap = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 205)) {
          _Internal::set_has_tschchartinfointersetgap(&_impl_._has_bits_);
          _impl_.tschchartinfointersetgap_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfomultidatacontroltype = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartinfomultidatacontroltype(&_impl_._has_bits_);
          _impl_.tschchartinfomultidatacontroltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinfopiestartangle = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _Internal::set_has_tschchartinfopiestartangle(&_impl_._has_bits_);
          _impl_.tschchartinfopiestartangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinforadarradiusgridlinecurve = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartinforadarradiusgridlinecurve(&_impl_._has_bits_);
          _impl_.tschchartinforadarradiusgridlinecurve_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinforadarstartangle = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 237)) {
          _Internal::set_has_tschchartinforadarstartangle(&_impl_._has_bits_);
          _impl_.tschchartinforadarstartangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinforoundedcornerouterendonly = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartinforoundedcornerouterendonly(&_impl_._has_bits_);
          _impl_.tschchartinforoundedcornerouterendonly_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartinforoundedcornerradius = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _Internal::set_has_tschchartinforoundedcornerradius(&_impl_._has_bits_);
          _impl_.tschchartinforoundedcornerradius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfoshowborder = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartinfoshowborder(&_impl_._has_bits_);
          _impl_.tschchartinfoshowborder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfoshowlegend = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartinfoshowlegend(&_impl_._has_bits_);
          _impl_.tschchartinfoshowlegend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfoshowtitle = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartinfoshowtitle(&_impl_._has_bits_);
          _impl_.tschchartinfoshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartinfoskiphiddendata = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartinfoskiphiddendata(&_impl_._has_bits_);
          _impl_.tschchartinfoskiphiddendata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Color tschchartinfotitlecolor = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartinfotitlecolor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartinfotitle = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tschchartinfotitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartinfotitleparagraphstyleindex = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartinfotitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartinfotitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartGenericPropertyMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartGenericPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 tschchartinfo3dbarshape = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_tschchartinfo3dbarshape(), target);
  }

  // optional bool tschchartinfo3dbeveledges = 2;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_tschchartinfo3dbeveledges(), target);
  }

  // optional float tschchartinfo3dchartopacity = 3;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_tschchartinfo3dchartopacity(), target);
  }

  // optional float tschchartinfo3dintersetdepthgap = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_tschchartinfo3dintersetdepthgap(), target);
  }

  // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschchartinfo3dlightingpackage(this),
        _Internal::tschchartinfo3dlightingpackage(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tschchartinfo3drotation(this),
        _Internal::tschchartinfo3drotation(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tschchartinfo3dscale(this),
        _Internal::tschchartinfo3dscale(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tschchartinfo3dviewport(this),
        _Internal::tschchartinfo3dviewport(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartinfobackgroundfill = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::tschchartinfobackgroundfill(this),
        _Internal::tschchartinfobackgroundfill(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::tschchartinfobackgroundstroke(this),
        _Internal::tschchartinfobackgroundstroke(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfoborderopacity = 11;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(11, this->_internal_tschchartinfoborderopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartinfobordershadow = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tschchartinfobordershadow(this),
        _Internal::tschchartinfobordershadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartinfoborderstroke = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::tschchartinfoborderstroke(this),
        _Internal::tschchartinfoborderstroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartinfocalloutlinetype = 14;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_tschchartinfocalloutlinetype(), target);
  }

  // optional bool tschchartinfocombinelayers = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_tschchartinfocombinelayers(), target);
  }

  // optional bool tschchartinfodeprecatedroundedcornerouterendonly = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(16, this->_internal_tschchartinfodeprecatedroundedcornerouterendonly(), target);
  }

  // optional float tschchartinfodeprecatedroundedcornerradius = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_tschchartinfodeprecatedroundedcornerradius(), target);
  }

  // optional int32 tschchartinfodatasetnamelocation = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_tschchartinfodatasetnamelocation(), target);
  }

  // optional int32 tschchartinfodatasetnameparagraphstyleindex = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_tschchartinfodatasetnameparagraphstyleindex(), target);
  }

  // optional bool tschchartinfodonutplacetitleatcenter = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_tschchartinfodonutplacetitleatcenter(), target);
  }

  // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 21;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::tschchartinfogridbackgroundfill(this),
        _Internal::tschchartinfogridbackgroundfill(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartinfogridbackgroundopacity = 22;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(22, this->_internal_tschchartinfogridbackgroundopacity(), target);
  }

  // optional float tschchartinfoinnerradius = 23;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(23, this->_internal_tschchartinfoinnerradius(), target);
  }

  // optional float tschchartinfointerbargap = 24;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(24, this->_internal_tschchartinfointerbargap(), target);
  }

  // optional float tschchartinfointersetgap = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(25, this->_internal_tschchartinfointersetgap(), target);
  }

  // optional int32 tschchartinfomultidatacontroltype = 26;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_tschchartinfomultidatacontroltype(), target);
  }

  // optional float tschchartinfopiestartangle = 27;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_tschchartinfopiestartangle(), target);
  }

  // optional bool tschchartinforadarradiusgridlinecurve = 28;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartinforadarradiusgridlinecurve(), target);
  }

  // optional float tschchartinforadarstartangle = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(29, this->_internal_tschchartinforadarstartangle(), target);
  }

  // optional bool tschchartinforoundedcornerouterendonly = 30;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_tschchartinforoundedcornerouterendonly(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float tschchartinforoundedcornerradius = 31;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(31, this->_internal_tschchartinforoundedcornerradius(), target);
  }

  // optional bool tschchartinfoshowborder = 32;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartinfoshowborder(), target);
  }

  // optional bool tschchartinfoshowlegend = 33;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_tschchartinfoshowlegend(), target);
  }

  // optional bool tschchartinfoshowtitle = 34;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_tschchartinfoshowtitle(), target);
  }

  // optional bool tschchartinfoskiphiddendata = 35;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_tschchartinfoskiphiddendata(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Color tschchartinfotitlecolor = 36;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::tschchartinfotitlecolor(this),
        _Internal::tschchartinfotitlecolor(this).GetCachedSize(), target, stream);
  }

  // optional string tschchartinfotitle = 37;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartinfotitle().data(), static_cast<int>(this->_internal_tschchartinfotitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartGenericPropertyMapArchive.tschchartinfotitle");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_tschchartinfotitle(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartinfotitleparagraphstyleindex = 38;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(38, this->_internal_tschchartinfotitleparagraphstyleindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartGenericPropertyMapArchive)
  return target;
}

size_t ChartGenericPropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartGenericPropertyMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartinfotitle = 37;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartinfotitle());
    }

    // optional .TSCH.Chart3DLightingPackageArchive tschchartinfo3dlightingpackage = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfo3dlightingpackage_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfo3drotation = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfo3drotation_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfo3dscale = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfo3dscale_);
    }

    // optional .TSCH.Chart3DVectorArchive tschchartinfo3dviewport = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfo3dviewport_);
    }

    // optional .TSD.FillArchive tschchartinfobackgroundfill = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfobackgroundfill_);
    }

    // optional .TSD.StrokeArchive tschchartinfobackgroundstroke = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfobackgroundstroke_);
    }

    // optional .TSD.ShadowArchive tschchartinfobordershadow = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfobordershadow_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.StrokeArchive tschchartinfoborderstroke = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfoborderstroke_);
    }

    // optional .TSD.FillArchive tschchartinfogridbackgroundfill = 21;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfogridbackgroundfill_);
    }

    // optional .TSP.Color tschchartinfotitlecolor = 36;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartinfotitlecolor_);
    }

    // optional int32 tschchartinfo3dbarshape = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartinfo3dbarshape());
    }

    // optional float tschchartinfo3dchartopacity = 3;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfo3dintersetdepthgap = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartinfoborderopacity = 11;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional bool tschchartinfo3dbeveledges = 2;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional bool tschchartinfocombinelayers = 15;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 1;
    }

    // optional bool tschchartinfodeprecatedroundedcornerouterendonly = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfodonutplacetitleatcenter = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfocalloutlinetype = 14;
    if (cached_has_bits & 0x00080000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartinfocalloutlinetype());
    }

    // optional float tschchartinfodeprecatedroundedcornerradius = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfodatasetnamelocation = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodatasetnamelocation());
    }

    // optional int32 tschchartinfodatasetnameparagraphstyleindex = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfodatasetnameparagraphstyleindex());
    }

    // optional float tschchartinfogridbackgroundopacity = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float tschchartinfoinnerradius = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartinfointerbargap = 24;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartinfointersetgap = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartinfomultidatacontroltype = 26;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfomultidatacontroltype());
    }

    // optional float tschchartinfopiestartangle = 27;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartinforadarstartangle = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinforadarradiusgridlinecurve = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinforoundedcornerouterendonly = 30;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    // optional bool tschchartinfoshowborder = 32;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfoshowlegend = 33;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional float tschchartinforoundedcornerradius = 31;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartinfoshowtitle = 34;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartinfoskiphiddendata = 35;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartinfotitleparagraphstyleindex = 38;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartinfotitleparagraphstyleindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartGenericPropertyMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartGenericPropertyMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartGenericPropertyMapArchive::GetClassData() const { return &_class_data_; }


void ChartGenericPropertyMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartGenericPropertyMapArchive*>(&to_msg);
  auto& from = static_cast<const ChartGenericPropertyMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartGenericPropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartinfotitle(from._internal_tschchartinfotitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartinfo3dlightingpackage()->::TSCH::Chart3DLightingPackageArchive::MergeFrom(
          from._internal_tschchartinfo3dlightingpackage());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartinfo3drotation()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfo3drotation());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartinfo3dscale()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfo3dscale());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartinfo3dviewport()->::TSCH::Chart3DVectorArchive::MergeFrom(
          from._internal_tschchartinfo3dviewport());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartinfobackgroundfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartinfobackgroundfill());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartinfobackgroundstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartinfobackgroundstroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartinfobordershadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartinfobordershadow());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartinfoborderstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartinfoborderstroke());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartinfogridbackgroundfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartinfogridbackgroundfill());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartinfotitlecolor()->::TSP::Color::MergeFrom(
          from._internal_tschchartinfotitlecolor());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartinfo3dbarshape_ = from._impl_.tschchartinfo3dbarshape_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartinfo3dchartopacity_ = from._impl_.tschchartinfo3dchartopacity_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartinfo3dintersetdepthgap_ = from._impl_.tschchartinfo3dintersetdepthgap_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartinfoborderopacity_ = from._impl_.tschchartinfoborderopacity_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartinfo3dbeveledges_ = from._impl_.tschchartinfo3dbeveledges_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartinfocombinelayers_ = from._impl_.tschchartinfocombinelayers_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartinfodeprecatedroundedcornerouterendonly_ = from._impl_.tschchartinfodeprecatedroundedcornerouterendonly_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartinfodonutplacetitleatcenter_ = from._impl_.tschchartinfodonutplacetitleatcenter_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartinfocalloutlinetype_ = from._impl_.tschchartinfocalloutlinetype_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartinfodeprecatedroundedcornerradius_ = from._impl_.tschchartinfodeprecatedroundedcornerradius_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartinfodatasetnamelocation_ = from._impl_.tschchartinfodatasetnamelocation_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartinfodatasetnameparagraphstyleindex_ = from._impl_.tschchartinfodatasetnameparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartinfogridbackgroundopacity_ = from._impl_.tschchartinfogridbackgroundopacity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartinfoinnerradius_ = from._impl_.tschchartinfoinnerradius_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartinfointerbargap_ = from._impl_.tschchartinfointerbargap_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartinfointersetgap_ = from._impl_.tschchartinfointersetgap_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartinfomultidatacontroltype_ = from._impl_.tschchartinfomultidatacontroltype_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartinfopiestartangle_ = from._impl_.tschchartinfopiestartangle_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartinforadarstartangle_ = from._impl_.tschchartinforadarstartangle_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartinforadarradiusgridlinecurve_ = from._impl_.tschchartinforadarradiusgridlinecurve_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartinforoundedcornerouterendonly_ = from._impl_.tschchartinforoundedcornerouterendonly_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartinfoshowborder_ = from._impl_.tschchartinfoshowborder_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartinfoshowlegend_ = from._impl_.tschchartinfoshowlegend_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartinforoundedcornerradius_ = from._impl_.tschchartinforoundedcornerradius_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartinfoshowtitle_ = from._impl_.tschchartinfoshowtitle_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartinfoskiphiddendata_ = from._impl_.tschchartinfoskiphiddendata_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartinfotitleparagraphstyleindex_ = from._impl_.tschchartinfotitleparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartGenericPropertyMapArchive::CopyFrom(const ChartGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartGenericPropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartGenericPropertyMapArchive::IsInitialized() const {
  if (_internal_has_tschchartinfo3dlightingpackage()) {
    if (!_impl_.tschchartinfo3dlightingpackage_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfo3drotation()) {
    if (!_impl_.tschchartinfo3drotation_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfo3dscale()) {
    if (!_impl_.tschchartinfo3dscale_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfo3dviewport()) {
    if (!_impl_.tschchartinfo3dviewport_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobackgroundfill()) {
    if (!_impl_.tschchartinfobackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobackgroundstroke()) {
    if (!_impl_.tschchartinfobackgroundstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfobordershadow()) {
    if (!_impl_.tschchartinfobordershadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfoborderstroke()) {
    if (!_impl_.tschchartinfoborderstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfogridbackgroundfill()) {
    if (!_impl_.tschchartinfogridbackgroundfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartinfotitlecolor()) {
    if (!_impl_.tschchartinfotitlecolor_->IsInitialized()) return false;
  }
  return true;
}

void ChartGenericPropertyMapArchive::InternalSwap(ChartGenericPropertyMapArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartinfotitle_, lhs_arena,
      &other->_impl_.tschchartinfotitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartGenericPropertyMapArchive, _impl_.tschchartinfotitleparagraphstyleindex_)
      + sizeof(ChartGenericPropertyMapArchive::_impl_.tschchartinfotitleparagraphstyleindex_)
      - PROTOBUF_FIELD_OFFSET(ChartGenericPropertyMapArchive, _impl_.tschchartinfo3dlightingpackage_)>(
          reinterpret_cast<char*>(&_impl_.tschchartinfo3dlightingpackage_),
          reinterpret_cast<char*>(&other->_impl_.tschchartinfo3dlightingpackage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartGenericPropertyMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[10]);
}

// ===================================================================

class LegendGenericPropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<LegendGenericPropertyMapArchive>()._impl_._has_bits_);
  static const ::TSD::FillArchive& tschlegendmodelfill(const LegendGenericPropertyMapArchive* msg);
  static void set_has_tschlegendmodelfill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschlegendmodellabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschlegendmodelopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::ShadowArchive& tschlegendmodelshadow(const LegendGenericPropertyMapArchive* msg);
  static void set_has_tschlegendmodelshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& tschlegendmodelstroke(const LegendGenericPropertyMapArchive* msg);
  static void set_has_tschlegendmodelstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSD::FillArchive&
LegendGenericPropertyMapArchive::_Internal::tschlegendmodelfill(const LegendGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschlegendmodelfill_;
}
const ::TSD::ShadowArchive&
LegendGenericPropertyMapArchive::_Internal::tschlegendmodelshadow(const LegendGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschlegendmodelshadow_;
}
const ::TSD::StrokeArchive&
LegendGenericPropertyMapArchive::_Internal::tschlegendmodelstroke(const LegendGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschlegendmodelstroke_;
}
void LegendGenericPropertyMapArchive::clear_tschlegendmodelfill() {
  if (_impl_.tschlegendmodelfill_ != nullptr) _impl_.tschlegendmodelfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void LegendGenericPropertyMapArchive::clear_tschlegendmodelshadow() {
  if (_impl_.tschlegendmodelshadow_ != nullptr) _impl_.tschlegendmodelshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void LegendGenericPropertyMapArchive::clear_tschlegendmodelstroke() {
  if (_impl_.tschlegendmodelstroke_ != nullptr) _impl_.tschlegendmodelstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
LegendGenericPropertyMapArchive::LegendGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.LegendGenericPropertyMapArchive)
}
LegendGenericPropertyMapArchive::LegendGenericPropertyMapArchive(const LegendGenericPropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LegendGenericPropertyMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschlegendmodelfill_){nullptr}
    , decltype(_impl_.tschlegendmodelshadow_){nullptr}
    , decltype(_impl_.tschlegendmodelstroke_){nullptr}
    , decltype(_impl_.tschlegendmodellabelparagraphstyleindex_){}
    , decltype(_impl_.tschlegendmodelopacity_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tschlegendmodelfill()) {
    _this->_impl_.tschlegendmodelfill_ = new ::TSD::FillArchive(*from._impl_.tschlegendmodelfill_);
  }
  if (from._internal_has_tschlegendmodelshadow()) {
    _this->_impl_.tschlegendmodelshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschlegendmodelshadow_);
  }
  if (from._internal_has_tschlegendmodelstroke()) {
    _this->_impl_.tschlegendmodelstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschlegendmodelstroke_);
  }
  ::memcpy(&_impl_.tschlegendmodellabelparagraphstyleindex_, &from._impl_.tschlegendmodellabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschlegendmodelopacity_) -
    reinterpret_cast<char*>(&_impl_.tschlegendmodellabelparagraphstyleindex_)) + sizeof(_impl_.tschlegendmodelopacity_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.LegendGenericPropertyMapArchive)
}

inline void LegendGenericPropertyMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschlegendmodelfill_){nullptr}
    , decltype(_impl_.tschlegendmodelshadow_){nullptr}
    , decltype(_impl_.tschlegendmodelstroke_){nullptr}
    , decltype(_impl_.tschlegendmodellabelparagraphstyleindex_){0}
    , decltype(_impl_.tschlegendmodelopacity_){0}
  };
}

LegendGenericPropertyMapArchive::~LegendGenericPropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.LegendGenericPropertyMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LegendGenericPropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tschlegendmodelfill_;
  if (this != internal_default_instance()) delete _impl_.tschlegendmodelshadow_;
  if (this != internal_default_instance()) delete _impl_.tschlegendmodelstroke_;
}

void LegendGenericPropertyMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LegendGenericPropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.LegendGenericPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodelfill_ != nullptr);
      _impl_.tschlegendmodelfill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodelshadow_ != nullptr);
      _impl_.tschlegendmodelshadow_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschlegendmodelstroke_ != nullptr);
      _impl_.tschlegendmodelstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.tschlegendmodellabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschlegendmodelopacity_) -
        reinterpret_cast<char*>(&_impl_.tschlegendmodellabelparagraphstyleindex_)) + sizeof(_impl_.tschlegendmodelopacity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LegendGenericPropertyMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive tschlegendmodelfill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodelfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschlegendmodellabelparagraphstyleindex(&has_bits);
          _impl_.tschlegendmodellabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschlegendmodelopacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_tschlegendmodelopacity(&has_bits);
          _impl_.tschlegendmodelopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodelshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschlegendmodelstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LegendGenericPropertyMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.LegendGenericPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive tschlegendmodelfill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tschlegendmodelfill(this),
        _Internal::tschlegendmodelfill(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_tschlegendmodellabelparagraphstyleindex(), target);
  }

  // optional float tschlegendmodelopacity = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_tschlegendmodelopacity(), target);
  }

  // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschlegendmodelshadow(this),
        _Internal::tschlegendmodelshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschlegendmodelstroke(this),
        _Internal::tschlegendmodelstroke(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.LegendGenericPropertyMapArchive)
  return target;
}

size_t LegendGenericPropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.LegendGenericPropertyMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSD.FillArchive tschlegendmodelfill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodelfill_);
    }

    // optional .TSD.ShadowArchive tschlegendmodelshadow = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodelshadow_);
    }

    // optional .TSD.StrokeArchive tschlegendmodelstroke = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschlegendmodelstroke_);
    }

    // optional int32 tschlegendmodellabelparagraphstyleindex = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschlegendmodellabelparagraphstyleindex());
    }

    // optional float tschlegendmodelopacity = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LegendGenericPropertyMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LegendGenericPropertyMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LegendGenericPropertyMapArchive::GetClassData() const { return &_class_data_; }


void LegendGenericPropertyMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LegendGenericPropertyMapArchive*>(&to_msg);
  auto& from = static_cast<const LegendGenericPropertyMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.LegendGenericPropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_tschlegendmodelfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschlegendmodelfill());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschlegendmodelshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschlegendmodelshadow());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschlegendmodelstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschlegendmodelstroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschlegendmodellabelparagraphstyleindex_ = from._impl_.tschlegendmodellabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschlegendmodelopacity_ = from._impl_.tschlegendmodelopacity_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LegendGenericPropertyMapArchive::CopyFrom(const LegendGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.LegendGenericPropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LegendGenericPropertyMapArchive::IsInitialized() const {
  if (_internal_has_tschlegendmodelfill()) {
    if (!_impl_.tschlegendmodelfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodelshadow()) {
    if (!_impl_.tschlegendmodelshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschlegendmodelstroke()) {
    if (!_impl_.tschlegendmodelstroke_->IsInitialized()) return false;
  }
  return true;
}

void LegendGenericPropertyMapArchive::InternalSwap(LegendGenericPropertyMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LegendGenericPropertyMapArchive, _impl_.tschlegendmodelopacity_)
      + sizeof(LegendGenericPropertyMapArchive::_impl_.tschlegendmodelopacity_)
      - PROTOBUF_FIELD_OFFSET(LegendGenericPropertyMapArchive, _impl_.tschlegendmodelfill_)>(
          reinterpret_cast<char*>(&_impl_.tschlegendmodelfill_),
          reinterpret_cast<char*>(&other->_impl_.tschlegendmodelfill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LegendGenericPropertyMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[11]);
}

// ===================================================================

class ChartAxisGenericPropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartAxisGenericPropertyMapArchive>()._impl_._has_bits_);
  static const ::TSK::FormatStructArchive& tschchartaxis1_0dateformat(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxis1_0dateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxis1_0numberformat(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxis1_0numberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartaxis3dgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSD::StrokeArchive& tschchartaxis3dgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxis3dgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschchartaxis3dlabelposition(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdateformat(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisdateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisdurationformat(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisdurationformat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschchartaxishorizontalspacing(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tschchartaxislabelanglebaselinedirection(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartaxislabelexplosion(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartaxislabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartaxislabelsorientation(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartaxismajorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSD::ShadowArchive& tschchartaxismajorgridlineshadow(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxismajorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartaxismajorgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxismajorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartaxisminorgridlineopacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSD::ShadowArchive& tschchartaxisminorgridlineshadow(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisminorgridlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokeArchive& tschchartaxisminorgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisminorgridlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSK::FormatStructArchive& tschchartaxisnumberformat(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tschchartaxisnumberformattype(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartaxisnumberofdecades(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartaxisnumberofmajorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartaxisnumberofminorgridlines(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartaxisplottoedges(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_tschchartaxisscale(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartaxisshowaxis(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_tschchartaxisshowextensionlines(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartaxisshowgridlinetickmarks(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_tschchartaxisshowlabels(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartaxisshowlastlabel(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartaxisshowmajorgridlines(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartaxisshowmajortickmarks(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_tschchartaxisshowminimumlabel(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartaxisshowminorgridlines(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartaxisshowminortickmarks(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartaxisshowserieslabels(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_tschchartaxisshowtitle(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tschchartaxistickmarklocation(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_tschchartaxistitle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartaxistitleparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisusermax(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisusermax(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschchartaxisusermin(const ChartAxisGenericPropertyMapArchive* msg);
  static void set_has_tschchartaxisusermin(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tschchartaxisverticalspacing(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
};

const ::TSK::FormatStructArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxis1_0dateformat(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxis1_0dateformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxis1_0numberformat(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxis1_0numberformat_;
}
const ::TSD::StrokeArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxis3dgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxis3dgridlinestroke_;
}
const ::TSK::FormatStructArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisdateformat(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxisdateformat_;
}
const ::TSK::FormatStructArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisdurationformat(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxisdurationformat_;
}
const ::TSD::ShadowArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxismajorgridlineshadow(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxismajorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxismajorgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxismajorgridlinestroke_;
}
const ::TSD::ShadowArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisminorgridlineshadow(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxisminorgridlineshadow_;
}
const ::TSD::StrokeArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisminorgridlinestroke(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxisminorgridlinestroke_;
}
const ::TSK::FormatStructArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisnumberformat(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxisnumberformat_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisusermax(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxisusermax_;
}
const ::TSCH::ChartsNSNumberDoubleArchive&
ChartAxisGenericPropertyMapArchive::_Internal::tschchartaxisusermin(const ChartAxisGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartaxisusermin_;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis1_0dateformat() {
  if (_impl_.tschchartaxis1_0dateformat_ != nullptr) _impl_.tschchartaxis1_0dateformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis1_0numberformat() {
  if (_impl_.tschchartaxis1_0numberformat_ != nullptr) _impl_.tschchartaxis1_0numberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxis3dgridlinestroke() {
  if (_impl_.tschchartaxis3dgridlinestroke_ != nullptr) _impl_.tschchartaxis3dgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisdateformat() {
  if (_impl_.tschchartaxisdateformat_ != nullptr) _impl_.tschchartaxisdateformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisdurationformat() {
  if (_impl_.tschchartaxisdurationformat_ != nullptr) _impl_.tschchartaxisdurationformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxismajorgridlineshadow() {
  if (_impl_.tschchartaxismajorgridlineshadow_ != nullptr) _impl_.tschchartaxismajorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxismajorgridlinestroke() {
  if (_impl_.tschchartaxismajorgridlinestroke_ != nullptr) _impl_.tschchartaxismajorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisminorgridlineshadow() {
  if (_impl_.tschchartaxisminorgridlineshadow_ != nullptr) _impl_.tschchartaxisminorgridlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisminorgridlinestroke() {
  if (_impl_.tschchartaxisminorgridlinestroke_ != nullptr) _impl_.tschchartaxisminorgridlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisnumberformat() {
  if (_impl_.tschchartaxisnumberformat_ != nullptr) _impl_.tschchartaxisnumberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisusermax() {
  if (_impl_.tschchartaxisusermax_ != nullptr) _impl_.tschchartaxisusermax_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void ChartAxisGenericPropertyMapArchive::clear_tschchartaxisusermin() {
  if (_impl_.tschchartaxisusermin_ != nullptr) _impl_.tschchartaxisusermin_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
ChartAxisGenericPropertyMapArchive::ChartAxisGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
}
ChartAxisGenericPropertyMapArchive::ChartAxisGenericPropertyMapArchive(const ChartAxisGenericPropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartAxisGenericPropertyMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxistitle_){}
    , decltype(_impl_.tschchartaxis1_0dateformat_){nullptr}
    , decltype(_impl_.tschchartaxis1_0numberformat_){nullptr}
    , decltype(_impl_.tschchartaxis3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisdateformat_){nullptr}
    , decltype(_impl_.tschchartaxisdurationformat_){nullptr}
    , decltype(_impl_.tschchartaxismajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxismajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisnumberformat_){nullptr}
    , decltype(_impl_.tschchartaxisusermax_){nullptr}
    , decltype(_impl_.tschchartaxisusermin_){nullptr}
    , decltype(_impl_.tschchartaxis3dgridlineopacity_){}
    , decltype(_impl_.tschchartaxis3dlabelposition_){}
    , decltype(_impl_.tschchartaxishorizontalspacing_){}
    , decltype(_impl_.tschchartaxislabelanglebaselinedirection_){}
    , decltype(_impl_.tschchartaxislabelexplosion_){}
    , decltype(_impl_.tschchartaxislabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxislabelsorientation_){}
    , decltype(_impl_.tschchartaxismajorgridlineopacity_){}
    , decltype(_impl_.tschchartaxisminorgridlineopacity_){}
    , decltype(_impl_.tschchartaxisnumberformattype_){}
    , decltype(_impl_.tschchartaxisnumberofdecades_){}
    , decltype(_impl_.tschchartaxisnumberofmajorgridlines_){}
    , decltype(_impl_.tschchartaxisnumberofminorgridlines_){}
    , decltype(_impl_.tschchartaxisscale_){}
    , decltype(_impl_.tschchartaxisplottoedges_){}
    , decltype(_impl_.tschchartaxisshowaxis_){}
    , decltype(_impl_.tschchartaxisshowextensionlines_){}
    , decltype(_impl_.tschchartaxisshowgridlinetickmarks_){}
    , decltype(_impl_.tschchartaxisshowlabels_){}
    , decltype(_impl_.tschchartaxisshowlastlabel_){}
    , decltype(_impl_.tschchartaxisshowmajorgridlines_){}
    , decltype(_impl_.tschchartaxisshowmajortickmarks_){}
    , decltype(_impl_.tschchartaxisshowminimumlabel_){}
    , decltype(_impl_.tschchartaxisshowminorgridlines_){}
    , decltype(_impl_.tschchartaxisshowminortickmarks_){}
    , decltype(_impl_.tschchartaxisshowserieslabels_){}
    , decltype(_impl_.tschchartaxisshowtitle_){}
    , decltype(_impl_.tschchartaxistickmarklocation_){}
    , decltype(_impl_.tschchartaxistitleparagraphstyleindex_){}
    , decltype(_impl_.tschchartaxisverticalspacing_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartaxistitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxistitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartaxistitle()) {
    _this->_impl_.tschchartaxistitle_.Set(from._internal_tschchartaxistitle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tschchartaxis1_0dateformat()) {
    _this->_impl_.tschchartaxis1_0dateformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartaxis1_0dateformat_);
  }
  if (from._internal_has_tschchartaxis1_0numberformat()) {
    _this->_impl_.tschchartaxis1_0numberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartaxis1_0numberformat_);
  }
  if (from._internal_has_tschchartaxis3dgridlinestroke()) {
    _this->_impl_.tschchartaxis3dgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxis3dgridlinestroke_);
  }
  if (from._internal_has_tschchartaxisdateformat()) {
    _this->_impl_.tschchartaxisdateformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartaxisdateformat_);
  }
  if (from._internal_has_tschchartaxisdurationformat()) {
    _this->_impl_.tschchartaxisdurationformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartaxisdurationformat_);
  }
  if (from._internal_has_tschchartaxismajorgridlineshadow()) {
    _this->_impl_.tschchartaxismajorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxismajorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxismajorgridlinestroke()) {
    _this->_impl_.tschchartaxismajorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxismajorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxisminorgridlineshadow()) {
    _this->_impl_.tschchartaxisminorgridlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartaxisminorgridlineshadow_);
  }
  if (from._internal_has_tschchartaxisminorgridlinestroke()) {
    _this->_impl_.tschchartaxisminorgridlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartaxisminorgridlinestroke_);
  }
  if (from._internal_has_tschchartaxisnumberformat()) {
    _this->_impl_.tschchartaxisnumberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartaxisnumberformat_);
  }
  if (from._internal_has_tschchartaxisusermax()) {
    _this->_impl_.tschchartaxisusermax_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from._impl_.tschchartaxisusermax_);
  }
  if (from._internal_has_tschchartaxisusermin()) {
    _this->_impl_.tschchartaxisusermin_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from._impl_.tschchartaxisusermin_);
  }
  ::memcpy(&_impl_.tschchartaxis3dgridlineopacity_, &from._impl_.tschchartaxis3dgridlineopacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartaxisverticalspacing_) -
    reinterpret_cast<char*>(&_impl_.tschchartaxis3dgridlineopacity_)) + sizeof(_impl_.tschchartaxisverticalspacing_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
}

inline void ChartAxisGenericPropertyMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartaxistitle_){}
    , decltype(_impl_.tschchartaxis1_0dateformat_){nullptr}
    , decltype(_impl_.tschchartaxis1_0numberformat_){nullptr}
    , decltype(_impl_.tschchartaxis3dgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisdateformat_){nullptr}
    , decltype(_impl_.tschchartaxisdurationformat_){nullptr}
    , decltype(_impl_.tschchartaxismajorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxismajorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisminorgridlineshadow_){nullptr}
    , decltype(_impl_.tschchartaxisminorgridlinestroke_){nullptr}
    , decltype(_impl_.tschchartaxisnumberformat_){nullptr}
    , decltype(_impl_.tschchartaxisusermax_){nullptr}
    , decltype(_impl_.tschchartaxisusermin_){nullptr}
    , decltype(_impl_.tschchartaxis3dgridlineopacity_){0}
    , decltype(_impl_.tschchartaxis3dlabelposition_){0}
    , decltype(_impl_.tschchartaxishorizontalspacing_){0}
    , decltype(_impl_.tschchartaxislabelanglebaselinedirection_){0}
    , decltype(_impl_.tschchartaxislabelexplosion_){0}
    , decltype(_impl_.tschchartaxislabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxislabelsorientation_){0}
    , decltype(_impl_.tschchartaxismajorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisminorgridlineopacity_){0}
    , decltype(_impl_.tschchartaxisnumberformattype_){0}
    , decltype(_impl_.tschchartaxisnumberofdecades_){0}
    , decltype(_impl_.tschchartaxisnumberofmajorgridlines_){0}
    , decltype(_impl_.tschchartaxisnumberofminorgridlines_){0}
    , decltype(_impl_.tschchartaxisscale_){0}
    , decltype(_impl_.tschchartaxisplottoedges_){false}
    , decltype(_impl_.tschchartaxisshowaxis_){false}
    , decltype(_impl_.tschchartaxisshowextensionlines_){false}
    , decltype(_impl_.tschchartaxisshowgridlinetickmarks_){false}
    , decltype(_impl_.tschchartaxisshowlabels_){false}
    , decltype(_impl_.tschchartaxisshowlastlabel_){false}
    , decltype(_impl_.tschchartaxisshowmajorgridlines_){false}
    , decltype(_impl_.tschchartaxisshowmajortickmarks_){false}
    , decltype(_impl_.tschchartaxisshowminimumlabel_){false}
    , decltype(_impl_.tschchartaxisshowminorgridlines_){false}
    , decltype(_impl_.tschchartaxisshowminortickmarks_){false}
    , decltype(_impl_.tschchartaxisshowserieslabels_){false}
    , decltype(_impl_.tschchartaxisshowtitle_){false}
    , decltype(_impl_.tschchartaxistickmarklocation_){0}
    , decltype(_impl_.tschchartaxistitleparagraphstyleindex_){0}
    , decltype(_impl_.tschchartaxisverticalspacing_){0}
  };
  _impl_.tschchartaxistitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartaxistitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartAxisGenericPropertyMapArchive::~ChartAxisGenericPropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartAxisGenericPropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartaxistitle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tschchartaxis1_0dateformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxis1_0numberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxis3dgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdateformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisdurationformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxismajorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxismajorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisminorgridlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisminorgridlinestroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisnumberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisusermax_;
  if (this != internal_default_instance()) delete _impl_.tschchartaxisusermin_;
}

void ChartAxisGenericPropertyMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartAxisGenericPropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartaxistitle_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartaxis1_0dateformat_ != nullptr);
      _impl_.tschchartaxis1_0dateformat_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartaxis1_0numberformat_ != nullptr);
      _impl_.tschchartaxis1_0numberformat_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartaxis3dgridlinestroke_ != nullptr);
      _impl_.tschchartaxis3dgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdateformat_ != nullptr);
      _impl_.tschchartaxisdateformat_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisdurationformat_ != nullptr);
      _impl_.tschchartaxisdurationformat_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartaxismajorgridlineshadow_ != nullptr);
      _impl_.tschchartaxismajorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartaxismajorgridlinestroke_ != nullptr);
      _impl_.tschchartaxismajorgridlinestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisminorgridlineshadow_ != nullptr);
      _impl_.tschchartaxisminorgridlineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisminorgridlinestroke_ != nullptr);
      _impl_.tschchartaxisminorgridlinestroke_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisnumberformat_ != nullptr);
      _impl_.tschchartaxisnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisusermax_ != nullptr);
      _impl_.tschchartaxisusermax_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tschchartaxisusermin_ != nullptr);
      _impl_.tschchartaxisusermin_->Clear();
    }
  }
  if (cached_has_bits & 0x0000e000u) {
    ::memset(&_impl_.tschchartaxis3dgridlineopacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxishorizontalspacing_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxis3dgridlineopacity_)) + sizeof(_impl_.tschchartaxishorizontalspacing_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartaxislabelanglebaselinedirection_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisnumberofdecades_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxislabelanglebaselinedirection_)) + sizeof(_impl_.tschchartaxisnumberofdecades_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartaxisnumberofmajorgridlines_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisshowlabels_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisnumberofmajorgridlines_)) + sizeof(_impl_.tschchartaxisshowlabels_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartaxisshowlastlabel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisshowtitle_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxisshowlastlabel_)) + sizeof(_impl_.tschchartaxisshowtitle_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.tschchartaxistickmarklocation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartaxisverticalspacing_) -
        reinterpret_cast<char*>(&_impl_.tschchartaxistickmarklocation_)) + sizeof(_impl_.tschchartaxisverticalspacing_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartAxisGenericPropertyMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxis1_0dateformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxis1_0numberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxis3dgridlineopacity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_tschchartaxis3dgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxis3dgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxis3dgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxis3dlabelposition = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartaxis3dlabelposition(&_impl_._has_bits_);
          _impl_.tschchartaxis3dlabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdateformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisdurationformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxishorizontalspacing = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartaxishorizontalspacing(&_impl_._has_bits_);
          _impl_.tschchartaxishorizontalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxislabelanglebaselinedirection = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartaxislabelanglebaselinedirection(&_impl_._has_bits_);
          _impl_.tschchartaxislabelanglebaselinedirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxislabelexplosion = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_tschchartaxislabelexplosion(&_impl_._has_bits_);
          _impl_.tschchartaxislabelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxislabelparagraphstyleindex = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartaxislabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxislabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxislabelsorientation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_tschchartaxislabelsorientation(&_impl_._has_bits_);
          _impl_.tschchartaxislabelsorientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxismajorgridlineopacity = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_tschchartaxismajorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxismajorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxismajorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxismajorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartaxisminorgridlineopacity = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_tschchartaxisminorgridlineopacity(&_impl_._has_bits_);
          _impl_.tschchartaxisminorgridlineopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisminorgridlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisminorgridlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisnumberformattype = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartaxisnumberformattype(&_impl_._has_bits_);
          _impl_.tschchartaxisnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisnumberofdecades = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartaxisnumberofdecades(&_impl_._has_bits_);
          _impl_.tschchartaxisnumberofdecades_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisnumberofmajorgridlines = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartaxisnumberofmajorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxisnumberofmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisnumberofminorgridlines = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartaxisnumberofminorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxisnumberofminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisplottoedges = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartaxisplottoedges(&_impl_._has_bits_);
          _impl_.tschchartaxisplottoedges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisscale = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartaxisscale(&_impl_._has_bits_);
          _impl_.tschchartaxisscale_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowaxis = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartaxisshowaxis(&_impl_._has_bits_);
          _impl_.tschchartaxisshowaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowextensionlines = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartaxisshowextensionlines(&_impl_._has_bits_);
          _impl_.tschchartaxisshowextensionlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowgridlinetickmarks = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _Internal::set_has_tschchartaxisshowgridlinetickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxisshowgridlinetickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowlabels = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_tschchartaxisshowlabels(&_impl_._has_bits_);
          _impl_.tschchartaxisshowlabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowlastlabel = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartaxisshowlastlabel(&_impl_._has_bits_);
          _impl_.tschchartaxisshowlastlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowmajorgridlines = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartaxisshowmajorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxisshowmajorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowmajortickmarks = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _Internal::set_has_tschchartaxisshowmajortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxisshowmajortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowminimumlabel = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_tschchartaxisshowminimumlabel(&_impl_._has_bits_);
          _impl_.tschchartaxisshowminimumlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowminorgridlines = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartaxisshowminorgridlines(&_impl_._has_bits_);
          _impl_.tschchartaxisshowminorgridlines_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowminortickmarks = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartaxisshowminortickmarks(&_impl_._has_bits_);
          _impl_.tschchartaxisshowminortickmarks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowserieslabels = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartaxisshowserieslabels(&_impl_._has_bits_);
          _impl_.tschchartaxisshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartaxisshowtitle = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartaxisshowtitle(&_impl_._has_bits_);
          _impl_.tschchartaxisshowtitle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxistickmarklocation = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschchartaxistickmarklocation(&_impl_._has_bits_);
          _impl_.tschchartaxistickmarklocation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartaxistitle = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_tschchartaxistitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistitle");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxistitleparagraphstyleindex = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartaxistitleparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartaxistitleparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisusermax(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartaxisusermin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartaxisverticalspacing = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartaxisverticalspacing(&_impl_._has_bits_);
          _impl_.tschchartaxisverticalspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartAxisGenericPropertyMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tschchartaxis1_0dateformat(this),
        _Internal::tschchartaxis1_0dateformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tschchartaxis1_0numberformat(this),
        _Internal::tschchartaxis1_0numberformat(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartaxis3dgridlineopacity = 3;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_tschchartaxis3dgridlineopacity(), target);
  }

  // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschchartaxis3dgridlinestroke(this),
        _Internal::tschchartaxis3dgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartaxis3dlabelposition = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_tschchartaxis3dlabelposition(), target);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tschchartaxisdateformat(this),
        _Internal::tschchartaxisdateformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tschchartaxisdurationformat(this),
        _Internal::tschchartaxisdurationformat(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartaxishorizontalspacing = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_tschchartaxishorizontalspacing(), target);
  }

  // optional int32 tschchartaxislabelanglebaselinedirection = 9;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_tschchartaxislabelanglebaselinedirection(), target);
  }

  // optional float tschchartaxislabelexplosion = 10;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_tschchartaxislabelexplosion(), target);
  }

  // optional int32 tschchartaxislabelparagraphstyleindex = 11;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_tschchartaxislabelparagraphstyleindex(), target);
  }

  // optional float tschchartaxislabelsorientation = 12;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(12, this->_internal_tschchartaxislabelsorientation(), target);
  }

  // optional float tschchartaxismajorgridlineopacity = 13;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(13, this->_internal_tschchartaxismajorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tschchartaxismajorgridlineshadow(this),
        _Internal::tschchartaxismajorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::tschchartaxismajorgridlinestroke(this),
        _Internal::tschchartaxismajorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartaxisminorgridlineopacity = 16;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_tschchartaxisminorgridlineopacity(), target);
  }

  // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 17;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::tschchartaxisminorgridlineshadow(this),
        _Internal::tschchartaxisminorgridlineshadow(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 18;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::tschchartaxisminorgridlinestroke(this),
        _Internal::tschchartaxisminorgridlinestroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 19;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::tschchartaxisnumberformat(this),
        _Internal::tschchartaxisnumberformat(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartaxisnumberformattype = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_tschchartaxisnumberformattype(), target);
  }

  // optional int32 tschchartaxisnumberofdecades = 21;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_tschchartaxisnumberofdecades(), target);
  }

  // optional int32 tschchartaxisnumberofmajorgridlines = 22;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_tschchartaxisnumberofmajorgridlines(), target);
  }

  // optional int32 tschchartaxisnumberofminorgridlines = 23;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_tschchartaxisnumberofminorgridlines(), target);
  }

  // optional bool tschchartaxisplottoedges = 24;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(24, this->_internal_tschchartaxisplottoedges(), target);
  }

  // optional int32 tschchartaxisscale = 25;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartaxisscale(), target);
  }

  // optional bool tschchartaxisshowaxis = 26;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(26, this->_internal_tschchartaxisshowaxis(), target);
  }

  // optional bool tschchartaxisshowextensionlines = 27;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(27, this->_internal_tschchartaxisshowextensionlines(), target);
  }

  // optional bool tschchartaxisshowgridlinetickmarks = 28;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(28, this->_internal_tschchartaxisshowgridlinetickmarks(), target);
  }

  // optional bool tschchartaxisshowlabels = 29;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_tschchartaxisshowlabels(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartaxisshowlastlabel = 30;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(30, this->_internal_tschchartaxisshowlastlabel(), target);
  }

  // optional bool tschchartaxisshowmajorgridlines = 31;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(31, this->_internal_tschchartaxisshowmajorgridlines(), target);
  }

  // optional bool tschchartaxisshowmajortickmarks = 32;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(32, this->_internal_tschchartaxisshowmajortickmarks(), target);
  }

  // optional bool tschchartaxisshowminimumlabel = 33;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_tschchartaxisshowminimumlabel(), target);
  }

  // optional bool tschchartaxisshowminorgridlines = 34;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_tschchartaxisshowminorgridlines(), target);
  }

  // optional bool tschchartaxisshowminortickmarks = 35;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_tschchartaxisshowminortickmarks(), target);
  }

  // optional bool tschchartaxisshowserieslabels = 36;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_tschchartaxisshowserieslabels(), target);
  }

  // optional bool tschchartaxisshowtitle = 37;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_tschchartaxisshowtitle(), target);
  }

  // optional int32 tschchartaxistickmarklocation = 38;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(38, this->_internal_tschchartaxistickmarklocation(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tschchartaxistitle = 39;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartaxistitle().data(), static_cast<int>(this->_internal_tschchartaxistitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartAxisGenericPropertyMapArchive.tschchartaxistitle");
    target = stream->WriteStringMaybeAliased(
        39, this->_internal_tschchartaxistitle(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartaxistitleparagraphstyleindex = 40;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_tschchartaxistitleparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 41;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::tschchartaxisusermax(this),
        _Internal::tschchartaxisusermax(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 42;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::tschchartaxisusermin(this),
        _Internal::tschchartaxisusermin(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartaxisverticalspacing = 43;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(43, this->_internal_tschchartaxisverticalspacing(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  return target;
}

size_t ChartAxisGenericPropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartaxistitle = 39;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartaxistitle());
    }

    // optional .TSK.FormatStructArchive tschchartaxis1_0dateformat = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxis1_0dateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartaxis1_0numberformat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxis1_0numberformat_);
    }

    // optional .TSD.StrokeArchive tschchartaxis3dgridlinestroke = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxis3dgridlinestroke_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisdateformat = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisdurationformat = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisdurationformat_);
    }

    // optional .TSD.ShadowArchive tschchartaxismajorgridlineshadow = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxismajorgridlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartaxismajorgridlinestroke = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxismajorgridlinestroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.ShadowArchive tschchartaxisminorgridlineshadow = 17;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisminorgridlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartaxisminorgridlinestroke = 18;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisminorgridlinestroke_);
    }

    // optional .TSK.FormatStructArchive tschchartaxisnumberformat = 19;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisnumberformat_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermax = 41;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisusermax_);
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschchartaxisusermin = 42;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartaxisusermin_);
    }

    // optional float tschchartaxis3dgridlineopacity = 3;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartaxis3dlabelposition = 5;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxis3dlabelposition());
    }

    // optional int32 tschchartaxishorizontalspacing = 8;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxishorizontalspacing());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 tschchartaxislabelanglebaselinedirection = 9;
    if (cached_has_bits & 0x00010000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxislabelanglebaselinedirection());
    }

    // optional float tschchartaxislabelexplosion = 10;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartaxislabelparagraphstyleindex = 11;
    if (cached_has_bits & 0x00040000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartaxislabelparagraphstyleindex());
    }

    // optional float tschchartaxislabelsorientation = 12;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxismajorgridlineopacity = 13;
    if (cached_has_bits & 0x00100000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartaxisminorgridlineopacity = 16;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartaxisnumberformattype = 20;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisnumberformattype());
    }

    // optional int32 tschchartaxisnumberofdecades = 21;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisnumberofdecades());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional int32 tschchartaxisnumberofmajorgridlines = 22;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisnumberofmajorgridlines());
    }

    // optional int32 tschchartaxisnumberofminorgridlines = 23;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisnumberofminorgridlines());
    }

    // optional int32 tschchartaxisscale = 25;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisscale());
    }

    // optional bool tschchartaxisplottoedges = 24;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowaxis = 26;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowextensionlines = 27;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowgridlinetickmarks = 28;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowlabels = 29;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool tschchartaxisshowlastlabel = 30;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowmajorgridlines = 31;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowmajortickmarks = 32;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowminimumlabel = 33;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowminorgridlines = 34;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowminortickmarks = 35;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowserieslabels = 36;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartaxisshowtitle = 37;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional int32 tschchartaxistickmarklocation = 38;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxistickmarklocation());
    }

    // optional int32 tschchartaxistitleparagraphstyleindex = 40;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxistitleparagraphstyleindex());
    }

    // optional int32 tschchartaxisverticalspacing = 43;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartaxisverticalspacing());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartAxisGenericPropertyMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartAxisGenericPropertyMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartAxisGenericPropertyMapArchive::GetClassData() const { return &_class_data_; }


void ChartAxisGenericPropertyMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartAxisGenericPropertyMapArchive*>(&to_msg);
  auto& from = static_cast<const ChartAxisGenericPropertyMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartaxistitle(from._internal_tschchartaxistitle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartaxis1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartaxis1_0dateformat());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartaxis1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartaxis1_0numberformat());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartaxis3dgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxis3dgridlinestroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartaxisdateformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartaxisdateformat());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartaxisdurationformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartaxisdurationformat());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartaxismajorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxismajorgridlineshadow());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartaxismajorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxismajorgridlinestroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartaxisminorgridlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartaxisminorgridlineshadow());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartaxisminorgridlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartaxisminorgridlinestroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartaxisnumberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartaxisnumberformat());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartaxisusermax()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartaxisusermax());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tschchartaxisusermin()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartaxisusermin());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartaxis3dgridlineopacity_ = from._impl_.tschchartaxis3dgridlineopacity_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartaxis3dlabelposition_ = from._impl_.tschchartaxis3dlabelposition_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartaxishorizontalspacing_ = from._impl_.tschchartaxishorizontalspacing_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartaxislabelanglebaselinedirection_ = from._impl_.tschchartaxislabelanglebaselinedirection_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartaxislabelexplosion_ = from._impl_.tschchartaxislabelexplosion_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartaxislabelparagraphstyleindex_ = from._impl_.tschchartaxislabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartaxislabelsorientation_ = from._impl_.tschchartaxislabelsorientation_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartaxismajorgridlineopacity_ = from._impl_.tschchartaxismajorgridlineopacity_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartaxisminorgridlineopacity_ = from._impl_.tschchartaxisminorgridlineopacity_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartaxisnumberformattype_ = from._impl_.tschchartaxisnumberformattype_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartaxisnumberofdecades_ = from._impl_.tschchartaxisnumberofdecades_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartaxisnumberofmajorgridlines_ = from._impl_.tschchartaxisnumberofmajorgridlines_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartaxisnumberofminorgridlines_ = from._impl_.tschchartaxisnumberofminorgridlines_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartaxisscale_ = from._impl_.tschchartaxisscale_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartaxisplottoedges_ = from._impl_.tschchartaxisplottoedges_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartaxisshowaxis_ = from._impl_.tschchartaxisshowaxis_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartaxisshowextensionlines_ = from._impl_.tschchartaxisshowextensionlines_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartaxisshowgridlinetickmarks_ = from._impl_.tschchartaxisshowgridlinetickmarks_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartaxisshowlabels_ = from._impl_.tschchartaxisshowlabels_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartaxisshowlastlabel_ = from._impl_.tschchartaxisshowlastlabel_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartaxisshowmajorgridlines_ = from._impl_.tschchartaxisshowmajorgridlines_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartaxisshowmajortickmarks_ = from._impl_.tschchartaxisshowmajortickmarks_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartaxisshowminimumlabel_ = from._impl_.tschchartaxisshowminimumlabel_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartaxisshowminorgridlines_ = from._impl_.tschchartaxisshowminorgridlines_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartaxisshowminortickmarks_ = from._impl_.tschchartaxisshowminortickmarks_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartaxisshowserieslabels_ = from._impl_.tschchartaxisshowserieslabels_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartaxisshowtitle_ = from._impl_.tschchartaxisshowtitle_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartaxistickmarklocation_ = from._impl_.tschchartaxistickmarklocation_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartaxistitleparagraphstyleindex_ = from._impl_.tschchartaxistitleparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartaxisverticalspacing_ = from._impl_.tschchartaxisverticalspacing_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartAxisGenericPropertyMapArchive::CopyFrom(const ChartAxisGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartAxisGenericPropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartAxisGenericPropertyMapArchive::IsInitialized() const {
  if (_internal_has_tschchartaxis1_0dateformat()) {
    if (!_impl_.tschchartaxis1_0dateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxis1_0numberformat()) {
    if (!_impl_.tschchartaxis1_0numberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxis3dgridlinestroke()) {
    if (!_impl_.tschchartaxis3dgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdateformat()) {
    if (!_impl_.tschchartaxisdateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisdurationformat()) {
    if (!_impl_.tschchartaxisdurationformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxismajorgridlineshadow()) {
    if (!_impl_.tschchartaxismajorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxismajorgridlinestroke()) {
    if (!_impl_.tschchartaxismajorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisminorgridlineshadow()) {
    if (!_impl_.tschchartaxisminorgridlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisminorgridlinestroke()) {
    if (!_impl_.tschchartaxisminorgridlinestroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartaxisnumberformat()) {
    if (!_impl_.tschchartaxisnumberformat_->IsInitialized()) return false;
  }
  return true;
}

void ChartAxisGenericPropertyMapArchive::InternalSwap(ChartAxisGenericPropertyMapArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartaxistitle_, lhs_arena,
      &other->_impl_.tschchartaxistitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxisverticalspacing_)
      + sizeof(ChartAxisGenericPropertyMapArchive::_impl_.tschchartaxisverticalspacing_)
      - PROTOBUF_FIELD_OFFSET(ChartAxisGenericPropertyMapArchive, _impl_.tschchartaxis1_0dateformat_)>(
          reinterpret_cast<char*>(&_impl_.tschchartaxis1_0dateformat_),
          reinterpret_cast<char*>(&other->_impl_.tschchartaxis1_0dateformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartAxisGenericPropertyMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[12]);
}

// ===================================================================

class ChartSeriesGenericPropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ChartSeriesGenericPropertyMapArchive>()._impl_._has_bits_);
  static const ::TSK::FormatStructArchive& tschchartseries1_0dateformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseries1_0dateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::FormatStructArchive& tschchartseries1_0numberformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseries1_0numberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschchartseries2_3labelexplosion(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_tschchartseriesadjustmentscale(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSD::LineEndArchive& tschchartseriescalloutlineendlineend(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriescalloutlineendlineend(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSD::LineEndArchive& tschchartseriescalloutlinestartlineend(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriescalloutlinestartlineend(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::StrokeArchive& tschchartseriescalloutlinestrokestyle(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriescalloutlinestrokestyle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdateformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesdateformat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesdurationformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesdurationformat(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tschchartseriesenablecalloutline(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustomnegativedata(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarcustomnegativedata(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustomnegativedatascatterx(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarcustomnegativedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustompositivedata(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarcustompositivedata(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive& tschchartserieserrorbarcustompositivedatascatterx(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarcustompositivedatascatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tschchartserieserrorbarfixedvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_tschchartserieserrorbarfixedvaluescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSD::LineEndArchive& tschchartserieserrorbarlineend(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarlineend(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSD::LineEndArchive& tschchartserieserrorbarlineendscatterx(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarlineendscatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tschchartserieserrorbarpercentvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_tschchartserieserrorbarpercentvaluescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_tschchartserieserrorbarsetting(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_tschchartserieserrorbarsettingscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::TSD::ShadowArchive& tschchartserieserrorbarshadow(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_tschchartserieserrorbarspacing(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_tschchartserieserrorbarspacingscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_tschchartserieserrorbarstddevvalue(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_tschchartserieserrorbarstddevvaluescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::TSD::StrokeArchive& tschchartserieserrorbarstroke(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSD::StrokeArchive& tschchartserieserrorbarstrokescatterx(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartserieserrorbarstrokescatterx(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_tschchartserieserrorbartype(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_tschchartserieserrorbartypescatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::TSD::FillArchive& tschchartseriesfill(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesfill(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tschchartseriesfilluseseriesstrokealphamultiplier(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_tschchartseriesfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static void set_has_tschchartserieslabelexplosion(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_tschchartserieslabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static void set_has_tschchartserieslinetype(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriesnumberformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_tschchartseriesnumberformattype(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static void set_has_tschchartseriesopacity(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static void set_has_tschchartseriesoutsidelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::TSK::FormatStructArchive& tschchartseriespercentnumberformat(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriespercentnumberformat(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_tschchartseriesseriestype(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::TSD::ShadowArchive& tschchartseriesshadow(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_tschchartseriesshowerrorbar(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static void set_has_tschchartseriesshowerrorbarscatterx(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static void set_has_tschchartseriesshowlabelsinfront(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static void set_has_tschchartseriesshowline(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static void set_has_tschchartseriesshownegativedata(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static void set_has_tschchartseriesshowserieslabels(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static void set_has_tschchartseriesshowsymbol(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static void set_has_tschchartseriesshowtrendline(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static void set_has_tschchartseriesshowvaluelabels(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static void set_has_tschchartseriessizedimension(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static void set_has_tschchartseriesstacklabels(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::TSD::StrokeArchive& tschchartseriesstroke(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriesstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSD::FillArchive& tschchartseriessymbolfill(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriessymbolfill(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_tschchartseriessymbolfilluseseriesfill(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static void set_has_tschchartseriessymbolfilluseseriesstroke(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_tschchartseriessymbolsize(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::TSD::StrokeArchive& tschchartseriessymbolstroke(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriessymbolstroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_tschchartseriessymboltype(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static void set_has_tschchartseriestrendlineequationoffsetx(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static void set_has_tschchartseriestrendlineequationoffsety(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
  static void set_has_tschchartseriestrendlinelabelstring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschchartseriestrendlineorder(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static void set_has_tschchartseriestrendlineperiod(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_tschchartseriestrendlinersquaredoffsetx(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static void set_has_tschchartseriestrendlinersquaredoffsety(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static const ::TSD::ShadowArchive& tschchartseriestrendlineshadow(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriestrendlineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tschchartseriestrendlineshowequation(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_tschchartseriestrendlineshowlabel(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_tschchartseriestrendlineshowr2value(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static const ::TSD::StrokeArchive& tschchartseriestrendlinestroke(const ChartSeriesGenericPropertyMapArchive* msg);
  static void set_has_tschchartseriestrendlinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_tschchartseriestrendlinetype(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_tschchartseriestrendlineequationopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_tschchartseriestrendlineequationparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_tschchartseriestrendlinersquaredopacity(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_tschchartseriestrendlinersquaredparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_tschchartseriesvaluelabelposition(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_tschchartseriesvaluelabelspacing(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static void set_has_tschchartseriesvaluelabelsaxis(HasBits* has_bits) {
    (*has_bits)[2] |= 131072u;
  }
  static void set_has_tschchartserieswedgeexplosion(HasBits* has_bits) {
    (*has_bits)[2] |= 262144u;
  }
  static void set_has_tschchartseriesyaxisordinal(HasBits* has_bits) {
    (*has_bits)[2] |= 524288u;
  }
};

const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseries1_0dateformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseries1_0dateformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseries1_0numberformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseries1_0numberformat_;
}
const ::TSD::LineEndArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriescalloutlineendlineend(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriescalloutlineendlineend_;
}
const ::TSD::LineEndArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriescalloutlinestartlineend(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriescalloutlinestartlineend_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriescalloutlinestrokestyle(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriescalloutlinestrokestyle_;
}
const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesdateformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriesdateformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesdurationformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriesdurationformat_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarcustomnegativedata(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartserieserrorbarcustomnegativedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarcustomnegativedatascatterx(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartserieserrorbarcustomnegativedatascatterx_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarcustompositivedata(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartserieserrorbarcustompositivedata_;
}
const ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarcustompositivedatascatterx(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartserieserrorbarcustompositivedatascatterx_;
}
const ::TSD::LineEndArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarlineend(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartserieserrorbarlineend_;
}
const ::TSD::LineEndArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarlineendscatterx(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartserieserrorbarlineendscatterx_;
}
const ::TSD::ShadowArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarshadow(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartserieserrorbarshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarstroke(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartserieserrorbarstroke_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartserieserrorbarstrokescatterx(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartserieserrorbarstrokescatterx_;
}
const ::TSD::FillArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesfill(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriesfill_;
}
const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesnumberformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriesnumberformat_;
}
const ::TSK::FormatStructArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriespercentnumberformat(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriespercentnumberformat_;
}
const ::TSD::ShadowArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesshadow(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriesshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriesstroke(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriesstroke_;
}
const ::TSD::FillArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriessymbolfill(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriessymbolfill_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriessymbolstroke(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriessymbolstroke_;
}
const ::TSD::ShadowArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriestrendlineshadow(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriestrendlineshadow_;
}
const ::TSD::StrokeArchive&
ChartSeriesGenericPropertyMapArchive::_Internal::tschchartseriestrendlinestroke(const ChartSeriesGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschchartseriestrendlinestroke_;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseries1_0dateformat() {
  if (_impl_.tschchartseries1_0dateformat_ != nullptr) _impl_.tschchartseries1_0dateformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseries1_0numberformat() {
  if (_impl_.tschchartseries1_0numberformat_ != nullptr) _impl_.tschchartseries1_0numberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriescalloutlineendlineend() {
  if (_impl_.tschchartseriescalloutlineendlineend_ != nullptr) _impl_.tschchartseriescalloutlineendlineend_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriescalloutlinestartlineend() {
  if (_impl_.tschchartseriescalloutlinestartlineend_ != nullptr) _impl_.tschchartseriescalloutlinestartlineend_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriescalloutlinestrokestyle() {
  if (_impl_.tschchartseriescalloutlinestrokestyle_ != nullptr) _impl_.tschchartseriescalloutlinestrokestyle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesdateformat() {
  if (_impl_.tschchartseriesdateformat_ != nullptr) _impl_.tschchartseriesdateformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesdurationformat() {
  if (_impl_.tschchartseriesdurationformat_ != nullptr) _impl_.tschchartseriesdurationformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustomnegativedata() {
  if (_impl_.tschchartserieserrorbarcustomnegativedata_ != nullptr) _impl_.tschchartserieserrorbarcustomnegativedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustomnegativedatascatterx() {
  if (_impl_.tschchartserieserrorbarcustomnegativedatascatterx_ != nullptr) _impl_.tschchartserieserrorbarcustomnegativedatascatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustompositivedata() {
  if (_impl_.tschchartserieserrorbarcustompositivedata_ != nullptr) _impl_.tschchartserieserrorbarcustompositivedata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarcustompositivedatascatterx() {
  if (_impl_.tschchartserieserrorbarcustompositivedatascatterx_ != nullptr) _impl_.tschchartserieserrorbarcustompositivedatascatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarlineend() {
  if (_impl_.tschchartserieserrorbarlineend_ != nullptr) _impl_.tschchartserieserrorbarlineend_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarlineendscatterx() {
  if (_impl_.tschchartserieserrorbarlineendscatterx_ != nullptr) _impl_.tschchartserieserrorbarlineendscatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarshadow() {
  if (_impl_.tschchartserieserrorbarshadow_ != nullptr) _impl_.tschchartserieserrorbarshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarstroke() {
  if (_impl_.tschchartserieserrorbarstroke_ != nullptr) _impl_.tschchartserieserrorbarstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartserieserrorbarstrokescatterx() {
  if (_impl_.tschchartserieserrorbarstrokescatterx_ != nullptr) _impl_.tschchartserieserrorbarstrokescatterx_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesfill() {
  if (_impl_.tschchartseriesfill_ != nullptr) _impl_.tschchartseriesfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesnumberformat() {
  if (_impl_.tschchartseriesnumberformat_ != nullptr) _impl_.tschchartseriesnumberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriespercentnumberformat() {
  if (_impl_.tschchartseriespercentnumberformat_ != nullptr) _impl_.tschchartseriespercentnumberformat_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesshadow() {
  if (_impl_.tschchartseriesshadow_ != nullptr) _impl_.tschchartseriesshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriesstroke() {
  if (_impl_.tschchartseriesstroke_ != nullptr) _impl_.tschchartseriesstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolfill() {
  if (_impl_.tschchartseriessymbolfill_ != nullptr) _impl_.tschchartseriessymbolfill_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriessymbolstroke() {
  if (_impl_.tschchartseriessymbolstroke_ != nullptr) _impl_.tschchartseriessymbolstroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlineshadow() {
  if (_impl_.tschchartseriestrendlineshadow_ != nullptr) _impl_.tschchartseriestrendlineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
void ChartSeriesGenericPropertyMapArchive::clear_tschchartseriestrendlinestroke() {
  if (_impl_.tschchartseriestrendlinestroke_ != nullptr) _impl_.tschchartseriestrendlinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
ChartSeriesGenericPropertyMapArchive::ChartSeriesGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
}
ChartSeriesGenericPropertyMapArchive::ChartSeriesGenericPropertyMapArchive(const ChartSeriesGenericPropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChartSeriesGenericPropertyMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriestrendlinelabelstring_){}
    , decltype(_impl_.tschchartseries1_0dateformat_){nullptr}
    , decltype(_impl_.tschchartseries1_0numberformat_){nullptr}
    , decltype(_impl_.tschchartseriescalloutlineendlineend_){nullptr}
    , decltype(_impl_.tschchartseriescalloutlinestartlineend_){nullptr}
    , decltype(_impl_.tschchartseriescalloutlinestrokestyle_){nullptr}
    , decltype(_impl_.tschchartseriesdateformat_){nullptr}
    , decltype(_impl_.tschchartseriesdurationformat_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarcustomnegativedata_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarcustomnegativedatascatterx_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarcustompositivedata_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarcustompositivedatascatterx_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarlineend_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarlineendscatterx_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarshadow_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarstroke_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarstrokescatterx_){nullptr}
    , decltype(_impl_.tschchartseriesfill_){nullptr}
    , decltype(_impl_.tschchartseriesnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriespercentnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesshadow_){nullptr}
    , decltype(_impl_.tschchartseriesstroke_){nullptr}
    , decltype(_impl_.tschchartseriessymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriessymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriestrendlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriestrendlinestroke_){nullptr}
    , decltype(_impl_.tschchartseries2_3labelexplosion_){}
    , decltype(_impl_.tschchartseriesadjustmentscale_){}
    , decltype(_impl_.tschchartseriesenablecalloutline_){}
    , decltype(_impl_.tschchartserieserrorbarfixedvalue_){}
    , decltype(_impl_.tschchartserieserrorbarfixedvaluescatterx_){}
    , decltype(_impl_.tschchartserieserrorbarpercentvalue_){}
    , decltype(_impl_.tschchartserieserrorbarpercentvaluescatterx_){}
    , decltype(_impl_.tschchartserieserrorbarsetting_){}
    , decltype(_impl_.tschchartserieserrorbarsettingscatterx_){}
    , decltype(_impl_.tschchartserieserrorbarspacing_){}
    , decltype(_impl_.tschchartserieserrorbarspacingscatterx_){}
    , decltype(_impl_.tschchartserieserrorbarstddevvalue_){}
    , decltype(_impl_.tschchartserieserrorbarstddevvaluescatterx_){}
    , decltype(_impl_.tschchartserieserrorbartype_){}
    , decltype(_impl_.tschchartserieserrorbartypescatterx_){}
    , decltype(_impl_.tschchartseriesfilluseseriesstrokealphamultiplier_){}
    , decltype(_impl_.tschchartserieslabelexplosion_){}
    , decltype(_impl_.tschchartserieslabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartserieslinetype_){}
    , decltype(_impl_.tschchartseriesnumberformattype_){}
    , decltype(_impl_.tschchartseriesopacity_){}
    , decltype(_impl_.tschchartseriesoutsidelabelparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesseriestype_){}
    , decltype(_impl_.tschchartseriesfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriesshowerrorbar_){}
    , decltype(_impl_.tschchartseriesshowerrorbarscatterx_){}
    , decltype(_impl_.tschchartseriesshowlabelsinfront_){}
    , decltype(_impl_.tschchartseriesshowline_){}
    , decltype(_impl_.tschchartseriesshownegativedata_){}
    , decltype(_impl_.tschchartseriesshowserieslabels_){}
    , decltype(_impl_.tschchartseriesshowsymbol_){}
    , decltype(_impl_.tschchartseriessizedimension_){}
    , decltype(_impl_.tschchartseriesshowtrendline_){}
    , decltype(_impl_.tschchartseriesshowvaluelabels_){}
    , decltype(_impl_.tschchartseriesstacklabels_){}
    , decltype(_impl_.tschchartseriessymbolfilluseseriesfill_){}
    , decltype(_impl_.tschchartseriessymbolsize_){}
    , decltype(_impl_.tschchartseriessymboltype_){}
    , decltype(_impl_.tschchartseriestrendlineequationoffsetx_){}
    , decltype(_impl_.tschchartseriestrendlineequationoffsety_){}
    , decltype(_impl_.tschchartseriestrendlineorder_){}
    , decltype(_impl_.tschchartseriestrendlineperiod_){}
    , decltype(_impl_.tschchartseriestrendlinersquaredoffsetx_){}
    , decltype(_impl_.tschchartseriessymbolfilluseseriesstroke_){}
    , decltype(_impl_.tschchartseriestrendlineshowequation_){}
    , decltype(_impl_.tschchartseriestrendlineshowlabel_){}
    , decltype(_impl_.tschchartseriestrendlineshowr2value_){}
    , decltype(_impl_.tschchartseriestrendlinersquaredoffsety_){}
    , decltype(_impl_.tschchartseriestrendlinetype_){}
    , decltype(_impl_.tschchartseriestrendlineequationopacity_){}
    , decltype(_impl_.tschchartseriestrendlineequationparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriestrendlinersquaredopacity_){}
    , decltype(_impl_.tschchartseriestrendlinersquaredparagraphstyleindex_){}
    , decltype(_impl_.tschchartseriesvaluelabelposition_){}
    , decltype(_impl_.tschchartseriesvaluelabelspacing_){}
    , decltype(_impl_.tschchartseriesvaluelabelsaxis_){}
    , decltype(_impl_.tschchartserieswedgeexplosion_){}
    , decltype(_impl_.tschchartseriesyaxisordinal_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschchartseriestrendlinelabelstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartseriestrendlinelabelstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschchartseriestrendlinelabelstring()) {
    _this->_impl_.tschchartseriestrendlinelabelstring_.Set(from._internal_tschchartseriestrendlinelabelstring(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tschchartseries1_0dateformat()) {
    _this->_impl_.tschchartseries1_0dateformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseries1_0dateformat_);
  }
  if (from._internal_has_tschchartseries1_0numberformat()) {
    _this->_impl_.tschchartseries1_0numberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseries1_0numberformat_);
  }
  if (from._internal_has_tschchartseriescalloutlineendlineend()) {
    _this->_impl_.tschchartseriescalloutlineendlineend_ = new ::TSD::LineEndArchive(*from._impl_.tschchartseriescalloutlineendlineend_);
  }
  if (from._internal_has_tschchartseriescalloutlinestartlineend()) {
    _this->_impl_.tschchartseriescalloutlinestartlineend_ = new ::TSD::LineEndArchive(*from._impl_.tschchartseriescalloutlinestartlineend_);
  }
  if (from._internal_has_tschchartseriescalloutlinestrokestyle()) {
    _this->_impl_.tschchartseriescalloutlinestrokestyle_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriescalloutlinestrokestyle_);
  }
  if (from._internal_has_tschchartseriesdateformat()) {
    _this->_impl_.tschchartseriesdateformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriesdateformat_);
  }
  if (from._internal_has_tschchartseriesdurationformat()) {
    _this->_impl_.tschchartseriesdurationformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriesdurationformat_);
  }
  if (from._internal_has_tschchartserieserrorbarcustomnegativedata()) {
    _this->_impl_.tschchartserieserrorbarcustomnegativedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartserieserrorbarcustomnegativedata_);
  }
  if (from._internal_has_tschchartserieserrorbarcustomnegativedatascatterx()) {
    _this->_impl_.tschchartserieserrorbarcustomnegativedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartserieserrorbarcustomnegativedatascatterx_);
  }
  if (from._internal_has_tschchartserieserrorbarcustompositivedata()) {
    _this->_impl_.tschchartserieserrorbarcustompositivedata_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartserieserrorbarcustompositivedata_);
  }
  if (from._internal_has_tschchartserieserrorbarcustompositivedatascatterx()) {
    _this->_impl_.tschchartserieserrorbarcustompositivedatascatterx_ = new ::TSCH::ChartsNSArrayOfNSNumberDoubleArchive(*from._impl_.tschchartserieserrorbarcustompositivedatascatterx_);
  }
  if (from._internal_has_tschchartserieserrorbarlineend()) {
    _this->_impl_.tschchartserieserrorbarlineend_ = new ::TSD::LineEndArchive(*from._impl_.tschchartserieserrorbarlineend_);
  }
  if (from._internal_has_tschchartserieserrorbarlineendscatterx()) {
    _this->_impl_.tschchartserieserrorbarlineendscatterx_ = new ::TSD::LineEndArchive(*from._impl_.tschchartserieserrorbarlineendscatterx_);
  }
  if (from._internal_has_tschchartserieserrorbarshadow()) {
    _this->_impl_.tschchartserieserrorbarshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartserieserrorbarshadow_);
  }
  if (from._internal_has_tschchartserieserrorbarstroke()) {
    _this->_impl_.tschchartserieserrorbarstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartserieserrorbarstroke_);
  }
  if (from._internal_has_tschchartserieserrorbarstrokescatterx()) {
    _this->_impl_.tschchartserieserrorbarstrokescatterx_ = new ::TSD::StrokeArchive(*from._impl_.tschchartserieserrorbarstrokescatterx_);
  }
  if (from._internal_has_tschchartseriesfill()) {
    _this->_impl_.tschchartseriesfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriesfill_);
  }
  if (from._internal_has_tschchartseriesnumberformat()) {
    _this->_impl_.tschchartseriesnumberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriesnumberformat_);
  }
  if (from._internal_has_tschchartseriespercentnumberformat()) {
    _this->_impl_.tschchartseriespercentnumberformat_ = new ::TSK::FormatStructArchive(*from._impl_.tschchartseriespercentnumberformat_);
  }
  if (from._internal_has_tschchartseriesshadow()) {
    _this->_impl_.tschchartseriesshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriesshadow_);
  }
  if (from._internal_has_tschchartseriesstroke()) {
    _this->_impl_.tschchartseriesstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriesstroke_);
  }
  if (from._internal_has_tschchartseriessymbolfill()) {
    _this->_impl_.tschchartseriessymbolfill_ = new ::TSD::FillArchive(*from._impl_.tschchartseriessymbolfill_);
  }
  if (from._internal_has_tschchartseriessymbolstroke()) {
    _this->_impl_.tschchartseriessymbolstroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriessymbolstroke_);
  }
  if (from._internal_has_tschchartseriestrendlineshadow()) {
    _this->_impl_.tschchartseriestrendlineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschchartseriestrendlineshadow_);
  }
  if (from._internal_has_tschchartseriestrendlinestroke()) {
    _this->_impl_.tschchartseriestrendlinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschchartseriestrendlinestroke_);
  }
  ::memcpy(&_impl_.tschchartseries2_3labelexplosion_, &from._impl_.tschchartseries2_3labelexplosion_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschchartseriesyaxisordinal_) -
    reinterpret_cast<char*>(&_impl_.tschchartseries2_3labelexplosion_)) + sizeof(_impl_.tschchartseriesyaxisordinal_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
}

inline void ChartSeriesGenericPropertyMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschchartseriestrendlinelabelstring_){}
    , decltype(_impl_.tschchartseries1_0dateformat_){nullptr}
    , decltype(_impl_.tschchartseries1_0numberformat_){nullptr}
    , decltype(_impl_.tschchartseriescalloutlineendlineend_){nullptr}
    , decltype(_impl_.tschchartseriescalloutlinestartlineend_){nullptr}
    , decltype(_impl_.tschchartseriescalloutlinestrokestyle_){nullptr}
    , decltype(_impl_.tschchartseriesdateformat_){nullptr}
    , decltype(_impl_.tschchartseriesdurationformat_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarcustomnegativedata_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarcustomnegativedatascatterx_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarcustompositivedata_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarcustompositivedatascatterx_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarlineend_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarlineendscatterx_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarshadow_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarstroke_){nullptr}
    , decltype(_impl_.tschchartserieserrorbarstrokescatterx_){nullptr}
    , decltype(_impl_.tschchartseriesfill_){nullptr}
    , decltype(_impl_.tschchartseriesnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriespercentnumberformat_){nullptr}
    , decltype(_impl_.tschchartseriesshadow_){nullptr}
    , decltype(_impl_.tschchartseriesstroke_){nullptr}
    , decltype(_impl_.tschchartseriessymbolfill_){nullptr}
    , decltype(_impl_.tschchartseriessymbolstroke_){nullptr}
    , decltype(_impl_.tschchartseriestrendlineshadow_){nullptr}
    , decltype(_impl_.tschchartseriestrendlinestroke_){nullptr}
    , decltype(_impl_.tschchartseries2_3labelexplosion_){0}
    , decltype(_impl_.tschchartseriesadjustmentscale_){0}
    , decltype(_impl_.tschchartseriesenablecalloutline_){0}
    , decltype(_impl_.tschchartserieserrorbarfixedvalue_){0}
    , decltype(_impl_.tschchartserieserrorbarfixedvaluescatterx_){0}
    , decltype(_impl_.tschchartserieserrorbarpercentvalue_){0}
    , decltype(_impl_.tschchartserieserrorbarpercentvaluescatterx_){0}
    , decltype(_impl_.tschchartserieserrorbarsetting_){0}
    , decltype(_impl_.tschchartserieserrorbarsettingscatterx_){0}
    , decltype(_impl_.tschchartserieserrorbarspacing_){0}
    , decltype(_impl_.tschchartserieserrorbarspacingscatterx_){0}
    , decltype(_impl_.tschchartserieserrorbarstddevvalue_){0}
    , decltype(_impl_.tschchartserieserrorbarstddevvaluescatterx_){0}
    , decltype(_impl_.tschchartserieserrorbartype_){0}
    , decltype(_impl_.tschchartserieserrorbartypescatterx_){0}
    , decltype(_impl_.tschchartseriesfilluseseriesstrokealphamultiplier_){0}
    , decltype(_impl_.tschchartserieslabelexplosion_){0}
    , decltype(_impl_.tschchartserieslabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartserieslinetype_){0}
    , decltype(_impl_.tschchartseriesnumberformattype_){0}
    , decltype(_impl_.tschchartseriesopacity_){0}
    , decltype(_impl_.tschchartseriesoutsidelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesseriestype_){0}
    , decltype(_impl_.tschchartseriesfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriesshowerrorbar_){false}
    , decltype(_impl_.tschchartseriesshowerrorbarscatterx_){false}
    , decltype(_impl_.tschchartseriesshowlabelsinfront_){false}
    , decltype(_impl_.tschchartseriesshowline_){false}
    , decltype(_impl_.tschchartseriesshownegativedata_){false}
    , decltype(_impl_.tschchartseriesshowserieslabels_){false}
    , decltype(_impl_.tschchartseriesshowsymbol_){false}
    , decltype(_impl_.tschchartseriessizedimension_){0}
    , decltype(_impl_.tschchartseriesshowtrendline_){false}
    , decltype(_impl_.tschchartseriesshowvaluelabels_){false}
    , decltype(_impl_.tschchartseriesstacklabels_){false}
    , decltype(_impl_.tschchartseriessymbolfilluseseriesfill_){false}
    , decltype(_impl_.tschchartseriessymbolsize_){0}
    , decltype(_impl_.tschchartseriessymboltype_){0}
    , decltype(_impl_.tschchartseriestrendlineequationoffsetx_){0}
    , decltype(_impl_.tschchartseriestrendlineequationoffsety_){0}
    , decltype(_impl_.tschchartseriestrendlineorder_){0}
    , decltype(_impl_.tschchartseriestrendlineperiod_){0}
    , decltype(_impl_.tschchartseriestrendlinersquaredoffsetx_){0}
    , decltype(_impl_.tschchartseriessymbolfilluseseriesstroke_){false}
    , decltype(_impl_.tschchartseriestrendlineshowequation_){false}
    , decltype(_impl_.tschchartseriestrendlineshowlabel_){false}
    , decltype(_impl_.tschchartseriestrendlineshowr2value_){false}
    , decltype(_impl_.tschchartseriestrendlinersquaredoffsety_){0}
    , decltype(_impl_.tschchartseriestrendlinetype_){0}
    , decltype(_impl_.tschchartseriestrendlineequationopacity_){0}
    , decltype(_impl_.tschchartseriestrendlineequationparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriestrendlinersquaredopacity_){0}
    , decltype(_impl_.tschchartseriestrendlinersquaredparagraphstyleindex_){0}
    , decltype(_impl_.tschchartseriesvaluelabelposition_){0}
    , decltype(_impl_.tschchartseriesvaluelabelspacing_){0}
    , decltype(_impl_.tschchartseriesvaluelabelsaxis_){0}
    , decltype(_impl_.tschchartserieswedgeexplosion_){0}
    , decltype(_impl_.tschchartseriesyaxisordinal_){0}
  };
  _impl_.tschchartseriestrendlinelabelstring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschchartseriestrendlinelabelstring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChartSeriesGenericPropertyMapArchive::~ChartSeriesGenericPropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChartSeriesGenericPropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschchartseriestrendlinelabelstring_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tschchartseries1_0dateformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseries1_0numberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriescalloutlineendlineend_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriescalloutlinestartlineend_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriescalloutlinestrokestyle_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdateformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesdurationformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieserrorbarcustomnegativedata_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieserrorbarcustomnegativedatascatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieserrorbarcustompositivedata_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieserrorbarcustompositivedatascatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieserrorbarlineend_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieserrorbarlineendscatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieserrorbarshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieserrorbarstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartserieserrorbarstrokescatterx_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesnumberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriespercentnumberformat_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriesstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriessymbolfill_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriessymbolstroke_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriestrendlineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschchartseriestrendlinestroke_;
}

void ChartSeriesGenericPropertyMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChartSeriesGenericPropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschchartseriestrendlinelabelstring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschchartseries1_0dateformat_ != nullptr);
      _impl_.tschchartseries1_0dateformat_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschchartseries1_0numberformat_ != nullptr);
      _impl_.tschchartseries1_0numberformat_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschchartseriescalloutlineendlineend_ != nullptr);
      _impl_.tschchartseriescalloutlineendlineend_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.tschchartseriescalloutlinestartlineend_ != nullptr);
      _impl_.tschchartseriescalloutlinestartlineend_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.tschchartseriescalloutlinestrokestyle_ != nullptr);
      _impl_.tschchartseriescalloutlinestrokestyle_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdateformat_ != nullptr);
      _impl_.tschchartseriesdateformat_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesdurationformat_ != nullptr);
      _impl_.tschchartseriesdurationformat_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.tschchartserieserrorbarcustomnegativedata_ != nullptr);
      _impl_.tschchartserieserrorbarcustomnegativedata_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.tschchartserieserrorbarcustomnegativedatascatterx_ != nullptr);
      _impl_.tschchartserieserrorbarcustomnegativedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tschchartserieserrorbarcustompositivedata_ != nullptr);
      _impl_.tschchartserieserrorbarcustompositivedata_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.tschchartserieserrorbarcustompositivedatascatterx_ != nullptr);
      _impl_.tschchartserieserrorbarcustompositivedatascatterx_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tschchartserieserrorbarlineend_ != nullptr);
      _impl_.tschchartserieserrorbarlineend_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.tschchartserieserrorbarlineendscatterx_ != nullptr);
      _impl_.tschchartserieserrorbarlineendscatterx_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.tschchartserieserrorbarshadow_ != nullptr);
      _impl_.tschchartserieserrorbarshadow_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.tschchartserieserrorbarstroke_ != nullptr);
      _impl_.tschchartserieserrorbarstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.tschchartserieserrorbarstrokescatterx_ != nullptr);
      _impl_.tschchartserieserrorbarstrokescatterx_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesfill_ != nullptr);
      _impl_.tschchartseriesfill_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesnumberformat_ != nullptr);
      _impl_.tschchartseriesnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriespercentnumberformat_ != nullptr);
      _impl_.tschchartseriespercentnumberformat_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesshadow_ != nullptr);
      _impl_.tschchartseriesshadow_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriesstroke_ != nullptr);
      _impl_.tschchartseriesstroke_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriessymbolfill_ != nullptr);
      _impl_.tschchartseriessymbolfill_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriessymbolstroke_ != nullptr);
      _impl_.tschchartseriessymbolstroke_->Clear();
    }
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriestrendlineshadow_ != nullptr);
      _impl_.tschchartseriestrendlineshadow_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.tschchartseriestrendlinestroke_ != nullptr);
      _impl_.tschchartseriestrendlinestroke_->Clear();
    }
  }
  if (cached_has_bits & 0xfc000000u) {
    ::memset(&_impl_.tschchartseries2_3labelexplosion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartserieserrorbarpercentvalue_) -
        reinterpret_cast<char*>(&_impl_.tschchartseries2_3labelexplosion_)) + sizeof(_impl_.tschchartserieserrorbarpercentvalue_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartserieserrorbarpercentvaluescatterx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartserieserrorbartype_) -
        reinterpret_cast<char*>(&_impl_.tschchartserieserrorbarpercentvaluescatterx_)) + sizeof(_impl_.tschchartserieserrorbartype_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartserieserrorbartypescatterx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesoutsidelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschchartserieserrorbartypescatterx_)) + sizeof(_impl_.tschchartseriesoutsidelabelparagraphstyleindex_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.tschchartseriesseriestype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesshowserieslabels_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesseriestype_)) + sizeof(_impl_.tschchartseriesshowserieslabels_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.tschchartseriesshowsymbol_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriessymboltype_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesshowsymbol_)) + sizeof(_impl_.tschchartseriessymboltype_));
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.tschchartseriestrendlineequationoffsetx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriestrendlineshowlabel_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriestrendlineequationoffsetx_)) + sizeof(_impl_.tschchartseriestrendlineshowlabel_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.tschchartseriestrendlineshowr2value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesvaluelabelposition_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriestrendlineshowr2value_)) + sizeof(_impl_.tschchartseriesvaluelabelposition_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&_impl_.tschchartseriesvaluelabelspacing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschchartseriesyaxisordinal_) -
        reinterpret_cast<char*>(&_impl_.tschchartseriesvaluelabelspacing_)) + sizeof(_impl_.tschchartseriesyaxisordinal_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChartSeriesGenericPropertyMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries1_0dateformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseries1_0numberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseries2_3labelexplosion = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_tschchartseries2_3labelexplosion(&_impl_._has_bits_);
          _impl_.tschchartseries2_3labelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesadjustmentscale = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_tschchartseriesadjustmentscale(&_impl_._has_bits_);
          _impl_.tschchartseriesadjustmentscale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriescalloutlineendlineend = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescalloutlineendlineend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartseriescalloutlinestartlineend = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescalloutlinestartlineend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriescalloutlinestrokestyle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriescalloutlinestrokestyle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdateformat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdateformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesdurationformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesenablecalloutline = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschchartseriesenablecalloutline(&_impl_._has_bits_);
          _impl_.tschchartseriesenablecalloutline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarcustomnegativedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarcustomnegativedatascatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarcustompositivedata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarcustompositivedatascatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarfixedvalue = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_tschchartserieserrorbarfixedvalue(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbarfixedvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarfixedvaluescatterx = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_tschchartserieserrorbarfixedvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbarfixedvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarlineend(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarlineendscatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarpercentvalue = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_tschchartserieserrorbarpercentvalue(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbarpercentvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarpercentvaluescatterx = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_tschchartserieserrorbarpercentvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbarpercentvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbarsetting = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartserieserrorbarsetting(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbarsetting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbarsettingscatterx = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartserieserrorbarsettingscatterx(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbarsettingscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbarspacing = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_tschchartserieserrorbarspacing(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbarspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbarspacingscatterx = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _Internal::set_has_tschchartserieserrorbarspacingscatterx(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbarspacingscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarstddevvalue = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _Internal::set_has_tschchartserieserrorbarstddevvalue(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbarstddevvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartserieserrorbarstddevvaluescatterx = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 221)) {
          _Internal::set_has_tschchartserieserrorbarstddevvaluescatterx(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbarstddevvaluescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartserieserrorbarstrokescatterx(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbartype = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartserieserrorbartype(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbartype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieserrorbartypescatterx = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _Internal::set_has_tschchartserieserrorbartypescatterx(&_impl_._has_bits_);
          _impl_.tschchartserieserrorbartypescatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriesfill = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesfilluseseriesstrokealphamultiplier = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_tschchartseriesfilluseseriesstrokealphamultiplier(&_impl_._has_bits_);
          _impl_.tschchartseriesfilluseseriesstrokealphamultiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesfilluseseriesstroke = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartseriesfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriesfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartserieslabelexplosion = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_tschchartserieslabelexplosion(&_impl_._has_bits_);
          _impl_.tschchartserieslabelexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslabelparagraphstyleindex = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_tschchartserieslabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartserieslabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartserieslinetype = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschchartserieslinetype(&_impl_._has_bits_);
          _impl_.tschchartserieslinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesnumberformattype = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartseriesnumberformattype(&_impl_._has_bits_);
          _impl_.tschchartseriesnumberformattype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriesopacity = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_tschchartseriesopacity(&_impl_._has_bits_);
          _impl_.tschchartseriesopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartseriesoutsidelabelparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriesoutsidelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriespercentnumberformat(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesseriestype = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartseriesseriestype(&_impl_._has_bits_);
          _impl_.tschchartseriesseriestype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriesshadow = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowerrorbar = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartseriesshowerrorbar(&_impl_._has_bits_);
          _impl_.tschchartseriesshowerrorbar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowerrorbarscatterx = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_tschchartseriesshowerrorbarscatterx(&_impl_._has_bits_);
          _impl_.tschchartseriesshowerrorbarscatterx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowlabelsinfront = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartseriesshowlabelsinfront(&_impl_._has_bits_);
          _impl_.tschchartseriesshowlabelsinfront_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowline = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartseriesshowline(&_impl_._has_bits_);
          _impl_.tschchartseriesshowline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesshownegativedata = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartseriesshownegativedata(&_impl_._has_bits_);
          _impl_.tschchartseriesshownegativedata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowserieslabels = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartseriesshowserieslabels(&_impl_._has_bits_);
          _impl_.tschchartseriesshowserieslabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowsymbol = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_tschchartseriesshowsymbol(&_impl_._has_bits_);
          _impl_.tschchartseriesshowsymbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowtrendline = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartseriesshowtrendline(&_impl_._has_bits_);
          _impl_.tschchartseriesshowtrendline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesshowvaluelabels = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_tschchartseriesshowvaluelabels(&_impl_._has_bits_);
          _impl_.tschchartseriesshowvaluelabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriessizedimension = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_tschchartseriessizedimension(&_impl_._has_bits_);
          _impl_.tschchartseriessizedimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriesstacklabels = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_tschchartseriesstacklabels(&_impl_._has_bits_);
          _impl_.tschchartseriesstacklabels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriesstroke = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriesstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive tschchartseriessymbolfill = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriessymbolfill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriessymbolfilluseseriesfill = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _Internal::set_has_tschchartseriessymbolfilluseseriesfill(&_impl_._has_bits_);
          _impl_.tschchartseriessymbolfilluseseriesfill_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriessymbolfilluseseriesstroke = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _Internal::set_has_tschchartseriessymbolfilluseseriesstroke(&_impl_._has_bits_);
          _impl_.tschchartseriessymbolfilluseseriesstroke_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriessymbolsize = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _Internal::set_has_tschchartseriessymbolsize(&_impl_._has_bits_);
          _impl_.tschchartseriessymbolsize_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriessymbolstroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriessymboltype = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _Internal::set_has_tschchartseriessymboltype(&_impl_._has_bits_);
          _impl_.tschchartseriessymboltype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlineequationoffsetx = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 253)) {
          _Internal::set_has_tschchartseriestrendlineequationoffsetx(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlineequationoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlineequationoffsety = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 5)) {
          _Internal::set_has_tschchartseriestrendlineequationoffsety(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlineequationoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional string tschchartseriestrendlinelabelstring = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tschchartseriestrendlinelabelstring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinelabelstring");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriestrendlineorder = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tschchartseriestrendlineorder(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlineorder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriestrendlineperiod = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschchartseriestrendlineperiod(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlineperiod_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlinersquaredoffsetx = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_tschchartseriestrendlinersquaredoffsetx(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlinersquaredoffsetx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlinersquaredoffsety = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_tschchartseriestrendlinersquaredoffsety(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlinersquaredoffsety_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriestrendlineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriestrendlineshowequation = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschchartseriestrendlineshowequation(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlineshowequation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriestrendlineshowlabel = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_tschchartseriestrendlineshowlabel(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlineshowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschchartseriestrendlineshowr2value = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschchartseriestrendlineshowr2value(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlineshowr2value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschchartseriestrendlinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriestrendlinetype = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_tschchartseriestrendlinetype(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlineequationopacity = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_tschchartseriestrendlineequationopacity(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlineequationopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_tschchartseriestrendlineequationparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlineequationparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartseriestrendlinersquaredopacity = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_tschchartseriestrendlinersquaredopacity(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlinersquaredopacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_tschchartseriestrendlinersquaredparagraphstyleindex(&_impl_._has_bits_);
          _impl_.tschchartseriestrendlinersquaredparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesvaluelabelposition = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_tschchartseriesvaluelabelposition(&_impl_._has_bits_);
          _impl_.tschchartseriesvaluelabelposition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesvaluelabelspacing = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_tschchartseriesvaluelabelspacing(&_impl_._has_bits_);
          _impl_.tschchartseriesvaluelabelspacing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesvaluelabelsaxis = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_tschchartseriesvaluelabelsaxis(&_impl_._has_bits_);
          _impl_.tschchartseriesvaluelabelsaxis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float tschchartserieswedgeexplosion = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_tschchartserieswedgeexplosion(&_impl_._has_bits_);
          _impl_.tschchartserieswedgeexplosion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschchartseriesyaxisordinal = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_tschchartseriesyaxisordinal(&_impl_._has_bits_);
          _impl_.tschchartseriesyaxisordinal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChartSeriesGenericPropertyMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tschchartseries1_0dateformat(this),
        _Internal::tschchartseries1_0dateformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tschchartseries1_0numberformat(this),
        _Internal::tschchartseries1_0numberformat(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartseries2_3labelexplosion = 3;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_tschchartseries2_3labelexplosion(), target);
  }

  // optional float tschchartseriesadjustmentscale = 4;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_tschchartseriesadjustmentscale(), target);
  }

  // optional .TSD.LineEndArchive tschchartseriescalloutlineendlineend = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tschchartseriescalloutlineendlineend(this),
        _Internal::tschchartseriescalloutlineendlineend(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartseriescalloutlinestartlineend = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::tschchartseriescalloutlinestartlineend(this),
        _Internal::tschchartseriescalloutlinestartlineend(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartseriescalloutlinestrokestyle = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tschchartseriescalloutlinestrokestyle(this),
        _Internal::tschchartseriescalloutlinestrokestyle(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdateformat = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tschchartseriesdateformat(this),
        _Internal::tschchartseriesdateformat(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::tschchartseriesdurationformat(this),
        _Internal::tschchartseriesdurationformat(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschchartseriesenablecalloutline = 10;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_tschchartseriesenablecalloutline(), target);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::tschchartserieserrorbarcustomnegativedata(this),
        _Internal::tschchartserieserrorbarcustomnegativedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::tschchartserieserrorbarcustomnegativedatascatterx(this),
        _Internal::tschchartserieserrorbarcustomnegativedatascatterx(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::tschchartserieserrorbarcustompositivedata(this),
        _Internal::tschchartserieserrorbarcustompositivedata(this).GetCachedSize(), target, stream);
  }

  // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::tschchartserieserrorbarcustompositivedatascatterx(this),
        _Internal::tschchartserieserrorbarcustompositivedatascatterx(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartserieserrorbarfixedvalue = 15;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(15, this->_internal_tschchartserieserrorbarfixedvalue(), target);
  }

  // optional float tschchartserieserrorbarfixedvaluescatterx = 16;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_tschchartserieserrorbarfixedvaluescatterx(), target);
  }

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::tschchartserieserrorbarlineend(this),
        _Internal::tschchartserieserrorbarlineend(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::tschchartserieserrorbarlineendscatterx(this),
        _Internal::tschchartserieserrorbarlineendscatterx(this).GetCachedSize(), target, stream);
  }

  // optional float tschchartserieserrorbarpercentvalue = 19;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(19, this->_internal_tschchartserieserrorbarpercentvalue(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float tschchartserieserrorbarpercentvaluescatterx = 20;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(20, this->_internal_tschchartserieserrorbarpercentvaluescatterx(), target);
  }

  // optional int32 tschchartserieserrorbarsetting = 21;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_tschchartserieserrorbarsetting(), target);
  }

  // optional int32 tschchartserieserrorbarsettingscatterx = 22;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_tschchartserieserrorbarsettingscatterx(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 23;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::tschchartserieserrorbarshadow(this),
        _Internal::tschchartserieserrorbarshadow(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartserieserrorbarspacing = 24;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_tschchartserieserrorbarspacing(), target);
  }

  // optional int32 tschchartserieserrorbarspacingscatterx = 25;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_tschchartserieserrorbarspacingscatterx(), target);
  }

  // optional float tschchartserieserrorbarstddevvalue = 26;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(26, this->_internal_tschchartserieserrorbarstddevvalue(), target);
  }

  // optional float tschchartserieserrorbarstddevvaluescatterx = 27;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(27, this->_internal_tschchartserieserrorbarstddevvaluescatterx(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 28;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::tschchartserieserrorbarstroke(this),
        _Internal::tschchartserieserrorbarstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 29;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::tschchartserieserrorbarstrokescatterx(this),
        _Internal::tschchartserieserrorbarstrokescatterx(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartserieserrorbartype = 30;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_tschchartserieserrorbartype(), target);
  }

  // optional int32 tschchartserieserrorbartypescatterx = 31;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_tschchartserieserrorbartypescatterx(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive tschchartseriesfill = 32;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::tschchartseriesfill(this),
        _Internal::tschchartseriesfill(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float tschchartseriesfilluseseriesstrokealphamultiplier = 33;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(33, this->_internal_tschchartseriesfilluseseriesstrokealphamultiplier(), target);
  }

  // optional bool tschchartseriesfilluseseriesstroke = 34;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_tschchartseriesfilluseseriesstroke(), target);
  }

  // optional float tschchartserieslabelexplosion = 35;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(35, this->_internal_tschchartserieslabelexplosion(), target);
  }

  // optional int32 tschchartserieslabelparagraphstyleindex = 36;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_tschchartserieslabelparagraphstyleindex(), target);
  }

  // optional int32 tschchartserieslinetype = 37;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(37, this->_internal_tschchartserieslinetype(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 38;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::tschchartseriesnumberformat(this),
        _Internal::tschchartseriesnumberformat(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartseriesnumberformattype = 39;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(39, this->_internal_tschchartseriesnumberformattype(), target);
  }

  // optional float tschchartseriesopacity = 40;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(40, this->_internal_tschchartseriesopacity(), target);
  }

  // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 41;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(41, this->_internal_tschchartseriesoutsidelabelparagraphstyleindex(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 42;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::tschchartseriespercentnumberformat(this),
        _Internal::tschchartseriespercentnumberformat(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartseriesseriestype = 43;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(43, this->_internal_tschchartseriesseriestype(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.ShadowArchive tschchartseriesshadow = 44;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::tschchartseriesshadow(this),
        _Internal::tschchartseriesshadow(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartseriesshowerrorbar = 45;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(45, this->_internal_tschchartseriesshowerrorbar(), target);
  }

  // optional bool tschchartseriesshowerrorbarscatterx = 46;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(46, this->_internal_tschchartseriesshowerrorbarscatterx(), target);
  }

  // optional bool tschchartseriesshowlabelsinfront = 47;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(47, this->_internal_tschchartseriesshowlabelsinfront(), target);
  }

  // optional bool tschchartseriesshowline = 48;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(48, this->_internal_tschchartseriesshowline(), target);
  }

  // optional bool tschchartseriesshownegativedata = 49;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(49, this->_internal_tschchartseriesshownegativedata(), target);
  }

  // optional bool tschchartseriesshowserieslabels = 50;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(50, this->_internal_tschchartseriesshowserieslabels(), target);
  }

  // optional bool tschchartseriesshowsymbol = 51;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(51, this->_internal_tschchartseriesshowsymbol(), target);
  }

  // optional bool tschchartseriesshowtrendline = 52;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(52, this->_internal_tschchartseriesshowtrendline(), target);
  }

  // optional bool tschchartseriesshowvaluelabels = 53;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(53, this->_internal_tschchartseriesshowvaluelabels(), target);
  }

  // optional int32 tschchartseriessizedimension = 54;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(54, this->_internal_tschchartseriessizedimension(), target);
  }

  // optional bool tschchartseriesstacklabels = 55;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(55, this->_internal_tschchartseriesstacklabels(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive tschchartseriesstroke = 56;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::tschchartseriesstroke(this),
        _Internal::tschchartseriesstroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.FillArchive tschchartseriessymbolfill = 57;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::tschchartseriessymbolfill(this),
        _Internal::tschchartseriessymbolfill(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool tschchartseriessymbolfilluseseriesfill = 58;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(58, this->_internal_tschchartseriessymbolfilluseseriesfill(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool tschchartseriessymbolfilluseseriesstroke = 59;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(59, this->_internal_tschchartseriessymbolfilluseseriesstroke(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional float tschchartseriessymbolsize = 60;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(60, this->_internal_tschchartseriessymbolsize(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 61;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::tschchartseriessymbolstroke(this),
        _Internal::tschchartseriessymbolstroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 tschchartseriessymboltype = 62;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(62, this->_internal_tschchartseriessymboltype(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional float tschchartseriestrendlineequationoffsetx = 63;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(63, this->_internal_tschchartseriestrendlineequationoffsetx(), target);
  }

  // optional float tschchartseriestrendlineequationoffsety = 64;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(64, this->_internal_tschchartseriestrendlineequationoffsety(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string tschchartseriestrendlinelabelstring = 65;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschchartseriestrendlinelabelstring().data(), static_cast<int>(this->_internal_tschchartseriestrendlinelabelstring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ChartSeriesGenericPropertyMapArchive.tschchartseriestrendlinelabelstring");
    target = stream->WriteStringMaybeAliased(
        65, this->_internal_tschchartseriestrendlinelabelstring(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriestrendlineorder = 66;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(66, this->_internal_tschchartseriestrendlineorder(), target);
  }

  // optional int32 tschchartseriestrendlineperiod = 67;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(67, this->_internal_tschchartseriestrendlineperiod(), target);
  }

  // optional float tschchartseriestrendlinersquaredoffsetx = 68;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(68, this->_internal_tschchartseriestrendlinersquaredoffsetx(), target);
  }

  // optional float tschchartseriestrendlinersquaredoffsety = 69;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(69, this->_internal_tschchartseriestrendlinersquaredoffsety(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 70;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, _Internal::tschchartseriestrendlineshadow(this),
        _Internal::tschchartseriestrendlineshadow(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool tschchartseriestrendlineshowequation = 71;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(71, this->_internal_tschchartseriestrendlineshowequation(), target);
  }

  // optional bool tschchartseriestrendlineshowlabel = 72;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(72, this->_internal_tschchartseriestrendlineshowlabel(), target);
  }

  // optional bool tschchartseriestrendlineshowr2value = 73;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(73, this->_internal_tschchartseriestrendlineshowr2value(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 74;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(74, _Internal::tschchartseriestrendlinestroke(this),
        _Internal::tschchartseriestrendlinestroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional int32 tschchartseriestrendlinetype = 75;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(75, this->_internal_tschchartseriestrendlinetype(), target);
  }

  // optional float tschchartseriestrendlineequationopacity = 76;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(76, this->_internal_tschchartseriestrendlineequationopacity(), target);
  }

  // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 77;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(77, this->_internal_tschchartseriestrendlineequationparagraphstyleindex(), target);
  }

  // optional float tschchartseriestrendlinersquaredopacity = 78;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(78, this->_internal_tschchartseriestrendlinersquaredopacity(), target);
  }

  // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 79;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(79, this->_internal_tschchartseriestrendlinersquaredparagraphstyleindex(), target);
  }

  // optional int32 tschchartseriesvaluelabelposition = 80;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(80, this->_internal_tschchartseriesvaluelabelposition(), target);
  }

  // optional int32 tschchartseriesvaluelabelspacing = 81;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(81, this->_internal_tschchartseriesvaluelabelspacing(), target);
  }

  // optional int32 tschchartseriesvaluelabelsaxis = 82;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(82, this->_internal_tschchartseriesvaluelabelsaxis(), target);
  }

  // optional float tschchartserieswedgeexplosion = 83;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(83, this->_internal_tschchartserieswedgeexplosion(), target);
  }

  // optional int32 tschchartseriesyaxisordinal = 84;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(84, this->_internal_tschchartseriesyaxisordinal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  return target;
}

size_t ChartSeriesGenericPropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschchartseriestrendlinelabelstring = 65;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschchartseriestrendlinelabelstring());
    }

    // optional .TSK.FormatStructArchive tschchartseries1_0dateformat = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries1_0dateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseries1_0numberformat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseries1_0numberformat_);
    }

    // optional .TSD.LineEndArchive tschchartseriescalloutlineendlineend = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriescalloutlineendlineend_);
    }

    // optional .TSD.LineEndArchive tschchartseriescalloutlinestartlineend = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriescalloutlinestartlineend_);
    }

    // optional .TSD.StrokeArchive tschchartseriescalloutlinestrokestyle = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriescalloutlinestrokestyle_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdateformat = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdateformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesdurationformat = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesdurationformat_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedata = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieserrorbarcustomnegativedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustomnegativedatascatterx = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieserrorbarcustomnegativedatascatterx_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedata = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieserrorbarcustompositivedata_);
    }

    // optional .TSCH.ChartsNSArrayOfNSNumberDoubleArchive tschchartserieserrorbarcustompositivedatascatterx = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieserrorbarcustompositivedatascatterx_);
    }

    // optional .TSD.LineEndArchive tschchartserieserrorbarlineend = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieserrorbarlineend_);
    }

    // optional .TSD.LineEndArchive tschchartserieserrorbarlineendscatterx = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieserrorbarlineendscatterx_);
    }

    // optional .TSD.ShadowArchive tschchartserieserrorbarshadow = 23;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieserrorbarshadow_);
    }

    // optional .TSD.StrokeArchive tschchartserieserrorbarstroke = 28;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieserrorbarstroke_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.StrokeArchive tschchartserieserrorbarstrokescatterx = 29;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartserieserrorbarstrokescatterx_);
    }

    // optional .TSD.FillArchive tschchartseriesfill = 32;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesfill_);
    }

    // optional .TSK.FormatStructArchive tschchartseriesnumberformat = 38;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesnumberformat_);
    }

    // optional .TSK.FormatStructArchive tschchartseriespercentnumberformat = 42;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriespercentnumberformat_);
    }

    // optional .TSD.ShadowArchive tschchartseriesshadow = 44;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriesstroke = 56;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriesstroke_);
    }

    // optional .TSD.FillArchive tschchartseriessymbolfill = 57;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriessymbolfill_);
    }

    // optional .TSD.StrokeArchive tschchartseriessymbolstroke = 61;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriessymbolstroke_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.ShadowArchive tschchartseriestrendlineshadow = 70;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriestrendlineshadow_);
    }

    // optional .TSD.StrokeArchive tschchartseriestrendlinestroke = 74;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschchartseriestrendlinestroke_);
    }

    // optional float tschchartseries2_3labelexplosion = 3;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartseriesadjustmentscale = 4;
    if (cached_has_bits & 0x08000000u) {
      total_size += 1 + 4;
    }

    // optional int32 tschchartseriesenablecalloutline = 10;
    if (cached_has_bits & 0x10000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschchartseriesenablecalloutline());
    }

    // optional float tschchartserieserrorbarfixedvalue = 15;
    if (cached_has_bits & 0x20000000u) {
      total_size += 1 + 4;
    }

    // optional float tschchartserieserrorbarfixedvaluescatterx = 16;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float tschchartserieserrorbarpercentvalue = 19;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional float tschchartserieserrorbarpercentvaluescatterx = 20;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartserieserrorbarsetting = 21;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbarsetting());
    }

    // optional int32 tschchartserieserrorbarsettingscatterx = 22;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbarsettingscatterx());
    }

    // optional int32 tschchartserieserrorbarspacing = 24;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbarspacing());
    }

    // optional int32 tschchartserieserrorbarspacingscatterx = 25;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbarspacingscatterx());
    }

    // optional float tschchartserieserrorbarstddevvalue = 26;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 4;
    }

    // optional float tschchartserieserrorbarstddevvaluescatterx = 27;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartserieserrorbartype = 30;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbartype());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 tschchartserieserrorbartypescatterx = 31;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieserrorbartypescatterx());
    }

    // optional float tschchartseriesfilluseseriesstrokealphamultiplier = 33;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float tschchartserieslabelexplosion = 35;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartserieslabelparagraphstyleindex = 36;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslabelparagraphstyleindex());
    }

    // optional int32 tschchartserieslinetype = 37;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartserieslinetype());
    }

    // optional int32 tschchartseriesnumberformattype = 39;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesnumberformattype());
    }

    // optional float tschchartseriesopacity = 40;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesoutsidelabelparagraphstyleindex = 41;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesoutsidelabelparagraphstyleindex());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional int32 tschchartseriesseriestype = 43;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesseriestype());
    }

    // optional bool tschchartseriesfilluseseriesstroke = 34;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowerrorbar = 45;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowerrorbarscatterx = 46;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowlabelsinfront = 47;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowline = 48;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshownegativedata = 49;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowserieslabels = 50;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional bool tschchartseriesshowsymbol = 51;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 1;
    }

    // optional int32 tschchartseriessizedimension = 54;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriessizedimension());
    }

    // optional bool tschchartseriesshowtrendline = 52;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesshowvaluelabels = 53;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriesstacklabels = 55;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriessymbolfilluseseriesfill = 58;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriessymbolsize = 60;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriessymboltype = 62;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriessymboltype());
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional float tschchartseriestrendlineequationoffsetx = 63;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float tschchartseriestrendlineequationoffsety = 64;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriestrendlineorder = 66;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriestrendlineorder());
    }

    // optional int32 tschchartseriestrendlineperiod = 67;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriestrendlineperiod());
    }

    // optional float tschchartseriestrendlinersquaredoffsetx = 68;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 4;
    }

    // optional bool tschchartseriessymbolfilluseseriesstroke = 59;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriestrendlineshowequation = 71;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool tschchartseriestrendlineshowlabel = 72;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool tschchartseriestrendlineshowr2value = 73;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional float tschchartseriestrendlinersquaredoffsety = 69;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriestrendlinetype = 75;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriestrendlinetype());
    }

    // optional float tschchartseriestrendlineequationopacity = 76;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriestrendlineequationparagraphstyleindex = 77;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriestrendlineequationparagraphstyleindex());
    }

    // optional float tschchartseriestrendlinersquaredopacity = 78;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriestrendlinersquaredparagraphstyleindex = 79;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriestrendlinersquaredparagraphstyleindex());
    }

    // optional int32 tschchartseriesvaluelabelposition = 80;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesvaluelabelposition());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional int32 tschchartseriesvaluelabelspacing = 81;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesvaluelabelspacing());
    }

    // optional int32 tschchartseriesvaluelabelsaxis = 82;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesvaluelabelsaxis());
    }

    // optional float tschchartserieswedgeexplosion = 83;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional int32 tschchartseriesyaxisordinal = 84;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_tschchartseriesyaxisordinal());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChartSeriesGenericPropertyMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChartSeriesGenericPropertyMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChartSeriesGenericPropertyMapArchive::GetClassData() const { return &_class_data_; }


void ChartSeriesGenericPropertyMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChartSeriesGenericPropertyMapArchive*>(&to_msg);
  auto& from = static_cast<const ChartSeriesGenericPropertyMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschchartseriestrendlinelabelstring(from._internal_tschchartseriestrendlinelabelstring());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschchartseries1_0dateformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseries1_0dateformat());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschchartseries1_0numberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseries1_0numberformat());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschchartseriescalloutlineendlineend()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartseriescalloutlineendlineend());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_tschchartseriescalloutlinestartlineend()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartseriescalloutlinestartlineend());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_tschchartseriescalloutlinestrokestyle()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriescalloutlinestrokestyle());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_tschchartseriesdateformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriesdateformat());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_tschchartseriesdurationformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriesdurationformat());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_tschchartserieserrorbarcustomnegativedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartserieserrorbarcustomnegativedata());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_tschchartserieserrorbarcustomnegativedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartserieserrorbarcustomnegativedatascatterx());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tschchartserieserrorbarcustompositivedata()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartserieserrorbarcustompositivedata());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_tschchartserieserrorbarcustompositivedatascatterx()->::TSCH::ChartsNSArrayOfNSNumberDoubleArchive::MergeFrom(
          from._internal_tschchartserieserrorbarcustompositivedatascatterx());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tschchartserieserrorbarlineend()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartserieserrorbarlineend());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_tschchartserieserrorbarlineendscatterx()->::TSD::LineEndArchive::MergeFrom(
          from._internal_tschchartserieserrorbarlineendscatterx());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_tschchartserieserrorbarshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartserieserrorbarshadow());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_tschchartserieserrorbarstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartserieserrorbarstroke());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_tschchartserieserrorbarstrokescatterx()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartserieserrorbarstrokescatterx());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_tschchartseriesfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriesfill());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_tschchartseriesnumberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriesnumberformat());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_tschchartseriespercentnumberformat()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_tschchartseriespercentnumberformat());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_tschchartseriesshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriesshadow());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_tschchartseriesstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriesstroke());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_tschchartseriessymbolfill()->::TSD::FillArchive::MergeFrom(
          from._internal_tschchartseriessymbolfill());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_tschchartseriessymbolstroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriessymbolstroke());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_tschchartseriestrendlineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschchartseriestrendlineshadow());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_tschchartseriestrendlinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschchartseriestrendlinestroke());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartseries2_3labelexplosion_ = from._impl_.tschchartseries2_3labelexplosion_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesadjustmentscale_ = from._impl_.tschchartseriesadjustmentscale_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriesenablecalloutline_ = from._impl_.tschchartseriesenablecalloutline_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartserieserrorbarfixedvalue_ = from._impl_.tschchartserieserrorbarfixedvalue_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartserieserrorbarfixedvaluescatterx_ = from._impl_.tschchartserieserrorbarfixedvaluescatterx_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartserieserrorbarpercentvalue_ = from._impl_.tschchartserieserrorbarpercentvalue_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartserieserrorbarpercentvaluescatterx_ = from._impl_.tschchartserieserrorbarpercentvaluescatterx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartserieserrorbarsetting_ = from._impl_.tschchartserieserrorbarsetting_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartserieserrorbarsettingscatterx_ = from._impl_.tschchartserieserrorbarsettingscatterx_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartserieserrorbarspacing_ = from._impl_.tschchartserieserrorbarspacing_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartserieserrorbarspacingscatterx_ = from._impl_.tschchartserieserrorbarspacingscatterx_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartserieserrorbarstddevvalue_ = from._impl_.tschchartserieserrorbarstddevvalue_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartserieserrorbarstddevvaluescatterx_ = from._impl_.tschchartserieserrorbarstddevvaluescatterx_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartserieserrorbartype_ = from._impl_.tschchartserieserrorbartype_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartserieserrorbartypescatterx_ = from._impl_.tschchartserieserrorbartypescatterx_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartseriesfilluseseriesstrokealphamultiplier_ = from._impl_.tschchartseriesfilluseseriesstrokealphamultiplier_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartserieslabelexplosion_ = from._impl_.tschchartserieslabelexplosion_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartserieslabelparagraphstyleindex_ = from._impl_.tschchartserieslabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartserieslinetype_ = from._impl_.tschchartserieslinetype_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartseriesnumberformattype_ = from._impl_.tschchartseriesnumberformattype_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartseriesopacity_ = from._impl_.tschchartseriesopacity_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesoutsidelabelparagraphstyleindex_ = from._impl_.tschchartseriesoutsidelabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesseriestype_ = from._impl_.tschchartseriesseriestype_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesfilluseseriesstroke_ = from._impl_.tschchartseriesfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartseriesshowerrorbar_ = from._impl_.tschchartseriesshowerrorbar_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesshowerrorbarscatterx_ = from._impl_.tschchartseriesshowerrorbarscatterx_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.tschchartseriesshowlabelsinfront_ = from._impl_.tschchartseriesshowlabelsinfront_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.tschchartseriesshowline_ = from._impl_.tschchartseriesshowline_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.tschchartseriesshownegativedata_ = from._impl_.tschchartseriesshownegativedata_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.tschchartseriesshowserieslabels_ = from._impl_.tschchartseriesshowserieslabels_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.tschchartseriesshowsymbol_ = from._impl_.tschchartseriesshowsymbol_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.tschchartseriessizedimension_ = from._impl_.tschchartseriessizedimension_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.tschchartseriesshowtrendline_ = from._impl_.tschchartseriesshowtrendline_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.tschchartseriesshowvaluelabels_ = from._impl_.tschchartseriesshowvaluelabels_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.tschchartseriesstacklabels_ = from._impl_.tschchartseriesstacklabels_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.tschchartseriessymbolfilluseseriesfill_ = from._impl_.tschchartseriessymbolfilluseseriesfill_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.tschchartseriessymbolsize_ = from._impl_.tschchartseriessymbolsize_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.tschchartseriessymboltype_ = from._impl_.tschchartseriessymboltype_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.tschchartseriestrendlineequationoffsetx_ = from._impl_.tschchartseriestrendlineequationoffsetx_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tschchartseriestrendlineequationoffsety_ = from._impl_.tschchartseriestrendlineequationoffsety_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tschchartseriestrendlineorder_ = from._impl_.tschchartseriestrendlineorder_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.tschchartseriestrendlineperiod_ = from._impl_.tschchartseriestrendlineperiod_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschchartseriestrendlinersquaredoffsetx_ = from._impl_.tschchartseriestrendlinersquaredoffsetx_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschchartseriessymbolfilluseseriesstroke_ = from._impl_.tschchartseriessymbolfilluseseriesstroke_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschchartseriestrendlineshowequation_ = from._impl_.tschchartseriestrendlineshowequation_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschchartseriestrendlineshowlabel_ = from._impl_.tschchartseriestrendlineshowlabel_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschchartseriestrendlineshowr2value_ = from._impl_.tschchartseriestrendlineshowr2value_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschchartseriestrendlinersquaredoffsety_ = from._impl_.tschchartseriestrendlinersquaredoffsety_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.tschchartseriestrendlinetype_ = from._impl_.tschchartseriestrendlinetype_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.tschchartseriestrendlineequationopacity_ = from._impl_.tschchartseriestrendlineequationopacity_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.tschchartseriestrendlineequationparagraphstyleindex_ = from._impl_.tschchartseriestrendlineequationparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.tschchartseriestrendlinersquaredopacity_ = from._impl_.tschchartseriestrendlinersquaredopacity_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.tschchartseriestrendlinersquaredparagraphstyleindex_ = from._impl_.tschchartseriestrendlinersquaredparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.tschchartseriesvaluelabelposition_ = from._impl_.tschchartseriesvaluelabelposition_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.tschchartseriesvaluelabelspacing_ = from._impl_.tschchartseriesvaluelabelspacing_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.tschchartseriesvaluelabelsaxis_ = from._impl_.tschchartseriesvaluelabelsaxis_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.tschchartserieswedgeexplosion_ = from._impl_.tschchartserieswedgeexplosion_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.tschchartseriesyaxisordinal_ = from._impl_.tschchartseriesyaxisordinal_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChartSeriesGenericPropertyMapArchive::CopyFrom(const ChartSeriesGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ChartSeriesGenericPropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartSeriesGenericPropertyMapArchive::IsInitialized() const {
  if (_internal_has_tschchartseries1_0dateformat()) {
    if (!_impl_.tschchartseries1_0dateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseries1_0numberformat()) {
    if (!_impl_.tschchartseries1_0numberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescalloutlineendlineend()) {
    if (!_impl_.tschchartseriescalloutlineendlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescalloutlinestartlineend()) {
    if (!_impl_.tschchartseriescalloutlinestartlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriescalloutlinestrokestyle()) {
    if (!_impl_.tschchartseriescalloutlinestrokestyle_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdateformat()) {
    if (!_impl_.tschchartseriesdateformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesdurationformat()) {
    if (!_impl_.tschchartseriesdurationformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieserrorbarlineend()) {
    if (!_impl_.tschchartserieserrorbarlineend_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieserrorbarlineendscatterx()) {
    if (!_impl_.tschchartserieserrorbarlineendscatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieserrorbarshadow()) {
    if (!_impl_.tschchartserieserrorbarshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieserrorbarstroke()) {
    if (!_impl_.tschchartserieserrorbarstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartserieserrorbarstrokescatterx()) {
    if (!_impl_.tschchartserieserrorbarstrokescatterx_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesfill()) {
    if (!_impl_.tschchartseriesfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesnumberformat()) {
    if (!_impl_.tschchartseriesnumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriespercentnumberformat()) {
    if (!_impl_.tschchartseriespercentnumberformat_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesshadow()) {
    if (!_impl_.tschchartseriesshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriesstroke()) {
    if (!_impl_.tschchartseriesstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriessymbolfill()) {
    if (!_impl_.tschchartseriessymbolfill_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriessymbolstroke()) {
    if (!_impl_.tschchartseriessymbolstroke_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriestrendlineshadow()) {
    if (!_impl_.tschchartseriestrendlineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschchartseriestrendlinestroke()) {
    if (!_impl_.tschchartseriestrendlinestroke_->IsInitialized()) return false;
  }
  return true;
}

void ChartSeriesGenericPropertyMapArchive::InternalSwap(ChartSeriesGenericPropertyMapArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschchartseriestrendlinelabelstring_, lhs_arena,
      &other->_impl_.tschchartseriestrendlinelabelstring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseriesyaxisordinal_)
      + sizeof(ChartSeriesGenericPropertyMapArchive::_impl_.tschchartseriesyaxisordinal_)
      - PROTOBUF_FIELD_OFFSET(ChartSeriesGenericPropertyMapArchive, _impl_.tschchartseries1_0dateformat_)>(
          reinterpret_cast<char*>(&_impl_.tschchartseries1_0dateformat_),
          reinterpret_cast<char*>(&other->_impl_.tschchartseries1_0dateformat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChartSeriesGenericPropertyMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[13]);
}

// ===================================================================

class ReferenceLineGenericPropertyMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceLineGenericPropertyMapArchive>()._impl_._has_bits_);
  static const ::TSCH::ChartsNSNumberDoubleArchive& tschreferencelinecustomvalue(const ReferenceLineGenericPropertyMapArchive* msg);
  static void set_has_tschreferencelinecustomvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tschreferencelinelabel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tschreferencelinelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSD::ShadowArchive& tschreferencelineshadow(const ReferenceLineGenericPropertyMapArchive* msg);
  static void set_has_tschreferencelineshadow(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tschreferencelineshowlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tschreferencelineshowline(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tschreferencelineshowvaluelabel(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::StrokeArchive& tschreferencelinestroke(const ReferenceLineGenericPropertyMapArchive* msg);
  static void set_has_tschreferencelinestroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tschreferencelinetype(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tschreferencelinevaluelabelparagraphstyleindex(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::TSCH::ChartsNSNumberDoubleArchive&
ReferenceLineGenericPropertyMapArchive::_Internal::tschreferencelinecustomvalue(const ReferenceLineGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschreferencelinecustomvalue_;
}
const ::TSD::ShadowArchive&
ReferenceLineGenericPropertyMapArchive::_Internal::tschreferencelineshadow(const ReferenceLineGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschreferencelineshadow_;
}
const ::TSD::StrokeArchive&
ReferenceLineGenericPropertyMapArchive::_Internal::tschreferencelinestroke(const ReferenceLineGenericPropertyMapArchive* msg) {
  return *msg->_impl_.tschreferencelinestroke_;
}
void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelinecustomvalue() {
  if (_impl_.tschreferencelinecustomvalue_ != nullptr) _impl_.tschreferencelinecustomvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelineshadow() {
  if (_impl_.tschreferencelineshadow_ != nullptr) _impl_.tschreferencelineshadow_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ReferenceLineGenericPropertyMapArchive::clear_tschreferencelinestroke() {
  if (_impl_.tschreferencelinestroke_ != nullptr) _impl_.tschreferencelinestroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ReferenceLineGenericPropertyMapArchive::ReferenceLineGenericPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
}
ReferenceLineGenericPropertyMapArchive::ReferenceLineGenericPropertyMapArchive(const ReferenceLineGenericPropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferenceLineGenericPropertyMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschreferencelinelabel_){}
    , decltype(_impl_.tschreferencelinecustomvalue_){nullptr}
    , decltype(_impl_.tschreferencelineshadow_){nullptr}
    , decltype(_impl_.tschreferencelinestroke_){nullptr}
    , decltype(_impl_.tschreferencelinelabelparagraphstyleindex_){}
    , decltype(_impl_.tschreferencelineshowlabel_){}
    , decltype(_impl_.tschreferencelineshowline_){}
    , decltype(_impl_.tschreferencelineshowvaluelabel_){}
    , decltype(_impl_.tschreferencelinetype_){}
    , decltype(_impl_.tschreferencelinevaluelabelparagraphstyleindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tschreferencelinelabel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschreferencelinelabel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tschreferencelinelabel()) {
    _this->_impl_.tschreferencelinelabel_.Set(from._internal_tschreferencelinelabel(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tschreferencelinecustomvalue()) {
    _this->_impl_.tschreferencelinecustomvalue_ = new ::TSCH::ChartsNSNumberDoubleArchive(*from._impl_.tschreferencelinecustomvalue_);
  }
  if (from._internal_has_tschreferencelineshadow()) {
    _this->_impl_.tschreferencelineshadow_ = new ::TSD::ShadowArchive(*from._impl_.tschreferencelineshadow_);
  }
  if (from._internal_has_tschreferencelinestroke()) {
    _this->_impl_.tschreferencelinestroke_ = new ::TSD::StrokeArchive(*from._impl_.tschreferencelinestroke_);
  }
  ::memcpy(&_impl_.tschreferencelinelabelparagraphstyleindex_, &from._impl_.tschreferencelinelabelparagraphstyleindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tschreferencelinevaluelabelparagraphstyleindex_) -
    reinterpret_cast<char*>(&_impl_.tschreferencelinelabelparagraphstyleindex_)) + sizeof(_impl_.tschreferencelinevaluelabelparagraphstyleindex_));
  // @@protoc_insertion_point(copy_constructor:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
}

inline void ReferenceLineGenericPropertyMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tschreferencelinelabel_){}
    , decltype(_impl_.tschreferencelinecustomvalue_){nullptr}
    , decltype(_impl_.tschreferencelineshadow_){nullptr}
    , decltype(_impl_.tschreferencelinestroke_){nullptr}
    , decltype(_impl_.tschreferencelinelabelparagraphstyleindex_){0}
    , decltype(_impl_.tschreferencelineshowlabel_){false}
    , decltype(_impl_.tschreferencelineshowline_){false}
    , decltype(_impl_.tschreferencelineshowvaluelabel_){false}
    , decltype(_impl_.tschreferencelinetype_){0}
    , decltype(_impl_.tschreferencelinevaluelabelparagraphstyleindex_){0}
  };
  _impl_.tschreferencelinelabel_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tschreferencelinelabel_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReferenceLineGenericPropertyMapArchive::~ReferenceLineGenericPropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceLineGenericPropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tschreferencelinelabel_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tschreferencelinecustomvalue_;
  if (this != internal_default_instance()) delete _impl_.tschreferencelineshadow_;
  if (this != internal_default_instance()) delete _impl_.tschreferencelinestroke_;
}

void ReferenceLineGenericPropertyMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceLineGenericPropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tschreferencelinelabel_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tschreferencelinecustomvalue_ != nullptr);
      _impl_.tschreferencelinecustomvalue_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.tschreferencelineshadow_ != nullptr);
      _impl_.tschreferencelineshadow_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.tschreferencelinestroke_ != nullptr);
      _impl_.tschreferencelinestroke_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.tschreferencelinelabelparagraphstyleindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschreferencelineshowvaluelabel_) -
        reinterpret_cast<char*>(&_impl_.tschreferencelinelabelparagraphstyleindex_)) + sizeof(_impl_.tschreferencelineshowvaluelabel_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.tschreferencelinetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tschreferencelinevaluelabelparagraphstyleindex_) -
        reinterpret_cast<char*>(&_impl_.tschreferencelinetype_)) + sizeof(_impl_.tschreferencelinevaluelabelparagraphstyleindex_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceLineGenericPropertyMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinecustomvalue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelinecustomvalue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tschreferencelinelabel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tschreferencelinelabel();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinelabel");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschreferencelinelabelparagraphstyleindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tschreferencelinelabelparagraphstyleindex(&has_bits);
          _impl_.tschreferencelinelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.ShadowArchive tschreferencelineshadow = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelineshadow(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschreferencelineshowlabel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_tschreferencelineshowlabel(&has_bits);
          _impl_.tschreferencelineshowlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschreferencelineshowline = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_tschreferencelineshowline(&has_bits);
          _impl_.tschreferencelineshowline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool tschreferencelineshowvaluelabel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_tschreferencelineshowvaluelabel(&has_bits);
          _impl_.tschreferencelineshowvaluelabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive tschreferencelinestroke = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tschreferencelinestroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschreferencelinetype = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_tschreferencelinetype(&has_bits);
          _impl_.tschreferencelinetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 tschreferencelinevaluelabelparagraphstyleindex = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_tschreferencelinevaluelabelparagraphstyleindex(&has_bits);
          _impl_.tschreferencelinevaluelabelparagraphstyleindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceLineGenericPropertyMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinecustomvalue = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tschreferencelinecustomvalue(this),
        _Internal::tschreferencelinecustomvalue(this).GetCachedSize(), target, stream);
  }

  // optional string tschreferencelinelabel = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tschreferencelinelabel().data(), static_cast<int>(this->_internal_tschreferencelinelabel().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCH.Generated.ReferenceLineGenericPropertyMapArchive.tschreferencelinelabel");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tschreferencelinelabel(), target);
  }

  // optional int32 tschreferencelinelabelparagraphstyleindex = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_tschreferencelinelabelparagraphstyleindex(), target);
  }

  // optional .TSD.ShadowArchive tschreferencelineshadow = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tschreferencelineshadow(this),
        _Internal::tschreferencelineshadow(this).GetCachedSize(), target, stream);
  }

  // optional bool tschreferencelineshowlabel = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_tschreferencelineshowlabel(), target);
  }

  // optional bool tschreferencelineshowline = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_tschreferencelineshowline(), target);
  }

  // optional bool tschreferencelineshowvaluelabel = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_tschreferencelineshowvaluelabel(), target);
  }

  // optional .TSD.StrokeArchive tschreferencelinestroke = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tschreferencelinestroke(this),
        _Internal::tschreferencelinestroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 tschreferencelinetype = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_tschreferencelinetype(), target);
  }

  // optional int32 tschreferencelinevaluelabelparagraphstyleindex = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_tschreferencelinevaluelabelparagraphstyleindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  return target;
}

size_t ReferenceLineGenericPropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tschreferencelinelabel = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tschreferencelinelabel());
    }

    // optional .TSCH.ChartsNSNumberDoubleArchive tschreferencelinecustomvalue = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschreferencelinecustomvalue_);
    }

    // optional .TSD.ShadowArchive tschreferencelineshadow = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschreferencelineshadow_);
    }

    // optional .TSD.StrokeArchive tschreferencelinestroke = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tschreferencelinestroke_);
    }

    // optional int32 tschreferencelinelabelparagraphstyleindex = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschreferencelinelabelparagraphstyleindex());
    }

    // optional bool tschreferencelineshowlabel = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool tschreferencelineshowline = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool tschreferencelineshowvaluelabel = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional int32 tschreferencelinetype = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschreferencelinetype());
    }

    // optional int32 tschreferencelinevaluelabelparagraphstyleindex = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tschreferencelinevaluelabelparagraphstyleindex());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceLineGenericPropertyMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferenceLineGenericPropertyMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceLineGenericPropertyMapArchive::GetClassData() const { return &_class_data_; }


void ReferenceLineGenericPropertyMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferenceLineGenericPropertyMapArchive*>(&to_msg);
  auto& from = static_cast<const ReferenceLineGenericPropertyMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tschreferencelinelabel(from._internal_tschreferencelinelabel());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tschreferencelinecustomvalue()->::TSCH::ChartsNSNumberDoubleArchive::MergeFrom(
          from._internal_tschreferencelinecustomvalue());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_tschreferencelineshadow()->::TSD::ShadowArchive::MergeFrom(
          from._internal_tschreferencelineshadow());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_tschreferencelinestroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_tschreferencelinestroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.tschreferencelinelabelparagraphstyleindex_ = from._impl_.tschreferencelinelabelparagraphstyleindex_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.tschreferencelineshowlabel_ = from._impl_.tschreferencelineshowlabel_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.tschreferencelineshowline_ = from._impl_.tschreferencelineshowline_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.tschreferencelineshowvaluelabel_ = from._impl_.tschreferencelineshowvaluelabel_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.tschreferencelinetype_ = from._impl_.tschreferencelinetype_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.tschreferencelinevaluelabelparagraphstyleindex_ = from._impl_.tschreferencelinevaluelabelparagraphstyleindex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceLineGenericPropertyMapArchive::CopyFrom(const ReferenceLineGenericPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCH.Generated.ReferenceLineGenericPropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceLineGenericPropertyMapArchive::IsInitialized() const {
  if (_internal_has_tschreferencelineshadow()) {
    if (!_impl_.tschreferencelineshadow_->IsInitialized()) return false;
  }
  if (_internal_has_tschreferencelinestroke()) {
    if (!_impl_.tschreferencelinestroke_->IsInitialized()) return false;
  }
  return true;
}

void ReferenceLineGenericPropertyMapArchive::InternalSwap(ReferenceLineGenericPropertyMapArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tschreferencelinelabel_, lhs_arena,
      &other->_impl_.tschreferencelinelabel_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelinevaluelabelparagraphstyleindex_)
      + sizeof(ReferenceLineGenericPropertyMapArchive::_impl_.tschreferencelinevaluelabelparagraphstyleindex_)
      - PROTOBUF_FIELD_OFFSET(ReferenceLineGenericPropertyMapArchive, _impl_.tschreferencelinecustomvalue_)>(
          reinterpret_cast<char*>(&_impl_.tschreferencelinecustomvalue_),
          reinterpret_cast<char*>(&other->_impl_.tschreferencelinecustomvalue_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceLineGenericPropertyMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCHArchives_2eGEN_2eproto_getter, &descriptor_table_TSCHArchives_2eGEN_2eproto_once,
      file_level_metadata_TSCHArchives_2eGEN_2eproto[14]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartStyleArchive >, 11, false>
  ChartStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartNonStyleArchive >, 11, false>
  ChartNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartNonStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int LegendStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::LegendStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::LegendStyleArchive >, 11, false>
  LegendStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::LegendStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int LegendNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::LegendNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::LegendNonStyleArchive >, 11, false>
  LegendNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::LegendNonStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartAxisStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisStyleArchive >, 11, false>
  ChartAxisStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartAxisStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartAxisNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartAxisNonStyleArchive >, 11, false>
  ChartAxisNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartAxisNonStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartSeriesStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesStyleArchive >, 11, false>
  ChartSeriesStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartSeriesStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ChartSeriesNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ChartSeriesNonStyleArchive >, 11, false>
  ChartSeriesNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ChartSeriesNonStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ReferenceLineStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ReferenceLineStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ReferenceLineStyleArchive >, 11, false>
  ReferenceLineStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ReferenceLineStyleArchive::default_instance(), nullptr);
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ReferenceLineNonStyleArchive::kCurrentFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ReferenceLineNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::Generated::ReferenceLineNonStyleArchive >, 11, false>
  ReferenceLineNonStyleArchive::current(kCurrentFieldNumber, ::TSCH::Generated::ReferenceLineNonStyleArchive::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace Generated
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::LegendStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::LegendStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::LegendStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::LegendNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::LegendNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::LegendNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartAxisStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartAxisStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartAxisStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartAxisNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartAxisNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartAxisNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartSeriesStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartSeriesStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartSeriesStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartSeriesNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartSeriesNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartSeriesNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ReferenceLineStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ReferenceLineStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ReferenceLineStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ReferenceLineNonStyleArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ReferenceLineNonStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ReferenceLineNonStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartGenericPropertyMapArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartGenericPropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartGenericPropertyMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::LegendGenericPropertyMapArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::LegendGenericPropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::LegendGenericPropertyMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartAxisGenericPropertyMapArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartAxisGenericPropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartAxisGenericPropertyMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ChartSeriesGenericPropertyMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive*
Arena::CreateMaybeMessage< ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCH::Generated::ReferenceLineGenericPropertyMapArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
