// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSSArchives.proto

#include "TSSArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSS {
PROTOBUF_CONSTEXPR StyleArchive::StyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.style_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.stylesheet_)*/nullptr
  , /*decltype(_impl_.is_variation_)*/false} {}
struct StyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyleArchiveDefaultTypeInternal() {}
  union {
    StyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyleArchiveDefaultTypeInternal _StyleArchive_default_instance_;
PROTOBUF_CONSTEXPR StylesheetArchive_IdentifiedStyleEntry::StylesheetArchive_IdentifiedStyleEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.style_)*/nullptr} {}
struct StylesheetArchive_IdentifiedStyleEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StylesheetArchive_IdentifiedStyleEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StylesheetArchive_IdentifiedStyleEntryDefaultTypeInternal() {}
  union {
    StylesheetArchive_IdentifiedStyleEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StylesheetArchive_IdentifiedStyleEntryDefaultTypeInternal _StylesheetArchive_IdentifiedStyleEntry_default_instance_;
PROTOBUF_CONSTEXPR StylesheetArchive_StyleChildrenEntry::StylesheetArchive_StyleChildrenEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct StylesheetArchive_StyleChildrenEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StylesheetArchive_StyleChildrenEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StylesheetArchive_StyleChildrenEntryDefaultTypeInternal() {}
  union {
    StylesheetArchive_StyleChildrenEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StylesheetArchive_StyleChildrenEntryDefaultTypeInternal _StylesheetArchive_StyleChildrenEntry_default_instance_;
PROTOBUF_CONSTEXPR StylesheetArchive_VersionedStyles::StylesheetArchive_VersionedStyles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.styles_)*/{}
  , /*decltype(_impl_.identifier_to_style_map_)*/{}
  , /*decltype(_impl_.parent_to_children_style_map_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StylesheetArchive_VersionedStylesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StylesheetArchive_VersionedStylesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StylesheetArchive_VersionedStylesDefaultTypeInternal() {}
  union {
    StylesheetArchive_VersionedStyles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StylesheetArchive_VersionedStylesDefaultTypeInternal _StylesheetArchive_VersionedStyles_default_instance_;
PROTOBUF_CONSTEXPR StylesheetArchive::StylesheetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.styles_)*/{}
  , /*decltype(_impl_.identifier_to_style_map_)*/{}
  , /*decltype(_impl_.parent_to_children_style_map_)*/{}
  , /*decltype(_impl_.parent_)*/nullptr
  , /*decltype(_impl_.styles_for_10_0_)*/nullptr
  , /*decltype(_impl_.styles_for_10_1_)*/nullptr
  , /*decltype(_impl_.styles_for_10_2_)*/nullptr
  , /*decltype(_impl_.styles_for_11_0_)*/nullptr
  , /*decltype(_impl_.styles_for_11_1_)*/nullptr
  , /*decltype(_impl_.styles_for_11_2_)*/nullptr
  , /*decltype(_impl_.styles_for_12_0_)*/nullptr
  , /*decltype(_impl_.styles_for_12_1_)*/nullptr
  , /*decltype(_impl_.styles_for_12_2_)*/nullptr
  , /*decltype(_impl_.can_cull_styles_)*/false
  , /*decltype(_impl_.is_locked_)*/true} {}
struct StylesheetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StylesheetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StylesheetArchiveDefaultTypeInternal() {}
  union {
    StylesheetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StylesheetArchiveDefaultTypeInternal _StylesheetArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeArchive::ThemeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.old_uuids_for_preset_replacements_)*/{}
  , /*decltype(_impl_.new_uuids_for_preset_replacements_)*/{}
  , /*decltype(_impl_.color_presets_)*/{}
  , /*decltype(_impl_.theme_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.legacy_stylesheet_)*/nullptr
  , /*decltype(_impl_.document_stylesheet_)*/nullptr} {}
struct ThemeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeArchiveDefaultTypeInternal() {}
  union {
    ThemeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeArchiveDefaultTypeInternal _ThemeArchive_default_instance_;
PROTOBUF_CONSTEXPR ApplyThemeCommandArchive::ApplyThemeCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commands_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_theme_)*/nullptr
  , /*decltype(_impl_.new_theme_)*/nullptr} {}
struct ApplyThemeCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplyThemeCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplyThemeCommandArchiveDefaultTypeInternal() {}
  union {
    ApplyThemeCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplyThemeCommandArchiveDefaultTypeInternal _ApplyThemeCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ApplyThemeChildCommandArchive::ApplyThemeChildCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.parent_)*/nullptr} {}
struct ApplyThemeChildCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplyThemeChildCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplyThemeChildCommandArchiveDefaultTypeInternal() {}
  union {
    ApplyThemeChildCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplyThemeChildCommandArchiveDefaultTypeInternal _ApplyThemeChildCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR StyleUpdatePropertyMapCommandArchive::StyleUpdatePropertyMapCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.current_style_)*/nullptr
  , /*decltype(_impl_.style_with_old_property_map_)*/nullptr
  , /*decltype(_impl_.style_with_new_property_map_)*/nullptr
  , /*decltype(_impl_.style_diff_)*/nullptr
  , /*decltype(_impl_.notify_for_style_clients_)*/true} {}
struct StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal() {}
  union {
    StyleUpdatePropertyMapCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal _StyleUpdatePropertyMapCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeReplacePresetCommandArchive::ThemeReplacePresetCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.preset_)*/nullptr
  , /*decltype(_impl_.oldpreset_)*/nullptr
  , /*decltype(_impl_.index_)*/0u} {}
struct ThemeReplacePresetCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeReplacePresetCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeReplacePresetCommandArchiveDefaultTypeInternal() {}
  union {
    ThemeReplacePresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeReplacePresetCommandArchiveDefaultTypeInternal _ThemeReplacePresetCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeReplaceColorPresetCommandArchive::ThemeReplaceColorPresetCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.color_)*/nullptr
  , /*decltype(_impl_.old_color_)*/nullptr
  , /*decltype(_impl_.index_)*/0u} {}
struct ThemeReplaceColorPresetCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeReplaceColorPresetCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeReplaceColorPresetCommandArchiveDefaultTypeInternal() {}
  union {
    ThemeReplaceColorPresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeReplaceColorPresetCommandArchiveDefaultTypeInternal _ThemeReplaceColorPresetCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeAddStylePresetCommandArchive::ThemeAddStylePresetCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.preset_kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.preset_)*/nullptr
  , /*decltype(_impl_.add_preset_to_stylesheet_)*/false} {}
struct ThemeAddStylePresetCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeAddStylePresetCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeAddStylePresetCommandArchiveDefaultTypeInternal() {}
  union {
    ThemeAddStylePresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeAddStylePresetCommandArchiveDefaultTypeInternal _ThemeAddStylePresetCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeRemoveStylePresetCommandArchive::ThemeRemoveStylePresetCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.preset_kind_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.preset_)*/nullptr
  , /*decltype(_impl_.replacement_preset_)*/nullptr
  , /*decltype(_impl_.preset_index_)*/0u} {}
struct ThemeRemoveStylePresetCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeRemoveStylePresetCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeRemoveStylePresetCommandArchiveDefaultTypeInternal() {}
  union {
    ThemeRemoveStylePresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeRemoveStylePresetCommandArchiveDefaultTypeInternal _ThemeRemoveStylePresetCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeMovePresetCommandArchive::ThemeMovePresetCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.preset_id_)*/nullptr
  , /*decltype(_impl_.new_index_)*/0u
  , /*decltype(_impl_.old_index_)*/0u} {}
struct ThemeMovePresetCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeMovePresetCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeMovePresetCommandArchiveDefaultTypeInternal() {}
  union {
    ThemeMovePresetCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeMovePresetCommandArchiveDefaultTypeInternal _ThemeMovePresetCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.preset_)*/nullptr
  , /*decltype(_impl_.replacement_preset_)*/nullptr} {}
struct ThemeReplaceStylePresetAndDisconnectStylesCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemeReplaceStylePresetAndDisconnectStylesCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemeReplaceStylePresetAndDisconnectStylesCommandArchiveDefaultTypeInternal() {}
  union {
    ThemeReplaceStylePresetAndDisconnectStylesCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemeReplaceStylePresetAndDisconnectStylesCommandArchiveDefaultTypeInternal _ThemeReplaceStylePresetAndDisconnectStylesCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandPropertyEntryArchive::CommandPropertyEntryArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.string_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tsp_reference_)*/nullptr
  , /*decltype(_impl_.property_)*/0u
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.integer_value_)*/0
  , /*decltype(_impl_.float_value_)*/0
  , /*decltype(_impl_.double_value_)*/0} {}
struct CommandPropertyEntryArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandPropertyEntryArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandPropertyEntryArchiveDefaultTypeInternal() {}
  union {
    CommandPropertyEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandPropertyEntryArchiveDefaultTypeInternal _CommandPropertyEntryArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandPropertyMapArchive::CommandPropertyMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.property_entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CommandPropertyMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandPropertyMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandPropertyMapArchiveDefaultTypeInternal() {}
  union {
    CommandPropertyMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandPropertyMapArchiveDefaultTypeInternal _CommandPropertyMapArchive_default_instance_;
}  // namespace TSS
static ::_pb::Metadata file_level_metadata_TSSArchives_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSSArchives_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSSArchives_2eproto = nullptr;

const uint32_t TableStruct_TSSArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSS::StyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::StyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::StyleArchive, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TSS::StyleArchive, _impl_.style_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSS::StyleArchive, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::TSS::StyleArchive, _impl_.is_variation_),
  PROTOBUF_FIELD_OFFSET(::TSS::StyleArchive, _impl_.stylesheet_),
  0,
  1,
  2,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_IdentifiedStyleEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_IdentifiedStyleEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_IdentifiedStyleEntry, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_IdentifiedStyleEntry, _impl_.style_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_StyleChildrenEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_StyleChildrenEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_StyleChildrenEntry, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_StyleChildrenEntry, _impl_.children_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_VersionedStyles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_VersionedStyles, _impl_.styles_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_VersionedStyles, _impl_.identifier_to_style_map_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive_VersionedStyles, _impl_.parent_to_children_style_map_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.styles_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.identifier_to_style_map_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.parent_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.is_locked_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.parent_to_children_style_map_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.can_cull_styles_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.styles_for_10_0_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.styles_for_10_1_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.styles_for_10_2_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.styles_for_11_0_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.styles_for_11_1_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.styles_for_11_2_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.styles_for_12_0_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.styles_for_12_1_),
  PROTOBUF_FIELD_OFFSET(::TSS::StylesheetArchive, _impl_.styles_for_12_2_),
  ~0u,
  ~0u,
  0,
  11,
  ~0u,
  10,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeArchive, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeArchive, _impl_.legacy_stylesheet_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeArchive, _impl_.theme_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeArchive, _impl_.document_stylesheet_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeArchive, _impl_.old_uuids_for_preset_replacements_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeArchive, _impl_.new_uuids_for_preset_replacements_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeArchive, _impl_.color_presets_),
  1,
  0,
  2,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSS::ApplyThemeCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::ApplyThemeCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::ApplyThemeCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSS::ApplyThemeCommandArchive, _impl_.commands_),
  PROTOBUF_FIELD_OFFSET(::TSS::ApplyThemeCommandArchive, _impl_.old_theme_),
  PROTOBUF_FIELD_OFFSET(::TSS::ApplyThemeCommandArchive, _impl_.new_theme_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSS::ApplyThemeChildCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::ApplyThemeChildCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::ApplyThemeChildCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSS::ApplyThemeChildCommandArchive, _impl_.parent_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSS::StyleUpdatePropertyMapCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::StyleUpdatePropertyMapCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::StyleUpdatePropertyMapCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSS::StyleUpdatePropertyMapCommandArchive, _impl_.current_style_),
  PROTOBUF_FIELD_OFFSET(::TSS::StyleUpdatePropertyMapCommandArchive, _impl_.style_with_old_property_map_),
  PROTOBUF_FIELD_OFFSET(::TSS::StyleUpdatePropertyMapCommandArchive, _impl_.style_with_new_property_map_),
  PROTOBUF_FIELD_OFFSET(::TSS::StyleUpdatePropertyMapCommandArchive, _impl_.style_diff_),
  PROTOBUF_FIELD_OFFSET(::TSS::StyleUpdatePropertyMapCommandArchive, _impl_.notify_for_style_clients_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplacePresetCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplacePresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplacePresetCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplacePresetCommandArchive, _impl_.preset_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplacePresetCommandArchive, _impl_.oldpreset_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplacePresetCommandArchive, _impl_.index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceColorPresetCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceColorPresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceColorPresetCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceColorPresetCommandArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceColorPresetCommandArchive, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceColorPresetCommandArchive, _impl_.old_color_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceColorPresetCommandArchive, _impl_.index_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeAddStylePresetCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeAddStylePresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeAddStylePresetCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeAddStylePresetCommandArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeAddStylePresetCommandArchive, _impl_.preset_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeAddStylePresetCommandArchive, _impl_.preset_kind_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeAddStylePresetCommandArchive, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeAddStylePresetCommandArchive, _impl_.add_preset_to_stylesheet_),
  2,
  3,
  4,
  0,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeRemoveStylePresetCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeRemoveStylePresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeRemoveStylePresetCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeRemoveStylePresetCommandArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeRemoveStylePresetCommandArchive, _impl_.preset_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeRemoveStylePresetCommandArchive, _impl_.preset_index_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeRemoveStylePresetCommandArchive, _impl_.preset_kind_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeRemoveStylePresetCommandArchive, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeRemoveStylePresetCommandArchive, _impl_.replacement_preset_),
  2,
  3,
  4,
  6,
  0,
  1,
  5,
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeMovePresetCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeMovePresetCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeMovePresetCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeMovePresetCommandArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeMovePresetCommandArchive, _impl_.preset_id_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeMovePresetCommandArchive, _impl_.new_index_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeMovePresetCommandArchive, _impl_.old_index_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive, _impl_.preset_),
  PROTOBUF_FIELD_OFFSET(::TSS::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive, _impl_.replacement_preset_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyEntryArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyEntryArchive, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyEntryArchive, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyEntryArchive, _impl_.property_),
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyEntryArchive, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyEntryArchive, _impl_.integer_value_),
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyEntryArchive, _impl_.float_value_),
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyEntryArchive, _impl_.double_value_),
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyEntryArchive, _impl_.string_value_),
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyEntryArchive, _impl_.tsp_reference_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSS::CommandPropertyMapArchive, _impl_.property_entries_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::TSS::StyleArchive)},
  { 16, 24, -1, sizeof(::TSS::StylesheetArchive_IdentifiedStyleEntry)},
  { 26, 34, -1, sizeof(::TSS::StylesheetArchive_StyleChildrenEntry)},
  { 36, -1, -1, sizeof(::TSS::StylesheetArchive_VersionedStyles)},
  { 45, 66, -1, sizeof(::TSS::StylesheetArchive)},
  { 81, 93, -1, sizeof(::TSS::ThemeArchive)},
  { 99, 109, -1, sizeof(::TSS::ApplyThemeCommandArchive)},
  { 113, 121, -1, sizeof(::TSS::ApplyThemeChildCommandArchive)},
  { 123, 135, -1, sizeof(::TSS::StyleUpdatePropertyMapCommandArchive)},
  { 141, 151, -1, sizeof(::TSS::ThemeReplacePresetCommandArchive)},
  { 155, 166, -1, sizeof(::TSS::ThemeReplaceColorPresetCommandArchive)},
  { 171, 183, -1, sizeof(::TSS::ThemeAddStylePresetCommandArchive)},
  { 189, 202, -1, sizeof(::TSS::ThemeRemoveStylePresetCommandArchive)},
  { 209, 220, -1, sizeof(::TSS::ThemeMovePresetCommandArchive)},
  { 225, 234, -1, sizeof(::TSS::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)},
  { 237, 250, -1, sizeof(::TSS::CommandPropertyEntryArchive)},
  { 257, -1, -1, sizeof(::TSS::CommandPropertyMapArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSS::_StyleArchive_default_instance_._instance,
  &::TSS::_StylesheetArchive_IdentifiedStyleEntry_default_instance_._instance,
  &::TSS::_StylesheetArchive_StyleChildrenEntry_default_instance_._instance,
  &::TSS::_StylesheetArchive_VersionedStyles_default_instance_._instance,
  &::TSS::_StylesheetArchive_default_instance_._instance,
  &::TSS::_ThemeArchive_default_instance_._instance,
  &::TSS::_ApplyThemeCommandArchive_default_instance_._instance,
  &::TSS::_ApplyThemeChildCommandArchive_default_instance_._instance,
  &::TSS::_StyleUpdatePropertyMapCommandArchive_default_instance_._instance,
  &::TSS::_ThemeReplacePresetCommandArchive_default_instance_._instance,
  &::TSS::_ThemeReplaceColorPresetCommandArchive_default_instance_._instance,
  &::TSS::_ThemeAddStylePresetCommandArchive_default_instance_._instance,
  &::TSS::_ThemeRemoveStylePresetCommandArchive_default_instance_._instance,
  &::TSS::_ThemeMovePresetCommandArchive_default_instance_._instance,
  &::TSS::_ThemeReplaceStylePresetAndDisconnectStylesCommandArchive_default_instance_._instance,
  &::TSS::_CommandPropertyEntryArchive_default_instance_._instance,
  &::TSS::_CommandPropertyMapArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSSArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021TSSArchives.proto\022\003TSS\032\021TSPMessages.pr"
  "oto\032\021TSKArchives.proto\"\227\001\n\014StyleArchive\022"
  "\014\n\004name\030\001 \001(\t\022\030\n\020style_identifier\030\002 \001(\t\022"
  "\036\n\006parent\030\003 \001(\0132\016.TSP.Reference\022\033\n\014is_va"
  "riation\030\004 \001(\010:\005false\022\"\n\nstylesheet\030\005 \001(\013"
  "2\016.TSP.Reference\"\352\t\n\021StylesheetArchive\022\036"
  "\n\006styles\030\001 \003(\0132\016.TSP.Reference\022L\n\027identi"
  "fier_to_style_map\030\002 \003(\0132+.TSS.Stylesheet"
  "Archive.IdentifiedStyleEntry\022\036\n\006parent\030\003"
  " \001(\0132\016.TSP.Reference\022\027\n\tis_locked\030\004 \001(\010:"
  "\004true\022O\n\034parent_to_children_style_map\030\005 "
  "\003(\0132).TSS.StylesheetArchive.StyleChildre"
  "nEntry\022\036\n\017can_cull_styles\030\006 \001(\010:\005false\022\?"
  "\n\017styles_for_10_0\030\007 \001(\0132&.TSS.Stylesheet"
  "Archive.VersionedStyles\022\?\n\017styles_for_10"
  "_1\030\010 \001(\0132&.TSS.StylesheetArchive.Version"
  "edStyles\022\?\n\017styles_for_10_2\030\t \001(\0132&.TSS."
  "StylesheetArchive.VersionedStyles\022\?\n\017sty"
  "les_for_11_0\030\n \001(\0132&.TSS.StylesheetArchi"
  "ve.VersionedStyles\022\?\n\017styles_for_11_1\030\013 "
  "\001(\0132&.TSS.StylesheetArchive.VersionedSty"
  "les\022\?\n\017styles_for_11_2\030\014 \001(\0132&.TSS.Style"
  "sheetArchive.VersionedStyles\022\?\n\017styles_f"
  "or_12_0\030\r \001(\0132&.TSS.StylesheetArchive.Ve"
  "rsionedStyles\022\?\n\017styles_for_12_1\030\016 \001(\0132&"
  ".TSS.StylesheetArchive.VersionedStyles\022\?"
  "\n\017styles_for_12_2\030\017 \001(\0132&.TSS.Stylesheet"
  "Archive.VersionedStyles\032I\n\024IdentifiedSty"
  "leEntry\022\022\n\nidentifier\030\001 \002(\t\022\035\n\005style\030\002 \002"
  "(\0132\016.TSP.Reference\032V\n\022StyleChildrenEntry"
  "\022\036\n\006parent\030\001 \002(\0132\016.TSP.Reference\022 \n\010chil"
  "dren\030\002 \003(\0132\016.TSP.Reference\032\320\001\n\017Versioned"
  "Styles\022\036\n\006styles\030\001 \003(\0132\016.TSP.Reference\022L"
  "\n\027identifier_to_style_map\030\002 \003(\0132+.TSS.St"
  "ylesheetArchive.IdentifiedStyleEntry\022O\n\034"
  "parent_to_children_style_map\030\003 \003(\0132).TSS"
  ".StylesheetArchive.StyleChildrenEntry\"\231\002"
  "\n\014ThemeArchive\022)\n\021legacy_stylesheet\030\001 \001("
  "\0132\016.TSP.Reference\022\030\n\020theme_identifier\030\003 "
  "\001(\t\022+\n\023document_stylesheet\030\004 \001(\0132\016.TSP.R"
  "eference\0224\n!old_uuids_for_preset_replace"
  "ments\030\005 \003(\0132\t.TSP.UUID\0224\n!new_uuids_for_"
  "preset_replacements\030\006 \003(\0132\t.TSP.UUID\022!\n\r"
  "color_presets\030\n \003(\0132\n.TSP.Color*\010\010d\020\200\200\200\200"
  "\002\"\246\001\n\030ApplyThemeCommandArchive\022\"\n\005super\030"
  "\001 \002(\0132\023.TSK.CommandArchive\022 \n\010commands\030\002"
  " \003(\0132\016.TSP.Reference\022!\n\told_theme\030\003 \001(\0132"
  "\016.TSP.Reference\022!\n\tnew_theme\030\004 \001(\0132\016.TSP"
  ".Reference\"c\n\035ApplyThemeChildCommandArch"
  "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
  "\036\n\006parent\030\002 \001(\0132\016.TSP.Reference\"\247\002\n$Styl"
  "eUpdatePropertyMapCommandArchive\022\"\n\005supe"
  "r\030\001 \002(\0132\023.TSK.CommandArchive\022%\n\rcurrent_"
  "style\030\002 \002(\0132\016.TSP.Reference\0223\n\033style_wit"
  "h_old_property_map\030\003 \001(\0132\016.TSP.Reference"
  "\0223\n\033style_with_new_property_map\030\004 \001(\0132\016."
  "TSP.Reference\022\"\n\nstyle_diff\030\007 \001(\0132\016.TSP."
  "Reference\022&\n\030notify_for_style_clients\030\006 "
  "\001(\010:\004true\"\230\001\n ThemeReplacePresetCommandA"
  "rchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchi"
  "ve\022\036\n\006preset\030\003 \002(\0132\016.TSP.Reference\022!\n\tol"
  "dPreset\030\004 \001(\0132\016.TSP.Reference\022\r\n\005index\030\005"
  " \002(\r\"\263\001\n%ThemeReplaceColorPresetCommandA"
  "rchive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchi"
  "ve\022\035\n\005theme\030\002 \002(\0132\016.TSP.Reference\022\031\n\005col"
  "or\030\003 \002(\0132\n.TSP.Color\022\035\n\told_color\030\004 \002(\0132"
  "\n.TSP.Color\022\r\n\005index\030\005 \002(\r\"\321\001\n!ThemeAddS"
  "tylePresetCommandArchive\022\"\n\005super\030\001 \002(\0132"
  "\023.TSK.CommandArchive\022\035\n\005theme\030\002 \002(\0132\016.TS"
  "P.Reference\022\036\n\006preset\030\003 \002(\0132\016.TSP.Refere"
  "nce\022\023\n\013preset_kind\030\004 \002(\t\022\022\n\nidentifier\030\005"
  " \001(\t\022 \n\030add_preset_to_stylesheet\030\006 \001(\010\"\364"
  "\001\n$ThemeRemoveStylePresetCommandArchive\022"
  "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005t"
  "heme\030\002 \002(\0132\016.TSP.Reference\022\036\n\006preset\030\003 \002"
  "(\0132\016.TSP.Reference\022\024\n\014preset_index\030\004 \002(\r"
  "\022\023\n\013preset_kind\030\005 \002(\t\022\022\n\nidentifier\030\006 \001("
  "\t\022*\n\022replacement_preset\030\007 \001(\0132\016.TSP.Refe"
  "rence\"\246\001\n\035ThemeMovePresetCommandArchive\022"
  "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005t"
  "heme\030\002 \002(\0132\016.TSP.Reference\022\034\n\tpreset_id\030"
  "\003 \002(\0132\t.TSP.UUID\022\021\n\tnew_index\030\004 \002(\r\022\021\n\to"
  "ld_index\030\005 \002(\r\"\252\001\n8ThemeReplaceStylePres"
  "etAndDisconnectStylesCommandArchive\022\"\n\005s"
  "uper\030\001 \002(\0132\023.TSK.CommandArchive\022\036\n\006prese"
  "t\030\002 \002(\0132\016.TSP.Reference\022*\n\022replacement_p"
  "reset\030\003 \002(\0132\016.TSP.Reference\"\303\001\n\033CommandP"
  "ropertyEntryArchive\022\020\n\010property\030\001 \002(\r\022\014\n"
  "\004type\030\002 \002(\005\022\025\n\rinteger_value\030\003 \001(\005\022\023\n\013fl"
  "oat_value\030\004 \001(\002\022\024\n\014double_value\030\005 \001(\001\022\024\n"
  "\014string_value\030\006 \001(\t\022%\n\rtsp_reference\030\007 \001"
  "(\0132\016.TSP.Reference*\005\010\010\020\321\017\"W\n\031CommandProp"
  "ertyMapArchive\022:\n\020property_entries\030\001 \003(\013"
  "2 .TSS.CommandPropertyEntryArchive*G\n\tVa"
  "lueType\022\016\n\nObjectType\020\000\022\013\n\007IntType\020\001\022\r\n\t"
  "FloatType\020\002\022\016\n\nDoubleType\020\003*\272\001\n\014Property"
  "Type\022\027\n\023InvalidPropertyType\020\001\022\024\n\020NullPro"
  "pertyType\020\002\022\027\n\023IntegerPropertyType\020\003\022\025\n\021"
  "FloatPropertyType\020\004\022\026\n\022DoublePropertyTyp"
  "e\020\005\022\030\n\024NSStringPropertyType\020\006\022\031\n\025TSPObje"
  "ctPropertyType\020\007:;\n\005color\022 .TSS.CommandP"
  "ropertyEntryArchive\030\010 \001(\0132\n.TSP.Color"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSSArchives_2eproto_deps[2] = {
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSSArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSSArchives_2eproto = {
    false, false, 4077, descriptor_table_protodef_TSSArchives_2eproto,
    "TSSArchives.proto",
    &descriptor_table_TSSArchives_2eproto_once, descriptor_table_TSSArchives_2eproto_deps, 2, 17,
    schemas, file_default_instances, TableStruct_TSSArchives_2eproto::offsets,
    file_level_metadata_TSSArchives_2eproto, file_level_enum_descriptors_TSSArchives_2eproto,
    file_level_service_descriptors_TSSArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSSArchives_2eproto_getter() {
  return &descriptor_table_TSSArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSSArchives_2eproto(&descriptor_table_TSSArchives_2eproto);
namespace TSS {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSSArchives_2eproto);
  return file_level_enum_descriptors_TSSArchives_2eproto[0];
}
bool ValueType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSSArchives_2eproto);
  return file_level_enum_descriptors_TSSArchives_2eproto[1];
}
bool PropertyType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class StyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleArchive>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_style_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& parent(const StyleArchive* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_variation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& stylesheet(const StyleArchive* msg);
  static void set_has_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSP::Reference&
StyleArchive::_Internal::parent(const StyleArchive* msg) {
  return *msg->_impl_.parent_;
}
const ::TSP::Reference&
StyleArchive::_Internal::stylesheet(const StyleArchive* msg) {
  return *msg->_impl_.stylesheet_;
}
void StyleArchive::clear_parent() {
  if (_impl_.parent_ != nullptr) _impl_.parent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void StyleArchive::clear_stylesheet() {
  if (_impl_.stylesheet_ != nullptr) _impl_.stylesheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
StyleArchive::StyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.StyleArchive)
}
StyleArchive::StyleArchive(const StyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.style_identifier_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.stylesheet_){nullptr}
    , decltype(_impl_.is_variation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.style_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.style_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_style_identifier()) {
    _this->_impl_.style_identifier_.Set(from._internal_style_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::TSP::Reference(*from._impl_.parent_);
  }
  if (from._internal_has_stylesheet()) {
    _this->_impl_.stylesheet_ = new ::TSP::Reference(*from._impl_.stylesheet_);
  }
  _this->_impl_.is_variation_ = from._impl_.is_variation_;
  // @@protoc_insertion_point(copy_constructor:TSS.StyleArchive)
}

inline void StyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.style_identifier_){}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.stylesheet_){nullptr}
    , decltype(_impl_.is_variation_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.style_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.style_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StyleArchive::~StyleArchive() {
  // @@protoc_insertion_point(destructor:TSS.StyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.style_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.stylesheet_;
}

void StyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.StyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.style_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.parent_ != nullptr);
      _impl_.parent_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.stylesheet_ != nullptr);
      _impl_.stylesheet_->Clear();
    }
  }
  _impl_.is_variation_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSS.StyleArchive.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string style_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_style_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSS.StyleArchive.style_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference parent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_variation = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_variation(&has_bits);
          _impl_.is_variation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference stylesheet = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stylesheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.StyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSS.StyleArchive.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string style_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_style_identifier().data(), static_cast<int>(this->_internal_style_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSS.StyleArchive.style_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_style_identifier(), target);
  }

  // optional .TSP.Reference parent = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::parent(this),
        _Internal::parent(this).GetCachedSize(), target, stream);
  }

  // optional bool is_variation = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_variation(), target);
  }

  // optional .TSP.Reference stylesheet = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stylesheet(this),
        _Internal::stylesheet(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.StyleArchive)
  return target;
}

size_t StyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.StyleArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string style_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_style_identifier());
    }

    // optional .TSP.Reference parent = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parent_);
    }

    // optional .TSP.Reference stylesheet = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stylesheet_);
    }

    // optional bool is_variation = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyleArchive::GetClassData() const { return &_class_data_; }


void StyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StyleArchive*>(&to_msg);
  auto& from = static_cast<const StyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.StyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_style_identifier(from._internal_style_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_parent()->::TSP::Reference::MergeFrom(
          from._internal_parent());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_stylesheet()->::TSP::Reference::MergeFrom(
          from._internal_stylesheet());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_variation_ = from._impl_.is_variation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyleArchive::CopyFrom(const StyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.StyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleArchive::IsInitialized() const {
  if (_internal_has_parent()) {
    if (!_impl_.parent_->IsInitialized()) return false;
  }
  if (_internal_has_stylesheet()) {
    if (!_impl_.stylesheet_->IsInitialized()) return false;
  }
  return true;
}

void StyleArchive::InternalSwap(StyleArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.style_identifier_, lhs_arena,
      &other->_impl_.style_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleArchive, _impl_.is_variation_)
      + sizeof(StyleArchive::_impl_.is_variation_)
      - PROTOBUF_FIELD_OFFSET(StyleArchive, _impl_.parent_)>(
          reinterpret_cast<char*>(&_impl_.parent_),
          reinterpret_cast<char*>(&other->_impl_.parent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[0]);
}

// ===================================================================

class StylesheetArchive_IdentifiedStyleEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<StylesheetArchive_IdentifiedStyleEntry>()._impl_._has_bits_);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& style(const StylesheetArchive_IdentifiedStyleEntry* msg);
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
StylesheetArchive_IdentifiedStyleEntry::_Internal::style(const StylesheetArchive_IdentifiedStyleEntry* msg) {
  return *msg->_impl_.style_;
}
void StylesheetArchive_IdentifiedStyleEntry::clear_style() {
  if (_impl_.style_ != nullptr) _impl_.style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
StylesheetArchive_IdentifiedStyleEntry::StylesheetArchive_IdentifiedStyleEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.StylesheetArchive.IdentifiedStyleEntry)
}
StylesheetArchive_IdentifiedStyleEntry::StylesheetArchive_IdentifiedStyleEntry(const StylesheetArchive_IdentifiedStyleEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StylesheetArchive_IdentifiedStyleEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_style()) {
    _this->_impl_.style_ = new ::TSP::Reference(*from._impl_.style_);
  }
  // @@protoc_insertion_point(copy_constructor:TSS.StylesheetArchive.IdentifiedStyleEntry)
}

inline void StylesheetArchive_IdentifiedStyleEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.style_){nullptr}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StylesheetArchive_IdentifiedStyleEntry::~StylesheetArchive_IdentifiedStyleEntry() {
  // @@protoc_insertion_point(destructor:TSS.StylesheetArchive.IdentifiedStyleEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StylesheetArchive_IdentifiedStyleEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.style_;
}

void StylesheetArchive_IdentifiedStyleEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StylesheetArchive_IdentifiedStyleEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.StylesheetArchive.IdentifiedStyleEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.style_ != nullptr);
      _impl_.style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StylesheetArchive_IdentifiedStyleEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSS.StylesheetArchive.IdentifiedStyleEntry.identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StylesheetArchive_IdentifiedStyleEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.StylesheetArchive.IdentifiedStyleEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSS.StylesheetArchive.IdentifiedStyleEntry.identifier");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_identifier(), target);
  }

  // required .TSP.Reference style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::style(this),
        _Internal::style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.StylesheetArchive.IdentifiedStyleEntry)
  return target;
}

size_t StylesheetArchive_IdentifiedStyleEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSS.StylesheetArchive.IdentifiedStyleEntry)
  size_t total_size = 0;

  if (_internal_has_identifier()) {
    // required string identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  if (_internal_has_style()) {
    // required .TSP.Reference style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.style_);
  }

  return total_size;
}
size_t StylesheetArchive_IdentifiedStyleEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.StylesheetArchive.IdentifiedStyleEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string identifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());

    // required .TSP.Reference style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StylesheetArchive_IdentifiedStyleEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StylesheetArchive_IdentifiedStyleEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StylesheetArchive_IdentifiedStyleEntry::GetClassData() const { return &_class_data_; }


void StylesheetArchive_IdentifiedStyleEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StylesheetArchive_IdentifiedStyleEntry*>(&to_msg);
  auto& from = static_cast<const StylesheetArchive_IdentifiedStyleEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.StylesheetArchive.IdentifiedStyleEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_style()->::TSP::Reference::MergeFrom(
          from._internal_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StylesheetArchive_IdentifiedStyleEntry::CopyFrom(const StylesheetArchive_IdentifiedStyleEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.StylesheetArchive.IdentifiedStyleEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylesheetArchive_IdentifiedStyleEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_style()) {
    if (!_impl_.style_->IsInitialized()) return false;
  }
  return true;
}

void StylesheetArchive_IdentifiedStyleEntry::InternalSwap(StylesheetArchive_IdentifiedStyleEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  swap(_impl_.style_, other->_impl_.style_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StylesheetArchive_IdentifiedStyleEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[1]);
}

// ===================================================================

class StylesheetArchive_StyleChildrenEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<StylesheetArchive_StyleChildrenEntry>()._impl_._has_bits_);
  static const ::TSP::Reference& parent(const StylesheetArchive_StyleChildrenEntry* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
StylesheetArchive_StyleChildrenEntry::_Internal::parent(const StylesheetArchive_StyleChildrenEntry* msg) {
  return *msg->_impl_.parent_;
}
void StylesheetArchive_StyleChildrenEntry::clear_parent() {
  if (_impl_.parent_ != nullptr) _impl_.parent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StylesheetArchive_StyleChildrenEntry::clear_children() {
  _impl_.children_.Clear();
}
StylesheetArchive_StyleChildrenEntry::StylesheetArchive_StyleChildrenEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.StylesheetArchive.StyleChildrenEntry)
}
StylesheetArchive_StyleChildrenEntry::StylesheetArchive_StyleChildrenEntry(const StylesheetArchive_StyleChildrenEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StylesheetArchive_StyleChildrenEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::TSP::Reference(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:TSS.StylesheetArchive.StyleChildrenEntry)
}

inline void StylesheetArchive_StyleChildrenEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.children_){arena}
    , decltype(_impl_.parent_){nullptr}
  };
}

StylesheetArchive_StyleChildrenEntry::~StylesheetArchive_StyleChildrenEntry() {
  // @@protoc_insertion_point(destructor:TSS.StylesheetArchive.StyleChildrenEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StylesheetArchive_StyleChildrenEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void StylesheetArchive_StyleChildrenEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StylesheetArchive_StyleChildrenEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.StylesheetArchive.StyleChildrenEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.parent_ != nullptr);
    _impl_.parent_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StylesheetArchive_StyleChildrenEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference children = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StylesheetArchive_StyleChildrenEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.StylesheetArchive.StyleChildrenEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference parent = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::parent(this),
        _Internal::parent(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference children = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.StylesheetArchive.StyleChildrenEntry)
  return target;
}

size_t StylesheetArchive_StyleChildrenEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.StylesheetArchive.StyleChildrenEntry)
  size_t total_size = 0;

  // required .TSP.Reference parent = 1;
  if (_internal_has_parent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference children = 2;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StylesheetArchive_StyleChildrenEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StylesheetArchive_StyleChildrenEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StylesheetArchive_StyleChildrenEntry::GetClassData() const { return &_class_data_; }


void StylesheetArchive_StyleChildrenEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StylesheetArchive_StyleChildrenEntry*>(&to_msg);
  auto& from = static_cast<const StylesheetArchive_StyleChildrenEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.StylesheetArchive.StyleChildrenEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  if (from._internal_has_parent()) {
    _this->_internal_mutable_parent()->::TSP::Reference::MergeFrom(
        from._internal_parent());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StylesheetArchive_StyleChildrenEntry::CopyFrom(const StylesheetArchive_StyleChildrenEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.StylesheetArchive.StyleChildrenEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylesheetArchive_StyleChildrenEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.children_))
    return false;
  if (_internal_has_parent()) {
    if (!_impl_.parent_->IsInitialized()) return false;
  }
  return true;
}

void StylesheetArchive_StyleChildrenEntry::InternalSwap(StylesheetArchive_StyleChildrenEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  swap(_impl_.parent_, other->_impl_.parent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StylesheetArchive_StyleChildrenEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[2]);
}

// ===================================================================

class StylesheetArchive_VersionedStyles::_Internal {
 public:
};

void StylesheetArchive_VersionedStyles::clear_styles() {
  _impl_.styles_.Clear();
}
StylesheetArchive_VersionedStyles::StylesheetArchive_VersionedStyles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.StylesheetArchive.VersionedStyles)
}
StylesheetArchive_VersionedStyles::StylesheetArchive_VersionedStyles(const StylesheetArchive_VersionedStyles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StylesheetArchive_VersionedStyles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.styles_){from._impl_.styles_}
    , decltype(_impl_.identifier_to_style_map_){from._impl_.identifier_to_style_map_}
    , decltype(_impl_.parent_to_children_style_map_){from._impl_.parent_to_children_style_map_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSS.StylesheetArchive.VersionedStyles)
}

inline void StylesheetArchive_VersionedStyles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.styles_){arena}
    , decltype(_impl_.identifier_to_style_map_){arena}
    , decltype(_impl_.parent_to_children_style_map_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

StylesheetArchive_VersionedStyles::~StylesheetArchive_VersionedStyles() {
  // @@protoc_insertion_point(destructor:TSS.StylesheetArchive.VersionedStyles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StylesheetArchive_VersionedStyles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.styles_.~RepeatedPtrField();
  _impl_.identifier_to_style_map_.~RepeatedPtrField();
  _impl_.parent_to_children_style_map_.~RepeatedPtrField();
}

void StylesheetArchive_VersionedStyles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StylesheetArchive_VersionedStyles::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.StylesheetArchive.VersionedStyles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.styles_.Clear();
  _impl_.identifier_to_style_map_.Clear();
  _impl_.parent_to_children_style_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StylesheetArchive_VersionedStyles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference styles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier_to_style_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parent_to_children_style_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StylesheetArchive_VersionedStyles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.StylesheetArchive.VersionedStyles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference styles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifier_to_style_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifier_to_style_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parent_to_children_style_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_parent_to_children_style_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.StylesheetArchive.VersionedStyles)
  return target;
}

size_t StylesheetArchive_VersionedStyles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.StylesheetArchive.VersionedStyles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference styles = 1;
  total_size += 1UL * this->_internal_styles_size();
  for (const auto& msg : this->_impl_.styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
  total_size += 1UL * this->_internal_identifier_to_style_map_size();
  for (const auto& msg : this->_impl_.identifier_to_style_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 3;
  total_size += 1UL * this->_internal_parent_to_children_style_map_size();
  for (const auto& msg : this->_impl_.parent_to_children_style_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StylesheetArchive_VersionedStyles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StylesheetArchive_VersionedStyles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StylesheetArchive_VersionedStyles::GetClassData() const { return &_class_data_; }


void StylesheetArchive_VersionedStyles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StylesheetArchive_VersionedStyles*>(&to_msg);
  auto& from = static_cast<const StylesheetArchive_VersionedStyles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.StylesheetArchive.VersionedStyles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.styles_.MergeFrom(from._impl_.styles_);
  _this->_impl_.identifier_to_style_map_.MergeFrom(from._impl_.identifier_to_style_map_);
  _this->_impl_.parent_to_children_style_map_.MergeFrom(from._impl_.parent_to_children_style_map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StylesheetArchive_VersionedStyles::CopyFrom(const StylesheetArchive_VersionedStyles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.StylesheetArchive.VersionedStyles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylesheetArchive_VersionedStyles::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifier_to_style_map_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.parent_to_children_style_map_))
    return false;
  return true;
}

void StylesheetArchive_VersionedStyles::InternalSwap(StylesheetArchive_VersionedStyles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.styles_.InternalSwap(&other->_impl_.styles_);
  _impl_.identifier_to_style_map_.InternalSwap(&other->_impl_.identifier_to_style_map_);
  _impl_.parent_to_children_style_map_.InternalSwap(&other->_impl_.parent_to_children_style_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StylesheetArchive_VersionedStyles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[3]);
}

// ===================================================================

class StylesheetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StylesheetArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& parent(const StylesheetArchive* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_locked(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_can_cull_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSS::StylesheetArchive_VersionedStyles& styles_for_10_0(const StylesheetArchive* msg);
  static void set_has_styles_for_10_0(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSS::StylesheetArchive_VersionedStyles& styles_for_10_1(const StylesheetArchive* msg);
  static void set_has_styles_for_10_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSS::StylesheetArchive_VersionedStyles& styles_for_10_2(const StylesheetArchive* msg);
  static void set_has_styles_for_10_2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSS::StylesheetArchive_VersionedStyles& styles_for_11_0(const StylesheetArchive* msg);
  static void set_has_styles_for_11_0(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSS::StylesheetArchive_VersionedStyles& styles_for_11_1(const StylesheetArchive* msg);
  static void set_has_styles_for_11_1(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSS::StylesheetArchive_VersionedStyles& styles_for_11_2(const StylesheetArchive* msg);
  static void set_has_styles_for_11_2(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSS::StylesheetArchive_VersionedStyles& styles_for_12_0(const StylesheetArchive* msg);
  static void set_has_styles_for_12_0(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSS::StylesheetArchive_VersionedStyles& styles_for_12_1(const StylesheetArchive* msg);
  static void set_has_styles_for_12_1(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSS::StylesheetArchive_VersionedStyles& styles_for_12_2(const StylesheetArchive* msg);
  static void set_has_styles_for_12_2(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::TSP::Reference&
StylesheetArchive::_Internal::parent(const StylesheetArchive* msg) {
  return *msg->_impl_.parent_;
}
const ::TSS::StylesheetArchive_VersionedStyles&
StylesheetArchive::_Internal::styles_for_10_0(const StylesheetArchive* msg) {
  return *msg->_impl_.styles_for_10_0_;
}
const ::TSS::StylesheetArchive_VersionedStyles&
StylesheetArchive::_Internal::styles_for_10_1(const StylesheetArchive* msg) {
  return *msg->_impl_.styles_for_10_1_;
}
const ::TSS::StylesheetArchive_VersionedStyles&
StylesheetArchive::_Internal::styles_for_10_2(const StylesheetArchive* msg) {
  return *msg->_impl_.styles_for_10_2_;
}
const ::TSS::StylesheetArchive_VersionedStyles&
StylesheetArchive::_Internal::styles_for_11_0(const StylesheetArchive* msg) {
  return *msg->_impl_.styles_for_11_0_;
}
const ::TSS::StylesheetArchive_VersionedStyles&
StylesheetArchive::_Internal::styles_for_11_1(const StylesheetArchive* msg) {
  return *msg->_impl_.styles_for_11_1_;
}
const ::TSS::StylesheetArchive_VersionedStyles&
StylesheetArchive::_Internal::styles_for_11_2(const StylesheetArchive* msg) {
  return *msg->_impl_.styles_for_11_2_;
}
const ::TSS::StylesheetArchive_VersionedStyles&
StylesheetArchive::_Internal::styles_for_12_0(const StylesheetArchive* msg) {
  return *msg->_impl_.styles_for_12_0_;
}
const ::TSS::StylesheetArchive_VersionedStyles&
StylesheetArchive::_Internal::styles_for_12_1(const StylesheetArchive* msg) {
  return *msg->_impl_.styles_for_12_1_;
}
const ::TSS::StylesheetArchive_VersionedStyles&
StylesheetArchive::_Internal::styles_for_12_2(const StylesheetArchive* msg) {
  return *msg->_impl_.styles_for_12_2_;
}
void StylesheetArchive::clear_styles() {
  _impl_.styles_.Clear();
}
void StylesheetArchive::clear_parent() {
  if (_impl_.parent_ != nullptr) _impl_.parent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
StylesheetArchive::StylesheetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.StylesheetArchive)
}
StylesheetArchive::StylesheetArchive(const StylesheetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StylesheetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.styles_){from._impl_.styles_}
    , decltype(_impl_.identifier_to_style_map_){from._impl_.identifier_to_style_map_}
    , decltype(_impl_.parent_to_children_style_map_){from._impl_.parent_to_children_style_map_}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.styles_for_10_0_){nullptr}
    , decltype(_impl_.styles_for_10_1_){nullptr}
    , decltype(_impl_.styles_for_10_2_){nullptr}
    , decltype(_impl_.styles_for_11_0_){nullptr}
    , decltype(_impl_.styles_for_11_1_){nullptr}
    , decltype(_impl_.styles_for_11_2_){nullptr}
    , decltype(_impl_.styles_for_12_0_){nullptr}
    , decltype(_impl_.styles_for_12_1_){nullptr}
    , decltype(_impl_.styles_for_12_2_){nullptr}
    , decltype(_impl_.can_cull_styles_){}
    , decltype(_impl_.is_locked_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::TSP::Reference(*from._impl_.parent_);
  }
  if (from._internal_has_styles_for_10_0()) {
    _this->_impl_.styles_for_10_0_ = new ::TSS::StylesheetArchive_VersionedStyles(*from._impl_.styles_for_10_0_);
  }
  if (from._internal_has_styles_for_10_1()) {
    _this->_impl_.styles_for_10_1_ = new ::TSS::StylesheetArchive_VersionedStyles(*from._impl_.styles_for_10_1_);
  }
  if (from._internal_has_styles_for_10_2()) {
    _this->_impl_.styles_for_10_2_ = new ::TSS::StylesheetArchive_VersionedStyles(*from._impl_.styles_for_10_2_);
  }
  if (from._internal_has_styles_for_11_0()) {
    _this->_impl_.styles_for_11_0_ = new ::TSS::StylesheetArchive_VersionedStyles(*from._impl_.styles_for_11_0_);
  }
  if (from._internal_has_styles_for_11_1()) {
    _this->_impl_.styles_for_11_1_ = new ::TSS::StylesheetArchive_VersionedStyles(*from._impl_.styles_for_11_1_);
  }
  if (from._internal_has_styles_for_11_2()) {
    _this->_impl_.styles_for_11_2_ = new ::TSS::StylesheetArchive_VersionedStyles(*from._impl_.styles_for_11_2_);
  }
  if (from._internal_has_styles_for_12_0()) {
    _this->_impl_.styles_for_12_0_ = new ::TSS::StylesheetArchive_VersionedStyles(*from._impl_.styles_for_12_0_);
  }
  if (from._internal_has_styles_for_12_1()) {
    _this->_impl_.styles_for_12_1_ = new ::TSS::StylesheetArchive_VersionedStyles(*from._impl_.styles_for_12_1_);
  }
  if (from._internal_has_styles_for_12_2()) {
    _this->_impl_.styles_for_12_2_ = new ::TSS::StylesheetArchive_VersionedStyles(*from._impl_.styles_for_12_2_);
  }
  ::memcpy(&_impl_.can_cull_styles_, &from._impl_.can_cull_styles_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_locked_) -
    reinterpret_cast<char*>(&_impl_.can_cull_styles_)) + sizeof(_impl_.is_locked_));
  // @@protoc_insertion_point(copy_constructor:TSS.StylesheetArchive)
}

inline void StylesheetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.styles_){arena}
    , decltype(_impl_.identifier_to_style_map_){arena}
    , decltype(_impl_.parent_to_children_style_map_){arena}
    , decltype(_impl_.parent_){nullptr}
    , decltype(_impl_.styles_for_10_0_){nullptr}
    , decltype(_impl_.styles_for_10_1_){nullptr}
    , decltype(_impl_.styles_for_10_2_){nullptr}
    , decltype(_impl_.styles_for_11_0_){nullptr}
    , decltype(_impl_.styles_for_11_1_){nullptr}
    , decltype(_impl_.styles_for_11_2_){nullptr}
    , decltype(_impl_.styles_for_12_0_){nullptr}
    , decltype(_impl_.styles_for_12_1_){nullptr}
    , decltype(_impl_.styles_for_12_2_){nullptr}
    , decltype(_impl_.can_cull_styles_){false}
    , decltype(_impl_.is_locked_){true}
  };
}

StylesheetArchive::~StylesheetArchive() {
  // @@protoc_insertion_point(destructor:TSS.StylesheetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StylesheetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.styles_.~RepeatedPtrField();
  _impl_.identifier_to_style_map_.~RepeatedPtrField();
  _impl_.parent_to_children_style_map_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.parent_;
  if (this != internal_default_instance()) delete _impl_.styles_for_10_0_;
  if (this != internal_default_instance()) delete _impl_.styles_for_10_1_;
  if (this != internal_default_instance()) delete _impl_.styles_for_10_2_;
  if (this != internal_default_instance()) delete _impl_.styles_for_11_0_;
  if (this != internal_default_instance()) delete _impl_.styles_for_11_1_;
  if (this != internal_default_instance()) delete _impl_.styles_for_11_2_;
  if (this != internal_default_instance()) delete _impl_.styles_for_12_0_;
  if (this != internal_default_instance()) delete _impl_.styles_for_12_1_;
  if (this != internal_default_instance()) delete _impl_.styles_for_12_2_;
}

void StylesheetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StylesheetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.StylesheetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.styles_.Clear();
  _impl_.identifier_to_style_map_.Clear();
  _impl_.parent_to_children_style_map_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.parent_ != nullptr);
      _impl_.parent_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.styles_for_10_0_ != nullptr);
      _impl_.styles_for_10_0_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.styles_for_10_1_ != nullptr);
      _impl_.styles_for_10_1_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.styles_for_10_2_ != nullptr);
      _impl_.styles_for_10_2_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.styles_for_11_0_ != nullptr);
      _impl_.styles_for_11_0_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.styles_for_11_1_ != nullptr);
      _impl_.styles_for_11_1_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.styles_for_11_2_ != nullptr);
      _impl_.styles_for_11_2_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.styles_for_12_0_ != nullptr);
      _impl_.styles_for_12_0_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.styles_for_12_1_ != nullptr);
      _impl_.styles_for_12_1_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.styles_for_12_2_ != nullptr);
      _impl_.styles_for_12_2_->Clear();
    }
  }
  if (cached_has_bits & 0x00000c00u) {
    _impl_.can_cull_styles_ = false;
    _impl_.is_locked_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StylesheetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference styles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifier_to_style_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference parent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_locked = 4 [default = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_locked(&has_bits);
          _impl_.is_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parent_to_children_style_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool can_cull_styles = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_can_cull_styles(&has_bits);
          _impl_.can_cull_styles_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_0 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles_for_10_0(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles_for_10_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles_for_10_2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_0 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles_for_11_0(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_1 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles_for_11_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_2 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles_for_11_2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSS.StylesheetArchive.VersionedStyles styles_for_12_0 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles_for_12_0(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSS.StylesheetArchive.VersionedStyles styles_for_12_1 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles_for_12_1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSS.StylesheetArchive.VersionedStyles styles_for_12_2 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles_for_12_2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StylesheetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.StylesheetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference styles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifier_to_style_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifier_to_style_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference parent = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::parent(this),
        _Internal::parent(this).GetCachedSize(), target, stream);
  }

  // optional bool is_locked = 4 [default = true];
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_locked(), target);
  }

  // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_parent_to_children_style_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_parent_to_children_style_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool can_cull_styles = 6 [default = false];
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_can_cull_styles(), target);
  }

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_0 = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::styles_for_10_0(this),
        _Internal::styles_for_10_0(this).GetCachedSize(), target, stream);
  }

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_1 = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::styles_for_10_1(this),
        _Internal::styles_for_10_1(this).GetCachedSize(), target, stream);
  }

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_2 = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::styles_for_10_2(this),
        _Internal::styles_for_10_2(this).GetCachedSize(), target, stream);
  }

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_0 = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::styles_for_11_0(this),
        _Internal::styles_for_11_0(this).GetCachedSize(), target, stream);
  }

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_1 = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::styles_for_11_1(this),
        _Internal::styles_for_11_1(this).GetCachedSize(), target, stream);
  }

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_2 = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::styles_for_11_2(this),
        _Internal::styles_for_11_2(this).GetCachedSize(), target, stream);
  }

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_12_0 = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::styles_for_12_0(this),
        _Internal::styles_for_12_0(this).GetCachedSize(), target, stream);
  }

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_12_1 = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::styles_for_12_1(this),
        _Internal::styles_for_12_1(this).GetCachedSize(), target, stream);
  }

  // optional .TSS.StylesheetArchive.VersionedStyles styles_for_12_2 = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::styles_for_12_2(this),
        _Internal::styles_for_12_2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.StylesheetArchive)
  return target;
}

size_t StylesheetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.StylesheetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference styles = 1;
  total_size += 1UL * this->_internal_styles_size();
  for (const auto& msg : this->_impl_.styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSS.StylesheetArchive.IdentifiedStyleEntry identifier_to_style_map = 2;
  total_size += 1UL * this->_internal_identifier_to_style_map_size();
  for (const auto& msg : this->_impl_.identifier_to_style_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSS.StylesheetArchive.StyleChildrenEntry parent_to_children_style_map = 5;
  total_size += 1UL * this->_internal_parent_to_children_style_map_size();
  for (const auto& msg : this->_impl_.parent_to_children_style_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.Reference parent = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.parent_);
    }

    // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_0 = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.styles_for_10_0_);
    }

    // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_1 = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.styles_for_10_1_);
    }

    // optional .TSS.StylesheetArchive.VersionedStyles styles_for_10_2 = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.styles_for_10_2_);
    }

    // optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_0 = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.styles_for_11_0_);
    }

    // optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_1 = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.styles_for_11_1_);
    }

    // optional .TSS.StylesheetArchive.VersionedStyles styles_for_11_2 = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.styles_for_11_2_);
    }

    // optional .TSS.StylesheetArchive.VersionedStyles styles_for_12_0 = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.styles_for_12_0_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSS.StylesheetArchive.VersionedStyles styles_for_12_1 = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.styles_for_12_1_);
    }

    // optional .TSS.StylesheetArchive.VersionedStyles styles_for_12_2 = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.styles_for_12_2_);
    }

    // optional bool can_cull_styles = 6 [default = false];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_locked = 4 [default = true];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StylesheetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StylesheetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StylesheetArchive::GetClassData() const { return &_class_data_; }


void StylesheetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StylesheetArchive*>(&to_msg);
  auto& from = static_cast<const StylesheetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.StylesheetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.styles_.MergeFrom(from._impl_.styles_);
  _this->_impl_.identifier_to_style_map_.MergeFrom(from._impl_.identifier_to_style_map_);
  _this->_impl_.parent_to_children_style_map_.MergeFrom(from._impl_.parent_to_children_style_map_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_parent()->::TSP::Reference::MergeFrom(
          from._internal_parent());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_styles_for_10_0()->::TSS::StylesheetArchive_VersionedStyles::MergeFrom(
          from._internal_styles_for_10_0());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_styles_for_10_1()->::TSS::StylesheetArchive_VersionedStyles::MergeFrom(
          from._internal_styles_for_10_1());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_styles_for_10_2()->::TSS::StylesheetArchive_VersionedStyles::MergeFrom(
          from._internal_styles_for_10_2());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_styles_for_11_0()->::TSS::StylesheetArchive_VersionedStyles::MergeFrom(
          from._internal_styles_for_11_0());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_styles_for_11_1()->::TSS::StylesheetArchive_VersionedStyles::MergeFrom(
          from._internal_styles_for_11_1());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_styles_for_11_2()->::TSS::StylesheetArchive_VersionedStyles::MergeFrom(
          from._internal_styles_for_11_2());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_styles_for_12_0()->::TSS::StylesheetArchive_VersionedStyles::MergeFrom(
          from._internal_styles_for_12_0());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_styles_for_12_1()->::TSS::StylesheetArchive_VersionedStyles::MergeFrom(
          from._internal_styles_for_12_1());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_styles_for_12_2()->::TSS::StylesheetArchive_VersionedStyles::MergeFrom(
          from._internal_styles_for_12_2());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.can_cull_styles_ = from._impl_.can_cull_styles_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.is_locked_ = from._impl_.is_locked_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StylesheetArchive::CopyFrom(const StylesheetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.StylesheetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StylesheetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.identifier_to_style_map_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.parent_to_children_style_map_))
    return false;
  if (_internal_has_parent()) {
    if (!_impl_.parent_->IsInitialized()) return false;
  }
  if (_internal_has_styles_for_10_0()) {
    if (!_impl_.styles_for_10_0_->IsInitialized()) return false;
  }
  if (_internal_has_styles_for_10_1()) {
    if (!_impl_.styles_for_10_1_->IsInitialized()) return false;
  }
  if (_internal_has_styles_for_10_2()) {
    if (!_impl_.styles_for_10_2_->IsInitialized()) return false;
  }
  if (_internal_has_styles_for_11_0()) {
    if (!_impl_.styles_for_11_0_->IsInitialized()) return false;
  }
  if (_internal_has_styles_for_11_1()) {
    if (!_impl_.styles_for_11_1_->IsInitialized()) return false;
  }
  if (_internal_has_styles_for_11_2()) {
    if (!_impl_.styles_for_11_2_->IsInitialized()) return false;
  }
  if (_internal_has_styles_for_12_0()) {
    if (!_impl_.styles_for_12_0_->IsInitialized()) return false;
  }
  if (_internal_has_styles_for_12_1()) {
    if (!_impl_.styles_for_12_1_->IsInitialized()) return false;
  }
  if (_internal_has_styles_for_12_2()) {
    if (!_impl_.styles_for_12_2_->IsInitialized()) return false;
  }
  return true;
}

void StylesheetArchive::InternalSwap(StylesheetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.styles_.InternalSwap(&other->_impl_.styles_);
  _impl_.identifier_to_style_map_.InternalSwap(&other->_impl_.identifier_to_style_map_);
  _impl_.parent_to_children_style_map_.InternalSwap(&other->_impl_.parent_to_children_style_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StylesheetArchive, _impl_.can_cull_styles_)
      + sizeof(StylesheetArchive::_impl_.can_cull_styles_)
      - PROTOBUF_FIELD_OFFSET(StylesheetArchive, _impl_.parent_)>(
          reinterpret_cast<char*>(&_impl_.parent_),
          reinterpret_cast<char*>(&other->_impl_.parent_));
  swap(_impl_.is_locked_, other->_impl_.is_locked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StylesheetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[4]);
}

// ===================================================================

class ThemeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& legacy_stylesheet(const ThemeArchive* msg);
  static void set_has_legacy_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_theme_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& document_stylesheet(const ThemeArchive* msg);
  static void set_has_document_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::TSP::Reference&
ThemeArchive::_Internal::legacy_stylesheet(const ThemeArchive* msg) {
  return *msg->_impl_.legacy_stylesheet_;
}
const ::TSP::Reference&
ThemeArchive::_Internal::document_stylesheet(const ThemeArchive* msg) {
  return *msg->_impl_.document_stylesheet_;
}
void ThemeArchive::clear_legacy_stylesheet() {
  if (_impl_.legacy_stylesheet_ != nullptr) _impl_.legacy_stylesheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ThemeArchive::clear_document_stylesheet() {
  if (_impl_.document_stylesheet_ != nullptr) _impl_.document_stylesheet_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ThemeArchive::clear_old_uuids_for_preset_replacements() {
  _impl_.old_uuids_for_preset_replacements_.Clear();
}
void ThemeArchive::clear_new_uuids_for_preset_replacements() {
  _impl_.new_uuids_for_preset_replacements_.Clear();
}
void ThemeArchive::clear_color_presets() {
  _impl_.color_presets_.Clear();
}
ThemeArchive::ThemeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.ThemeArchive)
}
ThemeArchive::ThemeArchive(const ThemeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_uuids_for_preset_replacements_){from._impl_.old_uuids_for_preset_replacements_}
    , decltype(_impl_.new_uuids_for_preset_replacements_){from._impl_.new_uuids_for_preset_replacements_}
    , decltype(_impl_.color_presets_){from._impl_.color_presets_}
    , decltype(_impl_.theme_identifier_){}
    , decltype(_impl_.legacy_stylesheet_){nullptr}
    , decltype(_impl_.document_stylesheet_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _impl_.theme_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.theme_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_theme_identifier()) {
    _this->_impl_.theme_identifier_.Set(from._internal_theme_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_legacy_stylesheet()) {
    _this->_impl_.legacy_stylesheet_ = new ::TSP::Reference(*from._impl_.legacy_stylesheet_);
  }
  if (from._internal_has_document_stylesheet()) {
    _this->_impl_.document_stylesheet_ = new ::TSP::Reference(*from._impl_.document_stylesheet_);
  }
  // @@protoc_insertion_point(copy_constructor:TSS.ThemeArchive)
}

inline void ThemeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_uuids_for_preset_replacements_){arena}
    , decltype(_impl_.new_uuids_for_preset_replacements_){arena}
    , decltype(_impl_.color_presets_){arena}
    , decltype(_impl_.theme_identifier_){}
    , decltype(_impl_.legacy_stylesheet_){nullptr}
    , decltype(_impl_.document_stylesheet_){nullptr}
  };
  _impl_.theme_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.theme_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThemeArchive::~ThemeArchive() {
  // @@protoc_insertion_point(destructor:TSS.ThemeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.old_uuids_for_preset_replacements_.~RepeatedPtrField();
  _impl_.new_uuids_for_preset_replacements_.~RepeatedPtrField();
  _impl_.color_presets_.~RepeatedPtrField();
  _impl_.theme_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.legacy_stylesheet_;
  if (this != internal_default_instance()) delete _impl_.document_stylesheet_;
}

void ThemeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.ThemeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  _impl_.old_uuids_for_preset_replacements_.Clear();
  _impl_.new_uuids_for_preset_replacements_.Clear();
  _impl_.color_presets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.theme_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.legacy_stylesheet_ != nullptr);
      _impl_.legacy_stylesheet_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.document_stylesheet_ != nullptr);
      _impl_.document_stylesheet_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference legacy_stylesheet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_legacy_stylesheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string theme_identifier = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_theme_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSS.ThemeArchive.theme_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference document_stylesheet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_stylesheet(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID old_uuids_for_preset_replacements = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_old_uuids_for_preset_replacements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID new_uuids_for_preset_replacements = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_uuids_for_preset_replacements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Color color_presets = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_color_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((800u <= tag)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.ThemeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference legacy_stylesheet = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::legacy_stylesheet(this),
        _Internal::legacy_stylesheet(this).GetCachedSize(), target, stream);
  }

  // optional string theme_identifier = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_theme_identifier().data(), static_cast<int>(this->_internal_theme_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSS.ThemeArchive.theme_identifier");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_theme_identifier(), target);
  }

  // optional .TSP.Reference document_stylesheet = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::document_stylesheet(this),
        _Internal::document_stylesheet(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID old_uuids_for_preset_replacements = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_uuids_for_preset_replacements_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_uuids_for_preset_replacements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID new_uuids_for_preset_replacements = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_uuids_for_preset_replacements_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_uuids_for_preset_replacements(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Color color_presets = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_color_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_color_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // Extension range [100, 536870912)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 100, 536870912, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.ThemeArchive)
  return target;
}

size_t ThemeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.ThemeArchive)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID old_uuids_for_preset_replacements = 5;
  total_size += 1UL * this->_internal_old_uuids_for_preset_replacements_size();
  for (const auto& msg : this->_impl_.old_uuids_for_preset_replacements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID new_uuids_for_preset_replacements = 6;
  total_size += 1UL * this->_internal_new_uuids_for_preset_replacements_size();
  for (const auto& msg : this->_impl_.new_uuids_for_preset_replacements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Color color_presets = 10;
  total_size += 1UL * this->_internal_color_presets_size();
  for (const auto& msg : this->_impl_.color_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string theme_identifier = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_theme_identifier());
    }

    // optional .TSP.Reference legacy_stylesheet = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.legacy_stylesheet_);
    }

    // optional .TSP.Reference document_stylesheet = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.document_stylesheet_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeArchive::GetClassData() const { return &_class_data_; }


void ThemeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeArchive*>(&to_msg);
  auto& from = static_cast<const ThemeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.ThemeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.old_uuids_for_preset_replacements_.MergeFrom(from._impl_.old_uuids_for_preset_replacements_);
  _this->_impl_.new_uuids_for_preset_replacements_.MergeFrom(from._impl_.new_uuids_for_preset_replacements_);
  _this->_impl_.color_presets_.MergeFrom(from._impl_.color_presets_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_theme_identifier(from._internal_theme_identifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_legacy_stylesheet()->::TSP::Reference::MergeFrom(
          from._internal_legacy_stylesheet());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_document_stylesheet()->::TSP::Reference::MergeFrom(
          from._internal_document_stylesheet());
    }
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeArchive::CopyFrom(const ThemeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.ThemeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeArchive::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_uuids_for_preset_replacements_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.new_uuids_for_preset_replacements_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.color_presets_))
    return false;
  if (_internal_has_legacy_stylesheet()) {
    if (!_impl_.legacy_stylesheet_->IsInitialized()) return false;
  }
  if (_internal_has_document_stylesheet()) {
    if (!_impl_.document_stylesheet_->IsInitialized()) return false;
  }
  return true;
}

void ThemeArchive::InternalSwap(ThemeArchive* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.old_uuids_for_preset_replacements_.InternalSwap(&other->_impl_.old_uuids_for_preset_replacements_);
  _impl_.new_uuids_for_preset_replacements_.InternalSwap(&other->_impl_.new_uuids_for_preset_replacements_);
  _impl_.color_presets_.InternalSwap(&other->_impl_.color_presets_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.theme_identifier_, lhs_arena,
      &other->_impl_.theme_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeArchive, _impl_.document_stylesheet_)
      + sizeof(ThemeArchive::_impl_.document_stylesheet_)
      - PROTOBUF_FIELD_OFFSET(ThemeArchive, _impl_.legacy_stylesheet_)>(
          reinterpret_cast<char*>(&_impl_.legacy_stylesheet_),
          reinterpret_cast<char*>(&other->_impl_.legacy_stylesheet_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[5]);
}

// ===================================================================

class ApplyThemeCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplyThemeCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ApplyThemeCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& old_theme(const ApplyThemeCommandArchive* msg);
  static void set_has_old_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& new_theme(const ApplyThemeCommandArchive* msg);
  static void set_has_new_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ApplyThemeCommandArchive::_Internal::super(const ApplyThemeCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ApplyThemeCommandArchive::_Internal::old_theme(const ApplyThemeCommandArchive* msg) {
  return *msg->_impl_.old_theme_;
}
const ::TSP::Reference&
ApplyThemeCommandArchive::_Internal::new_theme(const ApplyThemeCommandArchive* msg) {
  return *msg->_impl_.new_theme_;
}
void ApplyThemeCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ApplyThemeCommandArchive::clear_commands() {
  _impl_.commands_.Clear();
}
void ApplyThemeCommandArchive::clear_old_theme() {
  if (_impl_.old_theme_ != nullptr) _impl_.old_theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ApplyThemeCommandArchive::clear_new_theme() {
  if (_impl_.new_theme_ != nullptr) _impl_.new_theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ApplyThemeCommandArchive::ApplyThemeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.ApplyThemeCommandArchive)
}
ApplyThemeCommandArchive::ApplyThemeCommandArchive(const ApplyThemeCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApplyThemeCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commands_){from._impl_.commands_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_theme_){nullptr}
    , decltype(_impl_.new_theme_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_theme()) {
    _this->_impl_.old_theme_ = new ::TSP::Reference(*from._impl_.old_theme_);
  }
  if (from._internal_has_new_theme()) {
    _this->_impl_.new_theme_ = new ::TSP::Reference(*from._impl_.new_theme_);
  }
  // @@protoc_insertion_point(copy_constructor:TSS.ApplyThemeCommandArchive)
}

inline void ApplyThemeCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commands_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_theme_){nullptr}
    , decltype(_impl_.new_theme_){nullptr}
  };
}

ApplyThemeCommandArchive::~ApplyThemeCommandArchive() {
  // @@protoc_insertion_point(destructor:TSS.ApplyThemeCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApplyThemeCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commands_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_theme_;
  if (this != internal_default_instance()) delete _impl_.new_theme_;
}

void ApplyThemeCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApplyThemeCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.ApplyThemeCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.commands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_theme_ != nullptr);
      _impl_.old_theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_theme_ != nullptr);
      _impl_.new_theme_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyThemeCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference commands = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_theme = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_theme = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApplyThemeCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.ApplyThemeCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference commands = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_theme = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_theme(this),
        _Internal::old_theme(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference new_theme = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::new_theme(this),
        _Internal::new_theme(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.ApplyThemeCommandArchive)
  return target;
}

size_t ApplyThemeCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.ApplyThemeCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference commands = 2;
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->_impl_.commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference old_theme = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_theme_);
    }

    // optional .TSP.Reference new_theme = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_theme_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyThemeCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApplyThemeCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyThemeCommandArchive::GetClassData() const { return &_class_data_; }


void ApplyThemeCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApplyThemeCommandArchive*>(&to_msg);
  auto& from = static_cast<const ApplyThemeCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.ApplyThemeCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.commands_.MergeFrom(from._impl_.commands_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_theme()->::TSP::Reference::MergeFrom(
          from._internal_old_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_theme()->::TSP::Reference::MergeFrom(
          from._internal_new_theme());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyThemeCommandArchive::CopyFrom(const ApplyThemeCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.ApplyThemeCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyThemeCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.commands_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_theme()) {
    if (!_impl_.old_theme_->IsInitialized()) return false;
  }
  if (_internal_has_new_theme()) {
    if (!_impl_.new_theme_->IsInitialized()) return false;
  }
  return true;
}

void ApplyThemeCommandArchive::InternalSwap(ApplyThemeCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.commands_.InternalSwap(&other->_impl_.commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplyThemeCommandArchive, _impl_.new_theme_)
      + sizeof(ApplyThemeCommandArchive::_impl_.new_theme_)
      - PROTOBUF_FIELD_OFFSET(ApplyThemeCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyThemeCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[6]);
}

// ===================================================================

class ApplyThemeChildCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ApplyThemeChildCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ApplyThemeChildCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& parent(const ApplyThemeChildCommandArchive* msg);
  static void set_has_parent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
ApplyThemeChildCommandArchive::_Internal::super(const ApplyThemeChildCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ApplyThemeChildCommandArchive::_Internal::parent(const ApplyThemeChildCommandArchive* msg) {
  return *msg->_impl_.parent_;
}
void ApplyThemeChildCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ApplyThemeChildCommandArchive::clear_parent() {
  if (_impl_.parent_ != nullptr) _impl_.parent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ApplyThemeChildCommandArchive::ApplyThemeChildCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.ApplyThemeChildCommandArchive)
}
ApplyThemeChildCommandArchive::ApplyThemeChildCommandArchive(const ApplyThemeChildCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ApplyThemeChildCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.parent_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_parent()) {
    _this->_impl_.parent_ = new ::TSP::Reference(*from._impl_.parent_);
  }
  // @@protoc_insertion_point(copy_constructor:TSS.ApplyThemeChildCommandArchive)
}

inline void ApplyThemeChildCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.parent_){nullptr}
  };
}

ApplyThemeChildCommandArchive::~ApplyThemeChildCommandArchive() {
  // @@protoc_insertion_point(destructor:TSS.ApplyThemeChildCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ApplyThemeChildCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.parent_;
}

void ApplyThemeChildCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ApplyThemeChildCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.ApplyThemeChildCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.parent_ != nullptr);
      _impl_.parent_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplyThemeChildCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference parent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApplyThemeChildCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.ApplyThemeChildCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference parent = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::parent(this),
        _Internal::parent(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.ApplyThemeChildCommandArchive)
  return target;
}

size_t ApplyThemeChildCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.ApplyThemeChildCommandArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference parent = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.parent_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplyThemeChildCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ApplyThemeChildCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplyThemeChildCommandArchive::GetClassData() const { return &_class_data_; }


void ApplyThemeChildCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ApplyThemeChildCommandArchive*>(&to_msg);
  auto& from = static_cast<const ApplyThemeChildCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.ApplyThemeChildCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_parent()->::TSP::Reference::MergeFrom(
          from._internal_parent());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplyThemeChildCommandArchive::CopyFrom(const ApplyThemeChildCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.ApplyThemeChildCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyThemeChildCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_parent()) {
    if (!_impl_.parent_->IsInitialized()) return false;
  }
  return true;
}

void ApplyThemeChildCommandArchive::InternalSwap(ApplyThemeChildCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApplyThemeChildCommandArchive, _impl_.parent_)
      + sizeof(ApplyThemeChildCommandArchive::_impl_.parent_)
      - PROTOBUF_FIELD_OFFSET(ApplyThemeChildCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplyThemeChildCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[7]);
}

// ===================================================================

class StyleUpdatePropertyMapCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StyleUpdatePropertyMapCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const StyleUpdatePropertyMapCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& current_style(const StyleUpdatePropertyMapCommandArchive* msg);
  static void set_has_current_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& style_with_old_property_map(const StyleUpdatePropertyMapCommandArchive* msg);
  static void set_has_style_with_old_property_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& style_with_new_property_map(const StyleUpdatePropertyMapCommandArchive* msg);
  static void set_has_style_with_new_property_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& style_diff(const StyleUpdatePropertyMapCommandArchive* msg);
  static void set_has_style_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_notify_for_style_clients(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
StyleUpdatePropertyMapCommandArchive::_Internal::super(const StyleUpdatePropertyMapCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
StyleUpdatePropertyMapCommandArchive::_Internal::current_style(const StyleUpdatePropertyMapCommandArchive* msg) {
  return *msg->_impl_.current_style_;
}
const ::TSP::Reference&
StyleUpdatePropertyMapCommandArchive::_Internal::style_with_old_property_map(const StyleUpdatePropertyMapCommandArchive* msg) {
  return *msg->_impl_.style_with_old_property_map_;
}
const ::TSP::Reference&
StyleUpdatePropertyMapCommandArchive::_Internal::style_with_new_property_map(const StyleUpdatePropertyMapCommandArchive* msg) {
  return *msg->_impl_.style_with_new_property_map_;
}
const ::TSP::Reference&
StyleUpdatePropertyMapCommandArchive::_Internal::style_diff(const StyleUpdatePropertyMapCommandArchive* msg) {
  return *msg->_impl_.style_diff_;
}
void StyleUpdatePropertyMapCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StyleUpdatePropertyMapCommandArchive::clear_current_style() {
  if (_impl_.current_style_ != nullptr) _impl_.current_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void StyleUpdatePropertyMapCommandArchive::clear_style_with_old_property_map() {
  if (_impl_.style_with_old_property_map_ != nullptr) _impl_.style_with_old_property_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void StyleUpdatePropertyMapCommandArchive::clear_style_with_new_property_map() {
  if (_impl_.style_with_new_property_map_ != nullptr) _impl_.style_with_new_property_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void StyleUpdatePropertyMapCommandArchive::clear_style_diff() {
  if (_impl_.style_diff_ != nullptr) _impl_.style_diff_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
StyleUpdatePropertyMapCommandArchive::StyleUpdatePropertyMapCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.StyleUpdatePropertyMapCommandArchive)
}
StyleUpdatePropertyMapCommandArchive::StyleUpdatePropertyMapCommandArchive(const StyleUpdatePropertyMapCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StyleUpdatePropertyMapCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.current_style_){nullptr}
    , decltype(_impl_.style_with_old_property_map_){nullptr}
    , decltype(_impl_.style_with_new_property_map_){nullptr}
    , decltype(_impl_.style_diff_){nullptr}
    , decltype(_impl_.notify_for_style_clients_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_current_style()) {
    _this->_impl_.current_style_ = new ::TSP::Reference(*from._impl_.current_style_);
  }
  if (from._internal_has_style_with_old_property_map()) {
    _this->_impl_.style_with_old_property_map_ = new ::TSP::Reference(*from._impl_.style_with_old_property_map_);
  }
  if (from._internal_has_style_with_new_property_map()) {
    _this->_impl_.style_with_new_property_map_ = new ::TSP::Reference(*from._impl_.style_with_new_property_map_);
  }
  if (from._internal_has_style_diff()) {
    _this->_impl_.style_diff_ = new ::TSP::Reference(*from._impl_.style_diff_);
  }
  _this->_impl_.notify_for_style_clients_ = from._impl_.notify_for_style_clients_;
  // @@protoc_insertion_point(copy_constructor:TSS.StyleUpdatePropertyMapCommandArchive)
}

inline void StyleUpdatePropertyMapCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.current_style_){nullptr}
    , decltype(_impl_.style_with_old_property_map_){nullptr}
    , decltype(_impl_.style_with_new_property_map_){nullptr}
    , decltype(_impl_.style_diff_){nullptr}
    , decltype(_impl_.notify_for_style_clients_){true}
  };
}

StyleUpdatePropertyMapCommandArchive::~StyleUpdatePropertyMapCommandArchive() {
  // @@protoc_insertion_point(destructor:TSS.StyleUpdatePropertyMapCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StyleUpdatePropertyMapCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.current_style_;
  if (this != internal_default_instance()) delete _impl_.style_with_old_property_map_;
  if (this != internal_default_instance()) delete _impl_.style_with_new_property_map_;
  if (this != internal_default_instance()) delete _impl_.style_diff_;
}

void StyleUpdatePropertyMapCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StyleUpdatePropertyMapCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.StyleUpdatePropertyMapCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.current_style_ != nullptr);
      _impl_.current_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.style_with_old_property_map_ != nullptr);
      _impl_.style_with_old_property_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.style_with_new_property_map_ != nullptr);
      _impl_.style_with_new_property_map_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.style_diff_ != nullptr);
      _impl_.style_diff_->Clear();
    }
    _impl_.notify_for_style_clients_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StyleUpdatePropertyMapCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference current_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference style_with_old_property_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_with_old_property_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference style_with_new_property_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_with_new_property_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool notify_for_style_clients = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_notify_for_style_clients(&has_bits);
          _impl_.notify_for_style_clients_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference style_diff = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_diff(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StyleUpdatePropertyMapCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.StyleUpdatePropertyMapCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference current_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::current_style(this),
        _Internal::current_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference style_with_old_property_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::style_with_old_property_map(this),
        _Internal::style_with_old_property_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference style_with_new_property_map = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::style_with_new_property_map(this),
        _Internal::style_with_new_property_map(this).GetCachedSize(), target, stream);
  }

  // optional bool notify_for_style_clients = 6 [default = true];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_notify_for_style_clients(), target);
  }

  // optional .TSP.Reference style_diff = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::style_diff(this),
        _Internal::style_diff(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.StyleUpdatePropertyMapCommandArchive)
  return target;
}

size_t StyleUpdatePropertyMapCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSS.StyleUpdatePropertyMapCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_current_style()) {
    // required .TSP.Reference current_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_style_);
  }

  return total_size;
}
size_t StyleUpdatePropertyMapCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.StyleUpdatePropertyMapCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference current_style = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_style_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSP.Reference style_with_old_property_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.style_with_old_property_map_);
    }

    // optional .TSP.Reference style_with_new_property_map = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.style_with_new_property_map_);
    }

    // optional .TSP.Reference style_diff = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.style_diff_);
    }

    // optional bool notify_for_style_clients = 6 [default = true];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StyleUpdatePropertyMapCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StyleUpdatePropertyMapCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StyleUpdatePropertyMapCommandArchive::GetClassData() const { return &_class_data_; }


void StyleUpdatePropertyMapCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StyleUpdatePropertyMapCommandArchive*>(&to_msg);
  auto& from = static_cast<const StyleUpdatePropertyMapCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.StyleUpdatePropertyMapCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_current_style()->::TSP::Reference::MergeFrom(
          from._internal_current_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_style_with_old_property_map()->::TSP::Reference::MergeFrom(
          from._internal_style_with_old_property_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_style_with_new_property_map()->::TSP::Reference::MergeFrom(
          from._internal_style_with_new_property_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_style_diff()->::TSP::Reference::MergeFrom(
          from._internal_style_diff());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.notify_for_style_clients_ = from._impl_.notify_for_style_clients_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StyleUpdatePropertyMapCommandArchive::CopyFrom(const StyleUpdatePropertyMapCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.StyleUpdatePropertyMapCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StyleUpdatePropertyMapCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_current_style()) {
    if (!_impl_.current_style_->IsInitialized()) return false;
  }
  if (_internal_has_style_with_old_property_map()) {
    if (!_impl_.style_with_old_property_map_->IsInitialized()) return false;
  }
  if (_internal_has_style_with_new_property_map()) {
    if (!_impl_.style_with_new_property_map_->IsInitialized()) return false;
  }
  if (_internal_has_style_diff()) {
    if (!_impl_.style_diff_->IsInitialized()) return false;
  }
  return true;
}

void StyleUpdatePropertyMapCommandArchive::InternalSwap(StyleUpdatePropertyMapCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, _impl_.style_diff_)
      + sizeof(StyleUpdatePropertyMapCommandArchive::_impl_.style_diff_)
      - PROTOBUF_FIELD_OFFSET(StyleUpdatePropertyMapCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.notify_for_style_clients_, other->_impl_.notify_for_style_clients_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StyleUpdatePropertyMapCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[8]);
}

// ===================================================================

class ThemeReplacePresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeReplacePresetCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ThemeReplacePresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& preset(const ThemeReplacePresetCommandArchive* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& oldpreset(const ThemeReplacePresetCommandArchive* msg);
  static void set_has_oldpreset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::TSK::CommandArchive&
ThemeReplacePresetCommandArchive::_Internal::super(const ThemeReplacePresetCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ThemeReplacePresetCommandArchive::_Internal::preset(const ThemeReplacePresetCommandArchive* msg) {
  return *msg->_impl_.preset_;
}
const ::TSP::Reference&
ThemeReplacePresetCommandArchive::_Internal::oldpreset(const ThemeReplacePresetCommandArchive* msg) {
  return *msg->_impl_.oldpreset_;
}
void ThemeReplacePresetCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ThemeReplacePresetCommandArchive::clear_preset() {
  if (_impl_.preset_ != nullptr) _impl_.preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ThemeReplacePresetCommandArchive::clear_oldpreset() {
  if (_impl_.oldpreset_ != nullptr) _impl_.oldpreset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ThemeReplacePresetCommandArchive::ThemeReplacePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.ThemeReplacePresetCommandArchive)
}
ThemeReplacePresetCommandArchive::ThemeReplacePresetCommandArchive(const ThemeReplacePresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeReplacePresetCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.oldpreset_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::TSP::Reference(*from._impl_.preset_);
  }
  if (from._internal_has_oldpreset()) {
    _this->_impl_.oldpreset_ = new ::TSP::Reference(*from._impl_.oldpreset_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:TSS.ThemeReplacePresetCommandArchive)
}

inline void ThemeReplacePresetCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.oldpreset_){nullptr}
    , decltype(_impl_.index_){0u}
  };
}

ThemeReplacePresetCommandArchive::~ThemeReplacePresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSS.ThemeReplacePresetCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeReplacePresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.preset_;
  if (this != internal_default_instance()) delete _impl_.oldpreset_;
}

void ThemeReplacePresetCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeReplacePresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.ThemeReplacePresetCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.preset_ != nullptr);
      _impl_.preset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.oldpreset_ != nullptr);
      _impl_.oldpreset_->Clear();
    }
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeReplacePresetCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference preset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference oldPreset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldpreset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeReplacePresetCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.ThemeReplacePresetCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference preset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference oldPreset = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::oldpreset(this),
        _Internal::oldpreset(this).GetCachedSize(), target, stream);
  }

  // required uint32 index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.ThemeReplacePresetCommandArchive)
  return target;
}

size_t ThemeReplacePresetCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSS.ThemeReplacePresetCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_preset()) {
    // required .TSP.Reference preset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t ThemeReplacePresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.ThemeReplacePresetCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference preset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);

    // required uint32 index = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference oldPreset = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.oldpreset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeReplacePresetCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeReplacePresetCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeReplacePresetCommandArchive::GetClassData() const { return &_class_data_; }


void ThemeReplacePresetCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeReplacePresetCommandArchive*>(&to_msg);
  auto& from = static_cast<const ThemeReplacePresetCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.ThemeReplacePresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_preset()->::TSP::Reference::MergeFrom(
          from._internal_preset());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_oldpreset()->::TSP::Reference::MergeFrom(
          from._internal_oldpreset());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeReplacePresetCommandArchive::CopyFrom(const ThemeReplacePresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.ThemeReplacePresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeReplacePresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!_impl_.preset_->IsInitialized()) return false;
  }
  if (_internal_has_oldpreset()) {
    if (!_impl_.oldpreset_->IsInitialized()) return false;
  }
  return true;
}

void ThemeReplacePresetCommandArchive::InternalSwap(ThemeReplacePresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeReplacePresetCommandArchive, _impl_.index_)
      + sizeof(ThemeReplacePresetCommandArchive::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(ThemeReplacePresetCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeReplacePresetCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[9]);
}

// ===================================================================

class ThemeReplaceColorPresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeReplaceColorPresetCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ThemeReplaceColorPresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const ThemeReplaceColorPresetCommandArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Color& color(const ThemeReplaceColorPresetCommandArchive* msg);
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Color& old_color(const ThemeReplaceColorPresetCommandArchive* msg);
  static void set_has_old_color(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
ThemeReplaceColorPresetCommandArchive::_Internal::super(const ThemeReplaceColorPresetCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ThemeReplaceColorPresetCommandArchive::_Internal::theme(const ThemeReplaceColorPresetCommandArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::Color&
ThemeReplaceColorPresetCommandArchive::_Internal::color(const ThemeReplaceColorPresetCommandArchive* msg) {
  return *msg->_impl_.color_;
}
const ::TSP::Color&
ThemeReplaceColorPresetCommandArchive::_Internal::old_color(const ThemeReplaceColorPresetCommandArchive* msg) {
  return *msg->_impl_.old_color_;
}
void ThemeReplaceColorPresetCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ThemeReplaceColorPresetCommandArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ThemeReplaceColorPresetCommandArchive::clear_color() {
  if (_impl_.color_ != nullptr) _impl_.color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ThemeReplaceColorPresetCommandArchive::clear_old_color() {
  if (_impl_.old_color_ != nullptr) _impl_.old_color_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ThemeReplaceColorPresetCommandArchive::ThemeReplaceColorPresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.ThemeReplaceColorPresetCommandArchive)
}
ThemeReplaceColorPresetCommandArchive::ThemeReplaceColorPresetCommandArchive(const ThemeReplaceColorPresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeReplaceColorPresetCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.old_color_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_color()) {
    _this->_impl_.color_ = new ::TSP::Color(*from._impl_.color_);
  }
  if (from._internal_has_old_color()) {
    _this->_impl_.old_color_ = new ::TSP::Color(*from._impl_.old_color_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:TSS.ThemeReplaceColorPresetCommandArchive)
}

inline void ThemeReplaceColorPresetCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.color_){nullptr}
    , decltype(_impl_.old_color_){nullptr}
    , decltype(_impl_.index_){0u}
  };
}

ThemeReplaceColorPresetCommandArchive::~ThemeReplaceColorPresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSS.ThemeReplaceColorPresetCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeReplaceColorPresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.color_;
  if (this != internal_default_instance()) delete _impl_.old_color_;
}

void ThemeReplaceColorPresetCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeReplaceColorPresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.ThemeReplaceColorPresetCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.color_ != nullptr);
      _impl_.color_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_color_ != nullptr);
      _impl_.old_color_->Clear();
    }
  }
  _impl_.index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeReplaceColorPresetCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Color color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Color old_color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeReplaceColorPresetCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.ThemeReplaceColorPresetCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Color color = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Color old_color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_color(this),
        _Internal::old_color(this).GetCachedSize(), target, stream);
  }

  // required uint32 index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.ThemeReplaceColorPresetCommandArchive)
  return target;
}

size_t ThemeReplaceColorPresetCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSS.ThemeReplaceColorPresetCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_color()) {
    // required .TSP.Color color = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);
  }

  if (_internal_has_old_color()) {
    // required .TSP.Color old_color = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_color_);
  }

  if (_internal_has_index()) {
    // required uint32 index = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t ThemeReplaceColorPresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.ThemeReplaceColorPresetCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .TSP.Color color = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.color_);

    // required .TSP.Color old_color = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_color_);

    // required uint32 index = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeReplaceColorPresetCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeReplaceColorPresetCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeReplaceColorPresetCommandArchive::GetClassData() const { return &_class_data_; }


void ThemeReplaceColorPresetCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeReplaceColorPresetCommandArchive*>(&to_msg);
  auto& from = static_cast<const ThemeReplaceColorPresetCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.ThemeReplaceColorPresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_color()->::TSP::Color::MergeFrom(
          from._internal_color());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_color()->::TSP::Color::MergeFrom(
          from._internal_old_color());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeReplaceColorPresetCommandArchive::CopyFrom(const ThemeReplaceColorPresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.ThemeReplaceColorPresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeReplaceColorPresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_color()) {
    if (!_impl_.color_->IsInitialized()) return false;
  }
  if (_internal_has_old_color()) {
    if (!_impl_.old_color_->IsInitialized()) return false;
  }
  return true;
}

void ThemeReplaceColorPresetCommandArchive::InternalSwap(ThemeReplaceColorPresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeReplaceColorPresetCommandArchive, _impl_.index_)
      + sizeof(ThemeReplaceColorPresetCommandArchive::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(ThemeReplaceColorPresetCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeReplaceColorPresetCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[10]);
}

// ===================================================================

class ThemeAddStylePresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeAddStylePresetCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ThemeAddStylePresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& theme(const ThemeAddStylePresetCommandArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& preset(const ThemeAddStylePresetCommandArchive* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_preset_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_add_preset_to_stylesheet(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001d) ^ 0x0000001d) != 0;
  }
};

const ::TSK::CommandArchive&
ThemeAddStylePresetCommandArchive::_Internal::super(const ThemeAddStylePresetCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ThemeAddStylePresetCommandArchive::_Internal::theme(const ThemeAddStylePresetCommandArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::Reference&
ThemeAddStylePresetCommandArchive::_Internal::preset(const ThemeAddStylePresetCommandArchive* msg) {
  return *msg->_impl_.preset_;
}
void ThemeAddStylePresetCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ThemeAddStylePresetCommandArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ThemeAddStylePresetCommandArchive::clear_preset() {
  if (_impl_.preset_ != nullptr) _impl_.preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ThemeAddStylePresetCommandArchive::ThemeAddStylePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.ThemeAddStylePresetCommandArchive)
}
ThemeAddStylePresetCommandArchive::ThemeAddStylePresetCommandArchive(const ThemeAddStylePresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeAddStylePresetCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preset_kind_){}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.add_preset_to_stylesheet_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.preset_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preset_kind()) {
    _this->_impl_.preset_kind_.Set(from._internal_preset_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::TSP::Reference(*from._impl_.preset_);
  }
  _this->_impl_.add_preset_to_stylesheet_ = from._impl_.add_preset_to_stylesheet_;
  // @@protoc_insertion_point(copy_constructor:TSS.ThemeAddStylePresetCommandArchive)
}

inline void ThemeAddStylePresetCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preset_kind_){}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.add_preset_to_stylesheet_){false}
  };
  _impl_.preset_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThemeAddStylePresetCommandArchive::~ThemeAddStylePresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSS.ThemeAddStylePresetCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeAddStylePresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.preset_kind_.Destroy();
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.preset_;
}

void ThemeAddStylePresetCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeAddStylePresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.ThemeAddStylePresetCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.preset_kind_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.preset_ != nullptr);
      _impl_.preset_->Clear();
    }
  }
  _impl_.add_preset_to_stylesheet_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeAddStylePresetCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference preset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string preset_kind = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_preset_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSS.ThemeAddStylePresetCommandArchive.preset_kind");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string identifier = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSS.ThemeAddStylePresetCommandArchive.identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool add_preset_to_stylesheet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_add_preset_to_stylesheet(&has_bits);
          _impl_.add_preset_to_stylesheet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeAddStylePresetCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.ThemeAddStylePresetCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference preset = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  // required string preset_kind = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preset_kind().data(), static_cast<int>(this->_internal_preset_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSS.ThemeAddStylePresetCommandArchive.preset_kind");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_preset_kind(), target);
  }

  // optional string identifier = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSS.ThemeAddStylePresetCommandArchive.identifier");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_identifier(), target);
  }

  // optional bool add_preset_to_stylesheet = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_add_preset_to_stylesheet(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.ThemeAddStylePresetCommandArchive)
  return target;
}

size_t ThemeAddStylePresetCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSS.ThemeAddStylePresetCommandArchive)
  size_t total_size = 0;

  if (_internal_has_preset_kind()) {
    // required string preset_kind = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preset_kind());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_preset()) {
    // required .TSP.Reference preset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);
  }

  return total_size;
}
size_t ThemeAddStylePresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.ThemeAddStylePresetCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required string preset_kind = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preset_kind());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .TSP.Reference preset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string identifier = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // optional bool add_preset_to_stylesheet = 6;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeAddStylePresetCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeAddStylePresetCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeAddStylePresetCommandArchive::GetClassData() const { return &_class_data_; }


void ThemeAddStylePresetCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeAddStylePresetCommandArchive*>(&to_msg);
  auto& from = static_cast<const ThemeAddStylePresetCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.ThemeAddStylePresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_preset_kind(from._internal_preset_kind());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_preset()->::TSP::Reference::MergeFrom(
          from._internal_preset());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.add_preset_to_stylesheet_ = from._impl_.add_preset_to_stylesheet_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeAddStylePresetCommandArchive::CopyFrom(const ThemeAddStylePresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.ThemeAddStylePresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeAddStylePresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!_impl_.preset_->IsInitialized()) return false;
  }
  return true;
}

void ThemeAddStylePresetCommandArchive::InternalSwap(ThemeAddStylePresetCommandArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preset_kind_, lhs_arena,
      &other->_impl_.preset_kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeAddStylePresetCommandArchive, _impl_.add_preset_to_stylesheet_)
      + sizeof(ThemeAddStylePresetCommandArchive::_impl_.add_preset_to_stylesheet_)
      - PROTOBUF_FIELD_OFFSET(ThemeAddStylePresetCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeAddStylePresetCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[11]);
}

// ===================================================================

class ThemeRemoveStylePresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeRemoveStylePresetCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ThemeRemoveStylePresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& theme(const ThemeRemoveStylePresetCommandArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& preset(const ThemeRemoveStylePresetCommandArchive* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preset_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& replacement_preset(const ThemeRemoveStylePresetCommandArchive* msg);
  static void set_has_replacement_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000005d) ^ 0x0000005d) != 0;
  }
};

const ::TSK::CommandArchive&
ThemeRemoveStylePresetCommandArchive::_Internal::super(const ThemeRemoveStylePresetCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ThemeRemoveStylePresetCommandArchive::_Internal::theme(const ThemeRemoveStylePresetCommandArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::Reference&
ThemeRemoveStylePresetCommandArchive::_Internal::preset(const ThemeRemoveStylePresetCommandArchive* msg) {
  return *msg->_impl_.preset_;
}
const ::TSP::Reference&
ThemeRemoveStylePresetCommandArchive::_Internal::replacement_preset(const ThemeRemoveStylePresetCommandArchive* msg) {
  return *msg->_impl_.replacement_preset_;
}
void ThemeRemoveStylePresetCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ThemeRemoveStylePresetCommandArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void ThemeRemoveStylePresetCommandArchive::clear_preset() {
  if (_impl_.preset_ != nullptr) _impl_.preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void ThemeRemoveStylePresetCommandArchive::clear_replacement_preset() {
  if (_impl_.replacement_preset_ != nullptr) _impl_.replacement_preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
ThemeRemoveStylePresetCommandArchive::ThemeRemoveStylePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.ThemeRemoveStylePresetCommandArchive)
}
ThemeRemoveStylePresetCommandArchive::ThemeRemoveStylePresetCommandArchive(const ThemeRemoveStylePresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeRemoveStylePresetCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preset_kind_){}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.replacement_preset_){nullptr}
    , decltype(_impl_.preset_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.preset_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_preset_kind()) {
    _this->_impl_.preset_kind_.Set(from._internal_preset_kind(), 
      _this->GetArenaForAllocation());
  }
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::TSP::Reference(*from._impl_.preset_);
  }
  if (from._internal_has_replacement_preset()) {
    _this->_impl_.replacement_preset_ = new ::TSP::Reference(*from._impl_.replacement_preset_);
  }
  _this->_impl_.preset_index_ = from._impl_.preset_index_;
  // @@protoc_insertion_point(copy_constructor:TSS.ThemeRemoveStylePresetCommandArchive)
}

inline void ThemeRemoveStylePresetCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.preset_kind_){}
    , decltype(_impl_.identifier_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.replacement_preset_){nullptr}
    , decltype(_impl_.preset_index_){0u}
  };
  _impl_.preset_kind_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.preset_kind_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ThemeRemoveStylePresetCommandArchive::~ThemeRemoveStylePresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSS.ThemeRemoveStylePresetCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeRemoveStylePresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.preset_kind_.Destroy();
  _impl_.identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.preset_;
  if (this != internal_default_instance()) delete _impl_.replacement_preset_;
}

void ThemeRemoveStylePresetCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeRemoveStylePresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.ThemeRemoveStylePresetCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.preset_kind_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.preset_ != nullptr);
      _impl_.preset_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.replacement_preset_ != nullptr);
      _impl_.replacement_preset_->Clear();
    }
  }
  _impl_.preset_index_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeRemoveStylePresetCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference preset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 preset_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_preset_index(&has_bits);
          _impl_.preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string preset_kind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_preset_kind();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSS.ThemeRemoveStylePresetCommandArchive.preset_kind");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string identifier = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSS.ThemeRemoveStylePresetCommandArchive.identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference replacement_preset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacement_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeRemoveStylePresetCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.ThemeRemoveStylePresetCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference preset = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  // required uint32 preset_index = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_preset_index(), target);
  }

  // required string preset_kind = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_preset_kind().data(), static_cast<int>(this->_internal_preset_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSS.ThemeRemoveStylePresetCommandArchive.preset_kind");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_preset_kind(), target);
  }

  // optional string identifier = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSS.ThemeRemoveStylePresetCommandArchive.identifier");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_identifier(), target);
  }

  // optional .TSP.Reference replacement_preset = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::replacement_preset(this),
        _Internal::replacement_preset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.ThemeRemoveStylePresetCommandArchive)
  return target;
}

size_t ThemeRemoveStylePresetCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSS.ThemeRemoveStylePresetCommandArchive)
  size_t total_size = 0;

  if (_internal_has_preset_kind()) {
    // required string preset_kind = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preset_kind());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_preset()) {
    // required .TSP.Reference preset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);
  }

  if (_internal_has_preset_index()) {
    // required uint32 preset_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_preset_index());
  }

  return total_size;
}
size_t ThemeRemoveStylePresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.ThemeRemoveStylePresetCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000005d) ^ 0x0000005d) == 0) {  // All required fields are present.
    // required string preset_kind = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preset_kind());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .TSP.Reference preset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);

    // required uint32 preset_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_preset_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string identifier = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // optional .TSP.Reference replacement_preset = 7;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replacement_preset_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeRemoveStylePresetCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeRemoveStylePresetCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeRemoveStylePresetCommandArchive::GetClassData() const { return &_class_data_; }


void ThemeRemoveStylePresetCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeRemoveStylePresetCommandArchive*>(&to_msg);
  auto& from = static_cast<const ThemeRemoveStylePresetCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.ThemeRemoveStylePresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_preset_kind(from._internal_preset_kind());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_identifier(from._internal_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_preset()->::TSP::Reference::MergeFrom(
          from._internal_preset());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_replacement_preset()->::TSP::Reference::MergeFrom(
          from._internal_replacement_preset());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.preset_index_ = from._impl_.preset_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeRemoveStylePresetCommandArchive::CopyFrom(const ThemeRemoveStylePresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.ThemeRemoveStylePresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeRemoveStylePresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!_impl_.preset_->IsInitialized()) return false;
  }
  if (_internal_has_replacement_preset()) {
    if (!_impl_.replacement_preset_->IsInitialized()) return false;
  }
  return true;
}

void ThemeRemoveStylePresetCommandArchive::InternalSwap(ThemeRemoveStylePresetCommandArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.preset_kind_, lhs_arena,
      &other->_impl_.preset_kind_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeRemoveStylePresetCommandArchive, _impl_.preset_index_)
      + sizeof(ThemeRemoveStylePresetCommandArchive::_impl_.preset_index_)
      - PROTOBUF_FIELD_OFFSET(ThemeRemoveStylePresetCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeRemoveStylePresetCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[12]);
}

// ===================================================================

class ThemeMovePresetCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeMovePresetCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ThemeMovePresetCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const ThemeMovePresetCommandArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& preset_id(const ThemeMovePresetCommandArchive* msg);
  static void set_has_preset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_new_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_old_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
ThemeMovePresetCommandArchive::_Internal::super(const ThemeMovePresetCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ThemeMovePresetCommandArchive::_Internal::theme(const ThemeMovePresetCommandArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::UUID&
ThemeMovePresetCommandArchive::_Internal::preset_id(const ThemeMovePresetCommandArchive* msg) {
  return *msg->_impl_.preset_id_;
}
void ThemeMovePresetCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ThemeMovePresetCommandArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ThemeMovePresetCommandArchive::clear_preset_id() {
  if (_impl_.preset_id_ != nullptr) _impl_.preset_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ThemeMovePresetCommandArchive::ThemeMovePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.ThemeMovePresetCommandArchive)
}
ThemeMovePresetCommandArchive::ThemeMovePresetCommandArchive(const ThemeMovePresetCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeMovePresetCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.preset_id_){nullptr}
    , decltype(_impl_.new_index_){}
    , decltype(_impl_.old_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_preset_id()) {
    _this->_impl_.preset_id_ = new ::TSP::UUID(*from._impl_.preset_id_);
  }
  ::memcpy(&_impl_.new_index_, &from._impl_.new_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.old_index_) -
    reinterpret_cast<char*>(&_impl_.new_index_)) + sizeof(_impl_.old_index_));
  // @@protoc_insertion_point(copy_constructor:TSS.ThemeMovePresetCommandArchive)
}

inline void ThemeMovePresetCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.preset_id_){nullptr}
    , decltype(_impl_.new_index_){0u}
    , decltype(_impl_.old_index_){0u}
  };
}

ThemeMovePresetCommandArchive::~ThemeMovePresetCommandArchive() {
  // @@protoc_insertion_point(destructor:TSS.ThemeMovePresetCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeMovePresetCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.preset_id_;
}

void ThemeMovePresetCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeMovePresetCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.ThemeMovePresetCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.preset_id_ != nullptr);
      _impl_.preset_id_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.new_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.old_index_) -
        reinterpret_cast<char*>(&_impl_.new_index_)) + sizeof(_impl_.old_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeMovePresetCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID preset_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 new_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_new_index(&has_bits);
          _impl_.new_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 old_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_old_index(&has_bits);
          _impl_.old_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeMovePresetCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.ThemeMovePresetCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID preset_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::preset_id(this),
        _Internal::preset_id(this).GetCachedSize(), target, stream);
  }

  // required uint32 new_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_new_index(), target);
  }

  // required uint32 old_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_old_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.ThemeMovePresetCommandArchive)
  return target;
}

size_t ThemeMovePresetCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSS.ThemeMovePresetCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_preset_id()) {
    // required .TSP.UUID preset_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_id_);
  }

  if (_internal_has_new_index()) {
    // required uint32 new_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_index());
  }

  if (_internal_has_old_index()) {
    // required uint32 old_index = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_old_index());
  }

  return total_size;
}
size_t ThemeMovePresetCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.ThemeMovePresetCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .TSP.UUID preset_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_id_);

    // required uint32 new_index = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_index());

    // required uint32 old_index = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_old_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeMovePresetCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeMovePresetCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeMovePresetCommandArchive::GetClassData() const { return &_class_data_; }


void ThemeMovePresetCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeMovePresetCommandArchive*>(&to_msg);
  auto& from = static_cast<const ThemeMovePresetCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.ThemeMovePresetCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_preset_id()->::TSP::UUID::MergeFrom(
          from._internal_preset_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.new_index_ = from._impl_.new_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.old_index_ = from._impl_.old_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeMovePresetCommandArchive::CopyFrom(const ThemeMovePresetCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.ThemeMovePresetCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeMovePresetCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_preset_id()) {
    if (!_impl_.preset_id_->IsInitialized()) return false;
  }
  return true;
}

void ThemeMovePresetCommandArchive::InternalSwap(ThemeMovePresetCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeMovePresetCommandArchive, _impl_.old_index_)
      + sizeof(ThemeMovePresetCommandArchive::_impl_.old_index_)
      - PROTOBUF_FIELD_OFFSET(ThemeMovePresetCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeMovePresetCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[13]);
}

// ===================================================================

class ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ThemeReplaceStylePresetAndDisconnectStylesCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& preset(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& replacement_preset(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* msg);
  static void set_has_replacement_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSK::CommandArchive&
ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_Internal::super(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_Internal::preset(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* msg) {
  return *msg->_impl_.preset_;
}
const ::TSP::Reference&
ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_Internal::replacement_preset(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* msg) {
  return *msg->_impl_.replacement_preset_;
}
void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::clear_preset() {
  if (_impl_.preset_ != nullptr) _impl_.preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::clear_replacement_preset() {
  if (_impl_.replacement_preset_ != nullptr) _impl_.replacement_preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)
}
ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.replacement_preset_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::TSP::Reference(*from._impl_.preset_);
  }
  if (from._internal_has_replacement_preset()) {
    _this->_impl_.replacement_preset_ = new ::TSP::Reference(*from._impl_.replacement_preset_);
  }
  // @@protoc_insertion_point(copy_constructor:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)
}

inline void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.replacement_preset_){nullptr}
  };
}

ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::~ThemeReplaceStylePresetAndDisconnectStylesCommandArchive() {
  // @@protoc_insertion_point(destructor:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.preset_;
  if (this != internal_default_instance()) delete _impl_.replacement_preset_;
}

void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.preset_ != nullptr);
      _impl_.preset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.replacement_preset_ != nullptr);
      _impl_.replacement_preset_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference preset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference replacement_preset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_replacement_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference preset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference replacement_preset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::replacement_preset(this),
        _Internal::replacement_preset(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)
  return target;
}

size_t ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_preset()) {
    // required .TSP.Reference preset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);
  }

  if (_internal_has_replacement_preset()) {
    // required .TSP.Reference replacement_preset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replacement_preset_);
  }

  return total_size;
}
size_t ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference preset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.preset_);

    // required .TSP.Reference replacement_preset = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.replacement_preset_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::GetClassData() const { return &_class_data_; }


void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemeReplaceStylePresetAndDisconnectStylesCommandArchive*>(&to_msg);
  auto& from = static_cast<const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_preset()->::TSP::Reference::MergeFrom(
          from._internal_preset());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_replacement_preset()->::TSP::Reference::MergeFrom(
          from._internal_replacement_preset());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::CopyFrom(const ThemeReplaceStylePresetAndDisconnectStylesCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.ThemeReplaceStylePresetAndDisconnectStylesCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!_impl_.preset_->IsInitialized()) return false;
  }
  if (_internal_has_replacement_preset()) {
    if (!_impl_.replacement_preset_->IsInitialized()) return false;
  }
  return true;
}

void ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::InternalSwap(ThemeReplaceStylePresetAndDisconnectStylesCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThemeReplaceStylePresetAndDisconnectStylesCommandArchive, _impl_.replacement_preset_)
      + sizeof(ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::_impl_.replacement_preset_)
      - PROTOBUF_FIELD_OFFSET(ThemeReplaceStylePresetAndDisconnectStylesCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeReplaceStylePresetAndDisconnectStylesCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[14]);
}

// ===================================================================

class CommandPropertyEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPropertyEntryArchive>()._impl_._has_bits_);
  static void set_has_property(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_integer_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_float_value(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_double_value(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tsp_reference(const CommandPropertyEntryArchive* msg);
  static void set_has_tsp_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::TSP::Reference&
CommandPropertyEntryArchive::_Internal::tsp_reference(const CommandPropertyEntryArchive* msg) {
  return *msg->_impl_.tsp_reference_;
}
void CommandPropertyEntryArchive::clear_tsp_reference() {
  if (_impl_.tsp_reference_ != nullptr) _impl_.tsp_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandPropertyEntryArchive::CommandPropertyEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.CommandPropertyEntryArchive)
}
CommandPropertyEntryArchive::CommandPropertyEntryArchive(const CommandPropertyEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandPropertyEntryArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.tsp_reference_){nullptr}
    , decltype(_impl_.property_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.integer_value_){}
    , decltype(_impl_.float_value_){}
    , decltype(_impl_.double_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_string_value()) {
    _this->_impl_.string_value_.Set(from._internal_string_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tsp_reference()) {
    _this->_impl_.tsp_reference_ = new ::TSP::Reference(*from._impl_.tsp_reference_);
  }
  ::memcpy(&_impl_.property_, &from._impl_.property_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.double_value_) -
    reinterpret_cast<char*>(&_impl_.property_)) + sizeof(_impl_.double_value_));
  // @@protoc_insertion_point(copy_constructor:TSS.CommandPropertyEntryArchive)
}

inline void CommandPropertyEntryArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.string_value_){}
    , decltype(_impl_.tsp_reference_){nullptr}
    , decltype(_impl_.property_){0u}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.integer_value_){0}
    , decltype(_impl_.float_value_){0}
    , decltype(_impl_.double_value_){0}
  };
  _impl_.string_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.string_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandPropertyEntryArchive::~CommandPropertyEntryArchive() {
  // @@protoc_insertion_point(destructor:TSS.CommandPropertyEntryArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandPropertyEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  _impl_.string_value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tsp_reference_;
}

void CommandPropertyEntryArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandPropertyEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.CommandPropertyEntryArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.string_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tsp_reference_ != nullptr);
      _impl_.tsp_reference_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.property_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.double_value_) -
        reinterpret_cast<char*>(&_impl_.property_)) + sizeof(_impl_.double_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPropertyEntryArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_property(&has_bits);
          _impl_.property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 integer_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_integer_value(&has_bits);
          _impl_.integer_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float float_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_float_value(&has_bits);
          _impl_.float_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional double double_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_double_value(&has_bits);
          _impl_.double_value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string string_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSS.CommandPropertyEntryArchive.string_value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference tsp_reference = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_tsp_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((64u <= tag && tag < 16008u)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandPropertyEntryArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.CommandPropertyEntryArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 property = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_property(), target);
  }

  // required int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // optional int32 integer_value = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_integer_value(), target);
  }

  // optional float float_value = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_float_value(), target);
  }

  // optional double double_value = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_double_value(), target);
  }

  // optional string string_value = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSS.CommandPropertyEntryArchive.string_value");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_string_value(), target);
  }

  // optional .TSP.Reference tsp_reference = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::tsp_reference(this),
        _Internal::tsp_reference(this).GetCachedSize(), target, stream);
  }

  // Extension range [8, 2001)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 8, 2001, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.CommandPropertyEntryArchive)
  return target;
}

size_t CommandPropertyEntryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSS.CommandPropertyEntryArchive)
  size_t total_size = 0;

  if (_internal_has_property()) {
    // required uint32 property = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_property());
  }

  if (_internal_has_type()) {
    // required int32 type = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return total_size;
}
size_t CommandPropertyEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.CommandPropertyEntryArchive)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  if (((_impl_._has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 property = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_property());

    // required int32 type = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string string_value = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
    }

    // optional .TSP.Reference tsp_reference = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tsp_reference_);
    }

  }
  if (cached_has_bits & 0x00000070u) {
    // optional int32 integer_value = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_integer_value());
    }

    // optional float float_value = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional double double_value = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPropertyEntryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandPropertyEntryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPropertyEntryArchive::GetClassData() const { return &_class_data_; }


void CommandPropertyEntryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandPropertyEntryArchive*>(&to_msg);
  auto& from = static_cast<const CommandPropertyEntryArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.CommandPropertyEntryArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_string_value(from._internal_string_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tsp_reference()->::TSP::Reference::MergeFrom(
          from._internal_tsp_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.property_ = from._impl_.property_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.integer_value_ = from._impl_.integer_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.float_value_ = from._impl_.float_value_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.double_value_ = from._impl_.double_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPropertyEntryArchive::CopyFrom(const CommandPropertyEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.CommandPropertyEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPropertyEntryArchive::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_tsp_reference()) {
    if (!_impl_.tsp_reference_->IsInitialized()) return false;
  }
  return true;
}

void CommandPropertyEntryArchive::InternalSwap(CommandPropertyEntryArchive* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.string_value_, lhs_arena,
      &other->_impl_.string_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPropertyEntryArchive, _impl_.double_value_)
      + sizeof(CommandPropertyEntryArchive::_impl_.double_value_)
      - PROTOBUF_FIELD_OFFSET(CommandPropertyEntryArchive, _impl_.tsp_reference_)>(
          reinterpret_cast<char*>(&_impl_.tsp_reference_),
          reinterpret_cast<char*>(&other->_impl_.tsp_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPropertyEntryArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[15]);
}

// ===================================================================

class CommandPropertyMapArchive::_Internal {
 public:
};

CommandPropertyMapArchive::CommandPropertyMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSS.CommandPropertyMapArchive)
}
CommandPropertyMapArchive::CommandPropertyMapArchive(const CommandPropertyMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandPropertyMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.property_entries_){from._impl_.property_entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSS.CommandPropertyMapArchive)
}

inline void CommandPropertyMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.property_entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CommandPropertyMapArchive::~CommandPropertyMapArchive() {
  // @@protoc_insertion_point(destructor:TSS.CommandPropertyMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandPropertyMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.property_entries_.~RepeatedPtrField();
}

void CommandPropertyMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandPropertyMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSS.CommandPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.property_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPropertyMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSS.CommandPropertyEntryArchive property_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandPropertyMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSS.CommandPropertyMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSS.CommandPropertyEntryArchive property_entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_property_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_property_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSS.CommandPropertyMapArchive)
  return target;
}

size_t CommandPropertyMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSS.CommandPropertyMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSS.CommandPropertyEntryArchive property_entries = 1;
  total_size += 1UL * this->_internal_property_entries_size();
  for (const auto& msg : this->_impl_.property_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPropertyMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandPropertyMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPropertyMapArchive::GetClassData() const { return &_class_data_; }


void CommandPropertyMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandPropertyMapArchive*>(&to_msg);
  auto& from = static_cast<const CommandPropertyMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSS.CommandPropertyMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.property_entries_.MergeFrom(from._impl_.property_entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPropertyMapArchive::CopyFrom(const CommandPropertyMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSS.CommandPropertyMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPropertyMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.property_entries_))
    return false;
  return true;
}

void CommandPropertyMapArchive::InternalSwap(CommandPropertyMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.property_entries_.InternalSwap(&other->_impl_.property_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPropertyMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSSArchives_2eproto_getter, &descriptor_table_TSSArchives_2eproto_once,
      file_level_metadata_TSSArchives_2eproto[16]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::CommandPropertyEntryArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSP::Color >, 11, false>
  color(kColorFieldNumber, ::TSP::Color::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSS::StyleArchive*
Arena::CreateMaybeMessage< ::TSS::StyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::StyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::StylesheetArchive_IdentifiedStyleEntry*
Arena::CreateMaybeMessage< ::TSS::StylesheetArchive_IdentifiedStyleEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::StylesheetArchive_IdentifiedStyleEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::StylesheetArchive_StyleChildrenEntry*
Arena::CreateMaybeMessage< ::TSS::StylesheetArchive_StyleChildrenEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::StylesheetArchive_StyleChildrenEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::StylesheetArchive_VersionedStyles*
Arena::CreateMaybeMessage< ::TSS::StylesheetArchive_VersionedStyles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::StylesheetArchive_VersionedStyles >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::StylesheetArchive*
Arena::CreateMaybeMessage< ::TSS::StylesheetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::StylesheetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::ThemeArchive*
Arena::CreateMaybeMessage< ::TSS::ThemeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::ThemeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::ApplyThemeCommandArchive*
Arena::CreateMaybeMessage< ::TSS::ApplyThemeCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::ApplyThemeCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::ApplyThemeChildCommandArchive*
Arena::CreateMaybeMessage< ::TSS::ApplyThemeChildCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::ApplyThemeChildCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::StyleUpdatePropertyMapCommandArchive*
Arena::CreateMaybeMessage< ::TSS::StyleUpdatePropertyMapCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::StyleUpdatePropertyMapCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::ThemeReplacePresetCommandArchive*
Arena::CreateMaybeMessage< ::TSS::ThemeReplacePresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::ThemeReplacePresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::ThemeReplaceColorPresetCommandArchive*
Arena::CreateMaybeMessage< ::TSS::ThemeReplaceColorPresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::ThemeReplaceColorPresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::ThemeAddStylePresetCommandArchive*
Arena::CreateMaybeMessage< ::TSS::ThemeAddStylePresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::ThemeAddStylePresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::ThemeRemoveStylePresetCommandArchive*
Arena::CreateMaybeMessage< ::TSS::ThemeRemoveStylePresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::ThemeRemoveStylePresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::ThemeMovePresetCommandArchive*
Arena::CreateMaybeMessage< ::TSS::ThemeMovePresetCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::ThemeMovePresetCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive*
Arena::CreateMaybeMessage< ::TSS::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::ThemeReplaceStylePresetAndDisconnectStylesCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::CommandPropertyEntryArchive*
Arena::CreateMaybeMessage< ::TSS::CommandPropertyEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::CommandPropertyEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSS::CommandPropertyMapArchive*
Arena::CreateMaybeMessage< ::TSS::CommandPropertyMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSS::CommandPropertyMapArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
