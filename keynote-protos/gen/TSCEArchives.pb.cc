// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCEArchives.proto

#include "TSCEArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TSCE {
PROTOBUF_CONSTEXPR CellReferenceArchive::CellReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.row_)*/0u} {}
struct CellReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellReferenceArchiveDefaultTypeInternal() {}
  union {
    CellReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellReferenceArchiveDefaultTypeInternal _CellReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR InternalCellReferenceArchive::InternalCellReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coordinate_)*/nullptr
  , /*decltype(_impl_.owner_id_)*/0u} {}
struct InternalCellReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalCellReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalCellReferenceArchiveDefaultTypeInternal() {}
  union {
    InternalCellReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalCellReferenceArchiveDefaultTypeInternal _InternalCellReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR RelativeCellRefArchive::RelativeCellRefArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_uid_)*/nullptr
  , /*decltype(_impl_.relative_row_offset_)*/0
  , /*decltype(_impl_.relative_column_offset_)*/0
  , /*decltype(_impl_.preserve_column_)*/false
  , /*decltype(_impl_.preserve_row_)*/false
  , /*decltype(_impl_.is_spanning_column_)*/false
  , /*decltype(_impl_.is_spanning_row_)*/false} {}
struct RelativeCellRefArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RelativeCellRefArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RelativeCellRefArchiveDefaultTypeInternal() {}
  union {
    RelativeCellRefArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RelativeCellRefArchiveDefaultTypeInternal _RelativeCellRefArchive_default_instance_;
PROTOBUF_CONSTEXPR RangeReferenceArchive::RangeReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.top_left_column_)*/0u
  , /*decltype(_impl_.top_left_row_)*/0u
  , /*decltype(_impl_.bottom_right_column_)*/0u
  , /*decltype(_impl_.bottom_right_row_)*/0u} {}
struct RangeReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeReferenceArchiveDefaultTypeInternal() {}
  union {
    RangeReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeReferenceArchiveDefaultTypeInternal _RangeReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR InternalRangeReferenceArchive::InternalRangeReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/nullptr
  , /*decltype(_impl_.owner_id_)*/0u} {}
struct InternalRangeReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalRangeReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalRangeReferenceArchiveDefaultTypeInternal() {}
  union {
    InternalRangeReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalRangeReferenceArchiveDefaultTypeInternal _InternalRangeReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR IndexSetArchive_IndexSetEntry::IndexSetArchive_IndexSetEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_begin_)*/0
  , /*decltype(_impl_.range_end_)*/0} {}
struct IndexSetArchive_IndexSetEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexSetArchive_IndexSetEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexSetArchive_IndexSetEntryDefaultTypeInternal() {}
  union {
    IndexSetArchive_IndexSetEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexSetArchive_IndexSetEntryDefaultTypeInternal _IndexSetArchive_IndexSetEntry_default_instance_;
PROTOBUF_CONSTEXPR IndexSetArchive::IndexSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexSetArchiveDefaultTypeInternal() {}
  union {
    IndexSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexSetArchiveDefaultTypeInternal _IndexSetArchive_default_instance_;
PROTOBUF_CONSTEXPR CellCoordSetArchive_ColumnEntry::CellCoordSetArchive_ColumnEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_set_)*/nullptr
  , /*decltype(_impl_.column_)*/0u} {}
struct CellCoordSetArchive_ColumnEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellCoordSetArchive_ColumnEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellCoordSetArchive_ColumnEntryDefaultTypeInternal() {}
  union {
    CellCoordSetArchive_ColumnEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellCoordSetArchive_ColumnEntryDefaultTypeInternal _CellCoordSetArchive_ColumnEntry_default_instance_;
PROTOBUF_CONSTEXPR CellCoordSetArchive::CellCoordSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CellCoordSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellCoordSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellCoordSetArchiveDefaultTypeInternal() {}
  union {
    CellCoordSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellCoordSetArchiveDefaultTypeInternal _CellCoordSetArchive_default_instance_;
PROTOBUF_CONSTEXPR InternalCellRefSetArchive_OwnerEntry::InternalCellRefSetArchive_OwnerEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coord_set_)*/nullptr
  , /*decltype(_impl_.owner_id_)*/0u} {}
struct InternalCellRefSetArchive_OwnerEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalCellRefSetArchive_OwnerEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalCellRefSetArchive_OwnerEntryDefaultTypeInternal() {}
  union {
    InternalCellRefSetArchive_OwnerEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalCellRefSetArchive_OwnerEntryDefaultTypeInternal _InternalCellRefSetArchive_OwnerEntry_default_instance_;
PROTOBUF_CONSTEXPR InternalCellRefSetArchive::InternalCellRefSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalCellRefSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalCellRefSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalCellRefSetArchiveDefaultTypeInternal() {}
  union {
    InternalCellRefSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalCellRefSetArchiveDefaultTypeInternal _InternalCellRefSetArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnRowSize::ColumnRowSize(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.num_columns_)*/1u
  , /*decltype(_impl_.num_rows_)*/1u} {}
struct ColumnRowSizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnRowSizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnRowSizeDefaultTypeInternal() {}
  union {
    ColumnRowSize _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnRowSizeDefaultTypeInternal _ColumnRowSize_default_instance_;
PROTOBUF_CONSTEXPR CellRectArchive::CellRectArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.origin_)*/nullptr
  , /*decltype(_impl_.size_)*/nullptr} {}
struct CellRectArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellRectArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellRectArchiveDefaultTypeInternal() {}
  union {
    CellRectArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellRectArchiveDefaultTypeInternal _CellRectArchive_default_instance_;
PROTOBUF_CONSTEXPR CellRefSetArchive_OwnerEntry::CellRefSetArchive_OwnerEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_uid_)*/nullptr
  , /*decltype(_impl_.coord_set_)*/nullptr} {}
struct CellRefSetArchive_OwnerEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellRefSetArchive_OwnerEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellRefSetArchive_OwnerEntryDefaultTypeInternal() {}
  union {
    CellRefSetArchive_OwnerEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellRefSetArchive_OwnerEntryDefaultTypeInternal _CellRefSetArchive_OwnerEntry_default_instance_;
PROTOBUF_CONSTEXPR CellRefSetArchive::CellRefSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CellRefSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellRefSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellRefSetArchiveDefaultTypeInternal() {}
  union {
    CellRefSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellRefSetArchiveDefaultTypeInternal _CellRefSetArchive_default_instance_;
PROTOBUF_CONSTEXPR UidCoordSetArchive_ColumnEntry::UidCoordSetArchive_ColumnEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_set_)*/{}
  , /*decltype(_impl_.column_)*/nullptr} {}
struct UidCoordSetArchive_ColumnEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UidCoordSetArchive_ColumnEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UidCoordSetArchive_ColumnEntryDefaultTypeInternal() {}
  union {
    UidCoordSetArchive_ColumnEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UidCoordSetArchive_ColumnEntryDefaultTypeInternal _UidCoordSetArchive_ColumnEntry_default_instance_;
PROTOBUF_CONSTEXPR UidCoordSetArchive::UidCoordSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.column_entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UidCoordSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UidCoordSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UidCoordSetArchiveDefaultTypeInternal() {}
  union {
    UidCoordSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UidCoordSetArchiveDefaultTypeInternal _UidCoordSetArchive_default_instance_;
PROTOBUF_CONSTEXPR UidCellRefSetArchive_OwnerEntry::UidCellRefSetArchive_OwnerEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_uid_)*/nullptr
  , /*decltype(_impl_.coord_set_)*/nullptr} {}
struct UidCellRefSetArchive_OwnerEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UidCellRefSetArchive_OwnerEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UidCellRefSetArchive_OwnerEntryDefaultTypeInternal() {}
  union {
    UidCellRefSetArchive_OwnerEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UidCellRefSetArchive_OwnerEntryDefaultTypeInternal _UidCellRefSetArchive_OwnerEntry_default_instance_;
PROTOBUF_CONSTEXPR UidCellRefSetArchive::UidCellRefSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.owner_entries_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UidCellRefSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UidCellRefSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UidCellRefSetArchiveDefaultTypeInternal() {}
  union {
    UidCellRefSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UidCellRefSetArchiveDefaultTypeInternal _UidCellRefSetArchive_default_instance_;
PROTOBUF_CONSTEXPR ReferencesToDirtyArchive::ReferencesToDirtyArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.to_dirty_range_refs_)*/{}
  , /*decltype(_impl_.to_dirty_owner_ids_)*/nullptr
  , /*decltype(_impl_.to_dirty_cells_)*/nullptr
  , /*decltype(_impl_.to_dirty_cells_additional_)*/nullptr
  , /*decltype(_impl_.calc_in_progress_cells_)*/nullptr
  , /*decltype(_impl_.to_update_precedents_cells_)*/nullptr} {}
struct ReferencesToDirtyArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferencesToDirtyArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferencesToDirtyArchiveDefaultTypeInternal() {}
  union {
    ReferencesToDirtyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferencesToDirtyArchiveDefaultTypeInternal _ReferencesToDirtyArchive_default_instance_;
PROTOBUF_CONSTEXPR CoordMapperArchive_BaseToViewEntry::CoordMapperArchive_BaseToViewEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_column_or_row_)*/0u
  , /*decltype(_impl_.view_column_or_row_)*/0u} {}
struct CoordMapperArchive_BaseToViewEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordMapperArchive_BaseToViewEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordMapperArchive_BaseToViewEntryDefaultTypeInternal() {}
  union {
    CoordMapperArchive_BaseToViewEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordMapperArchive_BaseToViewEntryDefaultTypeInternal _CoordMapperArchive_BaseToViewEntry_default_instance_;
PROTOBUF_CONSTEXPR CoordMapperArchive_SummaryToViewEntry::CoordMapperArchive_SummaryToViewEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.summary_column_or_row_)*/0u
  , /*decltype(_impl_.view_column_or_row_)*/0u} {}
struct CoordMapperArchive_SummaryToViewEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordMapperArchive_SummaryToViewEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordMapperArchive_SummaryToViewEntryDefaultTypeInternal() {}
  union {
    CoordMapperArchive_SummaryToViewEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordMapperArchive_SummaryToViewEntryDefaultTypeInternal _CoordMapperArchive_SummaryToViewEntry_default_instance_;
PROTOBUF_CONSTEXPR CoordMapperArchive::CoordMapperArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_to_view_row_map_)*/{}
  , /*decltype(_impl_.base_to_view_column_map_)*/{}
  , /*decltype(_impl_.summary_to_view_row_map_)*/{}
  , /*decltype(_impl_.summary_to_view_column_map_)*/{}
  , /*decltype(_impl_.table_uid_)*/nullptr
  , /*decltype(_impl_.summary_rows_set_)*/nullptr
  , /*decltype(_impl_.summary_columns_set_)*/nullptr
  , /*decltype(_impl_.label_rows_set_)*/nullptr} {}
struct CoordMapperArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordMapperArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordMapperArchiveDefaultTypeInternal() {}
  union {
    CoordMapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordMapperArchiveDefaultTypeInternal _CoordMapperArchive_default_instance_;
PROTOBUF_CONSTEXPR ReferenceArchive::ReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_reference_)*/nullptr
  , /*decltype(_impl_.range_reference_)*/nullptr
  , /*decltype(_impl_.reference_type_)*/1} {}
struct ReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReferenceArchiveDefaultTypeInternal() {}
  union {
    ReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReferenceArchiveDefaultTypeInternal _ReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR EdgeArchive::EdgeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_id_)*/nullptr
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.row_)*/0u
  , /*decltype(_impl_.is_precedent_)*/false} {}
struct EdgeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgeArchiveDefaultTypeInternal() {}
  union {
    EdgeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgeArchiveDefaultTypeInternal _EdgeArchive_default_instance_;
PROTOBUF_CONSTEXPR EdgesArchive::EdgesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.packed_edge_without_owner_)*/{}
  , /*decltype(_impl_.packed_edge_with_owner_)*/{}
  , /*decltype(_impl_.owner_id_for_edge_)*/{}
  , /*decltype(_impl_.internal_owner_id_for_edge_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgesArchiveDefaultTypeInternal() {}
  union {
    EdgesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgesArchiveDefaultTypeInternal _EdgesArchive_default_instance_;
PROTOBUF_CONSTEXPR ExpandedEdgesArchive::ExpandedEdgesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.edge_without_owner_rows_)*/{}
  , /*decltype(_impl_.edge_without_owner_columns_)*/{}
  , /*decltype(_impl_.edge_with_owner_rows_)*/{}
  , /*decltype(_impl_.edge_with_owner_columns_)*/{}
  , /*decltype(_impl_.internal_owner_id_for_edge_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExpandedEdgesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpandedEdgesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpandedEdgesArchiveDefaultTypeInternal() {}
  union {
    ExpandedEdgesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpandedEdgesArchiveDefaultTypeInternal _ExpandedEdgesArchive_default_instance_;
PROTOBUF_CONSTEXPR CellRecordArchive::CellRecordArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.edge_)*/{}
  , /*decltype(_impl_.edges_)*/nullptr
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.row_)*/0u
  , /*decltype(_impl_.dirty_self_plus_precedents_count_)*/uint64_t{0u}
  , /*decltype(_impl_.is_in_a_cycle_)*/false
  , /*decltype(_impl_.has_calculated_precedents_)*/false
  , /*decltype(_impl_.calculate_precedents_on_next_recalc_)*/false
  , /*decltype(_impl_.translate_for_excel_import_on_next_recalc_)*/false
  , /*decltype(_impl_.contains_a_formula_)*/true} {}
struct CellRecordArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellRecordArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellRecordArchiveDefaultTypeInternal() {}
  union {
    CellRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellRecordArchiveDefaultTypeInternal _CellRecordArchive_default_instance_;
PROTOBUF_CONSTEXPR CellDependenciesArchive::CellDependenciesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_record_)*/{}
  , /*decltype(_impl_.num_dirty_cells_)*/0u} {}
struct CellDependenciesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellDependenciesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellDependenciesArchiveDefaultTypeInternal() {}
  union {
    CellDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellDependenciesArchiveDefaultTypeInternal _CellDependenciesArchive_default_instance_;
PROTOBUF_CONSTEXPR CellRecordExpandedArchive::CellRecordExpandedArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.expanded_edges_)*/nullptr
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.row_)*/0u
  , /*decltype(_impl_.dirty_self_plus_precedents_count_)*/uint64_t{0u}
  , /*decltype(_impl_.is_in_a_cycle_)*/false
  , /*decltype(_impl_.has_calculated_precedents_)*/false} {}
struct CellRecordExpandedArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellRecordExpandedArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellRecordExpandedArchiveDefaultTypeInternal() {}
  union {
    CellRecordExpandedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellRecordExpandedArchiveDefaultTypeInternal _CellRecordExpandedArchive_default_instance_;
PROTOBUF_CONSTEXPR CellDependenciesExpandedArchive::CellDependenciesExpandedArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_record_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CellDependenciesExpandedArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellDependenciesExpandedArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellDependenciesExpandedArchiveDefaultTypeInternal() {}
  union {
    CellDependenciesExpandedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellDependenciesExpandedArchiveDefaultTypeInternal _CellDependenciesExpandedArchive_default_instance_;
PROTOBUF_CONSTEXPR CellRecordTileArchive::CellRecordTileArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_records_)*/{}
  , /*decltype(_impl_.internal_owner_id_)*/0u
  , /*decltype(_impl_.tile_column_begin_)*/0u
  , /*decltype(_impl_.tile_row_begin_)*/0u} {}
struct CellRecordTileArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellRecordTileArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellRecordTileArchiveDefaultTypeInternal() {}
  union {
    CellRecordTileArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellRecordTileArchiveDefaultTypeInternal _CellRecordTileArchive_default_instance_;
PROTOBUF_CONSTEXPR CellDependenciesTiledArchive::CellDependenciesTiledArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_record_tiles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CellDependenciesTiledArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellDependenciesTiledArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellDependenciesTiledArchiveDefaultTypeInternal() {}
  union {
    CellDependenciesTiledArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellDependenciesTiledArchiveDefaultTypeInternal _CellDependenciesTiledArchive_default_instance_;
PROTOBUF_CONSTEXPR VolatileDependenciesArchive::VolatileDependenciesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.volatile_time_cell_column_)*/{}
  , /*decltype(_impl_.volatile_time_cell_row_)*/{}
  , /*decltype(_impl_.volatile_random_cell_column_)*/{}
  , /*decltype(_impl_.volatile_random_cell_row_)*/{}
  , /*decltype(_impl_.volatile_location_cell_column_)*/{}
  , /*decltype(_impl_.volatile_location_cell_row_)*/{}
  , /*decltype(_impl_.volatile_compass_cell_column_)*/{}
  , /*decltype(_impl_.volatile_compass_cell_row_)*/{}
  , /*decltype(_impl_.calculated_dependency_cell_column_)*/{}
  , /*decltype(_impl_.calculated_dependency_cell_row_)*/{}
  , /*decltype(_impl_.volatile_geometry_cell_)*/{}
  , /*decltype(_impl_.volatile_geometry_cell_reference_)*/{}
  , /*decltype(_impl_.volatile_locale_cell_column_)*/{}
  , /*decltype(_impl_.volatile_locale_cell_row_)*/{}
  , /*decltype(_impl_.volatile_sheet_table_name_cell_column_)*/{}
  , /*decltype(_impl_.volatile_sheet_table_name_cell_row_)*/{}
  , /*decltype(_impl_.volatile_remote_data_cell_column_)*/{}
  , /*decltype(_impl_.volatile_remote_data_cell_row_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VolatileDependenciesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VolatileDependenciesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VolatileDependenciesArchiveDefaultTypeInternal() {}
  union {
    VolatileDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VolatileDependenciesArchiveDefaultTypeInternal _VolatileDependenciesArchive_default_instance_;
PROTOBUF_CONSTEXPR VolatileDependenciesExpandedArchive::VolatileDependenciesExpandedArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.volatile_time_cells_)*/nullptr
  , /*decltype(_impl_.volatile_random_cells_)*/nullptr
  , /*decltype(_impl_.volatile_locale_cells_)*/nullptr
  , /*decltype(_impl_.volatile_sheet_table_name_cells_)*/nullptr
  , /*decltype(_impl_.volatile_remote_data_cells_)*/nullptr
  , /*decltype(_impl_.volatile_geometry_cell_refs_)*/nullptr} {}
struct VolatileDependenciesExpandedArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VolatileDependenciesExpandedArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VolatileDependenciesExpandedArchiveDefaultTypeInternal() {}
  union {
    VolatileDependenciesExpandedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VolatileDependenciesExpandedArchiveDefaultTypeInternal _VolatileDependenciesExpandedArchive_default_instance_;
PROTOBUF_CONSTEXPR RTreeInternalNodeContentsArchive::RTreeInternalNodeContentsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_)*/{}
  , /*decltype(_impl_.max_)*/{}
  , /*decltype(_impl_.child_)*/nullptr} {}
struct RTreeInternalNodeContentsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTreeInternalNodeContentsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTreeInternalNodeContentsArchiveDefaultTypeInternal() {}
  union {
    RTreeInternalNodeContentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTreeInternalNodeContentsArchiveDefaultTypeInternal _RTreeInternalNodeContentsArchive_default_instance_;
PROTOBUF_CONSTEXPR RTreeLeafNodeContentsArchive::RTreeLeafNodeContentsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.min_)*/{}
  , /*decltype(_impl_.max_)*/{}
  , /*decltype(_impl_.cell_reference_)*/nullptr} {}
struct RTreeLeafNodeContentsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTreeLeafNodeContentsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTreeLeafNodeContentsArchiveDefaultTypeInternal() {}
  union {
    RTreeLeafNodeContentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTreeLeafNodeContentsArchiveDefaultTypeInternal _RTreeLeafNodeContentsArchive_default_instance_;
PROTOBUF_CONSTEXPR RTreeNodeArchive::RTreeNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.internal_node_contents_)*/{}
  , /*decltype(_impl_.leaf_node_contents_)*/{}
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.count_)*/0u} {}
struct RTreeNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTreeNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTreeNodeArchiveDefaultTypeInternal() {}
  union {
    RTreeNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTreeNodeArchiveDefaultTypeInternal _RTreeNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR RTreeArchive::RTreeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.root_)*/nullptr
  , /*decltype(_impl_.data_file_id_)*/0u
  , /*decltype(_impl_.data_size_)*/0u
  , /*decltype(_impl_.data_num_dims_)*/0u
  , /*decltype(_impl_.data_elem_size_)*/0u
  , /*decltype(_impl_.data_elem_real_size_)*/0u
  , /*decltype(_impl_.data_max_nodes_)*/0u
  , /*decltype(_impl_.data_min_nodes_)*/0u} {}
struct RTreeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RTreeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RTreeArchiveDefaultTypeInternal() {}
  union {
    RTreeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RTreeArchiveDefaultTypeInternal _RTreeArchive_default_instance_;
PROTOBUF_CONSTEXPR RangeBackDependencyArchive::RangeBackDependencyArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_reference_)*/nullptr
  , /*decltype(_impl_.internal_range_reference_)*/nullptr
  , /*decltype(_impl_.cell_coord_row_)*/0u
  , /*decltype(_impl_.cell_coord_column_)*/0u} {}
struct RangeBackDependencyArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeBackDependencyArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeBackDependencyArchiveDefaultTypeInternal() {}
  union {
    RangeBackDependencyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeBackDependencyArchiveDefaultTypeInternal _RangeBackDependencyArchive_default_instance_;
PROTOBUF_CONSTEXPR RangeDependenciesArchive::RangeDependenciesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.back_dependency_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeDependenciesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeDependenciesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeDependenciesArchiveDefaultTypeInternal() {}
  union {
    RangeDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeDependenciesArchiveDefaultTypeInternal _RangeDependenciesArchive_default_instance_;
PROTOBUF_CONSTEXPR RangePrecedentsTileArchive_FromToRangeArchive::RangePrecedentsTileArchive_FromToRangeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.from_coord_)*/nullptr
  , /*decltype(_impl_.refers_to_rect_)*/nullptr} {}
struct RangePrecedentsTileArchive_FromToRangeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangePrecedentsTileArchive_FromToRangeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangePrecedentsTileArchive_FromToRangeArchiveDefaultTypeInternal() {}
  union {
    RangePrecedentsTileArchive_FromToRangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangePrecedentsTileArchive_FromToRangeArchiveDefaultTypeInternal _RangePrecedentsTileArchive_FromToRangeArchive_default_instance_;
PROTOBUF_CONSTEXPR RangePrecedentsTileArchive::RangePrecedentsTileArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.from_to_range_)*/{}
  , /*decltype(_impl_.to_owner_id_)*/0u} {}
struct RangePrecedentsTileArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangePrecedentsTileArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangePrecedentsTileArchiveDefaultTypeInternal() {}
  union {
    RangePrecedentsTileArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangePrecedentsTileArchiveDefaultTypeInternal _RangePrecedentsTileArchive_default_instance_;
PROTOBUF_CONSTEXPR RangeDependenciesTiledArchive::RangeDependenciesTiledArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.range_precedents_tile_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RangeDependenciesTiledArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeDependenciesTiledArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeDependenciesTiledArchiveDefaultTypeInternal() {}
  union {
    RangeDependenciesTiledArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeDependenciesTiledArchiveDefaultTypeInternal _RangeDependenciesTiledArchive_default_instance_;
PROTOBUF_CONSTEXPR SpanningDependenciesArchive_ReferringColumnToLocalCells::SpanningDependenciesArchive_ReferringColumnToLocalCells(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_coordinate_)*/{}
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.range_context_)*/0} {}
struct SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal() {}
  union {
    SpanningDependenciesArchive_ReferringColumnToLocalCells _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanningDependenciesArchive_ReferringColumnToLocalCellsDefaultTypeInternal _SpanningDependenciesArchive_ReferringColumnToLocalCells_default_instance_;
PROTOBUF_CONSTEXPR SpanningDependenciesArchive_ReferringColumnToRemoteCells::SpanningDependenciesArchive_ReferringColumnToRemoteCells(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.internal_cell_reference_)*/{}
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.range_context_)*/0} {}
struct SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal() {}
  union {
    SpanningDependenciesArchive_ReferringColumnToRemoteCells _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanningDependenciesArchive_ReferringColumnToRemoteCellsDefaultTypeInternal _SpanningDependenciesArchive_ReferringColumnToRemoteCells_default_instance_;
PROTOBUF_CONSTEXPR SpanningDependenciesArchive::SpanningDependenciesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_)*/{}
  , /*decltype(_impl_.range_context_)*/{}
  , /*decltype(_impl_.cell_)*/{}
  , /*decltype(_impl_.referring_column_to_local_cells_)*/{}
  , /*decltype(_impl_.referring_column_to_remote_cells_)*/{}
  , /*decltype(_impl_.total_range_for_deleted_table_)*/nullptr
  , /*decltype(_impl_.body_range_for_deleted_table_)*/nullptr} {}
struct SpanningDependenciesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanningDependenciesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanningDependenciesArchiveDefaultTypeInternal() {}
  union {
    SpanningDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanningDependenciesArchiveDefaultTypeInternal _SpanningDependenciesArchive_default_instance_;
PROTOBUF_CONSTEXPR SpanningDependenciesExpandedArchive_ExtentRange::SpanningDependenciesExpandedArchive_ExtentRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.extent_begin_)*/0u
  , /*decltype(_impl_.extent_end_)*/0u} {}
struct SpanningDependenciesExpandedArchive_ExtentRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanningDependenciesExpandedArchive_ExtentRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanningDependenciesExpandedArchive_ExtentRangeDefaultTypeInternal() {}
  union {
    SpanningDependenciesExpandedArchive_ExtentRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanningDependenciesExpandedArchive_ExtentRangeDefaultTypeInternal _SpanningDependenciesExpandedArchive_ExtentRange_default_instance_;
PROTOBUF_CONSTEXPR SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ranges_)*/{}
  , /*decltype(_impl_.owner_id_)*/0u
  , /*decltype(_impl_.range_context_)*/0} {}
struct SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextDefaultTypeInternal() {}
  union {
    SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextDefaultTypeInternal _SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext_default_instance_;
PROTOBUF_CONSTEXPR SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ranges_by_table_context_)*/{}
  , /*decltype(_impl_.coordinate_)*/nullptr} {}
struct SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsDefaultTypeInternal() {}
  union {
    SpanningDependenciesExpandedArchive_CellCoordRefersToExtents _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsDefaultTypeInternal _SpanningDependenciesExpandedArchive_CellCoordRefersToExtents_default_instance_;
PROTOBUF_CONSTEXPR SpanningDependenciesExpandedArchive::SpanningDependenciesExpandedArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coord_refers_to_spans_)*/{}
  , /*decltype(_impl_.total_range_for_table_)*/nullptr
  , /*decltype(_impl_.body_range_for_table_)*/nullptr} {}
struct SpanningDependenciesExpandedArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpanningDependenciesExpandedArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpanningDependenciesExpandedArchiveDefaultTypeInternal() {}
  union {
    SpanningDependenciesExpandedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpanningDependenciesExpandedArchiveDefaultTypeInternal _SpanningDependenciesExpandedArchive_default_instance_;
PROTOBUF_CONSTEXPR WholeOwnerDependenciesArchive::WholeOwnerDependenciesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dependent_cell_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WholeOwnerDependenciesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WholeOwnerDependenciesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WholeOwnerDependenciesArchiveDefaultTypeInternal() {}
  union {
    WholeOwnerDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WholeOwnerDependenciesArchiveDefaultTypeInternal _WholeOwnerDependenciesArchive_default_instance_;
PROTOBUF_CONSTEXPR WholeOwnerDependenciesExpandedArchive::WholeOwnerDependenciesExpandedArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.dependent_cells_)*/nullptr} {}
struct WholeOwnerDependenciesExpandedArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WholeOwnerDependenciesExpandedArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WholeOwnerDependenciesExpandedArchiveDefaultTypeInternal() {}
  union {
    WholeOwnerDependenciesExpandedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WholeOwnerDependenciesExpandedArchiveDefaultTypeInternal _WholeOwnerDependenciesExpandedArchive_default_instance_;
PROTOBUF_CONSTEXPR CellErrorsArchive_ErrorForCell::CellErrorsArchive_ErrorForCell(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coordinate_)*/nullptr
  , /*decltype(_impl_.err_due_to_cell_)*/nullptr
  , /*decltype(_impl_.error_flavor_)*/0} {}
struct CellErrorsArchive_ErrorForCellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellErrorsArchive_ErrorForCellDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellErrorsArchive_ErrorForCellDefaultTypeInternal() {}
  union {
    CellErrorsArchive_ErrorForCell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellErrorsArchive_ErrorForCellDefaultTypeInternal _CellErrorsArchive_ErrorForCell_default_instance_;
PROTOBUF_CONSTEXPR CellErrorsArchive::CellErrorsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.errors_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CellErrorsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellErrorsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellErrorsArchiveDefaultTypeInternal() {}
  union {
    CellErrorsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellErrorsArchiveDefaultTypeInternal _CellErrorsArchive_default_instance_;
PROTOBUF_CONSTEXPR UuidReferencesArchive_TableRef::UuidReferencesArchive_TableRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_uuid_)*/nullptr
  , /*decltype(_impl_.coord_set_)*/nullptr} {}
struct UuidReferencesArchive_TableRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UuidReferencesArchive_TableRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UuidReferencesArchive_TableRefDefaultTypeInternal() {}
  union {
    UuidReferencesArchive_TableRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UuidReferencesArchive_TableRefDefaultTypeInternal _UuidReferencesArchive_TableRef_default_instance_;
PROTOBUF_CONSTEXPR UuidReferencesArchive_UuidRef::UuidReferencesArchive_UuidRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uuid_)*/nullptr
  , /*decltype(_impl_.coord_set_)*/nullptr} {}
struct UuidReferencesArchive_UuidRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UuidReferencesArchive_UuidRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UuidReferencesArchive_UuidRefDefaultTypeInternal() {}
  union {
    UuidReferencesArchive_UuidRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UuidReferencesArchive_UuidRefDefaultTypeInternal _UuidReferencesArchive_UuidRef_default_instance_;
PROTOBUF_CONSTEXPR UuidReferencesArchive_TableWithUuidRef::UuidReferencesArchive_TableWithUuidRef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uuid_refs_)*/{}
  , /*decltype(_impl_.owner_uuid_)*/nullptr} {}
struct UuidReferencesArchive_TableWithUuidRefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UuidReferencesArchive_TableWithUuidRefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UuidReferencesArchive_TableWithUuidRefDefaultTypeInternal() {}
  union {
    UuidReferencesArchive_TableWithUuidRef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UuidReferencesArchive_TableWithUuidRefDefaultTypeInternal _UuidReferencesArchive_TableWithUuidRef_default_instance_;
PROTOBUF_CONSTEXPR UuidReferencesArchive::UuidReferencesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_refs_)*/{}
  , /*decltype(_impl_.table_uuid_refs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UuidReferencesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UuidReferencesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UuidReferencesArchiveDefaultTypeInternal() {}
  union {
    UuidReferencesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UuidReferencesArchiveDefaultTypeInternal _UuidReferencesArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaOwnerDependenciesArchive::FormulaOwnerDependenciesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_owner_uid_)*/nullptr
  , /*decltype(_impl_.cell_dependencies_)*/nullptr
  , /*decltype(_impl_.range_dependencies_)*/nullptr
  , /*decltype(_impl_.volatile_dependencies_)*/nullptr
  , /*decltype(_impl_.spanning_column_dependencies_)*/nullptr
  , /*decltype(_impl_.spanning_row_dependencies_)*/nullptr
  , /*decltype(_impl_.whole_owner_dependencies_)*/nullptr
  , /*decltype(_impl_.cell_errors_)*/nullptr
  , /*decltype(_impl_.formula_owner_)*/nullptr
  , /*decltype(_impl_.base_owner_uid_)*/nullptr
  , /*decltype(_impl_.tiled_cell_dependencies_)*/nullptr
  , /*decltype(_impl_.uuid_references_)*/nullptr
  , /*decltype(_impl_.tiled_range_dependencies_)*/nullptr
  , /*decltype(_impl_.internal_formula_owner_id_)*/0u
  , /*decltype(_impl_.owner_kind_)*/0u} {}
struct FormulaOwnerDependenciesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaOwnerDependenciesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaOwnerDependenciesArchiveDefaultTypeInternal() {}
  union {
    FormulaOwnerDependenciesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaOwnerDependenciesArchiveDefaultTypeInternal _FormulaOwnerDependenciesArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaOwnerInfoArchive::FormulaOwnerInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_owner_id_)*/nullptr
  , /*decltype(_impl_.cell_dependencies_)*/nullptr
  , /*decltype(_impl_.range_dependencies_)*/nullptr
  , /*decltype(_impl_.volatile_dependencies_)*/nullptr
  , /*decltype(_impl_.spanning_column_dependencies_)*/nullptr
  , /*decltype(_impl_.spanning_row_dependencies_)*/nullptr
  , /*decltype(_impl_.formula_owner_)*/nullptr
  , /*decltype(_impl_.whole_owner_dependencies_)*/nullptr
  , /*decltype(_impl_.cell_errors_)*/nullptr} {}
struct FormulaOwnerInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaOwnerInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaOwnerInfoArchiveDefaultTypeInternal() {}
  union {
    FormulaOwnerInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaOwnerInfoArchiveDefaultTypeInternal _FormulaOwnerInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR SubFormulaOwnerIDArchive::SubFormulaOwnerIDArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_owner_uid_)*/nullptr
  , /*decltype(_impl_.owner_kind_)*/0u} {}
struct SubFormulaOwnerIDArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubFormulaOwnerIDArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubFormulaOwnerIDArchiveDefaultTypeInternal() {}
  union {
    SubFormulaOwnerIDArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubFormulaOwnerIDArchiveDefaultTypeInternal _SubFormulaOwnerIDArchive_default_instance_;
PROTOBUF_CONSTEXPR OwnerIDMapArchive_OwnerIDMapArchiveEntry::OwnerIDMapArchive_OwnerIDMapArchiveEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_id_)*/nullptr
  , /*decltype(_impl_.internal_owner_id_)*/0u} {}
struct OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal() {}
  union {
    OwnerIDMapArchive_OwnerIDMapArchiveEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnerIDMapArchive_OwnerIDMapArchiveEntryDefaultTypeInternal _OwnerIDMapArchive_OwnerIDMapArchiveEntry_default_instance_;
PROTOBUF_CONSTEXPR OwnerIDMapArchive::OwnerIDMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.map_entry_)*/{}
  , /*decltype(_impl_.unregistered_internal_owner_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OwnerIDMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnerIDMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnerIDMapArchiveDefaultTypeInternal() {}
  union {
    OwnerIDMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnerIDMapArchiveDefaultTypeInternal _OwnerIDMapArchive_default_instance_;
PROTOBUF_CONSTEXPR UidLookupListArchive::UidLookupListArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UidLookupListArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UidLookupListArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UidLookupListArchiveDefaultTypeInternal() {}
  union {
    UidLookupListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UidLookupListArchiveDefaultTypeInternal _UidLookupListArchive_default_instance_;
PROTOBUF_CONSTEXPR DependencyTrackerArchive::DependencyTrackerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_owner_info_)*/{}
  , /*decltype(_impl_.dirty_leaf_)*/{}
  , /*decltype(_impl_.internal_dirty_leaf_)*/{}
  , /*decltype(_impl_.formula_owner_dependencies_)*/{}
  , /*decltype(_impl_.owner_id_map_)*/nullptr
  , /*decltype(_impl_.number_of_formulas_)*/uint64_t{0u}} {}
struct DependencyTrackerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DependencyTrackerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DependencyTrackerArchiveDefaultTypeInternal() {}
  union {
    DependencyTrackerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DependencyTrackerArchiveDefaultTypeInternal _DependencyTrackerArchive_default_instance_;
PROTOBUF_CONSTEXPR RemoteDataSpecifierArchive::RemoteDataSpecifierArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.function_index_)*/0u
  , /*decltype(_impl_.attribute_)*/0u
  , /*decltype(_impl_.date_)*/0} {}
struct RemoteDataSpecifierArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteDataSpecifierArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteDataSpecifierArchiveDefaultTypeInternal() {}
  union {
    RemoteDataSpecifierArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteDataSpecifierArchiveDefaultTypeInternal _RemoteDataSpecifierArchive_default_instance_;
PROTOBUF_CONSTEXPR RemoteDataValueMapArchive_RemoteDataMapEntry::RemoteDataValueMapArchive_RemoteDataMapEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.specifier_)*/nullptr
  , /*decltype(_impl_.value_)*/nullptr} {}
struct RemoteDataValueMapArchive_RemoteDataMapEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteDataValueMapArchive_RemoteDataMapEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteDataValueMapArchive_RemoteDataMapEntryDefaultTypeInternal() {}
  union {
    RemoteDataValueMapArchive_RemoteDataMapEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteDataValueMapArchive_RemoteDataMapEntryDefaultTypeInternal _RemoteDataValueMapArchive_RemoteDataMapEntry_default_instance_;
PROTOBUF_CONSTEXPR RemoteDataValueMapArchive::RemoteDataValueMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoteDataValueMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteDataValueMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteDataValueMapArchiveDefaultTypeInternal() {}
  union {
    RemoteDataValueMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteDataValueMapArchiveDefaultTypeInternal _RemoteDataValueMapArchive_default_instance_;
PROTOBUF_CONSTEXPR StockArchive_AttributeEntry::StockArchive_AttributeEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.attribute_)*/0u} {}
struct StockArchive_AttributeEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StockArchive_AttributeEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StockArchive_AttributeEntryDefaultTypeInternal() {}
  union {
    StockArchive_AttributeEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StockArchive_AttributeEntryDefaultTypeInternal _StockArchive_AttributeEntry_default_instance_;
PROTOBUF_CONSTEXPR StockArchive::StockArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.attribute_)*/{}
  , /*decltype(_impl_.symbol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_)*/0} {}
struct StockArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StockArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StockArchiveDefaultTypeInternal() {}
  union {
    StockArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StockArchiveDefaultTypeInternal _StockArchive_default_instance_;
PROTOBUF_CONSTEXPR RemoteDataStoreArchive::RemoteDataStoreArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stocks_)*/{}
  , /*decltype(_impl_.value_map_)*/nullptr} {}
struct RemoteDataStoreArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteDataStoreArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteDataStoreArchiveDefaultTypeInternal() {}
  union {
    RemoteDataStoreArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteDataStoreArchiveDefaultTypeInternal _RemoteDataStoreArchive_default_instance_;
PROTOBUF_CONSTEXPR NameTrackedReferencePair::NameTrackedReferencePair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tracked_reference_)*/nullptr
  , /*decltype(_impl_.tracked_reference_id_)*/0u} {}
struct NameTrackedReferencePairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NameTrackedReferencePairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NameTrackedReferencePairDefaultTypeInternal() {}
  union {
    NameTrackedReferencePair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NameTrackedReferencePairDefaultTypeInternal _NameTrackedReferencePair_default_instance_;
PROTOBUF_CONSTEXPR NamesByTrackedReferenceArchive::NamesByTrackedReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_tracked_reference_pair_)*/{}
  , /*decltype(_impl_.table_id_)*/nullptr} {}
struct NamesByTrackedReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NamesByTrackedReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NamesByTrackedReferenceArchiveDefaultTypeInternal() {}
  union {
    NamesByTrackedReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NamesByTrackedReferenceArchiveDefaultTypeInternal _NamesByTrackedReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR NamedReferenceManagerArchive::NamedReferenceManagerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.names_by_tracked_reference_by_table_)*/{}
  , /*decltype(_impl_.reference_tracker_)*/nullptr} {}
struct NamedReferenceManagerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NamedReferenceManagerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NamedReferenceManagerArchiveDefaultTypeInternal() {}
  union {
    NamedReferenceManagerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NamedReferenceManagerArchiveDefaultTypeInternal _NamedReferenceManagerArchive_default_instance_;
PROTOBUF_CONSTEXPR UuidSetStoreArchive_UuidSet::UuidSetStoreArchive_UuidSet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uuid_)*/{}
  , /*decltype(_impl_.index_of_set_)*/0u} {}
struct UuidSetStoreArchive_UuidSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UuidSetStoreArchive_UuidSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UuidSetStoreArchive_UuidSetDefaultTypeInternal() {}
  union {
    UuidSetStoreArchive_UuidSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UuidSetStoreArchive_UuidSetDefaultTypeInternal _UuidSetStoreArchive_UuidSet_default_instance_;
PROTOBUF_CONSTEXPR UuidSetStoreArchive::UuidSetStoreArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uuidset_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UuidSetStoreArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UuidSetStoreArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UuidSetStoreArchiveDefaultTypeInternal() {}
  union {
    UuidSetStoreArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UuidSetStoreArchiveDefaultTypeInternal _UuidSetStoreArchive_default_instance_;
PROTOBUF_CONSTEXPR UuidReferenceMapArchive_CellRefsForUuid::UuidReferenceMapArchive_CellRefsForUuid(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_ref_)*/{}
  , /*decltype(_impl_.uuid_)*/nullptr
  , /*decltype(_impl_.cell_refs_)*/nullptr} {}
struct UuidReferenceMapArchive_CellRefsForUuidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UuidReferenceMapArchive_CellRefsForUuidDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UuidReferenceMapArchive_CellRefsForUuidDefaultTypeInternal() {}
  union {
    UuidReferenceMapArchive_CellRefsForUuid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UuidReferenceMapArchive_CellRefsForUuidDefaultTypeInternal _UuidReferenceMapArchive_CellRefsForUuid_default_instance_;
PROTOBUF_CONSTEXPR UuidReferenceMapArchive::UuidReferenceMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_refs_for_uuid_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UuidReferenceMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UuidReferenceMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UuidReferenceMapArchiveDefaultTypeInternal() {}
  union {
    UuidReferenceMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UuidReferenceMapArchiveDefaultTypeInternal _UuidReferenceMapArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupByNodeMapArchive_CellRefsForGroupNode::GroupByNodeMapArchive_CellRefsForGroupNode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_node_uid_)*/nullptr
  , /*decltype(_impl_.cell_refs_)*/nullptr} {}
struct GroupByNodeMapArchive_CellRefsForGroupNodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupByNodeMapArchive_CellRefsForGroupNodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupByNodeMapArchive_CellRefsForGroupNodeDefaultTypeInternal() {}
  union {
    GroupByNodeMapArchive_CellRefsForGroupNode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupByNodeMapArchive_CellRefsForGroupNodeDefaultTypeInternal _GroupByNodeMapArchive_CellRefsForGroupNode_default_instance_;
PROTOBUF_CONSTEXPR GroupByNodeMapArchive_GroupNodesForGroupBy::GroupByNodeMapArchive_GroupNodesForGroupBy(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.refs_for_group_node_)*/{}
  , /*decltype(_impl_.group_by_uid_)*/nullptr} {}
struct GroupByNodeMapArchive_GroupNodesForGroupByDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupByNodeMapArchive_GroupNodesForGroupByDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupByNodeMapArchive_GroupNodesForGroupByDefaultTypeInternal() {}
  union {
    GroupByNodeMapArchive_GroupNodesForGroupBy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupByNodeMapArchive_GroupNodesForGroupByDefaultTypeInternal _GroupByNodeMapArchive_GroupNodesForGroupBy_default_instance_;
PROTOBUF_CONSTEXPR GroupByNodeMapArchive::GroupByNodeMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.refs_for_group_by_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GroupByNodeMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupByNodeMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupByNodeMapArchiveDefaultTypeInternal() {}
  union {
    GroupByNodeMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupByNodeMapArchiveDefaultTypeInternal _GroupByNodeMapArchive_default_instance_;
PROTOBUF_CONSTEXPR CalculationEngineArchive::CalculationEngineArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.begin_tracking_names_legacy_nrm_)*/{}
  , /*decltype(_impl_.end_tracking_names_legacy_nrm_)*/{}
  , /*decltype(_impl_.saved_locale_identifier_for_4_2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.document_timezone_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.saved_locale_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dependency_tracker_)*/nullptr
  , /*decltype(_impl_.named_reference_manager_)*/nullptr
  , /*decltype(_impl_.uuid_reference_map_)*/nullptr
  , /*decltype(_impl_.table_uid_history_)*/nullptr
  , /*decltype(_impl_.remote_data_store_)*/nullptr
  , /*decltype(_impl_.group_node_map_)*/nullptr
  , /*decltype(_impl_.header_name_manager_)*/nullptr
  , /*decltype(_impl_.refs_to_dirty_)*/nullptr
  , /*decltype(_impl_.document_random_seed_)*/uint64_t{0u}
  , /*decltype(_impl_.document_timestamp_)*/0
  , /*decltype(_impl_.base_date_1904_)*/false
  , /*decltype(_impl_.excel_import_date_mode_)*/1} {}
struct CalculationEngineArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CalculationEngineArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CalculationEngineArchiveDefaultTypeInternal() {}
  union {
    CalculationEngineArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CalculationEngineArchiveDefaultTypeInternal _CalculationEngineArchive_default_instance_;
PROTOBUF_CONSTEXPR PreserveColumnRowFlagsArchive::PreserveColumnRowFlagsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.begin_row_is_absolute_)*/false
  , /*decltype(_impl_.begin_column_is_absolute_)*/false
  , /*decltype(_impl_.end_row_is_absolute_)*/false
  , /*decltype(_impl_.end_column_is_absolute_)*/false} {}
struct PreserveColumnRowFlagsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PreserveColumnRowFlagsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PreserveColumnRowFlagsArchiveDefaultTypeInternal() {}
  union {
    PreserveColumnRowFlagsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PreserveColumnRowFlagsArchiveDefaultTypeInternal _PreserveColumnRowFlagsArchive_default_instance_;
PROTOBUF_CONSTEXPR CategoryReferenceArchive_CatRefUidList::CategoryReferenceArchive_CatRefUidList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CategoryReferenceArchive_CatRefUidListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryReferenceArchive_CatRefUidListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryReferenceArchive_CatRefUidListDefaultTypeInternal() {}
  union {
    CategoryReferenceArchive_CatRefUidList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryReferenceArchive_CatRefUidListDefaultTypeInternal _CategoryReferenceArchive_CatRefUidList_default_instance_;
PROTOBUF_CONSTEXPR CategoryReferenceArchive::CategoryReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_by_uid_)*/nullptr
  , /*decltype(_impl_.column_uid_)*/nullptr
  , /*decltype(_impl_.group_uids_)*/nullptr
  , /*decltype(_impl_.preserve_flags_)*/nullptr
  , /*decltype(_impl_.relative_group_uid_)*/nullptr
  , /*decltype(_impl_.absolute_group_uid_)*/nullptr
  , /*decltype(_impl_.aggregate_type_)*/0u
  , /*decltype(_impl_.group_level_)*/0
  , /*decltype(_impl_.relative_column_)*/0
  , /*decltype(_impl_.option_refers_to_pivot_rows_)*/false
  , /*decltype(_impl_.option_refers_to_pivot_columns_)*/false
  , /*decltype(_impl_.option_show_aggregate_name_)*/false
  , /*decltype(_impl_.agg_index_level_)*/0u} {}
struct CategoryReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryReferenceArchiveDefaultTypeInternal() {}
  union {
    CategoryReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryReferenceArchiveDefaultTypeInternal _CategoryReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_handle_)*/0u
  , /*decltype(_impl_.column_handle_)*/0u
  , /*decltype(_impl_.row_is_sticky_)*/0u
  , /*decltype(_impl_.column_is_sticky_)*/0u} {}
struct ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_reference_whitespace_after_sheet_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_before_table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_after_table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_before_cell_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_id_)*/nullptr
  , /*decltype(_impl_.row_handle_)*/0u
  , /*decltype(_impl_.column_handle_)*/0u
  , /*decltype(_impl_.row_is_sticky_)*/0u
  , /*decltype(_impl_.column_is_sticky_)*/0u} {}
struct ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTColumnCoordinateArchive::ASTNodeArrayArchive_ASTColumnCoordinateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_)*/0
  , /*decltype(_impl_.absolute_)*/false} {}
struct ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTColumnCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTColumnCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTRowCoordinateArchive::ASTNodeArrayArchive_ASTRowCoordinateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_)*/0
  , /*decltype(_impl_.absolute_)*/false} {}
struct ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTRowCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTRowCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTUidList::ASTNodeArrayArchive_ASTUidList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ASTNodeArrayArchive_ASTUidListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTUidListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTUidListDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTUidList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTUidListDefaultTypeInternal _ASTNodeArrayArchive_ASTUidList_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTUidTract::ASTNodeArrayArchive_ASTUidTract(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.columnuids_)*/nullptr
  , /*decltype(_impl_.rowuids_)*/nullptr
  , /*decltype(_impl_.is_range_ref_)*/false
  , /*decltype(_impl_.purpose_)*/0
  , /*decltype(_impl_.preserve_rectangular_)*/true} {}
struct ASTNodeArrayArchive_ASTUidTractDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTUidTractDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTUidTractDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTUidTract _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTUidTractDefaultTypeInternal _ASTNodeArrayArchive_ASTUidTract_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTStickyBits::ASTNodeArrayArchive_ASTStickyBits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.begin_row_is_absolute_)*/false
  , /*decltype(_impl_.begin_column_is_absolute_)*/false
  , /*decltype(_impl_.end_row_is_absolute_)*/false
  , /*decltype(_impl_.end_column_is_absolute_)*/false} {}
struct ASTNodeArrayArchive_ASTStickyBitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTStickyBitsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTStickyBitsDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTStickyBits _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTStickyBitsDefaultTypeInternal _ASTNodeArrayArchive_ASTStickyBits_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTUidTractList::ASTNodeArrayArchive_ASTUidTractList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tract_)*/{}
  , /*decltype(_impl_.sticky_bits_)*/nullptr} {}
struct ASTNodeArrayArchive_ASTUidTractListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTUidTractListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTUidTractListDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTUidTractList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTUidTractListDefaultTypeInternal _ASTNodeArrayArchive_ASTUidTractList_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTUidCoordinateArchive::ASTNodeArrayArchive_ASTUidCoordinateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_uid_)*/nullptr
  , /*decltype(_impl_.row_uid_)*/nullptr
  , /*decltype(_impl_.column_absolute_)*/false
  , /*decltype(_impl_.row_absolute_)*/false} {}
struct ASTNodeArrayArchive_ASTUidCoordinateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTUidCoordinateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTUidCoordinateArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTUidCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTUidCoordinateArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTUidCoordinateArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCategoryLevels::ASTNodeArrayArchive_ASTCategoryLevels(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_column_group_level_)*/0u
  , /*decltype(_impl_.ast_row_group_level_)*/0u
  , /*decltype(_impl_.ast_agg_index_level_)*/0u} {}
struct ASTNodeArrayArchive_ASTCategoryLevelsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCategoryLevelsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTCategoryLevelsDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTCategoryLevels _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTCategoryLevelsDefaultTypeInternal _ASTNodeArrayArchive_ASTCategoryLevels_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCategoryReferenceArchive::ASTNodeArrayArchive_ASTCategoryReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.category_ref_)*/nullptr} {}
struct ASTNodeArrayArchive_ASTCategoryReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCategoryReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTCategoryReferenceArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTCategoryReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTCategoryReferenceArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCategoryReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_begin_)*/0
  , /*decltype(_impl_.range_end_)*/0} {}
struct ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_begin_)*/0u
  , /*decltype(_impl_.range_end_)*/0u} {}
struct ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTColonTractArchive::ASTNodeArrayArchive_ASTColonTractArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.relative_column_)*/{}
  , /*decltype(_impl_.relative_row_)*/{}
  , /*decltype(_impl_.absolute_column_)*/{}
  , /*decltype(_impl_.absolute_row_)*/{}
  , /*decltype(_impl_.preserve_rectangular_)*/true} {}
struct ASTNodeArrayArchive_ASTColonTractArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTColonTractArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTColonTractArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTColonTractArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTColonTractArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTColonTractArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_reference_whitespace_after_sheet_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_before_table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_after_table_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_reference_whitespace_before_cell_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_id_)*/nullptr} {}
struct ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTLetNodeWhitespace::ASTNodeArrayArchive_ASTLetNodeWhitespace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_let_whitespace_after_let_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_let_whitespace_after_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_let_whitespace_after_equals_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_let_whitespace_after_delimiter_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}} {}
struct ASTNodeArrayArchive_ASTLetNodeWhitespaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTLetNodeWhitespaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTLetNodeWhitespaceDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTLetNodeWhitespace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTLetNodeWhitespaceDefaultTypeInternal _ASTNodeArrayArchive_ASTLetNodeWhitespace_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTNodeArchive::ASTNodeArrayArchive_ASTNodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_string_node_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_unknown_function_node_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_date_node_date_time_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_whitespace_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_let_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ast_thunk_node_array_)*/nullptr
  , /*decltype(_impl_.ast_local_cell_reference_node_reference_)*/nullptr
  , /*decltype(_impl_.ast_cross_table_cell_reference_node_reference_)*/nullptr
  , /*decltype(_impl_.ast_column_)*/nullptr
  , /*decltype(_impl_.ast_row_)*/nullptr
  , /*decltype(_impl_.ast_cross_table_reference_extra_info_)*/nullptr
  , /*decltype(_impl_.ast_uid_coordinate_)*/nullptr
  , /*decltype(_impl_.ast_sticky_bits_)*/nullptr
  , /*decltype(_impl_.ast_let_e2_)*/nullptr
  , /*decltype(_impl_.ast_let_whitespace_)*/nullptr
  , /*decltype(_impl_.ast_tract_list_)*/nullptr
  , /*decltype(_impl_.ast_category_ref_)*/nullptr
  , /*decltype(_impl_.ast_colon_tract_)*/nullptr
  , /*decltype(_impl_.ast_frozen_sticky_bits_)*/nullptr
  , /*decltype(_impl_.ast_category_levels_)*/nullptr
  , /*decltype(_impl_.ast_function_node_index_)*/0u
  , /*decltype(_impl_.ast_function_node_numargs_)*/0u
  , /*decltype(_impl_.ast_number_node_number_)*/0
  , /*decltype(_impl_.ast_date_node_datenum_)*/0
  , /*decltype(_impl_.ast_duration_node_unitnum_)*/0
  , /*decltype(_impl_.ast_duration_node_unit_)*/0
  , /*decltype(_impl_.ast_token_node_boolean_)*/false
  , /*decltype(_impl_.ast_array_node_numcol_)*/0u
  , /*decltype(_impl_.ast_array_node_numrow_)*/0u
  , /*decltype(_impl_.ast_list_node_numargs_)*/0u
  , /*decltype(_impl_.ast_unknown_function_node_numargs_)*/0u
  , /*decltype(_impl_.ast_boolean_node_boolean_)*/false
  , /*decltype(_impl_.ast_date_node_suppress_date_format_)*/false
  , /*decltype(_impl_.ast_date_node_suppress_time_format_)*/false
  , /*decltype(_impl_.ast_duration_node_use_automatic_units_)*/false
  , /*decltype(_impl_.ast_duration_node_style_)*/0u
  , /*decltype(_impl_.ast_duration_node_duration_unit_largest_)*/0u
  , /*decltype(_impl_.ast_duration_node_duration_unit_smallest_)*/0u
  , /*decltype(_impl_.ast_number_node_decimal_low_)*/uint64_t{0u}
  , /*decltype(_impl_.ast_number_node_decimal_high_)*/uint64_t{0u}
  , /*decltype(_impl_.ast_symbol_)*/0u
  , /*decltype(_impl_.ast_node_type_)*/1} {}
struct ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive_ASTNodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchive_ASTNodeArchiveDefaultTypeInternal _ASTNodeArrayArchive_ASTNodeArchive_default_instance_;
PROTOBUF_CONSTEXPR ASTNodeArrayArchive::ASTNodeArrayArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ast_node_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ASTNodeArrayArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASTNodeArrayArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASTNodeArrayArchiveDefaultTypeInternal() {}
  union {
    ASTNodeArrayArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASTNodeArrayArchiveDefaultTypeInternal _ASTNodeArrayArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaTranslationFlagsArchive::FormulaTranslationFlagsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.excel_import_translation_)*/false
  , /*decltype(_impl_.number_to_date_coercion_removal_translation_)*/false
  , /*decltype(_impl_.contains_uid_form_references_)*/false
  , /*decltype(_impl_.contains_frozen_references_)*/false
  , /*decltype(_impl_.returns_percent_formatted_)*/false} {}
struct FormulaTranslationFlagsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaTranslationFlagsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaTranslationFlagsArchiveDefaultTypeInternal() {}
  union {
    FormulaTranslationFlagsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaTranslationFlagsArchiveDefaultTypeInternal _FormulaTranslationFlagsArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaArchive::FormulaArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_node_array_)*/nullptr
  , /*decltype(_impl_.translation_flags_)*/nullptr
  , /*decltype(_impl_.host_table_uid_)*/nullptr
  , /*decltype(_impl_.host_column_uid_)*/nullptr
  , /*decltype(_impl_.host_row_uid_)*/nullptr
  , /*decltype(_impl_.host_column_)*/0u
  , /*decltype(_impl_.host_row_)*/0u
  , /*decltype(_impl_.host_column_is_negative_)*/false
  , /*decltype(_impl_.host_row_is_negative_)*/false} {}
struct FormulaArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaArchiveDefaultTypeInternal() {}
  union {
    FormulaArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaArchiveDefaultTypeInternal _FormulaArchive_default_instance_;
PROTOBUF_CONSTEXPR FunctorArchive::FunctorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_)*/nullptr
  , /*decltype(_impl_.num_args_)*/0u} {}
struct FunctorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FunctorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FunctorArchiveDefaultTypeInternal() {}
  union {
    FunctorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FunctorArchiveDefaultTypeInternal _FunctorArchive_default_instance_;
PROTOBUF_CONSTEXPR FormatStructArchive::FormatStructArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currency_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.date_time_format_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_type_)*/0u
  , /*decltype(_impl_.decimal_places_)*/0u
  , /*decltype(_impl_.negative_style_)*/0u
  , /*decltype(_impl_.duration_style_)*/0u
  , /*decltype(_impl_.base_)*/0u
  , /*decltype(_impl_.show_thousands_separator_)*/false
  , /*decltype(_impl_.use_accounting_style_)*/false
  , /*decltype(_impl_.base_use_minus_sign_)*/false
  , /*decltype(_impl_.suppress_date_format_)*/false
  , /*decltype(_impl_.base_places_)*/0u
  , /*decltype(_impl_.fraction_accuracy_)*/0u
  , /*decltype(_impl_.suppress_time_format_)*/false
  , /*decltype(_impl_.duration_unit_largest_)*/0u
  , /*decltype(_impl_.duration_unit_smallest_)*/0u} {}
struct FormatStructArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormatStructArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormatStructArchiveDefaultTypeInternal() {}
  union {
    FormatStructArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormatStructArchiveDefaultTypeInternal _FormatStructArchive_default_instance_;
PROTOBUF_CONSTEXPR RangeCoordinateArchive::RangeCoordinateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.top_left_column_)*/0u
  , /*decltype(_impl_.top_left_row_)*/0u
  , /*decltype(_impl_.bottom_right_column_)*/0u
  , /*decltype(_impl_.bottom_right_row_)*/0u} {}
struct RangeCoordinateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RangeCoordinateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RangeCoordinateArchiveDefaultTypeInternal() {}
  union {
    RangeCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RangeCoordinateArchiveDefaultTypeInternal _RangeCoordinateArchive_default_instance_;
PROTOBUF_CONSTEXPR TableTransposeInfoArchive::TableTransposeInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.body_range_for_transposed_table_)*/nullptr
  , /*decltype(_impl_.number_of_footer_rows_)*/0u} {}
struct TableTransposeInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableTransposeInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableTransposeInfoArchiveDefaultTypeInternal() {}
  union {
    TableTransposeInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableTransposeInfoArchiveDefaultTypeInternal _TableTransposeInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR MergeOriginMovedArchive::MergeOriginMovedArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.src_column_)*/{}
  , /*decltype(_impl_.src_row_)*/{}
  , /*decltype(_impl_.dst_column_)*/{}
  , /*decltype(_impl_.dst_row_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MergeOriginMovedArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MergeOriginMovedArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MergeOriginMovedArchiveDefaultTypeInternal() {}
  union {
    MergeOriginMovedArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MergeOriginMovedArchiveDefaultTypeInternal _MergeOriginMovedArchive_default_instance_;
PROTOBUF_CONSTEXPR OwnerUIDMapperArchive::OwnerUIDMapperArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_uid_)*/nullptr
  , /*decltype(_impl_.next_table_uid_)*/nullptr
  , /*decltype(_impl_.hidden_state_for_rows_owner_uid_)*/nullptr
  , /*decltype(_impl_.next_hidden_state_for_rows_owner_uid_)*/nullptr
  , /*decltype(_impl_.hidden_state_for_columns_owner_uid_)*/nullptr
  , /*decltype(_impl_.next_hidden_state_for_columns_owner_uid_)*/nullptr
  , /*decltype(_impl_.conditional_style_owner_uid_)*/nullptr
  , /*decltype(_impl_.next_conditional_style_owner_uid_)*/nullptr
  , /*decltype(_impl_.sort_rule_reference_tracker_owner_uid_)*/nullptr
  , /*decltype(_impl_.next_sort_rule_reference_tracker_owner_uid_)*/nullptr
  , /*decltype(_impl_.merge_owner_uid_)*/nullptr
  , /*decltype(_impl_.next_merge_owner_uid_)*/nullptr
  , /*decltype(_impl_.category_aggregates_owner_uid_)*/nullptr
  , /*decltype(_impl_.next_category_aggregates_owner_uid_)*/nullptr
  , /*decltype(_impl_.group_by_uid_)*/nullptr
  , /*decltype(_impl_.next_group_by_uid_)*/nullptr
  , /*decltype(_impl_.pencil_annotation_owner_uid_)*/nullptr
  , /*decltype(_impl_.next_pencil_annotation_owner_uid_)*/nullptr} {}
struct OwnerUIDMapperArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OwnerUIDMapperArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OwnerUIDMapperArchiveDefaultTypeInternal() {}
  union {
    OwnerUIDMapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OwnerUIDMapperArchiveDefaultTypeInternal _OwnerUIDMapperArchive_default_instance_;
PROTOBUF_CONSTEXPR RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.prev_table_uid_)*/nullptr
  , /*decltype(_impl_.new_table_uid_)*/nullptr} {}
struct RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveDefaultTypeInternal() {}
  union {
    RewriteTableUIDInfoArchive_TableUIDMapEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveDefaultTypeInternal _RewriteTableUIDInfoArchive_TableUIDMapEntryArchive_default_instance_;
PROTOBUF_CONSTEXPR RewriteTableUIDInfoArchive::RewriteTableUIDInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_uid_map_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RewriteTableUIDInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RewriteTableUIDInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RewriteTableUIDInfoArchiveDefaultTypeInternal() {}
  union {
    RewriteTableUIDInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RewriteTableUIDInfoArchiveDefaultTypeInternal _RewriteTableUIDInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupByChangeArchive_GroupingColumnChangeArchive::GroupByChangeArchive_GroupingColumnChangeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.old_level_)*/0u
  , /*decltype(_impl_.new_level_)*/0u} {}
struct GroupByChangeArchive_GroupingColumnChangeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupByChangeArchive_GroupingColumnChangeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupByChangeArchive_GroupingColumnChangeArchiveDefaultTypeInternal() {}
  union {
    GroupByChangeArchive_GroupingColumnChangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupByChangeArchive_GroupingColumnChangeArchiveDefaultTypeInternal _GroupByChangeArchive_GroupingColumnChangeArchive_default_instance_;
PROTOBUF_CONSTEXPR GroupByChangeArchive::GroupByChangeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.removed_group_uids_)*/{}
  , /*decltype(_impl_.grouping_column_changes_)*/{}
  , /*decltype(_impl_.group_by_uid_)*/nullptr
  , /*decltype(_impl_.previous_to_updated_map_)*/nullptr
  , /*decltype(_impl_.updated_to_previous_map_)*/nullptr
  , /*decltype(_impl_.change_type_)*/0
  , /*decltype(_impl_.previous_level_)*/0u
  , /*decltype(_impl_.updated_level_)*/0u} {}
struct GroupByChangeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GroupByChangeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GroupByChangeArchiveDefaultTypeInternal() {}
  union {
    GroupByChangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GroupByChangeArchiveDefaultTypeInternal _GroupByChangeArchive_default_instance_;
PROTOBUF_CONSTEXPR RewriteGroupNodeUIDInfoArchive::RewriteGroupNodeUIDInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.group_by_uid_)*/nullptr
  , /*decltype(_impl_.group_node_uid_map_)*/nullptr} {}
struct RewriteGroupNodeUIDInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RewriteGroupNodeUIDInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RewriteGroupNodeUIDInfoArchiveDefaultTypeInternal() {}
  union {
    RewriteGroupNodeUIDInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RewriteGroupNodeUIDInfoArchiveDefaultTypeInternal _RewriteGroupNodeUIDInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR IndexedUidsArchive_IndexedUid::IndexedUidsArchive_IndexedUid(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uid_for_index_)*/nullptr
  , /*decltype(_impl_.index_for_uid_)*/0u} {}
struct IndexedUidsArchive_IndexedUidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexedUidsArchive_IndexedUidDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexedUidsArchive_IndexedUidDefaultTypeInternal() {}
  union {
    IndexedUidsArchive_IndexedUid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexedUidsArchive_IndexedUidDefaultTypeInternal _IndexedUidsArchive_IndexedUid_default_instance_;
PROTOBUF_CONSTEXPR IndexedUidsArchive::IndexedUidsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexedUidsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexedUidsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexedUidsArchiveDefaultTypeInternal() {}
  union {
    IndexedUidsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexedUidsArchiveDefaultTypeInternal _IndexedUidsArchive_default_instance_;
PROTOBUF_CONSTEXPR RewriteRangeEntryArchive::RewriteRangeEntryArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_uids_)*/{}
  , /*decltype(_impl_.range_location_)*/0u
  , /*decltype(_impl_.range_length_)*/0u
  , /*decltype(_impl_.offset_)*/0u} {}
struct RewriteRangeEntryArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RewriteRangeEntryArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RewriteRangeEntryArchiveDefaultTypeInternal() {}
  union {
    RewriteRangeEntryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RewriteRangeEntryArchiveDefaultTypeInternal _RewriteRangeEntryArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnOrRowUuidsInfoArchive::ColumnOrRowUuidsInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_entries_)*/{}
  , /*decltype(_impl_.table_uid_)*/nullptr
  , /*decltype(_impl_.cond_style_owner_uid_)*/nullptr
  , /*decltype(_impl_.group_by_uid_)*/nullptr
  , /*decltype(_impl_.uids_)*/nullptr
  , /*decltype(_impl_.table_range_)*/nullptr
  , /*decltype(_impl_.insert_at_uid_)*/nullptr
  , /*decltype(_impl_.insert_opposite_uid_)*/nullptr
  , /*decltype(_impl_.is_rows_)*/false} {}
struct ColumnOrRowUuidsInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnOrRowUuidsInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnOrRowUuidsInfoArchiveDefaultTypeInternal() {}
  union {
    ColumnOrRowUuidsInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnOrRowUuidsInfoArchiveDefaultTypeInternal _ColumnOrRowUuidsInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR RegionInfoArchive::RegionInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_uid_)*/nullptr
  , /*decltype(_impl_.column_uids_)*/nullptr
  , /*decltype(_impl_.row_uids_)*/nullptr} {}
struct RegionInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionInfoArchiveDefaultTypeInternal() {}
  union {
    RegionInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionInfoArchiveDefaultTypeInternal _RegionInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR RegionMovedInfoArchive::RegionMovedInfoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.src_region_)*/nullptr
  , /*decltype(_impl_.dst_region_)*/nullptr
  , /*decltype(_impl_.original_src_region_)*/nullptr
  , /*decltype(_impl_.final_dest_table_uid_)*/nullptr
  , /*decltype(_impl_.span_rows_)*/false
  , /*decltype(_impl_.span_columns_)*/false} {}
struct RegionMovedInfoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionMovedInfoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionMovedInfoArchiveDefaultTypeInternal() {}
  union {
    RegionMovedInfoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionMovedInfoArchiveDefaultTypeInternal _RegionMovedInfoArchive_default_instance_;
PROTOBUF_CONSTEXPR MergeSourceArchive::MergeSourceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.coord_column_)*/0u
  , /*decltype(_impl_.coord_row_)*/0u} {}
struct MergeSourceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MergeSourceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MergeSourceArchiveDefaultTypeInternal() {}
  union {
    MergeSourceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MergeSourceArchiveDefaultTypeInternal _MergeSourceArchive_default_instance_;
PROTOBUF_CONSTEXPR HauntedOwnerArchive::HauntedOwnerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.owner_uid_)*/nullptr} {}
struct HauntedOwnerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HauntedOwnerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HauntedOwnerArchiveDefaultTypeInternal() {}
  union {
    HauntedOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HauntedOwnerArchiveDefaultTypeInternal _HauntedOwnerArchive_default_instance_;
PROTOBUF_CONSTEXPR CellCoordinateArchive::CellCoordinateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.packeddata_)*/0u
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.row_)*/0u} {}
struct CellCoordinateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellCoordinateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellCoordinateArchiveDefaultTypeInternal() {}
  union {
    CellCoordinateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellCoordinateArchiveDefaultTypeInternal _CellCoordinateArchive_default_instance_;
PROTOBUF_CONSTEXPR CellCoordinateVectorArchive::CellCoordinateVectorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_coord_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CellCoordinateVectorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellCoordinateVectorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellCoordinateVectorArchiveDefaultTypeInternal() {}
  union {
    CellCoordinateVectorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellCoordinateVectorArchiveDefaultTypeInternal _CellCoordinateVectorArchive_default_instance_;
PROTOBUF_CONSTEXPR ExpandedCellRefObjectPairArchive::ExpandedCellRefObjectPairArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_ref_)*/nullptr
  , /*decltype(_impl_.object_)*/nullptr} {}
struct ExpandedCellRefObjectPairArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpandedCellRefObjectPairArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpandedCellRefObjectPairArchiveDefaultTypeInternal() {}
  union {
    ExpandedCellRefObjectPairArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpandedCellRefObjectPairArchiveDefaultTypeInternal _ExpandedCellRefObjectPairArchive_default_instance_;
PROTOBUF_CONSTEXPR ExpandedCellRefObjectMapArchive::ExpandedCellRefObjectMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cell_ref_object_pair_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExpandedCellRefObjectMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpandedCellRefObjectMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpandedCellRefObjectMapArchiveDefaultTypeInternal() {}
  union {
    ExpandedCellRefObjectMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpandedCellRefObjectMapArchiveDefaultTypeInternal _ExpandedCellRefObjectMapArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaAtCoordArchive::FormulaAtCoordArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_)*/nullptr
  , /*decltype(_impl_.column_)*/0u
  , /*decltype(_impl_.row_)*/0u
  , /*decltype(_impl_.repeat_previous_formula_)*/false} {}
struct FormulaAtCoordArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaAtCoordArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaAtCoordArchiveDefaultTypeInternal() {}
  union {
    FormulaAtCoordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaAtCoordArchiveDefaultTypeInternal _FormulaAtCoordArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaCoordPairsByOwnerArchive::FormulaCoordPairsByOwnerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_at_coords_)*/{}
  , /*decltype(_impl_.owner_uid_)*/nullptr
  , /*decltype(_impl_.owner_kind_)*/0u} {}
struct FormulaCoordPairsByOwnerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaCoordPairsByOwnerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaCoordPairsByOwnerArchiveDefaultTypeInternal() {}
  union {
    FormulaCoordPairsByOwnerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaCoordPairsByOwnerArchiveDefaultTypeInternal _FormulaCoordPairsByOwnerArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulasForUndoArchive::FormulasForUndoArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.formulas_for_owner_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FormulasForUndoArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulasForUndoArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulasForUndoArchiveDefaultTypeInternal() {}
  union {
    FormulasForUndoArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulasForUndoArchiveDefaultTypeInternal _FormulasForUndoArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaRewriteCommandArchive::FormulaRewriteCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_rewrite_command_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr} {}
struct FormulaRewriteCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaRewriteCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaRewriteCommandArchiveDefaultTypeInternal() {}
  union {
    FormulaRewriteCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaRewriteCommandArchiveDefaultTypeInternal _FormulaRewriteCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR TrackedReferenceArchive::TrackedReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_)*/nullptr
  , /*decltype(_impl_.formula_id_)*/0u} {}
struct TrackedReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackedReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackedReferenceArchiveDefaultTypeInternal() {}
  union {
    TrackedReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackedReferenceArchiveDefaultTypeInternal _TrackedReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR ExpandedTrackedReferenceArchive::ExpandedTrackedReferenceArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ast_)*/nullptr
  , /*decltype(_impl_.formula_column_)*/0u
  , /*decltype(_impl_.formula_row_)*/0u} {}
struct ExpandedTrackedReferenceArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExpandedTrackedReferenceArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExpandedTrackedReferenceArchiveDefaultTypeInternal() {}
  union {
    ExpandedTrackedReferenceArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExpandedTrackedReferenceArchiveDefaultTypeInternal _ExpandedTrackedReferenceArchive_default_instance_;
PROTOBUF_CONSTEXPR TrackedReferenceStoreArchive::TrackedReferenceStoreArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tracked_reference_)*/{}
  , /*decltype(_impl_.contained_tracked_reference_)*/{}
  , /*decltype(_impl_.contained_expanded_tracked_reference_)*/{}
  , /*decltype(_impl_.uuid_)*/nullptr} {}
struct TrackedReferenceStoreArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackedReferenceStoreArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackedReferenceStoreArchiveDefaultTypeInternal() {}
  union {
    TrackedReferenceStoreArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackedReferenceStoreArchiveDefaultTypeInternal _TrackedReferenceStoreArchive_default_instance_;
PROTOBUF_CONSTEXPR ViewTractRefArchive::ViewTractRefArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_uid_)*/nullptr
  , /*decltype(_impl_.uid_tract_)*/nullptr
  , /*decltype(_impl_.preserve_flags_)*/nullptr
  , /*decltype(_impl_.agg_index_level_)*/0u
  , /*decltype(_impl_.column_group_level_)*/0
  , /*decltype(_impl_.row_group_level_)*/0} {}
struct ViewTractRefArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ViewTractRefArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ViewTractRefArchiveDefaultTypeInternal() {}
  union {
    ViewTractRefArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ViewTractRefArchiveDefaultTypeInternal _ViewTractRefArchive_default_instance_;
PROTOBUF_CONSTEXPR BooleanCellValueArchive::BooleanCellValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.format_)*/nullptr
  , /*decltype(_impl_.value_)*/false
  , /*decltype(_impl_.format_is_explicit_)*/false} {}
struct BooleanCellValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BooleanCellValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BooleanCellValueArchiveDefaultTypeInternal() {}
  union {
    BooleanCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BooleanCellValueArchiveDefaultTypeInternal _BooleanCellValueArchive_default_instance_;
PROTOBUF_CONSTEXPR DateCellValueArchive::DateCellValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.format_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.format_is_implicit_)*/false
  , /*decltype(_impl_.format_is_explicit_)*/false} {}
struct DateCellValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DateCellValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DateCellValueArchiveDefaultTypeInternal() {}
  union {
    DateCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DateCellValueArchiveDefaultTypeInternal _DateCellValueArchive_default_instance_;
PROTOBUF_CONSTEXPR NumberCellValueArchive::NumberCellValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currency_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_.unit_index_)*/0
  , /*decltype(_impl_.format_is_implicit_)*/false
  , /*decltype(_impl_.format_is_explicit_)*/false
  , /*decltype(_impl_.decimal_low_)*/uint64_t{0u}
  , /*decltype(_impl_.decimal_high_)*/uint64_t{0u}} {}
struct NumberCellValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NumberCellValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NumberCellValueArchiveDefaultTypeInternal() {}
  union {
    NumberCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NumberCellValueArchiveDefaultTypeInternal _NumberCellValueArchive_default_instance_;
PROTOBUF_CONSTEXPR StringCellValueArchive::StringCellValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.format_)*/nullptr
  , /*decltype(_impl_.format_is_implicit_)*/false
  , /*decltype(_impl_.format_is_explicit_)*/false
  , /*decltype(_impl_.is_regex_)*/false
  , /*decltype(_impl_.is_case_sensitive_regex_)*/false} {}
struct StringCellValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringCellValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringCellValueArchiveDefaultTypeInternal() {}
  union {
    StringCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringCellValueArchiveDefaultTypeInternal _StringCellValueArchive_default_instance_;
PROTOBUF_CONSTEXPR ErrorCellValueArchive::ErrorCellValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.extra_info_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_type_)*/0
  , /*decltype(_impl_.extra_info_int_)*/0
  , /*decltype(_impl_.extra_info_double_)*/0} {}
struct ErrorCellValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ErrorCellValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ErrorCellValueArchiveDefaultTypeInternal() {}
  union {
    ErrorCellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ErrorCellValueArchiveDefaultTypeInternal _ErrorCellValueArchive_default_instance_;
PROTOBUF_CONSTEXPR CellValueArchive::CellValueArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.boolean_value_)*/nullptr
  , /*decltype(_impl_.date_value_)*/nullptr
  , /*decltype(_impl_.number_value_)*/nullptr
  , /*decltype(_impl_.string_value_)*/nullptr
  , /*decltype(_impl_.error_value_)*/nullptr
  , /*decltype(_impl_.cell_value_type_)*/1} {}
struct CellValueArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellValueArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellValueArchiveDefaultTypeInternal() {}
  union {
    CellValueArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellValueArchiveDefaultTypeInternal _CellValueArchive_default_instance_;
}  // namespace TSCE
static ::_pb::Metadata file_level_metadata_TSCEArchives_2eproto[143];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSCEArchives_2eproto[9];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSCEArchives_2eproto = nullptr;

const uint32_t TableStruct_TSCEArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellReferenceArchive, _impl_.table_id_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, _impl_.coordinate_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellReferenceArchive, _impl_.owner_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::RelativeCellRefArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RelativeCellRefArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RelativeCellRefArchive, _impl_.relative_row_offset_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RelativeCellRefArchive, _impl_.relative_column_offset_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RelativeCellRefArchive, _impl_.table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RelativeCellRefArchive, _impl_.preserve_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RelativeCellRefArchive, _impl_.preserve_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RelativeCellRefArchive, _impl_.is_spanning_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RelativeCellRefArchive, _impl_.is_spanning_row_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_.top_left_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_.top_left_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_.bottom_right_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeReferenceArchive, _impl_.bottom_right_row_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalRangeReferenceArchive, _impl_.range_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive_IndexSetEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive_IndexSetEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive_IndexSetEntry, _impl_.range_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive_IndexSetEntry, _impl_.range_end_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexSetArchive, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive_ColumnEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive_ColumnEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive_ColumnEntry, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive_ColumnEntry, _impl_.row_set_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordSetArchive, _impl_.column_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive_OwnerEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive_OwnerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive_OwnerEntry, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive_OwnerEntry, _impl_.coord_set_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::InternalCellRefSetArchive, _impl_.owner_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnRowSize, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnRowSize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnRowSize, _impl_.num_columns_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnRowSize, _impl_.num_rows_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRectArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRectArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRectArchive, _impl_.origin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRectArchive, _impl_.size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive_OwnerEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive_OwnerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive_OwnerEntry, _impl_.owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive_OwnerEntry, _impl_.coord_set_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRefSetArchive, _impl_.owner_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive_ColumnEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive_ColumnEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive_ColumnEntry, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive_ColumnEntry, _impl_.row_set_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCoordSetArchive, _impl_.column_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive_OwnerEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive_OwnerEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive_OwnerEntry, _impl_.owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive_OwnerEntry, _impl_.coord_set_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidCellRefSetArchive, _impl_.owner_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, _impl_.to_dirty_owner_ids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, _impl_.to_dirty_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, _impl_.to_dirty_cells_additional_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, _impl_.to_dirty_range_refs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, _impl_.calc_in_progress_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferencesToDirtyArchive, _impl_.to_update_precedents_cells_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_BaseToViewEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_BaseToViewEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_BaseToViewEntry, _impl_.base_column_or_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_BaseToViewEntry, _impl_.view_column_or_row_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_SummaryToViewEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_SummaryToViewEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_SummaryToViewEntry, _impl_.summary_column_or_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive_SummaryToViewEntry, _impl_.view_column_or_row_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _impl_.table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _impl_.summary_rows_set_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _impl_.summary_columns_set_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _impl_.label_rows_set_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _impl_.base_to_view_row_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _impl_.base_to_view_column_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _impl_.summary_to_view_row_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CoordMapperArchive, _impl_.summary_to_view_column_map_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _impl_.reference_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _impl_.cell_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ReferenceArchive, _impl_.range_reference_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _impl_.is_precedent_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgeArchive, _impl_.owner_id_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, _impl_.packed_edge_without_owner_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, _impl_.packed_edge_with_owner_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, _impl_.owner_id_for_edge_),
  PROTOBUF_FIELD_OFFSET(::TSCE::EdgesArchive, _impl_.internal_owner_id_for_edge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, _impl_.edge_without_owner_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, _impl_.edge_without_owner_columns_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, _impl_.edge_with_owner_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, _impl_.edge_with_owner_columns_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedEdgesArchive, _impl_.internal_owner_id_for_edge_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.dirty_self_plus_precedents_count_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.is_in_a_cycle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.edge_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.contains_a_formula_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.has_calculated_precedents_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.calculate_precedents_on_next_recalc_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.translate_for_excel_import_on_next_recalc_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordArchive, _impl_.edges_),
  1,
  2,
  3,
  4,
  ~0u,
  8,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, _impl_.cell_record_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesArchive, _impl_.num_dirty_cells_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, _impl_.dirty_self_plus_precedents_count_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, _impl_.is_in_a_cycle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, _impl_.has_calculated_precedents_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordExpandedArchive, _impl_.expanded_edges_),
  1,
  2,
  3,
  4,
  5,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesExpandedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesExpandedArchive, _impl_.cell_record_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, _impl_.internal_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, _impl_.tile_column_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, _impl_.tile_row_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellRecordTileArchive, _impl_.cell_records_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesTiledArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellDependenciesTiledArchive, _impl_.cell_record_tiles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_time_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_time_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_random_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_random_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_locale_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_locale_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_location_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_location_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_compass_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_compass_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_remote_data_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_remote_data_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_sheet_table_name_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_sheet_table_name_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.calculated_dependency_cell_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.calculated_dependency_cell_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_geometry_cell_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesArchive, _impl_.volatile_geometry_cell_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, _impl_.volatile_time_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, _impl_.volatile_random_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, _impl_.volatile_locale_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, _impl_.volatile_sheet_table_name_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, _impl_.volatile_remote_data_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::VolatileDependenciesExpandedArchive, _impl_.volatile_geometry_cell_refs_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeInternalNodeContentsArchive, _impl_.child_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeLeafNodeContentsArchive, _impl_.cell_reference_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _impl_.internal_node_contents_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeNodeArchive, _impl_.leaf_node_contents_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_file_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_size_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_num_dims_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_elem_size_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_elem_real_size_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_max_nodes_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.data_min_nodes_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RTreeArchive, _impl_.root_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _impl_.cell_coord_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _impl_.cell_coord_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _impl_.range_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeBackDependencyArchive, _impl_.internal_range_reference_),
  2,
  3,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesArchive, _impl_.back_dependency_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive_FromToRangeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive_FromToRangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive_FromToRangeArchive, _impl_.from_coord_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive_FromToRangeArchive, _impl_.refers_to_rect_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive, _impl_.to_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangePrecedentsTileArchive, _impl_.from_to_range_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesTiledArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeDependenciesTiledArchive, _impl_.range_precedents_tile_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_.range_context_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_.cell_coordinate_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_.range_context_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_.internal_cell_reference_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.range_context_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.cell_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.total_range_for_deleted_table_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.body_range_for_deleted_table_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.referring_column_to_local_cells_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesArchive, _impl_.referring_column_to_remote_cells_),
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRange, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRange, _impl_.extent_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRange, _impl_.extent_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, _impl_.range_context_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, _impl_.ranges_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents, _impl_.coordinate_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents, _impl_.ranges_by_table_context_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive, _impl_.coord_refers_to_spans_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive, _impl_.total_range_for_table_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SpanningDependenciesExpandedArchive, _impl_.body_range_for_table_),
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesArchive, _impl_.dependent_cell_),
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesExpandedArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesExpandedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::WholeOwnerDependenciesExpandedArchive, _impl_.dependent_cells_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive_ErrorForCell, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive_ErrorForCell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive_ErrorForCell, _impl_.coordinate_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive_ErrorForCell, _impl_.error_flavor_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive_ErrorForCell, _impl_.err_due_to_cell_),
  0,
  2,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellErrorsArchive, _impl_.errors_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableRef, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableRef, _impl_.owner_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableRef, _impl_.coord_set_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_UuidRef, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_UuidRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_UuidRef, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_UuidRef, _impl_.coord_set_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableWithUuidRef, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableWithUuidRef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableWithUuidRef, _impl_.owner_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive_TableWithUuidRef, _impl_.uuid_refs_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive, _impl_.table_refs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferencesArchive, _impl_.table_uuid_refs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.formula_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.internal_formula_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.owner_kind_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.cell_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.range_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.volatile_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.spanning_column_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.spanning_row_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.whole_owner_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.cell_errors_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.formula_owner_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.base_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.tiled_cell_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.uuid_references_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerDependenciesArchive, _impl_.tiled_range_dependencies_),
  0,
  13,
  14,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.formula_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.cell_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.range_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.volatile_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.spanning_column_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.spanning_row_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.whole_owner_dependencies_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.cell_errors_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaOwnerInfoArchive, _impl_.formula_owner_),
  0,
  1,
  2,
  3,
  4,
  5,
  7,
  8,
  6,
  PROTOBUF_FIELD_OFFSET(::TSCE::SubFormulaOwnerIDArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SubFormulaOwnerIDArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::SubFormulaOwnerIDArchive, _impl_.base_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::SubFormulaOwnerIDArchive, _impl_.owner_kind_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, _impl_.internal_owner_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry, _impl_.owner_id_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive, _impl_.map_entry_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerIDMapArchive, _impl_.unregistered_internal_owner_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidLookupListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UidLookupListArchive, _impl_.uuids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_.formula_owner_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_.dirty_leaf_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_.owner_id_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_.internal_dirty_leaf_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_.number_of_formulas_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DependencyTrackerArchive, _impl_.formula_owner_dependencies_),
  ~0u,
  ~0u,
  0,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, _impl_.function_index_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, _impl_.attribute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataSpecifierArchive, _impl_.date_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry, _impl_.specifier_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry, _impl_.value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataValueMapArchive, _impl_.entry_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive_AttributeEntry, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive_AttributeEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive_AttributeEntry, _impl_.attribute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive_AttributeEntry, _impl_.value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive, _impl_.symbol_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive, _impl_.date_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StockArchive, _impl_.attribute_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataStoreArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataStoreArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataStoreArchive, _impl_.value_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RemoteDataStoreArchive, _impl_.stocks_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _impl_.tracked_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NameTrackedReferencePair, _impl_.tracked_reference_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamesByTrackedReferenceArchive, _impl_.name_tracked_reference_pair_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, _impl_.reference_tracker_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NamedReferenceManagerArchive, _impl_.names_by_tracked_reference_by_table_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive_UuidSet, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive_UuidSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive_UuidSet, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive_UuidSet, _impl_.index_of_set_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidSetStoreArchive, _impl_.uuidset_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive_CellRefsForUuid, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive_CellRefsForUuid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive_CellRefsForUuid, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive_CellRefsForUuid, _impl_.cell_ref_),
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive_CellRefsForUuid, _impl_.cell_refs_),
  0,
  ~0u,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::UuidReferenceMapArchive, _impl_.cell_refs_for_uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode, _impl_.group_node_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode, _impl_.cell_refs_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy, _impl_.group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy, _impl_.refs_for_group_node_),
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByNodeMapArchive, _impl_.refs_for_group_by_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.base_date_1904_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.dependency_tracker_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.named_reference_manager_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.excel_import_date_mode_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.saved_locale_identifier_for_4_2_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.document_random_seed_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.uuid_reference_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.document_timestamp_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.document_timezone_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.table_uid_history_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.remote_data_store_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.group_node_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.header_name_manager_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.refs_to_dirty_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.saved_locale_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.begin_tracking_names_legacy_nrm_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CalculationEngineArchive, _impl_.end_tracking_names_legacy_nrm_),
  13,
  3,
  4,
  14,
  0,
  11,
  5,
  12,
  1,
  6,
  7,
  8,
  9,
  10,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, _impl_.begin_row_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, _impl_.begin_column_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, _impl_.end_row_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::PreserveColumnRowFlagsArchive, _impl_.end_column_is_absolute_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive_CatRefUidList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive_CatRefUidList, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.column_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.aggregate_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.group_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.group_uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.preserve_flags_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.relative_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.relative_group_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.absolute_group_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.option_refers_to_pivot_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.option_refers_to_pivot_columns_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.agg_index_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CategoryReferenceArchive, _impl_.option_show_aggregate_name_),
  0,
  1,
  6,
  7,
  2,
  3,
  8,
  4,
  5,
  9,
  10,
  12,
  11,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.row_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.column_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.row_is_sticky_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.column_is_sticky_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.row_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.column_handle_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.row_is_sticky_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.column_is_sticky_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.ast_reference_whitespace_after_sheet_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.ast_reference_whitespace_before_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.ast_reference_whitespace_after_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.ast_reference_whitespace_before_cell_address_),
  5,
  6,
  7,
  8,
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive, _impl_.absolute_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive, _impl_.absolute_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidList, _impl_.uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, _impl_.columnuids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, _impl_.rowuids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, _impl_.is_range_ref_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, _impl_.purpose_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTract, _impl_.preserve_rectangular_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, _impl_.begin_row_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, _impl_.begin_column_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, _impl_.end_row_is_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTStickyBits, _impl_.end_column_is_absolute_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTractList, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTractList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTractList, _impl_.tract_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidTractList, _impl_.sticky_bits_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, _impl_.column_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, _impl_.row_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, _impl_.column_absolute_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive, _impl_.row_absolute_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCategoryLevels, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCategoryLevels, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCategoryLevels, _impl_.ast_column_group_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCategoryLevels, _impl_.ast_row_group_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCategoryLevels, _impl_.ast_agg_index_level_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive, _impl_.category_ref_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, _impl_.range_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, _impl_.range_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, _impl_.range_begin_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, _impl_.range_end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, _impl_.relative_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, _impl_.relative_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, _impl_.absolute_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, _impl_.absolute_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive, _impl_.preserve_rectangular_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_.ast_reference_whitespace_after_sheet_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_.ast_reference_whitespace_before_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_.ast_reference_whitespace_after_table_name_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive, _impl_.ast_reference_whitespace_before_cell_address_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, _impl_.ast_let_whitespace_after_let_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, _impl_.ast_let_whitespace_after_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, _impl_.ast_let_whitespace_after_equals_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace, _impl_.ast_let_whitespace_after_delimiter_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_node_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_function_node_index_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_function_node_numargs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_number_node_number_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_boolean_node_boolean_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_string_node_string_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_date_node_datenum_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_date_node_suppress_date_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_date_node_suppress_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_date_node_date_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_unitnum_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_unit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_duration_unit_largest_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_duration_unit_smallest_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_duration_node_use_automatic_units_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_token_node_boolean_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_array_node_numcol_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_array_node_numrow_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_list_node_numargs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_thunk_node_array_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_local_cell_reference_node_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_cross_table_cell_reference_node_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_unknown_function_node_string_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_unknown_function_node_numargs_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_whitespace_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_cross_table_reference_extra_info_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_uid_coordinate_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_sticky_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_frozen_sticky_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_let_identifier_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_let_e2_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_let_whitespace_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_symbol_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_tract_list_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_category_ref_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_colon_tract_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_number_node_decimal_low_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_number_node_decimal_high_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_category_levels_),
  41,
  20,
  21,
  22,
  31,
  0,
  23,
  32,
  33,
  2,
  24,
  25,
  35,
  36,
  37,
  34,
  26,
  27,
  28,
  29,
  5,
  6,
  7,
  1,
  30,
  3,
  8,
  9,
  10,
  11,
  12,
  18,
  4,
  13,
  14,
  40,
  15,
  16,
  17,
  38,
  39,
  19,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ASTNodeArrayArchive, _impl_.ast_node_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _impl_.excel_import_translation_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _impl_.number_to_date_coercion_removal_translation_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _impl_.contains_uid_form_references_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _impl_.contains_frozen_references_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaTranslationFlagsArchive, _impl_.returns_percent_formatted_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.ast_node_array_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.host_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.host_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.host_column_is_negative_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.host_row_is_negative_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.translation_flags_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.host_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.host_column_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaArchive, _impl_.host_row_uid_),
  0,
  5,
  6,
  7,
  8,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TSCE::FunctorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FunctorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FunctorArchive, _impl_.formula_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FunctorArchive, _impl_.num_args_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.format_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.decimal_places_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.currency_code_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.negative_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.show_thousands_separator_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.use_accounting_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.duration_style_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.base_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.base_places_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.base_use_minus_sign_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.fraction_accuracy_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.suppress_date_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.suppress_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.date_time_format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.duration_unit_largest_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormatStructArchive, _impl_.duration_unit_smallest_),
  2,
  3,
  0,
  4,
  7,
  8,
  5,
  6,
  11,
  9,
  12,
  10,
  13,
  1,
  14,
  15,
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _impl_.top_left_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _impl_.top_left_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _impl_.bottom_right_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RangeCoordinateArchive, _impl_.bottom_right_row_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::TableTransposeInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TableTransposeInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::TableTransposeInfoArchive, _impl_.number_of_footer_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TableTransposeInfoArchive, _impl_.body_range_for_transposed_table_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeOriginMovedArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeOriginMovedArchive, _impl_.src_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeOriginMovedArchive, _impl_.src_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeOriginMovedArchive, _impl_.dst_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeOriginMovedArchive, _impl_.dst_row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.next_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.hidden_state_for_rows_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.next_hidden_state_for_rows_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.hidden_state_for_columns_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.next_hidden_state_for_columns_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.conditional_style_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.next_conditional_style_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.sort_rule_reference_tracker_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.next_sort_rule_reference_tracker_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.merge_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.next_merge_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.category_aggregates_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.next_category_aggregates_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.next_group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.pencil_annotation_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::OwnerUIDMapperArchive, _impl_.next_pencil_annotation_owner_uid_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, _impl_.prev_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, _impl_.new_table_uid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteTableUIDInfoArchive, _impl_.table_uid_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive, _impl_.old_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive, _impl_.new_level_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _impl_.change_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _impl_.group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _impl_.previous_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _impl_.updated_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _impl_.previous_to_updated_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _impl_.updated_to_previous_map_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _impl_.removed_group_uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::GroupByChangeArchive, _impl_.grouping_column_changes_),
  3,
  0,
  4,
  5,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteGroupNodeUIDInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteGroupNodeUIDInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteGroupNodeUIDInfoArchive, _impl_.group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteGroupNodeUIDInfoArchive, _impl_.group_node_uid_map_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive_IndexedUid, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive_IndexedUid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive_IndexedUid, _impl_.uid_for_index_),
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive_IndexedUid, _impl_.index_for_uid_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::IndexedUidsArchive, _impl_.uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, _impl_.range_location_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, _impl_.range_length_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, _impl_.range_uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RewriteRangeEntryArchive, _impl_.offset_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _impl_.is_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _impl_.table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _impl_.cond_style_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _impl_.group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _impl_.uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _impl_.range_entries_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _impl_.table_range_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _impl_.insert_at_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ColumnOrRowUuidsInfoArchive, _impl_.insert_opposite_uid_),
  7,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionInfoArchive, _impl_.table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionInfoArchive, _impl_.column_uids_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionInfoArchive, _impl_.row_uids_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, _impl_.src_region_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, _impl_.dst_region_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, _impl_.span_rows_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, _impl_.span_columns_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, _impl_.original_src_region_),
  PROTOBUF_FIELD_OFFSET(::TSCE::RegionMovedInfoArchive, _impl_.final_dest_table_uid_),
  0,
  1,
  4,
  5,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeSourceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeSourceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeSourceArchive, _impl_.coord_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::MergeSourceArchive, _impl_.coord_row_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::HauntedOwnerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::HauntedOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::HauntedOwnerArchive, _impl_.owner_uid_),
  0,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _impl_.packeddata_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateArchive, _impl_.row_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateVectorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellCoordinateVectorArchive, _impl_.cell_coord_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectPairArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectPairArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectPairArchive, _impl_.cell_ref_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectPairArchive, _impl_.object_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedCellRefObjectMapArchive, _impl_.cell_ref_object_pair_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, _impl_.column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, _impl_.row_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, _impl_.formula_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaAtCoordArchive, _impl_.repeat_previous_formula_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaCoordPairsByOwnerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaCoordPairsByOwnerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaCoordPairsByOwnerArchive, _impl_.owner_kind_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaCoordPairsByOwnerArchive, _impl_.owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaCoordPairsByOwnerArchive, _impl_.formula_at_coords_),
  1,
  0,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulasForUndoArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulasForUndoArchive, _impl_.formulas_for_owner_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, _impl_.table_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TSCE::FormulaRewriteCommandArchive, _impl_.super_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, _impl_.ast_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceArchive, _impl_.formula_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedTrackedReferenceArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedTrackedReferenceArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedTrackedReferenceArchive, _impl_.ast_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedTrackedReferenceArchive, _impl_.formula_column_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ExpandedTrackedReferenceArchive, _impl_.formula_row_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceStoreArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceStoreArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceStoreArchive, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceStoreArchive, _impl_.tracked_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceStoreArchive, _impl_.contained_tracked_reference_),
  PROTOBUF_FIELD_OFFSET(::TSCE::TrackedReferenceStoreArchive, _impl_.contained_expanded_tracked_reference_),
  0,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TSCE::ViewTractRefArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ViewTractRefArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ViewTractRefArchive, _impl_.table_uid_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ViewTractRefArchive, _impl_.uid_tract_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ViewTractRefArchive, _impl_.preserve_flags_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ViewTractRefArchive, _impl_.agg_index_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ViewTractRefArchive, _impl_.column_group_level_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ViewTractRefArchive, _impl_.row_group_level_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::BooleanCellValueArchive, _impl_.format_is_explicit_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _impl_.format_is_implicit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::DateCellValueArchive, _impl_.format_is_explicit_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.unit_index_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.currency_code_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.format_is_implicit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.format_is_explicit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.decimal_low_),
  PROTOBUF_FIELD_OFFSET(::TSCE::NumberCellValueArchive, _impl_.decimal_high_),
  2,
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _impl_.format_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _impl_.format_is_implicit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _impl_.format_is_explicit_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _impl_.is_regex_),
  PROTOBUF_FIELD_OFFSET(::TSCE::StringCellValueArchive, _impl_.is_case_sensitive_regex_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, _impl_.error_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, _impl_.extra_info_int_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, _impl_.extra_info_string_),
  PROTOBUF_FIELD_OFFSET(::TSCE::ErrorCellValueArchive, _impl_.extra_info_double_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_.cell_value_type_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_.boolean_value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_.date_value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_.number_value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_.string_value_),
  PROTOBUF_FIELD_OFFSET(::TSCE::CellValueArchive, _impl_.error_value_),
  5,
  0,
  1,
  2,
  3,
  4,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::TSCE::CellReferenceArchive)},
  { 12, 20, -1, sizeof(::TSCE::InternalCellReferenceArchive)},
  { 22, 35, -1, sizeof(::TSCE::RelativeCellRefArchive)},
  { 42, 53, -1, sizeof(::TSCE::RangeReferenceArchive)},
  { 58, 66, -1, sizeof(::TSCE::InternalRangeReferenceArchive)},
  { 68, 76, -1, sizeof(::TSCE::IndexSetArchive_IndexSetEntry)},
  { 78, -1, -1, sizeof(::TSCE::IndexSetArchive)},
  { 85, 93, -1, sizeof(::TSCE::CellCoordSetArchive_ColumnEntry)},
  { 95, -1, -1, sizeof(::TSCE::CellCoordSetArchive)},
  { 102, 110, -1, sizeof(::TSCE::InternalCellRefSetArchive_OwnerEntry)},
  { 112, -1, -1, sizeof(::TSCE::InternalCellRefSetArchive)},
  { 119, 127, -1, sizeof(::TSCE::ColumnRowSize)},
  { 129, 137, -1, sizeof(::TSCE::CellRectArchive)},
  { 139, 147, -1, sizeof(::TSCE::CellRefSetArchive_OwnerEntry)},
  { 149, -1, -1, sizeof(::TSCE::CellRefSetArchive)},
  { 156, 164, -1, sizeof(::TSCE::UidCoordSetArchive_ColumnEntry)},
  { 166, -1, -1, sizeof(::TSCE::UidCoordSetArchive)},
  { 173, 181, -1, sizeof(::TSCE::UidCellRefSetArchive_OwnerEntry)},
  { 183, -1, -1, sizeof(::TSCE::UidCellRefSetArchive)},
  { 190, 202, -1, sizeof(::TSCE::ReferencesToDirtyArchive)},
  { 208, 216, -1, sizeof(::TSCE::CoordMapperArchive_BaseToViewEntry)},
  { 218, 226, -1, sizeof(::TSCE::CoordMapperArchive_SummaryToViewEntry)},
  { 228, 242, -1, sizeof(::TSCE::CoordMapperArchive)},
  { 250, 259, -1, sizeof(::TSCE::ReferenceArchive)},
  { 262, 272, -1, sizeof(::TSCE::EdgeArchive)},
  { 276, -1, -1, sizeof(::TSCE::EdgesArchive)},
  { 286, -1, -1, sizeof(::TSCE::ExpandedEdgesArchive)},
  { 297, 313, -1, sizeof(::TSCE::CellRecordArchive)},
  { 323, 331, -1, sizeof(::TSCE::CellDependenciesArchive)},
  { 333, 345, -1, sizeof(::TSCE::CellRecordExpandedArchive)},
  { 351, -1, -1, sizeof(::TSCE::CellDependenciesExpandedArchive)},
  { 358, 368, -1, sizeof(::TSCE::CellRecordTileArchive)},
  { 372, -1, -1, sizeof(::TSCE::CellDependenciesTiledArchive)},
  { 379, -1, -1, sizeof(::TSCE::VolatileDependenciesArchive)},
  { 403, 415, -1, sizeof(::TSCE::VolatileDependenciesExpandedArchive)},
  { 421, 430, -1, sizeof(::TSCE::RTreeInternalNodeContentsArchive)},
  { 433, 442, -1, sizeof(::TSCE::RTreeLeafNodeContentsArchive)},
  { 445, 455, -1, sizeof(::TSCE::RTreeNodeArchive)},
  { 459, 473, -1, sizeof(::TSCE::RTreeArchive)},
  { 481, 491, -1, sizeof(::TSCE::RangeBackDependencyArchive)},
  { 495, -1, -1, sizeof(::TSCE::RangeDependenciesArchive)},
  { 502, 510, -1, sizeof(::TSCE::RangePrecedentsTileArchive_FromToRangeArchive)},
  { 512, 520, -1, sizeof(::TSCE::RangePrecedentsTileArchive)},
  { 522, -1, -1, sizeof(::TSCE::RangeDependenciesTiledArchive)},
  { 529, 538, -1, sizeof(::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells)},
  { 541, 550, -1, sizeof(::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells)},
  { 553, 566, -1, sizeof(::TSCE::SpanningDependenciesArchive)},
  { 573, 581, -1, sizeof(::TSCE::SpanningDependenciesExpandedArchive_ExtentRange)},
  { 583, 592, -1, sizeof(::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext)},
  { 595, 603, -1, sizeof(::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents)},
  { 605, 614, -1, sizeof(::TSCE::SpanningDependenciesExpandedArchive)},
  { 617, -1, -1, sizeof(::TSCE::WholeOwnerDependenciesArchive)},
  { 624, 631, -1, sizeof(::TSCE::WholeOwnerDependenciesExpandedArchive)},
  { 632, 641, -1, sizeof(::TSCE::CellErrorsArchive_ErrorForCell)},
  { 644, -1, -1, sizeof(::TSCE::CellErrorsArchive)},
  { 651, 659, -1, sizeof(::TSCE::UuidReferencesArchive_TableRef)},
  { 661, 669, -1, sizeof(::TSCE::UuidReferencesArchive_UuidRef)},
  { 671, 679, -1, sizeof(::TSCE::UuidReferencesArchive_TableWithUuidRef)},
  { 681, -1, -1, sizeof(::TSCE::UuidReferencesArchive)},
  { 689, 710, -1, sizeof(::TSCE::FormulaOwnerDependenciesArchive)},
  { 725, 740, -1, sizeof(::TSCE::FormulaOwnerInfoArchive)},
  { 749, 757, -1, sizeof(::TSCE::SubFormulaOwnerIDArchive)},
  { 759, 767, -1, sizeof(::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry)},
  { 769, -1, -1, sizeof(::TSCE::OwnerIDMapArchive)},
  { 777, -1, -1, sizeof(::TSCE::UidLookupListArchive)},
  { 784, 796, -1, sizeof(::TSCE::DependencyTrackerArchive)},
  { 802, 812, -1, sizeof(::TSCE::RemoteDataSpecifierArchive)},
  { 816, 824, -1, sizeof(::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry)},
  { 826, -1, -1, sizeof(::TSCE::RemoteDataValueMapArchive)},
  { 833, 841, -1, sizeof(::TSCE::StockArchive_AttributeEntry)},
  { 843, 852, -1, sizeof(::TSCE::StockArchive)},
  { 855, 863, -1, sizeof(::TSCE::RemoteDataStoreArchive)},
  { 865, 874, -1, sizeof(::TSCE::NameTrackedReferencePair)},
  { 877, 885, -1, sizeof(::TSCE::NamesByTrackedReferenceArchive)},
  { 887, 895, -1, sizeof(::TSCE::NamedReferenceManagerArchive)},
  { 897, 905, -1, sizeof(::TSCE::UuidSetStoreArchive_UuidSet)},
  { 907, -1, -1, sizeof(::TSCE::UuidSetStoreArchive)},
  { 914, 923, -1, sizeof(::TSCE::UuidReferenceMapArchive_CellRefsForUuid)},
  { 926, -1, -1, sizeof(::TSCE::UuidReferenceMapArchive)},
  { 933, 941, -1, sizeof(::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode)},
  { 943, 951, -1, sizeof(::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy)},
  { 953, -1, -1, sizeof(::TSCE::GroupByNodeMapArchive)},
  { 960, 983, -1, sizeof(::TSCE::CalculationEngineArchive)},
  { 1000, 1010, -1, sizeof(::TSCE::PreserveColumnRowFlagsArchive)},
  { 1014, -1, -1, sizeof(::TSCE::CategoryReferenceArchive_CatRefUidList)},
  { 1021, 1040, -1, sizeof(::TSCE::CategoryReferenceArchive)},
  { 1053, 1063, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive)},
  { 1067, 1082, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive)},
  { 1091, 1099, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive)},
  { 1101, 1109, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive)},
  { 1111, -1, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTUidList)},
  { 1118, 1129, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTUidTract)},
  { 1134, 1144, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTStickyBits)},
  { 1148, 1156, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTUidTractList)},
  { 1158, 1168, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive)},
  { 1172, 1181, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTCategoryLevels)},
  { 1184, 1191, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive)},
  { 1192, 1200, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive)},
  { 1202, 1210, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive)},
  { 1212, 1223, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTColonTractArchive)},
  { 1228, 1239, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive)},
  { 1244, 1254, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace)},
  { 1258, 1306, -1, sizeof(::TSCE::ASTNodeArrayArchive_ASTNodeArchive)},
  { 1348, -1, -1, sizeof(::TSCE::ASTNodeArrayArchive)},
  { 1355, 1366, -1, sizeof(::TSCE::FormulaTranslationFlagsArchive)},
  { 1371, 1386, -1, sizeof(::TSCE::FormulaArchive)},
  { 1395, 1403, -1, sizeof(::TSCE::FunctorArchive)},
  { 1405, 1427, -1, sizeof(::TSCE::FormatStructArchive)},
  { 1443, 1453, -1, sizeof(::TSCE::RangeCoordinateArchive)},
  { 1457, 1465, -1, sizeof(::TSCE::TableTransposeInfoArchive)},
  { 1467, -1, -1, sizeof(::TSCE::MergeOriginMovedArchive)},
  { 1477, 1501, -1, sizeof(::TSCE::OwnerUIDMapperArchive)},
  { 1519, 1527, -1, sizeof(::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive)},
  { 1529, -1, -1, sizeof(::TSCE::RewriteTableUIDInfoArchive)},
  { 1536, 1544, -1, sizeof(::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive)},
  { 1546, 1560, -1, sizeof(::TSCE::GroupByChangeArchive)},
  { 1568, 1576, -1, sizeof(::TSCE::RewriteGroupNodeUIDInfoArchive)},
  { 1578, 1586, -1, sizeof(::TSCE::IndexedUidsArchive_IndexedUid)},
  { 1588, -1, -1, sizeof(::TSCE::IndexedUidsArchive)},
  { 1595, 1605, -1, sizeof(::TSCE::RewriteRangeEntryArchive)},
  { 1609, 1624, -1, sizeof(::TSCE::ColumnOrRowUuidsInfoArchive)},
  { 1633, 1642, -1, sizeof(::TSCE::RegionInfoArchive)},
  { 1645, 1657, -1, sizeof(::TSCE::RegionMovedInfoArchive)},
  { 1663, 1671, -1, sizeof(::TSCE::MergeSourceArchive)},
  { 1673, 1680, -1, sizeof(::TSCE::HauntedOwnerArchive)},
  { 1681, 1690, -1, sizeof(::TSCE::CellCoordinateArchive)},
  { 1693, -1, -1, sizeof(::TSCE::CellCoordinateVectorArchive)},
  { 1700, 1708, -1, sizeof(::TSCE::ExpandedCellRefObjectPairArchive)},
  { 1710, -1, -1, sizeof(::TSCE::ExpandedCellRefObjectMapArchive)},
  { 1717, 1727, -1, sizeof(::TSCE::FormulaAtCoordArchive)},
  { 1731, 1740, -1, sizeof(::TSCE::FormulaCoordPairsByOwnerArchive)},
  { 1743, -1, -1, sizeof(::TSCE::FormulasForUndoArchive)},
  { 1750, 1758, -1, sizeof(::TSCE::FormulaRewriteCommandArchive)},
  { 1760, 1768, -1, sizeof(::TSCE::TrackedReferenceArchive)},
  { 1770, 1779, -1, sizeof(::TSCE::ExpandedTrackedReferenceArchive)},
  { 1782, 1792, -1, sizeof(::TSCE::TrackedReferenceStoreArchive)},
  { 1796, 1808, -1, sizeof(::TSCE::ViewTractRefArchive)},
  { 1814, 1823, -1, sizeof(::TSCE::BooleanCellValueArchive)},
  { 1826, 1836, -1, sizeof(::TSCE::DateCellValueArchive)},
  { 1840, 1854, -1, sizeof(::TSCE::NumberCellValueArchive)},
  { 1862, 1874, -1, sizeof(::TSCE::StringCellValueArchive)},
  { 1880, 1890, -1, sizeof(::TSCE::ErrorCellValueArchive)},
  { 1894, 1906, -1, sizeof(::TSCE::CellValueArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TSCE::_CellReferenceArchive_default_instance_._instance,
  &::TSCE::_InternalCellReferenceArchive_default_instance_._instance,
  &::TSCE::_RelativeCellRefArchive_default_instance_._instance,
  &::TSCE::_RangeReferenceArchive_default_instance_._instance,
  &::TSCE::_InternalRangeReferenceArchive_default_instance_._instance,
  &::TSCE::_IndexSetArchive_IndexSetEntry_default_instance_._instance,
  &::TSCE::_IndexSetArchive_default_instance_._instance,
  &::TSCE::_CellCoordSetArchive_ColumnEntry_default_instance_._instance,
  &::TSCE::_CellCoordSetArchive_default_instance_._instance,
  &::TSCE::_InternalCellRefSetArchive_OwnerEntry_default_instance_._instance,
  &::TSCE::_InternalCellRefSetArchive_default_instance_._instance,
  &::TSCE::_ColumnRowSize_default_instance_._instance,
  &::TSCE::_CellRectArchive_default_instance_._instance,
  &::TSCE::_CellRefSetArchive_OwnerEntry_default_instance_._instance,
  &::TSCE::_CellRefSetArchive_default_instance_._instance,
  &::TSCE::_UidCoordSetArchive_ColumnEntry_default_instance_._instance,
  &::TSCE::_UidCoordSetArchive_default_instance_._instance,
  &::TSCE::_UidCellRefSetArchive_OwnerEntry_default_instance_._instance,
  &::TSCE::_UidCellRefSetArchive_default_instance_._instance,
  &::TSCE::_ReferencesToDirtyArchive_default_instance_._instance,
  &::TSCE::_CoordMapperArchive_BaseToViewEntry_default_instance_._instance,
  &::TSCE::_CoordMapperArchive_SummaryToViewEntry_default_instance_._instance,
  &::TSCE::_CoordMapperArchive_default_instance_._instance,
  &::TSCE::_ReferenceArchive_default_instance_._instance,
  &::TSCE::_EdgeArchive_default_instance_._instance,
  &::TSCE::_EdgesArchive_default_instance_._instance,
  &::TSCE::_ExpandedEdgesArchive_default_instance_._instance,
  &::TSCE::_CellRecordArchive_default_instance_._instance,
  &::TSCE::_CellDependenciesArchive_default_instance_._instance,
  &::TSCE::_CellRecordExpandedArchive_default_instance_._instance,
  &::TSCE::_CellDependenciesExpandedArchive_default_instance_._instance,
  &::TSCE::_CellRecordTileArchive_default_instance_._instance,
  &::TSCE::_CellDependenciesTiledArchive_default_instance_._instance,
  &::TSCE::_VolatileDependenciesArchive_default_instance_._instance,
  &::TSCE::_VolatileDependenciesExpandedArchive_default_instance_._instance,
  &::TSCE::_RTreeInternalNodeContentsArchive_default_instance_._instance,
  &::TSCE::_RTreeLeafNodeContentsArchive_default_instance_._instance,
  &::TSCE::_RTreeNodeArchive_default_instance_._instance,
  &::TSCE::_RTreeArchive_default_instance_._instance,
  &::TSCE::_RangeBackDependencyArchive_default_instance_._instance,
  &::TSCE::_RangeDependenciesArchive_default_instance_._instance,
  &::TSCE::_RangePrecedentsTileArchive_FromToRangeArchive_default_instance_._instance,
  &::TSCE::_RangePrecedentsTileArchive_default_instance_._instance,
  &::TSCE::_RangeDependenciesTiledArchive_default_instance_._instance,
  &::TSCE::_SpanningDependenciesArchive_ReferringColumnToLocalCells_default_instance_._instance,
  &::TSCE::_SpanningDependenciesArchive_ReferringColumnToRemoteCells_default_instance_._instance,
  &::TSCE::_SpanningDependenciesArchive_default_instance_._instance,
  &::TSCE::_SpanningDependenciesExpandedArchive_ExtentRange_default_instance_._instance,
  &::TSCE::_SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext_default_instance_._instance,
  &::TSCE::_SpanningDependenciesExpandedArchive_CellCoordRefersToExtents_default_instance_._instance,
  &::TSCE::_SpanningDependenciesExpandedArchive_default_instance_._instance,
  &::TSCE::_WholeOwnerDependenciesArchive_default_instance_._instance,
  &::TSCE::_WholeOwnerDependenciesExpandedArchive_default_instance_._instance,
  &::TSCE::_CellErrorsArchive_ErrorForCell_default_instance_._instance,
  &::TSCE::_CellErrorsArchive_default_instance_._instance,
  &::TSCE::_UuidReferencesArchive_TableRef_default_instance_._instance,
  &::TSCE::_UuidReferencesArchive_UuidRef_default_instance_._instance,
  &::TSCE::_UuidReferencesArchive_TableWithUuidRef_default_instance_._instance,
  &::TSCE::_UuidReferencesArchive_default_instance_._instance,
  &::TSCE::_FormulaOwnerDependenciesArchive_default_instance_._instance,
  &::TSCE::_FormulaOwnerInfoArchive_default_instance_._instance,
  &::TSCE::_SubFormulaOwnerIDArchive_default_instance_._instance,
  &::TSCE::_OwnerIDMapArchive_OwnerIDMapArchiveEntry_default_instance_._instance,
  &::TSCE::_OwnerIDMapArchive_default_instance_._instance,
  &::TSCE::_UidLookupListArchive_default_instance_._instance,
  &::TSCE::_DependencyTrackerArchive_default_instance_._instance,
  &::TSCE::_RemoteDataSpecifierArchive_default_instance_._instance,
  &::TSCE::_RemoteDataValueMapArchive_RemoteDataMapEntry_default_instance_._instance,
  &::TSCE::_RemoteDataValueMapArchive_default_instance_._instance,
  &::TSCE::_StockArchive_AttributeEntry_default_instance_._instance,
  &::TSCE::_StockArchive_default_instance_._instance,
  &::TSCE::_RemoteDataStoreArchive_default_instance_._instance,
  &::TSCE::_NameTrackedReferencePair_default_instance_._instance,
  &::TSCE::_NamesByTrackedReferenceArchive_default_instance_._instance,
  &::TSCE::_NamedReferenceManagerArchive_default_instance_._instance,
  &::TSCE::_UuidSetStoreArchive_UuidSet_default_instance_._instance,
  &::TSCE::_UuidSetStoreArchive_default_instance_._instance,
  &::TSCE::_UuidReferenceMapArchive_CellRefsForUuid_default_instance_._instance,
  &::TSCE::_UuidReferenceMapArchive_default_instance_._instance,
  &::TSCE::_GroupByNodeMapArchive_CellRefsForGroupNode_default_instance_._instance,
  &::TSCE::_GroupByNodeMapArchive_GroupNodesForGroupBy_default_instance_._instance,
  &::TSCE::_GroupByNodeMapArchive_default_instance_._instance,
  &::TSCE::_CalculationEngineArchive_default_instance_._instance,
  &::TSCE::_PreserveColumnRowFlagsArchive_default_instance_._instance,
  &::TSCE::_CategoryReferenceArchive_CatRefUidList_default_instance_._instance,
  &::TSCE::_CategoryReferenceArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTColumnCoordinateArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTRowCoordinateArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTUidList_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTUidTract_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTStickyBits_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTUidTractList_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTUidCoordinateArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTCategoryLevels_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTCategoryReferenceArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTColonTractArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTLetNodeWhitespace_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_ASTNodeArchive_default_instance_._instance,
  &::TSCE::_ASTNodeArrayArchive_default_instance_._instance,
  &::TSCE::_FormulaTranslationFlagsArchive_default_instance_._instance,
  &::TSCE::_FormulaArchive_default_instance_._instance,
  &::TSCE::_FunctorArchive_default_instance_._instance,
  &::TSCE::_FormatStructArchive_default_instance_._instance,
  &::TSCE::_RangeCoordinateArchive_default_instance_._instance,
  &::TSCE::_TableTransposeInfoArchive_default_instance_._instance,
  &::TSCE::_MergeOriginMovedArchive_default_instance_._instance,
  &::TSCE::_OwnerUIDMapperArchive_default_instance_._instance,
  &::TSCE::_RewriteTableUIDInfoArchive_TableUIDMapEntryArchive_default_instance_._instance,
  &::TSCE::_RewriteTableUIDInfoArchive_default_instance_._instance,
  &::TSCE::_GroupByChangeArchive_GroupingColumnChangeArchive_default_instance_._instance,
  &::TSCE::_GroupByChangeArchive_default_instance_._instance,
  &::TSCE::_RewriteGroupNodeUIDInfoArchive_default_instance_._instance,
  &::TSCE::_IndexedUidsArchive_IndexedUid_default_instance_._instance,
  &::TSCE::_IndexedUidsArchive_default_instance_._instance,
  &::TSCE::_RewriteRangeEntryArchive_default_instance_._instance,
  &::TSCE::_ColumnOrRowUuidsInfoArchive_default_instance_._instance,
  &::TSCE::_RegionInfoArchive_default_instance_._instance,
  &::TSCE::_RegionMovedInfoArchive_default_instance_._instance,
  &::TSCE::_MergeSourceArchive_default_instance_._instance,
  &::TSCE::_HauntedOwnerArchive_default_instance_._instance,
  &::TSCE::_CellCoordinateArchive_default_instance_._instance,
  &::TSCE::_CellCoordinateVectorArchive_default_instance_._instance,
  &::TSCE::_ExpandedCellRefObjectPairArchive_default_instance_._instance,
  &::TSCE::_ExpandedCellRefObjectMapArchive_default_instance_._instance,
  &::TSCE::_FormulaAtCoordArchive_default_instance_._instance,
  &::TSCE::_FormulaCoordPairsByOwnerArchive_default_instance_._instance,
  &::TSCE::_FormulasForUndoArchive_default_instance_._instance,
  &::TSCE::_FormulaRewriteCommandArchive_default_instance_._instance,
  &::TSCE::_TrackedReferenceArchive_default_instance_._instance,
  &::TSCE::_ExpandedTrackedReferenceArchive_default_instance_._instance,
  &::TSCE::_TrackedReferenceStoreArchive_default_instance_._instance,
  &::TSCE::_ViewTractRefArchive_default_instance_._instance,
  &::TSCE::_BooleanCellValueArchive_default_instance_._instance,
  &::TSCE::_DateCellValueArchive_default_instance_._instance,
  &::TSCE::_NumberCellValueArchive_default_instance_._instance,
  &::TSCE::_StringCellValueArchive_default_instance_._instance,
  &::TSCE::_ErrorCellValueArchive_default_instance_._instance,
  &::TSCE::_CellValueArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSCEArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TSCEArchives.proto\022\004TSCE\032\021TSPMessages."
  "proto\032\021TSKArchives.proto\"Y\n\024CellReferenc"
  "eArchive\022\016\n\006column\030\001 \002(\r\022\013\n\003row\030\002 \002(\r\022$\n"
  "\010table_id\030\003 \002(\0132\022.TSP.CFUUIDArchive\"a\n\034I"
  "nternalCellReferenceArchive\022/\n\ncoordinat"
  "e\030\001 \002(\0132\033.TSCE.CellCoordinateArchive\022\020\n\010"
  "owner_id\030\002 \002(\r\"\327\001\n\026RelativeCellRefArchiv"
  "e\022\033\n\023relative_row_offset\030\001 \001(\005\022\036\n\026relati"
  "ve_column_offset\030\002 \001(\005\022\034\n\ttable_uid\030\003 \001("
  "\0132\t.TSP.UUID\022\027\n\017preserve_column\030\004 \001(\010\022\024\n"
  "\014preserve_row\030\005 \001(\010\022\032\n\022is_spanning_colum"
  "n\030\006 \001(\010\022\027\n\017is_spanning_row\030\007 \001(\010\"\243\001\n\025Ran"
  "geReferenceArchive\022$\n\010table_id\030\001 \002(\0132\022.T"
  "SP.CFUUIDArchive\022\027\n\017top_left_column\030\002 \002("
  "\r\022\024\n\014top_left_row\030\003 \002(\r\022\033\n\023bottom_right_"
  "column\030\004 \002(\r\022\030\n\020bottom_right_row\030\005 \002(\r\"^"
  "\n\035InternalRangeReferenceArchive\022\020\n\010owner"
  "_id\030\001 \002(\r\022+\n\005range\030\002 \002(\0132\034.TSCE.RangeCoo"
  "rdinateArchive\"\200\001\n\017IndexSetArchive\0224\n\007en"
  "tries\030\001 \003(\0132#.TSCE.IndexSetArchive.Index"
  "SetEntry\0327\n\rIndexSetEntry\022\023\n\013range_begin"
  "\030\001 \002(\005\022\021\n\trange_end\030\002 \001(\005\"\233\001\n\023CellCoordS"
  "etArchive\022=\n\016column_entries\030\001 \003(\0132%.TSCE"
  ".CellCoordSetArchive.ColumnEntry\032E\n\013Colu"
  "mnEntry\022\016\n\006column\030\001 \002(\r\022&\n\007row_set\030\002 \002(\013"
  "2\025.TSCE.IndexSetArchive\"\254\001\n\031InternalCell"
  "RefSetArchive\022A\n\rowner_entries\030\001 \003(\0132*.T"
  "SCE.InternalCellRefSetArchive.OwnerEntry"
  "\032L\n\nOwnerEntry\022\020\n\010owner_id\030\001 \002(\r\022,\n\tcoor"
  "d_set\030\002 \002(\0132\031.TSCE.CellCoordSetArchive\"<"
  "\n\rColumnRowSize\022\026\n\013num_columns\030\001 \001(\r:\0011\022"
  "\023\n\010num_rows\030\002 \001(\r:\0011\"a\n\017CellRectArchive\022"
  "+\n\006origin\030\001 \002(\0132\033.TSCE.CellCoordinateArc"
  "hive\022!\n\004size\030\002 \002(\0132\023.TSCE.ColumnRowSize\""
  "\250\001\n\021CellRefSetArchive\0229\n\rowner_entries\030\001"
  " \003(\0132\".TSCE.CellRefSetArchive.OwnerEntry"
  "\032X\n\nOwnerEntry\022\034\n\towner_uid\030\001 \002(\0132\t.TSP."
  "UUID\022,\n\tcoord_set\030\002 \002(\0132\031.TSCE.CellCoord"
  "SetArchive\"\230\001\n\022UidCoordSetArchive\022<\n\016col"
  "umn_entries\030\001 \003(\0132$.TSCE.UidCoordSetArch"
  "ive.ColumnEntry\032D\n\013ColumnEntry\022\031\n\006column"
  "\030\001 \002(\0132\t.TSP.UUID\022\032\n\007row_set\030\002 \003(\0132\t.TSP"
  ".UUID\"\255\001\n\024UidCellRefSetArchive\022<\n\rowner_"
  "entries\030\001 \003(\0132%.TSCE.UidCellRefSetArchiv"
  "e.OwnerEntry\032W\n\nOwnerEntry\022\034\n\towner_uid\030"
  "\001 \002(\0132\t.TSP.UUID\022+\n\tcoord_set\030\002 \002(\0132\030.TS"
  "CE.UidCoordSetArchive\"\222\003\n\030ReferencesToDi"
  "rtyArchive\0221\n\022to_dirty_owner_ids\030\001 \001(\0132\025"
  ".TSCE.IndexSetArchive\0227\n\016to_dirty_cells\030"
  "\002 \001(\0132\037.TSCE.InternalCellRefSetArchive\022B"
  "\n\031to_dirty_cells_additional\030\003 \001(\0132\037.TSCE"
  ".InternalCellRefSetArchive\022@\n\023to_dirty_r"
  "ange_refs\030\004 \003(\0132#.TSCE.InternalRangeRefe"
  "renceArchive\022\?\n\026calc_in_progress_cells\030\006"
  " \001(\0132\037.TSCE.InternalCellRefSetArchive\022C\n"
  "\032to_update_precedents_cells\030\007 \001(\0132\037.TSCE"
  ".InternalCellRefSetArchive\"\224\005\n\022CoordMapp"
  "erArchive\022\034\n\ttable_uid\030\001 \002(\0132\t.TSP.UUID\022"
  "/\n\020summary_rows_set\030\002 \001(\0132\025.TSCE.IndexSe"
  "tArchive\0222\n\023summary_columns_set\030\003 \001(\0132\025."
  "TSCE.IndexSetArchive\022-\n\016label_rows_set\030\004"
  " \001(\0132\025.TSCE.IndexSetArchive\022F\n\024base_to_v"
  "iew_row_map\030\005 \003(\0132(.TSCE.CoordMapperArch"
  "ive.BaseToViewEntry\022I\n\027base_to_view_colu"
  "mn_map\030\006 \003(\0132(.TSCE.CoordMapperArchive.B"
  "aseToViewEntry\022L\n\027summary_to_view_row_ma"
  "p\030\007 \003(\0132+.TSCE.CoordMapperArchive.Summar"
  "yToViewEntry\022O\n\032summary_to_view_column_m"
  "ap\030\010 \003(\0132+.TSCE.CoordMapperArchive.Summa"
  "ryToViewEntry\032I\n\017BaseToViewEntry\022\032\n\022base"
  "_column_or_row\030\001 \002(\r\022\032\n\022view_column_or_r"
  "ow\030\002 \002(\r\032O\n\022SummaryToViewEntry\022\035\n\025summar"
  "y_column_or_row\030\001 \002(\r\022\032\n\022view_column_or_"
  "row\030\002 \002(\r\"\211\002\n\020ReferenceArchive\022<\n\016refere"
  "nce_type\030\001 \002(\0162$.TSCE.ReferenceArchive.R"
  "eferenceType\0222\n\016cell_reference\030\002 \001(\0132\032.T"
  "SCE.CellReferenceArchive\0224\n\017range_refere"
  "nce\030\003 \001(\0132\033.TSCE.RangeReferenceArchive\"M"
  "\n\rReferenceType\022\022\n\016CELL_REFERENCE\020\001\022\023\n\017R"
  "ANGE_REFERENCE\020\002\022\023\n\017NAME_DEPENDENCY\020\003\"f\n"
  "\013EdgeArchive\022\016\n\006column\030\001 \002(\r\022\013\n\003row\030\002 \002("
  "\r\022\024\n\014is_precedent\030\003 \002(\010\022$\n\010owner_id\030\004 \001("
  "\0132\022.TSP.CFUUIDArchive\"\244\001\n\014EdgesArchive\022!"
  "\n\031packed_edge_without_owner\030\t \003(\r\022\036\n\026pac"
  "ked_edge_with_owner\030\n \003(\r\022-\n\021owner_id_fo"
  "r_edge\030\013 \003(\0132\022.TSP.CFUUIDArchive\022\"\n\032inte"
  "rnal_owner_id_for_edge\030\014 \003(\r\"\276\001\n\024Expande"
  "dEdgesArchive\022\037\n\027edge_without_owner_rows"
  "\030\001 \003(\r\022\"\n\032edge_without_owner_columns\030\002 \003"
  "(\r\022\034\n\024edge_with_owner_rows\030\003 \003(\r\022\037\n\027edge"
  "_with_owner_columns\030\004 \003(\r\022\"\n\032internal_ow"
  "ner_id_for_edge\030\005 \003(\r\"\201\003\n\021CellRecordArch"
  "ive\022\016\n\006column\030\001 \002(\r\022\013\n\003row\030\002 \002(\r\022+\n dirt"
  "y_self_plus_precedents_count\030\003 \001(\004:\0010\022\034\n"
  "\ris_in_a_cycle\030\004 \001(\010:\005false\022#\n\004edge\030\005 \003("
  "\0132\021.TSCE.EdgeArchiveB\002\030\001\022 \n\022contains_a_f"
  "ormula\030\006 \001(\010:\004true\022(\n\031has_calculated_pre"
  "cedents\030\007 \001(\010:\005false\0226\n#calculate_preced"
  "ents_on_next_recalc\030\010 \001(\010:\005falseB\002\030\001\0228\n)"
  "translate_for_excel_import_on_next_recal"
  "c\030\n \001(\010:\005false\022!\n\005edges\030\t \001(\0132\022.TSCE.Edg"
  "esArchive\"`\n\027CellDependenciesArchive\022,\n\013"
  "cell_record\030\001 \003(\0132\027.TSCE.CellRecordArchi"
  "ve\022\027\n\017num_dirty_cells\030\002 \001(\r\"\341\001\n\031CellReco"
  "rdExpandedArchive\022\016\n\006column\030\001 \002(\r\022\013\n\003row"
  "\030\002 \002(\r\022+\n dirty_self_plus_precedents_cou"
  "nt\030\003 \001(\004:\0010\022\034\n\ris_in_a_cycle\030\004 \001(\010:\005fals"
  "e\022(\n\031has_calculated_precedents\030\005 \001(\010:\005fa"
  "lse\0222\n\016expanded_edges\030\006 \001(\0132\032.TSCE.Expan"
  "dedEdgesArchive\"W\n\037CellDependenciesExpan"
  "dedArchive\0224\n\013cell_record\030\001 \003(\0132\037.TSCE.C"
  "ellRecordExpandedArchive\"\234\001\n\025CellRecordT"
  "ileArchive\022\031\n\021internal_owner_id\030\001 \002(\r\022\031\n"
  "\021tile_column_begin\030\002 \002(\r\022\026\n\016tile_row_beg"
  "in\030\003 \002(\r\0225\n\014cell_records\030\004 \003(\0132\037.TSCE.Ce"
  "llRecordExpandedArchive\"I\n\034CellDependenc"
  "iesTiledArchive\022)\n\021cell_record_tiles\030\001 \003"
  "(\0132\016.TSP.Reference\"\204\006\n\033VolatileDependenc"
  "iesArchive\022!\n\031volatile_time_cell_column\030"
  "\001 \003(\r\022\036\n\026volatile_time_cell_row\030\002 \003(\r\022#\n"
  "\033volatile_random_cell_column\030\003 \003(\r\022 \n\030vo"
  "latile_random_cell_row\030\004 \003(\r\022#\n\033volatile"
  "_locale_cell_column\030\017 \003(\r\022 \n\030volatile_lo"
  "cale_cell_row\030\020 \003(\r\022%\n\035volatile_location"
  "_cell_column\030\005 \003(\r\022\"\n\032volatile_location_"
  "cell_row\030\006 \003(\r\022$\n\034volatile_compass_cell_"
  "column\030\007 \003(\r\022!\n\031volatile_compass_cell_ro"
  "w\030\010 \003(\r\022(\n volatile_remote_data_cell_col"
  "umn\030\023 \003(\r\022%\n\035volatile_remote_data_cell_r"
  "ow\030\024 \003(\r\022-\n%volatile_sheet_table_name_ce"
  "ll_column\030\021 \003(\r\022*\n\"volatile_sheet_table_"
  "name_cell_row\030\022 \003(\r\022)\n!calculated_depend"
  "ency_cell_column\030\t \003(\r\022&\n\036calculated_dep"
  "endency_cell_row\030\n \003(\r\022D\n volatile_geome"
  "try_cell_reference\030\r \003(\0132\032.TSCE.CellRefe"
  "renceArchive\022;\n\026volatile_geometry_cell\030\013"
  " \003(\0132\033.TSCE.CellCoordinateArchive\"\232\003\n#Vo"
  "latileDependenciesExpandedArchive\0226\n\023vol"
  "atile_time_cells\030\001 \001(\0132\031.TSCE.CellCoordS"
  "etArchive\0228\n\025volatile_random_cells\030\002 \001(\013"
  "2\031.TSCE.CellCoordSetArchive\0228\n\025volatile_"
  "locale_cells\030\003 \001(\0132\031.TSCE.CellCoordSetAr"
  "chive\022B\n\037volatile_sheet_table_name_cells"
  "\030\004 \001(\0132\031.TSCE.CellCoordSetArchive\022=\n\032vol"
  "atile_remote_data_cells\030\005 \001(\0132\031.TSCE.Cel"
  "lCoordSetArchive\022D\n\033volatile_geometry_ce"
  "ll_refs\030\007 \001(\0132\037.TSCE.InternalCellRefSetA"
  "rchive\"c\n RTreeInternalNodeContentsArchi"
  "ve\022\013\n\003min\030\001 \003(\r\022\013\n\003max\030\002 \003(\r\022%\n\005child\030\003 "
  "\002(\0132\026.TSCE.RTreeNodeArchive\"l\n\034RTreeLeaf"
  "NodeContentsArchive\022\013\n\003min\030\001 \003(\r\022\013\n\003max\030"
  "\002 \003(\r\0222\n\016cell_reference\030\003 \002(\0132\032.TSCE.Cel"
  "lReferenceArchive\"\270\001\n\020RTreeNodeArchive\022\r"
  "\n\005level\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\022F\n\026internal"
  "_node_contents\030\003 \003(\0132&.TSCE.RTreeInterna"
  "lNodeContentsArchive\022>\n\022leaf_node_conten"
  "ts\030\004 \003(\0132\".TSCE.RTreeLeafNodeContentsArc"
  "hive\"\331\001\n\014RTreeArchive\022\024\n\014data_file_id\030\001 "
  "\002(\r\022\021\n\tdata_size\030\002 \002(\r\022\025\n\rdata_num_dims\030"
  "\003 \002(\r\022\026\n\016data_elem_size\030\004 \002(\r\022\033\n\023data_el"
  "em_real_size\030\005 \002(\r\022\026\n\016data_max_nodes\030\006 \002"
  "(\r\022\026\n\016data_min_nodes\030\007 \002(\r\022$\n\004root\030\010 \002(\013"
  "2\026.TSCE.RTreeNodeArchive\"\314\001\n\032RangeBackDe"
  "pendencyArchive\022\026\n\016cell_coord_row\030\001 \002(\r\022"
  "\031\n\021cell_coord_column\030\002 \002(\r\0224\n\017range_refe"
  "rence\030\003 \001(\0132\033.TSCE.RangeReferenceArchive"
  "\022E\n\030internal_range_reference\030\004 \001(\0132#.TSC"
  "E.InternalRangeReferenceArchive\"U\n\030Range"
  "DependenciesArchive\0229\n\017back_dependency\030\002"
  " \003(\0132 .TSCE.RangeBackDependencyArchive\"\363"
  "\001\n\032RangePrecedentsTileArchive\022\023\n\013to_owne"
  "r_id\030\001 \002(\r\022J\n\rfrom_to_range\030\002 \003(\01323.TSCE"
  ".RangePrecedentsTileArchive.FromToRangeA"
  "rchive\032t\n\022FromToRangeArchive\022/\n\nfrom_coo"
  "rd\030\001 \002(\0132\033.TSCE.CellCoordinateArchive\022-\n"
  "\016refers_to_rect\030\002 \002(\0132\025.TSCE.CellRectArc"
  "hive\"N\n\035RangeDependenciesTiledArchive\022-\n"
  "\025range_precedents_tile\030\001 \003(\0132\016.TSP.Refer"
  "ence\"\225\007\n\033SpanningDependenciesArchive\022\016\n\006"
  "column\030\001 \003(\r\022E\n\rrange_context\030\002 \003(\0162..TS"
  "CE.SpanningDependenciesArchive.RangeCont"
  "ext\022(\n\004cell\030\003 \003(\0132\032.TSCE.CellReferenceAr"
  "chive\022C\n\035total_range_for_deleted_table\030\004"
  " \001(\0132\034.TSCE.RangeCoordinateArchive\022B\n\034bo"
  "dy_range_for_deleted_table\030\005 \001(\0132\034.TSCE."
  "RangeCoordinateArchive\022f\n\037referring_colu"
  "mn_to_local_cells\030\006 \003(\0132=.TSCE.SpanningD"
  "ependenciesArchive.ReferringColumnToLoca"
  "lCells\022h\n referring_column_to_remote_cel"
  "ls\030\007 \003(\0132>.TSCE.SpanningDependenciesArch"
  "ive.ReferringColumnToRemoteCells\032\252\001\n\033Ref"
  "erringColumnToLocalCells\022\016\n\006column\030\001 \002(\r"
  "\022E\n\rrange_context\030\002 \002(\0162..TSCE.SpanningD"
  "ependenciesArchive.RangeContext\0224\n\017cell_"
  "coordinate\030\003 \003(\0132\033.TSCE.CellCoordinateAr"
  "chive\032\272\001\n\034ReferringColumnToRemoteCells\022\016"
  "\n\006column\030\001 \002(\r\022E\n\rrange_context\030\002 \002(\0162.."
  "TSCE.SpanningDependenciesArchive.RangeCo"
  "ntext\022C\n\027internal_cell_reference\030\003 \003(\0132\""
  ".TSCE.InternalCellReferenceArchive\"0\n\014Ra"
  "ngeContext\022\013\n\007DEFAULT\020\000\022\023\n\017INCLUDE_HEADE"
  "RS\020\001\"\362\005\n#SpanningDependenciesExpandedArc"
  "hive\022a\n\025coord_refers_to_spans\030\001 \003(\0132B.TS"
  "CE.SpanningDependenciesExpandedArchive.C"
  "ellCoordRefersToExtents\022;\n\025total_range_f"
  "or_table\030\002 \001(\0132\034.TSCE.RangeCoordinateArc"
  "hive\022:\n\024body_range_for_table\030\003 \001(\0132\034.TSC"
  "E.RangeCoordinateArchive\0327\n\013ExtentRange\022"
  "\024\n\014extent_begin\030\001 \002(\r\022\022\n\nextent_end\030\002 \001("
  "\r\032\311\001\n\037ExtentRangeWithTableWithContext\022\020\n"
  "\010owner_id\030\001 \002(\r\022M\n\rrange_context\030\002 \002(\01626"
  ".TSCE.SpanningDependenciesExpandedArchiv"
  "e.RangeContext\022E\n\006ranges\030\003 \003(\01325.TSCE.Sp"
  "anningDependenciesExpandedArchive.Extent"
  "Range\032\267\001\n\030CellCoordRefersToExtents\022/\n\nco"
  "ordinate\030\001 \002(\0132\033.TSCE.CellCoordinateArch"
  "ive\022j\n\027ranges_by_table_context\030\002 \003(\0132I.T"
  "SCE.SpanningDependenciesExpandedArchive."
  "ExtentRangeWithTableWithContext\"0\n\014Range"
  "Context\022\013\n\007DEFAULT\020\000\022\023\n\017INCLUDE_HEADERS\020"
  "\001\"[\n\035WholeOwnerDependenciesArchive\022:\n\016de"
  "pendent_cell\030\001 \003(\0132\".TSCE.InternalCellRe"
  "ferenceArchive\"a\n%WholeOwnerDependencies"
  "ExpandedArchive\0228\n\017dependent_cells\030\001 \001(\013"
  "2\037.TSCE.InternalCellRefSetArchive\"\356\002\n\021Ce"
  "llErrorsArchive\0224\n\006errors\030\001 \003(\0132$.TSCE.C"
  "ellErrorsArchive.ErrorForCell\032\267\001\n\014ErrorF"
  "orCell\022/\n\ncoordinate\030\001 \002(\0132\033.TSCE.CellCo"
  "ordinateArchive\0229\n\014error_flavor\030\002 \002(\0162#."
  "TSCE.CellErrorsArchive.ErrorFlavor\022;\n\017er"
  "r_due_to_cell\030\003 \001(\0132\".TSCE.InternalCellR"
  "eferenceArchive\"i\n\013ErrorFlavor\022\010\n\004NONE\020\000"
  "\022\t\n\005ERROR\020\001\022\r\n\tREF_ERROR\020\002\022\026\n\022CIRCULAR_R"
  "EF_ERROR\020\003\022\036\n\032UNSUPPORTED_FUNCTION_ERROR"
  "\020\004\"\256\003\n\025UuidReferencesArchive\0228\n\ntable_re"
  "fs\030\001 \003(\0132$.TSCE.UuidReferencesArchive.Ta"
  "bleRef\022E\n\017table_uuid_refs\030\002 \003(\0132,.TSCE.U"
  "uidReferencesArchive.TableWithUuidRef\032W\n"
  "\010TableRef\022\035\n\nowner_uuid\030\001 \002(\0132\t.TSP.UUID"
  "\022,\n\tcoord_set\030\002 \001(\0132\031.TSCE.CellCoordSetA"
  "rchive\032P\n\007UuidRef\022\027\n\004uuid\030\001 \002(\0132\t.TSP.UU"
  "ID\022,\n\tcoord_set\030\002 \001(\0132\031.TSCE.CellCoordSe"
  "tArchive\032i\n\020TableWithUuidRef\022\035\n\nowner_uu"
  "id\030\001 \002(\0132\t.TSP.UUID\0226\n\tuuid_refs\030\002 \003(\0132#"
  ".TSCE.UuidReferencesArchive.UuidRef\"\361\006\n\037"
  "FormulaOwnerDependenciesArchive\022$\n\021formu"
  "la_owner_uid\030\001 \002(\0132\t.TSP.UUID\022!\n\031interna"
  "l_formula_owner_id\030\002 \002(\r\022\025\n\nowner_kind\030\003"
  " \001(\r:\0010\022@\n\021cell_dependencies\030\004 \001(\0132%.TSC"
  "E.CellDependenciesExpandedArchive\022:\n\022ran"
  "ge_dependencies\030\005 \001(\0132\036.TSCE.RangeDepend"
  "enciesArchive\022H\n\025volatile_dependencies\030\006"
  " \001(\0132).TSCE.VolatileDependenciesExpanded"
  "Archive\022O\n\034spanning_column_dependencies\030"
  "\007 \001(\0132).TSCE.SpanningDependenciesExpande"
  "dArchive\022L\n\031spanning_row_dependencies\030\010 "
  "\001(\0132).TSCE.SpanningDependenciesExpandedA"
  "rchive\022M\n\030whole_owner_dependencies\030\t \001(\013"
  "2+.TSCE.WholeOwnerDependenciesExpandedAr"
  "chive\022,\n\013cell_errors\030\n \001(\0132\027.TSCE.CellEr"
  "rorsArchive\022%\n\rformula_owner\030\013 \001(\0132\016.TSP"
  ".Reference\022!\n\016base_owner_uid\030\014 \001(\0132\t.TSP"
  ".UUID\022C\n\027tiled_cell_dependencies\030\r \001(\0132\""
  ".TSCE.CellDependenciesTiledArchive\0224\n\017uu"
  "id_references\030\016 \001(\0132\033.TSCE.UuidReference"
  "sArchive\022E\n\030tiled_range_dependencies\030\017 \001"
  "(\0132#.TSCE.RangeDependenciesTiledArchive\""
  "\252\004\n\027FormulaOwnerInfoArchive\022,\n\020formula_o"
  "wner_id\030\001 \002(\0132\022.TSP.CFUUIDArchive\0228\n\021cel"
  "l_dependencies\030\002 \001(\0132\035.TSCE.CellDependen"
  "ciesArchive\022:\n\022range_dependencies\030\003 \001(\0132"
  "\036.TSCE.RangeDependenciesArchive\022@\n\025volat"
  "ile_dependencies\030\004 \001(\0132!.TSCE.VolatileDe"
  "pendenciesArchive\022G\n\034spanning_column_dep"
  "endencies\030\005 \001(\0132!.TSCE.SpanningDependenc"
  "iesArchive\022D\n\031spanning_row_dependencies\030"
  "\006 \001(\0132!.TSCE.SpanningDependenciesArchive"
  "\022E\n\030whole_owner_dependencies\030\010 \001(\0132#.TSC"
  "E.WholeOwnerDependenciesArchive\022,\n\013cell_"
  "errors\030\t \001(\0132\027.TSCE.CellErrorsArchive\022%\n"
  "\rformula_owner\030\007 \001(\0132\016.TSP.Reference\"Q\n\030"
  "SubFormulaOwnerIDArchive\022!\n\016base_owner_u"
  "id\030\001 \002(\0132\t.TSP.UUID\022\022\n\nowner_kind\030\002 \002(\r\""
  "\331\001\n\021OwnerIDMapArchive\022A\n\tmap_entry\030\001 \003(\013"
  "2..TSCE.OwnerIDMapArchive.OwnerIDMapArch"
  "iveEntry\022&\n\036unregistered_internal_owner_"
  "id\030\002 \003(\r\032Y\n\026OwnerIDMapArchiveEntry\022\031\n\021in"
  "ternal_owner_id\030\001 \002(\r\022$\n\010owner_id\030\002 \002(\0132"
  "\022.TSP.CFUUIDArchive\"0\n\024UidLookupListArch"
  "ive\022\030\n\005uuids\030\001 \003(\0132\t.TSP.UUID\"\315\002\n\030Depend"
  "encyTrackerArchive\0229\n\022formula_owner_info"
  "\030\001 \003(\0132\035.TSCE.FormulaOwnerInfoArchive\0222\n"
  "\ndirty_leaf\030\002 \003(\0132\032.TSCE.CellReferenceAr"
  "chiveB\002\030\001\022-\n\014owner_id_map\030\003 \001(\0132\027.TSCE.O"
  "wnerIDMapArchive\022C\n\023internal_dirty_leaf\030"
  "\004 \003(\0132\".TSCE.InternalCellReferenceArchiv"
  "eB\002\030\001\022\032\n\022number_of_formulas\030\005 \001(\004\0222\n\032for"
  "mula_owner_dependencies\030\006 \003(\0132\016.TSP.Refe"
  "rence\"e\n\032RemoteDataSpecifierArchive\022\026\n\016f"
  "unction_index\030\001 \002(\r\022\016\n\006symbol\030\002 \002(\t\022\021\n\ta"
  "ttribute\030\003 \002(\r\022\014\n\004date\030\004 \001(\001\"\320\001\n\031RemoteD"
  "ataValueMapArchive\022A\n\005entry\030\001 \003(\01322.TSCE"
  ".RemoteDataValueMapArchive.RemoteDataMap"
  "Entry\032p\n\022RemoteDataMapEntry\0223\n\tspecifier"
  "\030\001 \002(\0132 .TSCE.RemoteDataSpecifierArchive"
  "\022%\n\005value\030\002 \002(\0132\026.TSCE.CellValueArchive\""
  "\226\001\n\014StockArchive\022\016\n\006symbol\030\001 \002(\t\022\014\n\004date"
  "\030\002 \001(\001\0224\n\tattribute\030\003 \003(\0132!.TSCE.StockAr"
  "chive.AttributeEntry\0322\n\016AttributeEntry\022\021"
  "\n\tattribute\030\001 \002(\r\022\r\n\005value\030\002 \002(\t\"p\n\026Remo"
  "teDataStoreArchive\0222\n\tvalue_map\030\001 \002(\0132\037."
  "TSCE.RemoteDataValueMapArchive\022\"\n\006stocks"
  "\030\002 \003(\0132\022.TSCE.StockArchive\"q\n\030NameTracke"
  "dReferencePair\022\014\n\004name\030\001 \002(\t\022)\n\021tracked_"
  "reference\030\002 \001(\0132\016.TSP.Reference\022\034\n\024track"
  "ed_reference_id\030\003 \001(\r\"\213\001\n\036NamesByTracked"
  "ReferenceArchive\022$\n\010table_id\030\001 \002(\0132\022.TSP"
  ".CFUUIDArchive\022C\n\033name_tracked_reference"
  "_pair\030\002 \003(\0132\036.TSCE.NameTrackedReferenceP"
  "air\"\240\001\n\034NamedReferenceManagerArchive\022)\n\021"
  "reference_tracker\030\001 \002(\0132\016.TSP.Reference\022"
  "U\n#names_by_tracked_reference_by_table\030\002"
  " \003(\0132$.TSCE.NamesByTrackedReferenceArchi"
  "veB\002\030\001\"\203\001\n\023UuidSetStoreArchive\0222\n\007uuidSe"
  "t\030\001 \003(\0132!.TSCE.UuidSetStoreArchive.UuidS"
  "et\0328\n\007UuidSet\022\027\n\004uuid\030\001 \003(\0132\t.TSP.UUID\022\024"
  "\n\014index_of_set\030\002 \002(\r\"\373\001\n\027UuidReferenceMa"
  "pArchive\022I\n\022cell_refs_for_uuid\030\001 \003(\0132-.T"
  "SCE.UuidReferenceMapArchive.CellRefsForU"
  "uid\032\224\001\n\017CellRefsForUuid\022\027\n\004uuid\030\001 \002(\0132\t."
  "TSP.UUID\0224\n\010cell_ref\030\002 \003(\0132\".TSCE.Intern"
  "alCellReferenceArchive\0222\n\tcell_refs\030\003 \001("
  "\0132\037.TSCE.InternalCellRefSetArchive\"\334\002\n\025G"
  "roupByNodeMapArchive\022K\n\021refs_for_group_b"
  "y\030\001 \003(\01320.TSCE.GroupByNodeMapArchive.Gro"
  "upNodesForGroupBy\032m\n\024CellRefsForGroupNod"
  "e\022!\n\016group_node_uid\030\001 \002(\0132\t.TSP.UUID\0222\n\t"
  "cell_refs\030\003 \001(\0132\037.TSCE.InternalCellRefSe"
  "tArchive\032\206\001\n\024GroupNodesForGroupBy\022\037\n\014gro"
  "up_by_uid\030\001 \002(\0132\t.TSP.UUID\022M\n\023refs_for_g"
  "roup_node\030\002 \003(\01320.TSCE.GroupByNodeMapArc"
  "hive.CellRefsForGroupNode\"\225\007\n\030Calculatio"
  "nEngineArchive\022\026\n\016base_date_1904\030\001 \001(\010\022:"
  "\n\022dependency_tracker\030\002 \002(\0132\036.TSCE.Depend"
  "encyTrackerArchive\022/\n\027named_reference_ma"
  "nager\030\003 \001(\0132\016.TSP.Reference\022b\n\026excel_imp"
  "ort_date_mode\030\004 \001(\01622.TSCE.CalculationEn"
  "gineArchive.ExcelImportDateMode:\016DATE_MO"
  "DE_1900\022\'\n\037saved_locale_identifier_for_4"
  "_2\030\005 \001(\t\022\034\n\024document_random_seed\030\006 \001(\004\0229"
  "\n\022uuid_reference_map\030\007 \001(\0132\035.TSCE.UuidRe"
  "ferenceMapArchive\022\032\n\022document_timestamp\030"
  "\t \001(\001\022\031\n\021document_timezone\030\n \001(\t\022;\n\021tabl"
  "e_uid_history\030\013 \001(\0132 .TSCE.RewriteTableU"
  "IDInfoArchive\022)\n\021remote_data_store\030\014 \001(\013"
  "2\016.TSP.Reference\0223\n\016group_node_map\030\r \001(\013"
  "2\033.TSCE.GroupByNodeMapArchive\022+\n\023header_"
  "name_manager\030\016 \001(\0132\016.TSP.Reference\022%\n\rre"
  "fs_to_dirty\030\017 \001(\0132\016.TSP.Reference\022\037\n\027sav"
  "ed_locale_identifier\030\020 \001(\t\0222\n\037begin_trac"
  "king_names_legacy_nrm\030\021 \003(\0132\t.TSP.UUID\0220"
  "\n\035end_tracking_names_legacy_nrm\030\022 \003(\0132\t."
  "TSP.UUID\"_\n\023ExcelImportDateMode\022\022\n\016DATE_"
  "MODE_1900\020\001\022\031\n\025DATE_MODE_1900_LEGACY\020\002\022\031"
  "\n\025DATE_MODE_1904_LEGACY\020\003\"\235\001\n\035PreserveCo"
  "lumnRowFlagsArchive\022\035\n\025begin_row_is_abso"
  "lute\030\001 \002(\010\022 \n\030begin_column_is_absolute\030\002"
  " \002(\010\022\033\n\023end_row_is_absolute\030\003 \001(\010\022\036\n\026end"
  "_column_is_absolute\030\004 \001(\010\"\240\004\n\030CategoryRe"
  "ferenceArchive\022\037\n\014group_by_uid\030\001 \002(\0132\t.T"
  "SP.UUID\022\035\n\ncolumn_uid\030\002 \002(\0132\t.TSP.UUID\022\026"
  "\n\016aggregate_type\030\003 \002(\r\022\023\n\013group_level\030\004 "
  "\002(\021\022@\n\ngroup_uids\030\006 \001(\0132,.TSCE.CategoryR"
  "eferenceArchive.CatRefUidList\022;\n\016preserv"
  "e_flags\030\007 \001(\0132#.TSCE.PreserveColumnRowFl"
  "agsArchive\022\027\n\017relative_column\030\010 \001(\005\022%\n\022r"
  "elative_group_uid\030\t \001(\0132\t.TSP.UUID\022%\n\022ab"
  "solute_group_uid\030\n \001(\0132\t.TSP.UUID\022#\n\033opt"
  "ion_refers_to_pivot_rows\030\013 \001(\010\022&\n\036option"
  "_refers_to_pivot_columns\030\014 \001(\010\022\027\n\017agg_in"
  "dex_level\030\r \001(\r\022\"\n\032option_show_aggregate"
  "_name\030\016 \001(\010\032\'\n\rCatRefUidList\022\026\n\003uid\030\001 \003("
  "\0132\t.TSP.UUID\"\2531\n\023ASTNodeArrayArchive\022:\n\010"
  "AST_node\030\001 \003(\0132(.TSCE.ASTNodeArrayArchiv"
  "e.ASTNodeArchive\032~\n ASTLocalCellReferenc"
  "eNodeArchive\022\022\n\nrow_handle\030\001 \002(\r\022\025\n\rcolu"
  "mn_handle\030\002 \002(\r\022\025\n\rrow_is_sticky\030\003 \002(\r\022\030"
  "\n\020column_is_sticky\030\004 \002(\r\032\371\002\n%ASTCrossTab"
  "leCellReferenceNodeArchive\022\022\n\nrow_handle"
  "\030\001 \002(\r\022\025\n\rcolumn_handle\030\002 \002(\r\022\025\n\rrow_is_"
  "sticky\030\003 \002(\r\022\030\n\020column_is_sticky\030\004 \002(\r\022$"
  "\n\010table_id\030\005 \002(\0132\022.TSP.CFUUIDArchive\0221\n)"
  "AST_reference_whitespace_after_sheet_nam"
  "e\030\006 \001(\t\0222\n*AST_reference_whitespace_befo"
  "re_table_name\030\007 \001(\t\0221\n)AST_reference_whi"
  "tespace_after_table_name\030\010 \001(\t\0224\n,AST_re"
  "ference_whitespace_before_cell_address\030\t"
  " \001(\t\032E\n\032ASTColumnCoordinateArchive\022\016\n\006co"
  "lumn\030\001 \002(\021\022\027\n\010absolute\030\002 \001(\010:\005false\032\?\n\027A"
  "STRowCoordinateArchive\022\013\n\003row\030\001 \002(\021\022\027\n\010a"
  "bsolute\030\002 \001(\010:\005false\032$\n\nASTUidList\022\026\n\003ui"
  "d\030\001 \003(\0132\t.TSP.UUID\032\367\001\n\013ASTUidTract\0228\n\nco"
  "lumnUids\030\001 \002(\0132$.TSCE.ASTNodeArrayArchiv"
  "e.ASTUidList\0225\n\007rowUids\030\002 \002(\0132$.TSCE.AST"
  "NodeArrayArchive.ASTUidList\022\024\n\014is_range_"
  "ref\030\003 \001(\010\022=\n\007purpose\030\004 \001(\0162,.TSCE.ASTNod"
  "eArrayArchive.ASTUidTractPurpose\022\"\n\024pres"
  "erve_rectangular\030\005 \001(\010:\004true\032\215\001\n\rASTStic"
  "kyBits\022\035\n\025begin_row_is_absolute\030\001 \002(\010\022 \n"
  "\030begin_column_is_absolute\030\002 \002(\010\022\033\n\023end_r"
  "ow_is_absolute\030\003 \002(\010\022\036\n\026end_column_is_ab"
  "solute\030\004 \002(\010\032\205\001\n\017ASTUidTractList\0224\n\005trac"
  "t\030\001 \003(\0132%.TSCE.ASTNodeArrayArchive.ASTUi"
  "dTract\022<\n\013sticky_bits\030\002 \002(\0132\'.TSCE.ASTNo"
  "deArrayArchive.ASTStickyBits\032\203\001\n\027ASTUidC"
  "oordinateArchive\022\035\n\ncolumn_uid\030\001 \002(\0132\t.T"
  "SP.UUID\022\032\n\007row_uid\030\002 \002(\0132\t.TSP.UUID\022\027\n\017c"
  "olumn_absolute\030\003 \002(\010\022\024\n\014row_absolute\030\004 \002"
  "(\010\032m\n\021ASTCategoryLevels\022\036\n\026AST_column_gr"
  "oup_level\030\001 \002(\r\022\033\n\023AST_row_group_level\030\002"
  " \002(\r\022\033\n\023AST_agg_index_level\030\003 \001(\r\032S\n\033AST"
  "CategoryReferenceArchive\0224\n\014category_ref"
  "\030\001 \002(\0132\036.TSCE.CategoryReferenceArchive\032\372"
  "\004\n\024ASTColonTractArchive\022i\n\017relative_colu"
  "mn\030\001 \003(\0132P.TSCE.ASTNodeArrayArchive.ASTC"
  "olonTractArchive.ASTColonTractRelativeRa"
  "ngeArchive\022f\n\014relative_row\030\002 \003(\0132P.TSCE."
  "ASTNodeArrayArchive.ASTColonTractArchive"
  ".ASTColonTractRelativeRangeArchive\022i\n\017ab"
  "solute_column\030\003 \003(\0132P.TSCE.ASTNodeArrayA"
  "rchive.ASTColonTractArchive.ASTColonTrac"
  "tAbsoluteRangeArchive\022f\n\014absolute_row\030\004 "
  "\003(\0132P.TSCE.ASTNodeArrayArchive.ASTColonT"
  "ractArchive.ASTColonTractAbsoluteRangeAr"
  "chive\022\"\n\024preserve_rectangular\030\005 \001(\010:\004tru"
  "e\032K\n!ASTColonTractRelativeRangeArchive\022\023"
  "\n\013range_begin\030\001 \002(\005\022\021\n\trange_end\030\002 \001(\005\032K"
  "\n!ASTColonTractAbsoluteRangeArchive\022\023\n\013r"
  "ange_begin\030\001 \002(\r\022\021\n\trange_end\030\002 \001(\r\032\236\002\n&"
  "ASTCrossTableReferenceExtraInfoArchive\022$"
  "\n\010table_id\030\001 \002(\0132\022.TSP.CFUUIDArchive\0221\n)"
  "AST_reference_whitespace_after_sheet_nam"
  "e\030\002 \001(\t\0222\n*AST_reference_whitespace_befo"
  "re_table_name\030\003 \001(\t\0221\n)AST_reference_whi"
  "tespace_after_table_name\030\004 \001(\t\0224\n,AST_re"
  "ference_whitespace_before_cell_address\030\005"
  " \001(\t\032\276\001\n\024ASTLetNodeWhitespace\022$\n\034AST_let"
  "_whitespace_after_let\030\001 \001(\t\022+\n#AST_let_w"
  "hitespace_after_identifier\030\002 \001(\t\022\'\n\037AST_"
  "let_whitespace_after_equals\030\003 \001(\t\022*\n\"AST"
  "_let_whitespace_after_delimiter\030\004 \001(\t\032\206\021"
  "\n\016ASTNodeArchive\022<\n\rAST_node_type\030\001 \002(\0162"
  "%.TSCE.ASTNodeArrayArchive.ASTNodeType\022\037"
  "\n\027AST_function_node_index\030\002 \001(\r\022!\n\031AST_f"
  "unction_node_numArgs\030\003 \001(\r\022\036\n\026AST_number"
  "_node_number\030\004 \001(\001\022 \n\030AST_boolean_node_b"
  "oolean\030\005 \001(\010\022\036\n\026AST_string_node_string\030\006"
  " \001(\t\022\035\n\025AST_date_node_dateNum\030\007 \001(\001\022*\n\"A"
  "ST_date_node_suppress_date_format\030\023 \001(\010\022"
  "*\n\"AST_date_node_suppress_time_format\030\024 "
  "\001(\010\022&\n\036AST_date_node_date_time_format\030\025 "
  "\001(\t\022!\n\031AST_duration_node_unitNum\030\010 \001(\001\022\036"
  "\n\026AST_duration_node_unit\030\t \001(\005\022\037\n\027AST_du"
  "ration_node_style\030\026 \001(\r\022/\n\'AST_duration_"
  "node_duration_unit_largest\030\027 \001(\r\0220\n(AST_"
  "duration_node_duration_unit_smallest\030\030 \001"
  "(\r\022-\n%AST_duration_node_use_automatic_un"
  "its\030\035 \001(\010\022\036\n\026AST_token_node_boolean\030\n \001("
  "\010\022\035\n\025AST_array_node_numCol\030\013 \001(\r\022\035\n\025AST_"
  "array_node_numRow\030\014 \001(\r\022\035\n\025AST_list_node"
  "_numArgs\030\r \001(\r\0227\n\024AST_thunk_node_array\030\016"
  " \001(\0132\031.TSCE.ASTNodeArrayArchive\022k\n\'AST_l"
  "ocal_cell_reference_node_reference\030\017 \001(\013"
  "2:.TSCE.ASTNodeArrayArchive.ASTLocalCell"
  "ReferenceNodeArchive\022v\n-AST_cross_table_"
  "cell_reference_node_reference\030\020 \001(\0132\?.TS"
  "CE.ASTNodeArrayArchive.ASTCrossTableCell"
  "ReferenceNodeArchive\022(\n AST_unknown_func"
  "tion_node_string\030\021 \001(\t\022)\n!AST_unknown_fu"
  "nction_node_numArgs\030\022 \001(\r\022\026\n\016AST_whitesp"
  "ace\030\031 \001(\t\022H\n\nAST_column\030\032 \001(\01324.TSCE.AST"
  "NodeArrayArchive.ASTColumnCoordinateArch"
  "ive\022B\n\007AST_row\030\033 \001(\01321.TSCE.ASTNodeArray"
  "Archive.ASTRowCoordinateArchive\022n\n$AST_c"
  "ross_table_reference_extra_info\030\034 \001(\0132@."
  "TSCE.ASTNodeArrayArchive.ASTCrossTableRe"
  "ferenceExtraInfoArchive\022M\n\022AST_uid_coord"
  "inate\030\036 \001(\01321.TSCE.ASTNodeArrayArchive.A"
  "STUidCoordinateArchive\022@\n\017AST_sticky_bit"
  "s\030! \001(\0132\'.TSCE.ASTNodeArrayArchive.ASTSt"
  "ickyBits\022G\n\026AST_frozen_sticky_bits\030) \001(\013"
  "2\'.TSCE.ASTNodeArrayArchive.ASTStickyBit"
  "s\022\032\n\022AST_let_identifier\030\" \001(\t\022-\n\nAST_let"
  "_e2\030# \001(\0132\031.TSCE.ASTNodeArrayArchive\022J\n\022"
  "AST_let_whitespace\030$ \001(\0132..TSCE.ASTNodeA"
  "rrayArchive.ASTLetNodeWhitespace\022\022\n\nAST_"
  "symbol\030% \001(\r\022A\n\016AST_tract_list\030& \001(\0132).T"
  "SCE.ASTNodeArrayArchive.ASTUidTractList\022"
  "O\n\020AST_category_ref\030\' \001(\01325.TSCE.ASTNode"
  "ArrayArchive.ASTCategoryReferenceArchive"
  "\022G\n\017AST_colon_tract\030( \001(\0132..TSCE.ASTNode"
  "ArrayArchive.ASTColonTractArchive\022#\n\033AST"
  "_number_node_decimal_low\030* \001(\004\022$\n\034AST_nu"
  "mber_node_decimal_high\030+ \001(\004\022H\n\023AST_cate"
  "gory_levels\030, \001(\0132+.TSCE.ASTNodeArrayArc"
  "hive.ASTCategoryLevels\"\315\010\n\013ASTNodeType\022\021"
  "\n\rADDITION_NODE\020\001\022\024\n\020SUBTRACTION_NODE\020\002\022"
  "\027\n\023MULTIPLICATION_NODE\020\003\022\021\n\rDIVISION_NOD"
  "E\020\004\022\016\n\nPOWER_NODE\020\005\022\026\n\022CONCATENATION_NOD"
  "E\020\006\022\025\n\021GREATER_THAN_NODE\020\007\022!\n\035GREATER_TH"
  "AN_OR_EQUAL_TO_NODE\020\010\022\022\n\016LESS_THAN_NODE\020"
  "\t\022\036\n\032LESS_THAN_OR_EQUAL_TO_NODE\020\n\022\021\n\rEQU"
  "AL_TO_NODE\020\013\022\025\n\021NOT_EQUAL_TO_NODE\020\014\022\021\n\rN"
  "EGATION_NODE\020\r\022\022\n\016PLUS_SIGN_NODE\020\016\022\020\n\014PE"
  "RCENT_NODE\020\017\022\021\n\rFUNCTION_NODE\020\020\022\017\n\013NUMBE"
  "R_NODE\020\021\022\020\n\014BOOLEAN_NODE\020\022\022\017\n\013STRING_NOD"
  "E\020\023\022\r\n\tDATE_NODE\020\024\022\021\n\rDURATION_NODE\020\025\022\027\n"
  "\023EMPTY_ARGUMENT_NODE\020\026\022\016\n\nTOKEN_NODE\020\027\022\016"
  "\n\nARRAY_NODE\020\030\022\r\n\tLIST_NODE\020\031\022\016\n\nTHUNK_N"
  "ODE\020\032\022\035\n\031LOCAL_CELL_REFERENCE_NODE\020\033\022#\n\037"
  "CROSS_TABLE_CELL_REFERENCE_NODE\020\034\022\016\n\nCOL"
  "ON_NODE\020\035\022\030\n\024REFERENCE_ERROR_NODE\020\036\022\031\n\025U"
  "NKNOWN_FUNCTION_NODE\020\037\022\032\n\026APPEND_WHITESP"
  "ACE_NODE\020 \022\033\n\027PREPEND_WHITESPACE_NODE\020!\022"
  "\035\n\031BEGIN_EMBEDDED_NODE_ARRAY\020\"\022\022\n\016END_TH"
  "UNK_NODE\020#\022\027\n\023CELL_REFERENCE_NODE\020$\022\030\n\024C"
  "OLON_NODE_WITH_UIDS\020-\022\035\n\031REFERENCE_ERROR"
  "_WITH_UIDS\020.\022\026\n\022UID_REFERENCE_NODE\0200\022\021\n\r"
  "LET_BIND_NODE\0204\022\020\n\014LET_VAR_NODE\0205\022\026\n\022LET"
  "_END_SCOPE_NODE\0206\022\030\n\024LINKED_CELL_REF_NOD"
  "E\020\?\022\032\n\026LINKED_COLUMN_REF_NODE\020@\022\027\n\023LINKE"
  "D_ROW_REF_NODE\020A\022\025\n\021CATEGORY_REF_NODE\020B\022"
  "\024\n\020COLON_TRACT_NODE\020C\022\027\n\023VIEW_TRACT_REF_"
  "NODE\020D\"\231\002\n\022ASTUidTractPurpose\022\021\n\rUIDS_IN"
  "CLUDED\020\000\022\021\n\rUIDS_PREMERGE\020\001\022\026\n\022UIDS_PREM"
  "OVEREGION\020\002\022\021\n\rUIDS_EXCLUDED\020\003\022\017\n\013UIDS_A"
  "CTIVE\020\004\022\031\n\025UIDS_PREMERGE_TOPLEFT\020\005\022\030\n\024UI"
  "DS_REMOVED_BY_MOVE\020\006\022\037\n\033FULLTUPLE_ROW_CO"
  "LUMN_HEADER\020\007\022 \n\034FULLTUPLE_AGGREGATE_RUL"
  "E_UID\020\010\022)\n%FULLTUPLE_ROW_COLUMN_RULE_VAL"
  "UE_PAIRS\020\t\"\207\002\n\036FormulaTranslationFlagsAr"
  "chive\022\'\n\030excel_import_translation\030\001 \001(\010:"
  "\005false\022:\n+number_to_date_coercion_remova"
  "l_translation\030\002 \001(\010:\005false\022+\n\034contains_u"
  "id_form_references\030\003 \001(\010:\005false\022)\n\032conta"
  "ins_frozen_references\030\004 \001(\010:\005false\022(\n\031re"
  "turns_percent_formatted\030\005 \001(\010:\005false\"\340\002\n"
  "\016FormulaArchive\0221\n\016AST_node_array\030\001 \002(\0132"
  "\031.TSCE.ASTNodeArrayArchive\022\023\n\013host_colum"
  "n\030\002 \001(\r\022\020\n\010host_row\030\003 \001(\r\022&\n\027host_column"
  "_is_negative\030\004 \001(\010:\005false\022#\n\024host_row_is"
  "_negative\030\005 \001(\010:\005false\022\?\n\021translation_fl"
  "ags\030\006 \001(\0132$.TSCE.FormulaTranslationFlags"
  "Archive\022!\n\016host_table_uid\030\007 \001(\0132\t.TSP.UU"
  "ID\022\"\n\017host_column_uid\030\010 \001(\0132\t.TSP.UUID\022\037"
  "\n\014host_row_uid\030\t \001(\0132\t.TSP.UUID\"I\n\016Funct"
  "orArchive\022%\n\007formula\030\001 \002(\0132\024.TSCE.Formul"
  "aArchive\022\020\n\010num_args\030\002 \002(\r\"\271\003\n\023FormatStr"
  "uctArchive\022\023\n\013format_type\030\001 \002(\r\022\026\n\016decim"
  "al_places\030\002 \001(\r\022\025\n\rcurrency_code\030\003 \001(\t\022\026"
  "\n\016negative_style\030\004 \001(\r\022 \n\030show_thousands"
  "_separator\030\005 \001(\010\022\034\n\024use_accounting_style"
  "\030\006 \001(\010\022\026\n\016duration_style\030\007 \001(\r\022\014\n\004base\030\010"
  " \001(\r\022\023\n\013base_places\030\t \001(\r\022\033\n\023base_use_mi"
  "nus_sign\030\n \001(\010\022\031\n\021fraction_accuracy\030\013 \001("
  "\r\022\034\n\024suppress_date_format\030\014 \001(\010\022\034\n\024suppr"
  "ess_time_format\030\r \001(\010\022\030\n\020date_time_forma"
  "t\030\016 \001(\t\022\035\n\025duration_unit_largest\030\017 \001(\r\022\036"
  "\n\026duration_unit_smallest\030\020 \001(\r\"~\n\026RangeC"
  "oordinateArchive\022\027\n\017top_left_column\030\001 \002("
  "\r\022\024\n\014top_left_row\030\002 \002(\r\022\033\n\023bottom_right_"
  "column\030\003 \002(\r\022\030\n\020bottom_right_row\030\004 \002(\r\"\201"
  "\001\n\031TableTransposeInfoArchive\022\035\n\025number_o"
  "f_footer_rows\030\003 \002(\r\022E\n\037body_range_for_tr"
  "ansposed_table\030\004 \002(\0132\034.TSCE.RangeCoordin"
  "ateArchive\"c\n\027MergeOriginMovedArchive\022\022\n"
  "\nsrc_column\030\001 \003(\r\022\017\n\007src_row\030\002 \003(\r\022\022\n\nds"
  "t_column\030\003 \003(\r\022\017\n\007dst_row\030\004 \003(\r\"\370\006\n\025Owne"
  "rUIDMapperArchive\022\034\n\ttable_uid\030\001 \002(\0132\t.T"
  "SP.UUID\022!\n\016next_table_uid\030\002 \002(\0132\t.TSP.UU"
  "ID\0222\n\037hidden_state_for_rows_owner_uid\030\003 "
  "\002(\0132\t.TSP.UUID\0227\n$next_hidden_state_for_"
  "rows_owner_uid\030\004 \002(\0132\t.TSP.UUID\0225\n\"hidde"
  "n_state_for_columns_owner_uid\030\005 \002(\0132\t.TS"
  "P.UUID\022:\n\'next_hidden_state_for_columns_"
  "owner_uid\030\006 \002(\0132\t.TSP.UUID\022.\n\033conditiona"
  "l_style_owner_uid\030\007 \002(\0132\t.TSP.UUID\0223\n ne"
  "xt_conditional_style_owner_uid\030\010 \002(\0132\t.T"
  "SP.UUID\0228\n%sort_rule_reference_tracker_o"
  "wner_uid\030\t \002(\0132\t.TSP.UUID\022=\n*next_sort_r"
  "ule_reference_tracker_owner_uid\030\n \002(\0132\t."
  "TSP.UUID\022\"\n\017merge_owner_uid\030\013 \002(\0132\t.TSP."
  "UUID\022\'\n\024next_merge_owner_uid\030\014 \002(\0132\t.TSP"
  ".UUID\0220\n\035category_aggregates_owner_uid\030\017"
  " \002(\0132\t.TSP.UUID\0225\n\"next_category_aggrega"
  "tes_owner_uid\030\020 \002(\0132\t.TSP.UUID\022\037\n\014group_"
  "by_uid\030\021 \002(\0132\t.TSP.UUID\022$\n\021next_group_by"
  "_uid\030\022 \002(\0132\t.TSP.UUID\022.\n\033pencil_annotati"
  "on_owner_uid\030\023 \002(\0132\t.TSP.UUID\0223\n next_pe"
  "ncil_annotation_owner_uid\030\024 \002(\0132\t.TSP.UU"
  "ID\"\315\001\n\032RewriteTableUIDInfoArchive\022O\n\rtab"
  "le_uid_map\030\001 \003(\01328.TSCE.RewriteTableUIDI"
  "nfoArchive.TableUIDMapEntryArchive\032^\n\027Ta"
  "bleUIDMapEntryArchive\022!\n\016prev_table_uid\030"
  "\001 \002(\0132\t.TSP.UUID\022 \n\rnew_table_uid\030\002 \002(\0132"
  "\t.TSP.UUID\"\347\004\n\024GroupByChangeArchive\022:\n\013c"
  "hange_type\030\001 \002(\0162%.TSCE.GroupByChangeArc"
  "hive.ChangeType\022\037\n\014group_by_uid\030\002 \002(\0132\t."
  "TSP.UUID\022\026\n\016previous_level\030\003 \001(\r\022\025\n\rupda"
  "ted_level\030\004 \001(\r\0224\n\027previous_to_updated_m"
  "ap\030\005 \001(\0132\023.TSP.UUIDMapArchive\0224\n\027updated"
  "_to_previous_map\030\006 \001(\0132\023.TSP.UUIDMapArch"
  "ive\022%\n\022removed_group_uids\030\007 \003(\0132\t.TSP.UU"
  "ID\022W\n\027grouping_column_changes\030\010 \003(\01326.TS"
  "CE.GroupByChangeArchive.GroupingColumnCh"
  "angeArchive\032C\n\033GroupingColumnChangeArchi"
  "ve\022\021\n\told_level\030\001 \002(\r\022\021\n\tnew_level\030\002 \002(\r"
  "\"\221\001\n\nChangeType\022\010\n\004NONE\020\000\022\026\n\022GROUP_VALUE"
  "_CHANGE\020\001\022\033\n\027GROUP_DEFINITION_CHANGE\020\002\022\026"
  "\n\022REMOVE_GROUP_LEVEL\020\003\022\023\n\017ADD_GROUP_LEVE"
  "L\020\004\022\013\n\007PROMOTE\020\005\022\n\n\006DEMOTE\020\006\"r\n\036RewriteG"
  "roupNodeUIDInfoArchive\022\037\n\014group_by_uid\030\001"
  " \001(\0132\t.TSP.UUID\022/\n\022group_node_uid_map\030\002 "
  "\002(\0132\023.TSP.UUIDMapArchive\"\216\001\n\022IndexedUids"
  "Archive\0221\n\004uids\030\001 \003(\0132#.TSCE.IndexedUids"
  "Archive.IndexedUid\032E\n\nIndexedUid\022 \n\ruid_"
  "for_index\030\001 \002(\0132\t.TSP.UUID\022\025\n\rindex_for_"
  "uid\030\002 \002(\r\"w\n\030RewriteRangeEntryArchive\022\026\n"
  "\016range_location\030\001 \002(\r\022\024\n\014range_length\030\002 "
  "\002(\r\022\035\n\nrange_uids\030\003 \003(\0132\t.TSP.UUID\022\016\n\006of"
  "fset\030\004 \002(\r\"\362\002\n\033ColumnOrRowUuidsInfoArchi"
  "ve\022\017\n\007is_rows\030\001 \002(\010\022\034\n\ttable_uid\030\002 \002(\0132\t"
  ".TSP.UUID\022\'\n\024cond_style_owner_uid\030\003 \002(\0132"
  "\t.TSP.UUID\022\037\n\014group_by_uid\030\004 \002(\0132\t.TSP.U"
  "UID\022&\n\004uids\030\005 \002(\0132\030.TSCE.IndexedUidsArch"
  "ive\0225\n\rrange_entries\030\006 \003(\0132\036.TSCE.Rewrit"
  "eRangeEntryArchive\0221\n\013table_range\030\007 \002(\0132"
  "\034.TSCE.RangeCoordinateArchive\022 \n\rinsert_"
  "at_uid\030\010 \001(\0132\t.TSP.UUID\022&\n\023insert_opposi"
  "te_uid\030\t \001(\0132\t.TSP.UUID\"\214\001\n\021RegionInfoAr"
  "chive\022\034\n\ttable_uid\030\001 \002(\0132\t.TSP.UUID\022-\n\013c"
  "olumn_uids\030\002 \002(\0132\030.TSCE.IndexedUidsArchi"
  "ve\022*\n\010row_uids\030\003 \002(\0132\030.TSCE.IndexedUidsA"
  "rchive\"\372\001\n\026RegionMovedInfoArchive\022+\n\nsrc"
  "_region\030\001 \002(\0132\027.TSCE.RegionInfoArchive\022+"
  "\n\ndst_region\030\002 \002(\0132\027.TSCE.RegionInfoArch"
  "ive\022\021\n\tspan_rows\030\003 \001(\010\022\024\n\014span_columns\030\004"
  " \001(\010\0224\n\023original_src_region\030\005 \001(\0132\027.TSCE"
  ".RegionInfoArchive\022\'\n\024final_dest_table_u"
  "id\030\006 \001(\0132\t.TSP.UUID\"=\n\022MergeSourceArchiv"
  "e\022\024\n\014coord_column\030\001 \002(\r\022\021\n\tcoord_row\030\002 \002"
  "(\r\"3\n\023HauntedOwnerArchive\022\034\n\towner_uid\030\001"
  " \002(\0132\t.TSP.UUID\"H\n\025CellCoordinateArchive"
  "\022\022\n\npackedData\030\001 \001(\007\022\016\n\006column\030\002 \001(\r\022\013\n\003"
  "row\030\003 \001(\r\"N\n\033CellCoordinateVectorArchive"
  "\022/\n\ncell_coord\030\001 \003(\0132\033.TSCE.CellCoordina"
  "teArchive\"p\n ExpandedCellRefObjectPairAr"
  "chive\022,\n\010cell_ref\030\001 \002(\0132\032.TSCE.CellRefer"
  "enceArchive\022\036\n\006object\030\002 \002(\0132\016.TSP.Refere"
  "nce\"g\n\037ExpandedCellRefObjectMapArchive\022D"
  "\n\024cell_ref_object_pair\030\001 \003(\0132&.TSCE.Expa"
  "ndedCellRefObjectPairArchive\"\203\001\n\025Formula"
  "AtCoordArchive\022\016\n\006column\030\001 \002(\r\022\013\n\003row\030\002 "
  "\002(\r\022%\n\007formula\030\003 \001(\0132\024.TSCE.FormulaArchi"
  "ve\022&\n\027repeat_previous_formula\030\004 \001(\010:\005fal"
  "se\"\213\001\n\037FormulaCoordPairsByOwnerArchive\022\022"
  "\n\nowner_kind\030\001 \002(\r\022\034\n\towner_uid\030\002 \001(\0132\t."
  "TSP.UUID\0226\n\021formula_at_coords\030\003 \003(\0132\033.TS"
  "CE.FormulaAtCoordArchive\"[\n\026FormulasForU"
  "ndoArchive\022A\n\022formulas_for_owner\030\001 \003(\0132%"
  ".TSCE.FormulaCoordPairsByOwnerArchive\"q\n"
  "\034FormulaRewriteCommandArchive\022-\n\025table_r"
  "ewrite_command\030\001 \001(\0132\016.TSP.Reference\022\"\n\005"
  "super\030\002 \001(\0132\023.TSK.CommandArchive\"U\n\027Trac"
  "kedReferenceArchive\022&\n\003ast\030\001 \002(\0132\031.TSCE."
  "ASTNodeArrayArchive\022\022\n\nformula_id\030\002 \002(\r\""
  "v\n\037ExpandedTrackedReferenceArchive\022&\n\003as"
  "t\030\001 \002(\0132\031.TSCE.ASTNodeArrayArchive\022\026\n\016fo"
  "rmula_column\030\002 \002(\r\022\023\n\013formula_row\030\003 \002(\r\""
  "\210\002\n\034TrackedReferenceStoreArchive\022 \n\004uuid"
  "\030\001 \002(\0132\022.TSP.CFUUIDArchive\022-\n\021tracked_re"
  "ference\030\002 \003(\0132\016.TSP.ReferenceB\002\030\001\022B\n\033con"
  "tained_tracked_reference\030\003 \003(\0132\035.TSCE.Tr"
  "ackedReferenceArchive\022S\n$contained_expan"
  "ded_tracked_reference\030\004 \003(\0132%.TSCE.Expan"
  "dedTrackedReferenceArchive\"\370\001\n\023ViewTract"
  "RefArchive\022\034\n\ttable_uid\030\001 \002(\0132\t.TSP.UUID"
  "\0228\n\tuid_tract\030\002 \001(\0132%.TSCE.ASTNodeArrayA"
  "rchive.ASTUidTract\022;\n\016preserve_flags\030\003 \001"
  "(\0132#.TSCE.PreserveColumnRowFlagsArchive\022"
  "\027\n\017agg_index_level\030\004 \001(\r\022\032\n\022column_group"
  "_level\030\005 \001(\021\022\027\n\017row_group_level\030\006 \001(\021\"u\n"
  "\027BooleanCellValueArchive\022\r\n\005value\030\001 \002(\010\022"
  "(\n\006format\030\002 \001(\0132\030.TSK.FormatStructArchiv"
  "e\022!\n\022format_is_explicit\030\003 \001(\010:\005false\"\222\001\n"
  "\024DateCellValueArchive\022\r\n\005value\030\001 \002(\001\022(\n\006"
  "format\030\002 \002(\0132\030.TSK.FormatStructArchive\022\036"
  "\n\022format_is_implicit\030\003 \001(\010B\002\030\001\022!\n\022format"
  "_is_explicit\030\004 \001(\010:\005false\"\352\001\n\026NumberCell"
  "ValueArchive\022\r\n\005value\030\001 \001(\001\022\022\n\nunit_inde"
  "x\030\002 \001(\005\022\025\n\rcurrency_code\030\005 \001(\t\022(\n\006format"
  "\030\003 \002(\0132\030.TSK.FormatStructArchive\022\036\n\022form"
  "at_is_implicit\030\004 \001(\010B\002\030\001\022!\n\022format_is_ex"
  "plicit\030\006 \001(\010:\005false\022\023\n\013decimal_low\030\007 \001(\004"
  "\022\024\n\014decimal_high\030\010 \001(\004\"\325\001\n\026StringCellVal"
  "ueArchive\022\r\n\005value\030\001 \002(\t\022(\n\006format\030\002 \002(\013"
  "2\030.TSK.FormatStructArchive\022\036\n\022format_is_"
  "implicit\030\003 \001(\010B\002\030\001\022!\n\022format_is_explicit"
  "\030\004 \001(\010:\005false\022\027\n\010is_regex\030\005 \001(\010:\005false\022&"
  "\n\027is_case_sensitive_regex\030\006 \001(\010:\005false\"y"
  "\n\025ErrorCellValueArchive\022\022\n\nerror_type\030\001 "
  "\002(\005\022\026\n\016extra_info_int\030\003 \001(\005\022\031\n\021extra_inf"
  "o_string\030\004 \001(\t\022\031\n\021extra_info_double\030\005 \001("
  "\001\"\263\003\n\020CellValueArchive\022=\n\017cell_value_typ"
  "e\030\001 \002(\0162$.TSCE.CellValueArchive.CellValu"
  "eType\0224\n\rboolean_value\030\002 \001(\0132\035.TSCE.Bool"
  "eanCellValueArchive\022.\n\ndate_value\030\003 \001(\0132"
  "\032.TSCE.DateCellValueArchive\0222\n\014number_va"
  "lue\030\004 \001(\0132\034.TSCE.NumberCellValueArchive\022"
  "2\n\014string_value\030\005 \001(\0132\034.TSCE.StringCellV"
  "alueArchive\0220\n\013error_value\030\006 \001(\0132\033.TSCE."
  "ErrorCellValueArchive\"`\n\rCellValueType\022\014"
  "\n\010NIL_TYPE\020\001\022\020\n\014BOOLEAN_TYPE\020\002\022\r\n\tDATE_T"
  "YPE\020\003\022\017\n\013NUMBER_TYPE\020\004\022\017\n\013STRING_TYPE\020\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSCEArchives_2eproto_deps[2] = {
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSCEArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSCEArchives_2eproto = {
    false, false, 28959, descriptor_table_protodef_TSCEArchives_2eproto,
    "TSCEArchives.proto",
    &descriptor_table_TSCEArchives_2eproto_once, descriptor_table_TSCEArchives_2eproto_deps, 2, 143,
    schemas, file_default_instances, TableStruct_TSCEArchives_2eproto::offsets,
    file_level_metadata_TSCEArchives_2eproto, file_level_enum_descriptors_TSCEArchives_2eproto,
    file_level_service_descriptors_TSCEArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSCEArchives_2eproto_getter() {
  return &descriptor_table_TSCEArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSCEArchives_2eproto(&descriptor_table_TSCEArchives_2eproto);
namespace TSCE {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReferenceArchive_ReferenceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[0];
}
bool ReferenceArchive_ReferenceType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ReferenceArchive_ReferenceType ReferenceArchive::CELL_REFERENCE;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::RANGE_REFERENCE;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::NAME_DEPENDENCY;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::ReferenceType_MIN;
constexpr ReferenceArchive_ReferenceType ReferenceArchive::ReferenceType_MAX;
constexpr int ReferenceArchive::ReferenceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanningDependenciesArchive_RangeContext_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[1];
}
bool SpanningDependenciesArchive_RangeContext_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::DEFAULT;
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::INCLUDE_HEADERS;
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::RangeContext_MIN;
constexpr SpanningDependenciesArchive_RangeContext SpanningDependenciesArchive::RangeContext_MAX;
constexpr int SpanningDependenciesArchive::RangeContext_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SpanningDependenciesExpandedArchive_RangeContext_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[2];
}
bool SpanningDependenciesExpandedArchive_RangeContext_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive::DEFAULT;
constexpr SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive::INCLUDE_HEADERS;
constexpr SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive::RangeContext_MIN;
constexpr SpanningDependenciesExpandedArchive_RangeContext SpanningDependenciesExpandedArchive::RangeContext_MAX;
constexpr int SpanningDependenciesExpandedArchive::RangeContext_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellErrorsArchive_ErrorFlavor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[3];
}
bool CellErrorsArchive_ErrorFlavor_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::NONE;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::ERROR;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::REF_ERROR;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::CIRCULAR_REF_ERROR;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::UNSUPPORTED_FUNCTION_ERROR;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::ErrorFlavor_MIN;
constexpr CellErrorsArchive_ErrorFlavor CellErrorsArchive::ErrorFlavor_MAX;
constexpr int CellErrorsArchive::ErrorFlavor_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CalculationEngineArchive_ExcelImportDateMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[4];
}
bool CalculationEngineArchive_ExcelImportDateMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1900;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1900_LEGACY;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::DATE_MODE_1904_LEGACY;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::ExcelImportDateMode_MIN;
constexpr CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive::ExcelImportDateMode_MAX;
constexpr int CalculationEngineArchive::ExcelImportDateMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ASTNodeArrayArchive_ASTNodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[5];
}
bool ASTNodeArrayArchive_ASTNodeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 45:
    case 46:
    case 48:
    case 52:
    case 53:
    case 54:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ADDITION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::SUBTRACTION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::MULTIPLICATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DIVISION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::POWER_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CONCATENATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::GREATER_THAN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::GREATER_THAN_OR_EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LESS_THAN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LESS_THAN_OR_EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NOT_EQUAL_TO_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NEGATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PLUS_SIGN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PERCENT_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::FUNCTION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::NUMBER_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::BOOLEAN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::STRING_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DATE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::DURATION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::EMPTY_ARGUMENT_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::TOKEN_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ARRAY_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LIST_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::THUNK_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LOCAL_CELL_REFERENCE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CROSS_TABLE_CELL_REFERENCE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::COLON_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::REFERENCE_ERROR_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::UNKNOWN_FUNCTION_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::APPEND_WHITESPACE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::PREPEND_WHITESPACE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::BEGIN_EMBEDDED_NODE_ARRAY;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::END_THUNK_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CELL_REFERENCE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::COLON_NODE_WITH_UIDS;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::REFERENCE_ERROR_WITH_UIDS;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::UID_REFERENCE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LET_BIND_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LET_VAR_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LET_END_SCOPE_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LINKED_CELL_REF_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LINKED_COLUMN_REF_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::LINKED_ROW_REF_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::CATEGORY_REF_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::COLON_TRACT_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::VIEW_TRACT_REF_NODE;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ASTNodeType_MIN;
constexpr ASTNodeArrayArchive_ASTNodeType ASTNodeArrayArchive::ASTNodeType_MAX;
constexpr int ASTNodeArrayArchive::ASTNodeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ASTNodeArrayArchive_ASTUidTractPurpose_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[6];
}
bool ASTNodeArrayArchive_ASTUidTractPurpose_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_INCLUDED;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_PREMERGE;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_PREMOVEREGION;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_EXCLUDED;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_ACTIVE;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_PREMERGE_TOPLEFT;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::UIDS_REMOVED_BY_MOVE;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::FULLTUPLE_ROW_COLUMN_HEADER;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::FULLTUPLE_AGGREGATE_RULE_UID;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::FULLTUPLE_ROW_COLUMN_RULE_VALUE_PAIRS;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::ASTUidTractPurpose_MIN;
constexpr ASTNodeArrayArchive_ASTUidTractPurpose ASTNodeArrayArchive::ASTUidTractPurpose_MAX;
constexpr int ASTNodeArrayArchive::ASTUidTractPurpose_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupByChangeArchive_ChangeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[7];
}
bool GroupByChangeArchive_ChangeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::NONE;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::GROUP_VALUE_CHANGE;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::GROUP_DEFINITION_CHANGE;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::REMOVE_GROUP_LEVEL;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::ADD_GROUP_LEVEL;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::PROMOTE;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::DEMOTE;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::ChangeType_MIN;
constexpr GroupByChangeArchive_ChangeType GroupByChangeArchive::ChangeType_MAX;
constexpr int GroupByChangeArchive::ChangeType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellValueArchive_CellValueType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSCEArchives_2eproto);
  return file_level_enum_descriptors_TSCEArchives_2eproto[8];
}
bool CellValueArchive_CellValueType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CellValueArchive_CellValueType CellValueArchive::NIL_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::BOOLEAN_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::DATE_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::NUMBER_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::STRING_TYPE;
constexpr CellValueArchive_CellValueType CellValueArchive::CellValueType_MIN;
constexpr CellValueArchive_CellValueType CellValueArchive::CellValueType_MAX;
constexpr int CellValueArchive::CellValueType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CellReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellReferenceArchive>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::CFUUIDArchive& table_id(const CellReferenceArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::CFUUIDArchive&
CellReferenceArchive::_Internal::table_id(const CellReferenceArchive* msg) {
  return *msg->_impl_.table_id_;
}
void CellReferenceArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CellReferenceArchive::CellReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellReferenceArchive)
}
CellReferenceArchive::CellReferenceArchive(const CellReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSP::CFUUIDArchive(*from._impl_.table_id_);
  }
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellReferenceArchive)
}

inline void CellReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.row_){0u}
  };
}

CellReferenceArchive::~CellReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void CellReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
    _impl_.table_id_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.row_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.CFUUIDArchive table_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // required .TSP.CFUUIDArchive table_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellReferenceArchive)
  return target;
}

size_t CellReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSP.CFUUIDArchive table_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  return total_size;
}
size_t CellReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.CFUUIDArchive table_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);

    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellReferenceArchive::GetClassData() const { return &_class_data_; }


void CellReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellReferenceArchive*>(&to_msg);
  auto& from = static_cast<const CellReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellReferenceArchive::CopyFrom(const CellReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CellReferenceArchive::InternalSwap(CellReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellReferenceArchive, _impl_.row_)
      + sizeof(CellReferenceArchive::_impl_.row_)
      - PROTOBUF_FIELD_OFFSET(CellReferenceArchive, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[0]);
}

// ===================================================================

class InternalCellReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InternalCellReferenceArchive>()._impl_._has_bits_);
  static const ::TSCE::CellCoordinateArchive& coordinate(const InternalCellReferenceArchive* msg);
  static void set_has_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
InternalCellReferenceArchive::_Internal::coordinate(const InternalCellReferenceArchive* msg) {
  return *msg->_impl_.coordinate_;
}
InternalCellReferenceArchive::InternalCellReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.InternalCellReferenceArchive)
}
InternalCellReferenceArchive::InternalCellReferenceArchive(const InternalCellReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalCellReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coordinate_){nullptr}
    , decltype(_impl_.owner_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coordinate()) {
    _this->_impl_.coordinate_ = new ::TSCE::CellCoordinateArchive(*from._impl_.coordinate_);
  }
  _this->_impl_.owner_id_ = from._impl_.owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.InternalCellReferenceArchive)
}

inline void InternalCellReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coordinate_){nullptr}
    , decltype(_impl_.owner_id_){0u}
  };
}

InternalCellReferenceArchive::~InternalCellReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.InternalCellReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalCellReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.coordinate_;
}

void InternalCellReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalCellReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.InternalCellReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.coordinate_ != nullptr);
    _impl_.coordinate_->Clear();
  }
  _impl_.owner_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalCellReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_owner_id(&has_bits);
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalCellReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.InternalCellReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::coordinate(this),
        _Internal::coordinate(this).GetCachedSize(), target, stream);
  }

  // required uint32 owner_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.InternalCellReferenceArchive)
  return target;
}

size_t InternalCellReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.InternalCellReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_coordinate()) {
    // required .TSCE.CellCoordinateArchive coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinate_);
  }

  if (_internal_has_owner_id()) {
    // required uint32 owner_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  return total_size;
}
size_t InternalCellReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.InternalCellReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinate_);

    // required uint32 owner_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalCellReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalCellReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalCellReferenceArchive::GetClassData() const { return &_class_data_; }


void InternalCellReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalCellReferenceArchive*>(&to_msg);
  auto& from = static_cast<const InternalCellReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.InternalCellReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_coordinate()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_coordinate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.owner_id_ = from._impl_.owner_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalCellReferenceArchive::CopyFrom(const InternalCellReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.InternalCellReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCellReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void InternalCellReferenceArchive::InternalSwap(InternalCellReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InternalCellReferenceArchive, _impl_.owner_id_)
      + sizeof(InternalCellReferenceArchive::_impl_.owner_id_)
      - PROTOBUF_FIELD_OFFSET(InternalCellReferenceArchive, _impl_.coordinate_)>(
          reinterpret_cast<char*>(&_impl_.coordinate_),
          reinterpret_cast<char*>(&other->_impl_.coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalCellReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[1]);
}

// ===================================================================

class RelativeCellRefArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RelativeCellRefArchive>()._impl_._has_bits_);
  static void set_has_relative_row_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_relative_column_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& table_uid(const RelativeCellRefArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preserve_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preserve_row(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_spanning_column(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_is_spanning_row(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TSP::UUID&
RelativeCellRefArchive::_Internal::table_uid(const RelativeCellRefArchive* msg) {
  return *msg->_impl_.table_uid_;
}
void RelativeCellRefArchive::clear_table_uid() {
  if (_impl_.table_uid_ != nullptr) _impl_.table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RelativeCellRefArchive::RelativeCellRefArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RelativeCellRefArchive)
}
RelativeCellRefArchive::RelativeCellRefArchive(const RelativeCellRefArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RelativeCellRefArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.relative_row_offset_){}
    , decltype(_impl_.relative_column_offset_){}
    , decltype(_impl_.preserve_column_){}
    , decltype(_impl_.preserve_row_){}
    , decltype(_impl_.is_spanning_column_){}
    , decltype(_impl_.is_spanning_row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    _this->_impl_.table_uid_ = new ::TSP::UUID(*from._impl_.table_uid_);
  }
  ::memcpy(&_impl_.relative_row_offset_, &from._impl_.relative_row_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_spanning_row_) -
    reinterpret_cast<char*>(&_impl_.relative_row_offset_)) + sizeof(_impl_.is_spanning_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RelativeCellRefArchive)
}

inline void RelativeCellRefArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.relative_row_offset_){0}
    , decltype(_impl_.relative_column_offset_){0}
    , decltype(_impl_.preserve_column_){false}
    , decltype(_impl_.preserve_row_){false}
    , decltype(_impl_.is_spanning_column_){false}
    , decltype(_impl_.is_spanning_row_){false}
  };
}

RelativeCellRefArchive::~RelativeCellRefArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RelativeCellRefArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RelativeCellRefArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_uid_;
}

void RelativeCellRefArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RelativeCellRefArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RelativeCellRefArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.table_uid_ != nullptr);
    _impl_.table_uid_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&_impl_.relative_row_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_spanning_row_) -
        reinterpret_cast<char*>(&_impl_.relative_row_offset_)) + sizeof(_impl_.is_spanning_row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RelativeCellRefArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 relative_row_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_relative_row_offset(&has_bits);
          _impl_.relative_row_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 relative_column_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_relative_column_offset(&has_bits);
          _impl_.relative_column_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID table_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_preserve_column(&has_bits);
          _impl_.preserve_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_row = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_preserve_row(&has_bits);
          _impl_.preserve_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_spanning_column = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_spanning_column(&has_bits);
          _impl_.is_spanning_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_spanning_row = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_spanning_row(&has_bits);
          _impl_.is_spanning_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RelativeCellRefArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RelativeCellRefArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 relative_row_offset = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_relative_row_offset(), target);
  }

  // optional int32 relative_column_offset = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_relative_column_offset(), target);
  }

  // optional .TSP.UUID table_uid = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table_uid(this),
        _Internal::table_uid(this).GetCachedSize(), target, stream);
  }

  // optional bool preserve_column = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_preserve_column(), target);
  }

  // optional bool preserve_row = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_preserve_row(), target);
  }

  // optional bool is_spanning_column = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_spanning_column(), target);
  }

  // optional bool is_spanning_row = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_spanning_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RelativeCellRefArchive)
  return target;
}

size_t RelativeCellRefArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RelativeCellRefArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TSP.UUID table_uid = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_uid_);
    }

    // optional int32 relative_row_offset = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_relative_row_offset());
    }

    // optional int32 relative_column_offset = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_relative_column_offset());
    }

    // optional bool preserve_column = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool preserve_row = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_spanning_column = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool is_spanning_row = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RelativeCellRefArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RelativeCellRefArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RelativeCellRefArchive::GetClassData() const { return &_class_data_; }


void RelativeCellRefArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RelativeCellRefArchive*>(&to_msg);
  auto& from = static_cast<const RelativeCellRefArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RelativeCellRefArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.relative_row_offset_ = from._impl_.relative_row_offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.relative_column_offset_ = from._impl_.relative_column_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.preserve_column_ = from._impl_.preserve_column_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.preserve_row_ = from._impl_.preserve_row_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_spanning_column_ = from._impl_.is_spanning_column_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.is_spanning_row_ = from._impl_.is_spanning_row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RelativeCellRefArchive::CopyFrom(const RelativeCellRefArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RelativeCellRefArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelativeCellRefArchive::IsInitialized() const {
  if (_internal_has_table_uid()) {
    if (!_impl_.table_uid_->IsInitialized()) return false;
  }
  return true;
}

void RelativeCellRefArchive::InternalSwap(RelativeCellRefArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RelativeCellRefArchive, _impl_.is_spanning_row_)
      + sizeof(RelativeCellRefArchive::_impl_.is_spanning_row_)
      - PROTOBUF_FIELD_OFFSET(RelativeCellRefArchive, _impl_.table_uid_)>(
          reinterpret_cast<char*>(&_impl_.table_uid_),
          reinterpret_cast<char*>(&other->_impl_.table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RelativeCellRefArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[2]);
}

// ===================================================================

class RangeReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeReferenceArchive>()._impl_._has_bits_);
  static const ::TSP::CFUUIDArchive& table_id(const RangeReferenceArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_left_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_top_left_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom_right_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bottom_right_row(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSP::CFUUIDArchive&
RangeReferenceArchive::_Internal::table_id(const RangeReferenceArchive* msg) {
  return *msg->_impl_.table_id_;
}
void RangeReferenceArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RangeReferenceArchive::RangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeReferenceArchive)
}
RangeReferenceArchive::RangeReferenceArchive(const RangeReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.top_left_column_){}
    , decltype(_impl_.top_left_row_){}
    , decltype(_impl_.bottom_right_column_){}
    , decltype(_impl_.bottom_right_row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSP::CFUUIDArchive(*from._impl_.table_id_);
  }
  ::memcpy(&_impl_.top_left_column_, &from._impl_.top_left_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bottom_right_row_) -
    reinterpret_cast<char*>(&_impl_.top_left_column_)) + sizeof(_impl_.bottom_right_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeReferenceArchive)
}

inline void RangeReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.top_left_column_){0u}
    , decltype(_impl_.top_left_row_){0u}
    , decltype(_impl_.bottom_right_column_){0u}
    , decltype(_impl_.bottom_right_row_){0u}
  };
}

RangeReferenceArchive::~RangeReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void RangeReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
    _impl_.table_id_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&_impl_.top_left_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bottom_right_row_) -
        reinterpret_cast<char*>(&_impl_.top_left_column_)) + sizeof(_impl_.bottom_right_row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 top_left_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_top_left_column(&has_bits);
          _impl_.top_left_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 top_left_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_top_left_row(&has_bits);
          _impl_.top_left_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 bottom_right_column = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bottom_right_column(&has_bits);
          _impl_.bottom_right_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 bottom_right_row = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_bottom_right_row(&has_bits);
          _impl_.bottom_right_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // required uint32 top_left_column = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_left_column(), target);
  }

  // required uint32 top_left_row = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_top_left_row(), target);
  }

  // required uint32 bottom_right_column = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bottom_right_column(), target);
  }

  // required uint32 bottom_right_row = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_bottom_right_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeReferenceArchive)
  return target;
}

size_t RangeReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RangeReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSP.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  if (_internal_has_top_left_column()) {
    // required uint32 top_left_column = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_column());
  }

  if (_internal_has_top_left_row()) {
    // required uint32 top_left_row = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_row());
  }

  if (_internal_has_bottom_right_column()) {
    // required uint32 bottom_right_column = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_column());
  }

  if (_internal_has_bottom_right_row()) {
    // required uint32 bottom_right_row = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_row());
  }

  return total_size;
}
size_t RangeReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSP.CFUUIDArchive table_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);

    // required uint32 top_left_column = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_column());

    // required uint32 top_left_row = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_row());

    // required uint32 bottom_right_column = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_column());

    // required uint32 bottom_right_row = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeReferenceArchive::GetClassData() const { return &_class_data_; }


void RangeReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeReferenceArchive*>(&to_msg);
  auto& from = static_cast<const RangeReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.top_left_column_ = from._impl_.top_left_column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.top_left_row_ = from._impl_.top_left_row_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bottom_right_column_ = from._impl_.bottom_right_column_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bottom_right_row_ = from._impl_.bottom_right_row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeReferenceArchive::CopyFrom(const RangeReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RangeReferenceArchive::InternalSwap(RangeReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeReferenceArchive, _impl_.bottom_right_row_)
      + sizeof(RangeReferenceArchive::_impl_.bottom_right_row_)
      - PROTOBUF_FIELD_OFFSET(RangeReferenceArchive, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[3]);
}

// ===================================================================

class InternalRangeReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<InternalRangeReferenceArchive>()._impl_._has_bits_);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeCoordinateArchive& range(const InternalRangeReferenceArchive* msg);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::RangeCoordinateArchive&
InternalRangeReferenceArchive::_Internal::range(const InternalRangeReferenceArchive* msg) {
  return *msg->_impl_.range_;
}
InternalRangeReferenceArchive::InternalRangeReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.InternalRangeReferenceArchive)
}
InternalRangeReferenceArchive::InternalRangeReferenceArchive(const InternalRangeReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalRangeReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.owner_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range()) {
    _this->_impl_.range_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.range_);
  }
  _this->_impl_.owner_id_ = from._impl_.owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.InternalRangeReferenceArchive)
}

inline void InternalRangeReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_){nullptr}
    , decltype(_impl_.owner_id_){0u}
  };
}

InternalRangeReferenceArchive::~InternalRangeReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.InternalRangeReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalRangeReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.range_;
}

void InternalRangeReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalRangeReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.InternalRangeReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.range_ != nullptr);
    _impl_.range_->Clear();
  }
  _impl_.owner_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalRangeReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_owner_id(&has_bits);
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.RangeCoordinateArchive range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalRangeReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.InternalRangeReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // required .TSCE.RangeCoordinateArchive range = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.InternalRangeReferenceArchive)
  return target;
}

size_t InternalRangeReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.InternalRangeReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_range()) {
    // required .TSCE.RangeCoordinateArchive range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);
  }

  if (_internal_has_owner_id()) {
    // required uint32 owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  return total_size;
}
size_t InternalRangeReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.InternalRangeReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.RangeCoordinateArchive range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.range_);

    // required uint32 owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalRangeReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalRangeReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalRangeReferenceArchive::GetClassData() const { return &_class_data_; }


void InternalRangeReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalRangeReferenceArchive*>(&to_msg);
  auto& from = static_cast<const InternalRangeReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.InternalRangeReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_range()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_range());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.owner_id_ = from._impl_.owner_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalRangeReferenceArchive::CopyFrom(const InternalRangeReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.InternalRangeReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRangeReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_range()) {
    if (!_impl_.range_->IsInitialized()) return false;
  }
  return true;
}

void InternalRangeReferenceArchive::InternalSwap(InternalRangeReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InternalRangeReferenceArchive, _impl_.owner_id_)
      + sizeof(InternalRangeReferenceArchive::_impl_.owner_id_)
      - PROTOBUF_FIELD_OFFSET(InternalRangeReferenceArchive, _impl_.range_)>(
          reinterpret_cast<char*>(&_impl_.range_),
          reinterpret_cast<char*>(&other->_impl_.range_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalRangeReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[4]);
}

// ===================================================================

class IndexSetArchive_IndexSetEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<IndexSetArchive_IndexSetEntry>()._impl_._has_bits_);
  static void set_has_range_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

IndexSetArchive_IndexSetEntry::IndexSetArchive_IndexSetEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.IndexSetArchive.IndexSetEntry)
}
IndexSetArchive_IndexSetEntry::IndexSetArchive_IndexSetEntry(const IndexSetArchive_IndexSetEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexSetArchive_IndexSetEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_begin_){}
    , decltype(_impl_.range_end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.range_begin_, &from._impl_.range_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_end_) -
    reinterpret_cast<char*>(&_impl_.range_begin_)) + sizeof(_impl_.range_end_));
  // @@protoc_insertion_point(copy_constructor:TSCE.IndexSetArchive.IndexSetEntry)
}

inline void IndexSetArchive_IndexSetEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_begin_){0}
    , decltype(_impl_.range_end_){0}
  };
}

IndexSetArchive_IndexSetEntry::~IndexSetArchive_IndexSetEntry() {
  // @@protoc_insertion_point(destructor:TSCE.IndexSetArchive.IndexSetEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexSetArchive_IndexSetEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IndexSetArchive_IndexSetEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexSetArchive_IndexSetEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.IndexSetArchive.IndexSetEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.range_begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.range_end_) -
        reinterpret_cast<char*>(&_impl_.range_begin_)) + sizeof(_impl_.range_end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexSetArchive_IndexSetEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 range_begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_range_begin(&has_bits);
          _impl_.range_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_range_end(&has_bits);
          _impl_.range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexSetArchive_IndexSetEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.IndexSetArchive.IndexSetEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 range_begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_range_begin(), target);
  }

  // optional int32 range_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_range_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.IndexSetArchive.IndexSetEntry)
  return target;
}

size_t IndexSetArchive_IndexSetEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.IndexSetArchive.IndexSetEntry)
  size_t total_size = 0;

  // required int32 range_begin = 1;
  if (_internal_has_range_begin()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_range_begin());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 range_end = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_range_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexSetArchive_IndexSetEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexSetArchive_IndexSetEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexSetArchive_IndexSetEntry::GetClassData() const { return &_class_data_; }


void IndexSetArchive_IndexSetEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexSetArchive_IndexSetEntry*>(&to_msg);
  auto& from = static_cast<const IndexSetArchive_IndexSetEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.IndexSetArchive.IndexSetEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.range_begin_ = from._impl_.range_begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_end_ = from._impl_.range_end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexSetArchive_IndexSetEntry::CopyFrom(const IndexSetArchive_IndexSetEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.IndexSetArchive.IndexSetEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexSetArchive_IndexSetEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void IndexSetArchive_IndexSetEntry::InternalSwap(IndexSetArchive_IndexSetEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexSetArchive_IndexSetEntry, _impl_.range_end_)
      + sizeof(IndexSetArchive_IndexSetEntry::_impl_.range_end_)
      - PROTOBUF_FIELD_OFFSET(IndexSetArchive_IndexSetEntry, _impl_.range_begin_)>(
          reinterpret_cast<char*>(&_impl_.range_begin_),
          reinterpret_cast<char*>(&other->_impl_.range_begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexSetArchive_IndexSetEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[5]);
}

// ===================================================================

class IndexSetArchive::_Internal {
 public:
};

IndexSetArchive::IndexSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.IndexSetArchive)
}
IndexSetArchive::IndexSetArchive(const IndexSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){from._impl_.entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.IndexSetArchive)
}

inline void IndexSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexSetArchive::~IndexSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.IndexSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entries_.~RepeatedPtrField();
}

void IndexSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.IndexSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.IndexSetArchive.IndexSetEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.IndexSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.IndexSetArchive.IndexSetEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.IndexSetArchive)
  return target;
}

size_t IndexSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.IndexSetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.IndexSetArchive.IndexSetEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->_impl_.entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexSetArchive::GetClassData() const { return &_class_data_; }


void IndexSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexSetArchive*>(&to_msg);
  auto& from = static_cast<const IndexSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.IndexSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entries_.MergeFrom(from._impl_.entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexSetArchive::CopyFrom(const IndexSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.IndexSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entries_))
    return false;
  return true;
}

void IndexSetArchive::InternalSwap(IndexSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entries_.InternalSwap(&other->_impl_.entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[6]);
}

// ===================================================================

class CellCoordSetArchive_ColumnEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CellCoordSetArchive_ColumnEntry>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::IndexSetArchive& row_set(const CellCoordSetArchive_ColumnEntry* msg);
  static void set_has_row_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::IndexSetArchive&
CellCoordSetArchive_ColumnEntry::_Internal::row_set(const CellCoordSetArchive_ColumnEntry* msg) {
  return *msg->_impl_.row_set_;
}
CellCoordSetArchive_ColumnEntry::CellCoordSetArchive_ColumnEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordSetArchive.ColumnEntry)
}
CellCoordSetArchive_ColumnEntry::CellCoordSetArchive_ColumnEntry(const CellCoordSetArchive_ColumnEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellCoordSetArchive_ColumnEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_set_){nullptr}
    , decltype(_impl_.column_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_row_set()) {
    _this->_impl_.row_set_ = new ::TSCE::IndexSetArchive(*from._impl_.row_set_);
  }
  _this->_impl_.column_ = from._impl_.column_;
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordSetArchive.ColumnEntry)
}

inline void CellCoordSetArchive_ColumnEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_set_){nullptr}
    , decltype(_impl_.column_){0u}
  };
}

CellCoordSetArchive_ColumnEntry::~CellCoordSetArchive_ColumnEntry() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordSetArchive.ColumnEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellCoordSetArchive_ColumnEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.row_set_;
}

void CellCoordSetArchive_ColumnEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellCoordSetArchive_ColumnEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordSetArchive.ColumnEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.row_set_ != nullptr);
    _impl_.row_set_->Clear();
  }
  _impl_.column_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordSetArchive_ColumnEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.IndexSetArchive row_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellCoordSetArchive_ColumnEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordSetArchive.ColumnEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required .TSCE.IndexSetArchive row_set = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::row_set(this),
        _Internal::row_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordSetArchive.ColumnEntry)
  return target;
}

size_t CellCoordSetArchive_ColumnEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellCoordSetArchive.ColumnEntry)
  size_t total_size = 0;

  if (_internal_has_row_set()) {
    // required .TSCE.IndexSetArchive row_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.row_set_);
  }

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  return total_size;
}
size_t CellCoordSetArchive_ColumnEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordSetArchive.ColumnEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.IndexSetArchive row_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.row_set_);

    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellCoordSetArchive_ColumnEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellCoordSetArchive_ColumnEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellCoordSetArchive_ColumnEntry::GetClassData() const { return &_class_data_; }


void CellCoordSetArchive_ColumnEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellCoordSetArchive_ColumnEntry*>(&to_msg);
  auto& from = static_cast<const CellCoordSetArchive_ColumnEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordSetArchive.ColumnEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_row_set()->::TSCE::IndexSetArchive::MergeFrom(
          from._internal_row_set());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellCoordSetArchive_ColumnEntry::CopyFrom(const CellCoordSetArchive_ColumnEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordSetArchive.ColumnEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordSetArchive_ColumnEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_row_set()) {
    if (!_impl_.row_set_->IsInitialized()) return false;
  }
  return true;
}

void CellCoordSetArchive_ColumnEntry::InternalSwap(CellCoordSetArchive_ColumnEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellCoordSetArchive_ColumnEntry, _impl_.column_)
      + sizeof(CellCoordSetArchive_ColumnEntry::_impl_.column_)
      - PROTOBUF_FIELD_OFFSET(CellCoordSetArchive_ColumnEntry, _impl_.row_set_)>(
          reinterpret_cast<char*>(&_impl_.row_set_),
          reinterpret_cast<char*>(&other->_impl_.row_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordSetArchive_ColumnEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[7]);
}

// ===================================================================

class CellCoordSetArchive::_Internal {
 public:
};

CellCoordSetArchive::CellCoordSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordSetArchive)
}
CellCoordSetArchive::CellCoordSetArchive(const CellCoordSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellCoordSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_entries_){from._impl_.column_entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordSetArchive)
}

inline void CellCoordSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CellCoordSetArchive::~CellCoordSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellCoordSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_entries_.~RepeatedPtrField();
}

void CellCoordSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellCoordSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellCoordSetArchive.ColumnEntry column_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellCoordSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordSetArchive.ColumnEntry column_entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_column_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_column_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordSetArchive)
  return target;
}

size_t CellCoordSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordSetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordSetArchive.ColumnEntry column_entries = 1;
  total_size += 1UL * this->_internal_column_entries_size();
  for (const auto& msg : this->_impl_.column_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellCoordSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellCoordSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellCoordSetArchive::GetClassData() const { return &_class_data_; }


void CellCoordSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellCoordSetArchive*>(&to_msg);
  auto& from = static_cast<const CellCoordSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_entries_.MergeFrom(from._impl_.column_entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellCoordSetArchive::CopyFrom(const CellCoordSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.column_entries_))
    return false;
  return true;
}

void CellCoordSetArchive::InternalSwap(CellCoordSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.column_entries_.InternalSwap(&other->_impl_.column_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[8]);
}

// ===================================================================

class InternalCellRefSetArchive_OwnerEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<InternalCellRefSetArchive_OwnerEntry>()._impl_._has_bits_);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::CellCoordSetArchive& coord_set(const InternalCellRefSetArchive_OwnerEntry* msg);
  static void set_has_coord_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordSetArchive&
InternalCellRefSetArchive_OwnerEntry::_Internal::coord_set(const InternalCellRefSetArchive_OwnerEntry* msg) {
  return *msg->_impl_.coord_set_;
}
InternalCellRefSetArchive_OwnerEntry::InternalCellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.InternalCellRefSetArchive.OwnerEntry)
}
InternalCellRefSetArchive_OwnerEntry::InternalCellRefSetArchive_OwnerEntry(const InternalCellRefSetArchive_OwnerEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalCellRefSetArchive_OwnerEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coord_set_){nullptr}
    , decltype(_impl_.owner_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coord_set()) {
    _this->_impl_.coord_set_ = new ::TSCE::CellCoordSetArchive(*from._impl_.coord_set_);
  }
  _this->_impl_.owner_id_ = from._impl_.owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.InternalCellRefSetArchive.OwnerEntry)
}

inline void InternalCellRefSetArchive_OwnerEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coord_set_){nullptr}
    , decltype(_impl_.owner_id_){0u}
  };
}

InternalCellRefSetArchive_OwnerEntry::~InternalCellRefSetArchive_OwnerEntry() {
  // @@protoc_insertion_point(destructor:TSCE.InternalCellRefSetArchive.OwnerEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalCellRefSetArchive_OwnerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.coord_set_;
}

void InternalCellRefSetArchive_OwnerEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalCellRefSetArchive_OwnerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.coord_set_ != nullptr);
    _impl_.coord_set_->Clear();
  }
  _impl_.owner_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalCellRefSetArchive_OwnerEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_owner_id(&has_bits);
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellCoordSetArchive coord_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalCellRefSetArchive_OwnerEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // required .TSCE.CellCoordSetArchive coord_set = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coord_set(this),
        _Internal::coord_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.InternalCellRefSetArchive.OwnerEntry)
  return target;
}

size_t InternalCellRefSetArchive_OwnerEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (_internal_has_coord_set()) {
    // required .TSCE.CellCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coord_set_);
  }

  if (_internal_has_owner_id()) {
    // required uint32 owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  return total_size;
}
size_t InternalCellRefSetArchive_OwnerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coord_set_);

    // required uint32 owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalCellRefSetArchive_OwnerEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalCellRefSetArchive_OwnerEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalCellRefSetArchive_OwnerEntry::GetClassData() const { return &_class_data_; }


void InternalCellRefSetArchive_OwnerEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalCellRefSetArchive_OwnerEntry*>(&to_msg);
  auto& from = static_cast<const InternalCellRefSetArchive_OwnerEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_coord_set()->::TSCE::CellCoordSetArchive::MergeFrom(
          from._internal_coord_set());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.owner_id_ = from._impl_.owner_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalCellRefSetArchive_OwnerEntry::CopyFrom(const InternalCellRefSetArchive_OwnerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.InternalCellRefSetArchive.OwnerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCellRefSetArchive_OwnerEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_coord_set()) {
    if (!_impl_.coord_set_->IsInitialized()) return false;
  }
  return true;
}

void InternalCellRefSetArchive_OwnerEntry::InternalSwap(InternalCellRefSetArchive_OwnerEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InternalCellRefSetArchive_OwnerEntry, _impl_.owner_id_)
      + sizeof(InternalCellRefSetArchive_OwnerEntry::_impl_.owner_id_)
      - PROTOBUF_FIELD_OFFSET(InternalCellRefSetArchive_OwnerEntry, _impl_.coord_set_)>(
          reinterpret_cast<char*>(&_impl_.coord_set_),
          reinterpret_cast<char*>(&other->_impl_.coord_set_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalCellRefSetArchive_OwnerEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[9]);
}

// ===================================================================

class InternalCellRefSetArchive::_Internal {
 public:
};

InternalCellRefSetArchive::InternalCellRefSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.InternalCellRefSetArchive)
}
InternalCellRefSetArchive::InternalCellRefSetArchive(const InternalCellRefSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalCellRefSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_entries_){from._impl_.owner_entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.InternalCellRefSetArchive)
}

inline void InternalCellRefSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InternalCellRefSetArchive::~InternalCellRefSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.InternalCellRefSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalCellRefSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_entries_.~RepeatedPtrField();
}

void InternalCellRefSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalCellRefSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.InternalCellRefSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalCellRefSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.InternalCellRefSetArchive.OwnerEntry owner_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalCellRefSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.InternalCellRefSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellRefSetArchive.OwnerEntry owner_entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_owner_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_owner_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.InternalCellRefSetArchive)
  return target;
}

size_t InternalCellRefSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.InternalCellRefSetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellRefSetArchive.OwnerEntry owner_entries = 1;
  total_size += 1UL * this->_internal_owner_entries_size();
  for (const auto& msg : this->_impl_.owner_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalCellRefSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalCellRefSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalCellRefSetArchive::GetClassData() const { return &_class_data_; }


void InternalCellRefSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalCellRefSetArchive*>(&to_msg);
  auto& from = static_cast<const InternalCellRefSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.InternalCellRefSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.owner_entries_.MergeFrom(from._impl_.owner_entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalCellRefSetArchive::CopyFrom(const InternalCellRefSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.InternalCellRefSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalCellRefSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.owner_entries_))
    return false;
  return true;
}

void InternalCellRefSetArchive::InternalSwap(InternalCellRefSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.owner_entries_.InternalSwap(&other->_impl_.owner_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalCellRefSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[10]);
}

// ===================================================================

class ColumnRowSize::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnRowSize>()._impl_._has_bits_);
  static void set_has_num_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ColumnRowSize::ColumnRowSize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ColumnRowSize)
}
ColumnRowSize::ColumnRowSize(const ColumnRowSize& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnRowSize* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_columns_){}
    , decltype(_impl_.num_rows_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_columns_, &from._impl_.num_columns_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_rows_) -
    reinterpret_cast<char*>(&_impl_.num_columns_)) + sizeof(_impl_.num_rows_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ColumnRowSize)
}

inline void ColumnRowSize::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.num_columns_){1u}
    , decltype(_impl_.num_rows_){1u}
  };
}

ColumnRowSize::~ColumnRowSize() {
  // @@protoc_insertion_point(destructor:TSCE.ColumnRowSize)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnRowSize::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColumnRowSize::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnRowSize::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ColumnRowSize)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    _impl_.num_columns_ = 1u;
    _impl_.num_rows_ = 1u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnRowSize::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 num_columns = 1 [default = 1];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_num_columns(&has_bits);
          _impl_.num_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_rows = 2 [default = 1];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_rows(&has_bits);
          _impl_.num_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnRowSize::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ColumnRowSize)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num_columns = 1 [default = 1];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_num_columns(), target);
  }

  // optional uint32 num_rows = 2 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_rows(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ColumnRowSize)
  return target;
}

size_t ColumnRowSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ColumnRowSize)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 num_columns = 1 [default = 1];
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_columns());
    }

    // optional uint32 num_rows = 2 [default = 1];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_rows());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnRowSize::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnRowSize::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnRowSize::GetClassData() const { return &_class_data_; }


void ColumnRowSize::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnRowSize*>(&to_msg);
  auto& from = static_cast<const ColumnRowSize&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ColumnRowSize)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.num_columns_ = from._impl_.num_columns_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_rows_ = from._impl_.num_rows_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnRowSize::CopyFrom(const ColumnRowSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ColumnRowSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRowSize::IsInitialized() const {
  return true;
}

void ColumnRowSize::InternalSwap(ColumnRowSize* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.num_columns_, other->_impl_.num_columns_);
  swap(_impl_.num_rows_, other->_impl_.num_rows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnRowSize::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[11]);
}

// ===================================================================

class CellRectArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRectArchive>()._impl_._has_bits_);
  static const ::TSCE::CellCoordinateArchive& origin(const CellRectArchive* msg);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::ColumnRowSize& size(const CellRectArchive* msg);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
CellRectArchive::_Internal::origin(const CellRectArchive* msg) {
  return *msg->_impl_.origin_;
}
const ::TSCE::ColumnRowSize&
CellRectArchive::_Internal::size(const CellRectArchive* msg) {
  return *msg->_impl_.size_;
}
CellRectArchive::CellRectArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRectArchive)
}
CellRectArchive::CellRectArchive(const CellRectArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellRectArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.size_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    _this->_impl_.origin_ = new ::TSCE::CellCoordinateArchive(*from._impl_.origin_);
  }
  if (from._internal_has_size()) {
    _this->_impl_.size_ = new ::TSCE::ColumnRowSize(*from._impl_.size_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRectArchive)
}

inline void CellRectArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.origin_){nullptr}
    , decltype(_impl_.size_){nullptr}
  };
}

CellRectArchive::~CellRectArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellRectArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellRectArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.origin_;
  if (this != internal_default_instance()) delete _impl_.size_;
}

void CellRectArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellRectArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRectArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.origin_ != nullptr);
      _impl_.origin_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.size_ != nullptr);
      _impl_.size_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRectArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.ColumnRowSize size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellRectArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRectArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellCoordinateArchive origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.ColumnRowSize size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::size(this),
        _Internal::size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRectArchive)
  return target;
}

size_t CellRectArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellRectArchive)
  size_t total_size = 0;

  if (_internal_has_origin()) {
    // required .TSCE.CellCoordinateArchive origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_);
  }

  if (_internal_has_size()) {
    // required .TSCE.ColumnRowSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);
  }

  return total_size;
}
size_t CellRectArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRectArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive origin = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_);

    // required .TSCE.ColumnRowSize size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.size_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRectArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellRectArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRectArchive::GetClassData() const { return &_class_data_; }


void CellRectArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellRectArchive*>(&to_msg);
  auto& from = static_cast<const CellRectArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRectArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_origin()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_size()->::TSCE::ColumnRowSize::MergeFrom(
          from._internal_size());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRectArchive::CopyFrom(const CellRectArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRectArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRectArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CellRectArchive::InternalSwap(CellRectArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRectArchive, _impl_.size_)
      + sizeof(CellRectArchive::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(CellRectArchive, _impl_.origin_)>(
          reinterpret_cast<char*>(&_impl_.origin_),
          reinterpret_cast<char*>(&other->_impl_.origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRectArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[12]);
}

// ===================================================================

class CellRefSetArchive_OwnerEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRefSetArchive_OwnerEntry>()._impl_._has_bits_);
  static const ::TSP::UUID& owner_uid(const CellRefSetArchive_OwnerEntry* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordSetArchive& coord_set(const CellRefSetArchive_OwnerEntry* msg);
  static void set_has_coord_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
CellRefSetArchive_OwnerEntry::_Internal::owner_uid(const CellRefSetArchive_OwnerEntry* msg) {
  return *msg->_impl_.owner_uid_;
}
const ::TSCE::CellCoordSetArchive&
CellRefSetArchive_OwnerEntry::_Internal::coord_set(const CellRefSetArchive_OwnerEntry* msg) {
  return *msg->_impl_.coord_set_;
}
void CellRefSetArchive_OwnerEntry::clear_owner_uid() {
  if (_impl_.owner_uid_ != nullptr) _impl_.owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CellRefSetArchive_OwnerEntry::CellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRefSetArchive.OwnerEntry)
}
CellRefSetArchive_OwnerEntry::CellRefSetArchive_OwnerEntry(const CellRefSetArchive_OwnerEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellRefSetArchive_OwnerEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_uid_){nullptr}
    , decltype(_impl_.coord_set_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    _this->_impl_.owner_uid_ = new ::TSP::UUID(*from._impl_.owner_uid_);
  }
  if (from._internal_has_coord_set()) {
    _this->_impl_.coord_set_ = new ::TSCE::CellCoordSetArchive(*from._impl_.coord_set_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRefSetArchive.OwnerEntry)
}

inline void CellRefSetArchive_OwnerEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_uid_){nullptr}
    , decltype(_impl_.coord_set_){nullptr}
  };
}

CellRefSetArchive_OwnerEntry::~CellRefSetArchive_OwnerEntry() {
  // @@protoc_insertion_point(destructor:TSCE.CellRefSetArchive.OwnerEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellRefSetArchive_OwnerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.owner_uid_;
  if (this != internal_default_instance()) delete _impl_.coord_set_;
}

void CellRefSetArchive_OwnerEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellRefSetArchive_OwnerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRefSetArchive.OwnerEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.owner_uid_ != nullptr);
      _impl_.owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.coord_set_ != nullptr);
      _impl_.coord_set_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRefSetArchive_OwnerEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellCoordSetArchive coord_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellRefSetArchive_OwnerEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRefSetArchive.OwnerEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner_uid(this),
        _Internal::owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.CellCoordSetArchive coord_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coord_set(this),
        _Internal::coord_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRefSetArchive.OwnerEntry)
  return target;
}

size_t CellRefSetArchive_OwnerEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (_internal_has_owner_uid()) {
    // required .TSP.UUID owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_uid_);
  }

  if (_internal_has_coord_set()) {
    // required .TSCE.CellCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coord_set_);
  }

  return total_size;
}
size_t CellRefSetArchive_OwnerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_uid_);

    // required .TSCE.CellCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coord_set_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRefSetArchive_OwnerEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellRefSetArchive_OwnerEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRefSetArchive_OwnerEntry::GetClassData() const { return &_class_data_; }


void CellRefSetArchive_OwnerEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellRefSetArchive_OwnerEntry*>(&to_msg);
  auto& from = static_cast<const CellRefSetArchive_OwnerEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRefSetArchive.OwnerEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_coord_set()->::TSCE::CellCoordSetArchive::MergeFrom(
          from._internal_coord_set());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRefSetArchive_OwnerEntry::CopyFrom(const CellRefSetArchive_OwnerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRefSetArchive.OwnerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRefSetArchive_OwnerEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_owner_uid()) {
    if (!_impl_.owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_coord_set()) {
    if (!_impl_.coord_set_->IsInitialized()) return false;
  }
  return true;
}

void CellRefSetArchive_OwnerEntry::InternalSwap(CellRefSetArchive_OwnerEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRefSetArchive_OwnerEntry, _impl_.coord_set_)
      + sizeof(CellRefSetArchive_OwnerEntry::_impl_.coord_set_)
      - PROTOBUF_FIELD_OFFSET(CellRefSetArchive_OwnerEntry, _impl_.owner_uid_)>(
          reinterpret_cast<char*>(&_impl_.owner_uid_),
          reinterpret_cast<char*>(&other->_impl_.owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRefSetArchive_OwnerEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[13]);
}

// ===================================================================

class CellRefSetArchive::_Internal {
 public:
};

CellRefSetArchive::CellRefSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRefSetArchive)
}
CellRefSetArchive::CellRefSetArchive(const CellRefSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellRefSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_entries_){from._impl_.owner_entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRefSetArchive)
}

inline void CellRefSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CellRefSetArchive::~CellRefSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellRefSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellRefSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_entries_.~RepeatedPtrField();
}

void CellRefSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellRefSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRefSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRefSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellRefSetArchive.OwnerEntry owner_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellRefSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRefSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellRefSetArchive.OwnerEntry owner_entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_owner_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_owner_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRefSetArchive)
  return target;
}

size_t CellRefSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRefSetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellRefSetArchive.OwnerEntry owner_entries = 1;
  total_size += 1UL * this->_internal_owner_entries_size();
  for (const auto& msg : this->_impl_.owner_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRefSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellRefSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRefSetArchive::GetClassData() const { return &_class_data_; }


void CellRefSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellRefSetArchive*>(&to_msg);
  auto& from = static_cast<const CellRefSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRefSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.owner_entries_.MergeFrom(from._impl_.owner_entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRefSetArchive::CopyFrom(const CellRefSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRefSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRefSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.owner_entries_))
    return false;
  return true;
}

void CellRefSetArchive::InternalSwap(CellRefSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.owner_entries_.InternalSwap(&other->_impl_.owner_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRefSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[14]);
}

// ===================================================================

class UidCoordSetArchive_ColumnEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<UidCoordSetArchive_ColumnEntry>()._impl_._has_bits_);
  static const ::TSP::UUID& column(const UidCoordSetArchive_ColumnEntry* msg);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
UidCoordSetArchive_ColumnEntry::_Internal::column(const UidCoordSetArchive_ColumnEntry* msg) {
  return *msg->_impl_.column_;
}
void UidCoordSetArchive_ColumnEntry::clear_column() {
  if (_impl_.column_ != nullptr) _impl_.column_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UidCoordSetArchive_ColumnEntry::clear_row_set() {
  _impl_.row_set_.Clear();
}
UidCoordSetArchive_ColumnEntry::UidCoordSetArchive_ColumnEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UidCoordSetArchive.ColumnEntry)
}
UidCoordSetArchive_ColumnEntry::UidCoordSetArchive_ColumnEntry(const UidCoordSetArchive_ColumnEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UidCoordSetArchive_ColumnEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_set_){from._impl_.row_set_}
    , decltype(_impl_.column_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column()) {
    _this->_impl_.column_ = new ::TSP::UUID(*from._impl_.column_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UidCoordSetArchive.ColumnEntry)
}

inline void UidCoordSetArchive_ColumnEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_set_){arena}
    , decltype(_impl_.column_){nullptr}
  };
}

UidCoordSetArchive_ColumnEntry::~UidCoordSetArchive_ColumnEntry() {
  // @@protoc_insertion_point(destructor:TSCE.UidCoordSetArchive.ColumnEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UidCoordSetArchive_ColumnEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_set_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.column_;
}

void UidCoordSetArchive_ColumnEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UidCoordSetArchive_ColumnEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UidCoordSetArchive.ColumnEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_set_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.column_ != nullptr);
    _impl_.column_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UidCoordSetArchive_ColumnEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UidCoordSetArchive_ColumnEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UidCoordSetArchive.ColumnEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::column(this),
        _Internal::column(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID row_set = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_set_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_set(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UidCoordSetArchive.ColumnEntry)
  return target;
}

size_t UidCoordSetArchive_ColumnEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UidCoordSetArchive.ColumnEntry)
  size_t total_size = 0;

  // required .TSP.UUID column = 1;
  if (_internal_has_column()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_set = 2;
  total_size += 1UL * this->_internal_row_set_size();
  for (const auto& msg : this->_impl_.row_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UidCoordSetArchive_ColumnEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UidCoordSetArchive_ColumnEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UidCoordSetArchive_ColumnEntry::GetClassData() const { return &_class_data_; }


void UidCoordSetArchive_ColumnEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UidCoordSetArchive_ColumnEntry*>(&to_msg);
  auto& from = static_cast<const UidCoordSetArchive_ColumnEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UidCoordSetArchive.ColumnEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_set_.MergeFrom(from._impl_.row_set_);
  if (from._internal_has_column()) {
    _this->_internal_mutable_column()->::TSP::UUID::MergeFrom(
        from._internal_column());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UidCoordSetArchive_ColumnEntry::CopyFrom(const UidCoordSetArchive_ColumnEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UidCoordSetArchive.ColumnEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidCoordSetArchive_ColumnEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_set_))
    return false;
  if (_internal_has_column()) {
    if (!_impl_.column_->IsInitialized()) return false;
  }
  return true;
}

void UidCoordSetArchive_ColumnEntry::InternalSwap(UidCoordSetArchive_ColumnEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.row_set_.InternalSwap(&other->_impl_.row_set_);
  swap(_impl_.column_, other->_impl_.column_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UidCoordSetArchive_ColumnEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[15]);
}

// ===================================================================

class UidCoordSetArchive::_Internal {
 public:
};

UidCoordSetArchive::UidCoordSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UidCoordSetArchive)
}
UidCoordSetArchive::UidCoordSetArchive(const UidCoordSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UidCoordSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.column_entries_){from._impl_.column_entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UidCoordSetArchive)
}

inline void UidCoordSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.column_entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UidCoordSetArchive::~UidCoordSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UidCoordSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UidCoordSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_entries_.~RepeatedPtrField();
}

void UidCoordSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UidCoordSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UidCoordSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UidCoordSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.UidCoordSetArchive.ColumnEntry column_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UidCoordSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UidCoordSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.UidCoordSetArchive.ColumnEntry column_entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_column_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_column_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UidCoordSetArchive)
  return target;
}

size_t UidCoordSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UidCoordSetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UidCoordSetArchive.ColumnEntry column_entries = 1;
  total_size += 1UL * this->_internal_column_entries_size();
  for (const auto& msg : this->_impl_.column_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UidCoordSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UidCoordSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UidCoordSetArchive::GetClassData() const { return &_class_data_; }


void UidCoordSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UidCoordSetArchive*>(&to_msg);
  auto& from = static_cast<const UidCoordSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UidCoordSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_entries_.MergeFrom(from._impl_.column_entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UidCoordSetArchive::CopyFrom(const UidCoordSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UidCoordSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidCoordSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.column_entries_))
    return false;
  return true;
}

void UidCoordSetArchive::InternalSwap(UidCoordSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.column_entries_.InternalSwap(&other->_impl_.column_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UidCoordSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[16]);
}

// ===================================================================

class UidCellRefSetArchive_OwnerEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<UidCellRefSetArchive_OwnerEntry>()._impl_._has_bits_);
  static const ::TSP::UUID& owner_uid(const UidCellRefSetArchive_OwnerEntry* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::UidCoordSetArchive& coord_set(const UidCellRefSetArchive_OwnerEntry* msg);
  static void set_has_coord_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
UidCellRefSetArchive_OwnerEntry::_Internal::owner_uid(const UidCellRefSetArchive_OwnerEntry* msg) {
  return *msg->_impl_.owner_uid_;
}
const ::TSCE::UidCoordSetArchive&
UidCellRefSetArchive_OwnerEntry::_Internal::coord_set(const UidCellRefSetArchive_OwnerEntry* msg) {
  return *msg->_impl_.coord_set_;
}
void UidCellRefSetArchive_OwnerEntry::clear_owner_uid() {
  if (_impl_.owner_uid_ != nullptr) _impl_.owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UidCellRefSetArchive_OwnerEntry::UidCellRefSetArchive_OwnerEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UidCellRefSetArchive.OwnerEntry)
}
UidCellRefSetArchive_OwnerEntry::UidCellRefSetArchive_OwnerEntry(const UidCellRefSetArchive_OwnerEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UidCellRefSetArchive_OwnerEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_uid_){nullptr}
    , decltype(_impl_.coord_set_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    _this->_impl_.owner_uid_ = new ::TSP::UUID(*from._impl_.owner_uid_);
  }
  if (from._internal_has_coord_set()) {
    _this->_impl_.coord_set_ = new ::TSCE::UidCoordSetArchive(*from._impl_.coord_set_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UidCellRefSetArchive.OwnerEntry)
}

inline void UidCellRefSetArchive_OwnerEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_uid_){nullptr}
    , decltype(_impl_.coord_set_){nullptr}
  };
}

UidCellRefSetArchive_OwnerEntry::~UidCellRefSetArchive_OwnerEntry() {
  // @@protoc_insertion_point(destructor:TSCE.UidCellRefSetArchive.OwnerEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UidCellRefSetArchive_OwnerEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.owner_uid_;
  if (this != internal_default_instance()) delete _impl_.coord_set_;
}

void UidCellRefSetArchive_OwnerEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UidCellRefSetArchive_OwnerEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.owner_uid_ != nullptr);
      _impl_.owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.coord_set_ != nullptr);
      _impl_.coord_set_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UidCellRefSetArchive_OwnerEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.UidCoordSetArchive coord_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UidCellRefSetArchive_OwnerEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner_uid(this),
        _Internal::owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.UidCoordSetArchive coord_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coord_set(this),
        _Internal::coord_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UidCellRefSetArchive.OwnerEntry)
  return target;
}

size_t UidCellRefSetArchive_OwnerEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (_internal_has_owner_uid()) {
    // required .TSP.UUID owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_uid_);
  }

  if (_internal_has_coord_set()) {
    // required .TSCE.UidCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coord_set_);
  }

  return total_size;
}
size_t UidCellRefSetArchive_OwnerEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_uid_);

    // required .TSCE.UidCoordSetArchive coord_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coord_set_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UidCellRefSetArchive_OwnerEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UidCellRefSetArchive_OwnerEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UidCellRefSetArchive_OwnerEntry::GetClassData() const { return &_class_data_; }


void UidCellRefSetArchive_OwnerEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UidCellRefSetArchive_OwnerEntry*>(&to_msg);
  auto& from = static_cast<const UidCellRefSetArchive_OwnerEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_coord_set()->::TSCE::UidCoordSetArchive::MergeFrom(
          from._internal_coord_set());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UidCellRefSetArchive_OwnerEntry::CopyFrom(const UidCellRefSetArchive_OwnerEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UidCellRefSetArchive.OwnerEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidCellRefSetArchive_OwnerEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_owner_uid()) {
    if (!_impl_.owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_coord_set()) {
    if (!_impl_.coord_set_->IsInitialized()) return false;
  }
  return true;
}

void UidCellRefSetArchive_OwnerEntry::InternalSwap(UidCellRefSetArchive_OwnerEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UidCellRefSetArchive_OwnerEntry, _impl_.coord_set_)
      + sizeof(UidCellRefSetArchive_OwnerEntry::_impl_.coord_set_)
      - PROTOBUF_FIELD_OFFSET(UidCellRefSetArchive_OwnerEntry, _impl_.owner_uid_)>(
          reinterpret_cast<char*>(&_impl_.owner_uid_),
          reinterpret_cast<char*>(&other->_impl_.owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UidCellRefSetArchive_OwnerEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[17]);
}

// ===================================================================

class UidCellRefSetArchive::_Internal {
 public:
};

UidCellRefSetArchive::UidCellRefSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UidCellRefSetArchive)
}
UidCellRefSetArchive::UidCellRefSetArchive(const UidCellRefSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UidCellRefSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_entries_){from._impl_.owner_entries_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UidCellRefSetArchive)
}

inline void UidCellRefSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.owner_entries_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UidCellRefSetArchive::~UidCellRefSetArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UidCellRefSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UidCellRefSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.owner_entries_.~RepeatedPtrField();
}

void UidCellRefSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UidCellRefSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UidCellRefSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.owner_entries_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UidCellRefSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.UidCellRefSetArchive.OwnerEntry owner_entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UidCellRefSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UidCellRefSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.UidCellRefSetArchive.OwnerEntry owner_entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_owner_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_owner_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UidCellRefSetArchive)
  return target;
}

size_t UidCellRefSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UidCellRefSetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UidCellRefSetArchive.OwnerEntry owner_entries = 1;
  total_size += 1UL * this->_internal_owner_entries_size();
  for (const auto& msg : this->_impl_.owner_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UidCellRefSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UidCellRefSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UidCellRefSetArchive::GetClassData() const { return &_class_data_; }


void UidCellRefSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UidCellRefSetArchive*>(&to_msg);
  auto& from = static_cast<const UidCellRefSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UidCellRefSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.owner_entries_.MergeFrom(from._impl_.owner_entries_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UidCellRefSetArchive::CopyFrom(const UidCellRefSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UidCellRefSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidCellRefSetArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.owner_entries_))
    return false;
  return true;
}

void UidCellRefSetArchive::InternalSwap(UidCellRefSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.owner_entries_.InternalSwap(&other->_impl_.owner_entries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UidCellRefSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[18]);
}

// ===================================================================

class ReferencesToDirtyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferencesToDirtyArchive>()._impl_._has_bits_);
  static const ::TSCE::IndexSetArchive& to_dirty_owner_ids(const ReferencesToDirtyArchive* msg);
  static void set_has_to_dirty_owner_ids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::InternalCellRefSetArchive& to_dirty_cells(const ReferencesToDirtyArchive* msg);
  static void set_has_to_dirty_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::InternalCellRefSetArchive& to_dirty_cells_additional(const ReferencesToDirtyArchive* msg);
  static void set_has_to_dirty_cells_additional(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::InternalCellRefSetArchive& calc_in_progress_cells(const ReferencesToDirtyArchive* msg);
  static void set_has_calc_in_progress_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::InternalCellRefSetArchive& to_update_precedents_cells(const ReferencesToDirtyArchive* msg);
  static void set_has_to_update_precedents_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TSCE::IndexSetArchive&
ReferencesToDirtyArchive::_Internal::to_dirty_owner_ids(const ReferencesToDirtyArchive* msg) {
  return *msg->_impl_.to_dirty_owner_ids_;
}
const ::TSCE::InternalCellRefSetArchive&
ReferencesToDirtyArchive::_Internal::to_dirty_cells(const ReferencesToDirtyArchive* msg) {
  return *msg->_impl_.to_dirty_cells_;
}
const ::TSCE::InternalCellRefSetArchive&
ReferencesToDirtyArchive::_Internal::to_dirty_cells_additional(const ReferencesToDirtyArchive* msg) {
  return *msg->_impl_.to_dirty_cells_additional_;
}
const ::TSCE::InternalCellRefSetArchive&
ReferencesToDirtyArchive::_Internal::calc_in_progress_cells(const ReferencesToDirtyArchive* msg) {
  return *msg->_impl_.calc_in_progress_cells_;
}
const ::TSCE::InternalCellRefSetArchive&
ReferencesToDirtyArchive::_Internal::to_update_precedents_cells(const ReferencesToDirtyArchive* msg) {
  return *msg->_impl_.to_update_precedents_cells_;
}
ReferencesToDirtyArchive::ReferencesToDirtyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ReferencesToDirtyArchive)
}
ReferencesToDirtyArchive::ReferencesToDirtyArchive(const ReferencesToDirtyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferencesToDirtyArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.to_dirty_range_refs_){from._impl_.to_dirty_range_refs_}
    , decltype(_impl_.to_dirty_owner_ids_){nullptr}
    , decltype(_impl_.to_dirty_cells_){nullptr}
    , decltype(_impl_.to_dirty_cells_additional_){nullptr}
    , decltype(_impl_.calc_in_progress_cells_){nullptr}
    , decltype(_impl_.to_update_precedents_cells_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_to_dirty_owner_ids()) {
    _this->_impl_.to_dirty_owner_ids_ = new ::TSCE::IndexSetArchive(*from._impl_.to_dirty_owner_ids_);
  }
  if (from._internal_has_to_dirty_cells()) {
    _this->_impl_.to_dirty_cells_ = new ::TSCE::InternalCellRefSetArchive(*from._impl_.to_dirty_cells_);
  }
  if (from._internal_has_to_dirty_cells_additional()) {
    _this->_impl_.to_dirty_cells_additional_ = new ::TSCE::InternalCellRefSetArchive(*from._impl_.to_dirty_cells_additional_);
  }
  if (from._internal_has_calc_in_progress_cells()) {
    _this->_impl_.calc_in_progress_cells_ = new ::TSCE::InternalCellRefSetArchive(*from._impl_.calc_in_progress_cells_);
  }
  if (from._internal_has_to_update_precedents_cells()) {
    _this->_impl_.to_update_precedents_cells_ = new ::TSCE::InternalCellRefSetArchive(*from._impl_.to_update_precedents_cells_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ReferencesToDirtyArchive)
}

inline void ReferencesToDirtyArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.to_dirty_range_refs_){arena}
    , decltype(_impl_.to_dirty_owner_ids_){nullptr}
    , decltype(_impl_.to_dirty_cells_){nullptr}
    , decltype(_impl_.to_dirty_cells_additional_){nullptr}
    , decltype(_impl_.calc_in_progress_cells_){nullptr}
    , decltype(_impl_.to_update_precedents_cells_){nullptr}
  };
}

ReferencesToDirtyArchive::~ReferencesToDirtyArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ReferencesToDirtyArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferencesToDirtyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.to_dirty_range_refs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.to_dirty_owner_ids_;
  if (this != internal_default_instance()) delete _impl_.to_dirty_cells_;
  if (this != internal_default_instance()) delete _impl_.to_dirty_cells_additional_;
  if (this != internal_default_instance()) delete _impl_.calc_in_progress_cells_;
  if (this != internal_default_instance()) delete _impl_.to_update_precedents_cells_;
}

void ReferencesToDirtyArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferencesToDirtyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ReferencesToDirtyArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.to_dirty_range_refs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.to_dirty_owner_ids_ != nullptr);
      _impl_.to_dirty_owner_ids_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.to_dirty_cells_ != nullptr);
      _impl_.to_dirty_cells_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.to_dirty_cells_additional_ != nullptr);
      _impl_.to_dirty_cells_additional_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.calc_in_progress_cells_ != nullptr);
      _impl_.calc_in_progress_cells_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.to_update_precedents_cells_ != nullptr);
      _impl_.to_update_precedents_cells_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferencesToDirtyArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.IndexSetArchive to_dirty_owner_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_dirty_owner_ids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive to_dirty_cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_dirty_cells(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive to_dirty_cells_additional = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_dirty_cells_additional(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.InternalRangeReferenceArchive to_dirty_range_refs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_to_dirty_range_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive calc_in_progress_cells = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_calc_in_progress_cells(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive to_update_precedents_cells = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_to_update_precedents_cells(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferencesToDirtyArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ReferencesToDirtyArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.IndexSetArchive to_dirty_owner_ids = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::to_dirty_owner_ids(this),
        _Internal::to_dirty_owner_ids(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive to_dirty_cells = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::to_dirty_cells(this),
        _Internal::to_dirty_cells(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive to_dirty_cells_additional = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to_dirty_cells_additional(this),
        _Internal::to_dirty_cells_additional(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.InternalRangeReferenceArchive to_dirty_range_refs = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_to_dirty_range_refs_size()); i < n; i++) {
    const auto& repfield = this->_internal_to_dirty_range_refs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive calc_in_progress_cells = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::calc_in_progress_cells(this),
        _Internal::calc_in_progress_cells(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive to_update_precedents_cells = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::to_update_precedents_cells(this),
        _Internal::to_update_precedents_cells(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ReferencesToDirtyArchive)
  return target;
}

size_t ReferencesToDirtyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ReferencesToDirtyArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalRangeReferenceArchive to_dirty_range_refs = 4;
  total_size += 1UL * this->_internal_to_dirty_range_refs_size();
  for (const auto& msg : this->_impl_.to_dirty_range_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSCE.IndexSetArchive to_dirty_owner_ids = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_dirty_owner_ids_);
    }

    // optional .TSCE.InternalCellRefSetArchive to_dirty_cells = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_dirty_cells_);
    }

    // optional .TSCE.InternalCellRefSetArchive to_dirty_cells_additional = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_dirty_cells_additional_);
    }

    // optional .TSCE.InternalCellRefSetArchive calc_in_progress_cells = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.calc_in_progress_cells_);
    }

    // optional .TSCE.InternalCellRefSetArchive to_update_precedents_cells = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.to_update_precedents_cells_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferencesToDirtyArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferencesToDirtyArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferencesToDirtyArchive::GetClassData() const { return &_class_data_; }


void ReferencesToDirtyArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferencesToDirtyArchive*>(&to_msg);
  auto& from = static_cast<const ReferencesToDirtyArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ReferencesToDirtyArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.to_dirty_range_refs_.MergeFrom(from._impl_.to_dirty_range_refs_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_to_dirty_owner_ids()->::TSCE::IndexSetArchive::MergeFrom(
          from._internal_to_dirty_owner_ids());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to_dirty_cells()->::TSCE::InternalCellRefSetArchive::MergeFrom(
          from._internal_to_dirty_cells());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_to_dirty_cells_additional()->::TSCE::InternalCellRefSetArchive::MergeFrom(
          from._internal_to_dirty_cells_additional());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_calc_in_progress_cells()->::TSCE::InternalCellRefSetArchive::MergeFrom(
          from._internal_calc_in_progress_cells());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_to_update_precedents_cells()->::TSCE::InternalCellRefSetArchive::MergeFrom(
          from._internal_to_update_precedents_cells());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferencesToDirtyArchive::CopyFrom(const ReferencesToDirtyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ReferencesToDirtyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferencesToDirtyArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.to_dirty_range_refs_))
    return false;
  if (_internal_has_to_dirty_owner_ids()) {
    if (!_impl_.to_dirty_owner_ids_->IsInitialized()) return false;
  }
  if (_internal_has_to_dirty_cells()) {
    if (!_impl_.to_dirty_cells_->IsInitialized()) return false;
  }
  if (_internal_has_to_dirty_cells_additional()) {
    if (!_impl_.to_dirty_cells_additional_->IsInitialized()) return false;
  }
  if (_internal_has_calc_in_progress_cells()) {
    if (!_impl_.calc_in_progress_cells_->IsInitialized()) return false;
  }
  if (_internal_has_to_update_precedents_cells()) {
    if (!_impl_.to_update_precedents_cells_->IsInitialized()) return false;
  }
  return true;
}

void ReferencesToDirtyArchive::InternalSwap(ReferencesToDirtyArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.to_dirty_range_refs_.InternalSwap(&other->_impl_.to_dirty_range_refs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferencesToDirtyArchive, _impl_.to_update_precedents_cells_)
      + sizeof(ReferencesToDirtyArchive::_impl_.to_update_precedents_cells_)
      - PROTOBUF_FIELD_OFFSET(ReferencesToDirtyArchive, _impl_.to_dirty_owner_ids_)>(
          reinterpret_cast<char*>(&_impl_.to_dirty_owner_ids_),
          reinterpret_cast<char*>(&other->_impl_.to_dirty_owner_ids_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferencesToDirtyArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[19]);
}

// ===================================================================

class CoordMapperArchive_BaseToViewEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CoordMapperArchive_BaseToViewEntry>()._impl_._has_bits_);
  static void set_has_base_column_or_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_view_column_or_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CoordMapperArchive_BaseToViewEntry::CoordMapperArchive_BaseToViewEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CoordMapperArchive.BaseToViewEntry)
}
CoordMapperArchive_BaseToViewEntry::CoordMapperArchive_BaseToViewEntry(const CoordMapperArchive_BaseToViewEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordMapperArchive_BaseToViewEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_column_or_row_){}
    , decltype(_impl_.view_column_or_row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.base_column_or_row_, &from._impl_.base_column_or_row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.view_column_or_row_) -
    reinterpret_cast<char*>(&_impl_.base_column_or_row_)) + sizeof(_impl_.view_column_or_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CoordMapperArchive.BaseToViewEntry)
}

inline void CoordMapperArchive_BaseToViewEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_column_or_row_){0u}
    , decltype(_impl_.view_column_or_row_){0u}
  };
}

CoordMapperArchive_BaseToViewEntry::~CoordMapperArchive_BaseToViewEntry() {
  // @@protoc_insertion_point(destructor:TSCE.CoordMapperArchive.BaseToViewEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordMapperArchive_BaseToViewEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CoordMapperArchive_BaseToViewEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordMapperArchive_BaseToViewEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.base_column_or_row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.view_column_or_row_) -
        reinterpret_cast<char*>(&_impl_.base_column_or_row_)) + sizeof(_impl_.view_column_or_row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordMapperArchive_BaseToViewEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 base_column_or_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_base_column_or_row(&has_bits);
          _impl_.base_column_or_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 view_column_or_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_view_column_or_row(&has_bits);
          _impl_.view_column_or_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordMapperArchive_BaseToViewEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 base_column_or_row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_base_column_or_row(), target);
  }

  // required uint32 view_column_or_row = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_view_column_or_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CoordMapperArchive.BaseToViewEntry)
  return target;
}

size_t CoordMapperArchive_BaseToViewEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  size_t total_size = 0;

  if (_internal_has_base_column_or_row()) {
    // required uint32 base_column_or_row = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_column_or_row());
  }

  if (_internal_has_view_column_or_row()) {
    // required uint32 view_column_or_row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_view_column_or_row());
  }

  return total_size;
}
size_t CoordMapperArchive_BaseToViewEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 base_column_or_row = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_column_or_row());

    // required uint32 view_column_or_row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_view_column_or_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordMapperArchive_BaseToViewEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordMapperArchive_BaseToViewEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordMapperArchive_BaseToViewEntry::GetClassData() const { return &_class_data_; }


void CoordMapperArchive_BaseToViewEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordMapperArchive_BaseToViewEntry*>(&to_msg);
  auto& from = static_cast<const CoordMapperArchive_BaseToViewEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.base_column_or_row_ = from._impl_.base_column_or_row_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.view_column_or_row_ = from._impl_.view_column_or_row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordMapperArchive_BaseToViewEntry::CopyFrom(const CoordMapperArchive_BaseToViewEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CoordMapperArchive.BaseToViewEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordMapperArchive_BaseToViewEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CoordMapperArchive_BaseToViewEntry::InternalSwap(CoordMapperArchive_BaseToViewEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoordMapperArchive_BaseToViewEntry, _impl_.view_column_or_row_)
      + sizeof(CoordMapperArchive_BaseToViewEntry::_impl_.view_column_or_row_)
      - PROTOBUF_FIELD_OFFSET(CoordMapperArchive_BaseToViewEntry, _impl_.base_column_or_row_)>(
          reinterpret_cast<char*>(&_impl_.base_column_or_row_),
          reinterpret_cast<char*>(&other->_impl_.base_column_or_row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordMapperArchive_BaseToViewEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[20]);
}

// ===================================================================

class CoordMapperArchive_SummaryToViewEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<CoordMapperArchive_SummaryToViewEntry>()._impl_._has_bits_);
  static void set_has_summary_column_or_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_view_column_or_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CoordMapperArchive_SummaryToViewEntry::CoordMapperArchive_SummaryToViewEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CoordMapperArchive.SummaryToViewEntry)
}
CoordMapperArchive_SummaryToViewEntry::CoordMapperArchive_SummaryToViewEntry(const CoordMapperArchive_SummaryToViewEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordMapperArchive_SummaryToViewEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.summary_column_or_row_){}
    , decltype(_impl_.view_column_or_row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.summary_column_or_row_, &from._impl_.summary_column_or_row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.view_column_or_row_) -
    reinterpret_cast<char*>(&_impl_.summary_column_or_row_)) + sizeof(_impl_.view_column_or_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CoordMapperArchive.SummaryToViewEntry)
}

inline void CoordMapperArchive_SummaryToViewEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.summary_column_or_row_){0u}
    , decltype(_impl_.view_column_or_row_){0u}
  };
}

CoordMapperArchive_SummaryToViewEntry::~CoordMapperArchive_SummaryToViewEntry() {
  // @@protoc_insertion_point(destructor:TSCE.CoordMapperArchive.SummaryToViewEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordMapperArchive_SummaryToViewEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CoordMapperArchive_SummaryToViewEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordMapperArchive_SummaryToViewEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CoordMapperArchive.SummaryToViewEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.summary_column_or_row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.view_column_or_row_) -
        reinterpret_cast<char*>(&_impl_.summary_column_or_row_)) + sizeof(_impl_.view_column_or_row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordMapperArchive_SummaryToViewEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 summary_column_or_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_summary_column_or_row(&has_bits);
          _impl_.summary_column_or_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 view_column_or_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_view_column_or_row(&has_bits);
          _impl_.view_column_or_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordMapperArchive_SummaryToViewEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CoordMapperArchive.SummaryToViewEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 summary_column_or_row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_summary_column_or_row(), target);
  }

  // required uint32 view_column_or_row = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_view_column_or_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CoordMapperArchive.SummaryToViewEntry)
  return target;
}

size_t CoordMapperArchive_SummaryToViewEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CoordMapperArchive.SummaryToViewEntry)
  size_t total_size = 0;

  if (_internal_has_summary_column_or_row()) {
    // required uint32 summary_column_or_row = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_summary_column_or_row());
  }

  if (_internal_has_view_column_or_row()) {
    // required uint32 view_column_or_row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_view_column_or_row());
  }

  return total_size;
}
size_t CoordMapperArchive_SummaryToViewEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CoordMapperArchive.SummaryToViewEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 summary_column_or_row = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_summary_column_or_row());

    // required uint32 view_column_or_row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_view_column_or_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordMapperArchive_SummaryToViewEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordMapperArchive_SummaryToViewEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordMapperArchive_SummaryToViewEntry::GetClassData() const { return &_class_data_; }


void CoordMapperArchive_SummaryToViewEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordMapperArchive_SummaryToViewEntry*>(&to_msg);
  auto& from = static_cast<const CoordMapperArchive_SummaryToViewEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CoordMapperArchive.SummaryToViewEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.summary_column_or_row_ = from._impl_.summary_column_or_row_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.view_column_or_row_ = from._impl_.view_column_or_row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordMapperArchive_SummaryToViewEntry::CopyFrom(const CoordMapperArchive_SummaryToViewEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CoordMapperArchive.SummaryToViewEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordMapperArchive_SummaryToViewEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CoordMapperArchive_SummaryToViewEntry::InternalSwap(CoordMapperArchive_SummaryToViewEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoordMapperArchive_SummaryToViewEntry, _impl_.view_column_or_row_)
      + sizeof(CoordMapperArchive_SummaryToViewEntry::_impl_.view_column_or_row_)
      - PROTOBUF_FIELD_OFFSET(CoordMapperArchive_SummaryToViewEntry, _impl_.summary_column_or_row_)>(
          reinterpret_cast<char*>(&_impl_.summary_column_or_row_),
          reinterpret_cast<char*>(&other->_impl_.summary_column_or_row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordMapperArchive_SummaryToViewEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[21]);
}

// ===================================================================

class CoordMapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CoordMapperArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& table_uid(const CoordMapperArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::IndexSetArchive& summary_rows_set(const CoordMapperArchive* msg);
  static void set_has_summary_rows_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::IndexSetArchive& summary_columns_set(const CoordMapperArchive* msg);
  static void set_has_summary_columns_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::IndexSetArchive& label_rows_set(const CoordMapperArchive* msg);
  static void set_has_label_rows_set(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
CoordMapperArchive::_Internal::table_uid(const CoordMapperArchive* msg) {
  return *msg->_impl_.table_uid_;
}
const ::TSCE::IndexSetArchive&
CoordMapperArchive::_Internal::summary_rows_set(const CoordMapperArchive* msg) {
  return *msg->_impl_.summary_rows_set_;
}
const ::TSCE::IndexSetArchive&
CoordMapperArchive::_Internal::summary_columns_set(const CoordMapperArchive* msg) {
  return *msg->_impl_.summary_columns_set_;
}
const ::TSCE::IndexSetArchive&
CoordMapperArchive::_Internal::label_rows_set(const CoordMapperArchive* msg) {
  return *msg->_impl_.label_rows_set_;
}
void CoordMapperArchive::clear_table_uid() {
  if (_impl_.table_uid_ != nullptr) _impl_.table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CoordMapperArchive::CoordMapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CoordMapperArchive)
}
CoordMapperArchive::CoordMapperArchive(const CoordMapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordMapperArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_to_view_row_map_){from._impl_.base_to_view_row_map_}
    , decltype(_impl_.base_to_view_column_map_){from._impl_.base_to_view_column_map_}
    , decltype(_impl_.summary_to_view_row_map_){from._impl_.summary_to_view_row_map_}
    , decltype(_impl_.summary_to_view_column_map_){from._impl_.summary_to_view_column_map_}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.summary_rows_set_){nullptr}
    , decltype(_impl_.summary_columns_set_){nullptr}
    , decltype(_impl_.label_rows_set_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    _this->_impl_.table_uid_ = new ::TSP::UUID(*from._impl_.table_uid_);
  }
  if (from._internal_has_summary_rows_set()) {
    _this->_impl_.summary_rows_set_ = new ::TSCE::IndexSetArchive(*from._impl_.summary_rows_set_);
  }
  if (from._internal_has_summary_columns_set()) {
    _this->_impl_.summary_columns_set_ = new ::TSCE::IndexSetArchive(*from._impl_.summary_columns_set_);
  }
  if (from._internal_has_label_rows_set()) {
    _this->_impl_.label_rows_set_ = new ::TSCE::IndexSetArchive(*from._impl_.label_rows_set_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.CoordMapperArchive)
}

inline void CoordMapperArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_to_view_row_map_){arena}
    , decltype(_impl_.base_to_view_column_map_){arena}
    , decltype(_impl_.summary_to_view_row_map_){arena}
    , decltype(_impl_.summary_to_view_column_map_){arena}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.summary_rows_set_){nullptr}
    , decltype(_impl_.summary_columns_set_){nullptr}
    , decltype(_impl_.label_rows_set_){nullptr}
  };
}

CoordMapperArchive::~CoordMapperArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CoordMapperArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordMapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.base_to_view_row_map_.~RepeatedPtrField();
  _impl_.base_to_view_column_map_.~RepeatedPtrField();
  _impl_.summary_to_view_row_map_.~RepeatedPtrField();
  _impl_.summary_to_view_column_map_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.table_uid_;
  if (this != internal_default_instance()) delete _impl_.summary_rows_set_;
  if (this != internal_default_instance()) delete _impl_.summary_columns_set_;
  if (this != internal_default_instance()) delete _impl_.label_rows_set_;
}

void CoordMapperArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordMapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CoordMapperArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.base_to_view_row_map_.Clear();
  _impl_.base_to_view_column_map_.Clear();
  _impl_.summary_to_view_row_map_.Clear();
  _impl_.summary_to_view_column_map_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_uid_ != nullptr);
      _impl_.table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.summary_rows_set_ != nullptr);
      _impl_.summary_rows_set_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.summary_columns_set_ != nullptr);
      _impl_.summary_columns_set_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.label_rows_set_ != nullptr);
      _impl_.label_rows_set_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordMapperArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID table_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.IndexSetArchive summary_rows_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_rows_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.IndexSetArchive summary_columns_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_columns_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.IndexSetArchive label_rows_set = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_label_rows_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CoordMapperArchive.BaseToViewEntry base_to_view_row_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_to_view_row_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CoordMapperArchive.BaseToViewEntry base_to_view_column_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_to_view_column_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CoordMapperArchive.SummaryToViewEntry summary_to_view_row_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summary_to_view_row_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CoordMapperArchive.SummaryToViewEntry summary_to_view_column_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_summary_to_view_column_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordMapperArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CoordMapperArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID table_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_uid(this),
        _Internal::table_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.IndexSetArchive summary_rows_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::summary_rows_set(this),
        _Internal::summary_rows_set(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.IndexSetArchive summary_columns_set = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::summary_columns_set(this),
        _Internal::summary_columns_set(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.IndexSetArchive label_rows_set = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::label_rows_set(this),
        _Internal::label_rows_set(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CoordMapperArchive.BaseToViewEntry base_to_view_row_map = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_base_to_view_row_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_base_to_view_row_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CoordMapperArchive.BaseToViewEntry base_to_view_column_map = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_base_to_view_column_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_base_to_view_column_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CoordMapperArchive.SummaryToViewEntry summary_to_view_row_map = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_summary_to_view_row_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_summary_to_view_row_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CoordMapperArchive.SummaryToViewEntry summary_to_view_column_map = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_summary_to_view_column_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_summary_to_view_column_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CoordMapperArchive)
  return target;
}

size_t CoordMapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CoordMapperArchive)
  size_t total_size = 0;

  // required .TSP.UUID table_uid = 1;
  if (_internal_has_table_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CoordMapperArchive.BaseToViewEntry base_to_view_row_map = 5;
  total_size += 1UL * this->_internal_base_to_view_row_map_size();
  for (const auto& msg : this->_impl_.base_to_view_row_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CoordMapperArchive.BaseToViewEntry base_to_view_column_map = 6;
  total_size += 1UL * this->_internal_base_to_view_column_map_size();
  for (const auto& msg : this->_impl_.base_to_view_column_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CoordMapperArchive.SummaryToViewEntry summary_to_view_row_map = 7;
  total_size += 1UL * this->_internal_summary_to_view_row_map_size();
  for (const auto& msg : this->_impl_.summary_to_view_row_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CoordMapperArchive.SummaryToViewEntry summary_to_view_column_map = 8;
  total_size += 1UL * this->_internal_summary_to_view_column_map_size();
  for (const auto& msg : this->_impl_.summary_to_view_column_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSCE.IndexSetArchive summary_rows_set = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.summary_rows_set_);
    }

    // optional .TSCE.IndexSetArchive summary_columns_set = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.summary_columns_set_);
    }

    // optional .TSCE.IndexSetArchive label_rows_set = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.label_rows_set_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordMapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordMapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordMapperArchive::GetClassData() const { return &_class_data_; }


void CoordMapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordMapperArchive*>(&to_msg);
  auto& from = static_cast<const CoordMapperArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CoordMapperArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.base_to_view_row_map_.MergeFrom(from._impl_.base_to_view_row_map_);
  _this->_impl_.base_to_view_column_map_.MergeFrom(from._impl_.base_to_view_column_map_);
  _this->_impl_.summary_to_view_row_map_.MergeFrom(from._impl_.summary_to_view_row_map_);
  _this->_impl_.summary_to_view_column_map_.MergeFrom(from._impl_.summary_to_view_column_map_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_summary_rows_set()->::TSCE::IndexSetArchive::MergeFrom(
          from._internal_summary_rows_set());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_summary_columns_set()->::TSCE::IndexSetArchive::MergeFrom(
          from._internal_summary_columns_set());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_label_rows_set()->::TSCE::IndexSetArchive::MergeFrom(
          from._internal_label_rows_set());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordMapperArchive::CopyFrom(const CoordMapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CoordMapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordMapperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.base_to_view_row_map_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.base_to_view_column_map_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.summary_to_view_row_map_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.summary_to_view_column_map_))
    return false;
  if (_internal_has_table_uid()) {
    if (!_impl_.table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_summary_rows_set()) {
    if (!_impl_.summary_rows_set_->IsInitialized()) return false;
  }
  if (_internal_has_summary_columns_set()) {
    if (!_impl_.summary_columns_set_->IsInitialized()) return false;
  }
  if (_internal_has_label_rows_set()) {
    if (!_impl_.label_rows_set_->IsInitialized()) return false;
  }
  return true;
}

void CoordMapperArchive::InternalSwap(CoordMapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.base_to_view_row_map_.InternalSwap(&other->_impl_.base_to_view_row_map_);
  _impl_.base_to_view_column_map_.InternalSwap(&other->_impl_.base_to_view_column_map_);
  _impl_.summary_to_view_row_map_.InternalSwap(&other->_impl_.summary_to_view_row_map_);
  _impl_.summary_to_view_column_map_.InternalSwap(&other->_impl_.summary_to_view_column_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoordMapperArchive, _impl_.label_rows_set_)
      + sizeof(CoordMapperArchive::_impl_.label_rows_set_)
      - PROTOBUF_FIELD_OFFSET(CoordMapperArchive, _impl_.table_uid_)>(
          reinterpret_cast<char*>(&_impl_.table_uid_),
          reinterpret_cast<char*>(&other->_impl_.table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordMapperArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[22]);
}

// ===================================================================

class ReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ReferenceArchive>()._impl_._has_bits_);
  static void set_has_reference_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellReferenceArchive& cell_reference(const ReferenceArchive* msg);
  static void set_has_cell_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeReferenceArchive& range_reference(const ReferenceArchive* msg);
  static void set_has_range_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSCE::CellReferenceArchive&
ReferenceArchive::_Internal::cell_reference(const ReferenceArchive* msg) {
  return *msg->_impl_.cell_reference_;
}
const ::TSCE::RangeReferenceArchive&
ReferenceArchive::_Internal::range_reference(const ReferenceArchive* msg) {
  return *msg->_impl_.range_reference_;
}
ReferenceArchive::ReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ReferenceArchive)
}
ReferenceArchive::ReferenceArchive(const ReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_reference_){nullptr}
    , decltype(_impl_.range_reference_){nullptr}
    , decltype(_impl_.reference_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_reference()) {
    _this->_impl_.cell_reference_ = new ::TSCE::CellReferenceArchive(*from._impl_.cell_reference_);
  }
  if (from._internal_has_range_reference()) {
    _this->_impl_.range_reference_ = new ::TSCE::RangeReferenceArchive(*from._impl_.range_reference_);
  }
  _this->_impl_.reference_type_ = from._impl_.reference_type_;
  // @@protoc_insertion_point(copy_constructor:TSCE.ReferenceArchive)
}

inline void ReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_reference_){nullptr}
    , decltype(_impl_.range_reference_){nullptr}
    , decltype(_impl_.reference_type_){1}
  };
}

ReferenceArchive::~ReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_reference_;
  if (this != internal_default_instance()) delete _impl_.range_reference_;
}

void ReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cell_reference_ != nullptr);
      _impl_.cell_reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.range_reference_ != nullptr);
      _impl_.range_reference_->Clear();
    }
    _impl_.reference_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::ReferenceArchive_ReferenceType_IsValid(val))) {
            _internal_set_reference_type(static_cast<::TSCE::ReferenceArchive_ReferenceType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellReferenceArchive cell_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeReferenceArchive range_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reference_type(), target);
  }

  // optional .TSCE.CellReferenceArchive cell_reference = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_reference(this),
        _Internal::cell_reference(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::range_reference(this),
        _Internal::range_reference(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ReferenceArchive)
  return target;
}

size_t ReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ReferenceArchive)
  size_t total_size = 0;

  // required .TSCE.ReferenceArchive.ReferenceType reference_type = 1;
  if (_internal_has_reference_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_reference_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.CellReferenceArchive cell_reference = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_reference_);
    }

    // optional .TSCE.RangeReferenceArchive range_reference = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_reference_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReferenceArchive::GetClassData() const { return &_class_data_; }


void ReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReferenceArchive*>(&to_msg);
  auto& from = static_cast<const ReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_reference()->::TSCE::CellReferenceArchive::MergeFrom(
          from._internal_cell_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(
          from._internal_range_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.reference_type_ = from._impl_.reference_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReferenceArchive::CopyFrom(const ReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_reference()) {
    if (!_impl_.cell_reference_->IsInitialized()) return false;
  }
  if (_internal_has_range_reference()) {
    if (!_impl_.range_reference_->IsInitialized()) return false;
  }
  return true;
}

void ReferenceArchive::InternalSwap(ReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReferenceArchive, _impl_.range_reference_)
      + sizeof(ReferenceArchive::_impl_.range_reference_)
      - PROTOBUF_FIELD_OFFSET(ReferenceArchive, _impl_.cell_reference_)>(
          reinterpret_cast<char*>(&_impl_.cell_reference_),
          reinterpret_cast<char*>(&other->_impl_.cell_reference_));
  swap(_impl_.reference_type_, other->_impl_.reference_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[23]);
}

// ===================================================================

class EdgeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<EdgeArchive>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_precedent(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::CFUUIDArchive& owner_id(const EdgeArchive* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

const ::TSP::CFUUIDArchive&
EdgeArchive::_Internal::owner_id(const EdgeArchive* msg) {
  return *msg->_impl_.owner_id_;
}
void EdgeArchive::clear_owner_id() {
  if (_impl_.owner_id_ != nullptr) _impl_.owner_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
EdgeArchive::EdgeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.EdgeArchive)
}
EdgeArchive::EdgeArchive(const EdgeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdgeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}
    , decltype(_impl_.is_precedent_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    _this->_impl_.owner_id_ = new ::TSP::CFUUIDArchive(*from._impl_.owner_id_);
  }
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_precedent_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.is_precedent_));
  // @@protoc_insertion_point(copy_constructor:TSCE.EdgeArchive)
}

inline void EdgeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.row_){0u}
    , decltype(_impl_.is_precedent_){false}
  };
}

EdgeArchive::~EdgeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.EdgeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdgeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.owner_id_;
}

void EdgeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdgeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.EdgeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_id_ != nullptr);
    _impl_.owner_id_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_precedent_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.is_precedent_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_precedent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_precedent(&has_bits);
          _impl_.is_precedent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.CFUUIDArchive owner_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.EdgeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // required bool is_precedent = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_precedent(), target);
  }

  // optional .TSP.CFUUIDArchive owner_id = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::owner_id(this),
        _Internal::owner_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.EdgeArchive)
  return target;
}

size_t EdgeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.EdgeArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  if (_internal_has_is_precedent()) {
    // required bool is_precedent = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t EdgeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.EdgeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());

    // required bool is_precedent = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.CFUUIDArchive owner_id = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdgeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgeArchive::GetClassData() const { return &_class_data_; }


void EdgeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdgeArchive*>(&to_msg);
  auto& from = static_cast<const EdgeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.EdgeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_id()->::TSP::CFUUIDArchive::MergeFrom(
          from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.is_precedent_ = from._impl_.is_precedent_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgeArchive::CopyFrom(const EdgeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.EdgeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EdgeArchive::InternalSwap(EdgeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgeArchive, _impl_.is_precedent_)
      + sizeof(EdgeArchive::_impl_.is_precedent_)
      - PROTOBUF_FIELD_OFFSET(EdgeArchive, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[24]);
}

// ===================================================================

class EdgesArchive::_Internal {
 public:
};

void EdgesArchive::clear_owner_id_for_edge() {
  _impl_.owner_id_for_edge_.Clear();
}
EdgesArchive::EdgesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.EdgesArchive)
}
EdgesArchive::EdgesArchive(const EdgesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdgesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.packed_edge_without_owner_){from._impl_.packed_edge_without_owner_}
    , decltype(_impl_.packed_edge_with_owner_){from._impl_.packed_edge_with_owner_}
    , decltype(_impl_.owner_id_for_edge_){from._impl_.owner_id_for_edge_}
    , decltype(_impl_.internal_owner_id_for_edge_){from._impl_.internal_owner_id_for_edge_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.EdgesArchive)
}

inline void EdgesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.packed_edge_without_owner_){arena}
    , decltype(_impl_.packed_edge_with_owner_){arena}
    , decltype(_impl_.owner_id_for_edge_){arena}
    , decltype(_impl_.internal_owner_id_for_edge_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EdgesArchive::~EdgesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.EdgesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdgesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.packed_edge_without_owner_.~RepeatedField();
  _impl_.packed_edge_with_owner_.~RepeatedField();
  _impl_.owner_id_for_edge_.~RepeatedPtrField();
  _impl_.internal_owner_id_for_edge_.~RepeatedField();
}

void EdgesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdgesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.EdgesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.packed_edge_without_owner_.Clear();
  _impl_.packed_edge_with_owner_.Clear();
  _impl_.owner_id_for_edge_.Clear();
  _impl_.internal_owner_id_for_edge_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 packed_edge_without_owner = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packed_edge_without_owner(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_edge_without_owner(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 packed_edge_with_owner = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_packed_edge_with_owner(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_packed_edge_with_owner(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.CFUUIDArchive owner_id_for_edge = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_owner_id_for_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 internal_owner_id_for_edge = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<96>(ptr));
        } else if (static_cast<uint8_t>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_internal_owner_id_for_edge(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.EdgesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 packed_edge_without_owner = 9;
  for (int i = 0, n = this->_internal_packed_edge_without_owner_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_packed_edge_without_owner(i), target);
  }

  // repeated uint32 packed_edge_with_owner = 10;
  for (int i = 0, n = this->_internal_packed_edge_with_owner_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_packed_edge_with_owner(i), target);
  }

  // repeated .TSP.CFUUIDArchive owner_id_for_edge = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_owner_id_for_edge_size()); i < n; i++) {
    const auto& repfield = this->_internal_owner_id_for_edge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 internal_owner_id_for_edge = 12;
  for (int i = 0, n = this->_internal_internal_owner_id_for_edge_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_internal_owner_id_for_edge(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.EdgesArchive)
  return target;
}

size_t EdgesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.EdgesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 packed_edge_without_owner = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.packed_edge_without_owner_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_packed_edge_without_owner_size());
    total_size += data_size;
  }

  // repeated uint32 packed_edge_with_owner = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.packed_edge_with_owner_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_packed_edge_with_owner_size());
    total_size += data_size;
  }

  // repeated .TSP.CFUUIDArchive owner_id_for_edge = 11;
  total_size += 1UL * this->_internal_owner_id_for_edge_size();
  for (const auto& msg : this->_impl_.owner_id_for_edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 internal_owner_id_for_edge = 12;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.internal_owner_id_for_edge_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_internal_owner_id_for_edge_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdgesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgesArchive::GetClassData() const { return &_class_data_; }


void EdgesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdgesArchive*>(&to_msg);
  auto& from = static_cast<const EdgesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.EdgesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.packed_edge_without_owner_.MergeFrom(from._impl_.packed_edge_without_owner_);
  _this->_impl_.packed_edge_with_owner_.MergeFrom(from._impl_.packed_edge_with_owner_);
  _this->_impl_.owner_id_for_edge_.MergeFrom(from._impl_.owner_id_for_edge_);
  _this->_impl_.internal_owner_id_for_edge_.MergeFrom(from._impl_.internal_owner_id_for_edge_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgesArchive::CopyFrom(const EdgesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.EdgesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgesArchive::IsInitialized() const {
  return true;
}

void EdgesArchive::InternalSwap(EdgesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.packed_edge_without_owner_.InternalSwap(&other->_impl_.packed_edge_without_owner_);
  _impl_.packed_edge_with_owner_.InternalSwap(&other->_impl_.packed_edge_with_owner_);
  _impl_.owner_id_for_edge_.InternalSwap(&other->_impl_.owner_id_for_edge_);
  _impl_.internal_owner_id_for_edge_.InternalSwap(&other->_impl_.internal_owner_id_for_edge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[25]);
}

// ===================================================================

class ExpandedEdgesArchive::_Internal {
 public:
};

ExpandedEdgesArchive::ExpandedEdgesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ExpandedEdgesArchive)
}
ExpandedEdgesArchive::ExpandedEdgesArchive(const ExpandedEdgesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpandedEdgesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_without_owner_rows_){from._impl_.edge_without_owner_rows_}
    , decltype(_impl_.edge_without_owner_columns_){from._impl_.edge_without_owner_columns_}
    , decltype(_impl_.edge_with_owner_rows_){from._impl_.edge_with_owner_rows_}
    , decltype(_impl_.edge_with_owner_columns_){from._impl_.edge_with_owner_columns_}
    , decltype(_impl_.internal_owner_id_for_edge_){from._impl_.internal_owner_id_for_edge_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.ExpandedEdgesArchive)
}

inline void ExpandedEdgesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.edge_without_owner_rows_){arena}
    , decltype(_impl_.edge_without_owner_columns_){arena}
    , decltype(_impl_.edge_with_owner_rows_){arena}
    , decltype(_impl_.edge_with_owner_columns_){arena}
    , decltype(_impl_.internal_owner_id_for_edge_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExpandedEdgesArchive::~ExpandedEdgesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ExpandedEdgesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpandedEdgesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edge_without_owner_rows_.~RepeatedField();
  _impl_.edge_without_owner_columns_.~RepeatedField();
  _impl_.edge_with_owner_rows_.~RepeatedField();
  _impl_.edge_with_owner_columns_.~RepeatedField();
  _impl_.internal_owner_id_for_edge_.~RepeatedField();
}

void ExpandedEdgesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpandedEdgesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ExpandedEdgesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edge_without_owner_rows_.Clear();
  _impl_.edge_without_owner_columns_.Clear();
  _impl_.edge_with_owner_rows_.Clear();
  _impl_.edge_with_owner_columns_.Clear();
  _impl_.internal_owner_id_for_edge_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedEdgesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 edge_without_owner_rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_edge_without_owner_rows(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_edge_without_owner_rows(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 edge_without_owner_columns = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_edge_without_owner_columns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_edge_without_owner_columns(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 edge_with_owner_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_edge_with_owner_rows(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_edge_with_owner_rows(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 edge_with_owner_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_edge_with_owner_columns(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_edge_with_owner_columns(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 internal_owner_id_for_edge = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_internal_owner_id_for_edge(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_internal_owner_id_for_edge(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpandedEdgesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ExpandedEdgesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 edge_without_owner_rows = 1;
  for (int i = 0, n = this->_internal_edge_without_owner_rows_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_edge_without_owner_rows(i), target);
  }

  // repeated uint32 edge_without_owner_columns = 2;
  for (int i = 0, n = this->_internal_edge_without_owner_columns_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_edge_without_owner_columns(i), target);
  }

  // repeated uint32 edge_with_owner_rows = 3;
  for (int i = 0, n = this->_internal_edge_with_owner_rows_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_edge_with_owner_rows(i), target);
  }

  // repeated uint32 edge_with_owner_columns = 4;
  for (int i = 0, n = this->_internal_edge_with_owner_columns_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_edge_with_owner_columns(i), target);
  }

  // repeated uint32 internal_owner_id_for_edge = 5;
  for (int i = 0, n = this->_internal_internal_owner_id_for_edge_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_internal_owner_id_for_edge(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ExpandedEdgesArchive)
  return target;
}

size_t ExpandedEdgesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ExpandedEdgesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 edge_without_owner_rows = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.edge_without_owner_rows_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_edge_without_owner_rows_size());
    total_size += data_size;
  }

  // repeated uint32 edge_without_owner_columns = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.edge_without_owner_columns_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_edge_without_owner_columns_size());
    total_size += data_size;
  }

  // repeated uint32 edge_with_owner_rows = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.edge_with_owner_rows_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_edge_with_owner_rows_size());
    total_size += data_size;
  }

  // repeated uint32 edge_with_owner_columns = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.edge_with_owner_columns_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_edge_with_owner_columns_size());
    total_size += data_size;
  }

  // repeated uint32 internal_owner_id_for_edge = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.internal_owner_id_for_edge_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_internal_owner_id_for_edge_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandedEdgesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpandedEdgesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandedEdgesArchive::GetClassData() const { return &_class_data_; }


void ExpandedEdgesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpandedEdgesArchive*>(&to_msg);
  auto& from = static_cast<const ExpandedEdgesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ExpandedEdgesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edge_without_owner_rows_.MergeFrom(from._impl_.edge_without_owner_rows_);
  _this->_impl_.edge_without_owner_columns_.MergeFrom(from._impl_.edge_without_owner_columns_);
  _this->_impl_.edge_with_owner_rows_.MergeFrom(from._impl_.edge_with_owner_rows_);
  _this->_impl_.edge_with_owner_columns_.MergeFrom(from._impl_.edge_with_owner_columns_);
  _this->_impl_.internal_owner_id_for_edge_.MergeFrom(from._impl_.internal_owner_id_for_edge_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandedEdgesArchive::CopyFrom(const ExpandedEdgesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ExpandedEdgesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedEdgesArchive::IsInitialized() const {
  return true;
}

void ExpandedEdgesArchive::InternalSwap(ExpandedEdgesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.edge_without_owner_rows_.InternalSwap(&other->_impl_.edge_without_owner_rows_);
  _impl_.edge_without_owner_columns_.InternalSwap(&other->_impl_.edge_without_owner_columns_);
  _impl_.edge_with_owner_rows_.InternalSwap(&other->_impl_.edge_with_owner_rows_);
  _impl_.edge_with_owner_columns_.InternalSwap(&other->_impl_.edge_with_owner_columns_);
  _impl_.internal_owner_id_for_edge_.InternalSwap(&other->_impl_.internal_owner_id_for_edge_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedEdgesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[26]);
}

// ===================================================================

class CellRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRecordArchive>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dirty_self_plus_precedents_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_in_a_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_contains_a_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_has_calculated_precedents(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_calculate_precedents_on_next_recalc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_translate_for_excel_import_on_next_recalc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::EdgesArchive& edges(const CellRecordArchive* msg);
  static void set_has_edges(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSCE::EdgesArchive&
CellRecordArchive::_Internal::edges(const CellRecordArchive* msg) {
  return *msg->_impl_.edges_;
}
CellRecordArchive::CellRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRecordArchive)
}
CellRecordArchive::CellRecordArchive(const CellRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellRecordArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.edge_){from._impl_.edge_}
    , decltype(_impl_.edges_){nullptr}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}
    , decltype(_impl_.dirty_self_plus_precedents_count_){}
    , decltype(_impl_.is_in_a_cycle_){}
    , decltype(_impl_.has_calculated_precedents_){}
    , decltype(_impl_.calculate_precedents_on_next_recalc_){}
    , decltype(_impl_.translate_for_excel_import_on_next_recalc_){}
    , decltype(_impl_.contains_a_formula_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_edges()) {
    _this->_impl_.edges_ = new ::TSCE::EdgesArchive(*from._impl_.edges_);
  }
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.contains_a_formula_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.contains_a_formula_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRecordArchive)
}

inline void CellRecordArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.edge_){arena}
    , decltype(_impl_.edges_){nullptr}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.row_){0u}
    , decltype(_impl_.dirty_self_plus_precedents_count_){uint64_t{0u}}
    , decltype(_impl_.is_in_a_cycle_){false}
    , decltype(_impl_.has_calculated_precedents_){false}
    , decltype(_impl_.calculate_precedents_on_next_recalc_){false}
    , decltype(_impl_.translate_for_excel_import_on_next_recalc_){false}
    , decltype(_impl_.contains_a_formula_){true}
  };
}

CellRecordArchive::~CellRecordArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellRecordArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.edge_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.edges_;
}

void CellRecordArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRecordArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.edge_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.edges_ != nullptr);
    _impl_.edges_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.translate_for_excel_import_on_next_recalc_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.translate_for_excel_import_on_next_recalc_));
  }
  _impl_.contains_a_formula_ = true;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRecordArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_dirty_self_plus_precedents_count(&has_bits);
          _impl_.dirty_self_plus_precedents_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_in_a_cycle = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_in_a_cycle(&has_bits);
          _impl_.is_in_a_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool contains_a_formula = 6 [default = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_contains_a_formula(&has_bits);
          _impl_.contains_a_formula_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_calculated_precedents = 7 [default = false];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_has_calculated_precedents(&has_bits);
          _impl_.has_calculated_precedents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_calculate_precedents_on_next_recalc(&has_bits);
          _impl_.calculate_precedents_on_next_recalc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.EdgesArchive edges = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_edges(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_translate_for_excel_import_on_next_recalc(&has_bits);
          _impl_.translate_for_excel_import_on_next_recalc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellRecordArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRecordArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dirty_self_plus_precedents_count(), target);
  }

  // optional bool is_in_a_cycle = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_in_a_cycle(), target);
  }

  // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_edge_size()); i < n; i++) {
    const auto& repfield = this->_internal_edge(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool contains_a_formula = 6 [default = true];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_contains_a_formula(), target);
  }

  // optional bool has_calculated_precedents = 7 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_has_calculated_precedents(), target);
  }

  // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_calculate_precedents_on_next_recalc(), target);
  }

  // optional .TSCE.EdgesArchive edges = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::edges(this),
        _Internal::edges(this).GetCachedSize(), target, stream);
  }

  // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_translate_for_excel_import_on_next_recalc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRecordArchive)
  return target;
}

size_t CellRecordArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellRecordArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  return total_size;
}
size_t CellRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRecordArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.EdgeArchive edge = 5 [deprecated = true];
  total_size += 1UL * this->_internal_edge_size();
  for (const auto& msg : this->_impl_.edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCE.EdgesArchive edges = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.edges_);
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dirty_self_plus_precedents_count());
    }

    // optional bool is_in_a_cycle = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool has_calculated_precedents = 7 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool calculate_precedents_on_next_recalc = 8 [default = false, deprecated = true];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool translate_for_excel_import_on_next_recalc = 10 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool contains_a_formula = 6 [default = true];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRecordArchive::GetClassData() const { return &_class_data_; }


void CellRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellRecordArchive*>(&to_msg);
  auto& from = static_cast<const CellRecordArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRecordArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.edge_.MergeFrom(from._impl_.edge_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_edges()->::TSCE::EdgesArchive::MergeFrom(
          from._internal_edges());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dirty_self_plus_precedents_count_ = from._impl_.dirty_self_plus_precedents_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_in_a_cycle_ = from._impl_.is_in_a_cycle_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.has_calculated_precedents_ = from._impl_.has_calculated_precedents_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.calculate_precedents_on_next_recalc_ = from._impl_.calculate_precedents_on_next_recalc_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.translate_for_excel_import_on_next_recalc_ = from._impl_.translate_for_excel_import_on_next_recalc_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_contains_a_formula(from._internal_contains_a_formula());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRecordArchive::CopyFrom(const CellRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRecordArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.edge_))
    return false;
  return true;
}

void CellRecordArchive::InternalSwap(CellRecordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.edge_.InternalSwap(&other->_impl_.edge_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRecordArchive, _impl_.translate_for_excel_import_on_next_recalc_)
      + sizeof(CellRecordArchive::_impl_.translate_for_excel_import_on_next_recalc_)
      - PROTOBUF_FIELD_OFFSET(CellRecordArchive, _impl_.edges_)>(
          reinterpret_cast<char*>(&_impl_.edges_),
          reinterpret_cast<char*>(&other->_impl_.edges_));
  swap(_impl_.contains_a_formula_, other->_impl_.contains_a_formula_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRecordArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[27]);
}

// ===================================================================

class CellDependenciesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellDependenciesArchive>()._impl_._has_bits_);
  static void set_has_num_dirty_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CellDependenciesArchive::CellDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellDependenciesArchive)
}
CellDependenciesArchive::CellDependenciesArchive(const CellDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellDependenciesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_record_){from._impl_.cell_record_}
    , decltype(_impl_.num_dirty_cells_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.num_dirty_cells_ = from._impl_.num_dirty_cells_;
  // @@protoc_insertion_point(copy_constructor:TSCE.CellDependenciesArchive)
}

inline void CellDependenciesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_record_){arena}
    , decltype(_impl_.num_dirty_cells_){0u}
  };
}

CellDependenciesArchive::~CellDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellDependenciesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_record_.~RepeatedPtrField();
}

void CellDependenciesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellDependenciesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_record_.Clear();
  _impl_.num_dirty_cells_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDependenciesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellRecordArchive cell_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 num_dirty_cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_dirty_cells(&has_bits);
          _impl_.num_dirty_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellDependenciesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellDependenciesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordArchive cell_record = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_record_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_record(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 num_dirty_cells = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_dirty_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellDependenciesArchive)
  return target;
}

size_t CellDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellDependenciesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordArchive cell_record = 1;
  total_size += 1UL * this->_internal_cell_record_size();
  for (const auto& msg : this->_impl_.cell_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 num_dirty_cells = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_dirty_cells());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDependenciesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellDependenciesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDependenciesArchive::GetClassData() const { return &_class_data_; }


void CellDependenciesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellDependenciesArchive*>(&to_msg);
  auto& from = static_cast<const CellDependenciesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_record_.MergeFrom(from._impl_.cell_record_);
  if (from._internal_has_num_dirty_cells()) {
    _this->_internal_set_num_dirty_cells(from._internal_num_dirty_cells());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDependenciesArchive::CopyFrom(const CellDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_record_))
    return false;
  return true;
}

void CellDependenciesArchive::InternalSwap(CellDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_record_.InternalSwap(&other->_impl_.cell_record_);
  swap(_impl_.num_dirty_cells_, other->_impl_.num_dirty_cells_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDependenciesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[28]);
}

// ===================================================================

class CellRecordExpandedArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRecordExpandedArchive>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dirty_self_plus_precedents_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_in_a_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_has_calculated_precedents(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::ExpandedEdgesArchive& expanded_edges(const CellRecordExpandedArchive* msg);
  static void set_has_expanded_edges(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSCE::ExpandedEdgesArchive&
CellRecordExpandedArchive::_Internal::expanded_edges(const CellRecordExpandedArchive* msg) {
  return *msg->_impl_.expanded_edges_;
}
CellRecordExpandedArchive::CellRecordExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRecordExpandedArchive)
}
CellRecordExpandedArchive::CellRecordExpandedArchive(const CellRecordExpandedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellRecordExpandedArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expanded_edges_){nullptr}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}
    , decltype(_impl_.dirty_self_plus_precedents_count_){}
    , decltype(_impl_.is_in_a_cycle_){}
    , decltype(_impl_.has_calculated_precedents_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expanded_edges()) {
    _this->_impl_.expanded_edges_ = new ::TSCE::ExpandedEdgesArchive(*from._impl_.expanded_edges_);
  }
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_calculated_precedents_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.has_calculated_precedents_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRecordExpandedArchive)
}

inline void CellRecordExpandedArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.expanded_edges_){nullptr}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.row_){0u}
    , decltype(_impl_.dirty_self_plus_precedents_count_){uint64_t{0u}}
    , decltype(_impl_.is_in_a_cycle_){false}
    , decltype(_impl_.has_calculated_precedents_){false}
  };
}

CellRecordExpandedArchive::~CellRecordExpandedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellRecordExpandedArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellRecordExpandedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.expanded_edges_;
}

void CellRecordExpandedArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellRecordExpandedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRecordExpandedArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.expanded_edges_ != nullptr);
    _impl_.expanded_edges_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.has_calculated_precedents_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.has_calculated_precedents_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRecordExpandedArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_dirty_self_plus_precedents_count(&has_bits);
          _impl_.dirty_self_plus_precedents_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_in_a_cycle = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_is_in_a_cycle(&has_bits);
          _impl_.is_in_a_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_calculated_precedents = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_has_calculated_precedents(&has_bits);
          _impl_.has_calculated_precedents_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ExpandedEdgesArchive expanded_edges = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_expanded_edges(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellRecordExpandedArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRecordExpandedArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_dirty_self_plus_precedents_count(), target);
  }

  // optional bool is_in_a_cycle = 4 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_is_in_a_cycle(), target);
  }

  // optional bool has_calculated_precedents = 5 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_has_calculated_precedents(), target);
  }

  // optional .TSCE.ExpandedEdgesArchive expanded_edges = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::expanded_edges(this),
        _Internal::expanded_edges(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRecordExpandedArchive)
  return target;
}

size_t CellRecordExpandedArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellRecordExpandedArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  return total_size;
}
size_t CellRecordExpandedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRecordExpandedArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.ExpandedEdgesArchive expanded_edges = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.expanded_edges_);
  }

  if (cached_has_bits & 0x00000038u) {
    // optional uint64 dirty_self_plus_precedents_count = 3 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_dirty_self_plus_precedents_count());
    }

    // optional bool is_in_a_cycle = 4 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool has_calculated_precedents = 5 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRecordExpandedArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellRecordExpandedArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRecordExpandedArchive::GetClassData() const { return &_class_data_; }


void CellRecordExpandedArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellRecordExpandedArchive*>(&to_msg);
  auto& from = static_cast<const CellRecordExpandedArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRecordExpandedArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_expanded_edges()->::TSCE::ExpandedEdgesArchive::MergeFrom(
          from._internal_expanded_edges());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dirty_self_plus_precedents_count_ = from._impl_.dirty_self_plus_precedents_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_in_a_cycle_ = from._impl_.is_in_a_cycle_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.has_calculated_precedents_ = from._impl_.has_calculated_precedents_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRecordExpandedArchive::CopyFrom(const CellRecordExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRecordExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRecordExpandedArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void CellRecordExpandedArchive::InternalSwap(CellRecordExpandedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRecordExpandedArchive, _impl_.has_calculated_precedents_)
      + sizeof(CellRecordExpandedArchive::_impl_.has_calculated_precedents_)
      - PROTOBUF_FIELD_OFFSET(CellRecordExpandedArchive, _impl_.expanded_edges_)>(
          reinterpret_cast<char*>(&_impl_.expanded_edges_),
          reinterpret_cast<char*>(&other->_impl_.expanded_edges_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRecordExpandedArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[29]);
}

// ===================================================================

class CellDependenciesExpandedArchive::_Internal {
 public:
};

CellDependenciesExpandedArchive::CellDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellDependenciesExpandedArchive)
}
CellDependenciesExpandedArchive::CellDependenciesExpandedArchive(const CellDependenciesExpandedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellDependenciesExpandedArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_record_){from._impl_.cell_record_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellDependenciesExpandedArchive)
}

inline void CellDependenciesExpandedArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_record_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CellDependenciesExpandedArchive::~CellDependenciesExpandedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellDependenciesExpandedArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellDependenciesExpandedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_record_.~RepeatedPtrField();
}

void CellDependenciesExpandedArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellDependenciesExpandedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellDependenciesExpandedArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_record_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDependenciesExpandedArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellRecordExpandedArchive cell_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellDependenciesExpandedArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellDependenciesExpandedArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordExpandedArchive cell_record = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_record_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_record(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellDependenciesExpandedArchive)
  return target;
}

size_t CellDependenciesExpandedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellDependenciesExpandedArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordExpandedArchive cell_record = 1;
  total_size += 1UL * this->_internal_cell_record_size();
  for (const auto& msg : this->_impl_.cell_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDependenciesExpandedArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellDependenciesExpandedArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDependenciesExpandedArchive::GetClassData() const { return &_class_data_; }


void CellDependenciesExpandedArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellDependenciesExpandedArchive*>(&to_msg);
  auto& from = static_cast<const CellDependenciesExpandedArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_record_.MergeFrom(from._impl_.cell_record_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDependenciesExpandedArchive::CopyFrom(const CellDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDependenciesExpandedArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_record_))
    return false;
  return true;
}

void CellDependenciesExpandedArchive::InternalSwap(CellDependenciesExpandedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_record_.InternalSwap(&other->_impl_.cell_record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDependenciesExpandedArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[30]);
}

// ===================================================================

class CellRecordTileArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellRecordTileArchive>()._impl_._has_bits_);
  static void set_has_internal_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tile_column_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tile_row_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

CellRecordTileArchive::CellRecordTileArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellRecordTileArchive)
}
CellRecordTileArchive::CellRecordTileArchive(const CellRecordTileArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellRecordTileArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_records_){from._impl_.cell_records_}
    , decltype(_impl_.internal_owner_id_){}
    , decltype(_impl_.tile_column_begin_){}
    , decltype(_impl_.tile_row_begin_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.internal_owner_id_, &from._impl_.internal_owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tile_row_begin_) -
    reinterpret_cast<char*>(&_impl_.internal_owner_id_)) + sizeof(_impl_.tile_row_begin_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellRecordTileArchive)
}

inline void CellRecordTileArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_records_){arena}
    , decltype(_impl_.internal_owner_id_){0u}
    , decltype(_impl_.tile_column_begin_){0u}
    , decltype(_impl_.tile_row_begin_){0u}
  };
}

CellRecordTileArchive::~CellRecordTileArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellRecordTileArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellRecordTileArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_records_.~RepeatedPtrField();
}

void CellRecordTileArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellRecordTileArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellRecordTileArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_records_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.internal_owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.tile_row_begin_) -
        reinterpret_cast<char*>(&_impl_.internal_owner_id_)) + sizeof(_impl_.tile_row_begin_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellRecordTileArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 internal_owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_internal_owner_id(&has_bits);
          _impl_.internal_owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 tile_column_begin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tile_column_begin(&has_bits);
          _impl_.tile_column_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 tile_row_begin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tile_row_begin(&has_bits);
          _impl_.tile_row_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellRecordExpandedArchive cell_records = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_records(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellRecordTileArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellRecordTileArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 internal_owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_internal_owner_id(), target);
  }

  // required uint32 tile_column_begin = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tile_column_begin(), target);
  }

  // required uint32 tile_row_begin = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tile_row_begin(), target);
  }

  // repeated .TSCE.CellRecordExpandedArchive cell_records = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_records_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_records(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellRecordTileArchive)
  return target;
}

size_t CellRecordTileArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellRecordTileArchive)
  size_t total_size = 0;

  if (_internal_has_internal_owner_id()) {
    // required uint32 internal_owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_internal_owner_id());
  }

  if (_internal_has_tile_column_begin()) {
    // required uint32 tile_column_begin = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tile_column_begin());
  }

  if (_internal_has_tile_row_begin()) {
    // required uint32 tile_row_begin = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tile_row_begin());
  }

  return total_size;
}
size_t CellRecordTileArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellRecordTileArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 internal_owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_internal_owner_id());

    // required uint32 tile_column_begin = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tile_column_begin());

    // required uint32 tile_row_begin = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tile_row_begin());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellRecordExpandedArchive cell_records = 4;
  total_size += 1UL * this->_internal_cell_records_size();
  for (const auto& msg : this->_impl_.cell_records_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellRecordTileArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellRecordTileArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellRecordTileArchive::GetClassData() const { return &_class_data_; }


void CellRecordTileArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellRecordTileArchive*>(&to_msg);
  auto& from = static_cast<const CellRecordTileArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellRecordTileArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_records_.MergeFrom(from._impl_.cell_records_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.internal_owner_id_ = from._impl_.internal_owner_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tile_column_begin_ = from._impl_.tile_column_begin_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tile_row_begin_ = from._impl_.tile_row_begin_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellRecordTileArchive::CopyFrom(const CellRecordTileArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellRecordTileArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellRecordTileArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_records_))
    return false;
  return true;
}

void CellRecordTileArchive::InternalSwap(CellRecordTileArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_records_.InternalSwap(&other->_impl_.cell_records_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellRecordTileArchive, _impl_.tile_row_begin_)
      + sizeof(CellRecordTileArchive::_impl_.tile_row_begin_)
      - PROTOBUF_FIELD_OFFSET(CellRecordTileArchive, _impl_.internal_owner_id_)>(
          reinterpret_cast<char*>(&_impl_.internal_owner_id_),
          reinterpret_cast<char*>(&other->_impl_.internal_owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellRecordTileArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[31]);
}

// ===================================================================

class CellDependenciesTiledArchive::_Internal {
 public:
};

void CellDependenciesTiledArchive::clear_cell_record_tiles() {
  _impl_.cell_record_tiles_.Clear();
}
CellDependenciesTiledArchive::CellDependenciesTiledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellDependenciesTiledArchive)
}
CellDependenciesTiledArchive::CellDependenciesTiledArchive(const CellDependenciesTiledArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellDependenciesTiledArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_record_tiles_){from._impl_.cell_record_tiles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellDependenciesTiledArchive)
}

inline void CellDependenciesTiledArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_record_tiles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CellDependenciesTiledArchive::~CellDependenciesTiledArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellDependenciesTiledArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellDependenciesTiledArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_record_tiles_.~RepeatedPtrField();
}

void CellDependenciesTiledArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellDependenciesTiledArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellDependenciesTiledArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_record_tiles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellDependenciesTiledArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference cell_record_tiles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_record_tiles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellDependenciesTiledArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellDependenciesTiledArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_record_tiles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_record_tiles_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_record_tiles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellDependenciesTiledArchive)
  return target;
}

size_t CellDependenciesTiledArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellDependenciesTiledArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference cell_record_tiles = 1;
  total_size += 1UL * this->_internal_cell_record_tiles_size();
  for (const auto& msg : this->_impl_.cell_record_tiles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellDependenciesTiledArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellDependenciesTiledArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellDependenciesTiledArchive::GetClassData() const { return &_class_data_; }


void CellDependenciesTiledArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellDependenciesTiledArchive*>(&to_msg);
  auto& from = static_cast<const CellDependenciesTiledArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellDependenciesTiledArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_record_tiles_.MergeFrom(from._impl_.cell_record_tiles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellDependenciesTiledArchive::CopyFrom(const CellDependenciesTiledArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellDependenciesTiledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellDependenciesTiledArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_record_tiles_))
    return false;
  return true;
}

void CellDependenciesTiledArchive::InternalSwap(CellDependenciesTiledArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_record_tiles_.InternalSwap(&other->_impl_.cell_record_tiles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellDependenciesTiledArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[32]);
}

// ===================================================================

class VolatileDependenciesArchive::_Internal {
 public:
};

VolatileDependenciesArchive::VolatileDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.VolatileDependenciesArchive)
}
VolatileDependenciesArchive::VolatileDependenciesArchive(const VolatileDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VolatileDependenciesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.volatile_time_cell_column_){from._impl_.volatile_time_cell_column_}
    , decltype(_impl_.volatile_time_cell_row_){from._impl_.volatile_time_cell_row_}
    , decltype(_impl_.volatile_random_cell_column_){from._impl_.volatile_random_cell_column_}
    , decltype(_impl_.volatile_random_cell_row_){from._impl_.volatile_random_cell_row_}
    , decltype(_impl_.volatile_location_cell_column_){from._impl_.volatile_location_cell_column_}
    , decltype(_impl_.volatile_location_cell_row_){from._impl_.volatile_location_cell_row_}
    , decltype(_impl_.volatile_compass_cell_column_){from._impl_.volatile_compass_cell_column_}
    , decltype(_impl_.volatile_compass_cell_row_){from._impl_.volatile_compass_cell_row_}
    , decltype(_impl_.calculated_dependency_cell_column_){from._impl_.calculated_dependency_cell_column_}
    , decltype(_impl_.calculated_dependency_cell_row_){from._impl_.calculated_dependency_cell_row_}
    , decltype(_impl_.volatile_geometry_cell_){from._impl_.volatile_geometry_cell_}
    , decltype(_impl_.volatile_geometry_cell_reference_){from._impl_.volatile_geometry_cell_reference_}
    , decltype(_impl_.volatile_locale_cell_column_){from._impl_.volatile_locale_cell_column_}
    , decltype(_impl_.volatile_locale_cell_row_){from._impl_.volatile_locale_cell_row_}
    , decltype(_impl_.volatile_sheet_table_name_cell_column_){from._impl_.volatile_sheet_table_name_cell_column_}
    , decltype(_impl_.volatile_sheet_table_name_cell_row_){from._impl_.volatile_sheet_table_name_cell_row_}
    , decltype(_impl_.volatile_remote_data_cell_column_){from._impl_.volatile_remote_data_cell_column_}
    , decltype(_impl_.volatile_remote_data_cell_row_){from._impl_.volatile_remote_data_cell_row_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.VolatileDependenciesArchive)
}

inline void VolatileDependenciesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.volatile_time_cell_column_){arena}
    , decltype(_impl_.volatile_time_cell_row_){arena}
    , decltype(_impl_.volatile_random_cell_column_){arena}
    , decltype(_impl_.volatile_random_cell_row_){arena}
    , decltype(_impl_.volatile_location_cell_column_){arena}
    , decltype(_impl_.volatile_location_cell_row_){arena}
    , decltype(_impl_.volatile_compass_cell_column_){arena}
    , decltype(_impl_.volatile_compass_cell_row_){arena}
    , decltype(_impl_.calculated_dependency_cell_column_){arena}
    , decltype(_impl_.calculated_dependency_cell_row_){arena}
    , decltype(_impl_.volatile_geometry_cell_){arena}
    , decltype(_impl_.volatile_geometry_cell_reference_){arena}
    , decltype(_impl_.volatile_locale_cell_column_){arena}
    , decltype(_impl_.volatile_locale_cell_row_){arena}
    , decltype(_impl_.volatile_sheet_table_name_cell_column_){arena}
    , decltype(_impl_.volatile_sheet_table_name_cell_row_){arena}
    , decltype(_impl_.volatile_remote_data_cell_column_){arena}
    , decltype(_impl_.volatile_remote_data_cell_row_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VolatileDependenciesArchive::~VolatileDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.VolatileDependenciesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VolatileDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.volatile_time_cell_column_.~RepeatedField();
  _impl_.volatile_time_cell_row_.~RepeatedField();
  _impl_.volatile_random_cell_column_.~RepeatedField();
  _impl_.volatile_random_cell_row_.~RepeatedField();
  _impl_.volatile_location_cell_column_.~RepeatedField();
  _impl_.volatile_location_cell_row_.~RepeatedField();
  _impl_.volatile_compass_cell_column_.~RepeatedField();
  _impl_.volatile_compass_cell_row_.~RepeatedField();
  _impl_.calculated_dependency_cell_column_.~RepeatedField();
  _impl_.calculated_dependency_cell_row_.~RepeatedField();
  _impl_.volatile_geometry_cell_.~RepeatedPtrField();
  _impl_.volatile_geometry_cell_reference_.~RepeatedPtrField();
  _impl_.volatile_locale_cell_column_.~RepeatedField();
  _impl_.volatile_locale_cell_row_.~RepeatedField();
  _impl_.volatile_sheet_table_name_cell_column_.~RepeatedField();
  _impl_.volatile_sheet_table_name_cell_row_.~RepeatedField();
  _impl_.volatile_remote_data_cell_column_.~RepeatedField();
  _impl_.volatile_remote_data_cell_row_.~RepeatedField();
}

void VolatileDependenciesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VolatileDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.VolatileDependenciesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.volatile_time_cell_column_.Clear();
  _impl_.volatile_time_cell_row_.Clear();
  _impl_.volatile_random_cell_column_.Clear();
  _impl_.volatile_random_cell_row_.Clear();
  _impl_.volatile_location_cell_column_.Clear();
  _impl_.volatile_location_cell_row_.Clear();
  _impl_.volatile_compass_cell_column_.Clear();
  _impl_.volatile_compass_cell_row_.Clear();
  _impl_.calculated_dependency_cell_column_.Clear();
  _impl_.calculated_dependency_cell_row_.Clear();
  _impl_.volatile_geometry_cell_.Clear();
  _impl_.volatile_geometry_cell_reference_.Clear();
  _impl_.volatile_locale_cell_column_.Clear();
  _impl_.volatile_locale_cell_row_.Clear();
  _impl_.volatile_sheet_table_name_cell_column_.Clear();
  _impl_.volatile_sheet_table_name_cell_row_.Clear();
  _impl_.volatile_remote_data_cell_column_.Clear();
  _impl_.volatile_remote_data_cell_row_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolatileDependenciesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 volatile_time_cell_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_time_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_time_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_time_cell_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_time_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_time_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_random_cell_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_random_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_random_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_random_cell_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_random_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_random_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_location_cell_column = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_location_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_location_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_location_cell_row = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_location_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_location_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_compass_cell_column = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_compass_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_compass_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_compass_cell_row = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_compass_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<uint8_t>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_compass_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 calculated_dependency_cell_column = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_calculated_dependency_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<72>(ptr));
        } else if (static_cast<uint8_t>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_calculated_dependency_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 calculated_dependency_cell_row = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_calculated_dependency_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<uint8_t>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_calculated_dependency_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volatile_geometry_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_volatile_geometry_cell_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_locale_cell_column = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_volatile_locale_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<120>(ptr));
        } else if (static_cast<uint8_t>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_locale_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_locale_cell_row = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_volatile_locale_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<128>(ptr));
        } else if (static_cast<uint8_t>(tag) == 130) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_locale_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_sheet_table_name_cell_column = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_volatile_sheet_table_name_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<136>(ptr));
        } else if (static_cast<uint8_t>(tag) == 138) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_sheet_table_name_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_sheet_table_name_cell_row = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_volatile_sheet_table_name_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<uint8_t>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_sheet_table_name_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_remote_data_cell_column = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_volatile_remote_data_cell_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<152>(ptr));
        } else if (static_cast<uint8_t>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_remote_data_cell_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 volatile_remote_data_cell_row = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_volatile_remote_data_cell_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<uint8_t>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_volatile_remote_data_cell_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VolatileDependenciesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.VolatileDependenciesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 volatile_time_cell_column = 1;
  for (int i = 0, n = this->_internal_volatile_time_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_volatile_time_cell_column(i), target);
  }

  // repeated uint32 volatile_time_cell_row = 2;
  for (int i = 0, n = this->_internal_volatile_time_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_volatile_time_cell_row(i), target);
  }

  // repeated uint32 volatile_random_cell_column = 3;
  for (int i = 0, n = this->_internal_volatile_random_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_volatile_random_cell_column(i), target);
  }

  // repeated uint32 volatile_random_cell_row = 4;
  for (int i = 0, n = this->_internal_volatile_random_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_volatile_random_cell_row(i), target);
  }

  // repeated uint32 volatile_location_cell_column = 5;
  for (int i = 0, n = this->_internal_volatile_location_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_volatile_location_cell_column(i), target);
  }

  // repeated uint32 volatile_location_cell_row = 6;
  for (int i = 0, n = this->_internal_volatile_location_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_volatile_location_cell_row(i), target);
  }

  // repeated uint32 volatile_compass_cell_column = 7;
  for (int i = 0, n = this->_internal_volatile_compass_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_volatile_compass_cell_column(i), target);
  }

  // repeated uint32 volatile_compass_cell_row = 8;
  for (int i = 0, n = this->_internal_volatile_compass_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_volatile_compass_cell_row(i), target);
  }

  // repeated uint32 calculated_dependency_cell_column = 9;
  for (int i = 0, n = this->_internal_calculated_dependency_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_calculated_dependency_cell_column(i), target);
  }

  // repeated uint32 calculated_dependency_cell_row = 10;
  for (int i = 0, n = this->_internal_calculated_dependency_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_calculated_dependency_cell_row(i), target);
  }

  // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_volatile_geometry_cell_size()); i < n; i++) {
    const auto& repfield = this->_internal_volatile_geometry_cell(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_volatile_geometry_cell_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_volatile_geometry_cell_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 volatile_locale_cell_column = 15;
  for (int i = 0, n = this->_internal_volatile_locale_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_volatile_locale_cell_column(i), target);
  }

  // repeated uint32 volatile_locale_cell_row = 16;
  for (int i = 0, n = this->_internal_volatile_locale_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_volatile_locale_cell_row(i), target);
  }

  // repeated uint32 volatile_sheet_table_name_cell_column = 17;
  for (int i = 0, n = this->_internal_volatile_sheet_table_name_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(17, this->_internal_volatile_sheet_table_name_cell_column(i), target);
  }

  // repeated uint32 volatile_sheet_table_name_cell_row = 18;
  for (int i = 0, n = this->_internal_volatile_sheet_table_name_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_volatile_sheet_table_name_cell_row(i), target);
  }

  // repeated uint32 volatile_remote_data_cell_column = 19;
  for (int i = 0, n = this->_internal_volatile_remote_data_cell_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(19, this->_internal_volatile_remote_data_cell_column(i), target);
  }

  // repeated uint32 volatile_remote_data_cell_row = 20;
  for (int i = 0, n = this->_internal_volatile_remote_data_cell_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(20, this->_internal_volatile_remote_data_cell_row(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.VolatileDependenciesArchive)
  return target;
}

size_t VolatileDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.VolatileDependenciesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 volatile_time_cell_column = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_time_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_time_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_time_cell_row = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_time_cell_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_time_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_random_cell_column = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_random_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_random_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_random_cell_row = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_random_cell_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_random_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_location_cell_column = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_location_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_location_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_location_cell_row = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_location_cell_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_location_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_compass_cell_column = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_compass_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_compass_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_compass_cell_row = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_compass_cell_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_compass_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 calculated_dependency_cell_column = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.calculated_dependency_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_calculated_dependency_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 calculated_dependency_cell_row = 10;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.calculated_dependency_cell_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_calculated_dependency_cell_row_size());
    total_size += data_size;
  }

  // repeated .TSCE.CellCoordinateArchive volatile_geometry_cell = 11;
  total_size += 1UL * this->_internal_volatile_geometry_cell_size();
  for (const auto& msg : this->_impl_.volatile_geometry_cell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellReferenceArchive volatile_geometry_cell_reference = 13;
  total_size += 1UL * this->_internal_volatile_geometry_cell_reference_size();
  for (const auto& msg : this->_impl_.volatile_geometry_cell_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 volatile_locale_cell_column = 15;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_locale_cell_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_volatile_locale_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_locale_cell_row = 16;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_locale_cell_row_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_volatile_locale_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_sheet_table_name_cell_column = 17;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_sheet_table_name_cell_column_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_volatile_sheet_table_name_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_sheet_table_name_cell_row = 18;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_sheet_table_name_cell_row_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_volatile_sheet_table_name_cell_row_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_remote_data_cell_column = 19;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_remote_data_cell_column_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_volatile_remote_data_cell_column_size());
    total_size += data_size;
  }

  // repeated uint32 volatile_remote_data_cell_row = 20;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.volatile_remote_data_cell_row_);
    total_size += 2 *
                  ::_pbi::FromIntSize(this->_internal_volatile_remote_data_cell_row_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VolatileDependenciesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VolatileDependenciesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VolatileDependenciesArchive::GetClassData() const { return &_class_data_; }


void VolatileDependenciesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VolatileDependenciesArchive*>(&to_msg);
  auto& from = static_cast<const VolatileDependenciesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.VolatileDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.volatile_time_cell_column_.MergeFrom(from._impl_.volatile_time_cell_column_);
  _this->_impl_.volatile_time_cell_row_.MergeFrom(from._impl_.volatile_time_cell_row_);
  _this->_impl_.volatile_random_cell_column_.MergeFrom(from._impl_.volatile_random_cell_column_);
  _this->_impl_.volatile_random_cell_row_.MergeFrom(from._impl_.volatile_random_cell_row_);
  _this->_impl_.volatile_location_cell_column_.MergeFrom(from._impl_.volatile_location_cell_column_);
  _this->_impl_.volatile_location_cell_row_.MergeFrom(from._impl_.volatile_location_cell_row_);
  _this->_impl_.volatile_compass_cell_column_.MergeFrom(from._impl_.volatile_compass_cell_column_);
  _this->_impl_.volatile_compass_cell_row_.MergeFrom(from._impl_.volatile_compass_cell_row_);
  _this->_impl_.calculated_dependency_cell_column_.MergeFrom(from._impl_.calculated_dependency_cell_column_);
  _this->_impl_.calculated_dependency_cell_row_.MergeFrom(from._impl_.calculated_dependency_cell_row_);
  _this->_impl_.volatile_geometry_cell_.MergeFrom(from._impl_.volatile_geometry_cell_);
  _this->_impl_.volatile_geometry_cell_reference_.MergeFrom(from._impl_.volatile_geometry_cell_reference_);
  _this->_impl_.volatile_locale_cell_column_.MergeFrom(from._impl_.volatile_locale_cell_column_);
  _this->_impl_.volatile_locale_cell_row_.MergeFrom(from._impl_.volatile_locale_cell_row_);
  _this->_impl_.volatile_sheet_table_name_cell_column_.MergeFrom(from._impl_.volatile_sheet_table_name_cell_column_);
  _this->_impl_.volatile_sheet_table_name_cell_row_.MergeFrom(from._impl_.volatile_sheet_table_name_cell_row_);
  _this->_impl_.volatile_remote_data_cell_column_.MergeFrom(from._impl_.volatile_remote_data_cell_column_);
  _this->_impl_.volatile_remote_data_cell_row_.MergeFrom(from._impl_.volatile_remote_data_cell_row_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VolatileDependenciesArchive::CopyFrom(const VolatileDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.VolatileDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolatileDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.volatile_geometry_cell_reference_))
    return false;
  return true;
}

void VolatileDependenciesArchive::InternalSwap(VolatileDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.volatile_time_cell_column_.InternalSwap(&other->_impl_.volatile_time_cell_column_);
  _impl_.volatile_time_cell_row_.InternalSwap(&other->_impl_.volatile_time_cell_row_);
  _impl_.volatile_random_cell_column_.InternalSwap(&other->_impl_.volatile_random_cell_column_);
  _impl_.volatile_random_cell_row_.InternalSwap(&other->_impl_.volatile_random_cell_row_);
  _impl_.volatile_location_cell_column_.InternalSwap(&other->_impl_.volatile_location_cell_column_);
  _impl_.volatile_location_cell_row_.InternalSwap(&other->_impl_.volatile_location_cell_row_);
  _impl_.volatile_compass_cell_column_.InternalSwap(&other->_impl_.volatile_compass_cell_column_);
  _impl_.volatile_compass_cell_row_.InternalSwap(&other->_impl_.volatile_compass_cell_row_);
  _impl_.calculated_dependency_cell_column_.InternalSwap(&other->_impl_.calculated_dependency_cell_column_);
  _impl_.calculated_dependency_cell_row_.InternalSwap(&other->_impl_.calculated_dependency_cell_row_);
  _impl_.volatile_geometry_cell_.InternalSwap(&other->_impl_.volatile_geometry_cell_);
  _impl_.volatile_geometry_cell_reference_.InternalSwap(&other->_impl_.volatile_geometry_cell_reference_);
  _impl_.volatile_locale_cell_column_.InternalSwap(&other->_impl_.volatile_locale_cell_column_);
  _impl_.volatile_locale_cell_row_.InternalSwap(&other->_impl_.volatile_locale_cell_row_);
  _impl_.volatile_sheet_table_name_cell_column_.InternalSwap(&other->_impl_.volatile_sheet_table_name_cell_column_);
  _impl_.volatile_sheet_table_name_cell_row_.InternalSwap(&other->_impl_.volatile_sheet_table_name_cell_row_);
  _impl_.volatile_remote_data_cell_column_.InternalSwap(&other->_impl_.volatile_remote_data_cell_column_);
  _impl_.volatile_remote_data_cell_row_.InternalSwap(&other->_impl_.volatile_remote_data_cell_row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VolatileDependenciesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[33]);
}

// ===================================================================

class VolatileDependenciesExpandedArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<VolatileDependenciesExpandedArchive>()._impl_._has_bits_);
  static const ::TSCE::CellCoordSetArchive& volatile_time_cells(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_time_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordSetArchive& volatile_random_cells(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_random_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::CellCoordSetArchive& volatile_locale_cells(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_locale_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellCoordSetArchive& volatile_sheet_table_name_cells(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_sheet_table_name_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::CellCoordSetArchive& volatile_remote_data_cells(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_remote_data_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::InternalCellRefSetArchive& volatile_geometry_cell_refs(const VolatileDependenciesExpandedArchive* msg);
  static void set_has_volatile_geometry_cell_refs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::TSCE::CellCoordSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_time_cells(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->_impl_.volatile_time_cells_;
}
const ::TSCE::CellCoordSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_random_cells(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->_impl_.volatile_random_cells_;
}
const ::TSCE::CellCoordSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_locale_cells(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->_impl_.volatile_locale_cells_;
}
const ::TSCE::CellCoordSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_sheet_table_name_cells(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->_impl_.volatile_sheet_table_name_cells_;
}
const ::TSCE::CellCoordSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_remote_data_cells(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->_impl_.volatile_remote_data_cells_;
}
const ::TSCE::InternalCellRefSetArchive&
VolatileDependenciesExpandedArchive::_Internal::volatile_geometry_cell_refs(const VolatileDependenciesExpandedArchive* msg) {
  return *msg->_impl_.volatile_geometry_cell_refs_;
}
VolatileDependenciesExpandedArchive::VolatileDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.VolatileDependenciesExpandedArchive)
}
VolatileDependenciesExpandedArchive::VolatileDependenciesExpandedArchive(const VolatileDependenciesExpandedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VolatileDependenciesExpandedArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.volatile_time_cells_){nullptr}
    , decltype(_impl_.volatile_random_cells_){nullptr}
    , decltype(_impl_.volatile_locale_cells_){nullptr}
    , decltype(_impl_.volatile_sheet_table_name_cells_){nullptr}
    , decltype(_impl_.volatile_remote_data_cells_){nullptr}
    , decltype(_impl_.volatile_geometry_cell_refs_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_volatile_time_cells()) {
    _this->_impl_.volatile_time_cells_ = new ::TSCE::CellCoordSetArchive(*from._impl_.volatile_time_cells_);
  }
  if (from._internal_has_volatile_random_cells()) {
    _this->_impl_.volatile_random_cells_ = new ::TSCE::CellCoordSetArchive(*from._impl_.volatile_random_cells_);
  }
  if (from._internal_has_volatile_locale_cells()) {
    _this->_impl_.volatile_locale_cells_ = new ::TSCE::CellCoordSetArchive(*from._impl_.volatile_locale_cells_);
  }
  if (from._internal_has_volatile_sheet_table_name_cells()) {
    _this->_impl_.volatile_sheet_table_name_cells_ = new ::TSCE::CellCoordSetArchive(*from._impl_.volatile_sheet_table_name_cells_);
  }
  if (from._internal_has_volatile_remote_data_cells()) {
    _this->_impl_.volatile_remote_data_cells_ = new ::TSCE::CellCoordSetArchive(*from._impl_.volatile_remote_data_cells_);
  }
  if (from._internal_has_volatile_geometry_cell_refs()) {
    _this->_impl_.volatile_geometry_cell_refs_ = new ::TSCE::InternalCellRefSetArchive(*from._impl_.volatile_geometry_cell_refs_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.VolatileDependenciesExpandedArchive)
}

inline void VolatileDependenciesExpandedArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.volatile_time_cells_){nullptr}
    , decltype(_impl_.volatile_random_cells_){nullptr}
    , decltype(_impl_.volatile_locale_cells_){nullptr}
    , decltype(_impl_.volatile_sheet_table_name_cells_){nullptr}
    , decltype(_impl_.volatile_remote_data_cells_){nullptr}
    , decltype(_impl_.volatile_geometry_cell_refs_){nullptr}
  };
}

VolatileDependenciesExpandedArchive::~VolatileDependenciesExpandedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.VolatileDependenciesExpandedArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VolatileDependenciesExpandedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.volatile_time_cells_;
  if (this != internal_default_instance()) delete _impl_.volatile_random_cells_;
  if (this != internal_default_instance()) delete _impl_.volatile_locale_cells_;
  if (this != internal_default_instance()) delete _impl_.volatile_sheet_table_name_cells_;
  if (this != internal_default_instance()) delete _impl_.volatile_remote_data_cells_;
  if (this != internal_default_instance()) delete _impl_.volatile_geometry_cell_refs_;
}

void VolatileDependenciesExpandedArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VolatileDependenciesExpandedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.VolatileDependenciesExpandedArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.volatile_time_cells_ != nullptr);
      _impl_.volatile_time_cells_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.volatile_random_cells_ != nullptr);
      _impl_.volatile_random_cells_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.volatile_locale_cells_ != nullptr);
      _impl_.volatile_locale_cells_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.volatile_sheet_table_name_cells_ != nullptr);
      _impl_.volatile_sheet_table_name_cells_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.volatile_remote_data_cells_ != nullptr);
      _impl_.volatile_remote_data_cells_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.volatile_geometry_cell_refs_ != nullptr);
      _impl_.volatile_geometry_cell_refs_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VolatileDependenciesExpandedArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.CellCoordSetArchive volatile_time_cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_time_cells(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive volatile_random_cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_random_cells(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive volatile_locale_cells = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_locale_cells(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive volatile_sheet_table_name_cells = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_sheet_table_name_cells(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive volatile_remote_data_cells = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_remote_data_cells(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive volatile_geometry_cell_refs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_geometry_cell_refs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VolatileDependenciesExpandedArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.VolatileDependenciesExpandedArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.CellCoordSetArchive volatile_time_cells = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::volatile_time_cells(this),
        _Internal::volatile_time_cells(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive volatile_random_cells = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::volatile_random_cells(this),
        _Internal::volatile_random_cells(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive volatile_locale_cells = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::volatile_locale_cells(this),
        _Internal::volatile_locale_cells(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive volatile_sheet_table_name_cells = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::volatile_sheet_table_name_cells(this),
        _Internal::volatile_sheet_table_name_cells(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive volatile_remote_data_cells = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::volatile_remote_data_cells(this),
        _Internal::volatile_remote_data_cells(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive volatile_geometry_cell_refs = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::volatile_geometry_cell_refs(this),
        _Internal::volatile_geometry_cell_refs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.VolatileDependenciesExpandedArchive)
  return target;
}

size_t VolatileDependenciesExpandedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.VolatileDependenciesExpandedArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TSCE.CellCoordSetArchive volatile_time_cells = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.volatile_time_cells_);
    }

    // optional .TSCE.CellCoordSetArchive volatile_random_cells = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.volatile_random_cells_);
    }

    // optional .TSCE.CellCoordSetArchive volatile_locale_cells = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.volatile_locale_cells_);
    }

    // optional .TSCE.CellCoordSetArchive volatile_sheet_table_name_cells = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.volatile_sheet_table_name_cells_);
    }

    // optional .TSCE.CellCoordSetArchive volatile_remote_data_cells = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.volatile_remote_data_cells_);
    }

    // optional .TSCE.InternalCellRefSetArchive volatile_geometry_cell_refs = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.volatile_geometry_cell_refs_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VolatileDependenciesExpandedArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VolatileDependenciesExpandedArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VolatileDependenciesExpandedArchive::GetClassData() const { return &_class_data_; }


void VolatileDependenciesExpandedArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VolatileDependenciesExpandedArchive*>(&to_msg);
  auto& from = static_cast<const VolatileDependenciesExpandedArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.VolatileDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_volatile_time_cells()->::TSCE::CellCoordSetArchive::MergeFrom(
          from._internal_volatile_time_cells());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_volatile_random_cells()->::TSCE::CellCoordSetArchive::MergeFrom(
          from._internal_volatile_random_cells());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_volatile_locale_cells()->::TSCE::CellCoordSetArchive::MergeFrom(
          from._internal_volatile_locale_cells());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_volatile_sheet_table_name_cells()->::TSCE::CellCoordSetArchive::MergeFrom(
          from._internal_volatile_sheet_table_name_cells());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_volatile_remote_data_cells()->::TSCE::CellCoordSetArchive::MergeFrom(
          from._internal_volatile_remote_data_cells());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_volatile_geometry_cell_refs()->::TSCE::InternalCellRefSetArchive::MergeFrom(
          from._internal_volatile_geometry_cell_refs());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VolatileDependenciesExpandedArchive::CopyFrom(const VolatileDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.VolatileDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VolatileDependenciesExpandedArchive::IsInitialized() const {
  if (_internal_has_volatile_time_cells()) {
    if (!_impl_.volatile_time_cells_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_random_cells()) {
    if (!_impl_.volatile_random_cells_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_locale_cells()) {
    if (!_impl_.volatile_locale_cells_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_sheet_table_name_cells()) {
    if (!_impl_.volatile_sheet_table_name_cells_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_remote_data_cells()) {
    if (!_impl_.volatile_remote_data_cells_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_geometry_cell_refs()) {
    if (!_impl_.volatile_geometry_cell_refs_->IsInitialized()) return false;
  }
  return true;
}

void VolatileDependenciesExpandedArchive::InternalSwap(VolatileDependenciesExpandedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VolatileDependenciesExpandedArchive, _impl_.volatile_geometry_cell_refs_)
      + sizeof(VolatileDependenciesExpandedArchive::_impl_.volatile_geometry_cell_refs_)
      - PROTOBUF_FIELD_OFFSET(VolatileDependenciesExpandedArchive, _impl_.volatile_time_cells_)>(
          reinterpret_cast<char*>(&_impl_.volatile_time_cells_),
          reinterpret_cast<char*>(&other->_impl_.volatile_time_cells_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VolatileDependenciesExpandedArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[34]);
}

// ===================================================================

class RTreeInternalNodeContentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeInternalNodeContentsArchive>()._impl_._has_bits_);
  static const ::TSCE::RTreeNodeArchive& child(const RTreeInternalNodeContentsArchive* msg);
  static void set_has_child(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::RTreeNodeArchive&
RTreeInternalNodeContentsArchive::_Internal::child(const RTreeInternalNodeContentsArchive* msg) {
  return *msg->_impl_.child_;
}
RTreeInternalNodeContentsArchive::RTreeInternalNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeInternalNodeContentsArchive)
}
RTreeInternalNodeContentsArchive::RTreeInternalNodeContentsArchive(const RTreeInternalNodeContentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTreeInternalNodeContentsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_){from._impl_.min_}
    , decltype(_impl_.max_){from._impl_.max_}
    , decltype(_impl_.child_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_child()) {
    _this->_impl_.child_ = new ::TSCE::RTreeNodeArchive(*from._impl_.child_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeInternalNodeContentsArchive)
}

inline void RTreeInternalNodeContentsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_){arena}
    , decltype(_impl_.max_){arena}
    , decltype(_impl_.child_){nullptr}
  };
}

RTreeInternalNodeContentsArchive::~RTreeInternalNodeContentsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeInternalNodeContentsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTreeInternalNodeContentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.min_.~RepeatedField();
  _impl_.max_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.child_;
}

void RTreeInternalNodeContentsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTreeInternalNodeContentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeInternalNodeContentsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.min_.Clear();
  _impl_.max_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.child_ != nullptr);
    _impl_.child_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeInternalNodeContentsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_min(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_max(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.RTreeNodeArchive child = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_child(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTreeInternalNodeContentsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeInternalNodeContentsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  for (int i = 0, n = this->_internal_min_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min(i), target);
  }

  // repeated uint32 max = 2;
  for (int i = 0, n = this->_internal_max_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.RTreeNodeArchive child = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::child(this),
        _Internal::child(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeInternalNodeContentsArchive)
  return target;
}

size_t RTreeInternalNodeContentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeInternalNodeContentsArchive)
  size_t total_size = 0;

  // required .TSCE.RTreeNodeArchive child = 3;
  if (_internal_has_child()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.child_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.min_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_min_size());
    total_size += data_size;
  }

  // repeated uint32 max = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.max_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTreeInternalNodeContentsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTreeInternalNodeContentsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTreeInternalNodeContentsArchive::GetClassData() const { return &_class_data_; }


void RTreeInternalNodeContentsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTreeInternalNodeContentsArchive*>(&to_msg);
  auto& from = static_cast<const RTreeInternalNodeContentsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeInternalNodeContentsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.min_.MergeFrom(from._impl_.min_);
  _this->_impl_.max_.MergeFrom(from._impl_.max_);
  if (from._internal_has_child()) {
    _this->_internal_mutable_child()->::TSCE::RTreeNodeArchive::MergeFrom(
        from._internal_child());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTreeInternalNodeContentsArchive::CopyFrom(const RTreeInternalNodeContentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeInternalNodeContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeInternalNodeContentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_child()) {
    if (!_impl_.child_->IsInitialized()) return false;
  }
  return true;
}

void RTreeInternalNodeContentsArchive::InternalSwap(RTreeInternalNodeContentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.min_.InternalSwap(&other->_impl_.min_);
  _impl_.max_.InternalSwap(&other->_impl_.max_);
  swap(_impl_.child_, other->_impl_.child_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeInternalNodeContentsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[35]);
}

// ===================================================================

class RTreeLeafNodeContentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeLeafNodeContentsArchive>()._impl_._has_bits_);
  static const ::TSCE::CellReferenceArchive& cell_reference(const RTreeLeafNodeContentsArchive* msg);
  static void set_has_cell_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CellReferenceArchive&
RTreeLeafNodeContentsArchive::_Internal::cell_reference(const RTreeLeafNodeContentsArchive* msg) {
  return *msg->_impl_.cell_reference_;
}
RTreeLeafNodeContentsArchive::RTreeLeafNodeContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeLeafNodeContentsArchive)
}
RTreeLeafNodeContentsArchive::RTreeLeafNodeContentsArchive(const RTreeLeafNodeContentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTreeLeafNodeContentsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_){from._impl_.min_}
    , decltype(_impl_.max_){from._impl_.max_}
    , decltype(_impl_.cell_reference_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_reference()) {
    _this->_impl_.cell_reference_ = new ::TSCE::CellReferenceArchive(*from._impl_.cell_reference_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeLeafNodeContentsArchive)
}

inline void RTreeLeafNodeContentsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.min_){arena}
    , decltype(_impl_.max_){arena}
    , decltype(_impl_.cell_reference_){nullptr}
  };
}

RTreeLeafNodeContentsArchive::~RTreeLeafNodeContentsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeLeafNodeContentsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTreeLeafNodeContentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.min_.~RepeatedField();
  _impl_.max_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.cell_reference_;
}

void RTreeLeafNodeContentsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTreeLeafNodeContentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeLeafNodeContentsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.min_.Clear();
  _impl_.max_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.cell_reference_ != nullptr);
    _impl_.cell_reference_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeLeafNodeContentsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_min(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_min(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_max(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_max(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellReferenceArchive cell_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTreeLeafNodeContentsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeLeafNodeContentsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  for (int i = 0, n = this->_internal_min_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min(i), target);
  }

  // repeated uint32 max = 2;
  for (int i = 0, n = this->_internal_max_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max(i), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellReferenceArchive cell_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell_reference(this),
        _Internal::cell_reference(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeLeafNodeContentsArchive)
  return target;
}

size_t RTreeLeafNodeContentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeLeafNodeContentsArchive)
  size_t total_size = 0;

  // required .TSCE.CellReferenceArchive cell_reference = 3;
  if (_internal_has_cell_reference()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_reference_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 min = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.min_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_min_size());
    total_size += data_size;
  }

  // repeated uint32 max = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.max_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_max_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTreeLeafNodeContentsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTreeLeafNodeContentsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTreeLeafNodeContentsArchive::GetClassData() const { return &_class_data_; }


void RTreeLeafNodeContentsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTreeLeafNodeContentsArchive*>(&to_msg);
  auto& from = static_cast<const RTreeLeafNodeContentsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeLeafNodeContentsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.min_.MergeFrom(from._impl_.min_);
  _this->_impl_.max_.MergeFrom(from._impl_.max_);
  if (from._internal_has_cell_reference()) {
    _this->_internal_mutable_cell_reference()->::TSCE::CellReferenceArchive::MergeFrom(
        from._internal_cell_reference());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTreeLeafNodeContentsArchive::CopyFrom(const RTreeLeafNodeContentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeLeafNodeContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeLeafNodeContentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_reference()) {
    if (!_impl_.cell_reference_->IsInitialized()) return false;
  }
  return true;
}

void RTreeLeafNodeContentsArchive::InternalSwap(RTreeLeafNodeContentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.min_.InternalSwap(&other->_impl_.min_);
  _impl_.max_.InternalSwap(&other->_impl_.max_);
  swap(_impl_.cell_reference_, other->_impl_.cell_reference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeLeafNodeContentsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[36]);
}

// ===================================================================

class RTreeNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeNodeArchive>()._impl_._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RTreeNodeArchive::RTreeNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeNodeArchive)
}
RTreeNodeArchive::RTreeNodeArchive(const RTreeNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTreeNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.internal_node_contents_){from._impl_.internal_node_contents_}
    , decltype(_impl_.leaf_node_contents_){from._impl_.leaf_node_contents_}
    , decltype(_impl_.level_){}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.level_, &from._impl_.level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.count_) -
    reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.count_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeNodeArchive)
}

inline void RTreeNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.internal_node_contents_){arena}
    , decltype(_impl_.leaf_node_contents_){arena}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.count_){0u}
  };
}

RTreeNodeArchive::~RTreeNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTreeNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.internal_node_contents_.~RepeatedPtrField();
  _impl_.leaf_node_contents_.~RepeatedPtrField();
}

void RTreeNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTreeNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.internal_node_contents_.Clear();
  _impl_.leaf_node_contents_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.count_) -
        reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.count_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internal_node_contents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_leaf_node_contents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTreeNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_level(), target);
  }

  // required uint32 count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_count(), target);
  }

  // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_internal_node_contents_size()); i < n; i++) {
    const auto& repfield = this->_internal_internal_node_contents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_leaf_node_contents_size()); i < n; i++) {
    const auto& repfield = this->_internal_leaf_node_contents(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeNodeArchive)
  return target;
}

size_t RTreeNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RTreeNodeArchive)
  size_t total_size = 0;

  if (_internal_has_level()) {
    // required uint32 level = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  if (_internal_has_count()) {
    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());
  }

  return total_size;
}
size_t RTreeNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 level = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());

    // required uint32 count = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RTreeInternalNodeContentsArchive internal_node_contents = 3;
  total_size += 1UL * this->_internal_internal_node_contents_size();
  for (const auto& msg : this->_impl_.internal_node_contents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.RTreeLeafNodeContentsArchive leaf_node_contents = 4;
  total_size += 1UL * this->_internal_leaf_node_contents_size();
  for (const auto& msg : this->_impl_.leaf_node_contents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTreeNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTreeNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTreeNodeArchive::GetClassData() const { return &_class_data_; }


void RTreeNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTreeNodeArchive*>(&to_msg);
  auto& from = static_cast<const RTreeNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.internal_node_contents_.MergeFrom(from._impl_.internal_node_contents_);
  _this->_impl_.leaf_node_contents_.MergeFrom(from._impl_.leaf_node_contents_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.level_ = from._impl_.level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.count_ = from._impl_.count_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTreeNodeArchive::CopyFrom(const RTreeNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.internal_node_contents_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.leaf_node_contents_))
    return false;
  return true;
}

void RTreeNodeArchive::InternalSwap(RTreeNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.internal_node_contents_.InternalSwap(&other->_impl_.internal_node_contents_);
  _impl_.leaf_node_contents_.InternalSwap(&other->_impl_.leaf_node_contents_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTreeNodeArchive, _impl_.count_)
      + sizeof(RTreeNodeArchive::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(RTreeNodeArchive, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[37]);
}

// ===================================================================

class RTreeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RTreeArchive>()._impl_._has_bits_);
  static void set_has_data_file_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_data_num_dims(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_data_elem_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_data_elem_real_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_data_max_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_data_min_nodes(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::RTreeNodeArchive& root(const RTreeArchive* msg);
  static void set_has_root(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

const ::TSCE::RTreeNodeArchive&
RTreeArchive::_Internal::root(const RTreeArchive* msg) {
  return *msg->_impl_.root_;
}
RTreeArchive::RTreeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RTreeArchive)
}
RTreeArchive::RTreeArchive(const RTreeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RTreeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.root_){nullptr}
    , decltype(_impl_.data_file_id_){}
    , decltype(_impl_.data_size_){}
    , decltype(_impl_.data_num_dims_){}
    , decltype(_impl_.data_elem_size_){}
    , decltype(_impl_.data_elem_real_size_){}
    , decltype(_impl_.data_max_nodes_){}
    , decltype(_impl_.data_min_nodes_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_root()) {
    _this->_impl_.root_ = new ::TSCE::RTreeNodeArchive(*from._impl_.root_);
  }
  ::memcpy(&_impl_.data_file_id_, &from._impl_.data_file_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.data_min_nodes_) -
    reinterpret_cast<char*>(&_impl_.data_file_id_)) + sizeof(_impl_.data_min_nodes_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RTreeArchive)
}

inline void RTreeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.root_){nullptr}
    , decltype(_impl_.data_file_id_){0u}
    , decltype(_impl_.data_size_){0u}
    , decltype(_impl_.data_num_dims_){0u}
    , decltype(_impl_.data_elem_size_){0u}
    , decltype(_impl_.data_elem_real_size_){0u}
    , decltype(_impl_.data_max_nodes_){0u}
    , decltype(_impl_.data_min_nodes_){0u}
  };
}

RTreeArchive::~RTreeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RTreeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RTreeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.root_;
}

void RTreeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RTreeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RTreeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.root_ != nullptr);
    _impl_.root_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.data_file_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.data_min_nodes_) -
        reinterpret_cast<char*>(&_impl_.data_file_id_)) + sizeof(_impl_.data_min_nodes_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RTreeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 data_file_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_data_file_id(&has_bits);
          _impl_.data_file_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_data_size(&has_bits);
          _impl_.data_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_num_dims = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_data_num_dims(&has_bits);
          _impl_.data_num_dims_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_elem_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_data_elem_size(&has_bits);
          _impl_.data_elem_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_elem_real_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_data_elem_real_size(&has_bits);
          _impl_.data_elem_real_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_max_nodes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_data_max_nodes(&has_bits);
          _impl_.data_max_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 data_min_nodes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_data_min_nodes(&has_bits);
          _impl_.data_min_nodes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.RTreeNodeArchive root = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_root(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RTreeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RTreeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 data_file_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_file_id(), target);
  }

  // required uint32 data_size = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_size(), target);
  }

  // required uint32 data_num_dims = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_data_num_dims(), target);
  }

  // required uint32 data_elem_size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data_elem_size(), target);
  }

  // required uint32 data_elem_real_size = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_data_elem_real_size(), target);
  }

  // required uint32 data_max_nodes = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_data_max_nodes(), target);
  }

  // required uint32 data_min_nodes = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_data_min_nodes(), target);
  }

  // required .TSCE.RTreeNodeArchive root = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::root(this),
        _Internal::root(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RTreeArchive)
  return target;
}

size_t RTreeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RTreeArchive)
  size_t total_size = 0;

  if (_internal_has_root()) {
    // required .TSCE.RTreeNodeArchive root = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.root_);
  }

  if (_internal_has_data_file_id()) {
    // required uint32 data_file_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_file_id());
  }

  if (_internal_has_data_size()) {
    // required uint32 data_size = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size());
  }

  if (_internal_has_data_num_dims()) {
    // required uint32 data_num_dims = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_num_dims());
  }

  if (_internal_has_data_elem_size()) {
    // required uint32 data_elem_size = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_elem_size());
  }

  if (_internal_has_data_elem_real_size()) {
    // required uint32 data_elem_real_size = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_elem_real_size());
  }

  if (_internal_has_data_max_nodes()) {
    // required uint32 data_max_nodes = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_max_nodes());
  }

  if (_internal_has_data_min_nodes()) {
    // required uint32 data_min_nodes = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_min_nodes());
  }

  return total_size;
}
size_t RTreeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RTreeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required .TSCE.RTreeNodeArchive root = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.root_);

    // required uint32 data_file_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_file_id());

    // required uint32 data_size = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_size());

    // required uint32 data_num_dims = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_num_dims());

    // required uint32 data_elem_size = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_elem_size());

    // required uint32 data_elem_real_size = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_elem_real_size());

    // required uint32 data_max_nodes = 6;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_max_nodes());

    // required uint32 data_min_nodes = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_min_nodes());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RTreeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RTreeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RTreeArchive::GetClassData() const { return &_class_data_; }


void RTreeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RTreeArchive*>(&to_msg);
  auto& from = static_cast<const RTreeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RTreeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_root()->::TSCE::RTreeNodeArchive::MergeFrom(
          from._internal_root());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.data_file_id_ = from._impl_.data_file_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.data_size_ = from._impl_.data_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.data_num_dims_ = from._impl_.data_num_dims_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.data_elem_size_ = from._impl_.data_elem_size_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.data_elem_real_size_ = from._impl_.data_elem_real_size_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.data_max_nodes_ = from._impl_.data_max_nodes_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.data_min_nodes_ = from._impl_.data_min_nodes_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RTreeArchive::CopyFrom(const RTreeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RTreeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTreeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_root()) {
    if (!_impl_.root_->IsInitialized()) return false;
  }
  return true;
}

void RTreeArchive::InternalSwap(RTreeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RTreeArchive, _impl_.data_min_nodes_)
      + sizeof(RTreeArchive::_impl_.data_min_nodes_)
      - PROTOBUF_FIELD_OFFSET(RTreeArchive, _impl_.root_)>(
          reinterpret_cast<char*>(&_impl_.root_),
          reinterpret_cast<char*>(&other->_impl_.root_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RTreeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[38]);
}

// ===================================================================

class RangeBackDependencyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeBackDependencyArchive>()._impl_._has_bits_);
  static void set_has_cell_coord_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cell_coord_column(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::RangeReferenceArchive& range_reference(const RangeBackDependencyArchive* msg);
  static void set_has_range_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::InternalRangeReferenceArchive& internal_range_reference(const RangeBackDependencyArchive* msg);
  static void set_has_internal_range_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

const ::TSCE::RangeReferenceArchive&
RangeBackDependencyArchive::_Internal::range_reference(const RangeBackDependencyArchive* msg) {
  return *msg->_impl_.range_reference_;
}
const ::TSCE::InternalRangeReferenceArchive&
RangeBackDependencyArchive::_Internal::internal_range_reference(const RangeBackDependencyArchive* msg) {
  return *msg->_impl_.internal_range_reference_;
}
RangeBackDependencyArchive::RangeBackDependencyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeBackDependencyArchive)
}
RangeBackDependencyArchive::RangeBackDependencyArchive(const RangeBackDependencyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeBackDependencyArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_reference_){nullptr}
    , decltype(_impl_.internal_range_reference_){nullptr}
    , decltype(_impl_.cell_coord_row_){}
    , decltype(_impl_.cell_coord_column_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_range_reference()) {
    _this->_impl_.range_reference_ = new ::TSCE::RangeReferenceArchive(*from._impl_.range_reference_);
  }
  if (from._internal_has_internal_range_reference()) {
    _this->_impl_.internal_range_reference_ = new ::TSCE::InternalRangeReferenceArchive(*from._impl_.internal_range_reference_);
  }
  ::memcpy(&_impl_.cell_coord_row_, &from._impl_.cell_coord_row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.cell_coord_column_) -
    reinterpret_cast<char*>(&_impl_.cell_coord_row_)) + sizeof(_impl_.cell_coord_column_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeBackDependencyArchive)
}

inline void RangeBackDependencyArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_reference_){nullptr}
    , decltype(_impl_.internal_range_reference_){nullptr}
    , decltype(_impl_.cell_coord_row_){0u}
    , decltype(_impl_.cell_coord_column_){0u}
  };
}

RangeBackDependencyArchive::~RangeBackDependencyArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeBackDependencyArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeBackDependencyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.range_reference_;
  if (this != internal_default_instance()) delete _impl_.internal_range_reference_;
}

void RangeBackDependencyArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeBackDependencyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeBackDependencyArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.range_reference_ != nullptr);
      _impl_.range_reference_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.internal_range_reference_ != nullptr);
      _impl_.internal_range_reference_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.cell_coord_row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cell_coord_column_) -
        reinterpret_cast<char*>(&_impl_.cell_coord_row_)) + sizeof(_impl_.cell_coord_column_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeBackDependencyArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 cell_coord_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_cell_coord_row(&has_bits);
          _impl_.cell_coord_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 cell_coord_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_cell_coord_column(&has_bits);
          _impl_.cell_coord_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeReferenceArchive range_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_range_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeBackDependencyArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeBackDependencyArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 cell_coord_row = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell_coord_row(), target);
  }

  // required uint32 cell_coord_column = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cell_coord_column(), target);
  }

  // optional .TSCE.RangeReferenceArchive range_reference = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::range_reference(this),
        _Internal::range_reference(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::internal_range_reference(this),
        _Internal::internal_range_reference(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeBackDependencyArchive)
  return target;
}

size_t RangeBackDependencyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RangeBackDependencyArchive)
  size_t total_size = 0;

  if (_internal_has_cell_coord_row()) {
    // required uint32 cell_coord_row = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_coord_row());
  }

  if (_internal_has_cell_coord_column()) {
    // required uint32 cell_coord_column = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_coord_column());
  }

  return total_size;
}
size_t RangeBackDependencyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeBackDependencyArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 cell_coord_row = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_coord_row());

    // required uint32 cell_coord_column = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_cell_coord_column());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.RangeReferenceArchive range_reference = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_reference_);
    }

    // optional .TSCE.InternalRangeReferenceArchive internal_range_reference = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.internal_range_reference_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeBackDependencyArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeBackDependencyArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeBackDependencyArchive::GetClassData() const { return &_class_data_; }


void RangeBackDependencyArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeBackDependencyArchive*>(&to_msg);
  auto& from = static_cast<const RangeBackDependencyArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeBackDependencyArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_range_reference()->::TSCE::RangeReferenceArchive::MergeFrom(
          from._internal_range_reference());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_internal_range_reference()->::TSCE::InternalRangeReferenceArchive::MergeFrom(
          from._internal_internal_range_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.cell_coord_row_ = from._impl_.cell_coord_row_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.cell_coord_column_ = from._impl_.cell_coord_column_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeBackDependencyArchive::CopyFrom(const RangeBackDependencyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeBackDependencyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeBackDependencyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_range_reference()) {
    if (!_impl_.range_reference_->IsInitialized()) return false;
  }
  if (_internal_has_internal_range_reference()) {
    if (!_impl_.internal_range_reference_->IsInitialized()) return false;
  }
  return true;
}

void RangeBackDependencyArchive::InternalSwap(RangeBackDependencyArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeBackDependencyArchive, _impl_.cell_coord_column_)
      + sizeof(RangeBackDependencyArchive::_impl_.cell_coord_column_)
      - PROTOBUF_FIELD_OFFSET(RangeBackDependencyArchive, _impl_.range_reference_)>(
          reinterpret_cast<char*>(&_impl_.range_reference_),
          reinterpret_cast<char*>(&other->_impl_.range_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeBackDependencyArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[39]);
}

// ===================================================================

class RangeDependenciesArchive::_Internal {
 public:
};

RangeDependenciesArchive::RangeDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeDependenciesArchive)
}
RangeDependenciesArchive::RangeDependenciesArchive(const RangeDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeDependenciesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.back_dependency_){from._impl_.back_dependency_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeDependenciesArchive)
}

inline void RangeDependenciesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.back_dependency_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RangeDependenciesArchive::~RangeDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeDependenciesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.back_dependency_.~RepeatedPtrField();
}

void RangeDependenciesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeDependenciesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.back_dependency_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeDependenciesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_back_dependency(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeDependenciesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeDependenciesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_back_dependency_size()); i < n; i++) {
    const auto& repfield = this->_internal_back_dependency(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeDependenciesArchive)
  return target;
}

size_t RangeDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeDependenciesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RangeBackDependencyArchive back_dependency = 2;
  total_size += 1UL * this->_internal_back_dependency_size();
  for (const auto& msg : this->_impl_.back_dependency_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeDependenciesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeDependenciesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeDependenciesArchive::GetClassData() const { return &_class_data_; }


void RangeDependenciesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeDependenciesArchive*>(&to_msg);
  auto& from = static_cast<const RangeDependenciesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.back_dependency_.MergeFrom(from._impl_.back_dependency_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeDependenciesArchive::CopyFrom(const RangeDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.back_dependency_))
    return false;
  return true;
}

void RangeDependenciesArchive::InternalSwap(RangeDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.back_dependency_.InternalSwap(&other->_impl_.back_dependency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeDependenciesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[40]);
}

// ===================================================================

class RangePrecedentsTileArchive_FromToRangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangePrecedentsTileArchive_FromToRangeArchive>()._impl_._has_bits_);
  static const ::TSCE::CellCoordinateArchive& from_coord(const RangePrecedentsTileArchive_FromToRangeArchive* msg);
  static void set_has_from_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellRectArchive& refers_to_rect(const RangePrecedentsTileArchive_FromToRangeArchive* msg);
  static void set_has_refers_to_rect(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
RangePrecedentsTileArchive_FromToRangeArchive::_Internal::from_coord(const RangePrecedentsTileArchive_FromToRangeArchive* msg) {
  return *msg->_impl_.from_coord_;
}
const ::TSCE::CellRectArchive&
RangePrecedentsTileArchive_FromToRangeArchive::_Internal::refers_to_rect(const RangePrecedentsTileArchive_FromToRangeArchive* msg) {
  return *msg->_impl_.refers_to_rect_;
}
RangePrecedentsTileArchive_FromToRangeArchive::RangePrecedentsTileArchive_FromToRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
}
RangePrecedentsTileArchive_FromToRangeArchive::RangePrecedentsTileArchive_FromToRangeArchive(const RangePrecedentsTileArchive_FromToRangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangePrecedentsTileArchive_FromToRangeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_coord_){nullptr}
    , decltype(_impl_.refers_to_rect_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_from_coord()) {
    _this->_impl_.from_coord_ = new ::TSCE::CellCoordinateArchive(*from._impl_.from_coord_);
  }
  if (from._internal_has_refers_to_rect()) {
    _this->_impl_.refers_to_rect_ = new ::TSCE::CellRectArchive(*from._impl_.refers_to_rect_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
}

inline void RangePrecedentsTileArchive_FromToRangeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_coord_){nullptr}
    , decltype(_impl_.refers_to_rect_){nullptr}
  };
}

RangePrecedentsTileArchive_FromToRangeArchive::~RangePrecedentsTileArchive_FromToRangeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangePrecedentsTileArchive_FromToRangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.from_coord_;
  if (this != internal_default_instance()) delete _impl_.refers_to_rect_;
}

void RangePrecedentsTileArchive_FromToRangeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangePrecedentsTileArchive_FromToRangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.from_coord_ != nullptr);
      _impl_.from_coord_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.refers_to_rect_ != nullptr);
      _impl_.refers_to_rect_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangePrecedentsTileArchive_FromToRangeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive from_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_coord(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellRectArchive refers_to_rect = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_refers_to_rect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangePrecedentsTileArchive_FromToRangeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellCoordinateArchive from_coord = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::from_coord(this),
        _Internal::from_coord(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.CellRectArchive refers_to_rect = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::refers_to_rect(this),
        _Internal::refers_to_rect(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  return target;
}

size_t RangePrecedentsTileArchive_FromToRangeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  size_t total_size = 0;

  if (_internal_has_from_coord()) {
    // required .TSCE.CellCoordinateArchive from_coord = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_coord_);
  }

  if (_internal_has_refers_to_rect()) {
    // required .TSCE.CellRectArchive refers_to_rect = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refers_to_rect_);
  }

  return total_size;
}
size_t RangePrecedentsTileArchive_FromToRangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive from_coord = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_coord_);

    // required .TSCE.CellRectArchive refers_to_rect = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.refers_to_rect_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangePrecedentsTileArchive_FromToRangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangePrecedentsTileArchive_FromToRangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangePrecedentsTileArchive_FromToRangeArchive::GetClassData() const { return &_class_data_; }


void RangePrecedentsTileArchive_FromToRangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangePrecedentsTileArchive_FromToRangeArchive*>(&to_msg);
  auto& from = static_cast<const RangePrecedentsTileArchive_FromToRangeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from_coord()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_from_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_refers_to_rect()->::TSCE::CellRectArchive::MergeFrom(
          from._internal_refers_to_rect());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangePrecedentsTileArchive_FromToRangeArchive::CopyFrom(const RangePrecedentsTileArchive_FromToRangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangePrecedentsTileArchive.FromToRangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangePrecedentsTileArchive_FromToRangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_refers_to_rect()) {
    if (!_impl_.refers_to_rect_->IsInitialized()) return false;
  }
  return true;
}

void RangePrecedentsTileArchive_FromToRangeArchive::InternalSwap(RangePrecedentsTileArchive_FromToRangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangePrecedentsTileArchive_FromToRangeArchive, _impl_.refers_to_rect_)
      + sizeof(RangePrecedentsTileArchive_FromToRangeArchive::_impl_.refers_to_rect_)
      - PROTOBUF_FIELD_OFFSET(RangePrecedentsTileArchive_FromToRangeArchive, _impl_.from_coord_)>(
          reinterpret_cast<char*>(&_impl_.from_coord_),
          reinterpret_cast<char*>(&other->_impl_.from_coord_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangePrecedentsTileArchive_FromToRangeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[41]);
}

// ===================================================================

class RangePrecedentsTileArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangePrecedentsTileArchive>()._impl_._has_bits_);
  static void set_has_to_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RangePrecedentsTileArchive::RangePrecedentsTileArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangePrecedentsTileArchive)
}
RangePrecedentsTileArchive::RangePrecedentsTileArchive(const RangePrecedentsTileArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangePrecedentsTileArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_to_range_){from._impl_.from_to_range_}
    , decltype(_impl_.to_owner_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.to_owner_id_ = from._impl_.to_owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.RangePrecedentsTileArchive)
}

inline void RangePrecedentsTileArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_to_range_){arena}
    , decltype(_impl_.to_owner_id_){0u}
  };
}

RangePrecedentsTileArchive::~RangePrecedentsTileArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangePrecedentsTileArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangePrecedentsTileArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_to_range_.~RepeatedPtrField();
}

void RangePrecedentsTileArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangePrecedentsTileArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangePrecedentsTileArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_to_range_.Clear();
  _impl_.to_owner_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangePrecedentsTileArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 to_owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_to_owner_id(&has_bits);
          _impl_.to_owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.RangePrecedentsTileArchive.FromToRangeArchive from_to_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_from_to_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangePrecedentsTileArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangePrecedentsTileArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 to_owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_to_owner_id(), target);
  }

  // repeated .TSCE.RangePrecedentsTileArchive.FromToRangeArchive from_to_range = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_from_to_range_size()); i < n; i++) {
    const auto& repfield = this->_internal_from_to_range(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangePrecedentsTileArchive)
  return target;
}

size_t RangePrecedentsTileArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangePrecedentsTileArchive)
  size_t total_size = 0;

  // required uint32 to_owner_id = 1;
  if (_internal_has_to_owner_id()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to_owner_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RangePrecedentsTileArchive.FromToRangeArchive from_to_range = 2;
  total_size += 1UL * this->_internal_from_to_range_size();
  for (const auto& msg : this->_impl_.from_to_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangePrecedentsTileArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangePrecedentsTileArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangePrecedentsTileArchive::GetClassData() const { return &_class_data_; }


void RangePrecedentsTileArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangePrecedentsTileArchive*>(&to_msg);
  auto& from = static_cast<const RangePrecedentsTileArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangePrecedentsTileArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.from_to_range_.MergeFrom(from._impl_.from_to_range_);
  if (from._internal_has_to_owner_id()) {
    _this->_internal_set_to_owner_id(from._internal_to_owner_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangePrecedentsTileArchive::CopyFrom(const RangePrecedentsTileArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangePrecedentsTileArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangePrecedentsTileArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.from_to_range_))
    return false;
  return true;
}

void RangePrecedentsTileArchive::InternalSwap(RangePrecedentsTileArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.from_to_range_.InternalSwap(&other->_impl_.from_to_range_);
  swap(_impl_.to_owner_id_, other->_impl_.to_owner_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangePrecedentsTileArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[42]);
}

// ===================================================================

class RangeDependenciesTiledArchive::_Internal {
 public:
};

void RangeDependenciesTiledArchive::clear_range_precedents_tile() {
  _impl_.range_precedents_tile_.Clear();
}
RangeDependenciesTiledArchive::RangeDependenciesTiledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeDependenciesTiledArchive)
}
RangeDependenciesTiledArchive::RangeDependenciesTiledArchive(const RangeDependenciesTiledArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeDependenciesTiledArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.range_precedents_tile_){from._impl_.range_precedents_tile_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeDependenciesTiledArchive)
}

inline void RangeDependenciesTiledArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.range_precedents_tile_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RangeDependenciesTiledArchive::~RangeDependenciesTiledArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeDependenciesTiledArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeDependenciesTiledArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.range_precedents_tile_.~RepeatedPtrField();
}

void RangeDependenciesTiledArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeDependenciesTiledArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeDependenciesTiledArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_precedents_tile_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeDependenciesTiledArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference range_precedents_tile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_precedents_tile(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeDependenciesTiledArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeDependenciesTiledArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference range_precedents_tile = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_range_precedents_tile_size()); i < n; i++) {
    const auto& repfield = this->_internal_range_precedents_tile(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeDependenciesTiledArchive)
  return target;
}

size_t RangeDependenciesTiledArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeDependenciesTiledArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference range_precedents_tile = 1;
  total_size += 1UL * this->_internal_range_precedents_tile_size();
  for (const auto& msg : this->_impl_.range_precedents_tile_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeDependenciesTiledArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeDependenciesTiledArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeDependenciesTiledArchive::GetClassData() const { return &_class_data_; }


void RangeDependenciesTiledArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeDependenciesTiledArchive*>(&to_msg);
  auto& from = static_cast<const RangeDependenciesTiledArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeDependenciesTiledArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.range_precedents_tile_.MergeFrom(from._impl_.range_precedents_tile_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeDependenciesTiledArchive::CopyFrom(const RangeDependenciesTiledArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeDependenciesTiledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDependenciesTiledArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.range_precedents_tile_))
    return false;
  return true;
}

void RangeDependenciesTiledArchive::InternalSwap(RangeDependenciesTiledArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.range_precedents_tile_.InternalSwap(&other->_impl_.range_precedents_tile_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeDependenciesTiledArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[43]);
}

// ===================================================================

class SpanningDependenciesArchive_ReferringColumnToLocalCells::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesArchive_ReferringColumnToLocalCells>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpanningDependenciesArchive_ReferringColumnToLocalCells::SpanningDependenciesArchive_ReferringColumnToLocalCells(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
}
SpanningDependenciesArchive_ReferringColumnToLocalCells::SpanningDependenciesArchive_ReferringColumnToLocalCells(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanningDependenciesArchive_ReferringColumnToLocalCells* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_coordinate_){from._impl_.cell_coordinate_}
    , decltype(_impl_.column_){}
    , decltype(_impl_.range_context_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_context_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.range_context_));
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
}

inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_coordinate_){arena}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.range_context_){0}
  };
}

SpanningDependenciesArchive_ReferringColumnToLocalCells::~SpanningDependenciesArchive_ReferringColumnToLocalCells() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanningDependenciesArchive_ReferringColumnToLocalCells::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_coordinate_.~RepeatedPtrField();
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_coordinate_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.range_context_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.range_context_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesArchive_ReferringColumnToLocalCells::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(val))) {
            _internal_set_range_context(static_cast<::TSCE::SpanningDependenciesArchive_RangeContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_coordinate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanningDependenciesArchive_ReferringColumnToLocalCells::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_range_context(), target);
  }

  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_coordinate_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_coordinate(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  return target;
}

size_t SpanningDependenciesArchive_ReferringColumnToLocalCells::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_range_context()) {
    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_context());
  }

  return total_size;
}
size_t SpanningDependenciesArchive_ReferringColumnToLocalCells::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_context());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateArchive cell_coordinate = 3;
  total_size += 1UL * this->_internal_cell_coordinate_size();
  for (const auto& msg : this->_impl_.cell_coordinate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanningDependenciesArchive_ReferringColumnToLocalCells::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanningDependenciesArchive_ReferringColumnToLocalCells::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanningDependenciesArchive_ReferringColumnToLocalCells::GetClassData() const { return &_class_data_; }


void SpanningDependenciesArchive_ReferringColumnToLocalCells::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanningDependenciesArchive_ReferringColumnToLocalCells*>(&to_msg);
  auto& from = static_cast<const SpanningDependenciesArchive_ReferringColumnToLocalCells&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_coordinate_.MergeFrom(from._impl_.cell_coordinate_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_context_ = from._impl_.range_context_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::CopyFrom(const SpanningDependenciesArchive_ReferringColumnToLocalCells& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive_ReferringColumnToLocalCells::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SpanningDependenciesArchive_ReferringColumnToLocalCells::InternalSwap(SpanningDependenciesArchive_ReferringColumnToLocalCells* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_coordinate_.InternalSwap(&other->_impl_.cell_coordinate_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_.range_context_)
      + sizeof(SpanningDependenciesArchive_ReferringColumnToLocalCells::_impl_.range_context_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToLocalCells, _impl_.column_)>(
          reinterpret_cast<char*>(&_impl_.column_),
          reinterpret_cast<char*>(&other->_impl_.column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesArchive_ReferringColumnToLocalCells::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[44]);
}

// ===================================================================

class SpanningDependenciesArchive_ReferringColumnToRemoteCells::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesArchive_ReferringColumnToRemoteCells>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpanningDependenciesArchive_ReferringColumnToRemoteCells::SpanningDependenciesArchive_ReferringColumnToRemoteCells(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
}
SpanningDependenciesArchive_ReferringColumnToRemoteCells::SpanningDependenciesArchive_ReferringColumnToRemoteCells(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanningDependenciesArchive_ReferringColumnToRemoteCells* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.internal_cell_reference_){from._impl_.internal_cell_reference_}
    , decltype(_impl_.column_){}
    , decltype(_impl_.range_context_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_context_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.range_context_));
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
}

inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.internal_cell_reference_){arena}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.range_context_){0}
  };
}

SpanningDependenciesArchive_ReferringColumnToRemoteCells::~SpanningDependenciesArchive_ReferringColumnToRemoteCells() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.internal_cell_reference_.~RepeatedPtrField();
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.internal_cell_reference_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.range_context_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.range_context_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesArchive_ReferringColumnToRemoteCells::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(val))) {
            _internal_set_range_context(static_cast<::TSCE::SpanningDependenciesArchive_RangeContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internal_cell_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanningDependenciesArchive_ReferringColumnToRemoteCells::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_range_context(), target);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_internal_cell_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_internal_cell_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  return target;
}

size_t SpanningDependenciesArchive_ReferringColumnToRemoteCells::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_range_context()) {
    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_context());
  }

  return total_size;
}
size_t SpanningDependenciesArchive_ReferringColumnToRemoteCells::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_context());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellReferenceArchive internal_cell_reference = 3;
  total_size += 1UL * this->_internal_internal_cell_reference_size();
  for (const auto& msg : this->_impl_.internal_cell_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanningDependenciesArchive_ReferringColumnToRemoteCells::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanningDependenciesArchive_ReferringColumnToRemoteCells::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanningDependenciesArchive_ReferringColumnToRemoteCells::GetClassData() const { return &_class_data_; }


void SpanningDependenciesArchive_ReferringColumnToRemoteCells::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanningDependenciesArchive_ReferringColumnToRemoteCells*>(&to_msg);
  auto& from = static_cast<const SpanningDependenciesArchive_ReferringColumnToRemoteCells&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.internal_cell_reference_.MergeFrom(from._impl_.internal_cell_reference_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_context_ = from._impl_.range_context_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::CopyFrom(const SpanningDependenciesArchive_ReferringColumnToRemoteCells& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive_ReferringColumnToRemoteCells::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.internal_cell_reference_))
    return false;
  return true;
}

void SpanningDependenciesArchive_ReferringColumnToRemoteCells::InternalSwap(SpanningDependenciesArchive_ReferringColumnToRemoteCells* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.internal_cell_reference_.InternalSwap(&other->_impl_.internal_cell_reference_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_.range_context_)
      + sizeof(SpanningDependenciesArchive_ReferringColumnToRemoteCells::_impl_.range_context_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive_ReferringColumnToRemoteCells, _impl_.column_)>(
          reinterpret_cast<char*>(&_impl_.column_),
          reinterpret_cast<char*>(&other->_impl_.column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesArchive_ReferringColumnToRemoteCells::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[45]);
}

// ===================================================================

class SpanningDependenciesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesArchive>()._impl_._has_bits_);
  static const ::TSCE::RangeCoordinateArchive& total_range_for_deleted_table(const SpanningDependenciesArchive* msg);
  static void set_has_total_range_for_deleted_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeCoordinateArchive& body_range_for_deleted_table(const SpanningDependenciesArchive* msg);
  static void set_has_body_range_for_deleted_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCE::RangeCoordinateArchive&
SpanningDependenciesArchive::_Internal::total_range_for_deleted_table(const SpanningDependenciesArchive* msg) {
  return *msg->_impl_.total_range_for_deleted_table_;
}
const ::TSCE::RangeCoordinateArchive&
SpanningDependenciesArchive::_Internal::body_range_for_deleted_table(const SpanningDependenciesArchive* msg) {
  return *msg->_impl_.body_range_for_deleted_table_;
}
SpanningDependenciesArchive::SpanningDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesArchive)
}
SpanningDependenciesArchive::SpanningDependenciesArchive(const SpanningDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanningDependenciesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){from._impl_.column_}
    , decltype(_impl_.range_context_){from._impl_.range_context_}
    , decltype(_impl_.cell_){from._impl_.cell_}
    , decltype(_impl_.referring_column_to_local_cells_){from._impl_.referring_column_to_local_cells_}
    , decltype(_impl_.referring_column_to_remote_cells_){from._impl_.referring_column_to_remote_cells_}
    , decltype(_impl_.total_range_for_deleted_table_){nullptr}
    , decltype(_impl_.body_range_for_deleted_table_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_range_for_deleted_table()) {
    _this->_impl_.total_range_for_deleted_table_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.total_range_for_deleted_table_);
  }
  if (from._internal_has_body_range_for_deleted_table()) {
    _this->_impl_.body_range_for_deleted_table_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.body_range_for_deleted_table_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesArchive)
}

inline void SpanningDependenciesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){arena}
    , decltype(_impl_.range_context_){arena}
    , decltype(_impl_.cell_){arena}
    , decltype(_impl_.referring_column_to_local_cells_){arena}
    , decltype(_impl_.referring_column_to_remote_cells_){arena}
    , decltype(_impl_.total_range_for_deleted_table_){nullptr}
    , decltype(_impl_.body_range_for_deleted_table_){nullptr}
  };
}

SpanningDependenciesArchive::~SpanningDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanningDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_.~RepeatedField();
  _impl_.range_context_.~RepeatedField();
  _impl_.cell_.~RepeatedPtrField();
  _impl_.referring_column_to_local_cells_.~RepeatedPtrField();
  _impl_.referring_column_to_remote_cells_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.total_range_for_deleted_table_;
  if (this != internal_default_instance()) delete _impl_.body_range_for_deleted_table_;
}

void SpanningDependenciesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanningDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_.Clear();
  _impl_.range_context_.Clear();
  _impl_.cell_.Clear();
  _impl_.referring_column_to_local_cells_.Clear();
  _impl_.referring_column_to_remote_cells_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.total_range_for_deleted_table_ != nullptr);
      _impl_.total_range_for_deleted_table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.body_range_for_deleted_table_ != nullptr);
      _impl_.body_range_for_deleted_table_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TSCE::SpanningDependenciesArchive_RangeContext_IsValid(val))) {
              _internal_add_range_context(static_cast<::TSCE::SpanningDependenciesArchive_RangeContext>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_range_context(), ptr, ctx, ::TSCE::SpanningDependenciesArchive_RangeContext_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellReferenceArchive cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_range_for_deleted_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_range_for_deleted_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referring_column_to_local_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_referring_column_to_remote_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanningDependenciesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 column = 1;
  for (int i = 0, n = this->_internal_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(i), target);
  }

  // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  for (int i = 0, n = this->_internal_range_context_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_range_context(i), target);
  }

  // repeated .TSCE.CellReferenceArchive cell = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::total_range_for_deleted_table(this),
        _Internal::total_range_for_deleted_table(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::body_range_for_deleted_table(this),
        _Internal::body_range_for_deleted_table(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referring_column_to_local_cells_size()); i < n; i++) {
    const auto& repfield = this->_internal_referring_column_to_local_cells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_referring_column_to_remote_cells_size()); i < n; i++) {
    const auto& repfield = this->_internal_referring_column_to_remote_cells(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesArchive)
  return target;
}

size_t SpanningDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 column = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_column_size());
    total_size += data_size;
  }

  // repeated .TSCE.SpanningDependenciesArchive.RangeContext range_context = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_range_context_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_range_context(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TSCE.CellReferenceArchive cell = 3;
  total_size += 1UL * this->_internal_cell_size();
  for (const auto& msg : this->_impl_.cell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells referring_column_to_local_cells = 6;
  total_size += 1UL * this->_internal_referring_column_to_local_cells_size();
  for (const auto& msg : this->_impl_.referring_column_to_local_cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells referring_column_to_remote_cells = 7;
  total_size += 1UL * this->_internal_referring_column_to_remote_cells_size();
  for (const auto& msg : this->_impl_.referring_column_to_remote_cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.RangeCoordinateArchive total_range_for_deleted_table = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.total_range_for_deleted_table_);
    }

    // optional .TSCE.RangeCoordinateArchive body_range_for_deleted_table = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_range_for_deleted_table_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanningDependenciesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanningDependenciesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanningDependenciesArchive::GetClassData() const { return &_class_data_; }


void SpanningDependenciesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanningDependenciesArchive*>(&to_msg);
  auto& from = static_cast<const SpanningDependenciesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_.MergeFrom(from._impl_.column_);
  _this->_impl_.range_context_.MergeFrom(from._impl_.range_context_);
  _this->_impl_.cell_.MergeFrom(from._impl_.cell_);
  _this->_impl_.referring_column_to_local_cells_.MergeFrom(from._impl_.referring_column_to_local_cells_);
  _this->_impl_.referring_column_to_remote_cells_.MergeFrom(from._impl_.referring_column_to_remote_cells_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_total_range_for_deleted_table()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_total_range_for_deleted_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_body_range_for_deleted_table()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_body_range_for_deleted_table());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanningDependenciesArchive::CopyFrom(const SpanningDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.referring_column_to_local_cells_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.referring_column_to_remote_cells_))
    return false;
  if (_internal_has_total_range_for_deleted_table()) {
    if (!_impl_.total_range_for_deleted_table_->IsInitialized()) return false;
  }
  if (_internal_has_body_range_for_deleted_table()) {
    if (!_impl_.body_range_for_deleted_table_->IsInitialized()) return false;
  }
  return true;
}

void SpanningDependenciesArchive::InternalSwap(SpanningDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.column_.InternalSwap(&other->_impl_.column_);
  _impl_.range_context_.InternalSwap(&other->_impl_.range_context_);
  _impl_.cell_.InternalSwap(&other->_impl_.cell_);
  _impl_.referring_column_to_local_cells_.InternalSwap(&other->_impl_.referring_column_to_local_cells_);
  _impl_.referring_column_to_remote_cells_.InternalSwap(&other->_impl_.referring_column_to_remote_cells_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive, _impl_.body_range_for_deleted_table_)
      + sizeof(SpanningDependenciesArchive::_impl_.body_range_for_deleted_table_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesArchive, _impl_.total_range_for_deleted_table_)>(
          reinterpret_cast<char*>(&_impl_.total_range_for_deleted_table_),
          reinterpret_cast<char*>(&other->_impl_.total_range_for_deleted_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[46]);
}

// ===================================================================

class SpanningDependenciesExpandedArchive_ExtentRange::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesExpandedArchive_ExtentRange>()._impl_._has_bits_);
  static void set_has_extent_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extent_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SpanningDependenciesExpandedArchive_ExtentRange::SpanningDependenciesExpandedArchive_ExtentRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
}
SpanningDependenciesExpandedArchive_ExtentRange::SpanningDependenciesExpandedArchive_ExtentRange(const SpanningDependenciesExpandedArchive_ExtentRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanningDependenciesExpandedArchive_ExtentRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extent_begin_){}
    , decltype(_impl_.extent_end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.extent_begin_, &from._impl_.extent_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.extent_end_) -
    reinterpret_cast<char*>(&_impl_.extent_begin_)) + sizeof(_impl_.extent_end_));
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
}

inline void SpanningDependenciesExpandedArchive_ExtentRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extent_begin_){0u}
    , decltype(_impl_.extent_end_){0u}
  };
}

SpanningDependenciesExpandedArchive_ExtentRange::~SpanningDependenciesExpandedArchive_ExtentRange() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanningDependenciesExpandedArchive_ExtentRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpanningDependenciesExpandedArchive_ExtentRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanningDependenciesExpandedArchive_ExtentRange::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.extent_begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.extent_end_) -
        reinterpret_cast<char*>(&_impl_.extent_begin_)) + sizeof(_impl_.extent_end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesExpandedArchive_ExtentRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 extent_begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_extent_begin(&has_bits);
          _impl_.extent_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 extent_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_extent_end(&has_bits);
          _impl_.extent_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanningDependenciesExpandedArchive_ExtentRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 extent_begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_extent_begin(), target);
  }

  // optional uint32 extent_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_extent_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  return target;
}

size_t SpanningDependenciesExpandedArchive_ExtentRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  size_t total_size = 0;

  // required uint32 extent_begin = 1;
  if (_internal_has_extent_begin()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extent_begin());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 extent_end = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_extent_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanningDependenciesExpandedArchive_ExtentRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanningDependenciesExpandedArchive_ExtentRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanningDependenciesExpandedArchive_ExtentRange::GetClassData() const { return &_class_data_; }


void SpanningDependenciesExpandedArchive_ExtentRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanningDependenciesExpandedArchive_ExtentRange*>(&to_msg);
  auto& from = static_cast<const SpanningDependenciesExpandedArchive_ExtentRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.extent_begin_ = from._impl_.extent_begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.extent_end_ = from._impl_.extent_end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanningDependenciesExpandedArchive_ExtentRange::CopyFrom(const SpanningDependenciesExpandedArchive_ExtentRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesExpandedArchive_ExtentRange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SpanningDependenciesExpandedArchive_ExtentRange::InternalSwap(SpanningDependenciesExpandedArchive_ExtentRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive_ExtentRange, _impl_.extent_end_)
      + sizeof(SpanningDependenciesExpandedArchive_ExtentRange::_impl_.extent_end_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive_ExtentRange, _impl_.extent_begin_)>(
          reinterpret_cast<char*>(&_impl_.extent_begin_),
          reinterpret_cast<char*>(&other->_impl_.extent_begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesExpandedArchive_ExtentRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[47]);
}

// ===================================================================

class SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext>()._impl_._has_bits_);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_context(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
}
SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext(const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ranges_){from._impl_.ranges_}
    , decltype(_impl_.owner_id_){}
    , decltype(_impl_.range_context_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.owner_id_, &from._impl_.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_context_) -
    reinterpret_cast<char*>(&_impl_.owner_id_)) + sizeof(_impl_.range_context_));
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
}

inline void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ranges_){arena}
    , decltype(_impl_.owner_id_){0u}
    , decltype(_impl_.range_context_){0}
  };
}

SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::~SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ranges_.~RepeatedPtrField();
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ranges_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.range_context_) -
        reinterpret_cast<char*>(&_impl_.owner_id_)) + sizeof(_impl_.range_context_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_owner_id(&has_bits);
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.SpanningDependenciesExpandedArchive.RangeContext range_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::SpanningDependenciesExpandedArchive_RangeContext_IsValid(val))) {
            _internal_set_range_context(static_cast<::TSCE::SpanningDependenciesExpandedArchive_RangeContext>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRange ranges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // required .TSCE.SpanningDependenciesExpandedArchive.RangeContext range_context = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_range_context(), target);
  }

  // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRange ranges = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  return target;
}

size_t SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  size_t total_size = 0;

  if (_internal_has_owner_id()) {
    // required uint32 owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  if (_internal_has_range_context()) {
    // required .TSCE.SpanningDependenciesExpandedArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_context());
  }

  return total_size;
}
size_t SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());

    // required .TSCE.SpanningDependenciesExpandedArchive.RangeContext range_context = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_range_context());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRange ranges = 3;
  total_size += 1UL * this->_internal_ranges_size();
  for (const auto& msg : this->_impl_.ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::GetClassData() const { return &_class_data_; }


void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext*>(&to_msg);
  auto& from = static_cast<const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ranges_.MergeFrom(from._impl_.ranges_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.owner_id_ = from._impl_.owner_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_context_ = from._impl_.range_context_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::CopyFrom(const SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ranges_))
    return false;
  return true;
}

void SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::InternalSwap(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ranges_.InternalSwap(&other->_impl_.ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, _impl_.range_context_)
      + sizeof(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::_impl_.range_context_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[48]);
}

// ===================================================================

class SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesExpandedArchive_CellCoordRefersToExtents>()._impl_._has_bits_);
  static const ::TSCE::CellCoordinateArchive& coordinate(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* msg);
  static void set_has_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_Internal::coordinate(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* msg) {
  return *msg->_impl_.coordinate_;
}
SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
}
SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ranges_by_table_context_){from._impl_.ranges_by_table_context_}
    , decltype(_impl_.coordinate_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coordinate()) {
    _this->_impl_.coordinate_ = new ::TSCE::CellCoordinateArchive(*from._impl_.coordinate_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
}

inline void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ranges_by_table_context_){arena}
    , decltype(_impl_.coordinate_){nullptr}
  };
}

SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::~SpanningDependenciesExpandedArchive_CellCoordRefersToExtents() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ranges_by_table_context_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.coordinate_;
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ranges_by_table_context_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.coordinate_ != nullptr);
    _impl_.coordinate_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext ranges_by_table_context = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ranges_by_table_context(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::coordinate(this),
        _Internal::coordinate(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext ranges_by_table_context = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ranges_by_table_context_size()); i < n; i++) {
    const auto& repfield = this->_internal_ranges_by_table_context(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  return target;
}

size_t SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  size_t total_size = 0;

  // required .TSCE.CellCoordinateArchive coordinate = 1;
  if (_internal_has_coordinate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinate_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext ranges_by_table_context = 2;
  total_size += 1UL * this->_internal_ranges_by_table_context_size();
  for (const auto& msg : this->_impl_.ranges_by_table_context_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::GetClassData() const { return &_class_data_; }


void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanningDependenciesExpandedArchive_CellCoordRefersToExtents*>(&to_msg);
  auto& from = static_cast<const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ranges_by_table_context_.MergeFrom(from._impl_.ranges_by_table_context_);
  if (from._internal_has_coordinate()) {
    _this->_internal_mutable_coordinate()->::TSCE::CellCoordinateArchive::MergeFrom(
        from._internal_coordinate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::CopyFrom(const SpanningDependenciesExpandedArchive_CellCoordRefersToExtents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ranges_by_table_context_))
    return false;
  return true;
}

void SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::InternalSwap(SpanningDependenciesExpandedArchive_CellCoordRefersToExtents* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ranges_by_table_context_.InternalSwap(&other->_impl_.ranges_by_table_context_);
  swap(_impl_.coordinate_, other->_impl_.coordinate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesExpandedArchive_CellCoordRefersToExtents::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[49]);
}

// ===================================================================

class SpanningDependenciesExpandedArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SpanningDependenciesExpandedArchive>()._impl_._has_bits_);
  static const ::TSCE::RangeCoordinateArchive& total_range_for_table(const SpanningDependenciesExpandedArchive* msg);
  static void set_has_total_range_for_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RangeCoordinateArchive& body_range_for_table(const SpanningDependenciesExpandedArchive* msg);
  static void set_has_body_range_for_table(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCE::RangeCoordinateArchive&
SpanningDependenciesExpandedArchive::_Internal::total_range_for_table(const SpanningDependenciesExpandedArchive* msg) {
  return *msg->_impl_.total_range_for_table_;
}
const ::TSCE::RangeCoordinateArchive&
SpanningDependenciesExpandedArchive::_Internal::body_range_for_table(const SpanningDependenciesExpandedArchive* msg) {
  return *msg->_impl_.body_range_for_table_;
}
SpanningDependenciesExpandedArchive::SpanningDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.SpanningDependenciesExpandedArchive)
}
SpanningDependenciesExpandedArchive::SpanningDependenciesExpandedArchive(const SpanningDependenciesExpandedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpanningDependenciesExpandedArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coord_refers_to_spans_){from._impl_.coord_refers_to_spans_}
    , decltype(_impl_.total_range_for_table_){nullptr}
    , decltype(_impl_.body_range_for_table_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_total_range_for_table()) {
    _this->_impl_.total_range_for_table_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.total_range_for_table_);
  }
  if (from._internal_has_body_range_for_table()) {
    _this->_impl_.body_range_for_table_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.body_range_for_table_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.SpanningDependenciesExpandedArchive)
}

inline void SpanningDependenciesExpandedArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coord_refers_to_spans_){arena}
    , decltype(_impl_.total_range_for_table_){nullptr}
    , decltype(_impl_.body_range_for_table_){nullptr}
  };
}

SpanningDependenciesExpandedArchive::~SpanningDependenciesExpandedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.SpanningDependenciesExpandedArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpanningDependenciesExpandedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.coord_refers_to_spans_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.total_range_for_table_;
  if (this != internal_default_instance()) delete _impl_.body_range_for_table_;
}

void SpanningDependenciesExpandedArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpanningDependenciesExpandedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SpanningDependenciesExpandedArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.coord_refers_to_spans_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.total_range_for_table_ != nullptr);
      _impl_.total_range_for_table_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.body_range_for_table_ != nullptr);
      _impl_.body_range_for_table_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpanningDependenciesExpandedArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents coord_refers_to_spans = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coord_refers_to_spans(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive total_range_for_table = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_total_range_for_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeCoordinateArchive body_range_for_table = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_range_for_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpanningDependenciesExpandedArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SpanningDependenciesExpandedArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents coord_refers_to_spans = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coord_refers_to_spans_size()); i < n; i++) {
    const auto& repfield = this->_internal_coord_refers_to_spans(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.RangeCoordinateArchive total_range_for_table = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::total_range_for_table(this),
        _Internal::total_range_for_table(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeCoordinateArchive body_range_for_table = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::body_range_for_table(this),
        _Internal::body_range_for_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SpanningDependenciesExpandedArchive)
  return target;
}

size_t SpanningDependenciesExpandedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SpanningDependenciesExpandedArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents coord_refers_to_spans = 1;
  total_size += 1UL * this->_internal_coord_refers_to_spans_size();
  for (const auto& msg : this->_impl_.coord_refers_to_spans_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.RangeCoordinateArchive total_range_for_table = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.total_range_for_table_);
    }

    // optional .TSCE.RangeCoordinateArchive body_range_for_table = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.body_range_for_table_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpanningDependenciesExpandedArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpanningDependenciesExpandedArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpanningDependenciesExpandedArchive::GetClassData() const { return &_class_data_; }


void SpanningDependenciesExpandedArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpanningDependenciesExpandedArchive*>(&to_msg);
  auto& from = static_cast<const SpanningDependenciesExpandedArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SpanningDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.coord_refers_to_spans_.MergeFrom(from._impl_.coord_refers_to_spans_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_total_range_for_table()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_total_range_for_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_body_range_for_table()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_body_range_for_table());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpanningDependenciesExpandedArchive::CopyFrom(const SpanningDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SpanningDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpanningDependenciesExpandedArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.coord_refers_to_spans_))
    return false;
  if (_internal_has_total_range_for_table()) {
    if (!_impl_.total_range_for_table_->IsInitialized()) return false;
  }
  if (_internal_has_body_range_for_table()) {
    if (!_impl_.body_range_for_table_->IsInitialized()) return false;
  }
  return true;
}

void SpanningDependenciesExpandedArchive::InternalSwap(SpanningDependenciesExpandedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.coord_refers_to_spans_.InternalSwap(&other->_impl_.coord_refers_to_spans_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive, _impl_.body_range_for_table_)
      + sizeof(SpanningDependenciesExpandedArchive::_impl_.body_range_for_table_)
      - PROTOBUF_FIELD_OFFSET(SpanningDependenciesExpandedArchive, _impl_.total_range_for_table_)>(
          reinterpret_cast<char*>(&_impl_.total_range_for_table_),
          reinterpret_cast<char*>(&other->_impl_.total_range_for_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpanningDependenciesExpandedArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[50]);
}

// ===================================================================

class WholeOwnerDependenciesArchive::_Internal {
 public:
};

WholeOwnerDependenciesArchive::WholeOwnerDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.WholeOwnerDependenciesArchive)
}
WholeOwnerDependenciesArchive::WholeOwnerDependenciesArchive(const WholeOwnerDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WholeOwnerDependenciesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dependent_cell_){from._impl_.dependent_cell_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.WholeOwnerDependenciesArchive)
}

inline void WholeOwnerDependenciesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dependent_cell_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WholeOwnerDependenciesArchive::~WholeOwnerDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.WholeOwnerDependenciesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WholeOwnerDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dependent_cell_.~RepeatedPtrField();
}

void WholeOwnerDependenciesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WholeOwnerDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.WholeOwnerDependenciesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dependent_cell_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WholeOwnerDependenciesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dependent_cell(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WholeOwnerDependenciesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.WholeOwnerDependenciesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dependent_cell_size()); i < n; i++) {
    const auto& repfield = this->_internal_dependent_cell(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.WholeOwnerDependenciesArchive)
  return target;
}

size_t WholeOwnerDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.WholeOwnerDependenciesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellReferenceArchive dependent_cell = 1;
  total_size += 1UL * this->_internal_dependent_cell_size();
  for (const auto& msg : this->_impl_.dependent_cell_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WholeOwnerDependenciesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WholeOwnerDependenciesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WholeOwnerDependenciesArchive::GetClassData() const { return &_class_data_; }


void WholeOwnerDependenciesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WholeOwnerDependenciesArchive*>(&to_msg);
  auto& from = static_cast<const WholeOwnerDependenciesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.WholeOwnerDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dependent_cell_.MergeFrom(from._impl_.dependent_cell_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WholeOwnerDependenciesArchive::CopyFrom(const WholeOwnerDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.WholeOwnerDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WholeOwnerDependenciesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.dependent_cell_))
    return false;
  return true;
}

void WholeOwnerDependenciesArchive::InternalSwap(WholeOwnerDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dependent_cell_.InternalSwap(&other->_impl_.dependent_cell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WholeOwnerDependenciesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[51]);
}

// ===================================================================

class WholeOwnerDependenciesExpandedArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<WholeOwnerDependenciesExpandedArchive>()._impl_._has_bits_);
  static const ::TSCE::InternalCellRefSetArchive& dependent_cells(const WholeOwnerDependenciesExpandedArchive* msg);
  static void set_has_dependent_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::TSCE::InternalCellRefSetArchive&
WholeOwnerDependenciesExpandedArchive::_Internal::dependent_cells(const WholeOwnerDependenciesExpandedArchive* msg) {
  return *msg->_impl_.dependent_cells_;
}
WholeOwnerDependenciesExpandedArchive::WholeOwnerDependenciesExpandedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.WholeOwnerDependenciesExpandedArchive)
}
WholeOwnerDependenciesExpandedArchive::WholeOwnerDependenciesExpandedArchive(const WholeOwnerDependenciesExpandedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WholeOwnerDependenciesExpandedArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dependent_cells_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dependent_cells()) {
    _this->_impl_.dependent_cells_ = new ::TSCE::InternalCellRefSetArchive(*from._impl_.dependent_cells_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.WholeOwnerDependenciesExpandedArchive)
}

inline void WholeOwnerDependenciesExpandedArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.dependent_cells_){nullptr}
  };
}

WholeOwnerDependenciesExpandedArchive::~WholeOwnerDependenciesExpandedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.WholeOwnerDependenciesExpandedArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WholeOwnerDependenciesExpandedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.dependent_cells_;
}

void WholeOwnerDependenciesExpandedArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WholeOwnerDependenciesExpandedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.dependent_cells_ != nullptr);
    _impl_.dependent_cells_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WholeOwnerDependenciesExpandedArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSCE.InternalCellRefSetArchive dependent_cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependent_cells(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WholeOwnerDependenciesExpandedArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.InternalCellRefSetArchive dependent_cells = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dependent_cells(this),
        _Internal::dependent_cells(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.WholeOwnerDependenciesExpandedArchive)
  return target;
}

size_t WholeOwnerDependenciesExpandedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.InternalCellRefSetArchive dependent_cells = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dependent_cells_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WholeOwnerDependenciesExpandedArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WholeOwnerDependenciesExpandedArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WholeOwnerDependenciesExpandedArchive::GetClassData() const { return &_class_data_; }


void WholeOwnerDependenciesExpandedArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WholeOwnerDependenciesExpandedArchive*>(&to_msg);
  auto& from = static_cast<const WholeOwnerDependenciesExpandedArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dependent_cells()) {
    _this->_internal_mutable_dependent_cells()->::TSCE::InternalCellRefSetArchive::MergeFrom(
        from._internal_dependent_cells());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WholeOwnerDependenciesExpandedArchive::CopyFrom(const WholeOwnerDependenciesExpandedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.WholeOwnerDependenciesExpandedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WholeOwnerDependenciesExpandedArchive::IsInitialized() const {
  if (_internal_has_dependent_cells()) {
    if (!_impl_.dependent_cells_->IsInitialized()) return false;
  }
  return true;
}

void WholeOwnerDependenciesExpandedArchive::InternalSwap(WholeOwnerDependenciesExpandedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.dependent_cells_, other->_impl_.dependent_cells_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WholeOwnerDependenciesExpandedArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[52]);
}

// ===================================================================

class CellErrorsArchive_ErrorForCell::_Internal {
 public:
  using HasBits = decltype(std::declval<CellErrorsArchive_ErrorForCell>()._impl_._has_bits_);
  static const ::TSCE::CellCoordinateArchive& coordinate(const CellErrorsArchive_ErrorForCell* msg);
  static void set_has_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_flavor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::InternalCellReferenceArchive& err_due_to_cell(const CellErrorsArchive_ErrorForCell* msg);
  static void set_has_err_due_to_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TSCE::CellCoordinateArchive&
CellErrorsArchive_ErrorForCell::_Internal::coordinate(const CellErrorsArchive_ErrorForCell* msg) {
  return *msg->_impl_.coordinate_;
}
const ::TSCE::InternalCellReferenceArchive&
CellErrorsArchive_ErrorForCell::_Internal::err_due_to_cell(const CellErrorsArchive_ErrorForCell* msg) {
  return *msg->_impl_.err_due_to_cell_;
}
CellErrorsArchive_ErrorForCell::CellErrorsArchive_ErrorForCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellErrorsArchive.ErrorForCell)
}
CellErrorsArchive_ErrorForCell::CellErrorsArchive_ErrorForCell(const CellErrorsArchive_ErrorForCell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellErrorsArchive_ErrorForCell* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coordinate_){nullptr}
    , decltype(_impl_.err_due_to_cell_){nullptr}
    , decltype(_impl_.error_flavor_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_coordinate()) {
    _this->_impl_.coordinate_ = new ::TSCE::CellCoordinateArchive(*from._impl_.coordinate_);
  }
  if (from._internal_has_err_due_to_cell()) {
    _this->_impl_.err_due_to_cell_ = new ::TSCE::InternalCellReferenceArchive(*from._impl_.err_due_to_cell_);
  }
  _this->_impl_.error_flavor_ = from._impl_.error_flavor_;
  // @@protoc_insertion_point(copy_constructor:TSCE.CellErrorsArchive.ErrorForCell)
}

inline void CellErrorsArchive_ErrorForCell::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coordinate_){nullptr}
    , decltype(_impl_.err_due_to_cell_){nullptr}
    , decltype(_impl_.error_flavor_){0}
  };
}

CellErrorsArchive_ErrorForCell::~CellErrorsArchive_ErrorForCell() {
  // @@protoc_insertion_point(destructor:TSCE.CellErrorsArchive.ErrorForCell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellErrorsArchive_ErrorForCell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.coordinate_;
  if (this != internal_default_instance()) delete _impl_.err_due_to_cell_;
}

void CellErrorsArchive_ErrorForCell::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellErrorsArchive_ErrorForCell::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellErrorsArchive.ErrorForCell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.coordinate_ != nullptr);
      _impl_.coordinate_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.err_due_to_cell_ != nullptr);
      _impl_.err_due_to_cell_->Clear();
    }
  }
  _impl_.error_flavor_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellErrorsArchive_ErrorForCell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellCoordinateArchive coordinate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellErrorsArchive.ErrorFlavor error_flavor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::CellErrorsArchive_ErrorFlavor_IsValid(val))) {
            _internal_set_error_flavor(static_cast<::TSCE::CellErrorsArchive_ErrorFlavor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellReferenceArchive err_due_to_cell = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_err_due_to_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellErrorsArchive_ErrorForCell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellErrorsArchive.ErrorForCell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellCoordinateArchive coordinate = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::coordinate(this),
        _Internal::coordinate(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.CellErrorsArchive.ErrorFlavor error_flavor = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_error_flavor(), target);
  }

  // optional .TSCE.InternalCellReferenceArchive err_due_to_cell = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::err_due_to_cell(this),
        _Internal::err_due_to_cell(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellErrorsArchive.ErrorForCell)
  return target;
}

size_t CellErrorsArchive_ErrorForCell::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CellErrorsArchive.ErrorForCell)
  size_t total_size = 0;

  if (_internal_has_coordinate()) {
    // required .TSCE.CellCoordinateArchive coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinate_);
  }

  if (_internal_has_error_flavor()) {
    // required .TSCE.CellErrorsArchive.ErrorFlavor error_flavor = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error_flavor());
  }

  return total_size;
}
size_t CellErrorsArchive_ErrorForCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellErrorsArchive.ErrorForCell)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TSCE.CellCoordinateArchive coordinate = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coordinate_);

    // required .TSCE.CellErrorsArchive.ErrorFlavor error_flavor = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_error_flavor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.InternalCellReferenceArchive err_due_to_cell = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_due_to_cell_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellErrorsArchive_ErrorForCell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellErrorsArchive_ErrorForCell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellErrorsArchive_ErrorForCell::GetClassData() const { return &_class_data_; }


void CellErrorsArchive_ErrorForCell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellErrorsArchive_ErrorForCell*>(&to_msg);
  auto& from = static_cast<const CellErrorsArchive_ErrorForCell&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellErrorsArchive.ErrorForCell)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_coordinate()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_coordinate());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_err_due_to_cell()->::TSCE::InternalCellReferenceArchive::MergeFrom(
          from._internal_err_due_to_cell());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.error_flavor_ = from._impl_.error_flavor_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellErrorsArchive_ErrorForCell::CopyFrom(const CellErrorsArchive_ErrorForCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellErrorsArchive.ErrorForCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellErrorsArchive_ErrorForCell::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_err_due_to_cell()) {
    if (!_impl_.err_due_to_cell_->IsInitialized()) return false;
  }
  return true;
}

void CellErrorsArchive_ErrorForCell::InternalSwap(CellErrorsArchive_ErrorForCell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellErrorsArchive_ErrorForCell, _impl_.error_flavor_)
      + sizeof(CellErrorsArchive_ErrorForCell::_impl_.error_flavor_)
      - PROTOBUF_FIELD_OFFSET(CellErrorsArchive_ErrorForCell, _impl_.coordinate_)>(
          reinterpret_cast<char*>(&_impl_.coordinate_),
          reinterpret_cast<char*>(&other->_impl_.coordinate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellErrorsArchive_ErrorForCell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[53]);
}

// ===================================================================

class CellErrorsArchive::_Internal {
 public:
};

CellErrorsArchive::CellErrorsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellErrorsArchive)
}
CellErrorsArchive::CellErrorsArchive(const CellErrorsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellErrorsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.errors_){from._impl_.errors_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellErrorsArchive)
}

inline void CellErrorsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.errors_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CellErrorsArchive::~CellErrorsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellErrorsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellErrorsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.errors_.~RepeatedPtrField();
}

void CellErrorsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellErrorsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellErrorsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errors_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellErrorsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellErrorsArchive.ErrorForCell errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellErrorsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellErrorsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellErrorsArchive.ErrorForCell errors = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_errors_size()); i < n; i++) {
    const auto& repfield = this->_internal_errors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellErrorsArchive)
  return target;
}

size_t CellErrorsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellErrorsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellErrorsArchive.ErrorForCell errors = 1;
  total_size += 1UL * this->_internal_errors_size();
  for (const auto& msg : this->_impl_.errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellErrorsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellErrorsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellErrorsArchive::GetClassData() const { return &_class_data_; }


void CellErrorsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellErrorsArchive*>(&to_msg);
  auto& from = static_cast<const CellErrorsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellErrorsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.errors_.MergeFrom(from._impl_.errors_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellErrorsArchive::CopyFrom(const CellErrorsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellErrorsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellErrorsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.errors_))
    return false;
  return true;
}

void CellErrorsArchive::InternalSwap(CellErrorsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellErrorsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[54]);
}

// ===================================================================

class UuidReferencesArchive_TableRef::_Internal {
 public:
  using HasBits = decltype(std::declval<UuidReferencesArchive_TableRef>()._impl_._has_bits_);
  static const ::TSP::UUID& owner_uuid(const UuidReferencesArchive_TableRef* msg);
  static void set_has_owner_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordSetArchive& coord_set(const UuidReferencesArchive_TableRef* msg);
  static void set_has_coord_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
UuidReferencesArchive_TableRef::_Internal::owner_uuid(const UuidReferencesArchive_TableRef* msg) {
  return *msg->_impl_.owner_uuid_;
}
const ::TSCE::CellCoordSetArchive&
UuidReferencesArchive_TableRef::_Internal::coord_set(const UuidReferencesArchive_TableRef* msg) {
  return *msg->_impl_.coord_set_;
}
void UuidReferencesArchive_TableRef::clear_owner_uuid() {
  if (_impl_.owner_uuid_ != nullptr) _impl_.owner_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UuidReferencesArchive_TableRef::UuidReferencesArchive_TableRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferencesArchive.TableRef)
}
UuidReferencesArchive_TableRef::UuidReferencesArchive_TableRef(const UuidReferencesArchive_TableRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UuidReferencesArchive_TableRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_uuid_){nullptr}
    , decltype(_impl_.coord_set_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uuid()) {
    _this->_impl_.owner_uuid_ = new ::TSP::UUID(*from._impl_.owner_uuid_);
  }
  if (from._internal_has_coord_set()) {
    _this->_impl_.coord_set_ = new ::TSCE::CellCoordSetArchive(*from._impl_.coord_set_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferencesArchive.TableRef)
}

inline void UuidReferencesArchive_TableRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_uuid_){nullptr}
    , decltype(_impl_.coord_set_){nullptr}
  };
}

UuidReferencesArchive_TableRef::~UuidReferencesArchive_TableRef() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferencesArchive.TableRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UuidReferencesArchive_TableRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.owner_uuid_;
  if (this != internal_default_instance()) delete _impl_.coord_set_;
}

void UuidReferencesArchive_TableRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UuidReferencesArchive_TableRef::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferencesArchive.TableRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.owner_uuid_ != nullptr);
      _impl_.owner_uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.coord_set_ != nullptr);
      _impl_.coord_set_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferencesArchive_TableRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive coord_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UuidReferencesArchive_TableRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferencesArchive.TableRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID owner_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner_uuid(this),
        _Internal::owner_uuid(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive coord_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coord_set(this),
        _Internal::coord_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferencesArchive.TableRef)
  return target;
}

size_t UuidReferencesArchive_TableRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferencesArchive.TableRef)
  size_t total_size = 0;

  // required .TSP.UUID owner_uuid = 1;
  if (_internal_has_owner_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_uuid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.CellCoordSetArchive coord_set = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coord_set_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UuidReferencesArchive_TableRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UuidReferencesArchive_TableRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UuidReferencesArchive_TableRef::GetClassData() const { return &_class_data_; }


void UuidReferencesArchive_TableRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UuidReferencesArchive_TableRef*>(&to_msg);
  auto& from = static_cast<const UuidReferencesArchive_TableRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferencesArchive.TableRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_uuid()->::TSP::UUID::MergeFrom(
          from._internal_owner_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_coord_set()->::TSCE::CellCoordSetArchive::MergeFrom(
          from._internal_coord_set());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UuidReferencesArchive_TableRef::CopyFrom(const UuidReferencesArchive_TableRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferencesArchive.TableRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferencesArchive_TableRef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_owner_uuid()) {
    if (!_impl_.owner_uuid_->IsInitialized()) return false;
  }
  if (_internal_has_coord_set()) {
    if (!_impl_.coord_set_->IsInitialized()) return false;
  }
  return true;
}

void UuidReferencesArchive_TableRef::InternalSwap(UuidReferencesArchive_TableRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UuidReferencesArchive_TableRef, _impl_.coord_set_)
      + sizeof(UuidReferencesArchive_TableRef::_impl_.coord_set_)
      - PROTOBUF_FIELD_OFFSET(UuidReferencesArchive_TableRef, _impl_.owner_uuid_)>(
          reinterpret_cast<char*>(&_impl_.owner_uuid_),
          reinterpret_cast<char*>(&other->_impl_.owner_uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferencesArchive_TableRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[55]);
}

// ===================================================================

class UuidReferencesArchive_UuidRef::_Internal {
 public:
  using HasBits = decltype(std::declval<UuidReferencesArchive_UuidRef>()._impl_._has_bits_);
  static const ::TSP::UUID& uuid(const UuidReferencesArchive_UuidRef* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellCoordSetArchive& coord_set(const UuidReferencesArchive_UuidRef* msg);
  static void set_has_coord_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
UuidReferencesArchive_UuidRef::_Internal::uuid(const UuidReferencesArchive_UuidRef* msg) {
  return *msg->_impl_.uuid_;
}
const ::TSCE::CellCoordSetArchive&
UuidReferencesArchive_UuidRef::_Internal::coord_set(const UuidReferencesArchive_UuidRef* msg) {
  return *msg->_impl_.coord_set_;
}
void UuidReferencesArchive_UuidRef::clear_uuid() {
  if (_impl_.uuid_ != nullptr) _impl_.uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UuidReferencesArchive_UuidRef::UuidReferencesArchive_UuidRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferencesArchive.UuidRef)
}
UuidReferencesArchive_UuidRef::UuidReferencesArchive_UuidRef(const UuidReferencesArchive_UuidRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UuidReferencesArchive_UuidRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_){nullptr}
    , decltype(_impl_.coord_set_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_ = new ::TSP::UUID(*from._impl_.uuid_);
  }
  if (from._internal_has_coord_set()) {
    _this->_impl_.coord_set_ = new ::TSCE::CellCoordSetArchive(*from._impl_.coord_set_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferencesArchive.UuidRef)
}

inline void UuidReferencesArchive_UuidRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_){nullptr}
    , decltype(_impl_.coord_set_){nullptr}
  };
}

UuidReferencesArchive_UuidRef::~UuidReferencesArchive_UuidRef() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferencesArchive.UuidRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UuidReferencesArchive_UuidRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uuid_;
  if (this != internal_default_instance()) delete _impl_.coord_set_;
}

void UuidReferencesArchive_UuidRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UuidReferencesArchive_UuidRef::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferencesArchive.UuidRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.uuid_ != nullptr);
      _impl_.uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.coord_set_ != nullptr);
      _impl_.coord_set_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferencesArchive_UuidRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellCoordSetArchive coord_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coord_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UuidReferencesArchive_UuidRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferencesArchive.UuidRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::uuid(this),
        _Internal::uuid(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellCoordSetArchive coord_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::coord_set(this),
        _Internal::coord_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferencesArchive.UuidRef)
  return target;
}

size_t UuidReferencesArchive_UuidRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferencesArchive.UuidRef)
  size_t total_size = 0;

  // required .TSP.UUID uuid = 1;
  if (_internal_has_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uuid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.CellCoordSetArchive coord_set = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.coord_set_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UuidReferencesArchive_UuidRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UuidReferencesArchive_UuidRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UuidReferencesArchive_UuidRef::GetClassData() const { return &_class_data_; }


void UuidReferencesArchive_UuidRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UuidReferencesArchive_UuidRef*>(&to_msg);
  auto& from = static_cast<const UuidReferencesArchive_UuidRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferencesArchive.UuidRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_uuid()->::TSP::UUID::MergeFrom(
          from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_coord_set()->::TSCE::CellCoordSetArchive::MergeFrom(
          from._internal_coord_set());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UuidReferencesArchive_UuidRef::CopyFrom(const UuidReferencesArchive_UuidRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferencesArchive.UuidRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferencesArchive_UuidRef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_uuid()) {
    if (!_impl_.uuid_->IsInitialized()) return false;
  }
  if (_internal_has_coord_set()) {
    if (!_impl_.coord_set_->IsInitialized()) return false;
  }
  return true;
}

void UuidReferencesArchive_UuidRef::InternalSwap(UuidReferencesArchive_UuidRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UuidReferencesArchive_UuidRef, _impl_.coord_set_)
      + sizeof(UuidReferencesArchive_UuidRef::_impl_.coord_set_)
      - PROTOBUF_FIELD_OFFSET(UuidReferencesArchive_UuidRef, _impl_.uuid_)>(
          reinterpret_cast<char*>(&_impl_.uuid_),
          reinterpret_cast<char*>(&other->_impl_.uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferencesArchive_UuidRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[56]);
}

// ===================================================================

class UuidReferencesArchive_TableWithUuidRef::_Internal {
 public:
  using HasBits = decltype(std::declval<UuidReferencesArchive_TableWithUuidRef>()._impl_._has_bits_);
  static const ::TSP::UUID& owner_uuid(const UuidReferencesArchive_TableWithUuidRef* msg);
  static void set_has_owner_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
UuidReferencesArchive_TableWithUuidRef::_Internal::owner_uuid(const UuidReferencesArchive_TableWithUuidRef* msg) {
  return *msg->_impl_.owner_uuid_;
}
void UuidReferencesArchive_TableWithUuidRef::clear_owner_uuid() {
  if (_impl_.owner_uuid_ != nullptr) _impl_.owner_uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UuidReferencesArchive_TableWithUuidRef::UuidReferencesArchive_TableWithUuidRef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferencesArchive.TableWithUuidRef)
}
UuidReferencesArchive_TableWithUuidRef::UuidReferencesArchive_TableWithUuidRef(const UuidReferencesArchive_TableWithUuidRef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UuidReferencesArchive_TableWithUuidRef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_refs_){from._impl_.uuid_refs_}
    , decltype(_impl_.owner_uuid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uuid()) {
    _this->_impl_.owner_uuid_ = new ::TSP::UUID(*from._impl_.owner_uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferencesArchive.TableWithUuidRef)
}

inline void UuidReferencesArchive_TableWithUuidRef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_refs_){arena}
    , decltype(_impl_.owner_uuid_){nullptr}
  };
}

UuidReferencesArchive_TableWithUuidRef::~UuidReferencesArchive_TableWithUuidRef() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferencesArchive.TableWithUuidRef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UuidReferencesArchive_TableWithUuidRef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_refs_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.owner_uuid_;
}

void UuidReferencesArchive_TableWithUuidRef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UuidReferencesArchive_TableWithUuidRef::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_refs_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_uuid_ != nullptr);
    _impl_.owner_uuid_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferencesArchive_TableWithUuidRef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.UuidReferencesArchive.UuidRef uuid_refs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuid_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UuidReferencesArchive_TableWithUuidRef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID owner_uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner_uuid(this),
        _Internal::owner_uuid(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.UuidReferencesArchive.UuidRef uuid_refs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uuid_refs_size()); i < n; i++) {
    const auto& repfield = this->_internal_uuid_refs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferencesArchive.TableWithUuidRef)
  return target;
}

size_t UuidReferencesArchive_TableWithUuidRef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  size_t total_size = 0;

  // required .TSP.UUID owner_uuid = 1;
  if (_internal_has_owner_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_uuid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UuidReferencesArchive.UuidRef uuid_refs = 2;
  total_size += 1UL * this->_internal_uuid_refs_size();
  for (const auto& msg : this->_impl_.uuid_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UuidReferencesArchive_TableWithUuidRef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UuidReferencesArchive_TableWithUuidRef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UuidReferencesArchive_TableWithUuidRef::GetClassData() const { return &_class_data_; }


void UuidReferencesArchive_TableWithUuidRef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UuidReferencesArchive_TableWithUuidRef*>(&to_msg);
  auto& from = static_cast<const UuidReferencesArchive_TableWithUuidRef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uuid_refs_.MergeFrom(from._impl_.uuid_refs_);
  if (from._internal_has_owner_uuid()) {
    _this->_internal_mutable_owner_uuid()->::TSP::UUID::MergeFrom(
        from._internal_owner_uuid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UuidReferencesArchive_TableWithUuidRef::CopyFrom(const UuidReferencesArchive_TableWithUuidRef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferencesArchive.TableWithUuidRef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferencesArchive_TableWithUuidRef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uuid_refs_))
    return false;
  if (_internal_has_owner_uuid()) {
    if (!_impl_.owner_uuid_->IsInitialized()) return false;
  }
  return true;
}

void UuidReferencesArchive_TableWithUuidRef::InternalSwap(UuidReferencesArchive_TableWithUuidRef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.uuid_refs_.InternalSwap(&other->_impl_.uuid_refs_);
  swap(_impl_.owner_uuid_, other->_impl_.owner_uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferencesArchive_TableWithUuidRef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[57]);
}

// ===================================================================

class UuidReferencesArchive::_Internal {
 public:
};

UuidReferencesArchive::UuidReferencesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferencesArchive)
}
UuidReferencesArchive::UuidReferencesArchive(const UuidReferencesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UuidReferencesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_refs_){from._impl_.table_refs_}
    , decltype(_impl_.table_uuid_refs_){from._impl_.table_uuid_refs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferencesArchive)
}

inline void UuidReferencesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_refs_){arena}
    , decltype(_impl_.table_uuid_refs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UuidReferencesArchive::~UuidReferencesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferencesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UuidReferencesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_refs_.~RepeatedPtrField();
  _impl_.table_uuid_refs_.~RepeatedPtrField();
}

void UuidReferencesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UuidReferencesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferencesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_refs_.Clear();
  _impl_.table_uuid_refs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferencesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.UuidReferencesArchive.TableRef table_refs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.UuidReferencesArchive.TableWithUuidRef table_uuid_refs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_uuid_refs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UuidReferencesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferencesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.UuidReferencesArchive.TableRef table_refs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_table_refs_size()); i < n; i++) {
    const auto& repfield = this->_internal_table_refs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.UuidReferencesArchive.TableWithUuidRef table_uuid_refs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_table_uuid_refs_size()); i < n; i++) {
    const auto& repfield = this->_internal_table_uuid_refs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferencesArchive)
  return target;
}

size_t UuidReferencesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferencesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UuidReferencesArchive.TableRef table_refs = 1;
  total_size += 1UL * this->_internal_table_refs_size();
  for (const auto& msg : this->_impl_.table_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.UuidReferencesArchive.TableWithUuidRef table_uuid_refs = 2;
  total_size += 1UL * this->_internal_table_uuid_refs_size();
  for (const auto& msg : this->_impl_.table_uuid_refs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UuidReferencesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UuidReferencesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UuidReferencesArchive::GetClassData() const { return &_class_data_; }


void UuidReferencesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UuidReferencesArchive*>(&to_msg);
  auto& from = static_cast<const UuidReferencesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferencesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.table_refs_.MergeFrom(from._impl_.table_refs_);
  _this->_impl_.table_uuid_refs_.MergeFrom(from._impl_.table_uuid_refs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UuidReferencesArchive::CopyFrom(const UuidReferencesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferencesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferencesArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.table_refs_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.table_uuid_refs_))
    return false;
  return true;
}

void UuidReferencesArchive::InternalSwap(UuidReferencesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.table_refs_.InternalSwap(&other->_impl_.table_refs_);
  _impl_.table_uuid_refs_.InternalSwap(&other->_impl_.table_uuid_refs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferencesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[58]);
}

// ===================================================================

class FormulaOwnerDependenciesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaOwnerDependenciesArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& formula_owner_uid(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_formula_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_internal_formula_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_owner_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSCE::CellDependenciesExpandedArchive& cell_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_cell_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeDependenciesArchive& range_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_range_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::VolatileDependenciesExpandedArchive& volatile_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_volatile_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::SpanningDependenciesExpandedArchive& spanning_column_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_spanning_column_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::SpanningDependenciesExpandedArchive& spanning_row_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_spanning_row_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::WholeOwnerDependenciesExpandedArchive& whole_owner_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_whole_owner_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCE::CellErrorsArchive& cell_errors(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_cell_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& formula_owner(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_formula_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& base_owner_uid(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_base_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCE::CellDependenciesTiledArchive& tiled_cell_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_tiled_cell_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCE::UuidReferencesArchive& uuid_references(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_uuid_references(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCE::RangeDependenciesTiledArchive& tiled_range_dependencies(const FormulaOwnerDependenciesArchive* msg);
  static void set_has_tiled_range_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00002001) ^ 0x00002001) != 0;
  }
};

const ::TSP::UUID&
FormulaOwnerDependenciesArchive::_Internal::formula_owner_uid(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.formula_owner_uid_;
}
const ::TSCE::CellDependenciesExpandedArchive&
FormulaOwnerDependenciesArchive::_Internal::cell_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.cell_dependencies_;
}
const ::TSCE::RangeDependenciesArchive&
FormulaOwnerDependenciesArchive::_Internal::range_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.range_dependencies_;
}
const ::TSCE::VolatileDependenciesExpandedArchive&
FormulaOwnerDependenciesArchive::_Internal::volatile_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.volatile_dependencies_;
}
const ::TSCE::SpanningDependenciesExpandedArchive&
FormulaOwnerDependenciesArchive::_Internal::spanning_column_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.spanning_column_dependencies_;
}
const ::TSCE::SpanningDependenciesExpandedArchive&
FormulaOwnerDependenciesArchive::_Internal::spanning_row_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.spanning_row_dependencies_;
}
const ::TSCE::WholeOwnerDependenciesExpandedArchive&
FormulaOwnerDependenciesArchive::_Internal::whole_owner_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.whole_owner_dependencies_;
}
const ::TSCE::CellErrorsArchive&
FormulaOwnerDependenciesArchive::_Internal::cell_errors(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.cell_errors_;
}
const ::TSP::Reference&
FormulaOwnerDependenciesArchive::_Internal::formula_owner(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.formula_owner_;
}
const ::TSP::UUID&
FormulaOwnerDependenciesArchive::_Internal::base_owner_uid(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.base_owner_uid_;
}
const ::TSCE::CellDependenciesTiledArchive&
FormulaOwnerDependenciesArchive::_Internal::tiled_cell_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.tiled_cell_dependencies_;
}
const ::TSCE::UuidReferencesArchive&
FormulaOwnerDependenciesArchive::_Internal::uuid_references(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.uuid_references_;
}
const ::TSCE::RangeDependenciesTiledArchive&
FormulaOwnerDependenciesArchive::_Internal::tiled_range_dependencies(const FormulaOwnerDependenciesArchive* msg) {
  return *msg->_impl_.tiled_range_dependencies_;
}
void FormulaOwnerDependenciesArchive::clear_formula_owner_uid() {
  if (_impl_.formula_owner_uid_ != nullptr) _impl_.formula_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FormulaOwnerDependenciesArchive::clear_formula_owner() {
  if (_impl_.formula_owner_ != nullptr) _impl_.formula_owner_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void FormulaOwnerDependenciesArchive::clear_base_owner_uid() {
  if (_impl_.base_owner_uid_ != nullptr) _impl_.base_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
FormulaOwnerDependenciesArchive::FormulaOwnerDependenciesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaOwnerDependenciesArchive)
}
FormulaOwnerDependenciesArchive::FormulaOwnerDependenciesArchive(const FormulaOwnerDependenciesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaOwnerDependenciesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_owner_uid_){nullptr}
    , decltype(_impl_.cell_dependencies_){nullptr}
    , decltype(_impl_.range_dependencies_){nullptr}
    , decltype(_impl_.volatile_dependencies_){nullptr}
    , decltype(_impl_.spanning_column_dependencies_){nullptr}
    , decltype(_impl_.spanning_row_dependencies_){nullptr}
    , decltype(_impl_.whole_owner_dependencies_){nullptr}
    , decltype(_impl_.cell_errors_){nullptr}
    , decltype(_impl_.formula_owner_){nullptr}
    , decltype(_impl_.base_owner_uid_){nullptr}
    , decltype(_impl_.tiled_cell_dependencies_){nullptr}
    , decltype(_impl_.uuid_references_){nullptr}
    , decltype(_impl_.tiled_range_dependencies_){nullptr}
    , decltype(_impl_.internal_formula_owner_id_){}
    , decltype(_impl_.owner_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula_owner_uid()) {
    _this->_impl_.formula_owner_uid_ = new ::TSP::UUID(*from._impl_.formula_owner_uid_);
  }
  if (from._internal_has_cell_dependencies()) {
    _this->_impl_.cell_dependencies_ = new ::TSCE::CellDependenciesExpandedArchive(*from._impl_.cell_dependencies_);
  }
  if (from._internal_has_range_dependencies()) {
    _this->_impl_.range_dependencies_ = new ::TSCE::RangeDependenciesArchive(*from._impl_.range_dependencies_);
  }
  if (from._internal_has_volatile_dependencies()) {
    _this->_impl_.volatile_dependencies_ = new ::TSCE::VolatileDependenciesExpandedArchive(*from._impl_.volatile_dependencies_);
  }
  if (from._internal_has_spanning_column_dependencies()) {
    _this->_impl_.spanning_column_dependencies_ = new ::TSCE::SpanningDependenciesExpandedArchive(*from._impl_.spanning_column_dependencies_);
  }
  if (from._internal_has_spanning_row_dependencies()) {
    _this->_impl_.spanning_row_dependencies_ = new ::TSCE::SpanningDependenciesExpandedArchive(*from._impl_.spanning_row_dependencies_);
  }
  if (from._internal_has_whole_owner_dependencies()) {
    _this->_impl_.whole_owner_dependencies_ = new ::TSCE::WholeOwnerDependenciesExpandedArchive(*from._impl_.whole_owner_dependencies_);
  }
  if (from._internal_has_cell_errors()) {
    _this->_impl_.cell_errors_ = new ::TSCE::CellErrorsArchive(*from._impl_.cell_errors_);
  }
  if (from._internal_has_formula_owner()) {
    _this->_impl_.formula_owner_ = new ::TSP::Reference(*from._impl_.formula_owner_);
  }
  if (from._internal_has_base_owner_uid()) {
    _this->_impl_.base_owner_uid_ = new ::TSP::UUID(*from._impl_.base_owner_uid_);
  }
  if (from._internal_has_tiled_cell_dependencies()) {
    _this->_impl_.tiled_cell_dependencies_ = new ::TSCE::CellDependenciesTiledArchive(*from._impl_.tiled_cell_dependencies_);
  }
  if (from._internal_has_uuid_references()) {
    _this->_impl_.uuid_references_ = new ::TSCE::UuidReferencesArchive(*from._impl_.uuid_references_);
  }
  if (from._internal_has_tiled_range_dependencies()) {
    _this->_impl_.tiled_range_dependencies_ = new ::TSCE::RangeDependenciesTiledArchive(*from._impl_.tiled_range_dependencies_);
  }
  ::memcpy(&_impl_.internal_formula_owner_id_, &from._impl_.internal_formula_owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.owner_kind_) -
    reinterpret_cast<char*>(&_impl_.internal_formula_owner_id_)) + sizeof(_impl_.owner_kind_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaOwnerDependenciesArchive)
}

inline void FormulaOwnerDependenciesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_owner_uid_){nullptr}
    , decltype(_impl_.cell_dependencies_){nullptr}
    , decltype(_impl_.range_dependencies_){nullptr}
    , decltype(_impl_.volatile_dependencies_){nullptr}
    , decltype(_impl_.spanning_column_dependencies_){nullptr}
    , decltype(_impl_.spanning_row_dependencies_){nullptr}
    , decltype(_impl_.whole_owner_dependencies_){nullptr}
    , decltype(_impl_.cell_errors_){nullptr}
    , decltype(_impl_.formula_owner_){nullptr}
    , decltype(_impl_.base_owner_uid_){nullptr}
    , decltype(_impl_.tiled_cell_dependencies_){nullptr}
    , decltype(_impl_.uuid_references_){nullptr}
    , decltype(_impl_.tiled_range_dependencies_){nullptr}
    , decltype(_impl_.internal_formula_owner_id_){0u}
    , decltype(_impl_.owner_kind_){0u}
  };
}

FormulaOwnerDependenciesArchive::~FormulaOwnerDependenciesArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaOwnerDependenciesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaOwnerDependenciesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.formula_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.cell_dependencies_;
  if (this != internal_default_instance()) delete _impl_.range_dependencies_;
  if (this != internal_default_instance()) delete _impl_.volatile_dependencies_;
  if (this != internal_default_instance()) delete _impl_.spanning_column_dependencies_;
  if (this != internal_default_instance()) delete _impl_.spanning_row_dependencies_;
  if (this != internal_default_instance()) delete _impl_.whole_owner_dependencies_;
  if (this != internal_default_instance()) delete _impl_.cell_errors_;
  if (this != internal_default_instance()) delete _impl_.formula_owner_;
  if (this != internal_default_instance()) delete _impl_.base_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.tiled_cell_dependencies_;
  if (this != internal_default_instance()) delete _impl_.uuid_references_;
  if (this != internal_default_instance()) delete _impl_.tiled_range_dependencies_;
}

void FormulaOwnerDependenciesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaOwnerDependenciesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaOwnerDependenciesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.formula_owner_uid_ != nullptr);
      _impl_.formula_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_dependencies_ != nullptr);
      _impl_.cell_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.range_dependencies_ != nullptr);
      _impl_.range_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.volatile_dependencies_ != nullptr);
      _impl_.volatile_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.spanning_column_dependencies_ != nullptr);
      _impl_.spanning_column_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.spanning_row_dependencies_ != nullptr);
      _impl_.spanning_row_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.whole_owner_dependencies_ != nullptr);
      _impl_.whole_owner_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.cell_errors_ != nullptr);
      _impl_.cell_errors_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.formula_owner_ != nullptr);
      _impl_.formula_owner_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.base_owner_uid_ != nullptr);
      _impl_.base_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.tiled_cell_dependencies_ != nullptr);
      _impl_.tiled_cell_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.uuid_references_ != nullptr);
      _impl_.uuid_references_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.tiled_range_dependencies_ != nullptr);
      _impl_.tiled_range_dependencies_->Clear();
    }
  }
  if (cached_has_bits & 0x00006000u) {
    ::memset(&_impl_.internal_formula_owner_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.owner_kind_) -
        reinterpret_cast<char*>(&_impl_.internal_formula_owner_id_)) + sizeof(_impl_.owner_kind_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaOwnerDependenciesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID formula_owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 internal_formula_owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_internal_formula_owner_id(&has_bits);
          _impl_.internal_formula_owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 owner_kind = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_owner_kind(&has_bits);
          _impl_.owner_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellDependenciesExpandedArchive cell_dependencies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeDependenciesArchive range_dependencies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.VolatileDependenciesExpandedArchive volatile_dependencies = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.SpanningDependenciesExpandedArchive spanning_column_dependencies = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_spanning_column_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.SpanningDependenciesExpandedArchive spanning_row_dependencies = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_spanning_row_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.WholeOwnerDependenciesExpandedArchive whole_owner_dependencies = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_whole_owner_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellErrorsArchive cell_errors = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_errors(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_owner = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID base_owner_uid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellDependenciesTiledArchive tiled_cell_dependencies = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiled_cell_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.UuidReferencesArchive uuid_references = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid_references(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeDependenciesTiledArchive tiled_range_dependencies = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_tiled_range_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaOwnerDependenciesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaOwnerDependenciesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID formula_owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::formula_owner_uid(this),
        _Internal::formula_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required uint32 internal_formula_owner_id = 2;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_internal_formula_owner_id(), target);
  }

  // optional uint32 owner_kind = 3 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_owner_kind(), target);
  }

  // optional .TSCE.CellDependenciesExpandedArchive cell_dependencies = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::cell_dependencies(this),
        _Internal::cell_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeDependenciesArchive range_dependencies = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::range_dependencies(this),
        _Internal::range_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.VolatileDependenciesExpandedArchive volatile_dependencies = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::volatile_dependencies(this),
        _Internal::volatile_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.SpanningDependenciesExpandedArchive spanning_column_dependencies = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::spanning_column_dependencies(this),
        _Internal::spanning_column_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.SpanningDependenciesExpandedArchive spanning_row_dependencies = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::spanning_row_dependencies(this),
        _Internal::spanning_row_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.WholeOwnerDependenciesExpandedArchive whole_owner_dependencies = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::whole_owner_dependencies(this),
        _Internal::whole_owner_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellErrorsArchive cell_errors = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::cell_errors(this),
        _Internal::cell_errors(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference formula_owner = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::formula_owner(this),
        _Internal::formula_owner(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID base_owner_uid = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::base_owner_uid(this),
        _Internal::base_owner_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellDependenciesTiledArchive tiled_cell_dependencies = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::tiled_cell_dependencies(this),
        _Internal::tiled_cell_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.UuidReferencesArchive uuid_references = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::uuid_references(this),
        _Internal::uuid_references(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeDependenciesTiledArchive tiled_range_dependencies = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::tiled_range_dependencies(this),
        _Internal::tiled_range_dependencies(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaOwnerDependenciesArchive)
  return target;
}

size_t FormulaOwnerDependenciesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.FormulaOwnerDependenciesArchive)
  size_t total_size = 0;

  if (_internal_has_formula_owner_uid()) {
    // required .TSP.UUID formula_owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_owner_uid_);
  }

  if (_internal_has_internal_formula_owner_id()) {
    // required uint32 internal_formula_owner_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_internal_formula_owner_id());
  }

  return total_size;
}
size_t FormulaOwnerDependenciesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaOwnerDependenciesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00002001) ^ 0x00002001) == 0) {  // All required fields are present.
    // required .TSP.UUID formula_owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_owner_uid_);

    // required uint32 internal_formula_owner_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_internal_formula_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSCE.CellDependenciesExpandedArchive cell_dependencies = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_dependencies_);
    }

    // optional .TSCE.RangeDependenciesArchive range_dependencies = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_dependencies_);
    }

    // optional .TSCE.VolatileDependenciesExpandedArchive volatile_dependencies = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.volatile_dependencies_);
    }

    // optional .TSCE.SpanningDependenciesExpandedArchive spanning_column_dependencies = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spanning_column_dependencies_);
    }

    // optional .TSCE.SpanningDependenciesExpandedArchive spanning_row_dependencies = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spanning_row_dependencies_);
    }

    // optional .TSCE.WholeOwnerDependenciesExpandedArchive whole_owner_dependencies = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.whole_owner_dependencies_);
    }

    // optional .TSCE.CellErrorsArchive cell_errors = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_errors_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .TSP.Reference formula_owner = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formula_owner_);
    }

    // optional .TSP.UUID base_owner_uid = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.base_owner_uid_);
    }

    // optional .TSCE.CellDependenciesTiledArchive tiled_cell_dependencies = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tiled_cell_dependencies_);
    }

    // optional .TSCE.UuidReferencesArchive uuid_references = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.uuid_references_);
    }

    // optional .TSCE.RangeDependenciesTiledArchive tiled_range_dependencies = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tiled_range_dependencies_);
    }

  }
  // optional uint32 owner_kind = 3 [default = 0];
  if (cached_has_bits & 0x00004000u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaOwnerDependenciesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaOwnerDependenciesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaOwnerDependenciesArchive::GetClassData() const { return &_class_data_; }


void FormulaOwnerDependenciesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaOwnerDependenciesArchive*>(&to_msg);
  auto& from = static_cast<const FormulaOwnerDependenciesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaOwnerDependenciesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_formula_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_formula_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_dependencies()->::TSCE::CellDependenciesExpandedArchive::MergeFrom(
          from._internal_cell_dependencies());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_range_dependencies()->::TSCE::RangeDependenciesArchive::MergeFrom(
          from._internal_range_dependencies());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_volatile_dependencies()->::TSCE::VolatileDependenciesExpandedArchive::MergeFrom(
          from._internal_volatile_dependencies());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_spanning_column_dependencies()->::TSCE::SpanningDependenciesExpandedArchive::MergeFrom(
          from._internal_spanning_column_dependencies());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_spanning_row_dependencies()->::TSCE::SpanningDependenciesExpandedArchive::MergeFrom(
          from._internal_spanning_row_dependencies());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_whole_owner_dependencies()->::TSCE::WholeOwnerDependenciesExpandedArchive::MergeFrom(
          from._internal_whole_owner_dependencies());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_cell_errors()->::TSCE::CellErrorsArchive::MergeFrom(
          from._internal_cell_errors());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_formula_owner()->::TSP::Reference::MergeFrom(
          from._internal_formula_owner());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_base_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_base_owner_uid());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_tiled_cell_dependencies()->::TSCE::CellDependenciesTiledArchive::MergeFrom(
          from._internal_tiled_cell_dependencies());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_uuid_references()->::TSCE::UuidReferencesArchive::MergeFrom(
          from._internal_uuid_references());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_tiled_range_dependencies()->::TSCE::RangeDependenciesTiledArchive::MergeFrom(
          from._internal_tiled_range_dependencies());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.internal_formula_owner_id_ = from._impl_.internal_formula_owner_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.owner_kind_ = from._impl_.owner_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaOwnerDependenciesArchive::CopyFrom(const FormulaOwnerDependenciesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaOwnerDependenciesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaOwnerDependenciesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_formula_owner_uid()) {
    if (!_impl_.formula_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cell_dependencies()) {
    if (!_impl_.cell_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_range_dependencies()) {
    if (!_impl_.range_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_dependencies()) {
    if (!_impl_.volatile_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_spanning_column_dependencies()) {
    if (!_impl_.spanning_column_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_spanning_row_dependencies()) {
    if (!_impl_.spanning_row_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_whole_owner_dependencies()) {
    if (!_impl_.whole_owner_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_cell_errors()) {
    if (!_impl_.cell_errors_->IsInitialized()) return false;
  }
  if (_internal_has_formula_owner()) {
    if (!_impl_.formula_owner_->IsInitialized()) return false;
  }
  if (_internal_has_base_owner_uid()) {
    if (!_impl_.base_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_tiled_cell_dependencies()) {
    if (!_impl_.tiled_cell_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_uuid_references()) {
    if (!_impl_.uuid_references_->IsInitialized()) return false;
  }
  if (_internal_has_tiled_range_dependencies()) {
    if (!_impl_.tiled_range_dependencies_->IsInitialized()) return false;
  }
  return true;
}

void FormulaOwnerDependenciesArchive::InternalSwap(FormulaOwnerDependenciesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaOwnerDependenciesArchive, _impl_.owner_kind_)
      + sizeof(FormulaOwnerDependenciesArchive::_impl_.owner_kind_)
      - PROTOBUF_FIELD_OFFSET(FormulaOwnerDependenciesArchive, _impl_.formula_owner_uid_)>(
          reinterpret_cast<char*>(&_impl_.formula_owner_uid_),
          reinterpret_cast<char*>(&other->_impl_.formula_owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaOwnerDependenciesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[59]);
}

// ===================================================================

class FormulaOwnerInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaOwnerInfoArchive>()._impl_._has_bits_);
  static const ::TSP::CFUUIDArchive& formula_owner_id(const FormulaOwnerInfoArchive* msg);
  static void set_has_formula_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellDependenciesArchive& cell_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_cell_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeDependenciesArchive& range_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_range_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::VolatileDependenciesArchive& volatile_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_volatile_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::SpanningDependenciesArchive& spanning_column_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_spanning_column_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::SpanningDependenciesArchive& spanning_row_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_spanning_row_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::WholeOwnerDependenciesArchive& whole_owner_dependencies(const FormulaOwnerInfoArchive* msg);
  static void set_has_whole_owner_dependencies(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::CellErrorsArchive& cell_errors(const FormulaOwnerInfoArchive* msg);
  static void set_has_cell_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& formula_owner(const FormulaOwnerInfoArchive* msg);
  static void set_has_formula_owner(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::CFUUIDArchive&
FormulaOwnerInfoArchive::_Internal::formula_owner_id(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.formula_owner_id_;
}
const ::TSCE::CellDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::cell_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.cell_dependencies_;
}
const ::TSCE::RangeDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::range_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.range_dependencies_;
}
const ::TSCE::VolatileDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::volatile_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.volatile_dependencies_;
}
const ::TSCE::SpanningDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::spanning_column_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.spanning_column_dependencies_;
}
const ::TSCE::SpanningDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::spanning_row_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.spanning_row_dependencies_;
}
const ::TSCE::WholeOwnerDependenciesArchive&
FormulaOwnerInfoArchive::_Internal::whole_owner_dependencies(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.whole_owner_dependencies_;
}
const ::TSCE::CellErrorsArchive&
FormulaOwnerInfoArchive::_Internal::cell_errors(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.cell_errors_;
}
const ::TSP::Reference&
FormulaOwnerInfoArchive::_Internal::formula_owner(const FormulaOwnerInfoArchive* msg) {
  return *msg->_impl_.formula_owner_;
}
void FormulaOwnerInfoArchive::clear_formula_owner_id() {
  if (_impl_.formula_owner_id_ != nullptr) _impl_.formula_owner_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FormulaOwnerInfoArchive::clear_formula_owner() {
  if (_impl_.formula_owner_ != nullptr) _impl_.formula_owner_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
FormulaOwnerInfoArchive::FormulaOwnerInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaOwnerInfoArchive)
}
FormulaOwnerInfoArchive::FormulaOwnerInfoArchive(const FormulaOwnerInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaOwnerInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_owner_id_){nullptr}
    , decltype(_impl_.cell_dependencies_){nullptr}
    , decltype(_impl_.range_dependencies_){nullptr}
    , decltype(_impl_.volatile_dependencies_){nullptr}
    , decltype(_impl_.spanning_column_dependencies_){nullptr}
    , decltype(_impl_.spanning_row_dependencies_){nullptr}
    , decltype(_impl_.formula_owner_){nullptr}
    , decltype(_impl_.whole_owner_dependencies_){nullptr}
    , decltype(_impl_.cell_errors_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula_owner_id()) {
    _this->_impl_.formula_owner_id_ = new ::TSP::CFUUIDArchive(*from._impl_.formula_owner_id_);
  }
  if (from._internal_has_cell_dependencies()) {
    _this->_impl_.cell_dependencies_ = new ::TSCE::CellDependenciesArchive(*from._impl_.cell_dependencies_);
  }
  if (from._internal_has_range_dependencies()) {
    _this->_impl_.range_dependencies_ = new ::TSCE::RangeDependenciesArchive(*from._impl_.range_dependencies_);
  }
  if (from._internal_has_volatile_dependencies()) {
    _this->_impl_.volatile_dependencies_ = new ::TSCE::VolatileDependenciesArchive(*from._impl_.volatile_dependencies_);
  }
  if (from._internal_has_spanning_column_dependencies()) {
    _this->_impl_.spanning_column_dependencies_ = new ::TSCE::SpanningDependenciesArchive(*from._impl_.spanning_column_dependencies_);
  }
  if (from._internal_has_spanning_row_dependencies()) {
    _this->_impl_.spanning_row_dependencies_ = new ::TSCE::SpanningDependenciesArchive(*from._impl_.spanning_row_dependencies_);
  }
  if (from._internal_has_formula_owner()) {
    _this->_impl_.formula_owner_ = new ::TSP::Reference(*from._impl_.formula_owner_);
  }
  if (from._internal_has_whole_owner_dependencies()) {
    _this->_impl_.whole_owner_dependencies_ = new ::TSCE::WholeOwnerDependenciesArchive(*from._impl_.whole_owner_dependencies_);
  }
  if (from._internal_has_cell_errors()) {
    _this->_impl_.cell_errors_ = new ::TSCE::CellErrorsArchive(*from._impl_.cell_errors_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaOwnerInfoArchive)
}

inline void FormulaOwnerInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_owner_id_){nullptr}
    , decltype(_impl_.cell_dependencies_){nullptr}
    , decltype(_impl_.range_dependencies_){nullptr}
    , decltype(_impl_.volatile_dependencies_){nullptr}
    , decltype(_impl_.spanning_column_dependencies_){nullptr}
    , decltype(_impl_.spanning_row_dependencies_){nullptr}
    , decltype(_impl_.formula_owner_){nullptr}
    , decltype(_impl_.whole_owner_dependencies_){nullptr}
    , decltype(_impl_.cell_errors_){nullptr}
  };
}

FormulaOwnerInfoArchive::~FormulaOwnerInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaOwnerInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaOwnerInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.formula_owner_id_;
  if (this != internal_default_instance()) delete _impl_.cell_dependencies_;
  if (this != internal_default_instance()) delete _impl_.range_dependencies_;
  if (this != internal_default_instance()) delete _impl_.volatile_dependencies_;
  if (this != internal_default_instance()) delete _impl_.spanning_column_dependencies_;
  if (this != internal_default_instance()) delete _impl_.spanning_row_dependencies_;
  if (this != internal_default_instance()) delete _impl_.formula_owner_;
  if (this != internal_default_instance()) delete _impl_.whole_owner_dependencies_;
  if (this != internal_default_instance()) delete _impl_.cell_errors_;
}

void FormulaOwnerInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaOwnerInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaOwnerInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.formula_owner_id_ != nullptr);
      _impl_.formula_owner_id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_dependencies_ != nullptr);
      _impl_.cell_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.range_dependencies_ != nullptr);
      _impl_.range_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.volatile_dependencies_ != nullptr);
      _impl_.volatile_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.spanning_column_dependencies_ != nullptr);
      _impl_.spanning_column_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.spanning_row_dependencies_ != nullptr);
      _impl_.spanning_row_dependencies_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.formula_owner_ != nullptr);
      _impl_.formula_owner_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.whole_owner_dependencies_ != nullptr);
      _impl_.whole_owner_dependencies_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(_impl_.cell_errors_ != nullptr);
    _impl_.cell_errors_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaOwnerInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive formula_owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_owner_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_range_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_volatile_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_spanning_column_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_spanning_row_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_owner = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_owner(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_whole_owner_dependencies(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellErrorsArchive cell_errors = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_errors(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaOwnerInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaOwnerInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.CFUUIDArchive formula_owner_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::formula_owner_id(this),
        _Internal::formula_owner_id(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_dependencies(this),
        _Internal::cell_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::range_dependencies(this),
        _Internal::range_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::volatile_dependencies(this),
        _Internal::volatile_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::spanning_column_dependencies(this),
        _Internal::spanning_column_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::spanning_row_dependencies(this),
        _Internal::spanning_row_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference formula_owner = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::formula_owner(this),
        _Internal::formula_owner(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::whole_owner_dependencies(this),
        _Internal::whole_owner_dependencies(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellErrorsArchive cell_errors = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::cell_errors(this),
        _Internal::cell_errors(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaOwnerInfoArchive)
  return target;
}

size_t FormulaOwnerInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaOwnerInfoArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive formula_owner_id = 1;
  if (_internal_has_formula_owner_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_owner_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSCE.CellDependenciesArchive cell_dependencies = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_dependencies_);
    }

    // optional .TSCE.RangeDependenciesArchive range_dependencies = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.range_dependencies_);
    }

    // optional .TSCE.VolatileDependenciesArchive volatile_dependencies = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.volatile_dependencies_);
    }

    // optional .TSCE.SpanningDependenciesArchive spanning_column_dependencies = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spanning_column_dependencies_);
    }

    // optional .TSCE.SpanningDependenciesArchive spanning_row_dependencies = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spanning_row_dependencies_);
    }

    // optional .TSP.Reference formula_owner = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formula_owner_);
    }

    // optional .TSCE.WholeOwnerDependenciesArchive whole_owner_dependencies = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.whole_owner_dependencies_);
    }

  }
  // optional .TSCE.CellErrorsArchive cell_errors = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_errors_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaOwnerInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaOwnerInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaOwnerInfoArchive::GetClassData() const { return &_class_data_; }


void FormulaOwnerInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaOwnerInfoArchive*>(&to_msg);
  auto& from = static_cast<const FormulaOwnerInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaOwnerInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_formula_owner_id()->::TSP::CFUUIDArchive::MergeFrom(
          from._internal_formula_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_dependencies()->::TSCE::CellDependenciesArchive::MergeFrom(
          from._internal_cell_dependencies());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_range_dependencies()->::TSCE::RangeDependenciesArchive::MergeFrom(
          from._internal_range_dependencies());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_volatile_dependencies()->::TSCE::VolatileDependenciesArchive::MergeFrom(
          from._internal_volatile_dependencies());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_spanning_column_dependencies()->::TSCE::SpanningDependenciesArchive::MergeFrom(
          from._internal_spanning_column_dependencies());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_spanning_row_dependencies()->::TSCE::SpanningDependenciesArchive::MergeFrom(
          from._internal_spanning_row_dependencies());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_formula_owner()->::TSP::Reference::MergeFrom(
          from._internal_formula_owner());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_whole_owner_dependencies()->::TSCE::WholeOwnerDependenciesArchive::MergeFrom(
          from._internal_whole_owner_dependencies());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_mutable_cell_errors()->::TSCE::CellErrorsArchive::MergeFrom(
        from._internal_cell_errors());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaOwnerInfoArchive::CopyFrom(const FormulaOwnerInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaOwnerInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaOwnerInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_dependencies()) {
    if (!_impl_.cell_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_range_dependencies()) {
    if (!_impl_.range_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_volatile_dependencies()) {
    if (!_impl_.volatile_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_spanning_column_dependencies()) {
    if (!_impl_.spanning_column_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_spanning_row_dependencies()) {
    if (!_impl_.spanning_row_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_formula_owner()) {
    if (!_impl_.formula_owner_->IsInitialized()) return false;
  }
  if (_internal_has_whole_owner_dependencies()) {
    if (!_impl_.whole_owner_dependencies_->IsInitialized()) return false;
  }
  if (_internal_has_cell_errors()) {
    if (!_impl_.cell_errors_->IsInitialized()) return false;
  }
  return true;
}

void FormulaOwnerInfoArchive::InternalSwap(FormulaOwnerInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaOwnerInfoArchive, _impl_.cell_errors_)
      + sizeof(FormulaOwnerInfoArchive::_impl_.cell_errors_)
      - PROTOBUF_FIELD_OFFSET(FormulaOwnerInfoArchive, _impl_.formula_owner_id_)>(
          reinterpret_cast<char*>(&_impl_.formula_owner_id_),
          reinterpret_cast<char*>(&other->_impl_.formula_owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaOwnerInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[60]);
}

// ===================================================================

class SubFormulaOwnerIDArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<SubFormulaOwnerIDArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& base_owner_uid(const SubFormulaOwnerIDArchive* msg);
  static void set_has_base_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_owner_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
SubFormulaOwnerIDArchive::_Internal::base_owner_uid(const SubFormulaOwnerIDArchive* msg) {
  return *msg->_impl_.base_owner_uid_;
}
void SubFormulaOwnerIDArchive::clear_base_owner_uid() {
  if (_impl_.base_owner_uid_ != nullptr) _impl_.base_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
SubFormulaOwnerIDArchive::SubFormulaOwnerIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.SubFormulaOwnerIDArchive)
}
SubFormulaOwnerIDArchive::SubFormulaOwnerIDArchive(const SubFormulaOwnerIDArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SubFormulaOwnerIDArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_owner_uid_){nullptr}
    , decltype(_impl_.owner_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_base_owner_uid()) {
    _this->_impl_.base_owner_uid_ = new ::TSP::UUID(*from._impl_.base_owner_uid_);
  }
  _this->_impl_.owner_kind_ = from._impl_.owner_kind_;
  // @@protoc_insertion_point(copy_constructor:TSCE.SubFormulaOwnerIDArchive)
}

inline void SubFormulaOwnerIDArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_owner_uid_){nullptr}
    , decltype(_impl_.owner_kind_){0u}
  };
}

SubFormulaOwnerIDArchive::~SubFormulaOwnerIDArchive() {
  // @@protoc_insertion_point(destructor:TSCE.SubFormulaOwnerIDArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubFormulaOwnerIDArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.base_owner_uid_;
}

void SubFormulaOwnerIDArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubFormulaOwnerIDArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.SubFormulaOwnerIDArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.base_owner_uid_ != nullptr);
    _impl_.base_owner_uid_->Clear();
  }
  _impl_.owner_kind_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubFormulaOwnerIDArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID base_owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_base_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 owner_kind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_owner_kind(&has_bits);
          _impl_.owner_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubFormulaOwnerIDArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.SubFormulaOwnerIDArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID base_owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::base_owner_uid(this),
        _Internal::base_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required uint32 owner_kind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_owner_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.SubFormulaOwnerIDArchive)
  return target;
}

size_t SubFormulaOwnerIDArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.SubFormulaOwnerIDArchive)
  size_t total_size = 0;

  if (_internal_has_base_owner_uid()) {
    // required .TSP.UUID base_owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_owner_uid_);
  }

  if (_internal_has_owner_kind()) {
    // required uint32 owner_kind = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_kind());
  }

  return total_size;
}
size_t SubFormulaOwnerIDArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.SubFormulaOwnerIDArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID base_owner_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.base_owner_uid_);

    // required uint32 owner_kind = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_kind());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubFormulaOwnerIDArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SubFormulaOwnerIDArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubFormulaOwnerIDArchive::GetClassData() const { return &_class_data_; }


void SubFormulaOwnerIDArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SubFormulaOwnerIDArchive*>(&to_msg);
  auto& from = static_cast<const SubFormulaOwnerIDArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.SubFormulaOwnerIDArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_base_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_base_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.owner_kind_ = from._impl_.owner_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubFormulaOwnerIDArchive::CopyFrom(const SubFormulaOwnerIDArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.SubFormulaOwnerIDArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubFormulaOwnerIDArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_base_owner_uid()) {
    if (!_impl_.base_owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void SubFormulaOwnerIDArchive::InternalSwap(SubFormulaOwnerIDArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubFormulaOwnerIDArchive, _impl_.owner_kind_)
      + sizeof(SubFormulaOwnerIDArchive::_impl_.owner_kind_)
      - PROTOBUF_FIELD_OFFSET(SubFormulaOwnerIDArchive, _impl_.base_owner_uid_)>(
          reinterpret_cast<char*>(&_impl_.base_owner_uid_),
          reinterpret_cast<char*>(&other->_impl_.base_owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubFormulaOwnerIDArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[61]);
}

// ===================================================================

class OwnerIDMapArchive_OwnerIDMapArchiveEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnerIDMapArchive_OwnerIDMapArchiveEntry>()._impl_._has_bits_);
  static void set_has_internal_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::CFUUIDArchive& owner_id(const OwnerIDMapArchive_OwnerIDMapArchiveEntry* msg);
  static void set_has_owner_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::CFUUIDArchive&
OwnerIDMapArchive_OwnerIDMapArchiveEntry::_Internal::owner_id(const OwnerIDMapArchive_OwnerIDMapArchiveEntry* msg) {
  return *msg->_impl_.owner_id_;
}
void OwnerIDMapArchive_OwnerIDMapArchiveEntry::clear_owner_id() {
  if (_impl_.owner_id_ != nullptr) _impl_.owner_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
OwnerIDMapArchive_OwnerIDMapArchiveEntry::OwnerIDMapArchive_OwnerIDMapArchiveEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
}
OwnerIDMapArchive_OwnerIDMapArchiveEntry::OwnerIDMapArchive_OwnerIDMapArchiveEntry(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnerIDMapArchive_OwnerIDMapArchiveEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.internal_owner_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id()) {
    _this->_impl_.owner_id_ = new ::TSP::CFUUIDArchive(*from._impl_.owner_id_);
  }
  _this->_impl_.internal_owner_id_ = from._impl_.internal_owner_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
}

inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_id_){nullptr}
    , decltype(_impl_.internal_owner_id_){0u}
  };
}

OwnerIDMapArchive_OwnerIDMapArchiveEntry::~OwnerIDMapArchive_OwnerIDMapArchiveEntry() {
  // @@protoc_insertion_point(destructor:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.owner_id_;
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_id_ != nullptr);
    _impl_.owner_id_->Clear();
  }
  _impl_.internal_owner_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerIDMapArchive_OwnerIDMapArchiveEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 internal_owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_internal_owner_id(&has_bits);
          _impl_.internal_owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.CFUUIDArchive owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnerIDMapArchive_OwnerIDMapArchiveEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 internal_owner_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_internal_owner_id(), target);
  }

  // required .TSP.CFUUIDArchive owner_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::owner_id(this),
        _Internal::owner_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  return target;
}

size_t OwnerIDMapArchive_OwnerIDMapArchiveEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  size_t total_size = 0;

  if (_internal_has_owner_id()) {
    // required .TSP.CFUUIDArchive owner_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_id_);
  }

  if (_internal_has_internal_owner_id()) {
    // required uint32 internal_owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_internal_owner_id());
  }

  return total_size;
}
size_t OwnerIDMapArchive_OwnerIDMapArchiveEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.CFUUIDArchive owner_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_id_);

    // required uint32 internal_owner_id = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_internal_owner_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnerIDMapArchive_OwnerIDMapArchiveEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnerIDMapArchive_OwnerIDMapArchiveEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnerIDMapArchive_OwnerIDMapArchiveEntry::GetClassData() const { return &_class_data_; }


void OwnerIDMapArchive_OwnerIDMapArchiveEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnerIDMapArchive_OwnerIDMapArchiveEntry*>(&to_msg);
  auto& from = static_cast<const OwnerIDMapArchive_OwnerIDMapArchiveEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_id()->::TSP::CFUUIDArchive::MergeFrom(
          from._internal_owner_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.internal_owner_id_ = from._impl_.internal_owner_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::CopyFrom(const OwnerIDMapArchive_OwnerIDMapArchiveEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerIDMapArchive_OwnerIDMapArchiveEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void OwnerIDMapArchive_OwnerIDMapArchiveEntry::InternalSwap(OwnerIDMapArchive_OwnerIDMapArchiveEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnerIDMapArchive_OwnerIDMapArchiveEntry, _impl_.internal_owner_id_)
      + sizeof(OwnerIDMapArchive_OwnerIDMapArchiveEntry::_impl_.internal_owner_id_)
      - PROTOBUF_FIELD_OFFSET(OwnerIDMapArchive_OwnerIDMapArchiveEntry, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerIDMapArchive_OwnerIDMapArchiveEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[62]);
}

// ===================================================================

class OwnerIDMapArchive::_Internal {
 public:
};

OwnerIDMapArchive::OwnerIDMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.OwnerIDMapArchive)
}
OwnerIDMapArchive::OwnerIDMapArchive(const OwnerIDMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnerIDMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.map_entry_){from._impl_.map_entry_}
    , decltype(_impl_.unregistered_internal_owner_id_){from._impl_.unregistered_internal_owner_id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.OwnerIDMapArchive)
}

inline void OwnerIDMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.map_entry_){arena}
    , decltype(_impl_.unregistered_internal_owner_id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

OwnerIDMapArchive::~OwnerIDMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.OwnerIDMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnerIDMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.map_entry_.~RepeatedPtrField();
  _impl_.unregistered_internal_owner_id_.~RepeatedField();
}

void OwnerIDMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnerIDMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.OwnerIDMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.map_entry_.Clear();
  _impl_.unregistered_internal_owner_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerIDMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 unregistered_internal_owner_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_unregistered_internal_owner_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_unregistered_internal_owner_id(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnerIDMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.OwnerIDMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_map_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_map_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint32 unregistered_internal_owner_id = 2;
  for (int i = 0, n = this->_internal_unregistered_internal_owner_id_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_unregistered_internal_owner_id(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.OwnerIDMapArchive)
  return target;
}

size_t OwnerIDMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.OwnerIDMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry map_entry = 1;
  total_size += 1UL * this->_internal_map_entry_size();
  for (const auto& msg : this->_impl_.map_entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 unregistered_internal_owner_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.unregistered_internal_owner_id_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_unregistered_internal_owner_id_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnerIDMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnerIDMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnerIDMapArchive::GetClassData() const { return &_class_data_; }


void OwnerIDMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnerIDMapArchive*>(&to_msg);
  auto& from = static_cast<const OwnerIDMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.OwnerIDMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.map_entry_.MergeFrom(from._impl_.map_entry_);
  _this->_impl_.unregistered_internal_owner_id_.MergeFrom(from._impl_.unregistered_internal_owner_id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnerIDMapArchive::CopyFrom(const OwnerIDMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.OwnerIDMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerIDMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.map_entry_))
    return false;
  return true;
}

void OwnerIDMapArchive::InternalSwap(OwnerIDMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.map_entry_.InternalSwap(&other->_impl_.map_entry_);
  _impl_.unregistered_internal_owner_id_.InternalSwap(&other->_impl_.unregistered_internal_owner_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerIDMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[63]);
}

// ===================================================================

class UidLookupListArchive::_Internal {
 public:
};

void UidLookupListArchive::clear_uuids() {
  _impl_.uuids_.Clear();
}
UidLookupListArchive::UidLookupListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UidLookupListArchive)
}
UidLookupListArchive::UidLookupListArchive(const UidLookupListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UidLookupListArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuids_){from._impl_.uuids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UidLookupListArchive)
}

inline void UidLookupListArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UidLookupListArchive::~UidLookupListArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UidLookupListArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UidLookupListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuids_.~RepeatedPtrField();
}

void UidLookupListArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UidLookupListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UidLookupListArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UidLookupListArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uuids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UidLookupListArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UidLookupListArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uuids_size()); i < n; i++) {
    const auto& repfield = this->_internal_uuids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UidLookupListArchive)
  return target;
}

size_t UidLookupListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UidLookupListArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uuids = 1;
  total_size += 1UL * this->_internal_uuids_size();
  for (const auto& msg : this->_impl_.uuids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UidLookupListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UidLookupListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UidLookupListArchive::GetClassData() const { return &_class_data_; }


void UidLookupListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UidLookupListArchive*>(&to_msg);
  auto& from = static_cast<const UidLookupListArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UidLookupListArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uuids_.MergeFrom(from._impl_.uuids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UidLookupListArchive::CopyFrom(const UidLookupListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UidLookupListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UidLookupListArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uuids_))
    return false;
  return true;
}

void UidLookupListArchive::InternalSwap(UidLookupListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uuids_.InternalSwap(&other->_impl_.uuids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UidLookupListArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[64]);
}

// ===================================================================

class DependencyTrackerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DependencyTrackerArchive>()._impl_._has_bits_);
  static const ::TSCE::OwnerIDMapArchive& owner_id_map(const DependencyTrackerArchive* msg);
  static void set_has_owner_id_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_of_formulas(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSCE::OwnerIDMapArchive&
DependencyTrackerArchive::_Internal::owner_id_map(const DependencyTrackerArchive* msg) {
  return *msg->_impl_.owner_id_map_;
}
void DependencyTrackerArchive::clear_formula_owner_dependencies() {
  _impl_.formula_owner_dependencies_.Clear();
}
DependencyTrackerArchive::DependencyTrackerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.DependencyTrackerArchive)
}
DependencyTrackerArchive::DependencyTrackerArchive(const DependencyTrackerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DependencyTrackerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_owner_info_){from._impl_.formula_owner_info_}
    , decltype(_impl_.dirty_leaf_){from._impl_.dirty_leaf_}
    , decltype(_impl_.internal_dirty_leaf_){from._impl_.internal_dirty_leaf_}
    , decltype(_impl_.formula_owner_dependencies_){from._impl_.formula_owner_dependencies_}
    , decltype(_impl_.owner_id_map_){nullptr}
    , decltype(_impl_.number_of_formulas_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_id_map()) {
    _this->_impl_.owner_id_map_ = new ::TSCE::OwnerIDMapArchive(*from._impl_.owner_id_map_);
  }
  _this->_impl_.number_of_formulas_ = from._impl_.number_of_formulas_;
  // @@protoc_insertion_point(copy_constructor:TSCE.DependencyTrackerArchive)
}

inline void DependencyTrackerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_owner_info_){arena}
    , decltype(_impl_.dirty_leaf_){arena}
    , decltype(_impl_.internal_dirty_leaf_){arena}
    , decltype(_impl_.formula_owner_dependencies_){arena}
    , decltype(_impl_.owner_id_map_){nullptr}
    , decltype(_impl_.number_of_formulas_){uint64_t{0u}}
  };
}

DependencyTrackerArchive::~DependencyTrackerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.DependencyTrackerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DependencyTrackerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.formula_owner_info_.~RepeatedPtrField();
  _impl_.dirty_leaf_.~RepeatedPtrField();
  _impl_.internal_dirty_leaf_.~RepeatedPtrField();
  _impl_.formula_owner_dependencies_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.owner_id_map_;
}

void DependencyTrackerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DependencyTrackerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.DependencyTrackerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.formula_owner_info_.Clear();
  _impl_.dirty_leaf_.Clear();
  _impl_.internal_dirty_leaf_.Clear();
  _impl_.formula_owner_dependencies_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_id_map_ != nullptr);
    _impl_.owner_id_map_->Clear();
  }
  _impl_.number_of_formulas_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DependencyTrackerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_owner_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dirty_leaf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_id_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_internal_dirty_leaf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 number_of_formulas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_number_of_formulas(&has_bits);
          _impl_.number_of_formulas_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference formula_owner_dependencies = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_owner_dependencies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DependencyTrackerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.DependencyTrackerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_formula_owner_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_formula_owner_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_dirty_leaf_size()); i < n; i++) {
    const auto& repfield = this->_internal_dirty_leaf(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::owner_id_map(this),
        _Internal::owner_id_map(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_internal_dirty_leaf_size()); i < n; i++) {
    const auto& repfield = this->_internal_internal_dirty_leaf(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 number_of_formulas = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_number_of_formulas(), target);
  }

  // repeated .TSP.Reference formula_owner_dependencies = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_formula_owner_dependencies_size()); i < n; i++) {
    const auto& repfield = this->_internal_formula_owner_dependencies(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.DependencyTrackerArchive)
  return target;
}

size_t DependencyTrackerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.DependencyTrackerArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.FormulaOwnerInfoArchive formula_owner_info = 1;
  total_size += 1UL * this->_internal_formula_owner_info_size();
  for (const auto& msg : this->_impl_.formula_owner_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.CellReferenceArchive dirty_leaf = 2 [deprecated = true];
  total_size += 1UL * this->_internal_dirty_leaf_size();
  for (const auto& msg : this->_impl_.dirty_leaf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.InternalCellReferenceArchive internal_dirty_leaf = 4 [deprecated = true];
  total_size += 1UL * this->_internal_internal_dirty_leaf_size();
  for (const auto& msg : this->_impl_.internal_dirty_leaf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference formula_owner_dependencies = 6;
  total_size += 1UL * this->_internal_formula_owner_dependencies_size();
  for (const auto& msg : this->_impl_.formula_owner_dependencies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSCE.OwnerIDMapArchive owner_id_map = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.owner_id_map_);
    }

    // optional uint64 number_of_formulas = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_number_of_formulas());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DependencyTrackerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DependencyTrackerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DependencyTrackerArchive::GetClassData() const { return &_class_data_; }


void DependencyTrackerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DependencyTrackerArchive*>(&to_msg);
  auto& from = static_cast<const DependencyTrackerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.DependencyTrackerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.formula_owner_info_.MergeFrom(from._impl_.formula_owner_info_);
  _this->_impl_.dirty_leaf_.MergeFrom(from._impl_.dirty_leaf_);
  _this->_impl_.internal_dirty_leaf_.MergeFrom(from._impl_.internal_dirty_leaf_);
  _this->_impl_.formula_owner_dependencies_.MergeFrom(from._impl_.formula_owner_dependencies_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_id_map()->::TSCE::OwnerIDMapArchive::MergeFrom(
          from._internal_owner_id_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.number_of_formulas_ = from._impl_.number_of_formulas_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DependencyTrackerArchive::CopyFrom(const DependencyTrackerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.DependencyTrackerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DependencyTrackerArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.formula_owner_info_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.dirty_leaf_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.internal_dirty_leaf_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.formula_owner_dependencies_))
    return false;
  if (_internal_has_owner_id_map()) {
    if (!_impl_.owner_id_map_->IsInitialized()) return false;
  }
  return true;
}

void DependencyTrackerArchive::InternalSwap(DependencyTrackerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.formula_owner_info_.InternalSwap(&other->_impl_.formula_owner_info_);
  _impl_.dirty_leaf_.InternalSwap(&other->_impl_.dirty_leaf_);
  _impl_.internal_dirty_leaf_.InternalSwap(&other->_impl_.internal_dirty_leaf_);
  _impl_.formula_owner_dependencies_.InternalSwap(&other->_impl_.formula_owner_dependencies_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DependencyTrackerArchive, _impl_.number_of_formulas_)
      + sizeof(DependencyTrackerArchive::_impl_.number_of_formulas_)
      - PROTOBUF_FIELD_OFFSET(DependencyTrackerArchive, _impl_.owner_id_map_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_map_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DependencyTrackerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[65]);
}

// ===================================================================

class RemoteDataSpecifierArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteDataSpecifierArchive>()._impl_._has_bits_);
  static void set_has_function_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

RemoteDataSpecifierArchive::RemoteDataSpecifierArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RemoteDataSpecifierArchive)
}
RemoteDataSpecifierArchive::RemoteDataSpecifierArchive(const RemoteDataSpecifierArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteDataSpecifierArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.function_index_){}
    , decltype(_impl_.attribute_){}
    , decltype(_impl_.date_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_symbol()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.function_index_, &from._impl_.function_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.date_) -
    reinterpret_cast<char*>(&_impl_.function_index_)) + sizeof(_impl_.date_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RemoteDataSpecifierArchive)
}

inline void RemoteDataSpecifierArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.function_index_){0u}
    , decltype(_impl_.attribute_){0u}
    , decltype(_impl_.date_){0}
  };
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoteDataSpecifierArchive::~RemoteDataSpecifierArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RemoteDataSpecifierArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteDataSpecifierArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.symbol_.Destroy();
}

void RemoteDataSpecifierArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteDataSpecifierArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RemoteDataSpecifierArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.symbol_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.function_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.date_) -
        reinterpret_cast<char*>(&_impl_.function_index_)) + sizeof(_impl_.date_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDataSpecifierArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 function_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_function_index(&has_bits);
          _impl_.function_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string symbol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.RemoteDataSpecifierArchive.symbol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_attribute(&has_bits);
          _impl_.attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_date(&has_bits);
          _impl_.date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteDataSpecifierArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RemoteDataSpecifierArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 function_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_function_index(), target);
  }

  // required string symbol = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.RemoteDataSpecifierArchive.symbol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_symbol(), target);
  }

  // required uint32 attribute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_attribute(), target);
  }

  // optional double date = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RemoteDataSpecifierArchive)
  return target;
}

size_t RemoteDataSpecifierArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RemoteDataSpecifierArchive)
  size_t total_size = 0;

  if (_internal_has_symbol()) {
    // required string symbol = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }

  if (_internal_has_function_index()) {
    // required uint32 function_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_function_index());
  }

  if (_internal_has_attribute()) {
    // required uint32 attribute = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute());
  }

  return total_size;
}
size_t RemoteDataSpecifierArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RemoteDataSpecifierArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string symbol = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());

    // required uint32 function_index = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_function_index());

    // required uint32 attribute = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional double date = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteDataSpecifierArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteDataSpecifierArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteDataSpecifierArchive::GetClassData() const { return &_class_data_; }


void RemoteDataSpecifierArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteDataSpecifierArchive*>(&to_msg);
  auto& from = static_cast<const RemoteDataSpecifierArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RemoteDataSpecifierArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.function_index_ = from._impl_.function_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.attribute_ = from._impl_.attribute_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.date_ = from._impl_.date_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteDataSpecifierArchive::CopyFrom(const RemoteDataSpecifierArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RemoteDataSpecifierArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDataSpecifierArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RemoteDataSpecifierArchive::InternalSwap(RemoteDataSpecifierArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteDataSpecifierArchive, _impl_.date_)
      + sizeof(RemoteDataSpecifierArchive::_impl_.date_)
      - PROTOBUF_FIELD_OFFSET(RemoteDataSpecifierArchive, _impl_.function_index_)>(
          reinterpret_cast<char*>(&_impl_.function_index_),
          reinterpret_cast<char*>(&other->_impl_.function_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDataSpecifierArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[66]);
}

// ===================================================================

class RemoteDataValueMapArchive_RemoteDataMapEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteDataValueMapArchive_RemoteDataMapEntry>()._impl_._has_bits_);
  static const ::TSCE::RemoteDataSpecifierArchive& specifier(const RemoteDataValueMapArchive_RemoteDataMapEntry* msg);
  static void set_has_specifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::CellValueArchive& value(const RemoteDataValueMapArchive_RemoteDataMapEntry* msg);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::RemoteDataSpecifierArchive&
RemoteDataValueMapArchive_RemoteDataMapEntry::_Internal::specifier(const RemoteDataValueMapArchive_RemoteDataMapEntry* msg) {
  return *msg->_impl_.specifier_;
}
const ::TSCE::CellValueArchive&
RemoteDataValueMapArchive_RemoteDataMapEntry::_Internal::value(const RemoteDataValueMapArchive_RemoteDataMapEntry* msg) {
  return *msg->_impl_.value_;
}
RemoteDataValueMapArchive_RemoteDataMapEntry::RemoteDataValueMapArchive_RemoteDataMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
}
RemoteDataValueMapArchive_RemoteDataMapEntry::RemoteDataValueMapArchive_RemoteDataMapEntry(const RemoteDataValueMapArchive_RemoteDataMapEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteDataValueMapArchive_RemoteDataMapEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.specifier_){nullptr}
    , decltype(_impl_.value_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_specifier()) {
    _this->_impl_.specifier_ = new ::TSCE::RemoteDataSpecifierArchive(*from._impl_.specifier_);
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::TSCE::CellValueArchive(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
}

inline void RemoteDataValueMapArchive_RemoteDataMapEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.specifier_){nullptr}
    , decltype(_impl_.value_){nullptr}
  };
}

RemoteDataValueMapArchive_RemoteDataMapEntry::~RemoteDataValueMapArchive_RemoteDataMapEntry() {
  // @@protoc_insertion_point(destructor:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteDataValueMapArchive_RemoteDataMapEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.specifier_;
  if (this != internal_default_instance()) delete _impl_.value_;
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.specifier_ != nullptr);
      _impl_.specifier_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDataValueMapArchive_RemoteDataMapEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.RemoteDataSpecifierArchive specifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_specifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellValueArchive value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteDataValueMapArchive_RemoteDataMapEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.RemoteDataSpecifierArchive specifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::specifier(this),
        _Internal::specifier(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.CellValueArchive value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  return target;
}

size_t RemoteDataValueMapArchive_RemoteDataMapEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  size_t total_size = 0;

  if (_internal_has_specifier()) {
    // required .TSCE.RemoteDataSpecifierArchive specifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.specifier_);
  }

  if (_internal_has_value()) {
    // required .TSCE.CellValueArchive value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return total_size;
}
size_t RemoteDataValueMapArchive_RemoteDataMapEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.RemoteDataSpecifierArchive specifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.specifier_);

    // required .TSCE.CellValueArchive value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteDataValueMapArchive_RemoteDataMapEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteDataValueMapArchive_RemoteDataMapEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteDataValueMapArchive_RemoteDataMapEntry::GetClassData() const { return &_class_data_; }


void RemoteDataValueMapArchive_RemoteDataMapEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteDataValueMapArchive_RemoteDataMapEntry*>(&to_msg);
  auto& from = static_cast<const RemoteDataValueMapArchive_RemoteDataMapEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_specifier()->::TSCE::RemoteDataSpecifierArchive::MergeFrom(
          from._internal_specifier());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_value()->::TSCE::CellValueArchive::MergeFrom(
          from._internal_value());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::CopyFrom(const RemoteDataValueMapArchive_RemoteDataMapEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDataValueMapArchive_RemoteDataMapEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_specifier()) {
    if (!_impl_.specifier_->IsInitialized()) return false;
  }
  if (_internal_has_value()) {
    if (!_impl_.value_->IsInitialized()) return false;
  }
  return true;
}

void RemoteDataValueMapArchive_RemoteDataMapEntry::InternalSwap(RemoteDataValueMapArchive_RemoteDataMapEntry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteDataValueMapArchive_RemoteDataMapEntry, _impl_.value_)
      + sizeof(RemoteDataValueMapArchive_RemoteDataMapEntry::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(RemoteDataValueMapArchive_RemoteDataMapEntry, _impl_.specifier_)>(
          reinterpret_cast<char*>(&_impl_.specifier_),
          reinterpret_cast<char*>(&other->_impl_.specifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDataValueMapArchive_RemoteDataMapEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[67]);
}

// ===================================================================

class RemoteDataValueMapArchive::_Internal {
 public:
};

RemoteDataValueMapArchive::RemoteDataValueMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RemoteDataValueMapArchive)
}
RemoteDataValueMapArchive::RemoteDataValueMapArchive(const RemoteDataValueMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteDataValueMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){from._impl_.entry_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.RemoteDataValueMapArchive)
}

inline void RemoteDataValueMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoteDataValueMapArchive::~RemoteDataValueMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RemoteDataValueMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteDataValueMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_.~RepeatedPtrField();
}

void RemoteDataValueMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteDataValueMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RemoteDataValueMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDataValueMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteDataValueMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RemoteDataValueMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry entry = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RemoteDataValueMapArchive)
  return target;
}

size_t RemoteDataValueMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RemoteDataValueMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_impl_.entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteDataValueMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteDataValueMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteDataValueMapArchive::GetClassData() const { return &_class_data_; }


void RemoteDataValueMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteDataValueMapArchive*>(&to_msg);
  auto& from = static_cast<const RemoteDataValueMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RemoteDataValueMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_.MergeFrom(from._impl_.entry_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteDataValueMapArchive::CopyFrom(const RemoteDataValueMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RemoteDataValueMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDataValueMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.entry_))
    return false;
  return true;
}

void RemoteDataValueMapArchive::InternalSwap(RemoteDataValueMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDataValueMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[68]);
}

// ===================================================================

class StockArchive_AttributeEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<StockArchive_AttributeEntry>()._impl_._has_bits_);
  static void set_has_attribute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

StockArchive_AttributeEntry::StockArchive_AttributeEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.StockArchive.AttributeEntry)
}
StockArchive_AttributeEntry::StockArchive_AttributeEntry(const StockArchive_AttributeEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StockArchive_AttributeEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.attribute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.attribute_ = from._impl_.attribute_;
  // @@protoc_insertion_point(copy_constructor:TSCE.StockArchive.AttributeEntry)
}

inline void StockArchive_AttributeEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.attribute_){0u}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StockArchive_AttributeEntry::~StockArchive_AttributeEntry() {
  // @@protoc_insertion_point(destructor:TSCE.StockArchive.AttributeEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StockArchive_AttributeEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
}

void StockArchive_AttributeEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StockArchive_AttributeEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.StockArchive.AttributeEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.value_.ClearNonDefaultToEmpty();
  }
  _impl_.attribute_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StockArchive_AttributeEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_attribute(&has_bits);
          _impl_.attribute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.StockArchive.AttributeEntry.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StockArchive_AttributeEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.StockArchive.AttributeEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 attribute = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_attribute(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.StockArchive.AttributeEntry.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.StockArchive.AttributeEntry)
  return target;
}

size_t StockArchive_AttributeEntry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.StockArchive.AttributeEntry)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_attribute()) {
    // required uint32 attribute = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute());
  }

  return total_size;
}
size_t StockArchive_AttributeEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.StockArchive.AttributeEntry)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required uint32 attribute = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_attribute());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StockArchive_AttributeEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StockArchive_AttributeEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StockArchive_AttributeEntry::GetClassData() const { return &_class_data_; }


void StockArchive_AttributeEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StockArchive_AttributeEntry*>(&to_msg);
  auto& from = static_cast<const StockArchive_AttributeEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.StockArchive.AttributeEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.attribute_ = from._impl_.attribute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StockArchive_AttributeEntry::CopyFrom(const StockArchive_AttributeEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.StockArchive.AttributeEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockArchive_AttributeEntry::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void StockArchive_AttributeEntry::InternalSwap(StockArchive_AttributeEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  swap(_impl_.attribute_, other->_impl_.attribute_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StockArchive_AttributeEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[69]);
}

// ===================================================================

class StockArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StockArchive>()._impl_._has_bits_);
  static void set_has_symbol(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_date(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StockArchive::StockArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.StockArchive)
}
StockArchive::StockArchive(const StockArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StockArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_){from._impl_.attribute_}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.date_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_symbol()) {
    _this->_impl_.symbol_.Set(from._internal_symbol(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.date_ = from._impl_.date_;
  // @@protoc_insertion_point(copy_constructor:TSCE.StockArchive)
}

inline void StockArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.attribute_){arena}
    , decltype(_impl_.symbol_){}
    , decltype(_impl_.date_){0}
  };
  _impl_.symbol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.symbol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StockArchive::~StockArchive() {
  // @@protoc_insertion_point(destructor:TSCE.StockArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StockArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attribute_.~RepeatedPtrField();
  _impl_.symbol_.Destroy();
}

void StockArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StockArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.StockArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attribute_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.symbol_.ClearNonDefaultToEmpty();
  }
  _impl_.date_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StockArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string symbol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_symbol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.StockArchive.symbol");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double date = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_date(&has_bits);
          _impl_.date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.StockArchive.AttributeEntry attribute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attribute(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StockArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.StockArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string symbol = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_symbol().data(), static_cast<int>(this->_internal_symbol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.StockArchive.symbol");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_symbol(), target);
  }

  // optional double date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_date(), target);
  }

  // repeated .TSCE.StockArchive.AttributeEntry attribute = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attribute_size()); i < n; i++) {
    const auto& repfield = this->_internal_attribute(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.StockArchive)
  return target;
}

size_t StockArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.StockArchive)
  size_t total_size = 0;

  // required string symbol = 1;
  if (_internal_has_symbol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_symbol());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.StockArchive.AttributeEntry attribute = 3;
  total_size += 1UL * this->_internal_attribute_size();
  for (const auto& msg : this->_impl_.attribute_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional double date = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StockArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StockArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StockArchive::GetClassData() const { return &_class_data_; }


void StockArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StockArchive*>(&to_msg);
  auto& from = static_cast<const StockArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.StockArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attribute_.MergeFrom(from._impl_.attribute_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_symbol(from._internal_symbol());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.date_ = from._impl_.date_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StockArchive::CopyFrom(const StockArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.StockArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.attribute_))
    return false;
  return true;
}

void StockArchive::InternalSwap(StockArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.attribute_.InternalSwap(&other->_impl_.attribute_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.symbol_, lhs_arena,
      &other->_impl_.symbol_, rhs_arena
  );
  swap(_impl_.date_, other->_impl_.date_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StockArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[70]);
}

// ===================================================================

class RemoteDataStoreArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteDataStoreArchive>()._impl_._has_bits_);
  static const ::TSCE::RemoteDataValueMapArchive& value_map(const RemoteDataStoreArchive* msg);
  static void set_has_value_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::RemoteDataValueMapArchive&
RemoteDataStoreArchive::_Internal::value_map(const RemoteDataStoreArchive* msg) {
  return *msg->_impl_.value_map_;
}
RemoteDataStoreArchive::RemoteDataStoreArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RemoteDataStoreArchive)
}
RemoteDataStoreArchive::RemoteDataStoreArchive(const RemoteDataStoreArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteDataStoreArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stocks_){from._impl_.stocks_}
    , decltype(_impl_.value_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_value_map()) {
    _this->_impl_.value_map_ = new ::TSCE::RemoteDataValueMapArchive(*from._impl_.value_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RemoteDataStoreArchive)
}

inline void RemoteDataStoreArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stocks_){arena}
    , decltype(_impl_.value_map_){nullptr}
  };
}

RemoteDataStoreArchive::~RemoteDataStoreArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RemoteDataStoreArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteDataStoreArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stocks_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.value_map_;
}

void RemoteDataStoreArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteDataStoreArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RemoteDataStoreArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stocks_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.value_map_ != nullptr);
    _impl_.value_map_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDataStoreArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.RemoteDataValueMapArchive value_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.StockArchive stocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteDataStoreArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RemoteDataStoreArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.RemoteDataValueMapArchive value_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::value_map(this),
        _Internal::value_map(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.StockArchive stocks = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stocks_size()); i < n; i++) {
    const auto& repfield = this->_internal_stocks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RemoteDataStoreArchive)
  return target;
}

size_t RemoteDataStoreArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RemoteDataStoreArchive)
  size_t total_size = 0;

  // required .TSCE.RemoteDataValueMapArchive value_map = 1;
  if (_internal_has_value_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_map_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.StockArchive stocks = 2;
  total_size += 1UL * this->_internal_stocks_size();
  for (const auto& msg : this->_impl_.stocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteDataStoreArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteDataStoreArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteDataStoreArchive::GetClassData() const { return &_class_data_; }


void RemoteDataStoreArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteDataStoreArchive*>(&to_msg);
  auto& from = static_cast<const RemoteDataStoreArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RemoteDataStoreArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stocks_.MergeFrom(from._impl_.stocks_);
  if (from._internal_has_value_map()) {
    _this->_internal_mutable_value_map()->::TSCE::RemoteDataValueMapArchive::MergeFrom(
        from._internal_value_map());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteDataStoreArchive::CopyFrom(const RemoteDataStoreArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RemoteDataStoreArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDataStoreArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.stocks_))
    return false;
  if (_internal_has_value_map()) {
    if (!_impl_.value_map_->IsInitialized()) return false;
  }
  return true;
}

void RemoteDataStoreArchive::InternalSwap(RemoteDataStoreArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.stocks_.InternalSwap(&other->_impl_.stocks_);
  swap(_impl_.value_map_, other->_impl_.value_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDataStoreArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[71]);
}

// ===================================================================

class NameTrackedReferencePair::_Internal {
 public:
  using HasBits = decltype(std::declval<NameTrackedReferencePair>()._impl_._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& tracked_reference(const NameTrackedReferencePair* msg);
  static void set_has_tracked_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tracked_reference_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
NameTrackedReferencePair::_Internal::tracked_reference(const NameTrackedReferencePair* msg) {
  return *msg->_impl_.tracked_reference_;
}
void NameTrackedReferencePair::clear_tracked_reference() {
  if (_impl_.tracked_reference_ != nullptr) _impl_.tracked_reference_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
NameTrackedReferencePair::NameTrackedReferencePair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.NameTrackedReferencePair)
}
NameTrackedReferencePair::NameTrackedReferencePair(const NameTrackedReferencePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NameTrackedReferencePair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tracked_reference_){nullptr}
    , decltype(_impl_.tracked_reference_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tracked_reference()) {
    _this->_impl_.tracked_reference_ = new ::TSP::Reference(*from._impl_.tracked_reference_);
  }
  _this->_impl_.tracked_reference_id_ = from._impl_.tracked_reference_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.NameTrackedReferencePair)
}

inline void NameTrackedReferencePair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.tracked_reference_){nullptr}
    , decltype(_impl_.tracked_reference_id_){0u}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NameTrackedReferencePair::~NameTrackedReferencePair() {
  // @@protoc_insertion_point(destructor:TSCE.NameTrackedReferencePair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NameTrackedReferencePair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tracked_reference_;
}

void NameTrackedReferencePair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NameTrackedReferencePair::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NameTrackedReferencePair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.tracked_reference_ != nullptr);
      _impl_.tracked_reference_->Clear();
    }
  }
  _impl_.tracked_reference_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NameTrackedReferencePair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.NameTrackedReferencePair.name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference tracked_reference = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracked_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 tracked_reference_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_tracked_reference_id(&has_bits);
          _impl_.tracked_reference_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NameTrackedReferencePair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NameTrackedReferencePair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.NameTrackedReferencePair.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional .TSP.Reference tracked_reference = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tracked_reference(this),
        _Internal::tracked_reference(this).GetCachedSize(), target, stream);
  }

  // optional uint32 tracked_reference_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tracked_reference_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NameTrackedReferencePair)
  return target;
}

size_t NameTrackedReferencePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NameTrackedReferencePair)
  size_t total_size = 0;

  // required string name = 1;
  if (_internal_has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference tracked_reference = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.tracked_reference_);
    }

    // optional uint32 tracked_reference_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_tracked_reference_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NameTrackedReferencePair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NameTrackedReferencePair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NameTrackedReferencePair::GetClassData() const { return &_class_data_; }


void NameTrackedReferencePair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NameTrackedReferencePair*>(&to_msg);
  auto& from = static_cast<const NameTrackedReferencePair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NameTrackedReferencePair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_tracked_reference()->::TSP::Reference::MergeFrom(
          from._internal_tracked_reference());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.tracked_reference_id_ = from._impl_.tracked_reference_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NameTrackedReferencePair::CopyFrom(const NameTrackedReferencePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NameTrackedReferencePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NameTrackedReferencePair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_tracked_reference()) {
    if (!_impl_.tracked_reference_->IsInitialized()) return false;
  }
  return true;
}

void NameTrackedReferencePair::InternalSwap(NameTrackedReferencePair* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NameTrackedReferencePair, _impl_.tracked_reference_id_)
      + sizeof(NameTrackedReferencePair::_impl_.tracked_reference_id_)
      - PROTOBUF_FIELD_OFFSET(NameTrackedReferencePair, _impl_.tracked_reference_)>(
          reinterpret_cast<char*>(&_impl_.tracked_reference_),
          reinterpret_cast<char*>(&other->_impl_.tracked_reference_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NameTrackedReferencePair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[72]);
}

// ===================================================================

class NamesByTrackedReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NamesByTrackedReferenceArchive>()._impl_._has_bits_);
  static const ::TSP::CFUUIDArchive& table_id(const NamesByTrackedReferenceArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::CFUUIDArchive&
NamesByTrackedReferenceArchive::_Internal::table_id(const NamesByTrackedReferenceArchive* msg) {
  return *msg->_impl_.table_id_;
}
void NamesByTrackedReferenceArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NamesByTrackedReferenceArchive::NamesByTrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.NamesByTrackedReferenceArchive)
}
NamesByTrackedReferenceArchive::NamesByTrackedReferenceArchive(const NamesByTrackedReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NamesByTrackedReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_tracked_reference_pair_){from._impl_.name_tracked_reference_pair_}
    , decltype(_impl_.table_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSP::CFUUIDArchive(*from._impl_.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.NamesByTrackedReferenceArchive)
}

inline void NamesByTrackedReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_tracked_reference_pair_){arena}
    , decltype(_impl_.table_id_){nullptr}
  };
}

NamesByTrackedReferenceArchive::~NamesByTrackedReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NamesByTrackedReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NamesByTrackedReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_tracked_reference_pair_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void NamesByTrackedReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NamesByTrackedReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NamesByTrackedReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_tracked_reference_pair_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
    _impl_.table_id_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamesByTrackedReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_name_tracked_reference_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NamesByTrackedReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NamesByTrackedReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_name_tracked_reference_pair_size()); i < n; i++) {
    const auto& repfield = this->_internal_name_tracked_reference_pair(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NamesByTrackedReferenceArchive)
  return target;
}

size_t NamesByTrackedReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NamesByTrackedReferenceArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive table_id = 1;
  if (_internal_has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.NameTrackedReferencePair name_tracked_reference_pair = 2;
  total_size += 1UL * this->_internal_name_tracked_reference_pair_size();
  for (const auto& msg : this->_impl_.name_tracked_reference_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamesByTrackedReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NamesByTrackedReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamesByTrackedReferenceArchive::GetClassData() const { return &_class_data_; }


void NamesByTrackedReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NamesByTrackedReferenceArchive*>(&to_msg);
  auto& from = static_cast<const NamesByTrackedReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NamesByTrackedReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.name_tracked_reference_pair_.MergeFrom(from._impl_.name_tracked_reference_pair_);
  if (from._internal_has_table_id()) {
    _this->_internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(
        from._internal_table_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamesByTrackedReferenceArchive::CopyFrom(const NamesByTrackedReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NamesByTrackedReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamesByTrackedReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.name_tracked_reference_pair_))
    return false;
  return true;
}

void NamesByTrackedReferenceArchive::InternalSwap(NamesByTrackedReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.name_tracked_reference_pair_.InternalSwap(&other->_impl_.name_tracked_reference_pair_);
  swap(_impl_.table_id_, other->_impl_.table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamesByTrackedReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[73]);
}

// ===================================================================

class NamedReferenceManagerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NamedReferenceManagerArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& reference_tracker(const NamedReferenceManagerArchive* msg);
  static void set_has_reference_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
NamedReferenceManagerArchive::_Internal::reference_tracker(const NamedReferenceManagerArchive* msg) {
  return *msg->_impl_.reference_tracker_;
}
void NamedReferenceManagerArchive::clear_reference_tracker() {
  if (_impl_.reference_tracker_ != nullptr) _impl_.reference_tracker_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
NamedReferenceManagerArchive::NamedReferenceManagerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.NamedReferenceManagerArchive)
}
NamedReferenceManagerArchive::NamedReferenceManagerArchive(const NamedReferenceManagerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NamedReferenceManagerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_by_tracked_reference_by_table_){from._impl_.names_by_tracked_reference_by_table_}
    , decltype(_impl_.reference_tracker_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reference_tracker()) {
    _this->_impl_.reference_tracker_ = new ::TSP::Reference(*from._impl_.reference_tracker_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.NamedReferenceManagerArchive)
}

inline void NamedReferenceManagerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.names_by_tracked_reference_by_table_){arena}
    , decltype(_impl_.reference_tracker_){nullptr}
  };
}

NamedReferenceManagerArchive::~NamedReferenceManagerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NamedReferenceManagerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NamedReferenceManagerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.names_by_tracked_reference_by_table_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.reference_tracker_;
}

void NamedReferenceManagerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NamedReferenceManagerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NamedReferenceManagerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.names_by_tracked_reference_by_table_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.reference_tracker_ != nullptr);
    _impl_.reference_tracker_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedReferenceManagerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference reference_tracker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference_tracker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_names_by_tracked_reference_by_table(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NamedReferenceManagerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NamedReferenceManagerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference reference_tracker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::reference_tracker(this),
        _Internal::reference_tracker(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_names_by_tracked_reference_by_table_size()); i < n; i++) {
    const auto& repfield = this->_internal_names_by_tracked_reference_by_table(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NamedReferenceManagerArchive)
  return target;
}

size_t NamedReferenceManagerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NamedReferenceManagerArchive)
  size_t total_size = 0;

  // required .TSP.Reference reference_tracker = 1;
  if (_internal_has_reference_tracker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.reference_tracker_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.NamesByTrackedReferenceArchive names_by_tracked_reference_by_table = 2 [deprecated = true];
  total_size += 1UL * this->_internal_names_by_tracked_reference_by_table_size();
  for (const auto& msg : this->_impl_.names_by_tracked_reference_by_table_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedReferenceManagerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NamedReferenceManagerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedReferenceManagerArchive::GetClassData() const { return &_class_data_; }


void NamedReferenceManagerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NamedReferenceManagerArchive*>(&to_msg);
  auto& from = static_cast<const NamedReferenceManagerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NamedReferenceManagerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.names_by_tracked_reference_by_table_.MergeFrom(from._impl_.names_by_tracked_reference_by_table_);
  if (from._internal_has_reference_tracker()) {
    _this->_internal_mutable_reference_tracker()->::TSP::Reference::MergeFrom(
        from._internal_reference_tracker());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedReferenceManagerArchive::CopyFrom(const NamedReferenceManagerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NamedReferenceManagerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedReferenceManagerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.names_by_tracked_reference_by_table_))
    return false;
  if (_internal_has_reference_tracker()) {
    if (!_impl_.reference_tracker_->IsInitialized()) return false;
  }
  return true;
}

void NamedReferenceManagerArchive::InternalSwap(NamedReferenceManagerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.names_by_tracked_reference_by_table_.InternalSwap(&other->_impl_.names_by_tracked_reference_by_table_);
  swap(_impl_.reference_tracker_, other->_impl_.reference_tracker_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedReferenceManagerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[74]);
}

// ===================================================================

class UuidSetStoreArchive_UuidSet::_Internal {
 public:
  using HasBits = decltype(std::declval<UuidSetStoreArchive_UuidSet>()._impl_._has_bits_);
  static void set_has_index_of_set(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void UuidSetStoreArchive_UuidSet::clear_uuid() {
  _impl_.uuid_.Clear();
}
UuidSetStoreArchive_UuidSet::UuidSetStoreArchive_UuidSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidSetStoreArchive.UuidSet)
}
UuidSetStoreArchive_UuidSet::UuidSetStoreArchive_UuidSet(const UuidSetStoreArchive_UuidSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UuidSetStoreArchive_UuidSet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_){from._impl_.uuid_}
    , decltype(_impl_.index_of_set_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_of_set_ = from._impl_.index_of_set_;
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidSetStoreArchive.UuidSet)
}

inline void UuidSetStoreArchive_UuidSet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uuid_){arena}
    , decltype(_impl_.index_of_set_){0u}
  };
}

UuidSetStoreArchive_UuidSet::~UuidSetStoreArchive_UuidSet() {
  // @@protoc_insertion_point(destructor:TSCE.UuidSetStoreArchive.UuidSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UuidSetStoreArchive_UuidSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuid_.~RepeatedPtrField();
}

void UuidSetStoreArchive_UuidSet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UuidSetStoreArchive_UuidSet::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidSetStoreArchive.UuidSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuid_.Clear();
  _impl_.index_of_set_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidSetStoreArchive_UuidSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required uint32 index_of_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index_of_set(&has_bits);
          _impl_.index_of_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UuidSetStoreArchive_UuidSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidSetStoreArchive.UuidSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uuid = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uuid_size()); i < n; i++) {
    const auto& repfield = this->_internal_uuid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 index_of_set = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index_of_set(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidSetStoreArchive.UuidSet)
  return target;
}

size_t UuidSetStoreArchive_UuidSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidSetStoreArchive.UuidSet)
  size_t total_size = 0;

  // required uint32 index_of_set = 2;
  if (_internal_has_index_of_set()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index_of_set());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uuid = 1;
  total_size += 1UL * this->_internal_uuid_size();
  for (const auto& msg : this->_impl_.uuid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UuidSetStoreArchive_UuidSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UuidSetStoreArchive_UuidSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UuidSetStoreArchive_UuidSet::GetClassData() const { return &_class_data_; }


void UuidSetStoreArchive_UuidSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UuidSetStoreArchive_UuidSet*>(&to_msg);
  auto& from = static_cast<const UuidSetStoreArchive_UuidSet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidSetStoreArchive.UuidSet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uuid_.MergeFrom(from._impl_.uuid_);
  if (from._internal_has_index_of_set()) {
    _this->_internal_set_index_of_set(from._internal_index_of_set());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UuidSetStoreArchive_UuidSet::CopyFrom(const UuidSetStoreArchive_UuidSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidSetStoreArchive.UuidSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidSetStoreArchive_UuidSet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uuid_))
    return false;
  return true;
}

void UuidSetStoreArchive_UuidSet::InternalSwap(UuidSetStoreArchive_UuidSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.uuid_.InternalSwap(&other->_impl_.uuid_);
  swap(_impl_.index_of_set_, other->_impl_.index_of_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidSetStoreArchive_UuidSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[75]);
}

// ===================================================================

class UuidSetStoreArchive::_Internal {
 public:
};

UuidSetStoreArchive::UuidSetStoreArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidSetStoreArchive)
}
UuidSetStoreArchive::UuidSetStoreArchive(const UuidSetStoreArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UuidSetStoreArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uuidset_){from._impl_.uuidset_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidSetStoreArchive)
}

inline void UuidSetStoreArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uuidset_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UuidSetStoreArchive::~UuidSetStoreArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UuidSetStoreArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UuidSetStoreArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uuidset_.~RepeatedPtrField();
}

void UuidSetStoreArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UuidSetStoreArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidSetStoreArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uuidset_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidSetStoreArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.UuidSetStoreArchive.UuidSet uuidSet = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uuidset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UuidSetStoreArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidSetStoreArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.UuidSetStoreArchive.UuidSet uuidSet = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uuidset_size()); i < n; i++) {
    const auto& repfield = this->_internal_uuidset(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidSetStoreArchive)
  return target;
}

size_t UuidSetStoreArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidSetStoreArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UuidSetStoreArchive.UuidSet uuidSet = 1;
  total_size += 1UL * this->_internal_uuidset_size();
  for (const auto& msg : this->_impl_.uuidset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UuidSetStoreArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UuidSetStoreArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UuidSetStoreArchive::GetClassData() const { return &_class_data_; }


void UuidSetStoreArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UuidSetStoreArchive*>(&to_msg);
  auto& from = static_cast<const UuidSetStoreArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidSetStoreArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uuidset_.MergeFrom(from._impl_.uuidset_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UuidSetStoreArchive::CopyFrom(const UuidSetStoreArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidSetStoreArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidSetStoreArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uuidset_))
    return false;
  return true;
}

void UuidSetStoreArchive::InternalSwap(UuidSetStoreArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uuidset_.InternalSwap(&other->_impl_.uuidset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidSetStoreArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[76]);
}

// ===================================================================

class UuidReferenceMapArchive_CellRefsForUuid::_Internal {
 public:
  using HasBits = decltype(std::declval<UuidReferenceMapArchive_CellRefsForUuid>()._impl_._has_bits_);
  static const ::TSP::UUID& uuid(const UuidReferenceMapArchive_CellRefsForUuid* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::InternalCellRefSetArchive& cell_refs(const UuidReferenceMapArchive_CellRefsForUuid* msg);
  static void set_has_cell_refs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
UuidReferenceMapArchive_CellRefsForUuid::_Internal::uuid(const UuidReferenceMapArchive_CellRefsForUuid* msg) {
  return *msg->_impl_.uuid_;
}
const ::TSCE::InternalCellRefSetArchive&
UuidReferenceMapArchive_CellRefsForUuid::_Internal::cell_refs(const UuidReferenceMapArchive_CellRefsForUuid* msg) {
  return *msg->_impl_.cell_refs_;
}
void UuidReferenceMapArchive_CellRefsForUuid::clear_uuid() {
  if (_impl_.uuid_ != nullptr) _impl_.uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UuidReferenceMapArchive_CellRefsForUuid::UuidReferenceMapArchive_CellRefsForUuid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
}
UuidReferenceMapArchive_CellRefsForUuid::UuidReferenceMapArchive_CellRefsForUuid(const UuidReferenceMapArchive_CellRefsForUuid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UuidReferenceMapArchive_CellRefsForUuid* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_ref_){from._impl_.cell_ref_}
    , decltype(_impl_.uuid_){nullptr}
    , decltype(_impl_.cell_refs_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_ = new ::TSP::UUID(*from._impl_.uuid_);
  }
  if (from._internal_has_cell_refs()) {
    _this->_impl_.cell_refs_ = new ::TSCE::InternalCellRefSetArchive(*from._impl_.cell_refs_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
}

inline void UuidReferenceMapArchive_CellRefsForUuid::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_ref_){arena}
    , decltype(_impl_.uuid_){nullptr}
    , decltype(_impl_.cell_refs_){nullptr}
  };
}

UuidReferenceMapArchive_CellRefsForUuid::~UuidReferenceMapArchive_CellRefsForUuid() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UuidReferenceMapArchive_CellRefsForUuid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_ref_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.uuid_;
  if (this != internal_default_instance()) delete _impl_.cell_refs_;
}

void UuidReferenceMapArchive_CellRefsForUuid::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UuidReferenceMapArchive_CellRefsForUuid::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_ref_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.uuid_ != nullptr);
      _impl_.uuid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_refs_ != nullptr);
      _impl_.cell_refs_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferenceMapArchive_CellRefsForUuid::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.InternalCellReferenceArchive cell_ref = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_ref(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_refs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UuidReferenceMapArchive_CellRefsForUuid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::uuid(this),
        _Internal::uuid(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.InternalCellReferenceArchive cell_ref = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_ref_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_ref(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell_refs(this),
        _Internal::cell_refs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  return target;
}

size_t UuidReferenceMapArchive_CellRefsForUuid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  size_t total_size = 0;

  // required .TSP.UUID uuid = 1;
  if (_internal_has_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uuid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.InternalCellReferenceArchive cell_ref = 2;
  total_size += 1UL * this->_internal_cell_ref_size();
  for (const auto& msg : this->_impl_.cell_ref_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_refs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UuidReferenceMapArchive_CellRefsForUuid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UuidReferenceMapArchive_CellRefsForUuid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UuidReferenceMapArchive_CellRefsForUuid::GetClassData() const { return &_class_data_; }


void UuidReferenceMapArchive_CellRefsForUuid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UuidReferenceMapArchive_CellRefsForUuid*>(&to_msg);
  auto& from = static_cast<const UuidReferenceMapArchive_CellRefsForUuid&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_ref_.MergeFrom(from._impl_.cell_ref_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_uuid()->::TSP::UUID::MergeFrom(
          from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_refs()->::TSCE::InternalCellRefSetArchive::MergeFrom(
          from._internal_cell_refs());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UuidReferenceMapArchive_CellRefsForUuid::CopyFrom(const UuidReferenceMapArchive_CellRefsForUuid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferenceMapArchive.CellRefsForUuid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferenceMapArchive_CellRefsForUuid::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_ref_))
    return false;
  if (_internal_has_uuid()) {
    if (!_impl_.uuid_->IsInitialized()) return false;
  }
  if (_internal_has_cell_refs()) {
    if (!_impl_.cell_refs_->IsInitialized()) return false;
  }
  return true;
}

void UuidReferenceMapArchive_CellRefsForUuid::InternalSwap(UuidReferenceMapArchive_CellRefsForUuid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_ref_.InternalSwap(&other->_impl_.cell_ref_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UuidReferenceMapArchive_CellRefsForUuid, _impl_.cell_refs_)
      + sizeof(UuidReferenceMapArchive_CellRefsForUuid::_impl_.cell_refs_)
      - PROTOBUF_FIELD_OFFSET(UuidReferenceMapArchive_CellRefsForUuid, _impl_.uuid_)>(
          reinterpret_cast<char*>(&_impl_.uuid_),
          reinterpret_cast<char*>(&other->_impl_.uuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferenceMapArchive_CellRefsForUuid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[77]);
}

// ===================================================================

class UuidReferenceMapArchive::_Internal {
 public:
};

UuidReferenceMapArchive::UuidReferenceMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.UuidReferenceMapArchive)
}
UuidReferenceMapArchive::UuidReferenceMapArchive(const UuidReferenceMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UuidReferenceMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_refs_for_uuid_){from._impl_.cell_refs_for_uuid_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.UuidReferenceMapArchive)
}

inline void UuidReferenceMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_refs_for_uuid_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UuidReferenceMapArchive::~UuidReferenceMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.UuidReferenceMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UuidReferenceMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_refs_for_uuid_.~RepeatedPtrField();
}

void UuidReferenceMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UuidReferenceMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.UuidReferenceMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_refs_for_uuid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UuidReferenceMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.UuidReferenceMapArchive.CellRefsForUuid cell_refs_for_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_refs_for_uuid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UuidReferenceMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.UuidReferenceMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.UuidReferenceMapArchive.CellRefsForUuid cell_refs_for_uuid = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_refs_for_uuid_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_refs_for_uuid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.UuidReferenceMapArchive)
  return target;
}

size_t UuidReferenceMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.UuidReferenceMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.UuidReferenceMapArchive.CellRefsForUuid cell_refs_for_uuid = 1;
  total_size += 1UL * this->_internal_cell_refs_for_uuid_size();
  for (const auto& msg : this->_impl_.cell_refs_for_uuid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UuidReferenceMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UuidReferenceMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UuidReferenceMapArchive::GetClassData() const { return &_class_data_; }


void UuidReferenceMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UuidReferenceMapArchive*>(&to_msg);
  auto& from = static_cast<const UuidReferenceMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.UuidReferenceMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_refs_for_uuid_.MergeFrom(from._impl_.cell_refs_for_uuid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UuidReferenceMapArchive::CopyFrom(const UuidReferenceMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.UuidReferenceMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UuidReferenceMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_refs_for_uuid_))
    return false;
  return true;
}

void UuidReferenceMapArchive::InternalSwap(UuidReferenceMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_refs_for_uuid_.InternalSwap(&other->_impl_.cell_refs_for_uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UuidReferenceMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[78]);
}

// ===================================================================

class GroupByNodeMapArchive_CellRefsForGroupNode::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByNodeMapArchive_CellRefsForGroupNode>()._impl_._has_bits_);
  static const ::TSP::UUID& group_node_uid(const GroupByNodeMapArchive_CellRefsForGroupNode* msg);
  static void set_has_group_node_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::InternalCellRefSetArchive& cell_refs(const GroupByNodeMapArchive_CellRefsForGroupNode* msg);
  static void set_has_cell_refs(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
GroupByNodeMapArchive_CellRefsForGroupNode::_Internal::group_node_uid(const GroupByNodeMapArchive_CellRefsForGroupNode* msg) {
  return *msg->_impl_.group_node_uid_;
}
const ::TSCE::InternalCellRefSetArchive&
GroupByNodeMapArchive_CellRefsForGroupNode::_Internal::cell_refs(const GroupByNodeMapArchive_CellRefsForGroupNode* msg) {
  return *msg->_impl_.cell_refs_;
}
void GroupByNodeMapArchive_CellRefsForGroupNode::clear_group_node_uid() {
  if (_impl_.group_node_uid_ != nullptr) _impl_.group_node_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GroupByNodeMapArchive_CellRefsForGroupNode::GroupByNodeMapArchive_CellRefsForGroupNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
}
GroupByNodeMapArchive_CellRefsForGroupNode::GroupByNodeMapArchive_CellRefsForGroupNode(const GroupByNodeMapArchive_CellRefsForGroupNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupByNodeMapArchive_CellRefsForGroupNode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_node_uid_){nullptr}
    , decltype(_impl_.cell_refs_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_node_uid()) {
    _this->_impl_.group_node_uid_ = new ::TSP::UUID(*from._impl_.group_node_uid_);
  }
  if (from._internal_has_cell_refs()) {
    _this->_impl_.cell_refs_ = new ::TSCE::InternalCellRefSetArchive(*from._impl_.cell_refs_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
}

inline void GroupByNodeMapArchive_CellRefsForGroupNode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_node_uid_){nullptr}
    , decltype(_impl_.cell_refs_){nullptr}
  };
}

GroupByNodeMapArchive_CellRefsForGroupNode::~GroupByNodeMapArchive_CellRefsForGroupNode() {
  // @@protoc_insertion_point(destructor:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupByNodeMapArchive_CellRefsForGroupNode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.group_node_uid_;
  if (this != internal_default_instance()) delete _impl_.cell_refs_;
}

void GroupByNodeMapArchive_CellRefsForGroupNode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupByNodeMapArchive_CellRefsForGroupNode::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.group_node_uid_ != nullptr);
      _impl_.group_node_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_refs_ != nullptr);
      _impl_.cell_refs_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByNodeMapArchive_CellRefsForGroupNode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID group_node_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_refs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupByNodeMapArchive_CellRefsForGroupNode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID group_node_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group_node_uid(this),
        _Internal::group_node_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell_refs(this),
        _Internal::cell_refs(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  return target;
}

size_t GroupByNodeMapArchive_CellRefsForGroupNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  size_t total_size = 0;

  // required .TSP.UUID group_node_uid = 1;
  if (_internal_has_group_node_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_node_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.InternalCellRefSetArchive cell_refs = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_refs_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupByNodeMapArchive_CellRefsForGroupNode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupByNodeMapArchive_CellRefsForGroupNode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupByNodeMapArchive_CellRefsForGroupNode::GetClassData() const { return &_class_data_; }


void GroupByNodeMapArchive_CellRefsForGroupNode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupByNodeMapArchive_CellRefsForGroupNode*>(&to_msg);
  auto& from = static_cast<const GroupByNodeMapArchive_CellRefsForGroupNode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_group_node_uid()->::TSP::UUID::MergeFrom(
          from._internal_group_node_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_refs()->::TSCE::InternalCellRefSetArchive::MergeFrom(
          from._internal_cell_refs());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupByNodeMapArchive_CellRefsForGroupNode::CopyFrom(const GroupByNodeMapArchive_CellRefsForGroupNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.GroupByNodeMapArchive.CellRefsForGroupNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByNodeMapArchive_CellRefsForGroupNode::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_group_node_uid()) {
    if (!_impl_.group_node_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cell_refs()) {
    if (!_impl_.cell_refs_->IsInitialized()) return false;
  }
  return true;
}

void GroupByNodeMapArchive_CellRefsForGroupNode::InternalSwap(GroupByNodeMapArchive_CellRefsForGroupNode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupByNodeMapArchive_CellRefsForGroupNode, _impl_.cell_refs_)
      + sizeof(GroupByNodeMapArchive_CellRefsForGroupNode::_impl_.cell_refs_)
      - PROTOBUF_FIELD_OFFSET(GroupByNodeMapArchive_CellRefsForGroupNode, _impl_.group_node_uid_)>(
          reinterpret_cast<char*>(&_impl_.group_node_uid_),
          reinterpret_cast<char*>(&other->_impl_.group_node_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByNodeMapArchive_CellRefsForGroupNode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[79]);
}

// ===================================================================

class GroupByNodeMapArchive_GroupNodesForGroupBy::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByNodeMapArchive_GroupNodesForGroupBy>()._impl_._has_bits_);
  static const ::TSP::UUID& group_by_uid(const GroupByNodeMapArchive_GroupNodesForGroupBy* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
GroupByNodeMapArchive_GroupNodesForGroupBy::_Internal::group_by_uid(const GroupByNodeMapArchive_GroupNodesForGroupBy* msg) {
  return *msg->_impl_.group_by_uid_;
}
void GroupByNodeMapArchive_GroupNodesForGroupBy::clear_group_by_uid() {
  if (_impl_.group_by_uid_ != nullptr) _impl_.group_by_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GroupByNodeMapArchive_GroupNodesForGroupBy::GroupByNodeMapArchive_GroupNodesForGroupBy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
}
GroupByNodeMapArchive_GroupNodesForGroupBy::GroupByNodeMapArchive_GroupNodesForGroupBy(const GroupByNodeMapArchive_GroupNodesForGroupBy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupByNodeMapArchive_GroupNodesForGroupBy* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.refs_for_group_node_){from._impl_.refs_for_group_node_}
    , decltype(_impl_.group_by_uid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_by_uid()) {
    _this->_impl_.group_by_uid_ = new ::TSP::UUID(*from._impl_.group_by_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
}

inline void GroupByNodeMapArchive_GroupNodesForGroupBy::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.refs_for_group_node_){arena}
    , decltype(_impl_.group_by_uid_){nullptr}
  };
}

GroupByNodeMapArchive_GroupNodesForGroupBy::~GroupByNodeMapArchive_GroupNodesForGroupBy() {
  // @@protoc_insertion_point(destructor:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupByNodeMapArchive_GroupNodesForGroupBy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.refs_for_group_node_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.group_by_uid_;
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.refs_for_group_node_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.group_by_uid_ != nullptr);
    _impl_.group_by_uid_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByNodeMapArchive_GroupNodesForGroupBy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID group_by_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.GroupByNodeMapArchive.CellRefsForGroupNode refs_for_group_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refs_for_group_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupByNodeMapArchive_GroupNodesForGroupBy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID group_by_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group_by_uid(this),
        _Internal::group_by_uid(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.GroupByNodeMapArchive.CellRefsForGroupNode refs_for_group_node = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_refs_for_group_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_refs_for_group_node(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  return target;
}

size_t GroupByNodeMapArchive_GroupNodesForGroupBy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  size_t total_size = 0;

  // required .TSP.UUID group_by_uid = 1;
  if (_internal_has_group_by_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.GroupByNodeMapArchive.CellRefsForGroupNode refs_for_group_node = 2;
  total_size += 1UL * this->_internal_refs_for_group_node_size();
  for (const auto& msg : this->_impl_.refs_for_group_node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupByNodeMapArchive_GroupNodesForGroupBy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupByNodeMapArchive_GroupNodesForGroupBy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupByNodeMapArchive_GroupNodesForGroupBy::GetClassData() const { return &_class_data_; }


void GroupByNodeMapArchive_GroupNodesForGroupBy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupByNodeMapArchive_GroupNodesForGroupBy*>(&to_msg);
  auto& from = static_cast<const GroupByNodeMapArchive_GroupNodesForGroupBy&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.refs_for_group_node_.MergeFrom(from._impl_.refs_for_group_node_);
  if (from._internal_has_group_by_uid()) {
    _this->_internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(
        from._internal_group_by_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::CopyFrom(const GroupByNodeMapArchive_GroupNodesForGroupBy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByNodeMapArchive_GroupNodesForGroupBy::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.refs_for_group_node_))
    return false;
  if (_internal_has_group_by_uid()) {
    if (!_impl_.group_by_uid_->IsInitialized()) return false;
  }
  return true;
}

void GroupByNodeMapArchive_GroupNodesForGroupBy::InternalSwap(GroupByNodeMapArchive_GroupNodesForGroupBy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.refs_for_group_node_.InternalSwap(&other->_impl_.refs_for_group_node_);
  swap(_impl_.group_by_uid_, other->_impl_.group_by_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByNodeMapArchive_GroupNodesForGroupBy::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[80]);
}

// ===================================================================

class GroupByNodeMapArchive::_Internal {
 public:
};

GroupByNodeMapArchive::GroupByNodeMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.GroupByNodeMapArchive)
}
GroupByNodeMapArchive::GroupByNodeMapArchive(const GroupByNodeMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupByNodeMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.refs_for_group_by_){from._impl_.refs_for_group_by_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.GroupByNodeMapArchive)
}

inline void GroupByNodeMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.refs_for_group_by_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GroupByNodeMapArchive::~GroupByNodeMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.GroupByNodeMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupByNodeMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.refs_for_group_by_.~RepeatedPtrField();
}

void GroupByNodeMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupByNodeMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.GroupByNodeMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.refs_for_group_by_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByNodeMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy refs_for_group_by = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_refs_for_group_by(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupByNodeMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.GroupByNodeMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy refs_for_group_by = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_refs_for_group_by_size()); i < n; i++) {
    const auto& repfield = this->_internal_refs_for_group_by(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.GroupByNodeMapArchive)
  return target;
}

size_t GroupByNodeMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.GroupByNodeMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy refs_for_group_by = 1;
  total_size += 1UL * this->_internal_refs_for_group_by_size();
  for (const auto& msg : this->_impl_.refs_for_group_by_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupByNodeMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupByNodeMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupByNodeMapArchive::GetClassData() const { return &_class_data_; }


void GroupByNodeMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupByNodeMapArchive*>(&to_msg);
  auto& from = static_cast<const GroupByNodeMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.GroupByNodeMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.refs_for_group_by_.MergeFrom(from._impl_.refs_for_group_by_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupByNodeMapArchive::CopyFrom(const GroupByNodeMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.GroupByNodeMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByNodeMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.refs_for_group_by_))
    return false;
  return true;
}

void GroupByNodeMapArchive::InternalSwap(GroupByNodeMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.refs_for_group_by_.InternalSwap(&other->_impl_.refs_for_group_by_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByNodeMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[81]);
}

// ===================================================================

class CalculationEngineArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CalculationEngineArchive>()._impl_._has_bits_);
  static void set_has_base_date_1904(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCE::DependencyTrackerArchive& dependency_tracker(const CalculationEngineArchive* msg);
  static void set_has_dependency_tracker(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& named_reference_manager(const CalculationEngineArchive* msg);
  static void set_has_named_reference_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_excel_import_date_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_saved_locale_identifier_for_4_2(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_document_random_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCE::UuidReferenceMapArchive& uuid_reference_map(const CalculationEngineArchive* msg);
  static void set_has_uuid_reference_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_document_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_document_timezone(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RewriteTableUIDInfoArchive& table_uid_history(const CalculationEngineArchive* msg);
  static void set_has_table_uid_history(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& remote_data_store(const CalculationEngineArchive* msg);
  static void set_has_remote_data_store(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::GroupByNodeMapArchive& group_node_map(const CalculationEngineArchive* msg);
  static void set_has_group_node_map(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& header_name_manager(const CalculationEngineArchive* msg);
  static void set_has_header_name_manager(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& refs_to_dirty(const CalculationEngineArchive* msg);
  static void set_has_refs_to_dirty(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_saved_locale_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::TSCE::DependencyTrackerArchive&
CalculationEngineArchive::_Internal::dependency_tracker(const CalculationEngineArchive* msg) {
  return *msg->_impl_.dependency_tracker_;
}
const ::TSP::Reference&
CalculationEngineArchive::_Internal::named_reference_manager(const CalculationEngineArchive* msg) {
  return *msg->_impl_.named_reference_manager_;
}
const ::TSCE::UuidReferenceMapArchive&
CalculationEngineArchive::_Internal::uuid_reference_map(const CalculationEngineArchive* msg) {
  return *msg->_impl_.uuid_reference_map_;
}
const ::TSCE::RewriteTableUIDInfoArchive&
CalculationEngineArchive::_Internal::table_uid_history(const CalculationEngineArchive* msg) {
  return *msg->_impl_.table_uid_history_;
}
const ::TSP::Reference&
CalculationEngineArchive::_Internal::remote_data_store(const CalculationEngineArchive* msg) {
  return *msg->_impl_.remote_data_store_;
}
const ::TSCE::GroupByNodeMapArchive&
CalculationEngineArchive::_Internal::group_node_map(const CalculationEngineArchive* msg) {
  return *msg->_impl_.group_node_map_;
}
const ::TSP::Reference&
CalculationEngineArchive::_Internal::header_name_manager(const CalculationEngineArchive* msg) {
  return *msg->_impl_.header_name_manager_;
}
const ::TSP::Reference&
CalculationEngineArchive::_Internal::refs_to_dirty(const CalculationEngineArchive* msg) {
  return *msg->_impl_.refs_to_dirty_;
}
void CalculationEngineArchive::clear_named_reference_manager() {
  if (_impl_.named_reference_manager_ != nullptr) _impl_.named_reference_manager_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CalculationEngineArchive::clear_remote_data_store() {
  if (_impl_.remote_data_store_ != nullptr) _impl_.remote_data_store_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void CalculationEngineArchive::clear_header_name_manager() {
  if (_impl_.header_name_manager_ != nullptr) _impl_.header_name_manager_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void CalculationEngineArchive::clear_refs_to_dirty() {
  if (_impl_.refs_to_dirty_ != nullptr) _impl_.refs_to_dirty_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void CalculationEngineArchive::clear_begin_tracking_names_legacy_nrm() {
  _impl_.begin_tracking_names_legacy_nrm_.Clear();
}
void CalculationEngineArchive::clear_end_tracking_names_legacy_nrm() {
  _impl_.end_tracking_names_legacy_nrm_.Clear();
}
CalculationEngineArchive::CalculationEngineArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CalculationEngineArchive)
}
CalculationEngineArchive::CalculationEngineArchive(const CalculationEngineArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CalculationEngineArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_tracking_names_legacy_nrm_){from._impl_.begin_tracking_names_legacy_nrm_}
    , decltype(_impl_.end_tracking_names_legacy_nrm_){from._impl_.end_tracking_names_legacy_nrm_}
    , decltype(_impl_.saved_locale_identifier_for_4_2_){}
    , decltype(_impl_.document_timezone_){}
    , decltype(_impl_.saved_locale_identifier_){}
    , decltype(_impl_.dependency_tracker_){nullptr}
    , decltype(_impl_.named_reference_manager_){nullptr}
    , decltype(_impl_.uuid_reference_map_){nullptr}
    , decltype(_impl_.table_uid_history_){nullptr}
    , decltype(_impl_.remote_data_store_){nullptr}
    , decltype(_impl_.group_node_map_){nullptr}
    , decltype(_impl_.header_name_manager_){nullptr}
    , decltype(_impl_.refs_to_dirty_){nullptr}
    , decltype(_impl_.document_random_seed_){}
    , decltype(_impl_.document_timestamp_){}
    , decltype(_impl_.base_date_1904_){}
    , decltype(_impl_.excel_import_date_mode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.saved_locale_identifier_for_4_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.saved_locale_identifier_for_4_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_saved_locale_identifier_for_4_2()) {
    _this->_impl_.saved_locale_identifier_for_4_2_.Set(from._internal_saved_locale_identifier_for_4_2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.document_timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_document_timezone()) {
    _this->_impl_.document_timezone_.Set(from._internal_document_timezone(), 
      _this->GetArenaForAllocation());
  }
  _impl_.saved_locale_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.saved_locale_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_saved_locale_identifier()) {
    _this->_impl_.saved_locale_identifier_.Set(from._internal_saved_locale_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_dependency_tracker()) {
    _this->_impl_.dependency_tracker_ = new ::TSCE::DependencyTrackerArchive(*from._impl_.dependency_tracker_);
  }
  if (from._internal_has_named_reference_manager()) {
    _this->_impl_.named_reference_manager_ = new ::TSP::Reference(*from._impl_.named_reference_manager_);
  }
  if (from._internal_has_uuid_reference_map()) {
    _this->_impl_.uuid_reference_map_ = new ::TSCE::UuidReferenceMapArchive(*from._impl_.uuid_reference_map_);
  }
  if (from._internal_has_table_uid_history()) {
    _this->_impl_.table_uid_history_ = new ::TSCE::RewriteTableUIDInfoArchive(*from._impl_.table_uid_history_);
  }
  if (from._internal_has_remote_data_store()) {
    _this->_impl_.remote_data_store_ = new ::TSP::Reference(*from._impl_.remote_data_store_);
  }
  if (from._internal_has_group_node_map()) {
    _this->_impl_.group_node_map_ = new ::TSCE::GroupByNodeMapArchive(*from._impl_.group_node_map_);
  }
  if (from._internal_has_header_name_manager()) {
    _this->_impl_.header_name_manager_ = new ::TSP::Reference(*from._impl_.header_name_manager_);
  }
  if (from._internal_has_refs_to_dirty()) {
    _this->_impl_.refs_to_dirty_ = new ::TSP::Reference(*from._impl_.refs_to_dirty_);
  }
  ::memcpy(&_impl_.document_random_seed_, &from._impl_.document_random_seed_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.excel_import_date_mode_) -
    reinterpret_cast<char*>(&_impl_.document_random_seed_)) + sizeof(_impl_.excel_import_date_mode_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CalculationEngineArchive)
}

inline void CalculationEngineArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_tracking_names_legacy_nrm_){arena}
    , decltype(_impl_.end_tracking_names_legacy_nrm_){arena}
    , decltype(_impl_.saved_locale_identifier_for_4_2_){}
    , decltype(_impl_.document_timezone_){}
    , decltype(_impl_.saved_locale_identifier_){}
    , decltype(_impl_.dependency_tracker_){nullptr}
    , decltype(_impl_.named_reference_manager_){nullptr}
    , decltype(_impl_.uuid_reference_map_){nullptr}
    , decltype(_impl_.table_uid_history_){nullptr}
    , decltype(_impl_.remote_data_store_){nullptr}
    , decltype(_impl_.group_node_map_){nullptr}
    , decltype(_impl_.header_name_manager_){nullptr}
    , decltype(_impl_.refs_to_dirty_){nullptr}
    , decltype(_impl_.document_random_seed_){uint64_t{0u}}
    , decltype(_impl_.document_timestamp_){0}
    , decltype(_impl_.base_date_1904_){false}
    , decltype(_impl_.excel_import_date_mode_){1}
  };
  _impl_.saved_locale_identifier_for_4_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.saved_locale_identifier_for_4_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.document_timezone_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.document_timezone_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.saved_locale_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.saved_locale_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CalculationEngineArchive::~CalculationEngineArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CalculationEngineArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CalculationEngineArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.begin_tracking_names_legacy_nrm_.~RepeatedPtrField();
  _impl_.end_tracking_names_legacy_nrm_.~RepeatedPtrField();
  _impl_.saved_locale_identifier_for_4_2_.Destroy();
  _impl_.document_timezone_.Destroy();
  _impl_.saved_locale_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.dependency_tracker_;
  if (this != internal_default_instance()) delete _impl_.named_reference_manager_;
  if (this != internal_default_instance()) delete _impl_.uuid_reference_map_;
  if (this != internal_default_instance()) delete _impl_.table_uid_history_;
  if (this != internal_default_instance()) delete _impl_.remote_data_store_;
  if (this != internal_default_instance()) delete _impl_.group_node_map_;
  if (this != internal_default_instance()) delete _impl_.header_name_manager_;
  if (this != internal_default_instance()) delete _impl_.refs_to_dirty_;
}

void CalculationEngineArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CalculationEngineArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CalculationEngineArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.begin_tracking_names_legacy_nrm_.Clear();
  _impl_.end_tracking_names_legacy_nrm_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.saved_locale_identifier_for_4_2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.document_timezone_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.saved_locale_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.dependency_tracker_ != nullptr);
      _impl_.dependency_tracker_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.named_reference_manager_ != nullptr);
      _impl_.named_reference_manager_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.uuid_reference_map_ != nullptr);
      _impl_.uuid_reference_map_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.table_uid_history_ != nullptr);
      _impl_.table_uid_history_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.remote_data_store_ != nullptr);
      _impl_.remote_data_store_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.group_node_map_ != nullptr);
      _impl_.group_node_map_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.header_name_manager_ != nullptr);
      _impl_.header_name_manager_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.refs_to_dirty_ != nullptr);
      _impl_.refs_to_dirty_->Clear();
    }
  }
  if (cached_has_bits & 0x00007800u) {
    ::memset(&_impl_.document_random_seed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.base_date_1904_) -
        reinterpret_cast<char*>(&_impl_.document_random_seed_)) + sizeof(_impl_.base_date_1904_));
    _impl_.excel_import_date_mode_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CalculationEngineArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool base_date_1904 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_base_date_1904(&has_bits);
          _impl_.base_date_1904_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dependency_tracker(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference named_reference_manager = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_reference_manager(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::CalculationEngineArchive_ExcelImportDateMode_IsValid(val))) {
            _internal_set_excel_import_date_mode(static_cast<::TSCE::CalculationEngineArchive_ExcelImportDateMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string saved_locale_identifier_for_4_2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_saved_locale_identifier_for_4_2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.CalculationEngineArchive.saved_locale_identifier_for_4_2");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint64 document_random_seed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_document_random_seed(&has_bits);
          _impl_.document_random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.UuidReferenceMapArchive uuid_reference_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid_reference_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double document_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_document_timestamp(&has_bits);
          _impl_.document_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional string document_timezone = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_document_timezone();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.CalculationEngineArchive.document_timezone");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid_history(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference remote_data_store = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_data_store(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.GroupByNodeMapArchive group_node_map = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference header_name_manager = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_name_manager(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference refs_to_dirty = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_refs_to_dirty(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string saved_locale_identifier = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_saved_locale_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.CalculationEngineArchive.saved_locale_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID begin_tracking_names_legacy_nrm = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_begin_tracking_names_legacy_nrm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID end_tracking_names_legacy_nrm = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_end_tracking_names_legacy_nrm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CalculationEngineArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CalculationEngineArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool base_date_1904 = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_base_date_1904(), target);
  }

  // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dependency_tracker(this),
        _Internal::dependency_tracker(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference named_reference_manager = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::named_reference_manager(this),
        _Internal::named_reference_manager(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_excel_import_date_mode(), target);
  }

  // optional string saved_locale_identifier_for_4_2 = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_saved_locale_identifier_for_4_2().data(), static_cast<int>(this->_internal_saved_locale_identifier_for_4_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.CalculationEngineArchive.saved_locale_identifier_for_4_2");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_saved_locale_identifier_for_4_2(), target);
  }

  // optional uint64 document_random_seed = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_document_random_seed(), target);
  }

  // optional .TSCE.UuidReferenceMapArchive uuid_reference_map = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::uuid_reference_map(this),
        _Internal::uuid_reference_map(this).GetCachedSize(), target, stream);
  }

  // optional double document_timestamp = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_document_timestamp(), target);
  }

  // optional string document_timezone = 10;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_document_timezone().data(), static_cast<int>(this->_internal_document_timezone().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.CalculationEngineArchive.document_timezone");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_document_timezone(), target);
  }

  // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::table_uid_history(this),
        _Internal::table_uid_history(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference remote_data_store = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::remote_data_store(this),
        _Internal::remote_data_store(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.GroupByNodeMapArchive group_node_map = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::group_node_map(this),
        _Internal::group_node_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference header_name_manager = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::header_name_manager(this),
        _Internal::header_name_manager(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference refs_to_dirty = 15;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::refs_to_dirty(this),
        _Internal::refs_to_dirty(this).GetCachedSize(), target, stream);
  }

  // optional string saved_locale_identifier = 16;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_saved_locale_identifier().data(), static_cast<int>(this->_internal_saved_locale_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.CalculationEngineArchive.saved_locale_identifier");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_saved_locale_identifier(), target);
  }

  // repeated .TSP.UUID begin_tracking_names_legacy_nrm = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_begin_tracking_names_legacy_nrm_size()); i < n; i++) {
    const auto& repfield = this->_internal_begin_tracking_names_legacy_nrm(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID end_tracking_names_legacy_nrm = 18;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_end_tracking_names_legacy_nrm_size()); i < n; i++) {
    const auto& repfield = this->_internal_end_tracking_names_legacy_nrm(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(18, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CalculationEngineArchive)
  return target;
}

size_t CalculationEngineArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CalculationEngineArchive)
  size_t total_size = 0;

  // required .TSCE.DependencyTrackerArchive dependency_tracker = 2;
  if (_internal_has_dependency_tracker()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dependency_tracker_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID begin_tracking_names_legacy_nrm = 17;
  total_size += 2UL * this->_internal_begin_tracking_names_legacy_nrm_size();
  for (const auto& msg : this->_impl_.begin_tracking_names_legacy_nrm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID end_tracking_names_legacy_nrm = 18;
  total_size += 2UL * this->_internal_end_tracking_names_legacy_nrm_size();
  for (const auto& msg : this->_impl_.end_tracking_names_legacy_nrm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string saved_locale_identifier_for_4_2 = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_saved_locale_identifier_for_4_2());
    }

    // optional string document_timezone = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_document_timezone());
    }

    // optional string saved_locale_identifier = 16;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_saved_locale_identifier());
    }

  }
  if (cached_has_bits & 0x000000f0u) {
    // optional .TSP.Reference named_reference_manager = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.named_reference_manager_);
    }

    // optional .TSCE.UuidReferenceMapArchive uuid_reference_map = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.uuid_reference_map_);
    }

    // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_uid_history_);
    }

    // optional .TSP.Reference remote_data_store = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.remote_data_store_);
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional .TSCE.GroupByNodeMapArchive group_node_map = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.group_node_map_);
    }

    // optional .TSP.Reference header_name_manager = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_name_manager_);
    }

    // optional .TSP.Reference refs_to_dirty = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.refs_to_dirty_);
    }

    // optional uint64 document_random_seed = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_document_random_seed());
    }

    // optional double document_timestamp = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional bool base_date_1904 = 1;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional .TSCE.CalculationEngineArchive.ExcelImportDateMode excel_import_date_mode = 4 [default = DATE_MODE_1900];
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_excel_import_date_mode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CalculationEngineArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CalculationEngineArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CalculationEngineArchive::GetClassData() const { return &_class_data_; }


void CalculationEngineArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CalculationEngineArchive*>(&to_msg);
  auto& from = static_cast<const CalculationEngineArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CalculationEngineArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.begin_tracking_names_legacy_nrm_.MergeFrom(from._impl_.begin_tracking_names_legacy_nrm_);
  _this->_impl_.end_tracking_names_legacy_nrm_.MergeFrom(from._impl_.end_tracking_names_legacy_nrm_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_saved_locale_identifier_for_4_2(from._internal_saved_locale_identifier_for_4_2());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_document_timezone(from._internal_document_timezone());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_saved_locale_identifier(from._internal_saved_locale_identifier());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_dependency_tracker()->::TSCE::DependencyTrackerArchive::MergeFrom(
          from._internal_dependency_tracker());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_named_reference_manager()->::TSP::Reference::MergeFrom(
          from._internal_named_reference_manager());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_uuid_reference_map()->::TSCE::UuidReferenceMapArchive::MergeFrom(
          from._internal_uuid_reference_map());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_table_uid_history()->::TSCE::RewriteTableUIDInfoArchive::MergeFrom(
          from._internal_table_uid_history());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_remote_data_store()->::TSP::Reference::MergeFrom(
          from._internal_remote_data_store());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_group_node_map()->::TSCE::GroupByNodeMapArchive::MergeFrom(
          from._internal_group_node_map());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_header_name_manager()->::TSP::Reference::MergeFrom(
          from._internal_header_name_manager());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_refs_to_dirty()->::TSP::Reference::MergeFrom(
          from._internal_refs_to_dirty());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.document_random_seed_ = from._impl_.document_random_seed_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.document_timestamp_ = from._impl_.document_timestamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.base_date_1904_ = from._impl_.base_date_1904_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.excel_import_date_mode_ = from._impl_.excel_import_date_mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CalculationEngineArchive::CopyFrom(const CalculationEngineArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CalculationEngineArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CalculationEngineArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.begin_tracking_names_legacy_nrm_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.end_tracking_names_legacy_nrm_))
    return false;
  if (_internal_has_dependency_tracker()) {
    if (!_impl_.dependency_tracker_->IsInitialized()) return false;
  }
  if (_internal_has_named_reference_manager()) {
    if (!_impl_.named_reference_manager_->IsInitialized()) return false;
  }
  if (_internal_has_uuid_reference_map()) {
    if (!_impl_.uuid_reference_map_->IsInitialized()) return false;
  }
  if (_internal_has_table_uid_history()) {
    if (!_impl_.table_uid_history_->IsInitialized()) return false;
  }
  if (_internal_has_remote_data_store()) {
    if (!_impl_.remote_data_store_->IsInitialized()) return false;
  }
  if (_internal_has_group_node_map()) {
    if (!_impl_.group_node_map_->IsInitialized()) return false;
  }
  if (_internal_has_header_name_manager()) {
    if (!_impl_.header_name_manager_->IsInitialized()) return false;
  }
  if (_internal_has_refs_to_dirty()) {
    if (!_impl_.refs_to_dirty_->IsInitialized()) return false;
  }
  return true;
}

void CalculationEngineArchive::InternalSwap(CalculationEngineArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.begin_tracking_names_legacy_nrm_.InternalSwap(&other->_impl_.begin_tracking_names_legacy_nrm_);
  _impl_.end_tracking_names_legacy_nrm_.InternalSwap(&other->_impl_.end_tracking_names_legacy_nrm_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.saved_locale_identifier_for_4_2_, lhs_arena,
      &other->_impl_.saved_locale_identifier_for_4_2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.document_timezone_, lhs_arena,
      &other->_impl_.document_timezone_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.saved_locale_identifier_, lhs_arena,
      &other->_impl_.saved_locale_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CalculationEngineArchive, _impl_.base_date_1904_)
      + sizeof(CalculationEngineArchive::_impl_.base_date_1904_)
      - PROTOBUF_FIELD_OFFSET(CalculationEngineArchive, _impl_.dependency_tracker_)>(
          reinterpret_cast<char*>(&_impl_.dependency_tracker_),
          reinterpret_cast<char*>(&other->_impl_.dependency_tracker_));
  swap(_impl_.excel_import_date_mode_, other->_impl_.excel_import_date_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CalculationEngineArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[82]);
}

// ===================================================================

class PreserveColumnRowFlagsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<PreserveColumnRowFlagsArchive>()._impl_._has_bits_);
  static void set_has_begin_row_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_begin_column_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_row_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_column_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PreserveColumnRowFlagsArchive::PreserveColumnRowFlagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.PreserveColumnRowFlagsArchive)
}
PreserveColumnRowFlagsArchive::PreserveColumnRowFlagsArchive(const PreserveColumnRowFlagsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PreserveColumnRowFlagsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_row_is_absolute_){}
    , decltype(_impl_.begin_column_is_absolute_){}
    , decltype(_impl_.end_row_is_absolute_){}
    , decltype(_impl_.end_column_is_absolute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.begin_row_is_absolute_, &from._impl_.begin_row_is_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_column_is_absolute_) -
    reinterpret_cast<char*>(&_impl_.begin_row_is_absolute_)) + sizeof(_impl_.end_column_is_absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.PreserveColumnRowFlagsArchive)
}

inline void PreserveColumnRowFlagsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_row_is_absolute_){false}
    , decltype(_impl_.begin_column_is_absolute_){false}
    , decltype(_impl_.end_row_is_absolute_){false}
    , decltype(_impl_.end_column_is_absolute_){false}
  };
}

PreserveColumnRowFlagsArchive::~PreserveColumnRowFlagsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.PreserveColumnRowFlagsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PreserveColumnRowFlagsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PreserveColumnRowFlagsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PreserveColumnRowFlagsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.PreserveColumnRowFlagsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.begin_row_is_absolute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_column_is_absolute_) -
      reinterpret_cast<char*>(&_impl_.begin_row_is_absolute_)) + sizeof(_impl_.end_column_is_absolute_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PreserveColumnRowFlagsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool begin_row_is_absolute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_begin_row_is_absolute(&has_bits);
          _impl_.begin_row_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool begin_column_is_absolute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_begin_column_is_absolute(&has_bits);
          _impl_.begin_column_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool end_row_is_absolute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_end_row_is_absolute(&has_bits);
          _impl_.end_row_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool end_column_is_absolute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_end_column_is_absolute(&has_bits);
          _impl_.end_column_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PreserveColumnRowFlagsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.PreserveColumnRowFlagsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool begin_row_is_absolute = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_begin_row_is_absolute(), target);
  }

  // required bool begin_column_is_absolute = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_begin_column_is_absolute(), target);
  }

  // optional bool end_row_is_absolute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_end_row_is_absolute(), target);
  }

  // optional bool end_column_is_absolute = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_end_column_is_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.PreserveColumnRowFlagsArchive)
  return target;
}

size_t PreserveColumnRowFlagsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.PreserveColumnRowFlagsArchive)
  size_t total_size = 0;

  if (_internal_has_begin_row_is_absolute()) {
    // required bool begin_row_is_absolute = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_begin_column_is_absolute()) {
    // required bool begin_column_is_absolute = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t PreserveColumnRowFlagsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.PreserveColumnRowFlagsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool begin_row_is_absolute = 1;
    total_size += 1 + 1;

    // required bool begin_column_is_absolute = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional bool end_row_is_absolute = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool end_column_is_absolute = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PreserveColumnRowFlagsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PreserveColumnRowFlagsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PreserveColumnRowFlagsArchive::GetClassData() const { return &_class_data_; }


void PreserveColumnRowFlagsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PreserveColumnRowFlagsArchive*>(&to_msg);
  auto& from = static_cast<const PreserveColumnRowFlagsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.PreserveColumnRowFlagsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.begin_row_is_absolute_ = from._impl_.begin_row_is_absolute_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.begin_column_is_absolute_ = from._impl_.begin_column_is_absolute_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_row_is_absolute_ = from._impl_.end_row_is_absolute_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.end_column_is_absolute_ = from._impl_.end_column_is_absolute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PreserveColumnRowFlagsArchive::CopyFrom(const PreserveColumnRowFlagsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.PreserveColumnRowFlagsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreserveColumnRowFlagsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void PreserveColumnRowFlagsArchive::InternalSwap(PreserveColumnRowFlagsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PreserveColumnRowFlagsArchive, _impl_.end_column_is_absolute_)
      + sizeof(PreserveColumnRowFlagsArchive::_impl_.end_column_is_absolute_)
      - PROTOBUF_FIELD_OFFSET(PreserveColumnRowFlagsArchive, _impl_.begin_row_is_absolute_)>(
          reinterpret_cast<char*>(&_impl_.begin_row_is_absolute_),
          reinterpret_cast<char*>(&other->_impl_.begin_row_is_absolute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PreserveColumnRowFlagsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[83]);
}

// ===================================================================

class CategoryReferenceArchive_CatRefUidList::_Internal {
 public:
};

void CategoryReferenceArchive_CatRefUidList::clear_uid() {
  _impl_.uid_.Clear();
}
CategoryReferenceArchive_CatRefUidList::CategoryReferenceArchive_CatRefUidList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CategoryReferenceArchive.CatRefUidList)
}
CategoryReferenceArchive_CatRefUidList::CategoryReferenceArchive_CatRefUidList(const CategoryReferenceArchive_CatRefUidList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryReferenceArchive_CatRefUidList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){from._impl_.uid_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CategoryReferenceArchive.CatRefUidList)
}

inline void CategoryReferenceArchive_CatRefUidList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CategoryReferenceArchive_CatRefUidList::~CategoryReferenceArchive_CatRefUidList() {
  // @@protoc_insertion_point(destructor:TSCE.CategoryReferenceArchive.CatRefUidList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryReferenceArchive_CatRefUidList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.~RepeatedPtrField();
}

void CategoryReferenceArchive_CatRefUidList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryReferenceArchive_CatRefUidList::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryReferenceArchive_CatRefUidList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryReferenceArchive_CatRefUidList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uid = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uid_size()); i < n; i++) {
    const auto& repfield = this->_internal_uid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CategoryReferenceArchive.CatRefUidList)
  return target;
}

size_t CategoryReferenceArchive_CatRefUidList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uid = 1;
  total_size += 1UL * this->_internal_uid_size();
  for (const auto& msg : this->_impl_.uid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryReferenceArchive_CatRefUidList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryReferenceArchive_CatRefUidList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryReferenceArchive_CatRefUidList::GetClassData() const { return &_class_data_; }


void CategoryReferenceArchive_CatRefUidList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryReferenceArchive_CatRefUidList*>(&to_msg);
  auto& from = static_cast<const CategoryReferenceArchive_CatRefUidList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uid_.MergeFrom(from._impl_.uid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryReferenceArchive_CatRefUidList::CopyFrom(const CategoryReferenceArchive_CatRefUidList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CategoryReferenceArchive.CatRefUidList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryReferenceArchive_CatRefUidList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uid_))
    return false;
  return true;
}

void CategoryReferenceArchive_CatRefUidList::InternalSwap(CategoryReferenceArchive_CatRefUidList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uid_.InternalSwap(&other->_impl_.uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryReferenceArchive_CatRefUidList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[84]);
}

// ===================================================================

class CategoryReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CategoryReferenceArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& group_by_uid(const CategoryReferenceArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& column_uid(const CategoryReferenceArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_aggregate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_group_level(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::CategoryReferenceArchive_CatRefUidList& group_uids(const CategoryReferenceArchive* msg);
  static void set_has_group_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::PreserveColumnRowFlagsArchive& preserve_flags(const CategoryReferenceArchive* msg);
  static void set_has_preserve_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_relative_column(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& relative_group_uid(const CategoryReferenceArchive* msg);
  static void set_has_relative_group_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::UUID& absolute_group_uid(const CategoryReferenceArchive* msg);
  static void set_has_absolute_group_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_option_refers_to_pivot_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_option_refers_to_pivot_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_agg_index_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_option_show_aggregate_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000c3) ^ 0x000000c3) != 0;
  }
};

const ::TSP::UUID&
CategoryReferenceArchive::_Internal::group_by_uid(const CategoryReferenceArchive* msg) {
  return *msg->_impl_.group_by_uid_;
}
const ::TSP::UUID&
CategoryReferenceArchive::_Internal::column_uid(const CategoryReferenceArchive* msg) {
  return *msg->_impl_.column_uid_;
}
const ::TSCE::CategoryReferenceArchive_CatRefUidList&
CategoryReferenceArchive::_Internal::group_uids(const CategoryReferenceArchive* msg) {
  return *msg->_impl_.group_uids_;
}
const ::TSCE::PreserveColumnRowFlagsArchive&
CategoryReferenceArchive::_Internal::preserve_flags(const CategoryReferenceArchive* msg) {
  return *msg->_impl_.preserve_flags_;
}
const ::TSP::UUID&
CategoryReferenceArchive::_Internal::relative_group_uid(const CategoryReferenceArchive* msg) {
  return *msg->_impl_.relative_group_uid_;
}
const ::TSP::UUID&
CategoryReferenceArchive::_Internal::absolute_group_uid(const CategoryReferenceArchive* msg) {
  return *msg->_impl_.absolute_group_uid_;
}
void CategoryReferenceArchive::clear_group_by_uid() {
  if (_impl_.group_by_uid_ != nullptr) _impl_.group_by_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CategoryReferenceArchive::clear_column_uid() {
  if (_impl_.column_uid_ != nullptr) _impl_.column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CategoryReferenceArchive::clear_relative_group_uid() {
  if (_impl_.relative_group_uid_ != nullptr) _impl_.relative_group_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CategoryReferenceArchive::clear_absolute_group_uid() {
  if (_impl_.absolute_group_uid_ != nullptr) _impl_.absolute_group_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CategoryReferenceArchive::CategoryReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CategoryReferenceArchive)
}
CategoryReferenceArchive::CategoryReferenceArchive(const CategoryReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CategoryReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.group_uids_){nullptr}
    , decltype(_impl_.preserve_flags_){nullptr}
    , decltype(_impl_.relative_group_uid_){nullptr}
    , decltype(_impl_.absolute_group_uid_){nullptr}
    , decltype(_impl_.aggregate_type_){}
    , decltype(_impl_.group_level_){}
    , decltype(_impl_.relative_column_){}
    , decltype(_impl_.option_refers_to_pivot_rows_){}
    , decltype(_impl_.option_refers_to_pivot_columns_){}
    , decltype(_impl_.option_show_aggregate_name_){}
    , decltype(_impl_.agg_index_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_by_uid()) {
    _this->_impl_.group_by_uid_ = new ::TSP::UUID(*from._impl_.group_by_uid_);
  }
  if (from._internal_has_column_uid()) {
    _this->_impl_.column_uid_ = new ::TSP::UUID(*from._impl_.column_uid_);
  }
  if (from._internal_has_group_uids()) {
    _this->_impl_.group_uids_ = new ::TSCE::CategoryReferenceArchive_CatRefUidList(*from._impl_.group_uids_);
  }
  if (from._internal_has_preserve_flags()) {
    _this->_impl_.preserve_flags_ = new ::TSCE::PreserveColumnRowFlagsArchive(*from._impl_.preserve_flags_);
  }
  if (from._internal_has_relative_group_uid()) {
    _this->_impl_.relative_group_uid_ = new ::TSP::UUID(*from._impl_.relative_group_uid_);
  }
  if (from._internal_has_absolute_group_uid()) {
    _this->_impl_.absolute_group_uid_ = new ::TSP::UUID(*from._impl_.absolute_group_uid_);
  }
  ::memcpy(&_impl_.aggregate_type_, &from._impl_.aggregate_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.agg_index_level_) -
    reinterpret_cast<char*>(&_impl_.aggregate_type_)) + sizeof(_impl_.agg_index_level_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CategoryReferenceArchive)
}

inline void CategoryReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.group_uids_){nullptr}
    , decltype(_impl_.preserve_flags_){nullptr}
    , decltype(_impl_.relative_group_uid_){nullptr}
    , decltype(_impl_.absolute_group_uid_){nullptr}
    , decltype(_impl_.aggregate_type_){0u}
    , decltype(_impl_.group_level_){0}
    , decltype(_impl_.relative_column_){0}
    , decltype(_impl_.option_refers_to_pivot_rows_){false}
    , decltype(_impl_.option_refers_to_pivot_columns_){false}
    , decltype(_impl_.option_show_aggregate_name_){false}
    , decltype(_impl_.agg_index_level_){0u}
  };
}

CategoryReferenceArchive::~CategoryReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CategoryReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CategoryReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.group_by_uid_;
  if (this != internal_default_instance()) delete _impl_.column_uid_;
  if (this != internal_default_instance()) delete _impl_.group_uids_;
  if (this != internal_default_instance()) delete _impl_.preserve_flags_;
  if (this != internal_default_instance()) delete _impl_.relative_group_uid_;
  if (this != internal_default_instance()) delete _impl_.absolute_group_uid_;
}

void CategoryReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CategoryReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CategoryReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.group_by_uid_ != nullptr);
      _impl_.group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.column_uid_ != nullptr);
      _impl_.column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.group_uids_ != nullptr);
      _impl_.group_uids_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.preserve_flags_ != nullptr);
      _impl_.preserve_flags_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.relative_group_uid_ != nullptr);
      _impl_.relative_group_uid_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.absolute_group_uid_ != nullptr);
      _impl_.absolute_group_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&_impl_.aggregate_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.group_level_) -
        reinterpret_cast<char*>(&_impl_.aggregate_type_)) + sizeof(_impl_.group_level_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.relative_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.agg_index_level_) -
        reinterpret_cast<char*>(&_impl_.relative_column_)) + sizeof(_impl_.agg_index_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CategoryReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID group_by_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID column_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 aggregate_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_aggregate_type(&has_bits);
          _impl_.aggregate_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required sint32 group_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_group_level(&has_bits);
          _impl_.group_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CategoryReferenceArchive.CatRefUidList group_uids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.PreserveColumnRowFlagsArchive preserve_flags = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_preserve_flags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 relative_column = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_relative_column(&has_bits);
          _impl_.relative_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID relative_group_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_relative_group_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID absolute_group_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute_group_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool option_refers_to_pivot_rows = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_option_refers_to_pivot_rows(&has_bits);
          _impl_.option_refers_to_pivot_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool option_refers_to_pivot_columns = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_option_refers_to_pivot_columns(&has_bits);
          _impl_.option_refers_to_pivot_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 agg_index_level = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_agg_index_level(&has_bits);
          _impl_.agg_index_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool option_show_aggregate_name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_option_show_aggregate_name(&has_bits);
          _impl_.option_show_aggregate_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CategoryReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CategoryReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID group_by_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group_by_uid(this),
        _Internal::group_by_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID column_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::column_uid(this),
        _Internal::column_uid(this).GetCachedSize(), target, stream);
  }

  // required uint32 aggregate_type = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_aggregate_type(), target);
  }

  // required sint32 group_level = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(4, this->_internal_group_level(), target);
  }

  // optional .TSCE.CategoryReferenceArchive.CatRefUidList group_uids = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::group_uids(this),
        _Internal::group_uids(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.PreserveColumnRowFlagsArchive preserve_flags = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::preserve_flags(this),
        _Internal::preserve_flags(this).GetCachedSize(), target, stream);
  }

  // optional int32 relative_column = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_relative_column(), target);
  }

  // optional .TSP.UUID relative_group_uid = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::relative_group_uid(this),
        _Internal::relative_group_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID absolute_group_uid = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::absolute_group_uid(this),
        _Internal::absolute_group_uid(this).GetCachedSize(), target, stream);
  }

  // optional bool option_refers_to_pivot_rows = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_option_refers_to_pivot_rows(), target);
  }

  // optional bool option_refers_to_pivot_columns = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_option_refers_to_pivot_columns(), target);
  }

  // optional uint32 agg_index_level = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_agg_index_level(), target);
  }

  // optional bool option_show_aggregate_name = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_option_show_aggregate_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CategoryReferenceArchive)
  return target;
}

size_t CategoryReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.CategoryReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_group_by_uid()) {
    // required .TSP.UUID group_by_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);
  }

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);
  }

  if (_internal_has_aggregate_type()) {
    // required uint32 aggregate_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aggregate_type());
  }

  if (_internal_has_group_level()) {
    // required sint32 group_level = 4;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_group_level());
  }

  return total_size;
}
size_t CategoryReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CategoryReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000000c3) ^ 0x000000c3) == 0) {  // All required fields are present.
    // required .TSP.UUID group_by_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);

    // required .TSP.UUID column_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);

    // required uint32 aggregate_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aggregate_type());

    // required sint32 group_level = 4;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_group_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSCE.CategoryReferenceArchive.CatRefUidList group_uids = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.group_uids_);
    }

    // optional .TSCE.PreserveColumnRowFlagsArchive preserve_flags = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.preserve_flags_);
    }

    // optional .TSP.UUID relative_group_uid = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.relative_group_uid_);
    }

    // optional .TSP.UUID absolute_group_uid = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.absolute_group_uid_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 relative_column = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_relative_column());
    }

    // optional bool option_refers_to_pivot_rows = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool option_refers_to_pivot_columns = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool option_show_aggregate_name = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional uint32 agg_index_level = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_agg_index_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CategoryReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CategoryReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CategoryReferenceArchive::GetClassData() const { return &_class_data_; }


void CategoryReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CategoryReferenceArchive*>(&to_msg);
  auto& from = static_cast<const CategoryReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CategoryReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(
          from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_group_uids()->::TSCE::CategoryReferenceArchive_CatRefUidList::MergeFrom(
          from._internal_group_uids());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_preserve_flags()->::TSCE::PreserveColumnRowFlagsArchive::MergeFrom(
          from._internal_preserve_flags());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_relative_group_uid()->::TSP::UUID::MergeFrom(
          from._internal_relative_group_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_absolute_group_uid()->::TSP::UUID::MergeFrom(
          from._internal_absolute_group_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.aggregate_type_ = from._impl_.aggregate_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.group_level_ = from._impl_.group_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.relative_column_ = from._impl_.relative_column_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.option_refers_to_pivot_rows_ = from._impl_.option_refers_to_pivot_rows_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.option_refers_to_pivot_columns_ = from._impl_.option_refers_to_pivot_columns_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.option_show_aggregate_name_ = from._impl_.option_show_aggregate_name_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.agg_index_level_ = from._impl_.agg_index_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CategoryReferenceArchive::CopyFrom(const CategoryReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CategoryReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CategoryReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_group_by_uid()) {
    if (!_impl_.group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_column_uid()) {
    if (!_impl_.column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_uids()) {
    if (!_impl_.group_uids_->IsInitialized()) return false;
  }
  if (_internal_has_preserve_flags()) {
    if (!_impl_.preserve_flags_->IsInitialized()) return false;
  }
  if (_internal_has_relative_group_uid()) {
    if (!_impl_.relative_group_uid_->IsInitialized()) return false;
  }
  if (_internal_has_absolute_group_uid()) {
    if (!_impl_.absolute_group_uid_->IsInitialized()) return false;
  }
  return true;
}

void CategoryReferenceArchive::InternalSwap(CategoryReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CategoryReferenceArchive, _impl_.agg_index_level_)
      + sizeof(CategoryReferenceArchive::_impl_.agg_index_level_)
      - PROTOBUF_FIELD_OFFSET(CategoryReferenceArchive, _impl_.group_by_uid_)>(
          reinterpret_cast<char*>(&_impl_.group_by_uid_),
          reinterpret_cast<char*>(&other->_impl_.group_by_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CategoryReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[85]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive>()._impl_._has_bits_);
  static void set_has_row_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_column_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
}
ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_handle_){}
    , decltype(_impl_.column_handle_){}
    , decltype(_impl_.row_is_sticky_){}
    , decltype(_impl_.column_is_sticky_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.row_handle_, &from._impl_.row_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.column_is_sticky_) -
    reinterpret_cast<char*>(&_impl_.row_handle_)) + sizeof(_impl_.column_is_sticky_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
}

inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_handle_){0u}
    , decltype(_impl_.column_handle_){0u}
    , decltype(_impl_.row_is_sticky_){0u}
    , decltype(_impl_.column_is_sticky_){0u}
  };
}

ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::~ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.row_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.column_is_sticky_) -
        reinterpret_cast<char*>(&_impl_.row_handle_)) + sizeof(_impl_.column_is_sticky_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 row_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_row_handle(&has_bits);
          _impl_.row_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 column_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_column_handle(&has_bits);
          _impl_.column_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row_is_sticky = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_row_is_sticky(&has_bits);
          _impl_.row_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 column_is_sticky = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_column_is_sticky(&has_bits);
          _impl_.column_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 row_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_handle(), target);
  }

  // required uint32 column_handle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column_handle(), target);
  }

  // required uint32 row_is_sticky = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_is_sticky(), target);
  }

  // required uint32 column_is_sticky = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_column_is_sticky(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  size_t total_size = 0;

  if (_internal_has_row_handle()) {
    // required uint32 row_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_handle());
  }

  if (_internal_has_column_handle()) {
    // required uint32 column_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_handle());
  }

  if (_internal_has_row_is_sticky()) {
    // required uint32 row_is_sticky = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_is_sticky());
  }

  if (_internal_has_column_is_sticky()) {
    // required uint32 column_is_sticky = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_is_sticky());
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 row_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_handle());

    // required uint32 column_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_handle());

    // required uint32 row_is_sticky = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_is_sticky());

    // required uint32 column_is_sticky = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_is_sticky());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.row_handle_ = from._impl_.row_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_handle_ = from._impl_.column_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_is_sticky_ = from._impl_.row_is_sticky_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.column_is_sticky_ = from._impl_.column_is_sticky_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::InternalSwap(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.column_is_sticky_)
      + sizeof(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::_impl_.column_is_sticky_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive, _impl_.row_handle_)>(
          reinterpret_cast<char*>(&_impl_.row_handle_),
          reinterpret_cast<char*>(&other->_impl_.row_handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[86]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive>()._impl_._has_bits_);
  static void set_has_row_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_column_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_row_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_column_is_sticky(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::CFUUIDArchive& table_id(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ast_reference_whitespace_after_sheet_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_reference_whitespace_before_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_reference_whitespace_after_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ast_reference_whitespace_before_cell_address(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001f0) ^ 0x000001f0) != 0;
  }
};

const ::TSP::CFUUIDArchive&
ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_Internal::table_id(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* msg) {
  return *msg->_impl_.table_id_;
}
void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
}
ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_reference_whitespace_after_sheet_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_after_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_cell_address_){}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.row_handle_){}
    , decltype(_impl_.column_handle_){}
    , decltype(_impl_.row_is_sticky_){}
    , decltype(_impl_.column_is_sticky_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ast_reference_whitespace_after_sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_after_sheet_name()) {
    _this->_impl_.ast_reference_whitespace_after_sheet_name_.Set(from._internal_ast_reference_whitespace_after_sheet_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_before_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_before_table_name()) {
    _this->_impl_.ast_reference_whitespace_before_table_name_.Set(from._internal_ast_reference_whitespace_before_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_after_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_after_table_name()) {
    _this->_impl_.ast_reference_whitespace_after_table_name_.Set(from._internal_ast_reference_whitespace_after_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_before_cell_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_before_cell_address()) {
    _this->_impl_.ast_reference_whitespace_before_cell_address_.Set(from._internal_ast_reference_whitespace_before_cell_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSP::CFUUIDArchive(*from._impl_.table_id_);
  }
  ::memcpy(&_impl_.row_handle_, &from._impl_.row_handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.column_is_sticky_) -
    reinterpret_cast<char*>(&_impl_.row_handle_)) + sizeof(_impl_.column_is_sticky_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
}

inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_reference_whitespace_after_sheet_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_after_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_cell_address_){}
    , decltype(_impl_.table_id_){nullptr}
    , decltype(_impl_.row_handle_){0u}
    , decltype(_impl_.column_handle_){0u}
    , decltype(_impl_.row_is_sticky_){0u}
    , decltype(_impl_.column_is_sticky_){0u}
  };
  _impl_.ast_reference_whitespace_after_sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_before_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_after_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_before_cell_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::~ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ast_reference_whitespace_after_sheet_name_.Destroy();
  _impl_.ast_reference_whitespace_before_table_name_.Destroy();
  _impl_.ast_reference_whitespace_after_table_name_.Destroy();
  _impl_.ast_reference_whitespace_before_cell_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ast_reference_whitespace_after_sheet_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ast_reference_whitespace_before_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ast_reference_whitespace_after_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ast_reference_whitespace_before_cell_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.row_handle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.row_is_sticky_) -
        reinterpret_cast<char*>(&_impl_.row_handle_)) + sizeof(_impl_.row_is_sticky_));
  }
  _impl_.column_is_sticky_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 row_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_row_handle(&has_bits);
          _impl_.row_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 column_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_column_handle(&has_bits);
          _impl_.column_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row_is_sticky = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_row_is_sticky(&has_bits);
          _impl_.row_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 column_is_sticky = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_column_is_sticky(&has_bits);
          _impl_.column_is_sticky_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.CFUUIDArchive table_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_sheet_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_sheet_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_table_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_table_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_cell_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_cell_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 row_handle = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_row_handle(), target);
  }

  // required uint32 column_handle = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column_handle(), target);
  }

  // required uint32 row_is_sticky = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row_is_sticky(), target);
  }

  // required uint32 column_is_sticky = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_column_is_sticky(), target);
  }

  // required .TSP.CFUUIDArchive table_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // optional string AST_reference_whitespace_after_sheet_name = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_sheet_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_sheet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_sheet_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ast_reference_whitespace_after_sheet_name(), target);
  }

  // optional string AST_reference_whitespace_before_table_name = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_table_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ast_reference_whitespace_before_table_name(), target);
  }

  // optional string AST_reference_whitespace_after_table_name = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_after_table_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ast_reference_whitespace_after_table_name(), target);
  }

  // optional string AST_reference_whitespace_before_cell_address = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_cell_address().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_cell_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive.AST_reference_whitespace_before_cell_address");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ast_reference_whitespace_before_cell_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  size_t total_size = 0;

  if (_internal_has_table_id()) {
    // required .TSP.CFUUIDArchive table_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }

  if (_internal_has_row_handle()) {
    // required uint32 row_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_handle());
  }

  if (_internal_has_column_handle()) {
    // required uint32 column_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_handle());
  }

  if (_internal_has_row_is_sticky()) {
    // required uint32 row_is_sticky = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_is_sticky());
  }

  if (_internal_has_column_is_sticky()) {
    // required uint32 column_is_sticky = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_is_sticky());
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000001f0) ^ 0x000001f0) == 0) {  // All required fields are present.
    // required .TSP.CFUUIDArchive table_id = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);

    // required uint32 row_handle = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_handle());

    // required uint32 column_handle = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_handle());

    // required uint32 row_is_sticky = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row_is_sticky());

    // required uint32 column_is_sticky = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column_is_sticky());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string AST_reference_whitespace_after_sheet_name = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_sheet_name());
    }

    // optional string AST_reference_whitespace_before_table_name = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_table_name());
    }

    // optional string AST_reference_whitespace_after_table_name = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_table_name());
    }

    // optional string AST_reference_whitespace_before_cell_address = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_cell_address());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ast_reference_whitespace_after_sheet_name(from._internal_ast_reference_whitespace_after_sheet_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ast_reference_whitespace_before_table_name(from._internal_ast_reference_whitespace_before_table_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ast_reference_whitespace_after_table_name(from._internal_ast_reference_whitespace_after_table_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ast_reference_whitespace_before_cell_address(from._internal_ast_reference_whitespace_before_cell_address());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.row_handle_ = from._impl_.row_handle_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.column_handle_ = from._impl_.column_handle_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.row_is_sticky_ = from._impl_.row_is_sticky_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_column_is_sticky(from._internal_column_is_sticky());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::InternalSwap(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_after_sheet_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_after_sheet_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_before_table_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_before_table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_after_table_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_after_table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_before_cell_address_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_before_cell_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.column_is_sticky_)
      + sizeof(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::_impl_.column_is_sticky_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive, _impl_.table_id_)>(
          reinterpret_cast<char*>(&_impl_.table_id_),
          reinterpret_cast<char*>(&other->_impl_.table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[87]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTColumnCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTColumnCoordinateArchive>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ASTNodeArrayArchive_ASTColumnCoordinateArchive::ASTNodeArrayArchive_ASTColumnCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
}
ASTNodeArrayArchive_ASTColumnCoordinateArchive::ASTNodeArrayArchive_ASTColumnCoordinateArchive(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTColumnCoordinateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){}
    , decltype(_impl_.absolute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.absolute_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
}

inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_){0}
    , decltype(_impl_.absolute_){false}
  };
}

ASTNodeArrayArchive_ASTColumnCoordinateArchive::~ASTNodeArrayArchive_ASTColumnCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.absolute_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.absolute_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTColumnCoordinateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool absolute = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_absolute(&has_bits);
          _impl_.absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTColumnCoordinateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required sint32 column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_column(), target);
  }

  // optional bool absolute = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTColumnCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  size_t total_size = 0;

  // required sint32 column = 1;
  if (_internal_has_column()) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_column());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool absolute = 2 [default = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTColumnCoordinateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTColumnCoordinateArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTColumnCoordinateArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTColumnCoordinateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.absolute_ = from._impl_.absolute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::CopyFrom(const ASTNodeArrayArchive_ASTColumnCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTColumnCoordinateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTColumnCoordinateArchive::InternalSwap(ASTNodeArrayArchive_ASTColumnCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColumnCoordinateArchive, _impl_.absolute_)
      + sizeof(ASTNodeArrayArchive_ASTColumnCoordinateArchive::_impl_.absolute_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColumnCoordinateArchive, _impl_.column_)>(
          reinterpret_cast<char*>(&_impl_.column_),
          reinterpret_cast<char*>(&other->_impl_.column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTColumnCoordinateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[88]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTRowCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTRowCoordinateArchive>()._impl_._has_bits_);
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ASTNodeArrayArchive_ASTRowCoordinateArchive::ASTNodeArrayArchive_ASTRowCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
}
ASTNodeArrayArchive_ASTRowCoordinateArchive::ASTNodeArrayArchive_ASTRowCoordinateArchive(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTRowCoordinateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){}
    , decltype(_impl_.absolute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.row_, &from._impl_.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.absolute_) -
    reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
}

inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_){0}
    , decltype(_impl_.absolute_){false}
  };
}

ASTNodeArrayArchive_ASTRowCoordinateArchive::~ASTNodeArrayArchive_ASTRowCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTRowCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.row_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.absolute_) -
        reinterpret_cast<char*>(&_impl_.row_)) + sizeof(_impl_.absolute_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTRowCoordinateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required sint32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool absolute = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_absolute(&has_bits);
          _impl_.absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTRowCoordinateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required sint32 row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(1, this->_internal_row(), target);
  }

  // optional bool absolute = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTRowCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  size_t total_size = 0;

  // required sint32 row = 1;
  if (_internal_has_row()) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_row());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool absolute = 2 [default = false];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTRowCoordinateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTRowCoordinateArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTRowCoordinateArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTRowCoordinateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.absolute_ = from._impl_.absolute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::CopyFrom(const ASTNodeArrayArchive_ASTRowCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTRowCoordinateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTRowCoordinateArchive::InternalSwap(ASTNodeArrayArchive_ASTRowCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTRowCoordinateArchive, _impl_.absolute_)
      + sizeof(ASTNodeArrayArchive_ASTRowCoordinateArchive::_impl_.absolute_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTRowCoordinateArchive, _impl_.row_)>(
          reinterpret_cast<char*>(&_impl_.row_),
          reinterpret_cast<char*>(&other->_impl_.row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTRowCoordinateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[89]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTUidList::_Internal {
 public:
};

void ASTNodeArrayArchive_ASTUidList::clear_uid() {
  _impl_.uid_.Clear();
}
ASTNodeArrayArchive_ASTUidList::ASTNodeArrayArchive_ASTUidList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTUidList)
}
ASTNodeArrayArchive_ASTUidList::ASTNodeArrayArchive_ASTUidList(const ASTNodeArrayArchive_ASTUidList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTUidList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){from._impl_.uid_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTUidList)
}

inline void ASTNodeArrayArchive_ASTUidList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ASTNodeArrayArchive_ASTUidList::~ASTNodeArrayArchive_ASTUidList() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTUidList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTUidList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_.~RepeatedPtrField();
}

void ASTNodeArrayArchive_ASTUidList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTUidList::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTUidList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uid(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTUidList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uid = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uid_size()); i < n; i++) {
    const auto& repfield = this->_internal_uid(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTUidList)
  return target;
}

size_t ASTNodeArrayArchive_ASTUidList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uid = 1;
  total_size += 1UL * this->_internal_uid_size();
  for (const auto& msg : this->_impl_.uid_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTUidList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTUidList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTUidList::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTUidList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTUidList*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTUidList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uid_.MergeFrom(from._impl_.uid_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTUidList::CopyFrom(const ASTNodeArrayArchive_ASTUidList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTUidList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uid_))
    return false;
  return true;
}

void ASTNodeArrayArchive_ASTUidList::InternalSwap(ASTNodeArrayArchive_ASTUidList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uid_.InternalSwap(&other->_impl_.uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTUidList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[90]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTUidTract::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTUidTract>()._impl_._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive_ASTUidList& columnuids(const ASTNodeArrayArchive_ASTUidTract* msg);
  static void set_has_columnuids(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTUidList& rowuids(const ASTNodeArrayArchive_ASTUidTract* msg);
  static void set_has_rowuids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_is_range_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_purpose(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preserve_rectangular(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive_ASTUidList&
ASTNodeArrayArchive_ASTUidTract::_Internal::columnuids(const ASTNodeArrayArchive_ASTUidTract* msg) {
  return *msg->_impl_.columnuids_;
}
const ::TSCE::ASTNodeArrayArchive_ASTUidList&
ASTNodeArrayArchive_ASTUidTract::_Internal::rowuids(const ASTNodeArrayArchive_ASTUidTract* msg) {
  return *msg->_impl_.rowuids_;
}
ASTNodeArrayArchive_ASTUidTract::ASTNodeArrayArchive_ASTUidTract(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTUidTract)
}
ASTNodeArrayArchive_ASTUidTract::ASTNodeArrayArchive_ASTUidTract(const ASTNodeArrayArchive_ASTUidTract& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTUidTract* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.columnuids_){nullptr}
    , decltype(_impl_.rowuids_){nullptr}
    , decltype(_impl_.is_range_ref_){}
    , decltype(_impl_.purpose_){}
    , decltype(_impl_.preserve_rectangular_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_columnuids()) {
    _this->_impl_.columnuids_ = new ::TSCE::ASTNodeArrayArchive_ASTUidList(*from._impl_.columnuids_);
  }
  if (from._internal_has_rowuids()) {
    _this->_impl_.rowuids_ = new ::TSCE::ASTNodeArrayArchive_ASTUidList(*from._impl_.rowuids_);
  }
  ::memcpy(&_impl_.is_range_ref_, &from._impl_.is_range_ref_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.preserve_rectangular_) -
    reinterpret_cast<char*>(&_impl_.is_range_ref_)) + sizeof(_impl_.preserve_rectangular_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTUidTract)
}

inline void ASTNodeArrayArchive_ASTUidTract::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.columnuids_){nullptr}
    , decltype(_impl_.rowuids_){nullptr}
    , decltype(_impl_.is_range_ref_){false}
    , decltype(_impl_.purpose_){0}
    , decltype(_impl_.preserve_rectangular_){true}
  };
}

ASTNodeArrayArchive_ASTUidTract::~ASTNodeArrayArchive_ASTUidTract() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTUidTract)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTUidTract::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.columnuids_;
  if (this != internal_default_instance()) delete _impl_.rowuids_;
}

void ASTNodeArrayArchive_ASTUidTract::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTUidTract::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.columnuids_ != nullptr);
      _impl_.columnuids_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rowuids_ != nullptr);
      _impl_.rowuids_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.is_range_ref_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.purpose_) -
        reinterpret_cast<char*>(&_impl_.is_range_ref_)) + sizeof(_impl_.purpose_));
    _impl_.preserve_rectangular_ = true;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTUidTract::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive.ASTUidList columnUids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_columnuids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.ASTNodeArrayArchive.ASTUidList rowUids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rowuids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_range_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_range_ref(&has_bits);
          _impl_.is_range_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTUidTractPurpose purpose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose_IsValid(val))) {
            _internal_set_purpose(static_cast<::TSCE::ASTNodeArrayArchive_ASTUidTractPurpose>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_rectangular = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_preserve_rectangular(&has_bits);
          _impl_.preserve_rectangular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTUidTract::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive.ASTUidList columnUids = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::columnuids(this),
        _Internal::columnuids(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.ASTNodeArrayArchive.ASTUidList rowUids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rowuids(this),
        _Internal::rowuids(this).GetCachedSize(), target, stream);
  }

  // optional bool is_range_ref = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_range_ref(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTUidTractPurpose purpose = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_purpose(), target);
  }

  // optional bool preserve_rectangular = 5 [default = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_preserve_rectangular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTUidTract)
  return target;
}

size_t ASTNodeArrayArchive_ASTUidTract::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  size_t total_size = 0;

  if (_internal_has_columnuids()) {
    // required .TSCE.ASTNodeArrayArchive.ASTUidList columnUids = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.columnuids_);
  }

  if (_internal_has_rowuids()) {
    // required .TSCE.ASTNodeArrayArchive.ASTUidList rowUids = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rowuids_);
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTUidTract::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.ASTNodeArrayArchive.ASTUidList columnUids = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.columnuids_);

    // required .TSCE.ASTNodeArrayArchive.ASTUidList rowUids = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rowuids_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional bool is_range_ref = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTUidTractPurpose purpose = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_purpose());
    }

    // optional bool preserve_rectangular = 5 [default = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTUidTract::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTUidTract::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTUidTract::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTUidTract::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTUidTract*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTUidTract&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_columnuids()->::TSCE::ASTNodeArrayArchive_ASTUidList::MergeFrom(
          from._internal_columnuids());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rowuids()->::TSCE::ASTNodeArrayArchive_ASTUidList::MergeFrom(
          from._internal_rowuids());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.is_range_ref_ = from._impl_.is_range_ref_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.purpose_ = from._impl_.purpose_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.preserve_rectangular_ = from._impl_.preserve_rectangular_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTUidTract::CopyFrom(const ASTNodeArrayArchive_ASTUidTract& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidTract)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTUidTract::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_columnuids()) {
    if (!_impl_.columnuids_->IsInitialized()) return false;
  }
  if (_internal_has_rowuids()) {
    if (!_impl_.rowuids_->IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTUidTract::InternalSwap(ASTNodeArrayArchive_ASTUidTract* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTUidTract, _impl_.purpose_)
      + sizeof(ASTNodeArrayArchive_ASTUidTract::_impl_.purpose_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTUidTract, _impl_.columnuids_)>(
          reinterpret_cast<char*>(&_impl_.columnuids_),
          reinterpret_cast<char*>(&other->_impl_.columnuids_));
  swap(_impl_.preserve_rectangular_, other->_impl_.preserve_rectangular_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTUidTract::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[91]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTStickyBits::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTStickyBits>()._impl_._has_bits_);
  static void set_has_begin_row_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_begin_column_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_end_row_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_column_is_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ASTNodeArrayArchive_ASTStickyBits::ASTNodeArrayArchive_ASTStickyBits(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTStickyBits)
}
ASTNodeArrayArchive_ASTStickyBits::ASTNodeArrayArchive_ASTStickyBits(const ASTNodeArrayArchive_ASTStickyBits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTStickyBits* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_row_is_absolute_){}
    , decltype(_impl_.begin_column_is_absolute_){}
    , decltype(_impl_.end_row_is_absolute_){}
    , decltype(_impl_.end_column_is_absolute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.begin_row_is_absolute_, &from._impl_.begin_row_is_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_column_is_absolute_) -
    reinterpret_cast<char*>(&_impl_.begin_row_is_absolute_)) + sizeof(_impl_.end_column_is_absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTStickyBits)
}

inline void ASTNodeArrayArchive_ASTStickyBits::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.begin_row_is_absolute_){false}
    , decltype(_impl_.begin_column_is_absolute_){false}
    , decltype(_impl_.end_row_is_absolute_){false}
    , decltype(_impl_.end_column_is_absolute_){false}
  };
}

ASTNodeArrayArchive_ASTStickyBits::~ASTNodeArrayArchive_ASTStickyBits() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTStickyBits::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ASTNodeArrayArchive_ASTStickyBits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTStickyBits::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.begin_row_is_absolute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_column_is_absolute_) -
      reinterpret_cast<char*>(&_impl_.begin_row_is_absolute_)) + sizeof(_impl_.end_column_is_absolute_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTStickyBits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool begin_row_is_absolute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_begin_row_is_absolute(&has_bits);
          _impl_.begin_row_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool begin_column_is_absolute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_begin_column_is_absolute(&has_bits);
          _impl_.begin_column_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool end_row_is_absolute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_end_row_is_absolute(&has_bits);
          _impl_.end_row_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool end_column_is_absolute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_end_column_is_absolute(&has_bits);
          _impl_.end_column_is_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTStickyBits::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool begin_row_is_absolute = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_begin_row_is_absolute(), target);
  }

  // required bool begin_column_is_absolute = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_begin_column_is_absolute(), target);
  }

  // required bool end_row_is_absolute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_end_row_is_absolute(), target);
  }

  // required bool end_column_is_absolute = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_end_column_is_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  return target;
}

size_t ASTNodeArrayArchive_ASTStickyBits::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  size_t total_size = 0;

  if (_internal_has_begin_row_is_absolute()) {
    // required bool begin_row_is_absolute = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_begin_column_is_absolute()) {
    // required bool begin_column_is_absolute = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_end_row_is_absolute()) {
    // required bool end_row_is_absolute = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_end_column_is_absolute()) {
    // required bool end_column_is_absolute = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTStickyBits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bool begin_row_is_absolute = 1;
    total_size += 1 + 1;

    // required bool begin_column_is_absolute = 2;
    total_size += 1 + 1;

    // required bool end_row_is_absolute = 3;
    total_size += 1 + 1;

    // required bool end_column_is_absolute = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTStickyBits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTStickyBits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTStickyBits::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTStickyBits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTStickyBits*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTStickyBits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.begin_row_is_absolute_ = from._impl_.begin_row_is_absolute_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.begin_column_is_absolute_ = from._impl_.begin_column_is_absolute_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.end_row_is_absolute_ = from._impl_.end_row_is_absolute_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.end_column_is_absolute_ = from._impl_.end_column_is_absolute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTStickyBits::CopyFrom(const ASTNodeArrayArchive_ASTStickyBits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTStickyBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTStickyBits::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTStickyBits::InternalSwap(ASTNodeArrayArchive_ASTStickyBits* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTStickyBits, _impl_.end_column_is_absolute_)
      + sizeof(ASTNodeArrayArchive_ASTStickyBits::_impl_.end_column_is_absolute_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTStickyBits, _impl_.begin_row_is_absolute_)>(
          reinterpret_cast<char*>(&_impl_.begin_row_is_absolute_),
          reinterpret_cast<char*>(&other->_impl_.begin_row_is_absolute_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTStickyBits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[92]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTUidTractList::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTUidTractList>()._impl_._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& sticky_bits(const ASTNodeArrayArchive_ASTUidTractList* msg);
  static void set_has_sticky_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive_ASTStickyBits&
ASTNodeArrayArchive_ASTUidTractList::_Internal::sticky_bits(const ASTNodeArrayArchive_ASTUidTractList* msg) {
  return *msg->_impl_.sticky_bits_;
}
ASTNodeArrayArchive_ASTUidTractList::ASTNodeArrayArchive_ASTUidTractList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTUidTractList)
}
ASTNodeArrayArchive_ASTUidTractList::ASTNodeArrayArchive_ASTUidTractList(const ASTNodeArrayArchive_ASTUidTractList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTUidTractList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tract_){from._impl_.tract_}
    , decltype(_impl_.sticky_bits_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sticky_bits()) {
    _this->_impl_.sticky_bits_ = new ::TSCE::ASTNodeArrayArchive_ASTStickyBits(*from._impl_.sticky_bits_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTUidTractList)
}

inline void ASTNodeArrayArchive_ASTUidTractList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tract_){arena}
    , decltype(_impl_.sticky_bits_){nullptr}
  };
}

ASTNodeArrayArchive_ASTUidTractList::~ASTNodeArrayArchive_ASTUidTractList() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTUidTractList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tract_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.sticky_bits_;
}

void ASTNodeArrayArchive_ASTUidTractList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTUidTractList::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tract_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.sticky_bits_ != nullptr);
    _impl_.sticky_bits_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTUidTractList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.ASTNodeArrayArchive.ASTUidTract tract = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tract(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.ASTNodeArrayArchive.ASTStickyBits sticky_bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sticky_bits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTUidTractList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTUidTract tract = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tract_size()); i < n; i++) {
    const auto& repfield = this->_internal_tract(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive.ASTStickyBits sticky_bits = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sticky_bits(this),
        _Internal::sticky_bits(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  return target;
}

size_t ASTNodeArrayArchive_ASTUidTractList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  size_t total_size = 0;

  // required .TSCE.ASTNodeArrayArchive.ASTStickyBits sticky_bits = 2;
  if (_internal_has_sticky_bits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sticky_bits_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTUidTract tract = 1;
  total_size += 1UL * this->_internal_tract_size();
  for (const auto& msg : this->_impl_.tract_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTUidTractList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTUidTractList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTUidTractList::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTUidTractList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTUidTractList*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTUidTractList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tract_.MergeFrom(from._impl_.tract_);
  if (from._internal_has_sticky_bits()) {
    _this->_internal_mutable_sticky_bits()->::TSCE::ASTNodeArrayArchive_ASTStickyBits::MergeFrom(
        from._internal_sticky_bits());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTUidTractList::CopyFrom(const ASTNodeArrayArchive_ASTUidTractList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidTractList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTUidTractList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tract_))
    return false;
  if (_internal_has_sticky_bits()) {
    if (!_impl_.sticky_bits_->IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTUidTractList::InternalSwap(ASTNodeArrayArchive_ASTUidTractList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tract_.InternalSwap(&other->_impl_.tract_);
  swap(_impl_.sticky_bits_, other->_impl_.sticky_bits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTUidTractList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[93]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTUidCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTUidCoordinateArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& column_uid(const ASTNodeArrayArchive_ASTUidCoordinateArchive* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& row_uid(const ASTNodeArrayArchive_ASTUidCoordinateArchive* msg);
  static void set_has_row_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_column_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_row_absolute(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSP::UUID&
ASTNodeArrayArchive_ASTUidCoordinateArchive::_Internal::column_uid(const ASTNodeArrayArchive_ASTUidCoordinateArchive* msg) {
  return *msg->_impl_.column_uid_;
}
const ::TSP::UUID&
ASTNodeArrayArchive_ASTUidCoordinateArchive::_Internal::row_uid(const ASTNodeArrayArchive_ASTUidCoordinateArchive* msg) {
  return *msg->_impl_.row_uid_;
}
void ASTNodeArrayArchive_ASTUidCoordinateArchive::clear_column_uid() {
  if (_impl_.column_uid_ != nullptr) _impl_.column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ASTNodeArrayArchive_ASTUidCoordinateArchive::clear_row_uid() {
  if (_impl_.row_uid_ != nullptr) _impl_.row_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ASTNodeArrayArchive_ASTUidCoordinateArchive::ASTNodeArrayArchive_ASTUidCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
}
ASTNodeArrayArchive_ASTUidCoordinateArchive::ASTNodeArrayArchive_ASTUidCoordinateArchive(const ASTNodeArrayArchive_ASTUidCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTUidCoordinateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.row_uid_){nullptr}
    , decltype(_impl_.column_absolute_){}
    , decltype(_impl_.row_absolute_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_column_uid()) {
    _this->_impl_.column_uid_ = new ::TSP::UUID(*from._impl_.column_uid_);
  }
  if (from._internal_has_row_uid()) {
    _this->_impl_.row_uid_ = new ::TSP::UUID(*from._impl_.row_uid_);
  }
  ::memcpy(&_impl_.column_absolute_, &from._impl_.column_absolute_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_absolute_) -
    reinterpret_cast<char*>(&_impl_.column_absolute_)) + sizeof(_impl_.row_absolute_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
}

inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.row_uid_){nullptr}
    , decltype(_impl_.column_absolute_){false}
    , decltype(_impl_.row_absolute_){false}
  };
}

ASTNodeArrayArchive_ASTUidCoordinateArchive::~ASTNodeArrayArchive_ASTUidCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTUidCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.column_uid_;
  if (this != internal_default_instance()) delete _impl_.row_uid_;
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.column_uid_ != nullptr);
      _impl_.column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.row_uid_ != nullptr);
      _impl_.row_uid_->Clear();
    }
  }
  ::memset(&_impl_.column_absolute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.row_absolute_) -
      reinterpret_cast<char*>(&_impl_.column_absolute_)) + sizeof(_impl_.row_absolute_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTUidCoordinateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID column_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID row_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool column_absolute = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_column_absolute(&has_bits);
          _impl_.column_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool row_absolute = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_row_absolute(&has_bits);
          _impl_.row_absolute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTUidCoordinateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID column_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::column_uid(this),
        _Internal::column_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID row_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::row_uid(this),
        _Internal::row_uid(this).GetCachedSize(), target, stream);
  }

  // required bool column_absolute = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_column_absolute(), target);
  }

  // required bool row_absolute = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_row_absolute(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTUidCoordinateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  size_t total_size = 0;

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);
  }

  if (_internal_has_row_uid()) {
    // required .TSP.UUID row_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.row_uid_);
  }

  if (_internal_has_column_absolute()) {
    // required bool column_absolute = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_row_absolute()) {
    // required bool row_absolute = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTUidCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSP.UUID column_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);

    // required .TSP.UUID row_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.row_uid_);

    // required bool column_absolute = 3;
    total_size += 1 + 1;

    // required bool row_absolute = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTUidCoordinateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTUidCoordinateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTUidCoordinateArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTUidCoordinateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTUidCoordinateArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTUidCoordinateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_row_uid()->::TSP::UUID::MergeFrom(
          from._internal_row_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.column_absolute_ = from._impl_.column_absolute_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.row_absolute_ = from._impl_.row_absolute_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::CopyFrom(const ASTNodeArrayArchive_ASTUidCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTUidCoordinateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_column_uid()) {
    if (!_impl_.column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_row_uid()) {
    if (!_impl_.row_uid_->IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTUidCoordinateArchive::InternalSwap(ASTNodeArrayArchive_ASTUidCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTUidCoordinateArchive, _impl_.row_absolute_)
      + sizeof(ASTNodeArrayArchive_ASTUidCoordinateArchive::_impl_.row_absolute_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTUidCoordinateArchive, _impl_.column_uid_)>(
          reinterpret_cast<char*>(&_impl_.column_uid_),
          reinterpret_cast<char*>(&other->_impl_.column_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTUidCoordinateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[94]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTCategoryLevels::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTCategoryLevels>()._impl_._has_bits_);
  static void set_has_ast_column_group_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_row_group_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_agg_index_level(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ASTNodeArrayArchive_ASTCategoryLevels::ASTNodeArrayArchive_ASTCategoryLevels(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTCategoryLevels)
}
ASTNodeArrayArchive_ASTCategoryLevels::ASTNodeArrayArchive_ASTCategoryLevels(const ASTNodeArrayArchive_ASTCategoryLevels& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTCategoryLevels* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_column_group_level_){}
    , decltype(_impl_.ast_row_group_level_){}
    , decltype(_impl_.ast_agg_index_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ast_column_group_level_, &from._impl_.ast_column_group_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ast_agg_index_level_) -
    reinterpret_cast<char*>(&_impl_.ast_column_group_level_)) + sizeof(_impl_.ast_agg_index_level_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTCategoryLevels)
}

inline void ASTNodeArrayArchive_ASTCategoryLevels::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_column_group_level_){0u}
    , decltype(_impl_.ast_row_group_level_){0u}
    , decltype(_impl_.ast_agg_index_level_){0u}
  };
}

ASTNodeArrayArchive_ASTCategoryLevels::~ASTNodeArrayArchive_ASTCategoryLevels() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTCategoryLevels)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTCategoryLevels::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ASTNodeArrayArchive_ASTCategoryLevels::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTCategoryLevels::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTCategoryLevels)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.ast_column_group_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ast_agg_index_level_) -
        reinterpret_cast<char*>(&_impl_.ast_column_group_level_)) + sizeof(_impl_.ast_agg_index_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTCategoryLevels::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 AST_column_group_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ast_column_group_level(&has_bits);
          _impl_.ast_column_group_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 AST_row_group_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ast_row_group_level(&has_bits);
          _impl_.ast_row_group_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_agg_index_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ast_agg_index_level(&has_bits);
          _impl_.ast_agg_index_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTCategoryLevels::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTCategoryLevels)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 AST_column_group_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ast_column_group_level(), target);
  }

  // required uint32 AST_row_group_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ast_row_group_level(), target);
  }

  // optional uint32 AST_agg_index_level = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ast_agg_index_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTCategoryLevels)
  return target;
}

size_t ASTNodeArrayArchive_ASTCategoryLevels::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ASTNodeArrayArchive.ASTCategoryLevels)
  size_t total_size = 0;

  if (_internal_has_ast_column_group_level()) {
    // required uint32 AST_column_group_level = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_column_group_level());
  }

  if (_internal_has_ast_row_group_level()) {
    // required uint32 AST_row_group_level = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_row_group_level());
  }

  return total_size;
}
size_t ASTNodeArrayArchive_ASTCategoryLevels::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTCategoryLevels)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 AST_column_group_level = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_column_group_level());

    // required uint32 AST_row_group_level = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_row_group_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 AST_agg_index_level = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_agg_index_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTCategoryLevels::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTCategoryLevels::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTCategoryLevels::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTCategoryLevels::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTCategoryLevels*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTCategoryLevels&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCategoryLevels)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ast_column_group_level_ = from._impl_.ast_column_group_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ast_row_group_level_ = from._impl_.ast_row_group_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ast_agg_index_level_ = from._impl_.ast_agg_index_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTCategoryLevels::CopyFrom(const ASTNodeArrayArchive_ASTCategoryLevels& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCategoryLevels)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTCategoryLevels::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTCategoryLevels::InternalSwap(ASTNodeArrayArchive_ASTCategoryLevels* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTCategoryLevels, _impl_.ast_agg_index_level_)
      + sizeof(ASTNodeArrayArchive_ASTCategoryLevels::_impl_.ast_agg_index_level_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTCategoryLevels, _impl_.ast_column_group_level_)>(
          reinterpret_cast<char*>(&_impl_.ast_column_group_level_),
          reinterpret_cast<char*>(&other->_impl_.ast_column_group_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTCategoryLevels::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[95]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTCategoryReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTCategoryReferenceArchive>()._impl_._has_bits_);
  static const ::TSCE::CategoryReferenceArchive& category_ref(const ASTNodeArrayArchive_ASTCategoryReferenceArchive* msg);
  static void set_has_category_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::CategoryReferenceArchive&
ASTNodeArrayArchive_ASTCategoryReferenceArchive::_Internal::category_ref(const ASTNodeArrayArchive_ASTCategoryReferenceArchive* msg) {
  return *msg->_impl_.category_ref_;
}
ASTNodeArrayArchive_ASTCategoryReferenceArchive::ASTNodeArrayArchive_ASTCategoryReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
}
ASTNodeArrayArchive_ASTCategoryReferenceArchive::ASTNodeArrayArchive_ASTCategoryReferenceArchive(const ASTNodeArrayArchive_ASTCategoryReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTCategoryReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_ref_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_category_ref()) {
    _this->_impl_.category_ref_ = new ::TSCE::CategoryReferenceArchive(*from._impl_.category_ref_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
}

inline void ASTNodeArrayArchive_ASTCategoryReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_ref_){nullptr}
  };
}

ASTNodeArrayArchive_ASTCategoryReferenceArchive::~ASTNodeArrayArchive_ASTCategoryReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTCategoryReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.category_ref_;
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.category_ref_ != nullptr);
    _impl_.category_ref_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTCategoryReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CategoryReferenceArchive category_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTCategoryReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CategoryReferenceArchive category_ref = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::category_ref(this),
        _Internal::category_ref(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTCategoryReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  size_t total_size = 0;

  // required .TSCE.CategoryReferenceArchive category_ref = 1;
  if (_internal_has_category_ref()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.category_ref_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTCategoryReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTCategoryReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTCategoryReferenceArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTCategoryReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTCategoryReferenceArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTCategoryReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_category_ref()) {
    _this->_internal_mutable_category_ref()->::TSCE::CategoryReferenceArchive::MergeFrom(
        from._internal_category_ref());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::CopyFrom(const ASTNodeArrayArchive_ASTCategoryReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTCategoryReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_category_ref()) {
    if (!_impl_.category_ref_->IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTCategoryReferenceArchive::InternalSwap(ASTNodeArrayArchive_ASTCategoryReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.category_ref_, other->_impl_.category_ref_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTCategoryReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[96]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive>()._impl_._has_bits_);
  static void set_has_range_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
}
ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_begin_){}
    , decltype(_impl_.range_end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.range_begin_, &from._impl_.range_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_end_) -
    reinterpret_cast<char*>(&_impl_.range_begin_)) + sizeof(_impl_.range_end_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
}

inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_begin_){0}
    , decltype(_impl_.range_end_){0}
  };
}

ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::~ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.range_begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.range_end_) -
        reinterpret_cast<char*>(&_impl_.range_begin_)) + sizeof(_impl_.range_end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 range_begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_range_begin(&has_bits);
          _impl_.range_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_range_end(&has_bits);
          _impl_.range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 range_begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_range_begin(), target);
  }

  // optional int32 range_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_range_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  size_t total_size = 0;

  // required int32 range_begin = 1;
  if (_internal_has_range_begin()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_range_begin());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 range_end = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_range_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.range_begin_ = from._impl_.range_begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_end_ = from._impl_.range_end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::CopyFrom(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::InternalSwap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, _impl_.range_end_)
      + sizeof(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::_impl_.range_end_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive, _impl_.range_begin_)>(
          reinterpret_cast<char*>(&_impl_.range_begin_),
          reinterpret_cast<char*>(&other->_impl_.range_begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[97]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive>()._impl_._has_bits_);
  static void set_has_range_begin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
}
ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_begin_){}
    , decltype(_impl_.range_end_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.range_begin_, &from._impl_.range_begin_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_end_) -
    reinterpret_cast<char*>(&_impl_.range_begin_)) + sizeof(_impl_.range_end_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
}

inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_begin_){0u}
    , decltype(_impl_.range_end_){0u}
  };
}

ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::~ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.range_begin_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.range_end_) -
        reinterpret_cast<char*>(&_impl_.range_begin_)) + sizeof(_impl_.range_end_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 range_begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_range_begin(&has_bits);
          _impl_.range_begin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 range_end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_range_end(&has_bits);
          _impl_.range_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 range_begin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_range_begin(), target);
  }

  // optional uint32 range_end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_range_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  size_t total_size = 0;

  // required uint32 range_begin = 1;
  if (_internal_has_range_begin()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range_begin());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 range_end = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.range_begin_ = from._impl_.range_begin_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_end_ = from._impl_.range_end_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::CopyFrom(const ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::InternalSwap(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, _impl_.range_end_)
      + sizeof(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::_impl_.range_end_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive, _impl_.range_begin_)>(
          reinterpret_cast<char*>(&_impl_.range_begin_),
          reinterpret_cast<char*>(&other->_impl_.range_begin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[98]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTColonTractArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTColonTractArchive>()._impl_._has_bits_);
  static void set_has_preserve_rectangular(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ASTNodeArrayArchive_ASTColonTractArchive::ASTNodeArrayArchive_ASTColonTractArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
}
ASTNodeArrayArchive_ASTColonTractArchive::ASTNodeArrayArchive_ASTColonTractArchive(const ASTNodeArrayArchive_ASTColonTractArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTColonTractArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relative_column_){from._impl_.relative_column_}
    , decltype(_impl_.relative_row_){from._impl_.relative_row_}
    , decltype(_impl_.absolute_column_){from._impl_.absolute_column_}
    , decltype(_impl_.absolute_row_){from._impl_.absolute_row_}
    , decltype(_impl_.preserve_rectangular_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.preserve_rectangular_ = from._impl_.preserve_rectangular_;
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
}

inline void ASTNodeArrayArchive_ASTColonTractArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.relative_column_){arena}
    , decltype(_impl_.relative_row_){arena}
    , decltype(_impl_.absolute_column_){arena}
    , decltype(_impl_.absolute_row_){arena}
    , decltype(_impl_.preserve_rectangular_){true}
  };
}

ASTNodeArrayArchive_ASTColonTractArchive::~ASTNodeArrayArchive_ASTColonTractArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTColonTractArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.relative_column_.~RepeatedPtrField();
  _impl_.relative_row_.~RepeatedPtrField();
  _impl_.absolute_column_.~RepeatedPtrField();
  _impl_.absolute_row_.~RepeatedPtrField();
}

void ASTNodeArrayArchive_ASTColonTractArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTColonTractArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relative_column_.Clear();
  _impl_.relative_row_.Clear();
  _impl_.absolute_column_.Clear();
  _impl_.absolute_row_.Clear();
  _impl_.preserve_rectangular_ = true;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTColonTractArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relative_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_relative_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_absolute_column(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_absolute_row(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool preserve_rectangular = 5 [default = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_preserve_rectangular(&has_bits);
          _impl_.preserve_rectangular_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTColonTractArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_column = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_relative_column_size()); i < n; i++) {
    const auto& repfield = this->_internal_relative_column(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_row = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_relative_row_size()); i < n; i++) {
    const auto& repfield = this->_internal_relative_row(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_column = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_absolute_column_size()); i < n; i++) {
    const auto& repfield = this->_internal_absolute_column(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_row = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_absolute_row_size()); i < n; i++) {
    const auto& repfield = this->_internal_absolute_row(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool preserve_rectangular = 5 [default = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_preserve_rectangular(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTColonTractArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_column = 1;
  total_size += 1UL * this->_internal_relative_column_size();
  for (const auto& msg : this->_impl_.relative_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive relative_row = 2;
  total_size += 1UL * this->_internal_relative_row_size();
  for (const auto& msg : this->_impl_.relative_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_column = 3;
  total_size += 1UL * this->_internal_absolute_column_size();
  for (const auto& msg : this->_impl_.absolute_column_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive absolute_row = 4;
  total_size += 1UL * this->_internal_absolute_row_size();
  for (const auto& msg : this->_impl_.absolute_row_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool preserve_rectangular = 5 [default = true];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTColonTractArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTColonTractArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTColonTractArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTColonTractArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTColonTractArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTColonTractArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.relative_column_.MergeFrom(from._impl_.relative_column_);
  _this->_impl_.relative_row_.MergeFrom(from._impl_.relative_row_);
  _this->_impl_.absolute_column_.MergeFrom(from._impl_.absolute_column_);
  _this->_impl_.absolute_row_.MergeFrom(from._impl_.absolute_row_);
  if (from._internal_has_preserve_rectangular()) {
    _this->_internal_set_preserve_rectangular(from._internal_preserve_rectangular());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTColonTractArchive::CopyFrom(const ASTNodeArrayArchive_ASTColonTractArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTColonTractArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTColonTractArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.relative_column_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.relative_row_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.absolute_column_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.absolute_row_))
    return false;
  return true;
}

void ASTNodeArrayArchive_ASTColonTractArchive::InternalSwap(ASTNodeArrayArchive_ASTColonTractArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.relative_column_.InternalSwap(&other->_impl_.relative_column_);
  _impl_.relative_row_.InternalSwap(&other->_impl_.relative_row_);
  _impl_.absolute_column_.InternalSwap(&other->_impl_.absolute_column_);
  _impl_.absolute_row_.InternalSwap(&other->_impl_.absolute_row_);
  swap(_impl_.preserve_rectangular_, other->_impl_.preserve_rectangular_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTColonTractArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[99]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive>()._impl_._has_bits_);
  static const ::TSP::CFUUIDArchive& table_id(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* msg);
  static void set_has_table_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ast_reference_whitespace_after_sheet_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_reference_whitespace_before_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_reference_whitespace_after_table_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ast_reference_whitespace_before_cell_address(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::TSP::CFUUIDArchive&
ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_Internal::table_id(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* msg) {
  return *msg->_impl_.table_id_;
}
void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::clear_table_id() {
  if (_impl_.table_id_ != nullptr) _impl_.table_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
}
ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_reference_whitespace_after_sheet_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_after_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_cell_address_){}
    , decltype(_impl_.table_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ast_reference_whitespace_after_sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_after_sheet_name()) {
    _this->_impl_.ast_reference_whitespace_after_sheet_name_.Set(from._internal_ast_reference_whitespace_after_sheet_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_before_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_before_table_name()) {
    _this->_impl_.ast_reference_whitespace_before_table_name_.Set(from._internal_ast_reference_whitespace_before_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_after_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_after_table_name()) {
    _this->_impl_.ast_reference_whitespace_after_table_name_.Set(from._internal_ast_reference_whitespace_after_table_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_reference_whitespace_before_cell_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_reference_whitespace_before_cell_address()) {
    _this->_impl_.ast_reference_whitespace_before_cell_address_.Set(from._internal_ast_reference_whitespace_before_cell_address(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_table_id()) {
    _this->_impl_.table_id_ = new ::TSP::CFUUIDArchive(*from._impl_.table_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
}

inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_reference_whitespace_after_sheet_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_after_table_name_){}
    , decltype(_impl_.ast_reference_whitespace_before_cell_address_){}
    , decltype(_impl_.table_id_){nullptr}
  };
  _impl_.ast_reference_whitespace_after_sheet_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_sheet_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_before_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_after_table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_after_table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_reference_whitespace_before_cell_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_reference_whitespace_before_cell_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::~ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ast_reference_whitespace_after_sheet_name_.Destroy();
  _impl_.ast_reference_whitespace_before_table_name_.Destroy();
  _impl_.ast_reference_whitespace_after_table_name_.Destroy();
  _impl_.ast_reference_whitespace_before_cell_address_.Destroy();
  if (this != internal_default_instance()) delete _impl_.table_id_;
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ast_reference_whitespace_after_sheet_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ast_reference_whitespace_before_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ast_reference_whitespace_after_table_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ast_reference_whitespace_before_cell_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.table_id_ != nullptr);
      _impl_.table_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_sheet_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_sheet_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_table_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_after_table_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ast_reference_whitespace_after_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_reference_whitespace_before_cell_address = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ast_reference_whitespace_before_cell_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.CFUUIDArchive table_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_id(this),
        _Internal::table_id(this).GetCachedSize(), target, stream);
  }

  // optional string AST_reference_whitespace_after_sheet_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_sheet_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_sheet_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_sheet_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ast_reference_whitespace_after_sheet_name(), target);
  }

  // optional string AST_reference_whitespace_before_table_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_table_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ast_reference_whitespace_before_table_name(), target);
  }

  // optional string AST_reference_whitespace_after_table_name = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_after_table_name().data(), static_cast<int>(this->_internal_ast_reference_whitespace_after_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_after_table_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ast_reference_whitespace_after_table_name(), target);
  }

  // optional string AST_reference_whitespace_before_cell_address = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_reference_whitespace_before_cell_address().data(), static_cast<int>(this->_internal_ast_reference_whitespace_before_cell_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive.AST_reference_whitespace_before_cell_address");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ast_reference_whitespace_before_cell_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive table_id = 1;
  if (_internal_has_table_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string AST_reference_whitespace_after_sheet_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_sheet_name());
    }

    // optional string AST_reference_whitespace_before_table_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_table_name());
    }

    // optional string AST_reference_whitespace_after_table_name = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_after_table_name());
    }

    // optional string AST_reference_whitespace_before_cell_address = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_reference_whitespace_before_cell_address());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ast_reference_whitespace_after_sheet_name(from._internal_ast_reference_whitespace_after_sheet_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ast_reference_whitespace_before_table_name(from._internal_ast_reference_whitespace_before_table_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ast_reference_whitespace_after_table_name(from._internal_ast_reference_whitespace_after_table_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ast_reference_whitespace_before_cell_address(from._internal_ast_reference_whitespace_before_cell_address());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_table_id()->::TSP::CFUUIDArchive::MergeFrom(
          from._internal_table_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::CopyFrom(const ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::InternalSwap(ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_after_sheet_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_after_sheet_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_before_table_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_before_table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_after_table_name_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_after_table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_reference_whitespace_before_cell_address_, lhs_arena,
      &other->_impl_.ast_reference_whitespace_before_cell_address_, rhs_arena
  );
  swap(_impl_.table_id_, other->_impl_.table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[100]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTLetNodeWhitespace::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTLetNodeWhitespace>()._impl_._has_bits_);
  static void set_has_ast_let_whitespace_after_let(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_let_whitespace_after_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_let_whitespace_after_equals(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ast_let_whitespace_after_delimiter(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ASTNodeArrayArchive_ASTLetNodeWhitespace::ASTNodeArrayArchive_ASTLetNodeWhitespace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
}
ASTNodeArrayArchive_ASTLetNodeWhitespace::ASTNodeArrayArchive_ASTLetNodeWhitespace(const ASTNodeArrayArchive_ASTLetNodeWhitespace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTLetNodeWhitespace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_let_whitespace_after_let_){}
    , decltype(_impl_.ast_let_whitespace_after_identifier_){}
    , decltype(_impl_.ast_let_whitespace_after_equals_){}
    , decltype(_impl_.ast_let_whitespace_after_delimiter_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ast_let_whitespace_after_let_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_let_whitespace_after_let_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_let_whitespace_after_let()) {
    _this->_impl_.ast_let_whitespace_after_let_.Set(from._internal_ast_let_whitespace_after_let(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_let_whitespace_after_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_let_whitespace_after_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_let_whitespace_after_identifier()) {
    _this->_impl_.ast_let_whitespace_after_identifier_.Set(from._internal_ast_let_whitespace_after_identifier(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_let_whitespace_after_equals_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_let_whitespace_after_equals_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_let_whitespace_after_equals()) {
    _this->_impl_.ast_let_whitespace_after_equals_.Set(from._internal_ast_let_whitespace_after_equals(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_let_whitespace_after_delimiter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_let_whitespace_after_delimiter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_let_whitespace_after_delimiter()) {
    _this->_impl_.ast_let_whitespace_after_delimiter_.Set(from._internal_ast_let_whitespace_after_delimiter(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
}

inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_let_whitespace_after_let_){}
    , decltype(_impl_.ast_let_whitespace_after_identifier_){}
    , decltype(_impl_.ast_let_whitespace_after_equals_){}
    , decltype(_impl_.ast_let_whitespace_after_delimiter_){}
  };
  _impl_.ast_let_whitespace_after_let_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_let_whitespace_after_let_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_let_whitespace_after_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_let_whitespace_after_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_let_whitespace_after_equals_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_let_whitespace_after_equals_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_let_whitespace_after_delimiter_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_let_whitespace_after_delimiter_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ASTNodeArrayArchive_ASTLetNodeWhitespace::~ASTNodeArrayArchive_ASTLetNodeWhitespace() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTLetNodeWhitespace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ast_let_whitespace_after_let_.Destroy();
  _impl_.ast_let_whitespace_after_identifier_.Destroy();
  _impl_.ast_let_whitespace_after_equals_.Destroy();
  _impl_.ast_let_whitespace_after_delimiter_.Destroy();
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ast_let_whitespace_after_let_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ast_let_whitespace_after_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ast_let_whitespace_after_equals_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ast_let_whitespace_after_delimiter_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTLetNodeWhitespace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string AST_let_whitespace_after_let = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ast_let_whitespace_after_let();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_let");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_let_whitespace_after_identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ast_let_whitespace_after_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_let_whitespace_after_equals = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ast_let_whitespace_after_equals();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_equals");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AST_let_whitespace_after_delimiter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ast_let_whitespace_after_delimiter();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_delimiter");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTLetNodeWhitespace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string AST_let_whitespace_after_let = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_let_whitespace_after_let().data(), static_cast<int>(this->_internal_ast_let_whitespace_after_let().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_let");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ast_let_whitespace_after_let(), target);
  }

  // optional string AST_let_whitespace_after_identifier = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_let_whitespace_after_identifier().data(), static_cast<int>(this->_internal_ast_let_whitespace_after_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ast_let_whitespace_after_identifier(), target);
  }

  // optional string AST_let_whitespace_after_equals = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_let_whitespace_after_equals().data(), static_cast<int>(this->_internal_ast_let_whitespace_after_equals().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_equals");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ast_let_whitespace_after_equals(), target);
  }

  // optional string AST_let_whitespace_after_delimiter = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_let_whitespace_after_delimiter().data(), static_cast<int>(this->_internal_ast_let_whitespace_after_delimiter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace.AST_let_whitespace_after_delimiter");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ast_let_whitespace_after_delimiter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  return target;
}

size_t ASTNodeArrayArchive_ASTLetNodeWhitespace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string AST_let_whitespace_after_let = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_let_whitespace_after_let());
    }

    // optional string AST_let_whitespace_after_identifier = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_let_whitespace_after_identifier());
    }

    // optional string AST_let_whitespace_after_equals = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_let_whitespace_after_equals());
    }

    // optional string AST_let_whitespace_after_delimiter = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_let_whitespace_after_delimiter());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTLetNodeWhitespace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTLetNodeWhitespace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTLetNodeWhitespace::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTLetNodeWhitespace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTLetNodeWhitespace*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTLetNodeWhitespace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ast_let_whitespace_after_let(from._internal_ast_let_whitespace_after_let());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ast_let_whitespace_after_identifier(from._internal_ast_let_whitespace_after_identifier());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ast_let_whitespace_after_equals(from._internal_ast_let_whitespace_after_equals());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ast_let_whitespace_after_delimiter(from._internal_ast_let_whitespace_after_delimiter());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::CopyFrom(const ASTNodeArrayArchive_ASTLetNodeWhitespace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTLetNodeWhitespace::IsInitialized() const {
  return true;
}

void ASTNodeArrayArchive_ASTLetNodeWhitespace::InternalSwap(ASTNodeArrayArchive_ASTLetNodeWhitespace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_let_whitespace_after_let_, lhs_arena,
      &other->_impl_.ast_let_whitespace_after_let_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_let_whitespace_after_identifier_, lhs_arena,
      &other->_impl_.ast_let_whitespace_after_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_let_whitespace_after_equals_, lhs_arena,
      &other->_impl_.ast_let_whitespace_after_equals_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_let_whitespace_after_delimiter_, lhs_arena,
      &other->_impl_.ast_let_whitespace_after_delimiter_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTLetNodeWhitespace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[101]);
}

// ===================================================================

class ASTNodeArrayArchive_ASTNodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ASTNodeArrayArchive_ASTNodeArchive>()._impl_._has_bits_);
  static void set_has_ast_node_type(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_ast_function_node_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_ast_function_node_numargs(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_ast_number_node_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ast_boolean_node_boolean(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_ast_string_node_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ast_date_node_datenum(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_ast_date_node_suppress_date_format(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_ast_date_node_suppress_time_format(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_ast_date_node_date_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ast_duration_node_unitnum(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ast_duration_node_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_ast_duration_node_style(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_ast_duration_node_duration_unit_largest(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_ast_duration_node_duration_unit_smallest(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_ast_duration_node_use_automatic_units(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_ast_token_node_boolean(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_ast_array_node_numcol(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_ast_array_node_numrow(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_ast_list_node_numargs(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSCE::ASTNodeArrayArchive& ast_thunk_node_array(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_thunk_node_array(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive& ast_local_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_local_cell_reference_node_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive& ast_cross_table_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_cross_table_cell_reference_node_reference(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ast_unknown_function_node_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ast_unknown_function_node_numargs(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ast_whitespace(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive& ast_column(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_column(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive& ast_row(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_row(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive& ast_cross_table_reference_extra_info(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_cross_table_reference_extra_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive& ast_uid_coordinate(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_uid_coordinate(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ast_sticky_bits(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_sticky_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTStickyBits& ast_frozen_sticky_bits(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_frozen_sticky_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ast_let_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::ASTNodeArrayArchive& ast_let_e2(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_let_e2(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace& ast_let_whitespace(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_let_whitespace(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_ast_symbol(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTUidTractList& ast_tract_list(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_tract_list(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive& ast_category_ref(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_category_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive& ast_colon_tract(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_colon_tract(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_ast_number_node_decimal_low(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_ast_number_node_decimal_high(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTCategoryLevels& ast_category_levels(const ASTNodeArrayArchive_ASTNodeArchive* msg);
  static void set_has_ast_category_levels(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[1] & 0x00000200) ^ 0x00000200) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_thunk_node_array(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_thunk_node_array_;
}
const ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_local_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_local_cell_reference_node_reference_;
}
const ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_cross_table_cell_reference_node_reference(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_cross_table_cell_reference_node_reference_;
}
const ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_column(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_column_;
}
const ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_row(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_row_;
}
const ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_cross_table_reference_extra_info(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_cross_table_reference_extra_info_;
}
const ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_uid_coordinate(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_uid_coordinate_;
}
const ::TSCE::ASTNodeArrayArchive_ASTStickyBits&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_sticky_bits(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_sticky_bits_;
}
const ::TSCE::ASTNodeArrayArchive_ASTStickyBits&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_frozen_sticky_bits(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_frozen_sticky_bits_;
}
const ::TSCE::ASTNodeArrayArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_let_e2(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_let_e2_;
}
const ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_let_whitespace(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_let_whitespace_;
}
const ::TSCE::ASTNodeArrayArchive_ASTUidTractList&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_tract_list(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_tract_list_;
}
const ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_category_ref(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_category_ref_;
}
const ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_colon_tract(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_colon_tract_;
}
const ::TSCE::ASTNodeArrayArchive_ASTCategoryLevels&
ASTNodeArrayArchive_ASTNodeArchive::_Internal::ast_category_levels(const ASTNodeArrayArchive_ASTNodeArchive* msg) {
  return *msg->_impl_.ast_category_levels_;
}
ASTNodeArrayArchive_ASTNodeArchive::ASTNodeArrayArchive_ASTNodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
}
ASTNodeArrayArchive_ASTNodeArchive::ASTNodeArrayArchive_ASTNodeArchive(const ASTNodeArrayArchive_ASTNodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive_ASTNodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_string_node_string_){}
    , decltype(_impl_.ast_unknown_function_node_string_){}
    , decltype(_impl_.ast_date_node_date_time_format_){}
    , decltype(_impl_.ast_whitespace_){}
    , decltype(_impl_.ast_let_identifier_){}
    , decltype(_impl_.ast_thunk_node_array_){nullptr}
    , decltype(_impl_.ast_local_cell_reference_node_reference_){nullptr}
    , decltype(_impl_.ast_cross_table_cell_reference_node_reference_){nullptr}
    , decltype(_impl_.ast_column_){nullptr}
    , decltype(_impl_.ast_row_){nullptr}
    , decltype(_impl_.ast_cross_table_reference_extra_info_){nullptr}
    , decltype(_impl_.ast_uid_coordinate_){nullptr}
    , decltype(_impl_.ast_sticky_bits_){nullptr}
    , decltype(_impl_.ast_let_e2_){nullptr}
    , decltype(_impl_.ast_let_whitespace_){nullptr}
    , decltype(_impl_.ast_tract_list_){nullptr}
    , decltype(_impl_.ast_category_ref_){nullptr}
    , decltype(_impl_.ast_colon_tract_){nullptr}
    , decltype(_impl_.ast_frozen_sticky_bits_){nullptr}
    , decltype(_impl_.ast_category_levels_){nullptr}
    , decltype(_impl_.ast_function_node_index_){}
    , decltype(_impl_.ast_function_node_numargs_){}
    , decltype(_impl_.ast_number_node_number_){}
    , decltype(_impl_.ast_date_node_datenum_){}
    , decltype(_impl_.ast_duration_node_unitnum_){}
    , decltype(_impl_.ast_duration_node_unit_){}
    , decltype(_impl_.ast_token_node_boolean_){}
    , decltype(_impl_.ast_array_node_numcol_){}
    , decltype(_impl_.ast_array_node_numrow_){}
    , decltype(_impl_.ast_list_node_numargs_){}
    , decltype(_impl_.ast_unknown_function_node_numargs_){}
    , decltype(_impl_.ast_boolean_node_boolean_){}
    , decltype(_impl_.ast_date_node_suppress_date_format_){}
    , decltype(_impl_.ast_date_node_suppress_time_format_){}
    , decltype(_impl_.ast_duration_node_use_automatic_units_){}
    , decltype(_impl_.ast_duration_node_style_){}
    , decltype(_impl_.ast_duration_node_duration_unit_largest_){}
    , decltype(_impl_.ast_duration_node_duration_unit_smallest_){}
    , decltype(_impl_.ast_number_node_decimal_low_){}
    , decltype(_impl_.ast_number_node_decimal_high_){}
    , decltype(_impl_.ast_symbol_){}
    , decltype(_impl_.ast_node_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ast_string_node_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_string_node_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_string_node_string()) {
    _this->_impl_.ast_string_node_string_.Set(from._internal_ast_string_node_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_unknown_function_node_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_unknown_function_node_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_unknown_function_node_string()) {
    _this->_impl_.ast_unknown_function_node_string_.Set(from._internal_ast_unknown_function_node_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_date_node_date_time_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_date_node_date_time_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_date_node_date_time_format()) {
    _this->_impl_.ast_date_node_date_time_format_.Set(from._internal_ast_date_node_date_time_format(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_whitespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_whitespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_whitespace()) {
    _this->_impl_.ast_whitespace_.Set(from._internal_ast_whitespace(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ast_let_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_let_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ast_let_identifier()) {
    _this->_impl_.ast_let_identifier_.Set(from._internal_ast_let_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_ast_thunk_node_array()) {
    _this->_impl_.ast_thunk_node_array_ = new ::TSCE::ASTNodeArrayArchive(*from._impl_.ast_thunk_node_array_);
  }
  if (from._internal_has_ast_local_cell_reference_node_reference()) {
    _this->_impl_.ast_local_cell_reference_node_reference_ = new ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive(*from._impl_.ast_local_cell_reference_node_reference_);
  }
  if (from._internal_has_ast_cross_table_cell_reference_node_reference()) {
    _this->_impl_.ast_cross_table_cell_reference_node_reference_ = new ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive(*from._impl_.ast_cross_table_cell_reference_node_reference_);
  }
  if (from._internal_has_ast_column()) {
    _this->_impl_.ast_column_ = new ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive(*from._impl_.ast_column_);
  }
  if (from._internal_has_ast_row()) {
    _this->_impl_.ast_row_ = new ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive(*from._impl_.ast_row_);
  }
  if (from._internal_has_ast_cross_table_reference_extra_info()) {
    _this->_impl_.ast_cross_table_reference_extra_info_ = new ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive(*from._impl_.ast_cross_table_reference_extra_info_);
  }
  if (from._internal_has_ast_uid_coordinate()) {
    _this->_impl_.ast_uid_coordinate_ = new ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive(*from._impl_.ast_uid_coordinate_);
  }
  if (from._internal_has_ast_sticky_bits()) {
    _this->_impl_.ast_sticky_bits_ = new ::TSCE::ASTNodeArrayArchive_ASTStickyBits(*from._impl_.ast_sticky_bits_);
  }
  if (from._internal_has_ast_let_e2()) {
    _this->_impl_.ast_let_e2_ = new ::TSCE::ASTNodeArrayArchive(*from._impl_.ast_let_e2_);
  }
  if (from._internal_has_ast_let_whitespace()) {
    _this->_impl_.ast_let_whitespace_ = new ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace(*from._impl_.ast_let_whitespace_);
  }
  if (from._internal_has_ast_tract_list()) {
    _this->_impl_.ast_tract_list_ = new ::TSCE::ASTNodeArrayArchive_ASTUidTractList(*from._impl_.ast_tract_list_);
  }
  if (from._internal_has_ast_category_ref()) {
    _this->_impl_.ast_category_ref_ = new ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive(*from._impl_.ast_category_ref_);
  }
  if (from._internal_has_ast_colon_tract()) {
    _this->_impl_.ast_colon_tract_ = new ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive(*from._impl_.ast_colon_tract_);
  }
  if (from._internal_has_ast_frozen_sticky_bits()) {
    _this->_impl_.ast_frozen_sticky_bits_ = new ::TSCE::ASTNodeArrayArchive_ASTStickyBits(*from._impl_.ast_frozen_sticky_bits_);
  }
  if (from._internal_has_ast_category_levels()) {
    _this->_impl_.ast_category_levels_ = new ::TSCE::ASTNodeArrayArchive_ASTCategoryLevels(*from._impl_.ast_category_levels_);
  }
  ::memcpy(&_impl_.ast_function_node_index_, &from._impl_.ast_function_node_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ast_node_type_) -
    reinterpret_cast<char*>(&_impl_.ast_function_node_index_)) + sizeof(_impl_.ast_node_type_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
}

inline void ASTNodeArrayArchive_ASTNodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_string_node_string_){}
    , decltype(_impl_.ast_unknown_function_node_string_){}
    , decltype(_impl_.ast_date_node_date_time_format_){}
    , decltype(_impl_.ast_whitespace_){}
    , decltype(_impl_.ast_let_identifier_){}
    , decltype(_impl_.ast_thunk_node_array_){nullptr}
    , decltype(_impl_.ast_local_cell_reference_node_reference_){nullptr}
    , decltype(_impl_.ast_cross_table_cell_reference_node_reference_){nullptr}
    , decltype(_impl_.ast_column_){nullptr}
    , decltype(_impl_.ast_row_){nullptr}
    , decltype(_impl_.ast_cross_table_reference_extra_info_){nullptr}
    , decltype(_impl_.ast_uid_coordinate_){nullptr}
    , decltype(_impl_.ast_sticky_bits_){nullptr}
    , decltype(_impl_.ast_let_e2_){nullptr}
    , decltype(_impl_.ast_let_whitespace_){nullptr}
    , decltype(_impl_.ast_tract_list_){nullptr}
    , decltype(_impl_.ast_category_ref_){nullptr}
    , decltype(_impl_.ast_colon_tract_){nullptr}
    , decltype(_impl_.ast_frozen_sticky_bits_){nullptr}
    , decltype(_impl_.ast_category_levels_){nullptr}
    , decltype(_impl_.ast_function_node_index_){0u}
    , decltype(_impl_.ast_function_node_numargs_){0u}
    , decltype(_impl_.ast_number_node_number_){0}
    , decltype(_impl_.ast_date_node_datenum_){0}
    , decltype(_impl_.ast_duration_node_unitnum_){0}
    , decltype(_impl_.ast_duration_node_unit_){0}
    , decltype(_impl_.ast_token_node_boolean_){false}
    , decltype(_impl_.ast_array_node_numcol_){0u}
    , decltype(_impl_.ast_array_node_numrow_){0u}
    , decltype(_impl_.ast_list_node_numargs_){0u}
    , decltype(_impl_.ast_unknown_function_node_numargs_){0u}
    , decltype(_impl_.ast_boolean_node_boolean_){false}
    , decltype(_impl_.ast_date_node_suppress_date_format_){false}
    , decltype(_impl_.ast_date_node_suppress_time_format_){false}
    , decltype(_impl_.ast_duration_node_use_automatic_units_){false}
    , decltype(_impl_.ast_duration_node_style_){0u}
    , decltype(_impl_.ast_duration_node_duration_unit_largest_){0u}
    , decltype(_impl_.ast_duration_node_duration_unit_smallest_){0u}
    , decltype(_impl_.ast_number_node_decimal_low_){uint64_t{0u}}
    , decltype(_impl_.ast_number_node_decimal_high_){uint64_t{0u}}
    , decltype(_impl_.ast_symbol_){0u}
    , decltype(_impl_.ast_node_type_){1}
  };
  _impl_.ast_string_node_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_string_node_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_unknown_function_node_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_unknown_function_node_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_date_node_date_time_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_date_node_date_time_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_whitespace_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_whitespace_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ast_let_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ast_let_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ASTNodeArrayArchive_ASTNodeArchive::~ASTNodeArrayArchive_ASTNodeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive_ASTNodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ast_string_node_string_.Destroy();
  _impl_.ast_unknown_function_node_string_.Destroy();
  _impl_.ast_date_node_date_time_format_.Destroy();
  _impl_.ast_whitespace_.Destroy();
  _impl_.ast_let_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ast_thunk_node_array_;
  if (this != internal_default_instance()) delete _impl_.ast_local_cell_reference_node_reference_;
  if (this != internal_default_instance()) delete _impl_.ast_cross_table_cell_reference_node_reference_;
  if (this != internal_default_instance()) delete _impl_.ast_column_;
  if (this != internal_default_instance()) delete _impl_.ast_row_;
  if (this != internal_default_instance()) delete _impl_.ast_cross_table_reference_extra_info_;
  if (this != internal_default_instance()) delete _impl_.ast_uid_coordinate_;
  if (this != internal_default_instance()) delete _impl_.ast_sticky_bits_;
  if (this != internal_default_instance()) delete _impl_.ast_let_e2_;
  if (this != internal_default_instance()) delete _impl_.ast_let_whitespace_;
  if (this != internal_default_instance()) delete _impl_.ast_tract_list_;
  if (this != internal_default_instance()) delete _impl_.ast_category_ref_;
  if (this != internal_default_instance()) delete _impl_.ast_colon_tract_;
  if (this != internal_default_instance()) delete _impl_.ast_frozen_sticky_bits_;
  if (this != internal_default_instance()) delete _impl_.ast_category_levels_;
}

void ASTNodeArrayArchive_ASTNodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive_ASTNodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.ast_string_node_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.ast_unknown_function_node_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.ast_date_node_date_time_format_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.ast_whitespace_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.ast_let_identifier_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.ast_thunk_node_array_ != nullptr);
      _impl_.ast_thunk_node_array_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.ast_local_cell_reference_node_reference_ != nullptr);
      _impl_.ast_local_cell_reference_node_reference_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.ast_cross_table_cell_reference_node_reference_ != nullptr);
      _impl_.ast_cross_table_cell_reference_node_reference_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.ast_column_ != nullptr);
      _impl_.ast_column_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.ast_row_ != nullptr);
      _impl_.ast_row_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.ast_cross_table_reference_extra_info_ != nullptr);
      _impl_.ast_cross_table_reference_extra_info_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.ast_uid_coordinate_ != nullptr);
      _impl_.ast_uid_coordinate_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.ast_sticky_bits_ != nullptr);
      _impl_.ast_sticky_bits_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.ast_let_e2_ != nullptr);
      _impl_.ast_let_e2_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.ast_let_whitespace_ != nullptr);
      _impl_.ast_let_whitespace_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.ast_tract_list_ != nullptr);
      _impl_.ast_tract_list_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.ast_category_ref_ != nullptr);
      _impl_.ast_category_ref_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.ast_colon_tract_ != nullptr);
      _impl_.ast_colon_tract_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.ast_frozen_sticky_bits_ != nullptr);
      _impl_.ast_frozen_sticky_bits_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.ast_category_levels_ != nullptr);
      _impl_.ast_category_levels_->Clear();
    }
  }
  if (cached_has_bits & 0x00f00000u) {
    ::memset(&_impl_.ast_function_node_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ast_date_node_datenum_) -
        reinterpret_cast<char*>(&_impl_.ast_function_node_index_)) + sizeof(_impl_.ast_date_node_datenum_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.ast_duration_node_unitnum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ast_boolean_node_boolean_) -
        reinterpret_cast<char*>(&_impl_.ast_duration_node_unitnum_)) + sizeof(_impl_.ast_boolean_node_boolean_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.ast_date_node_suppress_date_format_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ast_number_node_decimal_high_) -
        reinterpret_cast<char*>(&_impl_.ast_date_node_suppress_date_format_)) + sizeof(_impl_.ast_number_node_decimal_high_));
  }
  if (cached_has_bits & 0x00000300u) {
    _impl_.ast_symbol_ = 0u;
    _impl_.ast_node_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive_ASTNodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::ASTNodeArrayArchive_ASTNodeType_IsValid(val))) {
            _internal_set_ast_node_type(static_cast<::TSCE::ASTNodeArrayArchive_ASTNodeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_function_node_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ast_function_node_index(&_impl_._has_bits_);
          _impl_.ast_function_node_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_function_node_numArgs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ast_function_node_numargs(&_impl_._has_bits_);
          _impl_.ast_function_node_numargs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double AST_number_node_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_ast_number_node_number(&_impl_._has_bits_);
          _impl_.ast_number_node_number_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool AST_boolean_node_boolean = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ast_boolean_node_boolean(&_impl_._has_bits_);
          _impl_.ast_boolean_node_boolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_string_node_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ast_string_node_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double AST_date_node_dateNum = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_ast_date_node_datenum(&_impl_._has_bits_);
          _impl_.ast_date_node_datenum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double AST_duration_node_unitNum = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_ast_duration_node_unitnum(&_impl_._has_bits_);
          _impl_.ast_duration_node_unitnum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 AST_duration_node_unit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_ast_duration_node_unit(&_impl_._has_bits_);
          _impl_.ast_duration_node_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool AST_token_node_boolean = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ast_token_node_boolean(&_impl_._has_bits_);
          _impl_.ast_token_node_boolean_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_array_node_numCol = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_ast_array_node_numcol(&_impl_._has_bits_);
          _impl_.ast_array_node_numcol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_array_node_numRow = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_ast_array_node_numrow(&_impl_._has_bits_);
          _impl_.ast_array_node_numrow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_list_node_numArgs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_ast_list_node_numargs(&_impl_._has_bits_);
          _impl_.ast_list_node_numargs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_thunk_node_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_local_cell_reference_node_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_cross_table_cell_reference_node_reference(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_unknown_function_node_string = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_ast_unknown_function_node_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_unknown_function_node_numArgs = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_ast_unknown_function_node_numargs(&_impl_._has_bits_);
          _impl_.ast_unknown_function_node_numargs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool AST_date_node_suppress_date_format = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _Internal::set_has_ast_date_node_suppress_date_format(&_impl_._has_bits_);
          _impl_.ast_date_node_suppress_date_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool AST_date_node_suppress_time_format = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _Internal::set_has_ast_date_node_suppress_time_format(&_impl_._has_bits_);
          _impl_.ast_date_node_suppress_time_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_date_node_date_time_format = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_ast_date_node_date_time_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_duration_node_style = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_ast_duration_node_style(&_impl_._has_bits_);
          _impl_.ast_duration_node_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_duration_node_duration_unit_largest = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _Internal::set_has_ast_duration_node_duration_unit_largest(&_impl_._has_bits_);
          _impl_.ast_duration_node_duration_unit_largest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_duration_node_duration_unit_smallest = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _Internal::set_has_ast_duration_node_duration_unit_smallest(&_impl_._has_bits_);
          _impl_.ast_duration_node_duration_unit_smallest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_whitespace = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_ast_whitespace();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_column(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_row(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_cross_table_reference_extra_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool AST_duration_node_use_automatic_units = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _Internal::set_has_ast_duration_node_use_automatic_units(&_impl_._has_bits_);
          _impl_.ast_duration_node_use_automatic_units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive AST_uid_coordinate = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_uid_coordinate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_sticky_bits = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_sticky_bits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AST_let_identifier = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ast_let_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_identifier");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive AST_let_e2 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_let_e2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace AST_let_whitespace = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_let_whitespace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AST_symbol = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_ast_symbol(&_impl_._has_bits_);
          _impl_.ast_symbol_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTUidTractList AST_tract_list = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_tract_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive AST_category_ref = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_category_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTColonTractArchive AST_colon_tract = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_colon_tract(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_frozen_sticky_bits = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_frozen_sticky_bits(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 AST_number_node_decimal_low = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_ast_number_node_decimal_low(&_impl_._has_bits_);
          _impl_.ast_number_node_decimal_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 AST_number_node_decimal_high = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_ast_number_node_decimal_high(&_impl_._has_bits_);
          _impl_.ast_number_node_decimal_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTCategoryLevels AST_category_levels = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_category_levels(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive_ASTNodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[1];
  // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ast_node_type(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 AST_function_node_index = 2;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ast_function_node_index(), target);
  }

  // optional uint32 AST_function_node_numArgs = 3;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ast_function_node_numargs(), target);
  }

  // optional double AST_number_node_number = 4;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_ast_number_node_number(), target);
  }

  // optional bool AST_boolean_node_boolean = 5;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_ast_boolean_node_boolean(), target);
  }

  // optional string AST_string_node_string = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_string_node_string().data(), static_cast<int>(this->_internal_ast_string_node_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_string_node_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ast_string_node_string(), target);
  }

  // optional double AST_date_node_dateNum = 7;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_ast_date_node_datenum(), target);
  }

  // optional double AST_duration_node_unitNum = 8;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_ast_duration_node_unitnum(), target);
  }

  // optional int32 AST_duration_node_unit = 9;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_ast_duration_node_unit(), target);
  }

  // optional bool AST_token_node_boolean = 10;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_ast_token_node_boolean(), target);
  }

  // optional uint32 AST_array_node_numCol = 11;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ast_array_node_numcol(), target);
  }

  // optional uint32 AST_array_node_numRow = 12;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_ast_array_node_numrow(), target);
  }

  // optional uint32 AST_list_node_numArgs = 13;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_ast_list_node_numargs(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::ast_thunk_node_array(this),
        _Internal::ast_thunk_node_array(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::ast_local_cell_reference_node_reference(this),
        _Internal::ast_local_cell_reference_node_reference(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::ast_cross_table_cell_reference_node_reference(this),
        _Internal::ast_cross_table_cell_reference_node_reference(this).GetCachedSize(), target, stream);
  }

  // optional string AST_unknown_function_node_string = 17;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_unknown_function_node_string().data(), static_cast<int>(this->_internal_ast_unknown_function_node_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_unknown_function_node_string");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_ast_unknown_function_node_string(), target);
  }

  // optional uint32 AST_unknown_function_node_numArgs = 18;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(18, this->_internal_ast_unknown_function_node_numargs(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool AST_date_node_suppress_date_format = 19;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(19, this->_internal_ast_date_node_suppress_date_format(), target);
  }

  // optional bool AST_date_node_suppress_time_format = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(20, this->_internal_ast_date_node_suppress_time_format(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string AST_date_node_date_time_format = 21;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_date_node_date_time_format().data(), static_cast<int>(this->_internal_ast_date_node_date_time_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_date_node_date_time_format");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_ast_date_node_date_time_format(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 AST_duration_node_style = 22;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(22, this->_internal_ast_duration_node_style(), target);
  }

  // optional uint32 AST_duration_node_duration_unit_largest = 23;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_ast_duration_node_duration_unit_largest(), target);
  }

  // optional uint32 AST_duration_node_duration_unit_smallest = 24;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(24, this->_internal_ast_duration_node_duration_unit_smallest(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string AST_whitespace = 25;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_whitespace().data(), static_cast<int>(this->_internal_ast_whitespace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_whitespace");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_ast_whitespace(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::ast_column(this),
        _Internal::ast_column(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::ast_row(this),
        _Internal::ast_row(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::ast_cross_table_reference_extra_info(this),
        _Internal::ast_cross_table_reference_extra_info(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional bool AST_duration_node_use_automatic_units = 29;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(29, this->_internal_ast_duration_node_use_automatic_units(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive AST_uid_coordinate = 30;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::ast_uid_coordinate(this),
        _Internal::ast_uid_coordinate(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_sticky_bits = 33;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::ast_sticky_bits(this),
        _Internal::ast_sticky_bits(this).GetCachedSize(), target, stream);
  }

  // optional string AST_let_identifier = 34;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ast_let_identifier().data(), static_cast<int>(this->_internal_ast_let_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ASTNodeArrayArchive.ASTNodeArchive.AST_let_identifier");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_ast_let_identifier(), target);
  }

  // optional .TSCE.ASTNodeArrayArchive AST_let_e2 = 35;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::ast_let_e2(this),
        _Internal::ast_let_e2(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace AST_let_whitespace = 36;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::ast_let_whitespace(this),
        _Internal::ast_let_whitespace(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint32 AST_symbol = 37;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(37, this->_internal_ast_symbol(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.ASTNodeArrayArchive.ASTUidTractList AST_tract_list = 38;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::ast_tract_list(this),
        _Internal::ast_tract_list(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive AST_category_ref = 39;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::ast_category_ref(this),
        _Internal::ast_category_ref(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTColonTractArchive AST_colon_tract = 40;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::ast_colon_tract(this),
        _Internal::ast_colon_tract(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_frozen_sticky_bits = 41;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::ast_frozen_sticky_bits(this),
        _Internal::ast_frozen_sticky_bits(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional uint64 AST_number_node_decimal_low = 42;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(42, this->_internal_ast_number_node_decimal_low(), target);
  }

  // optional uint64 AST_number_node_decimal_high = 43;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(43, this->_internal_ast_number_node_decimal_high(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSCE.ASTNodeArrayArchive.ASTCategoryLevels AST_category_levels = 44;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::ast_category_levels(this),
        _Internal::ast_category_levels(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  return target;
}

size_t ASTNodeArrayArchive_ASTNodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  size_t total_size = 0;

  // required .TSCE.ASTNodeArrayArchive.ASTNodeType AST_node_type = 1;
  if (_internal_has_ast_node_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ast_node_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string AST_string_node_string = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_string_node_string());
    }

    // optional string AST_unknown_function_node_string = 17;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_unknown_function_node_string());
    }

    // optional string AST_date_node_date_time_format = 21;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_date_node_date_time_format());
    }

    // optional string AST_whitespace = 25;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_whitespace());
    }

    // optional string AST_let_identifier = 34;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ast_let_identifier());
    }

    // optional .TSCE.ASTNodeArrayArchive AST_thunk_node_array = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_thunk_node_array_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive AST_local_cell_reference_node_reference = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_local_cell_reference_node_reference_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive AST_cross_table_cell_reference_node_reference = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_cross_table_cell_reference_node_reference_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive AST_column = 26;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_column_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive AST_row = 27;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_row_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive AST_cross_table_reference_extra_info = 28;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_cross_table_reference_extra_info_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive AST_uid_coordinate = 30;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_uid_coordinate_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_sticky_bits = 33;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_sticky_bits_);
    }

    // optional .TSCE.ASTNodeArrayArchive AST_let_e2 = 35;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_let_e2_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace AST_let_whitespace = 36;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_let_whitespace_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTUidTractList AST_tract_list = 38;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_tract_list_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive AST_category_ref = 39;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_category_ref_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTColonTractArchive AST_colon_tract = 40;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_colon_tract_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTStickyBits AST_frozen_sticky_bits = 41;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_frozen_sticky_bits_);
    }

    // optional .TSCE.ASTNodeArrayArchive.ASTCategoryLevels AST_category_levels = 44;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ast_category_levels_);
    }

    // optional uint32 AST_function_node_index = 2;
    if (cached_has_bits & 0x00100000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_function_node_index());
    }

    // optional uint32 AST_function_node_numArgs = 3;
    if (cached_has_bits & 0x00200000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_function_node_numargs());
    }

    // optional double AST_number_node_number = 4;
    if (cached_has_bits & 0x00400000u) {
      total_size += 1 + 8;
    }

    // optional double AST_date_node_dateNum = 7;
    if (cached_has_bits & 0x00800000u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional double AST_duration_node_unitNum = 8;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 8;
    }

    // optional int32 AST_duration_node_unit = 9;
    if (cached_has_bits & 0x02000000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ast_duration_node_unit());
    }

    // optional bool AST_token_node_boolean = 10;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 1;
    }

    // optional uint32 AST_array_node_numCol = 11;
    if (cached_has_bits & 0x08000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_array_node_numcol());
    }

    // optional uint32 AST_array_node_numRow = 12;
    if (cached_has_bits & 0x10000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_array_node_numrow());
    }

    // optional uint32 AST_list_node_numArgs = 13;
    if (cached_has_bits & 0x20000000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ast_list_node_numargs());
    }

    // optional uint32 AST_unknown_function_node_numArgs = 18;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ast_unknown_function_node_numargs());
    }

    // optional bool AST_boolean_node_boolean = 5;
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 + 1;
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional bool AST_date_node_suppress_date_format = 19;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 1;
    }

    // optional bool AST_date_node_suppress_time_format = 20;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 1;
    }

    // optional bool AST_duration_node_use_automatic_units = 29;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 1;
    }

    // optional uint32 AST_duration_node_style = 22;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ast_duration_node_style());
    }

    // optional uint32 AST_duration_node_duration_unit_largest = 23;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ast_duration_node_duration_unit_largest());
    }

    // optional uint32 AST_duration_node_duration_unit_smallest = 24;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_ast_duration_node_duration_unit_smallest());
    }

    // optional uint64 AST_number_node_decimal_low = 42;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_ast_number_node_decimal_low());
    }

    // optional uint64 AST_number_node_decimal_high = 43;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt64Size(
          this->_internal_ast_number_node_decimal_high());
    }

  }
  // optional uint32 AST_symbol = 37;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_ast_symbol());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive_ASTNodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive_ASTNodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive_ASTNodeArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive_ASTNodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive_ASTNodeArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive_ASTNodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_ast_string_node_string(from._internal_ast_string_node_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_ast_unknown_function_node_string(from._internal_ast_unknown_function_node_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_ast_date_node_date_time_format(from._internal_ast_date_node_date_time_format());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_ast_whitespace(from._internal_ast_whitespace());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_ast_let_identifier(from._internal_ast_let_identifier());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_ast_thunk_node_array()->::TSCE::ASTNodeArrayArchive::MergeFrom(
          from._internal_ast_thunk_node_array());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_ast_local_cell_reference_node_reference()->::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive::MergeFrom(
          from._internal_ast_local_cell_reference_node_reference());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_ast_cross_table_cell_reference_node_reference()->::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive::MergeFrom(
          from._internal_ast_cross_table_cell_reference_node_reference());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_ast_column()->::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive::MergeFrom(
          from._internal_ast_column());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_ast_row()->::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive::MergeFrom(
          from._internal_ast_row());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_ast_cross_table_reference_extra_info()->::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive::MergeFrom(
          from._internal_ast_cross_table_reference_extra_info());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_ast_uid_coordinate()->::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive::MergeFrom(
          from._internal_ast_uid_coordinate());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_ast_sticky_bits()->::TSCE::ASTNodeArrayArchive_ASTStickyBits::MergeFrom(
          from._internal_ast_sticky_bits());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_ast_let_e2()->::TSCE::ASTNodeArrayArchive::MergeFrom(
          from._internal_ast_let_e2());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_ast_let_whitespace()->::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace::MergeFrom(
          from._internal_ast_let_whitespace());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_ast_tract_list()->::TSCE::ASTNodeArrayArchive_ASTUidTractList::MergeFrom(
          from._internal_ast_tract_list());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_ast_category_ref()->::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive::MergeFrom(
          from._internal_ast_category_ref());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_ast_colon_tract()->::TSCE::ASTNodeArrayArchive_ASTColonTractArchive::MergeFrom(
          from._internal_ast_colon_tract());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_ast_frozen_sticky_bits()->::TSCE::ASTNodeArrayArchive_ASTStickyBits::MergeFrom(
          from._internal_ast_frozen_sticky_bits());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_ast_category_levels()->::TSCE::ASTNodeArrayArchive_ASTCategoryLevels::MergeFrom(
          from._internal_ast_category_levels());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.ast_function_node_index_ = from._impl_.ast_function_node_index_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.ast_function_node_numargs_ = from._impl_.ast_function_node_numargs_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.ast_number_node_number_ = from._impl_.ast_number_node_number_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.ast_date_node_datenum_ = from._impl_.ast_date_node_datenum_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.ast_duration_node_unitnum_ = from._impl_.ast_duration_node_unitnum_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.ast_duration_node_unit_ = from._impl_.ast_duration_node_unit_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.ast_token_node_boolean_ = from._impl_.ast_token_node_boolean_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.ast_array_node_numcol_ = from._impl_.ast_array_node_numcol_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.ast_array_node_numrow_ = from._impl_.ast_array_node_numrow_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.ast_list_node_numargs_ = from._impl_.ast_list_node_numargs_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.ast_unknown_function_node_numargs_ = from._impl_.ast_unknown_function_node_numargs_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.ast_boolean_node_boolean_ = from._impl_.ast_boolean_node_boolean_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.ast_date_node_suppress_date_format_ = from._impl_.ast_date_node_suppress_date_format_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ast_date_node_suppress_time_format_ = from._impl_.ast_date_node_suppress_time_format_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ast_duration_node_use_automatic_units_ = from._impl_.ast_duration_node_use_automatic_units_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ast_duration_node_style_ = from._impl_.ast_duration_node_style_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.ast_duration_node_duration_unit_largest_ = from._impl_.ast_duration_node_duration_unit_largest_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.ast_duration_node_duration_unit_smallest_ = from._impl_.ast_duration_node_duration_unit_smallest_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.ast_number_node_decimal_low_ = from._impl_.ast_number_node_decimal_low_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ast_number_node_decimal_high_ = from._impl_.ast_number_node_decimal_high_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.ast_symbol_ = from._impl_.ast_symbol_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.ast_node_type_ = from._impl_.ast_node_type_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive_ASTNodeArchive::CopyFrom(const ASTNodeArrayArchive_ASTNodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive.ASTNodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive_ASTNodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ast_thunk_node_array()) {
    if (!_impl_.ast_thunk_node_array_->IsInitialized()) return false;
  }
  if (_internal_has_ast_local_cell_reference_node_reference()) {
    if (!_impl_.ast_local_cell_reference_node_reference_->IsInitialized()) return false;
  }
  if (_internal_has_ast_cross_table_cell_reference_node_reference()) {
    if (!_impl_.ast_cross_table_cell_reference_node_reference_->IsInitialized()) return false;
  }
  if (_internal_has_ast_column()) {
    if (!_impl_.ast_column_->IsInitialized()) return false;
  }
  if (_internal_has_ast_row()) {
    if (!_impl_.ast_row_->IsInitialized()) return false;
  }
  if (_internal_has_ast_cross_table_reference_extra_info()) {
    if (!_impl_.ast_cross_table_reference_extra_info_->IsInitialized()) return false;
  }
  if (_internal_has_ast_uid_coordinate()) {
    if (!_impl_.ast_uid_coordinate_->IsInitialized()) return false;
  }
  if (_internal_has_ast_sticky_bits()) {
    if (!_impl_.ast_sticky_bits_->IsInitialized()) return false;
  }
  if (_internal_has_ast_let_e2()) {
    if (!_impl_.ast_let_e2_->IsInitialized()) return false;
  }
  if (_internal_has_ast_tract_list()) {
    if (!_impl_.ast_tract_list_->IsInitialized()) return false;
  }
  if (_internal_has_ast_category_ref()) {
    if (!_impl_.ast_category_ref_->IsInitialized()) return false;
  }
  if (_internal_has_ast_colon_tract()) {
    if (!_impl_.ast_colon_tract_->IsInitialized()) return false;
  }
  if (_internal_has_ast_frozen_sticky_bits()) {
    if (!_impl_.ast_frozen_sticky_bits_->IsInitialized()) return false;
  }
  if (_internal_has_ast_category_levels()) {
    if (!_impl_.ast_category_levels_->IsInitialized()) return false;
  }
  return true;
}

void ASTNodeArrayArchive_ASTNodeArchive::InternalSwap(ASTNodeArrayArchive_ASTNodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_string_node_string_, lhs_arena,
      &other->_impl_.ast_string_node_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_unknown_function_node_string_, lhs_arena,
      &other->_impl_.ast_unknown_function_node_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_date_node_date_time_format_, lhs_arena,
      &other->_impl_.ast_date_node_date_time_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_whitespace_, lhs_arena,
      &other->_impl_.ast_whitespace_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ast_let_identifier_, lhs_arena,
      &other->_impl_.ast_let_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_symbol_)
      + sizeof(ASTNodeArrayArchive_ASTNodeArchive::_impl_.ast_symbol_)
      - PROTOBUF_FIELD_OFFSET(ASTNodeArrayArchive_ASTNodeArchive, _impl_.ast_thunk_node_array_)>(
          reinterpret_cast<char*>(&_impl_.ast_thunk_node_array_),
          reinterpret_cast<char*>(&other->_impl_.ast_thunk_node_array_));
  swap(_impl_.ast_node_type_, other->_impl_.ast_node_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive_ASTNodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[102]);
}

// ===================================================================

class ASTNodeArrayArchive::_Internal {
 public:
};

ASTNodeArrayArchive::ASTNodeArrayArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ASTNodeArrayArchive)
}
ASTNodeArrayArchive::ASTNodeArrayArchive(const ASTNodeArrayArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ASTNodeArrayArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ast_node_){from._impl_.ast_node_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.ASTNodeArrayArchive)
}

inline void ASTNodeArrayArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ast_node_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ASTNodeArrayArchive::~ASTNodeArrayArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ASTNodeArrayArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ASTNodeArrayArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ast_node_.~RepeatedPtrField();
}

void ASTNodeArrayArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ASTNodeArrayArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ASTNodeArrayArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ast_node_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASTNodeArrayArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ast_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ASTNodeArrayArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ASTNodeArrayArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ast_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_ast_node(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ASTNodeArrayArchive)
  return target;
}

size_t ASTNodeArrayArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ASTNodeArrayArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.ASTNodeArrayArchive.ASTNodeArchive AST_node = 1;
  total_size += 1UL * this->_internal_ast_node_size();
  for (const auto& msg : this->_impl_.ast_node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ASTNodeArrayArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ASTNodeArrayArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ASTNodeArrayArchive::GetClassData() const { return &_class_data_; }


void ASTNodeArrayArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ASTNodeArrayArchive*>(&to_msg);
  auto& from = static_cast<const ASTNodeArrayArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ASTNodeArrayArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ast_node_.MergeFrom(from._impl_.ast_node_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ASTNodeArrayArchive::CopyFrom(const ASTNodeArrayArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ASTNodeArrayArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASTNodeArrayArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ast_node_))
    return false;
  return true;
}

void ASTNodeArrayArchive::InternalSwap(ASTNodeArrayArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ast_node_.InternalSwap(&other->_impl_.ast_node_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASTNodeArrayArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[103]);
}

// ===================================================================

class FormulaTranslationFlagsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaTranslationFlagsArchive>()._impl_._has_bits_);
  static void set_has_excel_import_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_to_date_coercion_removal_translation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_contains_uid_form_references(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_contains_frozen_references(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_returns_percent_formatted(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

FormulaTranslationFlagsArchive::FormulaTranslationFlagsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaTranslationFlagsArchive)
}
FormulaTranslationFlagsArchive::FormulaTranslationFlagsArchive(const FormulaTranslationFlagsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaTranslationFlagsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.excel_import_translation_){}
    , decltype(_impl_.number_to_date_coercion_removal_translation_){}
    , decltype(_impl_.contains_uid_form_references_){}
    , decltype(_impl_.contains_frozen_references_){}
    , decltype(_impl_.returns_percent_formatted_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.excel_import_translation_, &from._impl_.excel_import_translation_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.returns_percent_formatted_) -
    reinterpret_cast<char*>(&_impl_.excel_import_translation_)) + sizeof(_impl_.returns_percent_formatted_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaTranslationFlagsArchive)
}

inline void FormulaTranslationFlagsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.excel_import_translation_){false}
    , decltype(_impl_.number_to_date_coercion_removal_translation_){false}
    , decltype(_impl_.contains_uid_form_references_){false}
    , decltype(_impl_.contains_frozen_references_){false}
    , decltype(_impl_.returns_percent_formatted_){false}
  };
}

FormulaTranslationFlagsArchive::~FormulaTranslationFlagsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaTranslationFlagsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaTranslationFlagsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FormulaTranslationFlagsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaTranslationFlagsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaTranslationFlagsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.excel_import_translation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.returns_percent_formatted_) -
        reinterpret_cast<char*>(&_impl_.excel_import_translation_)) + sizeof(_impl_.returns_percent_formatted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaTranslationFlagsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool excel_import_translation = 1 [default = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_excel_import_translation(&has_bits);
          _impl_.excel_import_translation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_number_to_date_coercion_removal_translation(&has_bits);
          _impl_.number_to_date_coercion_removal_translation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool contains_uid_form_references = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_contains_uid_form_references(&has_bits);
          _impl_.contains_uid_form_references_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool contains_frozen_references = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_contains_frozen_references(&has_bits);
          _impl_.contains_frozen_references_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool returns_percent_formatted = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_returns_percent_formatted(&has_bits);
          _impl_.returns_percent_formatted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaTranslationFlagsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaTranslationFlagsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool excel_import_translation = 1 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_excel_import_translation(), target);
  }

  // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_number_to_date_coercion_removal_translation(), target);
  }

  // optional bool contains_uid_form_references = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_contains_uid_form_references(), target);
  }

  // optional bool contains_frozen_references = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_contains_frozen_references(), target);
  }

  // optional bool returns_percent_formatted = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_returns_percent_formatted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaTranslationFlagsArchive)
  return target;
}

size_t FormulaTranslationFlagsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaTranslationFlagsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bool excel_import_translation = 1 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional bool number_to_date_coercion_removal_translation = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool contains_uid_form_references = 3 [default = false];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool contains_frozen_references = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool returns_percent_formatted = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaTranslationFlagsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaTranslationFlagsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaTranslationFlagsArchive::GetClassData() const { return &_class_data_; }


void FormulaTranslationFlagsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaTranslationFlagsArchive*>(&to_msg);
  auto& from = static_cast<const FormulaTranslationFlagsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaTranslationFlagsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.excel_import_translation_ = from._impl_.excel_import_translation_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.number_to_date_coercion_removal_translation_ = from._impl_.number_to_date_coercion_removal_translation_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.contains_uid_form_references_ = from._impl_.contains_uid_form_references_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.contains_frozen_references_ = from._impl_.contains_frozen_references_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.returns_percent_formatted_ = from._impl_.returns_percent_formatted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaTranslationFlagsArchive::CopyFrom(const FormulaTranslationFlagsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaTranslationFlagsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaTranslationFlagsArchive::IsInitialized() const {
  return true;
}

void FormulaTranslationFlagsArchive::InternalSwap(FormulaTranslationFlagsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaTranslationFlagsArchive, _impl_.returns_percent_formatted_)
      + sizeof(FormulaTranslationFlagsArchive::_impl_.returns_percent_formatted_)
      - PROTOBUF_FIELD_OFFSET(FormulaTranslationFlagsArchive, _impl_.excel_import_translation_)>(
          reinterpret_cast<char*>(&_impl_.excel_import_translation_),
          reinterpret_cast<char*>(&other->_impl_.excel_import_translation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaTranslationFlagsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[104]);
}

// ===================================================================

class FormulaArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaArchive>()._impl_._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive& ast_node_array(const FormulaArchive* msg);
  static void set_has_ast_node_array(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_host_column(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_host_row(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_host_column_is_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_host_row_is_negative(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCE::FormulaTranslationFlagsArchive& translation_flags(const FormulaArchive* msg);
  static void set_has_translation_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& host_table_uid(const FormulaArchive* msg);
  static void set_has_host_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& host_column_uid(const FormulaArchive* msg);
  static void set_has_host_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& host_row_uid(const FormulaArchive* msg);
  static void set_has_host_row_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive&
FormulaArchive::_Internal::ast_node_array(const FormulaArchive* msg) {
  return *msg->_impl_.ast_node_array_;
}
const ::TSCE::FormulaTranslationFlagsArchive&
FormulaArchive::_Internal::translation_flags(const FormulaArchive* msg) {
  return *msg->_impl_.translation_flags_;
}
const ::TSP::UUID&
FormulaArchive::_Internal::host_table_uid(const FormulaArchive* msg) {
  return *msg->_impl_.host_table_uid_;
}
const ::TSP::UUID&
FormulaArchive::_Internal::host_column_uid(const FormulaArchive* msg) {
  return *msg->_impl_.host_column_uid_;
}
const ::TSP::UUID&
FormulaArchive::_Internal::host_row_uid(const FormulaArchive* msg) {
  return *msg->_impl_.host_row_uid_;
}
void FormulaArchive::clear_host_table_uid() {
  if (_impl_.host_table_uid_ != nullptr) _impl_.host_table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void FormulaArchive::clear_host_column_uid() {
  if (_impl_.host_column_uid_ != nullptr) _impl_.host_column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void FormulaArchive::clear_host_row_uid() {
  if (_impl_.host_row_uid_ != nullptr) _impl_.host_row_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
FormulaArchive::FormulaArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaArchive)
}
FormulaArchive::FormulaArchive(const FormulaArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_node_array_){nullptr}
    , decltype(_impl_.translation_flags_){nullptr}
    , decltype(_impl_.host_table_uid_){nullptr}
    , decltype(_impl_.host_column_uid_){nullptr}
    , decltype(_impl_.host_row_uid_){nullptr}
    , decltype(_impl_.host_column_){}
    , decltype(_impl_.host_row_){}
    , decltype(_impl_.host_column_is_negative_){}
    , decltype(_impl_.host_row_is_negative_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ast_node_array()) {
    _this->_impl_.ast_node_array_ = new ::TSCE::ASTNodeArrayArchive(*from._impl_.ast_node_array_);
  }
  if (from._internal_has_translation_flags()) {
    _this->_impl_.translation_flags_ = new ::TSCE::FormulaTranslationFlagsArchive(*from._impl_.translation_flags_);
  }
  if (from._internal_has_host_table_uid()) {
    _this->_impl_.host_table_uid_ = new ::TSP::UUID(*from._impl_.host_table_uid_);
  }
  if (from._internal_has_host_column_uid()) {
    _this->_impl_.host_column_uid_ = new ::TSP::UUID(*from._impl_.host_column_uid_);
  }
  if (from._internal_has_host_row_uid()) {
    _this->_impl_.host_row_uid_ = new ::TSP::UUID(*from._impl_.host_row_uid_);
  }
  ::memcpy(&_impl_.host_column_, &from._impl_.host_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.host_row_is_negative_) -
    reinterpret_cast<char*>(&_impl_.host_column_)) + sizeof(_impl_.host_row_is_negative_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaArchive)
}

inline void FormulaArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_node_array_){nullptr}
    , decltype(_impl_.translation_flags_){nullptr}
    , decltype(_impl_.host_table_uid_){nullptr}
    , decltype(_impl_.host_column_uid_){nullptr}
    , decltype(_impl_.host_row_uid_){nullptr}
    , decltype(_impl_.host_column_){0u}
    , decltype(_impl_.host_row_){0u}
    , decltype(_impl_.host_column_is_negative_){false}
    , decltype(_impl_.host_row_is_negative_){false}
  };
}

FormulaArchive::~FormulaArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ast_node_array_;
  if (this != internal_default_instance()) delete _impl_.translation_flags_;
  if (this != internal_default_instance()) delete _impl_.host_table_uid_;
  if (this != internal_default_instance()) delete _impl_.host_column_uid_;
  if (this != internal_default_instance()) delete _impl_.host_row_uid_;
}

void FormulaArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.ast_node_array_ != nullptr);
      _impl_.ast_node_array_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.translation_flags_ != nullptr);
      _impl_.translation_flags_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.host_table_uid_ != nullptr);
      _impl_.host_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.host_column_uid_ != nullptr);
      _impl_.host_column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.host_row_uid_ != nullptr);
      _impl_.host_row_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.host_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.host_column_is_negative_) -
        reinterpret_cast<char*>(&_impl_.host_column_)) + sizeof(_impl_.host_column_is_negative_));
  }
  _impl_.host_row_is_negative_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast_node_array(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 host_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_host_column(&has_bits);
          _impl_.host_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 host_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_host_row(&has_bits);
          _impl_.host_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool host_column_is_negative = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_host_column_is_negative(&has_bits);
          _impl_.host_column_is_negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool host_row_is_negative = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_host_row_is_negative(&has_bits);
          _impl_.host_row_is_negative_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_translation_flags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID host_table_uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID host_column_uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID host_row_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_row_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ast_node_array(this),
        _Internal::ast_node_array(this).GetCachedSize(), target, stream);
  }

  // optional uint32 host_column = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_host_column(), target);
  }

  // optional uint32 host_row = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_host_row(), target);
  }

  // optional bool host_column_is_negative = 4 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_host_column_is_negative(), target);
  }

  // optional bool host_row_is_negative = 5 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_host_row_is_negative(), target);
  }

  // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::translation_flags(this),
        _Internal::translation_flags(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID host_table_uid = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::host_table_uid(this),
        _Internal::host_table_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID host_column_uid = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::host_column_uid(this),
        _Internal::host_column_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID host_row_uid = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::host_row_uid(this),
        _Internal::host_row_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaArchive)
  return target;
}

size_t FormulaArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaArchive)
  size_t total_size = 0;

  // required .TSCE.ASTNodeArrayArchive AST_node_array = 1;
  if (_internal_has_ast_node_array()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ast_node_array_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSCE.FormulaTranslationFlagsArchive translation_flags = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.translation_flags_);
    }

    // optional .TSP.UUID host_table_uid = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.host_table_uid_);
    }

    // optional .TSP.UUID host_column_uid = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.host_column_uid_);
    }

    // optional .TSP.UUID host_row_uid = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.host_row_uid_);
    }

    // optional uint32 host_column = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_host_column());
    }

    // optional uint32 host_row = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_host_row());
    }

    // optional bool host_column_is_negative = 4 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool host_row_is_negative = 5 [default = false];
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaArchive::GetClassData() const { return &_class_data_; }


void FormulaArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaArchive*>(&to_msg);
  auto& from = static_cast<const FormulaArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ast_node_array()->::TSCE::ASTNodeArrayArchive::MergeFrom(
          from._internal_ast_node_array());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_translation_flags()->::TSCE::FormulaTranslationFlagsArchive::MergeFrom(
          from._internal_translation_flags());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_host_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_host_table_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_host_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_host_column_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_host_row_uid()->::TSP::UUID::MergeFrom(
          from._internal_host_row_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.host_column_ = from._impl_.host_column_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.host_row_ = from._impl_.host_row_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.host_column_is_negative_ = from._impl_.host_column_is_negative_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_host_row_is_negative(from._internal_host_row_is_negative());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaArchive::CopyFrom(const FormulaArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ast_node_array()) {
    if (!_impl_.ast_node_array_->IsInitialized()) return false;
  }
  if (_internal_has_host_table_uid()) {
    if (!_impl_.host_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_host_column_uid()) {
    if (!_impl_.host_column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_host_row_uid()) {
    if (!_impl_.host_row_uid_->IsInitialized()) return false;
  }
  return true;
}

void FormulaArchive::InternalSwap(FormulaArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaArchive, _impl_.host_row_is_negative_)
      + sizeof(FormulaArchive::_impl_.host_row_is_negative_)
      - PROTOBUF_FIELD_OFFSET(FormulaArchive, _impl_.ast_node_array_)>(
          reinterpret_cast<char*>(&_impl_.ast_node_array_),
          reinterpret_cast<char*>(&other->_impl_.ast_node_array_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[105]);
}

// ===================================================================

class FunctorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctorArchive>()._impl_._has_bits_);
  static const ::TSCE::FormulaArchive& formula(const FunctorArchive* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_args(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::FormulaArchive&
FunctorArchive::_Internal::formula(const FunctorArchive* msg) {
  return *msg->_impl_.formula_;
}
FunctorArchive::FunctorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FunctorArchive)
}
FunctorArchive::FunctorArchive(const FunctorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FunctorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.num_args_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula()) {
    _this->_impl_.formula_ = new ::TSCE::FormulaArchive(*from._impl_.formula_);
  }
  _this->_impl_.num_args_ = from._impl_.num_args_;
  // @@protoc_insertion_point(copy_constructor:TSCE.FunctorArchive)
}

inline void FunctorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.num_args_){0u}
  };
}

FunctorArchive::~FunctorArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FunctorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FunctorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.formula_;
}

void FunctorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FunctorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FunctorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.formula_ != nullptr);
    _impl_.formula_->Clear();
  }
  _impl_.num_args_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.FormulaArchive formula = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 num_args = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_num_args(&has_bits);
          _impl_.num_args_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FunctorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.FormulaArchive formula = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::formula(this),
        _Internal::formula(this).GetCachedSize(), target, stream);
  }

  // required uint32 num_args = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FunctorArchive)
  return target;
}

size_t FunctorArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.FunctorArchive)
  size_t total_size = 0;

  if (_internal_has_formula()) {
    // required .TSCE.FormulaArchive formula = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_);
  }

  if (_internal_has_num_args()) {
    // required uint32 num_args = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_args());
  }

  return total_size;
}
size_t FunctorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FunctorArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.FormulaArchive formula = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_);

    // required uint32 num_args = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_num_args());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FunctorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctorArchive::GetClassData() const { return &_class_data_; }


void FunctorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FunctorArchive*>(&to_msg);
  auto& from = static_cast<const FunctorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FunctorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(
          from._internal_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.num_args_ = from._impl_.num_args_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctorArchive::CopyFrom(const FunctorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FunctorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_formula()) {
    if (!_impl_.formula_->IsInitialized()) return false;
  }
  return true;
}

void FunctorArchive::InternalSwap(FunctorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctorArchive, _impl_.num_args_)
      + sizeof(FunctorArchive::_impl_.num_args_)
      - PROTOBUF_FIELD_OFFSET(FunctorArchive, _impl_.formula_)>(
          reinterpret_cast<char*>(&_impl_.formula_),
          reinterpret_cast<char*>(&other->_impl_.formula_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[106]);
}

// ===================================================================

class FormatStructArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormatStructArchive>()._impl_._has_bits_);
  static void set_has_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_decimal_places(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negative_style(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_show_thousands_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_use_accounting_style(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_duration_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_base_places(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_base_use_minus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_fraction_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_suppress_date_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_suppress_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_date_time_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_duration_unit_largest(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_duration_unit_smallest(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

FormatStructArchive::FormatStructArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormatStructArchive)
}
FormatStructArchive::FormatStructArchive(const FormatStructArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormatStructArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.date_time_format_){}
    , decltype(_impl_.format_type_){}
    , decltype(_impl_.decimal_places_){}
    , decltype(_impl_.negative_style_){}
    , decltype(_impl_.duration_style_){}
    , decltype(_impl_.base_){}
    , decltype(_impl_.show_thousands_separator_){}
    , decltype(_impl_.use_accounting_style_){}
    , decltype(_impl_.base_use_minus_sign_){}
    , decltype(_impl_.suppress_date_format_){}
    , decltype(_impl_.base_places_){}
    , decltype(_impl_.fraction_accuracy_){}
    , decltype(_impl_.suppress_time_format_){}
    , decltype(_impl_.duration_unit_largest_){}
    , decltype(_impl_.duration_unit_smallest_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_code()) {
    _this->_impl_.currency_code_.Set(from._internal_currency_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.date_time_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_time_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_date_time_format()) {
    _this->_impl_.date_time_format_.Set(from._internal_date_time_format(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.format_type_, &from._impl_.format_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_unit_smallest_) -
    reinterpret_cast<char*>(&_impl_.format_type_)) + sizeof(_impl_.duration_unit_smallest_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormatStructArchive)
}

inline void FormatStructArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.date_time_format_){}
    , decltype(_impl_.format_type_){0u}
    , decltype(_impl_.decimal_places_){0u}
    , decltype(_impl_.negative_style_){0u}
    , decltype(_impl_.duration_style_){0u}
    , decltype(_impl_.base_){0u}
    , decltype(_impl_.show_thousands_separator_){false}
    , decltype(_impl_.use_accounting_style_){false}
    , decltype(_impl_.base_use_minus_sign_){false}
    , decltype(_impl_.suppress_date_format_){false}
    , decltype(_impl_.base_places_){0u}
    , decltype(_impl_.fraction_accuracy_){0u}
    , decltype(_impl_.suppress_time_format_){false}
    , decltype(_impl_.duration_unit_largest_){0u}
    , decltype(_impl_.duration_unit_smallest_){0u}
  };
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.date_time_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_time_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FormatStructArchive::~FormatStructArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormatStructArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormatStructArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currency_code_.Destroy();
  _impl_.date_time_format_.Destroy();
}

void FormatStructArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormatStructArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormatStructArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.date_time_format_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.format_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.show_thousands_separator_) -
        reinterpret_cast<char*>(&_impl_.format_type_)) + sizeof(_impl_.show_thousands_separator_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.use_accounting_style_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.duration_unit_smallest_) -
        reinterpret_cast<char*>(&_impl_.use_accounting_style_)) + sizeof(_impl_.duration_unit_smallest_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormatStructArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 format_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_format_type(&has_bits);
          _impl_.format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 decimal_places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_decimal_places(&has_bits);
          _impl_.decimal_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.FormatStructArchive.currency_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 negative_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_negative_style(&has_bits);
          _impl_.negative_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool show_thousands_separator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_show_thousands_separator(&has_bits);
          _impl_.show_thousands_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_accounting_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_use_accounting_style(&has_bits);
          _impl_.use_accounting_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_duration_style(&has_bits);
          _impl_.duration_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_base(&has_bits);
          _impl_.base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 base_places = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_base_places(&has_bits);
          _impl_.base_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool base_use_minus_sign = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_base_use_minus_sign(&has_bits);
          _impl_.base_use_minus_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 fraction_accuracy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_fraction_accuracy(&has_bits);
          _impl_.fraction_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool suppress_date_format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_suppress_date_format(&has_bits);
          _impl_.suppress_date_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool suppress_time_format = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_suppress_time_format(&has_bits);
          _impl_.suppress_time_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string date_time_format = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_date_time_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.FormatStructArchive.date_time_format");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_unit_largest = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_duration_unit_largest(&has_bits);
          _impl_.duration_unit_largest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_unit_smallest = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_duration_unit_smallest(&has_bits);
          _impl_.duration_unit_smallest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormatStructArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormatStructArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 format_type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_format_type(), target);
  }

  // optional uint32 decimal_places = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_decimal_places(), target);
  }

  // optional string currency_code = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.FormatStructArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_currency_code(), target);
  }

  // optional uint32 negative_style = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_negative_style(), target);
  }

  // optional bool show_thousands_separator = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_show_thousands_separator(), target);
  }

  // optional bool use_accounting_style = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_use_accounting_style(), target);
  }

  // optional uint32 duration_style = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_duration_style(), target);
  }

  // optional uint32 base = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_base(), target);
  }

  // optional uint32 base_places = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_base_places(), target);
  }

  // optional bool base_use_minus_sign = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_base_use_minus_sign(), target);
  }

  // optional uint32 fraction_accuracy = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_fraction_accuracy(), target);
  }

  // optional bool suppress_date_format = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_suppress_date_format(), target);
  }

  // optional bool suppress_time_format = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_suppress_time_format(), target);
  }

  // optional string date_time_format = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date_time_format().data(), static_cast<int>(this->_internal_date_time_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.FormatStructArchive.date_time_format");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_date_time_format(), target);
  }

  // optional uint32 duration_unit_largest = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(15, this->_internal_duration_unit_largest(), target);
  }

  // optional uint32 duration_unit_smallest = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(16, this->_internal_duration_unit_smallest(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormatStructArchive)
  return target;
}

size_t FormatStructArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormatStructArchive)
  size_t total_size = 0;

  // required uint32 format_type = 1;
  if (_internal_has_format_type()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_format_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string currency_code = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_currency_code());
    }

    // optional string date_time_format = 14;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date_time_format());
    }

  }
  if (cached_has_bits & 0x000000f8u) {
    // optional uint32 decimal_places = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_decimal_places());
    }

    // optional uint32 negative_style = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_negative_style());
    }

    // optional uint32 duration_style = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_style());
    }

    // optional uint32 base = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base());
    }

    // optional bool show_thousands_separator = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool use_accounting_style = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 1;
    }

    // optional bool base_use_minus_sign = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool suppress_date_format = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 base_places = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_places());
    }

    // optional uint32 fraction_accuracy = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fraction_accuracy());
    }

    // optional bool suppress_time_format = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional uint32 duration_unit_largest = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_unit_largest());
    }

    // optional uint32 duration_unit_smallest = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::UInt32Size(
          this->_internal_duration_unit_smallest());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormatStructArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormatStructArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormatStructArchive::GetClassData() const { return &_class_data_; }


void FormatStructArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormatStructArchive*>(&to_msg);
  auto& from = static_cast<const FormatStructArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormatStructArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_date_time_format(from._internal_date_time_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.format_type_ = from._impl_.format_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.decimal_places_ = from._impl_.decimal_places_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.negative_style_ = from._impl_.negative_style_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.duration_style_ = from._impl_.duration_style_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.base_ = from._impl_.base_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.show_thousands_separator_ = from._impl_.show_thousands_separator_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.use_accounting_style_ = from._impl_.use_accounting_style_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.base_use_minus_sign_ = from._impl_.base_use_minus_sign_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.suppress_date_format_ = from._impl_.suppress_date_format_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.base_places_ = from._impl_.base_places_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.fraction_accuracy_ = from._impl_.fraction_accuracy_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.suppress_time_format_ = from._impl_.suppress_time_format_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.duration_unit_largest_ = from._impl_.duration_unit_largest_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.duration_unit_smallest_ = from._impl_.duration_unit_smallest_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormatStructArchive::CopyFrom(const FormatStructArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormatStructArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormatStructArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void FormatStructArchive::InternalSwap(FormatStructArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_code_, lhs_arena,
      &other->_impl_.currency_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_time_format_, lhs_arena,
      &other->_impl_.date_time_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormatStructArchive, _impl_.duration_unit_smallest_)
      + sizeof(FormatStructArchive::_impl_.duration_unit_smallest_)
      - PROTOBUF_FIELD_OFFSET(FormatStructArchive, _impl_.format_type_)>(
          reinterpret_cast<char*>(&_impl_.format_type_),
          reinterpret_cast<char*>(&other->_impl_.format_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormatStructArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[107]);
}

// ===================================================================

class RangeCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RangeCoordinateArchive>()._impl_._has_bits_);
  static void set_has_top_left_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_top_left_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bottom_right_column(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottom_right_row(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

RangeCoordinateArchive::RangeCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RangeCoordinateArchive)
}
RangeCoordinateArchive::RangeCoordinateArchive(const RangeCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RangeCoordinateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_left_column_){}
    , decltype(_impl_.top_left_row_){}
    , decltype(_impl_.bottom_right_column_){}
    , decltype(_impl_.bottom_right_row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.top_left_column_, &from._impl_.top_left_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bottom_right_row_) -
    reinterpret_cast<char*>(&_impl_.top_left_column_)) + sizeof(_impl_.bottom_right_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RangeCoordinateArchive)
}

inline void RangeCoordinateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.top_left_column_){0u}
    , decltype(_impl_.top_left_row_){0u}
    , decltype(_impl_.bottom_right_column_){0u}
    , decltype(_impl_.bottom_right_row_){0u}
  };
}

RangeCoordinateArchive::~RangeCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RangeCoordinateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RangeCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RangeCoordinateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RangeCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RangeCoordinateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.top_left_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.bottom_right_row_) -
        reinterpret_cast<char*>(&_impl_.top_left_column_)) + sizeof(_impl_.bottom_right_row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RangeCoordinateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 top_left_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_top_left_column(&has_bits);
          _impl_.top_left_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 top_left_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_top_left_row(&has_bits);
          _impl_.top_left_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 bottom_right_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_bottom_right_column(&has_bits);
          _impl_.bottom_right_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 bottom_right_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bottom_right_row(&has_bits);
          _impl_.bottom_right_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RangeCoordinateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RangeCoordinateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 top_left_column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_top_left_column(), target);
  }

  // required uint32 top_left_row = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_top_left_row(), target);
  }

  // required uint32 bottom_right_column = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bottom_right_column(), target);
  }

  // required uint32 bottom_right_row = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_bottom_right_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RangeCoordinateArchive)
  return target;
}

size_t RangeCoordinateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RangeCoordinateArchive)
  size_t total_size = 0;

  if (_internal_has_top_left_column()) {
    // required uint32 top_left_column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_column());
  }

  if (_internal_has_top_left_row()) {
    // required uint32 top_left_row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_row());
  }

  if (_internal_has_bottom_right_column()) {
    // required uint32 bottom_right_column = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_column());
  }

  if (_internal_has_bottom_right_row()) {
    // required uint32 bottom_right_row = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_row());
  }

  return total_size;
}
size_t RangeCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RangeCoordinateArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 top_left_column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_column());

    // required uint32 top_left_row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_top_left_row());

    // required uint32 bottom_right_column = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_column());

    // required uint32 bottom_right_row = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bottom_right_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RangeCoordinateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RangeCoordinateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RangeCoordinateArchive::GetClassData() const { return &_class_data_; }


void RangeCoordinateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RangeCoordinateArchive*>(&to_msg);
  auto& from = static_cast<const RangeCoordinateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RangeCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.top_left_column_ = from._impl_.top_left_column_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.top_left_row_ = from._impl_.top_left_row_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.bottom_right_column_ = from._impl_.bottom_right_column_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bottom_right_row_ = from._impl_.bottom_right_row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RangeCoordinateArchive::CopyFrom(const RangeCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RangeCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeCoordinateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void RangeCoordinateArchive::InternalSwap(RangeCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RangeCoordinateArchive, _impl_.bottom_right_row_)
      + sizeof(RangeCoordinateArchive::_impl_.bottom_right_row_)
      - PROTOBUF_FIELD_OFFSET(RangeCoordinateArchive, _impl_.top_left_column_)>(
          reinterpret_cast<char*>(&_impl_.top_left_column_),
          reinterpret_cast<char*>(&other->_impl_.top_left_column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RangeCoordinateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[108]);
}

// ===================================================================

class TableTransposeInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableTransposeInfoArchive>()._impl_._has_bits_);
  static void set_has_number_of_footer_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RangeCoordinateArchive& body_range_for_transposed_table(const TableTransposeInfoArchive* msg);
  static void set_has_body_range_for_transposed_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::RangeCoordinateArchive&
TableTransposeInfoArchive::_Internal::body_range_for_transposed_table(const TableTransposeInfoArchive* msg) {
  return *msg->_impl_.body_range_for_transposed_table_;
}
TableTransposeInfoArchive::TableTransposeInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.TableTransposeInfoArchive)
}
TableTransposeInfoArchive::TableTransposeInfoArchive(const TableTransposeInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableTransposeInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_range_for_transposed_table_){nullptr}
    , decltype(_impl_.number_of_footer_rows_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_body_range_for_transposed_table()) {
    _this->_impl_.body_range_for_transposed_table_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.body_range_for_transposed_table_);
  }
  _this->_impl_.number_of_footer_rows_ = from._impl_.number_of_footer_rows_;
  // @@protoc_insertion_point(copy_constructor:TSCE.TableTransposeInfoArchive)
}

inline void TableTransposeInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_range_for_transposed_table_){nullptr}
    , decltype(_impl_.number_of_footer_rows_){0u}
  };
}

TableTransposeInfoArchive::~TableTransposeInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.TableTransposeInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableTransposeInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.body_range_for_transposed_table_;
}

void TableTransposeInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableTransposeInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.TableTransposeInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.body_range_for_transposed_table_ != nullptr);
    _impl_.body_range_for_transposed_table_->Clear();
  }
  _impl_.number_of_footer_rows_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableTransposeInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 number_of_footer_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_number_of_footer_rows(&has_bits);
          _impl_.number_of_footer_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.RangeCoordinateArchive body_range_for_transposed_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_range_for_transposed_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableTransposeInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.TableTransposeInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 number_of_footer_rows = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_of_footer_rows(), target);
  }

  // required .TSCE.RangeCoordinateArchive body_range_for_transposed_table = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::body_range_for_transposed_table(this),
        _Internal::body_range_for_transposed_table(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.TableTransposeInfoArchive)
  return target;
}

size_t TableTransposeInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.TableTransposeInfoArchive)
  size_t total_size = 0;

  if (_internal_has_body_range_for_transposed_table()) {
    // required .TSCE.RangeCoordinateArchive body_range_for_transposed_table = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_range_for_transposed_table_);
  }

  if (_internal_has_number_of_footer_rows()) {
    // required uint32 number_of_footer_rows = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_footer_rows());
  }

  return total_size;
}
size_t TableTransposeInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.TableTransposeInfoArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.RangeCoordinateArchive body_range_for_transposed_table = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.body_range_for_transposed_table_);

    // required uint32 number_of_footer_rows = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_footer_rows());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableTransposeInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableTransposeInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableTransposeInfoArchive::GetClassData() const { return &_class_data_; }


void TableTransposeInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableTransposeInfoArchive*>(&to_msg);
  auto& from = static_cast<const TableTransposeInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.TableTransposeInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_body_range_for_transposed_table()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_body_range_for_transposed_table());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.number_of_footer_rows_ = from._impl_.number_of_footer_rows_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableTransposeInfoArchive::CopyFrom(const TableTransposeInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.TableTransposeInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableTransposeInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_body_range_for_transposed_table()) {
    if (!_impl_.body_range_for_transposed_table_->IsInitialized()) return false;
  }
  return true;
}

void TableTransposeInfoArchive::InternalSwap(TableTransposeInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableTransposeInfoArchive, _impl_.number_of_footer_rows_)
      + sizeof(TableTransposeInfoArchive::_impl_.number_of_footer_rows_)
      - PROTOBUF_FIELD_OFFSET(TableTransposeInfoArchive, _impl_.body_range_for_transposed_table_)>(
          reinterpret_cast<char*>(&_impl_.body_range_for_transposed_table_),
          reinterpret_cast<char*>(&other->_impl_.body_range_for_transposed_table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableTransposeInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[109]);
}

// ===================================================================

class MergeOriginMovedArchive::_Internal {
 public:
};

MergeOriginMovedArchive::MergeOriginMovedArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.MergeOriginMovedArchive)
}
MergeOriginMovedArchive::MergeOriginMovedArchive(const MergeOriginMovedArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MergeOriginMovedArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.src_column_){from._impl_.src_column_}
    , decltype(_impl_.src_row_){from._impl_.src_row_}
    , decltype(_impl_.dst_column_){from._impl_.dst_column_}
    , decltype(_impl_.dst_row_){from._impl_.dst_row_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.MergeOriginMovedArchive)
}

inline void MergeOriginMovedArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.src_column_){arena}
    , decltype(_impl_.src_row_){arena}
    , decltype(_impl_.dst_column_){arena}
    , decltype(_impl_.dst_row_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MergeOriginMovedArchive::~MergeOriginMovedArchive() {
  // @@protoc_insertion_point(destructor:TSCE.MergeOriginMovedArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MergeOriginMovedArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.src_column_.~RepeatedField();
  _impl_.src_row_.~RepeatedField();
  _impl_.dst_column_.~RepeatedField();
  _impl_.dst_row_.~RepeatedField();
}

void MergeOriginMovedArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MergeOriginMovedArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.MergeOriginMovedArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_column_.Clear();
  _impl_.src_row_.Clear();
  _impl_.dst_column_.Clear();
  _impl_.dst_row_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeOriginMovedArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 src_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_src_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_src_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 src_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_src_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_src_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 dst_column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dst_column(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dst_column(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 dst_row = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_dst_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dst_row(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MergeOriginMovedArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.MergeOriginMovedArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 src_column = 1;
  for (int i = 0, n = this->_internal_src_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_src_column(i), target);
  }

  // repeated uint32 src_row = 2;
  for (int i = 0, n = this->_internal_src_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_src_row(i), target);
  }

  // repeated uint32 dst_column = 3;
  for (int i = 0, n = this->_internal_dst_column_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dst_column(i), target);
  }

  // repeated uint32 dst_row = 4;
  for (int i = 0, n = this->_internal_dst_row_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dst_row(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.MergeOriginMovedArchive)
  return target;
}

size_t MergeOriginMovedArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.MergeOriginMovedArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 src_column = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.src_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_src_column_size());
    total_size += data_size;
  }

  // repeated uint32 src_row = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.src_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_src_row_size());
    total_size += data_size;
  }

  // repeated uint32 dst_column = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.dst_column_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dst_column_size());
    total_size += data_size;
  }

  // repeated uint32 dst_row = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.dst_row_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_dst_row_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeOriginMovedArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MergeOriginMovedArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeOriginMovedArchive::GetClassData() const { return &_class_data_; }


void MergeOriginMovedArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MergeOriginMovedArchive*>(&to_msg);
  auto& from = static_cast<const MergeOriginMovedArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.MergeOriginMovedArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.src_column_.MergeFrom(from._impl_.src_column_);
  _this->_impl_.src_row_.MergeFrom(from._impl_.src_row_);
  _this->_impl_.dst_column_.MergeFrom(from._impl_.dst_column_);
  _this->_impl_.dst_row_.MergeFrom(from._impl_.dst_row_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeOriginMovedArchive::CopyFrom(const MergeOriginMovedArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.MergeOriginMovedArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeOriginMovedArchive::IsInitialized() const {
  return true;
}

void MergeOriginMovedArchive::InternalSwap(MergeOriginMovedArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.src_column_.InternalSwap(&other->_impl_.src_column_);
  _impl_.src_row_.InternalSwap(&other->_impl_.src_row_);
  _impl_.dst_column_.InternalSwap(&other->_impl_.dst_column_);
  _impl_.dst_row_.InternalSwap(&other->_impl_.dst_row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeOriginMovedArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[110]);
}

// ===================================================================

class OwnerUIDMapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<OwnerUIDMapperArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& table_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& next_table_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& hidden_state_for_rows_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_hidden_state_for_rows_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& next_hidden_state_for_rows_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_hidden_state_for_rows_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& hidden_state_for_columns_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_hidden_state_for_columns_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::UUID& next_hidden_state_for_columns_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_hidden_state_for_columns_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& conditional_style_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_conditional_style_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUID& next_conditional_style_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_conditional_style_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::UUID& sort_rule_reference_tracker_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_sort_rule_reference_tracker_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& next_sort_rule_reference_tracker_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_sort_rule_reference_tracker_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::UUID& merge_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_merge_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::UUID& next_merge_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_merge_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::UUID& category_aggregates_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_category_aggregates_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::UUID& next_category_aggregates_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_category_aggregates_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::UUID& group_by_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::UUID& next_group_by_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::UUID& pencil_annotation_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_pencil_annotation_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::UUID& next_pencil_annotation_owner_uid(const OwnerUIDMapperArchive* msg);
  static void set_has_next_pencil_annotation_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0003ffff) ^ 0x0003ffff) != 0;
  }
};

const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::table_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.table_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_table_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.next_table_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::hidden_state_for_rows_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.hidden_state_for_rows_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_hidden_state_for_rows_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.next_hidden_state_for_rows_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::hidden_state_for_columns_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.hidden_state_for_columns_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_hidden_state_for_columns_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.next_hidden_state_for_columns_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::conditional_style_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.conditional_style_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_conditional_style_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.next_conditional_style_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::sort_rule_reference_tracker_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.sort_rule_reference_tracker_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_sort_rule_reference_tracker_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.next_sort_rule_reference_tracker_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::merge_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.merge_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_merge_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.next_merge_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::category_aggregates_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.category_aggregates_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_category_aggregates_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.next_category_aggregates_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::group_by_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.group_by_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_group_by_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.next_group_by_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::pencil_annotation_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.pencil_annotation_owner_uid_;
}
const ::TSP::UUID&
OwnerUIDMapperArchive::_Internal::next_pencil_annotation_owner_uid(const OwnerUIDMapperArchive* msg) {
  return *msg->_impl_.next_pencil_annotation_owner_uid_;
}
void OwnerUIDMapperArchive::clear_table_uid() {
  if (_impl_.table_uid_ != nullptr) _impl_.table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void OwnerUIDMapperArchive::clear_next_table_uid() {
  if (_impl_.next_table_uid_ != nullptr) _impl_.next_table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void OwnerUIDMapperArchive::clear_hidden_state_for_rows_owner_uid() {
  if (_impl_.hidden_state_for_rows_owner_uid_ != nullptr) _impl_.hidden_state_for_rows_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void OwnerUIDMapperArchive::clear_next_hidden_state_for_rows_owner_uid() {
  if (_impl_.next_hidden_state_for_rows_owner_uid_ != nullptr) _impl_.next_hidden_state_for_rows_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void OwnerUIDMapperArchive::clear_hidden_state_for_columns_owner_uid() {
  if (_impl_.hidden_state_for_columns_owner_uid_ != nullptr) _impl_.hidden_state_for_columns_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void OwnerUIDMapperArchive::clear_next_hidden_state_for_columns_owner_uid() {
  if (_impl_.next_hidden_state_for_columns_owner_uid_ != nullptr) _impl_.next_hidden_state_for_columns_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void OwnerUIDMapperArchive::clear_conditional_style_owner_uid() {
  if (_impl_.conditional_style_owner_uid_ != nullptr) _impl_.conditional_style_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void OwnerUIDMapperArchive::clear_next_conditional_style_owner_uid() {
  if (_impl_.next_conditional_style_owner_uid_ != nullptr) _impl_.next_conditional_style_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void OwnerUIDMapperArchive::clear_sort_rule_reference_tracker_owner_uid() {
  if (_impl_.sort_rule_reference_tracker_owner_uid_ != nullptr) _impl_.sort_rule_reference_tracker_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void OwnerUIDMapperArchive::clear_next_sort_rule_reference_tracker_owner_uid() {
  if (_impl_.next_sort_rule_reference_tracker_owner_uid_ != nullptr) _impl_.next_sort_rule_reference_tracker_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void OwnerUIDMapperArchive::clear_merge_owner_uid() {
  if (_impl_.merge_owner_uid_ != nullptr) _impl_.merge_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void OwnerUIDMapperArchive::clear_next_merge_owner_uid() {
  if (_impl_.next_merge_owner_uid_ != nullptr) _impl_.next_merge_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void OwnerUIDMapperArchive::clear_category_aggregates_owner_uid() {
  if (_impl_.category_aggregates_owner_uid_ != nullptr) _impl_.category_aggregates_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void OwnerUIDMapperArchive::clear_next_category_aggregates_owner_uid() {
  if (_impl_.next_category_aggregates_owner_uid_ != nullptr) _impl_.next_category_aggregates_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void OwnerUIDMapperArchive::clear_group_by_uid() {
  if (_impl_.group_by_uid_ != nullptr) _impl_.group_by_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void OwnerUIDMapperArchive::clear_next_group_by_uid() {
  if (_impl_.next_group_by_uid_ != nullptr) _impl_.next_group_by_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void OwnerUIDMapperArchive::clear_pencil_annotation_owner_uid() {
  if (_impl_.pencil_annotation_owner_uid_ != nullptr) _impl_.pencil_annotation_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void OwnerUIDMapperArchive::clear_next_pencil_annotation_owner_uid() {
  if (_impl_.next_pencil_annotation_owner_uid_ != nullptr) _impl_.next_pencil_annotation_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
OwnerUIDMapperArchive::OwnerUIDMapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.OwnerUIDMapperArchive)
}
OwnerUIDMapperArchive::OwnerUIDMapperArchive(const OwnerUIDMapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OwnerUIDMapperArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.next_table_uid_){nullptr}
    , decltype(_impl_.hidden_state_for_rows_owner_uid_){nullptr}
    , decltype(_impl_.next_hidden_state_for_rows_owner_uid_){nullptr}
    , decltype(_impl_.hidden_state_for_columns_owner_uid_){nullptr}
    , decltype(_impl_.next_hidden_state_for_columns_owner_uid_){nullptr}
    , decltype(_impl_.conditional_style_owner_uid_){nullptr}
    , decltype(_impl_.next_conditional_style_owner_uid_){nullptr}
    , decltype(_impl_.sort_rule_reference_tracker_owner_uid_){nullptr}
    , decltype(_impl_.next_sort_rule_reference_tracker_owner_uid_){nullptr}
    , decltype(_impl_.merge_owner_uid_){nullptr}
    , decltype(_impl_.next_merge_owner_uid_){nullptr}
    , decltype(_impl_.category_aggregates_owner_uid_){nullptr}
    , decltype(_impl_.next_category_aggregates_owner_uid_){nullptr}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.next_group_by_uid_){nullptr}
    , decltype(_impl_.pencil_annotation_owner_uid_){nullptr}
    , decltype(_impl_.next_pencil_annotation_owner_uid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    _this->_impl_.table_uid_ = new ::TSP::UUID(*from._impl_.table_uid_);
  }
  if (from._internal_has_next_table_uid()) {
    _this->_impl_.next_table_uid_ = new ::TSP::UUID(*from._impl_.next_table_uid_);
  }
  if (from._internal_has_hidden_state_for_rows_owner_uid()) {
    _this->_impl_.hidden_state_for_rows_owner_uid_ = new ::TSP::UUID(*from._impl_.hidden_state_for_rows_owner_uid_);
  }
  if (from._internal_has_next_hidden_state_for_rows_owner_uid()) {
    _this->_impl_.next_hidden_state_for_rows_owner_uid_ = new ::TSP::UUID(*from._impl_.next_hidden_state_for_rows_owner_uid_);
  }
  if (from._internal_has_hidden_state_for_columns_owner_uid()) {
    _this->_impl_.hidden_state_for_columns_owner_uid_ = new ::TSP::UUID(*from._impl_.hidden_state_for_columns_owner_uid_);
  }
  if (from._internal_has_next_hidden_state_for_columns_owner_uid()) {
    _this->_impl_.next_hidden_state_for_columns_owner_uid_ = new ::TSP::UUID(*from._impl_.next_hidden_state_for_columns_owner_uid_);
  }
  if (from._internal_has_conditional_style_owner_uid()) {
    _this->_impl_.conditional_style_owner_uid_ = new ::TSP::UUID(*from._impl_.conditional_style_owner_uid_);
  }
  if (from._internal_has_next_conditional_style_owner_uid()) {
    _this->_impl_.next_conditional_style_owner_uid_ = new ::TSP::UUID(*from._impl_.next_conditional_style_owner_uid_);
  }
  if (from._internal_has_sort_rule_reference_tracker_owner_uid()) {
    _this->_impl_.sort_rule_reference_tracker_owner_uid_ = new ::TSP::UUID(*from._impl_.sort_rule_reference_tracker_owner_uid_);
  }
  if (from._internal_has_next_sort_rule_reference_tracker_owner_uid()) {
    _this->_impl_.next_sort_rule_reference_tracker_owner_uid_ = new ::TSP::UUID(*from._impl_.next_sort_rule_reference_tracker_owner_uid_);
  }
  if (from._internal_has_merge_owner_uid()) {
    _this->_impl_.merge_owner_uid_ = new ::TSP::UUID(*from._impl_.merge_owner_uid_);
  }
  if (from._internal_has_next_merge_owner_uid()) {
    _this->_impl_.next_merge_owner_uid_ = new ::TSP::UUID(*from._impl_.next_merge_owner_uid_);
  }
  if (from._internal_has_category_aggregates_owner_uid()) {
    _this->_impl_.category_aggregates_owner_uid_ = new ::TSP::UUID(*from._impl_.category_aggregates_owner_uid_);
  }
  if (from._internal_has_next_category_aggregates_owner_uid()) {
    _this->_impl_.next_category_aggregates_owner_uid_ = new ::TSP::UUID(*from._impl_.next_category_aggregates_owner_uid_);
  }
  if (from._internal_has_group_by_uid()) {
    _this->_impl_.group_by_uid_ = new ::TSP::UUID(*from._impl_.group_by_uid_);
  }
  if (from._internal_has_next_group_by_uid()) {
    _this->_impl_.next_group_by_uid_ = new ::TSP::UUID(*from._impl_.next_group_by_uid_);
  }
  if (from._internal_has_pencil_annotation_owner_uid()) {
    _this->_impl_.pencil_annotation_owner_uid_ = new ::TSP::UUID(*from._impl_.pencil_annotation_owner_uid_);
  }
  if (from._internal_has_next_pencil_annotation_owner_uid()) {
    _this->_impl_.next_pencil_annotation_owner_uid_ = new ::TSP::UUID(*from._impl_.next_pencil_annotation_owner_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.OwnerUIDMapperArchive)
}

inline void OwnerUIDMapperArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.next_table_uid_){nullptr}
    , decltype(_impl_.hidden_state_for_rows_owner_uid_){nullptr}
    , decltype(_impl_.next_hidden_state_for_rows_owner_uid_){nullptr}
    , decltype(_impl_.hidden_state_for_columns_owner_uid_){nullptr}
    , decltype(_impl_.next_hidden_state_for_columns_owner_uid_){nullptr}
    , decltype(_impl_.conditional_style_owner_uid_){nullptr}
    , decltype(_impl_.next_conditional_style_owner_uid_){nullptr}
    , decltype(_impl_.sort_rule_reference_tracker_owner_uid_){nullptr}
    , decltype(_impl_.next_sort_rule_reference_tracker_owner_uid_){nullptr}
    , decltype(_impl_.merge_owner_uid_){nullptr}
    , decltype(_impl_.next_merge_owner_uid_){nullptr}
    , decltype(_impl_.category_aggregates_owner_uid_){nullptr}
    , decltype(_impl_.next_category_aggregates_owner_uid_){nullptr}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.next_group_by_uid_){nullptr}
    , decltype(_impl_.pencil_annotation_owner_uid_){nullptr}
    , decltype(_impl_.next_pencil_annotation_owner_uid_){nullptr}
  };
}

OwnerUIDMapperArchive::~OwnerUIDMapperArchive() {
  // @@protoc_insertion_point(destructor:TSCE.OwnerUIDMapperArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OwnerUIDMapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_uid_;
  if (this != internal_default_instance()) delete _impl_.next_table_uid_;
  if (this != internal_default_instance()) delete _impl_.hidden_state_for_rows_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.next_hidden_state_for_rows_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.hidden_state_for_columns_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.next_hidden_state_for_columns_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.conditional_style_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.next_conditional_style_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.sort_rule_reference_tracker_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.next_sort_rule_reference_tracker_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.merge_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.next_merge_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.category_aggregates_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.next_category_aggregates_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.group_by_uid_;
  if (this != internal_default_instance()) delete _impl_.next_group_by_uid_;
  if (this != internal_default_instance()) delete _impl_.pencil_annotation_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.next_pencil_annotation_owner_uid_;
}

void OwnerUIDMapperArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OwnerUIDMapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.OwnerUIDMapperArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_uid_ != nullptr);
      _impl_.table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.next_table_uid_ != nullptr);
      _impl_.next_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.hidden_state_for_rows_owner_uid_ != nullptr);
      _impl_.hidden_state_for_rows_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.next_hidden_state_for_rows_owner_uid_ != nullptr);
      _impl_.next_hidden_state_for_rows_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.hidden_state_for_columns_owner_uid_ != nullptr);
      _impl_.hidden_state_for_columns_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.next_hidden_state_for_columns_owner_uid_ != nullptr);
      _impl_.next_hidden_state_for_columns_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.conditional_style_owner_uid_ != nullptr);
      _impl_.conditional_style_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.next_conditional_style_owner_uid_ != nullptr);
      _impl_.next_conditional_style_owner_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.sort_rule_reference_tracker_owner_uid_ != nullptr);
      _impl_.sort_rule_reference_tracker_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.next_sort_rule_reference_tracker_owner_uid_ != nullptr);
      _impl_.next_sort_rule_reference_tracker_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.merge_owner_uid_ != nullptr);
      _impl_.merge_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.next_merge_owner_uid_ != nullptr);
      _impl_.next_merge_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.category_aggregates_owner_uid_ != nullptr);
      _impl_.category_aggregates_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.next_category_aggregates_owner_uid_ != nullptr);
      _impl_.next_category_aggregates_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.group_by_uid_ != nullptr);
      _impl_.group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.next_group_by_uid_ != nullptr);
      _impl_.next_group_by_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.pencil_annotation_owner_uid_ != nullptr);
      _impl_.pencil_annotation_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.next_pencil_annotation_owner_uid_ != nullptr);
      _impl_.next_pencil_annotation_owner_uid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OwnerUIDMapperArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID table_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID next_table_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID hidden_state_for_rows_owner_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_state_for_rows_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID next_hidden_state_for_rows_owner_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_hidden_state_for_rows_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID hidden_state_for_columns_owner_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_state_for_columns_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID next_hidden_state_for_columns_owner_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_hidden_state_for_columns_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID conditional_style_owner_uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditional_style_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID next_conditional_style_owner_uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_conditional_style_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID sort_rule_reference_tracker_owner_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort_rule_reference_tracker_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID next_sort_rule_reference_tracker_owner_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_sort_rule_reference_tracker_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID merge_owner_uid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID next_merge_owner_uid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_merge_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID category_aggregates_owner_uid = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_aggregates_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID next_category_aggregates_owner_uid = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_category_aggregates_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID group_by_uid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID next_group_by_uid = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_group_by_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID pencil_annotation_owner_uid = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_pencil_annotation_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID next_pencil_annotation_owner_uid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_pencil_annotation_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OwnerUIDMapperArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.OwnerUIDMapperArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID table_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_uid(this),
        _Internal::table_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID next_table_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::next_table_uid(this),
        _Internal::next_table_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID hidden_state_for_rows_owner_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::hidden_state_for_rows_owner_uid(this),
        _Internal::hidden_state_for_rows_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID next_hidden_state_for_rows_owner_uid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::next_hidden_state_for_rows_owner_uid(this),
        _Internal::next_hidden_state_for_rows_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID hidden_state_for_columns_owner_uid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::hidden_state_for_columns_owner_uid(this),
        _Internal::hidden_state_for_columns_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID next_hidden_state_for_columns_owner_uid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::next_hidden_state_for_columns_owner_uid(this),
        _Internal::next_hidden_state_for_columns_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID conditional_style_owner_uid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::conditional_style_owner_uid(this),
        _Internal::conditional_style_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID next_conditional_style_owner_uid = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::next_conditional_style_owner_uid(this),
        _Internal::next_conditional_style_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID sort_rule_reference_tracker_owner_uid = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::sort_rule_reference_tracker_owner_uid(this),
        _Internal::sort_rule_reference_tracker_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID next_sort_rule_reference_tracker_owner_uid = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::next_sort_rule_reference_tracker_owner_uid(this),
        _Internal::next_sort_rule_reference_tracker_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID merge_owner_uid = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::merge_owner_uid(this),
        _Internal::merge_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID next_merge_owner_uid = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::next_merge_owner_uid(this),
        _Internal::next_merge_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID category_aggregates_owner_uid = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::category_aggregates_owner_uid(this),
        _Internal::category_aggregates_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID next_category_aggregates_owner_uid = 16;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::next_category_aggregates_owner_uid(this),
        _Internal::next_category_aggregates_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID group_by_uid = 17;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::group_by_uid(this),
        _Internal::group_by_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID next_group_by_uid = 18;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::next_group_by_uid(this),
        _Internal::next_group_by_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID pencil_annotation_owner_uid = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::pencil_annotation_owner_uid(this),
        _Internal::pencil_annotation_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID next_pencil_annotation_owner_uid = 20;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::next_pencil_annotation_owner_uid(this),
        _Internal::next_pencil_annotation_owner_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.OwnerUIDMapperArchive)
  return target;
}

size_t OwnerUIDMapperArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.OwnerUIDMapperArchive)
  size_t total_size = 0;

  if (_internal_has_table_uid()) {
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_uid_);
  }

  if (_internal_has_next_table_uid()) {
    // required .TSP.UUID next_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_table_uid_);
  }

  if (_internal_has_hidden_state_for_rows_owner_uid()) {
    // required .TSP.UUID hidden_state_for_rows_owner_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hidden_state_for_rows_owner_uid_);
  }

  if (_internal_has_next_hidden_state_for_rows_owner_uid()) {
    // required .TSP.UUID next_hidden_state_for_rows_owner_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_hidden_state_for_rows_owner_uid_);
  }

  if (_internal_has_hidden_state_for_columns_owner_uid()) {
    // required .TSP.UUID hidden_state_for_columns_owner_uid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hidden_state_for_columns_owner_uid_);
  }

  if (_internal_has_next_hidden_state_for_columns_owner_uid()) {
    // required .TSP.UUID next_hidden_state_for_columns_owner_uid = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_hidden_state_for_columns_owner_uid_);
  }

  if (_internal_has_conditional_style_owner_uid()) {
    // required .TSP.UUID conditional_style_owner_uid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conditional_style_owner_uid_);
  }

  if (_internal_has_next_conditional_style_owner_uid()) {
    // required .TSP.UUID next_conditional_style_owner_uid = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_conditional_style_owner_uid_);
  }

  if (_internal_has_sort_rule_reference_tracker_owner_uid()) {
    // required .TSP.UUID sort_rule_reference_tracker_owner_uid = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sort_rule_reference_tracker_owner_uid_);
  }

  if (_internal_has_next_sort_rule_reference_tracker_owner_uid()) {
    // required .TSP.UUID next_sort_rule_reference_tracker_owner_uid = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_sort_rule_reference_tracker_owner_uid_);
  }

  if (_internal_has_merge_owner_uid()) {
    // required .TSP.UUID merge_owner_uid = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.merge_owner_uid_);
  }

  if (_internal_has_next_merge_owner_uid()) {
    // required .TSP.UUID next_merge_owner_uid = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_merge_owner_uid_);
  }

  if (_internal_has_category_aggregates_owner_uid()) {
    // required .TSP.UUID category_aggregates_owner_uid = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.category_aggregates_owner_uid_);
  }

  if (_internal_has_next_category_aggregates_owner_uid()) {
    // required .TSP.UUID next_category_aggregates_owner_uid = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_category_aggregates_owner_uid_);
  }

  if (_internal_has_group_by_uid()) {
    // required .TSP.UUID group_by_uid = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);
  }

  if (_internal_has_next_group_by_uid()) {
    // required .TSP.UUID next_group_by_uid = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_group_by_uid_);
  }

  if (_internal_has_pencil_annotation_owner_uid()) {
    // required .TSP.UUID pencil_annotation_owner_uid = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pencil_annotation_owner_uid_);
  }

  if (_internal_has_next_pencil_annotation_owner_uid()) {
    // required .TSP.UUID next_pencil_annotation_owner_uid = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_pencil_annotation_owner_uid_);
  }

  return total_size;
}
size_t OwnerUIDMapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.OwnerUIDMapperArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0003ffff) ^ 0x0003ffff) == 0) {  // All required fields are present.
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_uid_);

    // required .TSP.UUID next_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_table_uid_);

    // required .TSP.UUID hidden_state_for_rows_owner_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hidden_state_for_rows_owner_uid_);

    // required .TSP.UUID next_hidden_state_for_rows_owner_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_hidden_state_for_rows_owner_uid_);

    // required .TSP.UUID hidden_state_for_columns_owner_uid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.hidden_state_for_columns_owner_uid_);

    // required .TSP.UUID next_hidden_state_for_columns_owner_uid = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_hidden_state_for_columns_owner_uid_);

    // required .TSP.UUID conditional_style_owner_uid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conditional_style_owner_uid_);

    // required .TSP.UUID next_conditional_style_owner_uid = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_conditional_style_owner_uid_);

    // required .TSP.UUID sort_rule_reference_tracker_owner_uid = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sort_rule_reference_tracker_owner_uid_);

    // required .TSP.UUID next_sort_rule_reference_tracker_owner_uid = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_sort_rule_reference_tracker_owner_uid_);

    // required .TSP.UUID merge_owner_uid = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.merge_owner_uid_);

    // required .TSP.UUID next_merge_owner_uid = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_merge_owner_uid_);

    // required .TSP.UUID category_aggregates_owner_uid = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.category_aggregates_owner_uid_);

    // required .TSP.UUID next_category_aggregates_owner_uid = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_category_aggregates_owner_uid_);

    // required .TSP.UUID group_by_uid = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);

    // required .TSP.UUID next_group_by_uid = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_group_by_uid_);

    // required .TSP.UUID pencil_annotation_owner_uid = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pencil_annotation_owner_uid_);

    // required .TSP.UUID next_pencil_annotation_owner_uid = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.next_pencil_annotation_owner_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OwnerUIDMapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OwnerUIDMapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OwnerUIDMapperArchive::GetClassData() const { return &_class_data_; }


void OwnerUIDMapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OwnerUIDMapperArchive*>(&to_msg);
  auto& from = static_cast<const OwnerUIDMapperArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.OwnerUIDMapperArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_next_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_next_table_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_hidden_state_for_rows_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_hidden_state_for_rows_owner_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_next_hidden_state_for_rows_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_next_hidden_state_for_rows_owner_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_hidden_state_for_columns_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_hidden_state_for_columns_owner_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_next_hidden_state_for_columns_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_next_hidden_state_for_columns_owner_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_conditional_style_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_conditional_style_owner_uid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_next_conditional_style_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_next_conditional_style_owner_uid());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_sort_rule_reference_tracker_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_sort_rule_reference_tracker_owner_uid());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_next_sort_rule_reference_tracker_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_next_sort_rule_reference_tracker_owner_uid());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_merge_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_merge_owner_uid());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_next_merge_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_next_merge_owner_uid());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_category_aggregates_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_category_aggregates_owner_uid());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_next_category_aggregates_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_next_category_aggregates_owner_uid());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(
          from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_next_group_by_uid()->::TSP::UUID::MergeFrom(
          from._internal_next_group_by_uid());
    }
  }
  if (cached_has_bits & 0x00030000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_pencil_annotation_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_pencil_annotation_owner_uid());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_next_pencil_annotation_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_next_pencil_annotation_owner_uid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OwnerUIDMapperArchive::CopyFrom(const OwnerUIDMapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.OwnerUIDMapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OwnerUIDMapperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_table_uid()) {
    if (!_impl_.table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_table_uid()) {
    if (!_impl_.next_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_state_for_rows_owner_uid()) {
    if (!_impl_.hidden_state_for_rows_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_hidden_state_for_rows_owner_uid()) {
    if (!_impl_.next_hidden_state_for_rows_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_hidden_state_for_columns_owner_uid()) {
    if (!_impl_.hidden_state_for_columns_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_hidden_state_for_columns_owner_uid()) {
    if (!_impl_.next_hidden_state_for_columns_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_conditional_style_owner_uid()) {
    if (!_impl_.conditional_style_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_conditional_style_owner_uid()) {
    if (!_impl_.next_conditional_style_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_sort_rule_reference_tracker_owner_uid()) {
    if (!_impl_.sort_rule_reference_tracker_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_sort_rule_reference_tracker_owner_uid()) {
    if (!_impl_.next_sort_rule_reference_tracker_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_merge_owner_uid()) {
    if (!_impl_.merge_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_merge_owner_uid()) {
    if (!_impl_.next_merge_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_category_aggregates_owner_uid()) {
    if (!_impl_.category_aggregates_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_category_aggregates_owner_uid()) {
    if (!_impl_.next_category_aggregates_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_by_uid()) {
    if (!_impl_.group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_group_by_uid()) {
    if (!_impl_.next_group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_pencil_annotation_owner_uid()) {
    if (!_impl_.pencil_annotation_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_next_pencil_annotation_owner_uid()) {
    if (!_impl_.next_pencil_annotation_owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void OwnerUIDMapperArchive::InternalSwap(OwnerUIDMapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OwnerUIDMapperArchive, _impl_.next_pencil_annotation_owner_uid_)
      + sizeof(OwnerUIDMapperArchive::_impl_.next_pencil_annotation_owner_uid_)
      - PROTOBUF_FIELD_OFFSET(OwnerUIDMapperArchive, _impl_.table_uid_)>(
          reinterpret_cast<char*>(&_impl_.table_uid_),
          reinterpret_cast<char*>(&other->_impl_.table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OwnerUIDMapperArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[111]);
}

// ===================================================================

class RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RewriteTableUIDInfoArchive_TableUIDMapEntryArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& prev_table_uid(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* msg);
  static void set_has_prev_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& new_table_uid(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* msg);
  static void set_has_new_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_Internal::prev_table_uid(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* msg) {
  return *msg->_impl_.prev_table_uid_;
}
const ::TSP::UUID&
RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_Internal::new_table_uid(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* msg) {
  return *msg->_impl_.new_table_uid_;
}
void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::clear_prev_table_uid() {
  if (_impl_.prev_table_uid_ != nullptr) _impl_.prev_table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::clear_new_table_uid() {
  if (_impl_.new_table_uid_ != nullptr) _impl_.new_table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
}
RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prev_table_uid_){nullptr}
    , decltype(_impl_.new_table_uid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_prev_table_uid()) {
    _this->_impl_.prev_table_uid_ = new ::TSP::UUID(*from._impl_.prev_table_uid_);
  }
  if (from._internal_has_new_table_uid()) {
    _this->_impl_.new_table_uid_ = new ::TSP::UUID(*from._impl_.new_table_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
}

inline void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.prev_table_uid_){nullptr}
    , decltype(_impl_.new_table_uid_){nullptr}
  };
}

RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::~RewriteTableUIDInfoArchive_TableUIDMapEntryArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.prev_table_uid_;
  if (this != internal_default_instance()) delete _impl_.new_table_uid_;
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.prev_table_uid_ != nullptr);
      _impl_.prev_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_table_uid_ != nullptr);
      _impl_.new_table_uid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID prev_table_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID new_table_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID prev_table_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::prev_table_uid(this),
        _Internal::prev_table_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID new_table_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_table_uid(this),
        _Internal::new_table_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  return target;
}

size_t RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  size_t total_size = 0;

  if (_internal_has_prev_table_uid()) {
    // required .TSP.UUID prev_table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prev_table_uid_);
  }

  if (_internal_has_new_table_uid()) {
    // required .TSP.UUID new_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_table_uid_);
  }

  return total_size;
}
size_t RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID prev_table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prev_table_uid_);

    // required .TSP.UUID new_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_table_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::GetClassData() const { return &_class_data_; }


void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RewriteTableUIDInfoArchive_TableUIDMapEntryArchive*>(&to_msg);
  auto& from = static_cast<const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_prev_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_prev_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_new_table_uid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::CopyFrom(const RewriteTableUIDInfoArchive_TableUIDMapEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_prev_table_uid()) {
    if (!_impl_.prev_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_new_table_uid()) {
    if (!_impl_.new_table_uid_->IsInitialized()) return false;
  }
  return true;
}

void RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::InternalSwap(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, _impl_.new_table_uid_)
      + sizeof(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::_impl_.new_table_uid_)
      - PROTOBUF_FIELD_OFFSET(RewriteTableUIDInfoArchive_TableUIDMapEntryArchive, _impl_.prev_table_uid_)>(
          reinterpret_cast<char*>(&_impl_.prev_table_uid_),
          reinterpret_cast<char*>(&other->_impl_.prev_table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriteTableUIDInfoArchive_TableUIDMapEntryArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[112]);
}

// ===================================================================

class RewriteTableUIDInfoArchive::_Internal {
 public:
};

RewriteTableUIDInfoArchive::RewriteTableUIDInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RewriteTableUIDInfoArchive)
}
RewriteTableUIDInfoArchive::RewriteTableUIDInfoArchive(const RewriteTableUIDInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RewriteTableUIDInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_uid_map_){from._impl_.table_uid_map_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.RewriteTableUIDInfoArchive)
}

inline void RewriteTableUIDInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_uid_map_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RewriteTableUIDInfoArchive::~RewriteTableUIDInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RewriteTableUIDInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RewriteTableUIDInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_uid_map_.~RepeatedPtrField();
}

void RewriteTableUIDInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RewriteTableUIDInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RewriteTableUIDInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_uid_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewriteTableUIDInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive table_uid_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_uid_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RewriteTableUIDInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RewriteTableUIDInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive table_uid_map = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_table_uid_map_size()); i < n; i++) {
    const auto& repfield = this->_internal_table_uid_map(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RewriteTableUIDInfoArchive)
  return target;
}

size_t RewriteTableUIDInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RewriteTableUIDInfoArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive table_uid_map = 1;
  total_size += 1UL * this->_internal_table_uid_map_size();
  for (const auto& msg : this->_impl_.table_uid_map_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RewriteTableUIDInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RewriteTableUIDInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RewriteTableUIDInfoArchive::GetClassData() const { return &_class_data_; }


void RewriteTableUIDInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RewriteTableUIDInfoArchive*>(&to_msg);
  auto& from = static_cast<const RewriteTableUIDInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RewriteTableUIDInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.table_uid_map_.MergeFrom(from._impl_.table_uid_map_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RewriteTableUIDInfoArchive::CopyFrom(const RewriteTableUIDInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RewriteTableUIDInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteTableUIDInfoArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.table_uid_map_))
    return false;
  return true;
}

void RewriteTableUIDInfoArchive::InternalSwap(RewriteTableUIDInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.table_uid_map_.InternalSwap(&other->_impl_.table_uid_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriteTableUIDInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[113]);
}

// ===================================================================

class GroupByChangeArchive_GroupingColumnChangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByChangeArchive_GroupingColumnChangeArchive>()._impl_._has_bits_);
  static void set_has_old_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

GroupByChangeArchive_GroupingColumnChangeArchive::GroupByChangeArchive_GroupingColumnChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
}
GroupByChangeArchive_GroupingColumnChangeArchive::GroupByChangeArchive_GroupingColumnChangeArchive(const GroupByChangeArchive_GroupingColumnChangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupByChangeArchive_GroupingColumnChangeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_level_){}
    , decltype(_impl_.new_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.old_level_, &from._impl_.old_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_level_) -
    reinterpret_cast<char*>(&_impl_.old_level_)) + sizeof(_impl_.new_level_));
  // @@protoc_insertion_point(copy_constructor:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
}

inline void GroupByChangeArchive_GroupingColumnChangeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.old_level_){0u}
    , decltype(_impl_.new_level_){0u}
  };
}

GroupByChangeArchive_GroupingColumnChangeArchive::~GroupByChangeArchive_GroupingColumnChangeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupByChangeArchive_GroupingColumnChangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GroupByChangeArchive_GroupingColumnChangeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupByChangeArchive_GroupingColumnChangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.old_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_level_) -
        reinterpret_cast<char*>(&_impl_.old_level_)) + sizeof(_impl_.new_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByChangeArchive_GroupingColumnChangeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 old_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_old_level(&has_bits);
          _impl_.old_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 new_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_new_level(&has_bits);
          _impl_.new_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupByChangeArchive_GroupingColumnChangeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 old_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_old_level(), target);
  }

  // required uint32 new_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_new_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  return target;
}

size_t GroupByChangeArchive_GroupingColumnChangeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  size_t total_size = 0;

  if (_internal_has_old_level()) {
    // required uint32 old_level = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_old_level());
  }

  if (_internal_has_new_level()) {
    // required uint32 new_level = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_level());
  }

  return total_size;
}
size_t GroupByChangeArchive_GroupingColumnChangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 old_level = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_old_level());

    // required uint32 new_level = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_new_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupByChangeArchive_GroupingColumnChangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupByChangeArchive_GroupingColumnChangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupByChangeArchive_GroupingColumnChangeArchive::GetClassData() const { return &_class_data_; }


void GroupByChangeArchive_GroupingColumnChangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupByChangeArchive_GroupingColumnChangeArchive*>(&to_msg);
  auto& from = static_cast<const GroupByChangeArchive_GroupingColumnChangeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.old_level_ = from._impl_.old_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.new_level_ = from._impl_.new_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupByChangeArchive_GroupingColumnChangeArchive::CopyFrom(const GroupByChangeArchive_GroupingColumnChangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.GroupByChangeArchive.GroupingColumnChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByChangeArchive_GroupingColumnChangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void GroupByChangeArchive_GroupingColumnChangeArchive::InternalSwap(GroupByChangeArchive_GroupingColumnChangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupByChangeArchive_GroupingColumnChangeArchive, _impl_.new_level_)
      + sizeof(GroupByChangeArchive_GroupingColumnChangeArchive::_impl_.new_level_)
      - PROTOBUF_FIELD_OFFSET(GroupByChangeArchive_GroupingColumnChangeArchive, _impl_.old_level_)>(
          reinterpret_cast<char*>(&_impl_.old_level_),
          reinterpret_cast<char*>(&other->_impl_.old_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByChangeArchive_GroupingColumnChangeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[114]);
}

// ===================================================================

class GroupByChangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<GroupByChangeArchive>()._impl_._has_bits_);
  static void set_has_change_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& group_by_uid(const GroupByChangeArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_previous_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_updated_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUIDMapArchive& previous_to_updated_map(const GroupByChangeArchive* msg);
  static void set_has_previous_to_updated_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDMapArchive& updated_to_previous_map(const GroupByChangeArchive* msg);
  static void set_has_updated_to_previous_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::TSP::UUID&
GroupByChangeArchive::_Internal::group_by_uid(const GroupByChangeArchive* msg) {
  return *msg->_impl_.group_by_uid_;
}
const ::TSP::UUIDMapArchive&
GroupByChangeArchive::_Internal::previous_to_updated_map(const GroupByChangeArchive* msg) {
  return *msg->_impl_.previous_to_updated_map_;
}
const ::TSP::UUIDMapArchive&
GroupByChangeArchive::_Internal::updated_to_previous_map(const GroupByChangeArchive* msg) {
  return *msg->_impl_.updated_to_previous_map_;
}
void GroupByChangeArchive::clear_group_by_uid() {
  if (_impl_.group_by_uid_ != nullptr) _impl_.group_by_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GroupByChangeArchive::clear_previous_to_updated_map() {
  if (_impl_.previous_to_updated_map_ != nullptr) _impl_.previous_to_updated_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GroupByChangeArchive::clear_updated_to_previous_map() {
  if (_impl_.updated_to_previous_map_ != nullptr) _impl_.updated_to_previous_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GroupByChangeArchive::clear_removed_group_uids() {
  _impl_.removed_group_uids_.Clear();
}
GroupByChangeArchive::GroupByChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.GroupByChangeArchive)
}
GroupByChangeArchive::GroupByChangeArchive(const GroupByChangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GroupByChangeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removed_group_uids_){from._impl_.removed_group_uids_}
    , decltype(_impl_.grouping_column_changes_){from._impl_.grouping_column_changes_}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.previous_to_updated_map_){nullptr}
    , decltype(_impl_.updated_to_previous_map_){nullptr}
    , decltype(_impl_.change_type_){}
    , decltype(_impl_.previous_level_){}
    , decltype(_impl_.updated_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_by_uid()) {
    _this->_impl_.group_by_uid_ = new ::TSP::UUID(*from._impl_.group_by_uid_);
  }
  if (from._internal_has_previous_to_updated_map()) {
    _this->_impl_.previous_to_updated_map_ = new ::TSP::UUIDMapArchive(*from._impl_.previous_to_updated_map_);
  }
  if (from._internal_has_updated_to_previous_map()) {
    _this->_impl_.updated_to_previous_map_ = new ::TSP::UUIDMapArchive(*from._impl_.updated_to_previous_map_);
  }
  ::memcpy(&_impl_.change_type_, &from._impl_.change_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.updated_level_) -
    reinterpret_cast<char*>(&_impl_.change_type_)) + sizeof(_impl_.updated_level_));
  // @@protoc_insertion_point(copy_constructor:TSCE.GroupByChangeArchive)
}

inline void GroupByChangeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.removed_group_uids_){arena}
    , decltype(_impl_.grouping_column_changes_){arena}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.previous_to_updated_map_){nullptr}
    , decltype(_impl_.updated_to_previous_map_){nullptr}
    , decltype(_impl_.change_type_){0}
    , decltype(_impl_.previous_level_){0u}
    , decltype(_impl_.updated_level_){0u}
  };
}

GroupByChangeArchive::~GroupByChangeArchive() {
  // @@protoc_insertion_point(destructor:TSCE.GroupByChangeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GroupByChangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.removed_group_uids_.~RepeatedPtrField();
  _impl_.grouping_column_changes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.group_by_uid_;
  if (this != internal_default_instance()) delete _impl_.previous_to_updated_map_;
  if (this != internal_default_instance()) delete _impl_.updated_to_previous_map_;
}

void GroupByChangeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GroupByChangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.GroupByChangeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.removed_group_uids_.Clear();
  _impl_.grouping_column_changes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.group_by_uid_ != nullptr);
      _impl_.group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.previous_to_updated_map_ != nullptr);
      _impl_.previous_to_updated_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.updated_to_previous_map_ != nullptr);
      _impl_.updated_to_previous_map_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.change_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.updated_level_) -
        reinterpret_cast<char*>(&_impl_.change_type_)) + sizeof(_impl_.updated_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GroupByChangeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.GroupByChangeArchive.ChangeType change_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::GroupByChangeArchive_ChangeType_IsValid(val))) {
            _internal_set_change_type(static_cast<::TSCE::GroupByChangeArchive_ChangeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID group_by_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 previous_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_previous_level(&has_bits);
          _impl_.previous_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 updated_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_updated_level(&has_bits);
          _impl_.updated_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDMapArchive previous_to_updated_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_to_updated_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDMapArchive updated_to_previous_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_to_previous_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID removed_group_uids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_removed_group_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.GroupByChangeArchive.GroupingColumnChangeArchive grouping_column_changes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_grouping_column_changes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GroupByChangeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.GroupByChangeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.GroupByChangeArchive.ChangeType change_type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_change_type(), target);
  }

  // required .TSP.UUID group_by_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::group_by_uid(this),
        _Internal::group_by_uid(this).GetCachedSize(), target, stream);
  }

  // optional uint32 previous_level = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_previous_level(), target);
  }

  // optional uint32 updated_level = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_updated_level(), target);
  }

  // optional .TSP.UUIDMapArchive previous_to_updated_map = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::previous_to_updated_map(this),
        _Internal::previous_to_updated_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDMapArchive updated_to_previous_map = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::updated_to_previous_map(this),
        _Internal::updated_to_previous_map(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID removed_group_uids = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_removed_group_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_removed_group_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.GroupByChangeArchive.GroupingColumnChangeArchive grouping_column_changes = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_grouping_column_changes_size()); i < n; i++) {
    const auto& repfield = this->_internal_grouping_column_changes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.GroupByChangeArchive)
  return target;
}

size_t GroupByChangeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.GroupByChangeArchive)
  size_t total_size = 0;

  if (_internal_has_group_by_uid()) {
    // required .TSP.UUID group_by_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);
  }

  if (_internal_has_change_type()) {
    // required .TSCE.GroupByChangeArchive.ChangeType change_type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());
  }

  return total_size;
}
size_t GroupByChangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.GroupByChangeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .TSP.UUID group_by_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);

    // required .TSCE.GroupByChangeArchive.ChangeType change_type = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID removed_group_uids = 7;
  total_size += 1UL * this->_internal_removed_group_uids_size();
  for (const auto& msg : this->_impl_.removed_group_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.GroupByChangeArchive.GroupingColumnChangeArchive grouping_column_changes = 8;
  total_size += 1UL * this->_internal_grouping_column_changes_size();
  for (const auto& msg : this->_impl_.grouping_column_changes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.UUIDMapArchive previous_to_updated_map = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.previous_to_updated_map_);
    }

    // optional .TSP.UUIDMapArchive updated_to_previous_map = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.updated_to_previous_map_);
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional uint32 previous_level = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_previous_level());
    }

    // optional uint32 updated_level = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_updated_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GroupByChangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GroupByChangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GroupByChangeArchive::GetClassData() const { return &_class_data_; }


void GroupByChangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GroupByChangeArchive*>(&to_msg);
  auto& from = static_cast<const GroupByChangeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.GroupByChangeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.removed_group_uids_.MergeFrom(from._impl_.removed_group_uids_);
  _this->_impl_.grouping_column_changes_.MergeFrom(from._impl_.grouping_column_changes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(
          from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_previous_to_updated_map()->::TSP::UUIDMapArchive::MergeFrom(
          from._internal_previous_to_updated_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_updated_to_previous_map()->::TSP::UUIDMapArchive::MergeFrom(
          from._internal_updated_to_previous_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.change_type_ = from._impl_.change_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.previous_level_ = from._impl_.previous_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.updated_level_ = from._impl_.updated_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GroupByChangeArchive::CopyFrom(const GroupByChangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.GroupByChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupByChangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.removed_group_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.grouping_column_changes_))
    return false;
  if (_internal_has_group_by_uid()) {
    if (!_impl_.group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_previous_to_updated_map()) {
    if (!_impl_.previous_to_updated_map_->IsInitialized()) return false;
  }
  if (_internal_has_updated_to_previous_map()) {
    if (!_impl_.updated_to_previous_map_->IsInitialized()) return false;
  }
  return true;
}

void GroupByChangeArchive::InternalSwap(GroupByChangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.removed_group_uids_.InternalSwap(&other->_impl_.removed_group_uids_);
  _impl_.grouping_column_changes_.InternalSwap(&other->_impl_.grouping_column_changes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GroupByChangeArchive, _impl_.updated_level_)
      + sizeof(GroupByChangeArchive::_impl_.updated_level_)
      - PROTOBUF_FIELD_OFFSET(GroupByChangeArchive, _impl_.group_by_uid_)>(
          reinterpret_cast<char*>(&_impl_.group_by_uid_),
          reinterpret_cast<char*>(&other->_impl_.group_by_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GroupByChangeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[115]);
}

// ===================================================================

class RewriteGroupNodeUIDInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RewriteGroupNodeUIDInfoArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& group_by_uid(const RewriteGroupNodeUIDInfoArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDMapArchive& group_node_uid_map(const RewriteGroupNodeUIDInfoArchive* msg);
  static void set_has_group_node_uid_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::UUID&
RewriteGroupNodeUIDInfoArchive::_Internal::group_by_uid(const RewriteGroupNodeUIDInfoArchive* msg) {
  return *msg->_impl_.group_by_uid_;
}
const ::TSP::UUIDMapArchive&
RewriteGroupNodeUIDInfoArchive::_Internal::group_node_uid_map(const RewriteGroupNodeUIDInfoArchive* msg) {
  return *msg->_impl_.group_node_uid_map_;
}
void RewriteGroupNodeUIDInfoArchive::clear_group_by_uid() {
  if (_impl_.group_by_uid_ != nullptr) _impl_.group_by_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void RewriteGroupNodeUIDInfoArchive::clear_group_node_uid_map() {
  if (_impl_.group_node_uid_map_ != nullptr) _impl_.group_node_uid_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
RewriteGroupNodeUIDInfoArchive::RewriteGroupNodeUIDInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RewriteGroupNodeUIDInfoArchive)
}
RewriteGroupNodeUIDInfoArchive::RewriteGroupNodeUIDInfoArchive(const RewriteGroupNodeUIDInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RewriteGroupNodeUIDInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.group_node_uid_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group_by_uid()) {
    _this->_impl_.group_by_uid_ = new ::TSP::UUID(*from._impl_.group_by_uid_);
  }
  if (from._internal_has_group_node_uid_map()) {
    _this->_impl_.group_node_uid_map_ = new ::TSP::UUIDMapArchive(*from._impl_.group_node_uid_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RewriteGroupNodeUIDInfoArchive)
}

inline void RewriteGroupNodeUIDInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.group_node_uid_map_){nullptr}
  };
}

RewriteGroupNodeUIDInfoArchive::~RewriteGroupNodeUIDInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RewriteGroupNodeUIDInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RewriteGroupNodeUIDInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.group_by_uid_;
  if (this != internal_default_instance()) delete _impl_.group_node_uid_map_;
}

void RewriteGroupNodeUIDInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RewriteGroupNodeUIDInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.group_by_uid_ != nullptr);
      _impl_.group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.group_node_uid_map_ != nullptr);
      _impl_.group_node_uid_map_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewriteGroupNodeUIDInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.UUID group_by_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDMapArchive group_node_uid_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_uid_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RewriteGroupNodeUIDInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.UUID group_by_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::group_by_uid(this),
        _Internal::group_by_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDMapArchive group_node_uid_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::group_node_uid_map(this),
        _Internal::group_node_uid_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RewriteGroupNodeUIDInfoArchive)
  return target;
}

size_t RewriteGroupNodeUIDInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  size_t total_size = 0;

  // required .TSP.UUIDMapArchive group_node_uid_map = 2;
  if (_internal_has_group_node_uid_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_node_uid_map_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUID group_by_uid = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RewriteGroupNodeUIDInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RewriteGroupNodeUIDInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RewriteGroupNodeUIDInfoArchive::GetClassData() const { return &_class_data_; }


void RewriteGroupNodeUIDInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RewriteGroupNodeUIDInfoArchive*>(&to_msg);
  auto& from = static_cast<const RewriteGroupNodeUIDInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(
          from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_group_node_uid_map()->::TSP::UUIDMapArchive::MergeFrom(
          from._internal_group_node_uid_map());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RewriteGroupNodeUIDInfoArchive::CopyFrom(const RewriteGroupNodeUIDInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RewriteGroupNodeUIDInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteGroupNodeUIDInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_group_by_uid()) {
    if (!_impl_.group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_node_uid_map()) {
    if (!_impl_.group_node_uid_map_->IsInitialized()) return false;
  }
  return true;
}

void RewriteGroupNodeUIDInfoArchive::InternalSwap(RewriteGroupNodeUIDInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewriteGroupNodeUIDInfoArchive, _impl_.group_node_uid_map_)
      + sizeof(RewriteGroupNodeUIDInfoArchive::_impl_.group_node_uid_map_)
      - PROTOBUF_FIELD_OFFSET(RewriteGroupNodeUIDInfoArchive, _impl_.group_by_uid_)>(
          reinterpret_cast<char*>(&_impl_.group_by_uid_),
          reinterpret_cast<char*>(&other->_impl_.group_by_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriteGroupNodeUIDInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[116]);
}

// ===================================================================

class IndexedUidsArchive_IndexedUid::_Internal {
 public:
  using HasBits = decltype(std::declval<IndexedUidsArchive_IndexedUid>()._impl_._has_bits_);
  static const ::TSP::UUID& uid_for_index(const IndexedUidsArchive_IndexedUid* msg);
  static void set_has_uid_for_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_index_for_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::UUID&
IndexedUidsArchive_IndexedUid::_Internal::uid_for_index(const IndexedUidsArchive_IndexedUid* msg) {
  return *msg->_impl_.uid_for_index_;
}
void IndexedUidsArchive_IndexedUid::clear_uid_for_index() {
  if (_impl_.uid_for_index_ != nullptr) _impl_.uid_for_index_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
IndexedUidsArchive_IndexedUid::IndexedUidsArchive_IndexedUid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.IndexedUidsArchive.IndexedUid)
}
IndexedUidsArchive_IndexedUid::IndexedUidsArchive_IndexedUid(const IndexedUidsArchive_IndexedUid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexedUidsArchive_IndexedUid* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uid_for_index_){nullptr}
    , decltype(_impl_.index_for_uid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uid_for_index()) {
    _this->_impl_.uid_for_index_ = new ::TSP::UUID(*from._impl_.uid_for_index_);
  }
  _this->_impl_.index_for_uid_ = from._impl_.index_for_uid_;
  // @@protoc_insertion_point(copy_constructor:TSCE.IndexedUidsArchive.IndexedUid)
}

inline void IndexedUidsArchive_IndexedUid::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uid_for_index_){nullptr}
    , decltype(_impl_.index_for_uid_){0u}
  };
}

IndexedUidsArchive_IndexedUid::~IndexedUidsArchive_IndexedUid() {
  // @@protoc_insertion_point(destructor:TSCE.IndexedUidsArchive.IndexedUid)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexedUidsArchive_IndexedUid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.uid_for_index_;
}

void IndexedUidsArchive_IndexedUid::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexedUidsArchive_IndexedUid::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.IndexedUidsArchive.IndexedUid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uid_for_index_ != nullptr);
    _impl_.uid_for_index_->Clear();
  }
  _impl_.index_for_uid_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexedUidsArchive_IndexedUid::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID uid_for_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid_for_index(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 index_for_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_index_for_uid(&has_bits);
          _impl_.index_for_uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexedUidsArchive_IndexedUid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.IndexedUidsArchive.IndexedUid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID uid_for_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::uid_for_index(this),
        _Internal::uid_for_index(this).GetCachedSize(), target, stream);
  }

  // required uint32 index_for_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index_for_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.IndexedUidsArchive.IndexedUid)
  return target;
}

size_t IndexedUidsArchive_IndexedUid::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.IndexedUidsArchive.IndexedUid)
  size_t total_size = 0;

  if (_internal_has_uid_for_index()) {
    // required .TSP.UUID uid_for_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uid_for_index_);
  }

  if (_internal_has_index_for_uid()) {
    // required uint32 index_for_uid = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index_for_uid());
  }

  return total_size;
}
size_t IndexedUidsArchive_IndexedUid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.IndexedUidsArchive.IndexedUid)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.UUID uid_for_index = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uid_for_index_);

    // required uint32 index_for_uid = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index_for_uid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexedUidsArchive_IndexedUid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexedUidsArchive_IndexedUid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexedUidsArchive_IndexedUid::GetClassData() const { return &_class_data_; }


void IndexedUidsArchive_IndexedUid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexedUidsArchive_IndexedUid*>(&to_msg);
  auto& from = static_cast<const IndexedUidsArchive_IndexedUid&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.IndexedUidsArchive.IndexedUid)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_uid_for_index()->::TSP::UUID::MergeFrom(
          from._internal_uid_for_index());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_for_uid_ = from._impl_.index_for_uid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexedUidsArchive_IndexedUid::CopyFrom(const IndexedUidsArchive_IndexedUid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.IndexedUidsArchive.IndexedUid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexedUidsArchive_IndexedUid::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_uid_for_index()) {
    if (!_impl_.uid_for_index_->IsInitialized()) return false;
  }
  return true;
}

void IndexedUidsArchive_IndexedUid::InternalSwap(IndexedUidsArchive_IndexedUid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexedUidsArchive_IndexedUid, _impl_.index_for_uid_)
      + sizeof(IndexedUidsArchive_IndexedUid::_impl_.index_for_uid_)
      - PROTOBUF_FIELD_OFFSET(IndexedUidsArchive_IndexedUid, _impl_.uid_for_index_)>(
          reinterpret_cast<char*>(&_impl_.uid_for_index_),
          reinterpret_cast<char*>(&other->_impl_.uid_for_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexedUidsArchive_IndexedUid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[117]);
}

// ===================================================================

class IndexedUidsArchive::_Internal {
 public:
};

IndexedUidsArchive::IndexedUidsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.IndexedUidsArchive)
}
IndexedUidsArchive::IndexedUidsArchive(const IndexedUidsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexedUidsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uids_){from._impl_.uids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.IndexedUidsArchive)
}

inline void IndexedUidsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexedUidsArchive::~IndexedUidsArchive() {
  // @@protoc_insertion_point(destructor:TSCE.IndexedUidsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexedUidsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uids_.~RepeatedPtrField();
}

void IndexedUidsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexedUidsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.IndexedUidsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexedUidsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.IndexedUidsArchive.IndexedUid uids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexedUidsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.IndexedUidsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.IndexedUidsArchive.IndexedUid uids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.IndexedUidsArchive)
  return target;
}

size_t IndexedUidsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.IndexedUidsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.IndexedUidsArchive.IndexedUid uids = 1;
  total_size += 1UL * this->_internal_uids_size();
  for (const auto& msg : this->_impl_.uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexedUidsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexedUidsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexedUidsArchive::GetClassData() const { return &_class_data_; }


void IndexedUidsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexedUidsArchive*>(&to_msg);
  auto& from = static_cast<const IndexedUidsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.IndexedUidsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uids_.MergeFrom(from._impl_.uids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexedUidsArchive::CopyFrom(const IndexedUidsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.IndexedUidsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexedUidsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uids_))
    return false;
  return true;
}

void IndexedUidsArchive::InternalSwap(IndexedUidsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uids_.InternalSwap(&other->_impl_.uids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexedUidsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[118]);
}

// ===================================================================

class RewriteRangeEntryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RewriteRangeEntryArchive>()._impl_._has_bits_);
  static void set_has_range_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

void RewriteRangeEntryArchive::clear_range_uids() {
  _impl_.range_uids_.Clear();
}
RewriteRangeEntryArchive::RewriteRangeEntryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RewriteRangeEntryArchive)
}
RewriteRangeEntryArchive::RewriteRangeEntryArchive(const RewriteRangeEntryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RewriteRangeEntryArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_uids_){from._impl_.range_uids_}
    , decltype(_impl_.range_location_){}
    , decltype(_impl_.range_length_){}
    , decltype(_impl_.offset_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.range_location_, &from._impl_.range_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.offset_) -
    reinterpret_cast<char*>(&_impl_.range_location_)) + sizeof(_impl_.offset_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RewriteRangeEntryArchive)
}

inline void RewriteRangeEntryArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_uids_){arena}
    , decltype(_impl_.range_location_){0u}
    , decltype(_impl_.range_length_){0u}
    , decltype(_impl_.offset_){0u}
  };
}

RewriteRangeEntryArchive::~RewriteRangeEntryArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RewriteRangeEntryArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RewriteRangeEntryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.range_uids_.~RepeatedPtrField();
}

void RewriteRangeEntryArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RewriteRangeEntryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RewriteRangeEntryArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_uids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.range_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.offset_) -
        reinterpret_cast<char*>(&_impl_.range_location_)) + sizeof(_impl_.offset_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RewriteRangeEntryArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 range_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_range_location(&has_bits);
          _impl_.range_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 range_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_range_length(&has_bits);
          _impl_.range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID range_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required uint32 offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_offset(&has_bits);
          _impl_.offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RewriteRangeEntryArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RewriteRangeEntryArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 range_location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_range_location(), target);
  }

  // required uint32 range_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_range_length(), target);
  }

  // repeated .TSP.UUID range_uids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_range_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_range_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required uint32 offset = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RewriteRangeEntryArchive)
  return target;
}

size_t RewriteRangeEntryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RewriteRangeEntryArchive)
  size_t total_size = 0;

  if (_internal_has_range_location()) {
    // required uint32 range_location = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range_location());
  }

  if (_internal_has_range_length()) {
    // required uint32 range_length = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range_length());
  }

  if (_internal_has_offset()) {
    // required uint32 offset = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());
  }

  return total_size;
}
size_t RewriteRangeEntryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RewriteRangeEntryArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 range_location = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range_location());

    // required uint32 range_length = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range_length());

    // required uint32 offset = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID range_uids = 3;
  total_size += 1UL * this->_internal_range_uids_size();
  for (const auto& msg : this->_impl_.range_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RewriteRangeEntryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RewriteRangeEntryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RewriteRangeEntryArchive::GetClassData() const { return &_class_data_; }


void RewriteRangeEntryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RewriteRangeEntryArchive*>(&to_msg);
  auto& from = static_cast<const RewriteRangeEntryArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RewriteRangeEntryArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.range_uids_.MergeFrom(from._impl_.range_uids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.range_location_ = from._impl_.range_location_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_length_ = from._impl_.range_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.offset_ = from._impl_.offset_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RewriteRangeEntryArchive::CopyFrom(const RewriteRangeEntryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RewriteRangeEntryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewriteRangeEntryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.range_uids_))
    return false;
  return true;
}

void RewriteRangeEntryArchive::InternalSwap(RewriteRangeEntryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.range_uids_.InternalSwap(&other->_impl_.range_uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RewriteRangeEntryArchive, _impl_.offset_)
      + sizeof(RewriteRangeEntryArchive::_impl_.offset_)
      - PROTOBUF_FIELD_OFFSET(RewriteRangeEntryArchive, _impl_.range_location_)>(
          reinterpret_cast<char*>(&_impl_.range_location_),
          reinterpret_cast<char*>(&other->_impl_.range_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RewriteRangeEntryArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[119]);
}

// ===================================================================

class ColumnOrRowUuidsInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnOrRowUuidsInfoArchive>()._impl_._has_bits_);
  static void set_has_is_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::UUID& table_uid(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& cond_style_owner_uid(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_cond_style_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& group_by_uid(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::IndexedUidsArchive& uids(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::RangeCoordinateArchive& table_range(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_table_range(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::UUID& insert_at_uid(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_insert_at_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& insert_opposite_uid(const ColumnOrRowUuidsInfoArchive* msg);
  static void set_has_insert_opposite_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000009f) ^ 0x0000009f) != 0;
  }
};

const ::TSP::UUID&
ColumnOrRowUuidsInfoArchive::_Internal::table_uid(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->_impl_.table_uid_;
}
const ::TSP::UUID&
ColumnOrRowUuidsInfoArchive::_Internal::cond_style_owner_uid(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->_impl_.cond_style_owner_uid_;
}
const ::TSP::UUID&
ColumnOrRowUuidsInfoArchive::_Internal::group_by_uid(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->_impl_.group_by_uid_;
}
const ::TSCE::IndexedUidsArchive&
ColumnOrRowUuidsInfoArchive::_Internal::uids(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->_impl_.uids_;
}
const ::TSCE::RangeCoordinateArchive&
ColumnOrRowUuidsInfoArchive::_Internal::table_range(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->_impl_.table_range_;
}
const ::TSP::UUID&
ColumnOrRowUuidsInfoArchive::_Internal::insert_at_uid(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->_impl_.insert_at_uid_;
}
const ::TSP::UUID&
ColumnOrRowUuidsInfoArchive::_Internal::insert_opposite_uid(const ColumnOrRowUuidsInfoArchive* msg) {
  return *msg->_impl_.insert_opposite_uid_;
}
void ColumnOrRowUuidsInfoArchive::clear_table_uid() {
  if (_impl_.table_uid_ != nullptr) _impl_.table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ColumnOrRowUuidsInfoArchive::clear_cond_style_owner_uid() {
  if (_impl_.cond_style_owner_uid_ != nullptr) _impl_.cond_style_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ColumnOrRowUuidsInfoArchive::clear_group_by_uid() {
  if (_impl_.group_by_uid_ != nullptr) _impl_.group_by_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ColumnOrRowUuidsInfoArchive::clear_insert_at_uid() {
  if (_impl_.insert_at_uid_ != nullptr) _impl_.insert_at_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void ColumnOrRowUuidsInfoArchive::clear_insert_opposite_uid() {
  if (_impl_.insert_opposite_uid_ != nullptr) _impl_.insert_opposite_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
ColumnOrRowUuidsInfoArchive::ColumnOrRowUuidsInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ColumnOrRowUuidsInfoArchive)
}
ColumnOrRowUuidsInfoArchive::ColumnOrRowUuidsInfoArchive(const ColumnOrRowUuidsInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnOrRowUuidsInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_entries_){from._impl_.range_entries_}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.cond_style_owner_uid_){nullptr}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.uids_){nullptr}
    , decltype(_impl_.table_range_){nullptr}
    , decltype(_impl_.insert_at_uid_){nullptr}
    , decltype(_impl_.insert_opposite_uid_){nullptr}
    , decltype(_impl_.is_rows_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    _this->_impl_.table_uid_ = new ::TSP::UUID(*from._impl_.table_uid_);
  }
  if (from._internal_has_cond_style_owner_uid()) {
    _this->_impl_.cond_style_owner_uid_ = new ::TSP::UUID(*from._impl_.cond_style_owner_uid_);
  }
  if (from._internal_has_group_by_uid()) {
    _this->_impl_.group_by_uid_ = new ::TSP::UUID(*from._impl_.group_by_uid_);
  }
  if (from._internal_has_uids()) {
    _this->_impl_.uids_ = new ::TSCE::IndexedUidsArchive(*from._impl_.uids_);
  }
  if (from._internal_has_table_range()) {
    _this->_impl_.table_range_ = new ::TSCE::RangeCoordinateArchive(*from._impl_.table_range_);
  }
  if (from._internal_has_insert_at_uid()) {
    _this->_impl_.insert_at_uid_ = new ::TSP::UUID(*from._impl_.insert_at_uid_);
  }
  if (from._internal_has_insert_opposite_uid()) {
    _this->_impl_.insert_opposite_uid_ = new ::TSP::UUID(*from._impl_.insert_opposite_uid_);
  }
  _this->_impl_.is_rows_ = from._impl_.is_rows_;
  // @@protoc_insertion_point(copy_constructor:TSCE.ColumnOrRowUuidsInfoArchive)
}

inline void ColumnOrRowUuidsInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_entries_){arena}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.cond_style_owner_uid_){nullptr}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.uids_){nullptr}
    , decltype(_impl_.table_range_){nullptr}
    , decltype(_impl_.insert_at_uid_){nullptr}
    , decltype(_impl_.insert_opposite_uid_){nullptr}
    , decltype(_impl_.is_rows_){false}
  };
}

ColumnOrRowUuidsInfoArchive::~ColumnOrRowUuidsInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ColumnOrRowUuidsInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnOrRowUuidsInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.range_entries_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.table_uid_;
  if (this != internal_default_instance()) delete _impl_.cond_style_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.group_by_uid_;
  if (this != internal_default_instance()) delete _impl_.uids_;
  if (this != internal_default_instance()) delete _impl_.table_range_;
  if (this != internal_default_instance()) delete _impl_.insert_at_uid_;
  if (this != internal_default_instance()) delete _impl_.insert_opposite_uid_;
}

void ColumnOrRowUuidsInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnOrRowUuidsInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ColumnOrRowUuidsInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_entries_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_uid_ != nullptr);
      _impl_.table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cond_style_owner_uid_ != nullptr);
      _impl_.cond_style_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.group_by_uid_ != nullptr);
      _impl_.group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.uids_ != nullptr);
      _impl_.uids_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.table_range_ != nullptr);
      _impl_.table_range_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.insert_at_uid_ != nullptr);
      _impl_.insert_at_uid_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.insert_opposite_uid_ != nullptr);
      _impl_.insert_opposite_uid_->Clear();
    }
  }
  _impl_.is_rows_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnOrRowUuidsInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool is_rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_rows(&has_bits);
          _impl_.is_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID table_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID cond_style_owner_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cond_style_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID group_by_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.IndexedUidsArchive uids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.RewriteRangeEntryArchive range_entries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_range_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.RangeCoordinateArchive table_range = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID insert_at_uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_at_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID insert_opposite_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_insert_opposite_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnOrRowUuidsInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ColumnOrRowUuidsInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool is_rows = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_rows(), target);
  }

  // required .TSP.UUID table_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table_uid(this),
        _Internal::table_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID cond_style_owner_uid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cond_style_owner_uid(this),
        _Internal::cond_style_owner_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID group_by_uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::group_by_uid(this),
        _Internal::group_by_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.IndexedUidsArchive uids = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::uids(this),
        _Internal::uids(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.RewriteRangeEntryArchive range_entries = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_range_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_range_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSCE.RangeCoordinateArchive table_range = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::table_range(this),
        _Internal::table_range(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID insert_at_uid = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::insert_at_uid(this),
        _Internal::insert_at_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID insert_opposite_uid = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::insert_opposite_uid(this),
        _Internal::insert_opposite_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ColumnOrRowUuidsInfoArchive)
  return target;
}

size_t ColumnOrRowUuidsInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ColumnOrRowUuidsInfoArchive)
  size_t total_size = 0;

  if (_internal_has_table_uid()) {
    // required .TSP.UUID table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_uid_);
  }

  if (_internal_has_cond_style_owner_uid()) {
    // required .TSP.UUID cond_style_owner_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cond_style_owner_uid_);
  }

  if (_internal_has_group_by_uid()) {
    // required .TSP.UUID group_by_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);
  }

  if (_internal_has_uids()) {
    // required .TSCE.IndexedUidsArchive uids = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uids_);
  }

  if (_internal_has_table_range()) {
    // required .TSCE.RangeCoordinateArchive table_range = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_range_);
  }

  if (_internal_has_is_rows()) {
    // required bool is_rows = 1;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ColumnOrRowUuidsInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ColumnOrRowUuidsInfoArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000009f) ^ 0x0000009f) == 0) {  // All required fields are present.
    // required .TSP.UUID table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_uid_);

    // required .TSP.UUID cond_style_owner_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cond_style_owner_uid_);

    // required .TSP.UUID group_by_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_uid_);

    // required .TSCE.IndexedUidsArchive uids = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uids_);

    // required .TSCE.RangeCoordinateArchive table_range = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_range_);

    // required bool is_rows = 1;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.RewriteRangeEntryArchive range_entries = 6;
  total_size += 1UL * this->_internal_range_entries_size();
  for (const auto& msg : this->_impl_.range_entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000060u) {
    // optional .TSP.UUID insert_at_uid = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.insert_at_uid_);
    }

    // optional .TSP.UUID insert_opposite_uid = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.insert_opposite_uid_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnOrRowUuidsInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnOrRowUuidsInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnOrRowUuidsInfoArchive::GetClassData() const { return &_class_data_; }


void ColumnOrRowUuidsInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnOrRowUuidsInfoArchive*>(&to_msg);
  auto& from = static_cast<const ColumnOrRowUuidsInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ColumnOrRowUuidsInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.range_entries_.MergeFrom(from._impl_.range_entries_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cond_style_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_cond_style_owner_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(
          from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_uids()->::TSCE::IndexedUidsArchive::MergeFrom(
          from._internal_uids());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_table_range()->::TSCE::RangeCoordinateArchive::MergeFrom(
          from._internal_table_range());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_insert_at_uid()->::TSP::UUID::MergeFrom(
          from._internal_insert_at_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_insert_opposite_uid()->::TSP::UUID::MergeFrom(
          from._internal_insert_opposite_uid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_rows_ = from._impl_.is_rows_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnOrRowUuidsInfoArchive::CopyFrom(const ColumnOrRowUuidsInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ColumnOrRowUuidsInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnOrRowUuidsInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.range_entries_))
    return false;
  if (_internal_has_table_uid()) {
    if (!_impl_.table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cond_style_owner_uid()) {
    if (!_impl_.cond_style_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_by_uid()) {
    if (!_impl_.group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_uids()) {
    if (!_impl_.uids_->IsInitialized()) return false;
  }
  if (_internal_has_table_range()) {
    if (!_impl_.table_range_->IsInitialized()) return false;
  }
  if (_internal_has_insert_at_uid()) {
    if (!_impl_.insert_at_uid_->IsInitialized()) return false;
  }
  if (_internal_has_insert_opposite_uid()) {
    if (!_impl_.insert_opposite_uid_->IsInitialized()) return false;
  }
  return true;
}

void ColumnOrRowUuidsInfoArchive::InternalSwap(ColumnOrRowUuidsInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.range_entries_.InternalSwap(&other->_impl_.range_entries_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnOrRowUuidsInfoArchive, _impl_.is_rows_)
      + sizeof(ColumnOrRowUuidsInfoArchive::_impl_.is_rows_)
      - PROTOBUF_FIELD_OFFSET(ColumnOrRowUuidsInfoArchive, _impl_.table_uid_)>(
          reinterpret_cast<char*>(&_impl_.table_uid_),
          reinterpret_cast<char*>(&other->_impl_.table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnOrRowUuidsInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[120]);
}

// ===================================================================

class RegionInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionInfoArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& table_uid(const RegionInfoArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::IndexedUidsArchive& column_uids(const RegionInfoArchive* msg);
  static void set_has_column_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::IndexedUidsArchive& row_uids(const RegionInfoArchive* msg);
  static void set_has_row_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSP::UUID&
RegionInfoArchive::_Internal::table_uid(const RegionInfoArchive* msg) {
  return *msg->_impl_.table_uid_;
}
const ::TSCE::IndexedUidsArchive&
RegionInfoArchive::_Internal::column_uids(const RegionInfoArchive* msg) {
  return *msg->_impl_.column_uids_;
}
const ::TSCE::IndexedUidsArchive&
RegionInfoArchive::_Internal::row_uids(const RegionInfoArchive* msg) {
  return *msg->_impl_.row_uids_;
}
void RegionInfoArchive::clear_table_uid() {
  if (_impl_.table_uid_ != nullptr) _impl_.table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
RegionInfoArchive::RegionInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RegionInfoArchive)
}
RegionInfoArchive::RegionInfoArchive(const RegionInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegionInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.column_uids_){nullptr}
    , decltype(_impl_.row_uids_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    _this->_impl_.table_uid_ = new ::TSP::UUID(*from._impl_.table_uid_);
  }
  if (from._internal_has_column_uids()) {
    _this->_impl_.column_uids_ = new ::TSCE::IndexedUidsArchive(*from._impl_.column_uids_);
  }
  if (from._internal_has_row_uids()) {
    _this->_impl_.row_uids_ = new ::TSCE::IndexedUidsArchive(*from._impl_.row_uids_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.RegionInfoArchive)
}

inline void RegionInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.column_uids_){nullptr}
    , decltype(_impl_.row_uids_){nullptr}
  };
}

RegionInfoArchive::~RegionInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RegionInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_uid_;
  if (this != internal_default_instance()) delete _impl_.column_uids_;
  if (this != internal_default_instance()) delete _impl_.row_uids_;
}

void RegionInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RegionInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_uid_ != nullptr);
      _impl_.table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.column_uids_ != nullptr);
      _impl_.column_uids_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.row_uids_ != nullptr);
      _impl_.row_uids_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID table_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.IndexedUidsArchive column_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.IndexedUidsArchive row_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RegionInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID table_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_uid(this),
        _Internal::table_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.IndexedUidsArchive column_uids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::column_uids(this),
        _Internal::column_uids(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.IndexedUidsArchive row_uids = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::row_uids(this),
        _Internal::row_uids(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RegionInfoArchive)
  return target;
}

size_t RegionInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RegionInfoArchive)
  size_t total_size = 0;

  if (_internal_has_table_uid()) {
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_uid_);
  }

  if (_internal_has_column_uids()) {
    // required .TSCE.IndexedUidsArchive column_uids = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uids_);
  }

  if (_internal_has_row_uids()) {
    // required .TSCE.IndexedUidsArchive row_uids = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.row_uids_);
  }

  return total_size;
}
size_t RegionInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RegionInfoArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSP.UUID table_uid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_uid_);

    // required .TSCE.IndexedUidsArchive column_uids = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uids_);

    // required .TSCE.IndexedUidsArchive row_uids = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.row_uids_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegionInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionInfoArchive::GetClassData() const { return &_class_data_; }


void RegionInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegionInfoArchive*>(&to_msg);
  auto& from = static_cast<const RegionInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RegionInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_column_uids()->::TSCE::IndexedUidsArchive::MergeFrom(
          from._internal_column_uids());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_row_uids()->::TSCE::IndexedUidsArchive::MergeFrom(
          from._internal_row_uids());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionInfoArchive::CopyFrom(const RegionInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RegionInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_table_uid()) {
    if (!_impl_.table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_column_uids()) {
    if (!_impl_.column_uids_->IsInitialized()) return false;
  }
  if (_internal_has_row_uids()) {
    if (!_impl_.row_uids_->IsInitialized()) return false;
  }
  return true;
}

void RegionInfoArchive::InternalSwap(RegionInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionInfoArchive, _impl_.row_uids_)
      + sizeof(RegionInfoArchive::_impl_.row_uids_)
      - PROTOBUF_FIELD_OFFSET(RegionInfoArchive, _impl_.table_uid_)>(
          reinterpret_cast<char*>(&_impl_.table_uid_),
          reinterpret_cast<char*>(&other->_impl_.table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[121]);
}

// ===================================================================

class RegionMovedInfoArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionMovedInfoArchive>()._impl_._has_bits_);
  static const ::TSCE::RegionInfoArchive& src_region(const RegionMovedInfoArchive* msg);
  static void set_has_src_region(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::RegionInfoArchive& dst_region(const RegionMovedInfoArchive* msg);
  static void set_has_dst_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_span_rows(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_span_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::RegionInfoArchive& original_src_region(const RegionMovedInfoArchive* msg);
  static void set_has_original_src_region(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& final_dest_table_uid(const RegionMovedInfoArchive* msg);
  static void set_has_final_dest_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::RegionInfoArchive&
RegionMovedInfoArchive::_Internal::src_region(const RegionMovedInfoArchive* msg) {
  return *msg->_impl_.src_region_;
}
const ::TSCE::RegionInfoArchive&
RegionMovedInfoArchive::_Internal::dst_region(const RegionMovedInfoArchive* msg) {
  return *msg->_impl_.dst_region_;
}
const ::TSCE::RegionInfoArchive&
RegionMovedInfoArchive::_Internal::original_src_region(const RegionMovedInfoArchive* msg) {
  return *msg->_impl_.original_src_region_;
}
const ::TSP::UUID&
RegionMovedInfoArchive::_Internal::final_dest_table_uid(const RegionMovedInfoArchive* msg) {
  return *msg->_impl_.final_dest_table_uid_;
}
void RegionMovedInfoArchive::clear_final_dest_table_uid() {
  if (_impl_.final_dest_table_uid_ != nullptr) _impl_.final_dest_table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
RegionMovedInfoArchive::RegionMovedInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.RegionMovedInfoArchive)
}
RegionMovedInfoArchive::RegionMovedInfoArchive(const RegionMovedInfoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegionMovedInfoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.src_region_){nullptr}
    , decltype(_impl_.dst_region_){nullptr}
    , decltype(_impl_.original_src_region_){nullptr}
    , decltype(_impl_.final_dest_table_uid_){nullptr}
    , decltype(_impl_.span_rows_){}
    , decltype(_impl_.span_columns_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_src_region()) {
    _this->_impl_.src_region_ = new ::TSCE::RegionInfoArchive(*from._impl_.src_region_);
  }
  if (from._internal_has_dst_region()) {
    _this->_impl_.dst_region_ = new ::TSCE::RegionInfoArchive(*from._impl_.dst_region_);
  }
  if (from._internal_has_original_src_region()) {
    _this->_impl_.original_src_region_ = new ::TSCE::RegionInfoArchive(*from._impl_.original_src_region_);
  }
  if (from._internal_has_final_dest_table_uid()) {
    _this->_impl_.final_dest_table_uid_ = new ::TSP::UUID(*from._impl_.final_dest_table_uid_);
  }
  ::memcpy(&_impl_.span_rows_, &from._impl_.span_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.span_columns_) -
    reinterpret_cast<char*>(&_impl_.span_rows_)) + sizeof(_impl_.span_columns_));
  // @@protoc_insertion_point(copy_constructor:TSCE.RegionMovedInfoArchive)
}

inline void RegionMovedInfoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.src_region_){nullptr}
    , decltype(_impl_.dst_region_){nullptr}
    , decltype(_impl_.original_src_region_){nullptr}
    , decltype(_impl_.final_dest_table_uid_){nullptr}
    , decltype(_impl_.span_rows_){false}
    , decltype(_impl_.span_columns_){false}
  };
}

RegionMovedInfoArchive::~RegionMovedInfoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.RegionMovedInfoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionMovedInfoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.src_region_;
  if (this != internal_default_instance()) delete _impl_.dst_region_;
  if (this != internal_default_instance()) delete _impl_.original_src_region_;
  if (this != internal_default_instance()) delete _impl_.final_dest_table_uid_;
}

void RegionMovedInfoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionMovedInfoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.RegionMovedInfoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.src_region_ != nullptr);
      _impl_.src_region_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.dst_region_ != nullptr);
      _impl_.dst_region_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.original_src_region_ != nullptr);
      _impl_.original_src_region_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.final_dest_table_uid_ != nullptr);
      _impl_.final_dest_table_uid_->Clear();
    }
  }
  ::memset(&_impl_.span_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.span_columns_) -
      reinterpret_cast<char*>(&_impl_.span_rows_)) + sizeof(_impl_.span_columns_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionMovedInfoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.RegionInfoArchive src_region = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.RegionInfoArchive dst_region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool span_rows = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_span_rows(&has_bits);
          _impl_.span_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool span_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_span_columns(&has_bits);
          _impl_.span_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RegionInfoArchive original_src_region = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_src_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID final_dest_table_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_final_dest_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionMovedInfoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.RegionMovedInfoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.RegionInfoArchive src_region = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::src_region(this),
        _Internal::src_region(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.RegionInfoArchive dst_region = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dst_region(this),
        _Internal::dst_region(this).GetCachedSize(), target, stream);
  }

  // optional bool span_rows = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_span_rows(), target);
  }

  // optional bool span_columns = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_span_columns(), target);
  }

  // optional .TSCE.RegionInfoArchive original_src_region = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::original_src_region(this),
        _Internal::original_src_region(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID final_dest_table_uid = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::final_dest_table_uid(this),
        _Internal::final_dest_table_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.RegionMovedInfoArchive)
  return target;
}

size_t RegionMovedInfoArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.RegionMovedInfoArchive)
  size_t total_size = 0;

  if (_internal_has_src_region()) {
    // required .TSCE.RegionInfoArchive src_region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.src_region_);
  }

  if (_internal_has_dst_region()) {
    // required .TSCE.RegionInfoArchive dst_region = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dst_region_);
  }

  return total_size;
}
size_t RegionMovedInfoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.RegionMovedInfoArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.RegionInfoArchive src_region = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.src_region_);

    // required .TSCE.RegionInfoArchive dst_region = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dst_region_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSCE.RegionInfoArchive original_src_region = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.original_src_region_);
    }

    // optional .TSP.UUID final_dest_table_uid = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.final_dest_table_uid_);
    }

    // optional bool span_rows = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool span_columns = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionMovedInfoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegionMovedInfoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionMovedInfoArchive::GetClassData() const { return &_class_data_; }


void RegionMovedInfoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegionMovedInfoArchive*>(&to_msg);
  auto& from = static_cast<const RegionMovedInfoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.RegionMovedInfoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_src_region()->::TSCE::RegionInfoArchive::MergeFrom(
          from._internal_src_region());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dst_region()->::TSCE::RegionInfoArchive::MergeFrom(
          from._internal_dst_region());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_original_src_region()->::TSCE::RegionInfoArchive::MergeFrom(
          from._internal_original_src_region());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_final_dest_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_final_dest_table_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.span_rows_ = from._impl_.span_rows_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.span_columns_ = from._impl_.span_columns_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionMovedInfoArchive::CopyFrom(const RegionMovedInfoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.RegionMovedInfoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionMovedInfoArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_src_region()) {
    if (!_impl_.src_region_->IsInitialized()) return false;
  }
  if (_internal_has_dst_region()) {
    if (!_impl_.dst_region_->IsInitialized()) return false;
  }
  if (_internal_has_original_src_region()) {
    if (!_impl_.original_src_region_->IsInitialized()) return false;
  }
  if (_internal_has_final_dest_table_uid()) {
    if (!_impl_.final_dest_table_uid_->IsInitialized()) return false;
  }
  return true;
}

void RegionMovedInfoArchive::InternalSwap(RegionMovedInfoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionMovedInfoArchive, _impl_.span_columns_)
      + sizeof(RegionMovedInfoArchive::_impl_.span_columns_)
      - PROTOBUF_FIELD_OFFSET(RegionMovedInfoArchive, _impl_.src_region_)>(
          reinterpret_cast<char*>(&_impl_.src_region_),
          reinterpret_cast<char*>(&other->_impl_.src_region_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionMovedInfoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[122]);
}

// ===================================================================

class MergeSourceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<MergeSourceArchive>()._impl_._has_bits_);
  static void set_has_coord_column(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_coord_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

MergeSourceArchive::MergeSourceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.MergeSourceArchive)
}
MergeSourceArchive::MergeSourceArchive(const MergeSourceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MergeSourceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coord_column_){}
    , decltype(_impl_.coord_row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.coord_column_, &from._impl_.coord_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.coord_row_) -
    reinterpret_cast<char*>(&_impl_.coord_column_)) + sizeof(_impl_.coord_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.MergeSourceArchive)
}

inline void MergeSourceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.coord_column_){0u}
    , decltype(_impl_.coord_row_){0u}
  };
}

MergeSourceArchive::~MergeSourceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.MergeSourceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MergeSourceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MergeSourceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MergeSourceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.MergeSourceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.coord_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.coord_row_) -
        reinterpret_cast<char*>(&_impl_.coord_column_)) + sizeof(_impl_.coord_row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MergeSourceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 coord_column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_coord_column(&has_bits);
          _impl_.coord_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 coord_row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_coord_row(&has_bits);
          _impl_.coord_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MergeSourceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.MergeSourceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 coord_column = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_coord_column(), target);
  }

  // required uint32 coord_row = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_coord_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.MergeSourceArchive)
  return target;
}

size_t MergeSourceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.MergeSourceArchive)
  size_t total_size = 0;

  if (_internal_has_coord_column()) {
    // required uint32 coord_column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coord_column());
  }

  if (_internal_has_coord_row()) {
    // required uint32 coord_row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coord_row());
  }

  return total_size;
}
size_t MergeSourceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.MergeSourceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 coord_column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coord_column());

    // required uint32 coord_row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_coord_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MergeSourceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MergeSourceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MergeSourceArchive::GetClassData() const { return &_class_data_; }


void MergeSourceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MergeSourceArchive*>(&to_msg);
  auto& from = static_cast<const MergeSourceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.MergeSourceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.coord_column_ = from._impl_.coord_column_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.coord_row_ = from._impl_.coord_row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MergeSourceArchive::CopyFrom(const MergeSourceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.MergeSourceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeSourceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void MergeSourceArchive::InternalSwap(MergeSourceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MergeSourceArchive, _impl_.coord_row_)
      + sizeof(MergeSourceArchive::_impl_.coord_row_)
      - PROTOBUF_FIELD_OFFSET(MergeSourceArchive, _impl_.coord_column_)>(
          reinterpret_cast<char*>(&_impl_.coord_column_),
          reinterpret_cast<char*>(&other->_impl_.coord_column_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MergeSourceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[123]);
}

// ===================================================================

class HauntedOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<HauntedOwnerArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& owner_uid(const HauntedOwnerArchive* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
HauntedOwnerArchive::_Internal::owner_uid(const HauntedOwnerArchive* msg) {
  return *msg->_impl_.owner_uid_;
}
void HauntedOwnerArchive::clear_owner_uid() {
  if (_impl_.owner_uid_ != nullptr) _impl_.owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HauntedOwnerArchive::HauntedOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.HauntedOwnerArchive)
}
HauntedOwnerArchive::HauntedOwnerArchive(const HauntedOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HauntedOwnerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_uid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    _this->_impl_.owner_uid_ = new ::TSP::UUID(*from._impl_.owner_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.HauntedOwnerArchive)
}

inline void HauntedOwnerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.owner_uid_){nullptr}
  };
}

HauntedOwnerArchive::~HauntedOwnerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.HauntedOwnerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HauntedOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.owner_uid_;
}

void HauntedOwnerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HauntedOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.HauntedOwnerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_uid_ != nullptr);
    _impl_.owner_uid_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HauntedOwnerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID owner_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HauntedOwnerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.HauntedOwnerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID owner_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::owner_uid(this),
        _Internal::owner_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.HauntedOwnerArchive)
  return target;
}

size_t HauntedOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.HauntedOwnerArchive)
  size_t total_size = 0;

  // required .TSP.UUID owner_uid = 1;
  if (_internal_has_owner_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HauntedOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HauntedOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HauntedOwnerArchive::GetClassData() const { return &_class_data_; }


void HauntedOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HauntedOwnerArchive*>(&to_msg);
  auto& from = static_cast<const HauntedOwnerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.HauntedOwnerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_owner_uid()) {
    _this->_internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(
        from._internal_owner_uid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HauntedOwnerArchive::CopyFrom(const HauntedOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.HauntedOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HauntedOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_owner_uid()) {
    if (!_impl_.owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void HauntedOwnerArchive::InternalSwap(HauntedOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.owner_uid_, other->_impl_.owner_uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HauntedOwnerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[124]);
}

// ===================================================================

class CellCoordinateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellCoordinateArchive>()._impl_._has_bits_);
  static void set_has_packeddata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

CellCoordinateArchive::CellCoordinateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordinateArchive)
}
CellCoordinateArchive::CellCoordinateArchive(const CellCoordinateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellCoordinateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packeddata_){}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.packeddata_, &from._impl_.packeddata_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_) -
    reinterpret_cast<char*>(&_impl_.packeddata_)) + sizeof(_impl_.row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordinateArchive)
}

inline void CellCoordinateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.packeddata_){0u}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.row_){0u}
  };
}

CellCoordinateArchive::~CellCoordinateArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordinateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellCoordinateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CellCoordinateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellCoordinateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordinateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.packeddata_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.row_) -
        reinterpret_cast<char*>(&_impl_.packeddata_)) + sizeof(_impl_.row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordinateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 packedData = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_packeddata(&has_bits);
          _impl_.packeddata_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellCoordinateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordinateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 packedData = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_packeddata(), target);
  }

  // optional uint32 column = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_column(), target);
  }

  // optional uint32 row = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordinateArchive)
  return target;
}

size_t CellCoordinateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordinateArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed32 packedData = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional uint32 column = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
    }

    // optional uint32 row = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellCoordinateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellCoordinateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellCoordinateArchive::GetClassData() const { return &_class_data_; }


void CellCoordinateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellCoordinateArchive*>(&to_msg);
  auto& from = static_cast<const CellCoordinateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordinateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.packeddata_ = from._impl_.packeddata_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellCoordinateArchive::CopyFrom(const CellCoordinateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordinateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateArchive::IsInitialized() const {
  return true;
}

void CellCoordinateArchive::InternalSwap(CellCoordinateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellCoordinateArchive, _impl_.row_)
      + sizeof(CellCoordinateArchive::_impl_.row_)
      - PROTOBUF_FIELD_OFFSET(CellCoordinateArchive, _impl_.packeddata_)>(
          reinterpret_cast<char*>(&_impl_.packeddata_),
          reinterpret_cast<char*>(&other->_impl_.packeddata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordinateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[125]);
}

// ===================================================================

class CellCoordinateVectorArchive::_Internal {
 public:
};

CellCoordinateVectorArchive::CellCoordinateVectorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellCoordinateVectorArchive)
}
CellCoordinateVectorArchive::CellCoordinateVectorArchive(const CellCoordinateVectorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellCoordinateVectorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_coord_){from._impl_.cell_coord_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.CellCoordinateVectorArchive)
}

inline void CellCoordinateVectorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_coord_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CellCoordinateVectorArchive::~CellCoordinateVectorArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellCoordinateVectorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellCoordinateVectorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_coord_.~RepeatedPtrField();
}

void CellCoordinateVectorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellCoordinateVectorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellCoordinateVectorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_coord_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellCoordinateVectorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.CellCoordinateArchive cell_coord = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_coord(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellCoordinateVectorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellCoordinateVectorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateArchive cell_coord = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_coord_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_coord(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellCoordinateVectorArchive)
  return target;
}

size_t CellCoordinateVectorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellCoordinateVectorArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.CellCoordinateArchive cell_coord = 1;
  total_size += 1UL * this->_internal_cell_coord_size();
  for (const auto& msg : this->_impl_.cell_coord_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellCoordinateVectorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellCoordinateVectorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellCoordinateVectorArchive::GetClassData() const { return &_class_data_; }


void CellCoordinateVectorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellCoordinateVectorArchive*>(&to_msg);
  auto& from = static_cast<const CellCoordinateVectorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellCoordinateVectorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_coord_.MergeFrom(from._impl_.cell_coord_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellCoordinateVectorArchive::CopyFrom(const CellCoordinateVectorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellCoordinateVectorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellCoordinateVectorArchive::IsInitialized() const {
  return true;
}

void CellCoordinateVectorArchive::InternalSwap(CellCoordinateVectorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_coord_.InternalSwap(&other->_impl_.cell_coord_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellCoordinateVectorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[126]);
}

// ===================================================================

class ExpandedCellRefObjectPairArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpandedCellRefObjectPairArchive>()._impl_._has_bits_);
  static const ::TSCE::CellReferenceArchive& cell_ref(const ExpandedCellRefObjectPairArchive* msg);
  static void set_has_cell_ref(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& object(const ExpandedCellRefObjectPairArchive* msg);
  static void set_has_object(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::CellReferenceArchive&
ExpandedCellRefObjectPairArchive::_Internal::cell_ref(const ExpandedCellRefObjectPairArchive* msg) {
  return *msg->_impl_.cell_ref_;
}
const ::TSP::Reference&
ExpandedCellRefObjectPairArchive::_Internal::object(const ExpandedCellRefObjectPairArchive* msg) {
  return *msg->_impl_.object_;
}
void ExpandedCellRefObjectPairArchive::clear_object() {
  if (_impl_.object_ != nullptr) _impl_.object_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ExpandedCellRefObjectPairArchive::ExpandedCellRefObjectPairArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ExpandedCellRefObjectPairArchive)
}
ExpandedCellRefObjectPairArchive::ExpandedCellRefObjectPairArchive(const ExpandedCellRefObjectPairArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpandedCellRefObjectPairArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_ref_){nullptr}
    , decltype(_impl_.object_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_ref()) {
    _this->_impl_.cell_ref_ = new ::TSCE::CellReferenceArchive(*from._impl_.cell_ref_);
  }
  if (from._internal_has_object()) {
    _this->_impl_.object_ = new ::TSP::Reference(*from._impl_.object_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.ExpandedCellRefObjectPairArchive)
}

inline void ExpandedCellRefObjectPairArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_ref_){nullptr}
    , decltype(_impl_.object_){nullptr}
  };
}

ExpandedCellRefObjectPairArchive::~ExpandedCellRefObjectPairArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ExpandedCellRefObjectPairArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpandedCellRefObjectPairArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_ref_;
  if (this != internal_default_instance()) delete _impl_.object_;
}

void ExpandedCellRefObjectPairArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpandedCellRefObjectPairArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ExpandedCellRefObjectPairArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cell_ref_ != nullptr);
      _impl_.cell_ref_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.object_ != nullptr);
      _impl_.object_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedCellRefObjectPairArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellReferenceArchive cell_ref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_ref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference object = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpandedCellRefObjectPairArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ExpandedCellRefObjectPairArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellReferenceArchive cell_ref = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell_ref(this),
        _Internal::cell_ref(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference object = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::object(this),
        _Internal::object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ExpandedCellRefObjectPairArchive)
  return target;
}

size_t ExpandedCellRefObjectPairArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ExpandedCellRefObjectPairArchive)
  size_t total_size = 0;

  if (_internal_has_cell_ref()) {
    // required .TSCE.CellReferenceArchive cell_ref = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_ref_);
  }

  if (_internal_has_object()) {
    // required .TSP.Reference object = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);
  }

  return total_size;
}
size_t ExpandedCellRefObjectPairArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ExpandedCellRefObjectPairArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.CellReferenceArchive cell_ref = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_ref_);

    // required .TSP.Reference object = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.object_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandedCellRefObjectPairArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpandedCellRefObjectPairArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandedCellRefObjectPairArchive::GetClassData() const { return &_class_data_; }


void ExpandedCellRefObjectPairArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpandedCellRefObjectPairArchive*>(&to_msg);
  auto& from = static_cast<const ExpandedCellRefObjectPairArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ExpandedCellRefObjectPairArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_ref()->::TSCE::CellReferenceArchive::MergeFrom(
          from._internal_cell_ref());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_object()->::TSP::Reference::MergeFrom(
          from._internal_object());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandedCellRefObjectPairArchive::CopyFrom(const ExpandedCellRefObjectPairArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ExpandedCellRefObjectPairArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedCellRefObjectPairArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_ref()) {
    if (!_impl_.cell_ref_->IsInitialized()) return false;
  }
  if (_internal_has_object()) {
    if (!_impl_.object_->IsInitialized()) return false;
  }
  return true;
}

void ExpandedCellRefObjectPairArchive::InternalSwap(ExpandedCellRefObjectPairArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpandedCellRefObjectPairArchive, _impl_.object_)
      + sizeof(ExpandedCellRefObjectPairArchive::_impl_.object_)
      - PROTOBUF_FIELD_OFFSET(ExpandedCellRefObjectPairArchive, _impl_.cell_ref_)>(
          reinterpret_cast<char*>(&_impl_.cell_ref_),
          reinterpret_cast<char*>(&other->_impl_.cell_ref_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedCellRefObjectPairArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[127]);
}

// ===================================================================

class ExpandedCellRefObjectMapArchive::_Internal {
 public:
};

ExpandedCellRefObjectMapArchive::ExpandedCellRefObjectMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ExpandedCellRefObjectMapArchive)
}
ExpandedCellRefObjectMapArchive::ExpandedCellRefObjectMapArchive(const ExpandedCellRefObjectMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpandedCellRefObjectMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_ref_object_pair_){from._impl_.cell_ref_object_pair_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.ExpandedCellRefObjectMapArchive)
}

inline void ExpandedCellRefObjectMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cell_ref_object_pair_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExpandedCellRefObjectMapArchive::~ExpandedCellRefObjectMapArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ExpandedCellRefObjectMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpandedCellRefObjectMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_ref_object_pair_.~RepeatedPtrField();
}

void ExpandedCellRefObjectMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpandedCellRefObjectMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ExpandedCellRefObjectMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_ref_object_pair_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedCellRefObjectMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.ExpandedCellRefObjectPairArchive cell_ref_object_pair = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_ref_object_pair(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpandedCellRefObjectMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ExpandedCellRefObjectMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.ExpandedCellRefObjectPairArchive cell_ref_object_pair = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cell_ref_object_pair_size()); i < n; i++) {
    const auto& repfield = this->_internal_cell_ref_object_pair(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ExpandedCellRefObjectMapArchive)
  return target;
}

size_t ExpandedCellRefObjectMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ExpandedCellRefObjectMapArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.ExpandedCellRefObjectPairArchive cell_ref_object_pair = 1;
  total_size += 1UL * this->_internal_cell_ref_object_pair_size();
  for (const auto& msg : this->_impl_.cell_ref_object_pair_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandedCellRefObjectMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpandedCellRefObjectMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandedCellRefObjectMapArchive::GetClassData() const { return &_class_data_; }


void ExpandedCellRefObjectMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpandedCellRefObjectMapArchive*>(&to_msg);
  auto& from = static_cast<const ExpandedCellRefObjectMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ExpandedCellRefObjectMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_ref_object_pair_.MergeFrom(from._impl_.cell_ref_object_pair_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandedCellRefObjectMapArchive::CopyFrom(const ExpandedCellRefObjectMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ExpandedCellRefObjectMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedCellRefObjectMapArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.cell_ref_object_pair_))
    return false;
  return true;
}

void ExpandedCellRefObjectMapArchive::InternalSwap(ExpandedCellRefObjectMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cell_ref_object_pair_.InternalSwap(&other->_impl_.cell_ref_object_pair_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedCellRefObjectMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[128]);
}

// ===================================================================

class FormulaAtCoordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaAtCoordArchive>()._impl_._has_bits_);
  static void set_has_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::FormulaArchive& formula(const FormulaAtCoordArchive* msg);
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_repeat_previous_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSCE::FormulaArchive&
FormulaAtCoordArchive::_Internal::formula(const FormulaAtCoordArchive* msg) {
  return *msg->_impl_.formula_;
}
FormulaAtCoordArchive::FormulaAtCoordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaAtCoordArchive)
}
FormulaAtCoordArchive::FormulaAtCoordArchive(const FormulaAtCoordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaAtCoordArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.column_){}
    , decltype(_impl_.row_){}
    , decltype(_impl_.repeat_previous_formula_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_formula()) {
    _this->_impl_.formula_ = new ::TSCE::FormulaArchive(*from._impl_.formula_);
  }
  ::memcpy(&_impl_.column_, &from._impl_.column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.repeat_previous_formula_) -
    reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.repeat_previous_formula_));
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaAtCoordArchive)
}

inline void FormulaAtCoordArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_){nullptr}
    , decltype(_impl_.column_){0u}
    , decltype(_impl_.row_){0u}
    , decltype(_impl_.repeat_previous_formula_){false}
  };
}

FormulaAtCoordArchive::~FormulaAtCoordArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaAtCoordArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaAtCoordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.formula_;
}

void FormulaAtCoordArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaAtCoordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaAtCoordArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.formula_ != nullptr);
    _impl_.formula_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.repeat_previous_formula_) -
        reinterpret_cast<char*>(&_impl_.column_)) + sizeof(_impl_.repeat_previous_formula_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaAtCoordArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 column = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_column(&has_bits);
          _impl_.column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_row(&has_bits);
          _impl_.row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FormulaArchive formula = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool repeat_previous_formula = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_repeat_previous_formula(&has_bits);
          _impl_.repeat_previous_formula_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaAtCoordArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaAtCoordArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 column = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_column(), target);
  }

  // required uint32 row = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_row(), target);
  }

  // optional .TSCE.FormulaArchive formula = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::formula(this),
        _Internal::formula(this).GetCachedSize(), target, stream);
  }

  // optional bool repeat_previous_formula = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_repeat_previous_formula(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaAtCoordArchive)
  return target;
}

size_t FormulaAtCoordArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.FormulaAtCoordArchive)
  size_t total_size = 0;

  if (_internal_has_column()) {
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());
  }

  if (_internal_has_row()) {
    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());
  }

  return total_size;
}
size_t FormulaAtCoordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaAtCoordArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 column = 1;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_column());

    // required uint32 row = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.FormulaArchive formula = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_);
  }

  // optional bool repeat_previous_formula = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaAtCoordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaAtCoordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaAtCoordArchive::GetClassData() const { return &_class_data_; }


void FormulaAtCoordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaAtCoordArchive*>(&to_msg);
  auto& from = static_cast<const FormulaAtCoordArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaAtCoordArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_formula()->::TSCE::FormulaArchive::MergeFrom(
          from._internal_formula());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.column_ = from._impl_.column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.row_ = from._impl_.row_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.repeat_previous_formula_ = from._impl_.repeat_previous_formula_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaAtCoordArchive::CopyFrom(const FormulaAtCoordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaAtCoordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaAtCoordArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_formula()) {
    if (!_impl_.formula_->IsInitialized()) return false;
  }
  return true;
}

void FormulaAtCoordArchive::InternalSwap(FormulaAtCoordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaAtCoordArchive, _impl_.repeat_previous_formula_)
      + sizeof(FormulaAtCoordArchive::_impl_.repeat_previous_formula_)
      - PROTOBUF_FIELD_OFFSET(FormulaAtCoordArchive, _impl_.formula_)>(
          reinterpret_cast<char*>(&_impl_.formula_),
          reinterpret_cast<char*>(&other->_impl_.formula_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaAtCoordArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[129]);
}

// ===================================================================

class FormulaCoordPairsByOwnerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaCoordPairsByOwnerArchive>()._impl_._has_bits_);
  static void set_has_owner_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& owner_uid(const FormulaCoordPairsByOwnerArchive* msg);
  static void set_has_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSP::UUID&
FormulaCoordPairsByOwnerArchive::_Internal::owner_uid(const FormulaCoordPairsByOwnerArchive* msg) {
  return *msg->_impl_.owner_uid_;
}
void FormulaCoordPairsByOwnerArchive::clear_owner_uid() {
  if (_impl_.owner_uid_ != nullptr) _impl_.owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FormulaCoordPairsByOwnerArchive::FormulaCoordPairsByOwnerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaCoordPairsByOwnerArchive)
}
FormulaCoordPairsByOwnerArchive::FormulaCoordPairsByOwnerArchive(const FormulaCoordPairsByOwnerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaCoordPairsByOwnerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_at_coords_){from._impl_.formula_at_coords_}
    , decltype(_impl_.owner_uid_){nullptr}
    , decltype(_impl_.owner_kind_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_owner_uid()) {
    _this->_impl_.owner_uid_ = new ::TSP::UUID(*from._impl_.owner_uid_);
  }
  _this->_impl_.owner_kind_ = from._impl_.owner_kind_;
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaCoordPairsByOwnerArchive)
}

inline void FormulaCoordPairsByOwnerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_at_coords_){arena}
    , decltype(_impl_.owner_uid_){nullptr}
    , decltype(_impl_.owner_kind_){0u}
  };
}

FormulaCoordPairsByOwnerArchive::~FormulaCoordPairsByOwnerArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaCoordPairsByOwnerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaCoordPairsByOwnerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.formula_at_coords_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.owner_uid_;
}

void FormulaCoordPairsByOwnerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaCoordPairsByOwnerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaCoordPairsByOwnerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.formula_at_coords_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.owner_uid_ != nullptr);
    _impl_.owner_uid_->Clear();
  }
  _impl_.owner_kind_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaCoordPairsByOwnerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 owner_kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_owner_kind(&has_bits);
          _impl_.owner_kind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID owner_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaAtCoordArchive formula_at_coords = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_at_coords(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaCoordPairsByOwnerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaCoordPairsByOwnerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 owner_kind = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_owner_kind(), target);
  }

  // optional .TSP.UUID owner_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::owner_uid(this),
        _Internal::owner_uid(this).GetCachedSize(), target, stream);
  }

  // repeated .TSCE.FormulaAtCoordArchive formula_at_coords = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_formula_at_coords_size()); i < n; i++) {
    const auto& repfield = this->_internal_formula_at_coords(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaCoordPairsByOwnerArchive)
  return target;
}

size_t FormulaCoordPairsByOwnerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaCoordPairsByOwnerArchive)
  size_t total_size = 0;

  // required uint32 owner_kind = 1;
  if (_internal_has_owner_kind()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_kind());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.FormulaAtCoordArchive formula_at_coords = 3;
  total_size += 1UL * this->_internal_formula_at_coords_size();
  for (const auto& msg : this->_impl_.formula_at_coords_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.UUID owner_uid = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.owner_uid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaCoordPairsByOwnerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaCoordPairsByOwnerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaCoordPairsByOwnerArchive::GetClassData() const { return &_class_data_; }


void FormulaCoordPairsByOwnerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaCoordPairsByOwnerArchive*>(&to_msg);
  auto& from = static_cast<const FormulaCoordPairsByOwnerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaCoordPairsByOwnerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.formula_at_coords_.MergeFrom(from._impl_.formula_at_coords_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_owner_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.owner_kind_ = from._impl_.owner_kind_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaCoordPairsByOwnerArchive::CopyFrom(const FormulaCoordPairsByOwnerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaCoordPairsByOwnerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaCoordPairsByOwnerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.formula_at_coords_))
    return false;
  if (_internal_has_owner_uid()) {
    if (!_impl_.owner_uid_->IsInitialized()) return false;
  }
  return true;
}

void FormulaCoordPairsByOwnerArchive::InternalSwap(FormulaCoordPairsByOwnerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.formula_at_coords_.InternalSwap(&other->_impl_.formula_at_coords_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaCoordPairsByOwnerArchive, _impl_.owner_kind_)
      + sizeof(FormulaCoordPairsByOwnerArchive::_impl_.owner_kind_)
      - PROTOBUF_FIELD_OFFSET(FormulaCoordPairsByOwnerArchive, _impl_.owner_uid_)>(
          reinterpret_cast<char*>(&_impl_.owner_uid_),
          reinterpret_cast<char*>(&other->_impl_.owner_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaCoordPairsByOwnerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[130]);
}

// ===================================================================

class FormulasForUndoArchive::_Internal {
 public:
};

FormulasForUndoArchive::FormulasForUndoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulasForUndoArchive)
}
FormulasForUndoArchive::FormulasForUndoArchive(const FormulasForUndoArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulasForUndoArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.formulas_for_owner_){from._impl_.formulas_for_owner_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulasForUndoArchive)
}

inline void FormulasForUndoArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.formulas_for_owner_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FormulasForUndoArchive::~FormulasForUndoArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulasForUndoArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulasForUndoArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.formulas_for_owner_.~RepeatedPtrField();
}

void FormulasForUndoArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulasForUndoArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulasForUndoArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.formulas_for_owner_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulasForUndoArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSCE.FormulaCoordPairsByOwnerArchive formulas_for_owner = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formulas_for_owner(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulasForUndoArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulasForUndoArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSCE.FormulaCoordPairsByOwnerArchive formulas_for_owner = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_formulas_for_owner_size()); i < n; i++) {
    const auto& repfield = this->_internal_formulas_for_owner(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulasForUndoArchive)
  return target;
}

size_t FormulasForUndoArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulasForUndoArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSCE.FormulaCoordPairsByOwnerArchive formulas_for_owner = 1;
  total_size += 1UL * this->_internal_formulas_for_owner_size();
  for (const auto& msg : this->_impl_.formulas_for_owner_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulasForUndoArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulasForUndoArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulasForUndoArchive::GetClassData() const { return &_class_data_; }


void FormulasForUndoArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulasForUndoArchive*>(&to_msg);
  auto& from = static_cast<const FormulasForUndoArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulasForUndoArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.formulas_for_owner_.MergeFrom(from._impl_.formulas_for_owner_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulasForUndoArchive::CopyFrom(const FormulasForUndoArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulasForUndoArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulasForUndoArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.formulas_for_owner_))
    return false;
  return true;
}

void FormulasForUndoArchive::InternalSwap(FormulasForUndoArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.formulas_for_owner_.InternalSwap(&other->_impl_.formulas_for_owner_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulasForUndoArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[131]);
}

// ===================================================================

class FormulaRewriteCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaRewriteCommandArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& table_rewrite_command(const FormulaRewriteCommandArchive* msg);
  static void set_has_table_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::CommandArchive& super(const FormulaRewriteCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
FormulaRewriteCommandArchive::_Internal::table_rewrite_command(const FormulaRewriteCommandArchive* msg) {
  return *msg->_impl_.table_rewrite_command_;
}
const ::TSK::CommandArchive&
FormulaRewriteCommandArchive::_Internal::super(const FormulaRewriteCommandArchive* msg) {
  return *msg->_impl_.super_;
}
void FormulaRewriteCommandArchive::clear_table_rewrite_command() {
  if (_impl_.table_rewrite_command_ != nullptr) _impl_.table_rewrite_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FormulaRewriteCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
FormulaRewriteCommandArchive::FormulaRewriteCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.FormulaRewriteCommandArchive)
}
FormulaRewriteCommandArchive::FormulaRewriteCommandArchive(const FormulaRewriteCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaRewriteCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_rewrite_command_){nullptr}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_rewrite_command()) {
    _this->_impl_.table_rewrite_command_ = new ::TSP::Reference(*from._impl_.table_rewrite_command_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.FormulaRewriteCommandArchive)
}

inline void FormulaRewriteCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_rewrite_command_){nullptr}
    , decltype(_impl_.super_){nullptr}
  };
}

FormulaRewriteCommandArchive::~FormulaRewriteCommandArchive() {
  // @@protoc_insertion_point(destructor:TSCE.FormulaRewriteCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaRewriteCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_rewrite_command_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void FormulaRewriteCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaRewriteCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.FormulaRewriteCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_rewrite_command_ != nullptr);
      _impl_.table_rewrite_command_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaRewriteCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference table_rewrite_command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_rewrite_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.CommandArchive super = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaRewriteCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.FormulaRewriteCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference table_rewrite_command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_rewrite_command(this),
        _Internal::table_rewrite_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.CommandArchive super = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.FormulaRewriteCommandArchive)
  return target;
}

size_t FormulaRewriteCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.FormulaRewriteCommandArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference table_rewrite_command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_rewrite_command_);
    }

    // optional .TSK.CommandArchive super = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.super_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaRewriteCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaRewriteCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaRewriteCommandArchive::GetClassData() const { return &_class_data_; }


void FormulaRewriteCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaRewriteCommandArchive*>(&to_msg);
  auto& from = static_cast<const FormulaRewriteCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.FormulaRewriteCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_rewrite_command()->::TSP::Reference::MergeFrom(
          from._internal_table_rewrite_command());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaRewriteCommandArchive::CopyFrom(const FormulaRewriteCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.FormulaRewriteCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaRewriteCommandArchive::IsInitialized() const {
  if (_internal_has_table_rewrite_command()) {
    if (!_impl_.table_rewrite_command_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void FormulaRewriteCommandArchive::InternalSwap(FormulaRewriteCommandArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaRewriteCommandArchive, _impl_.super_)
      + sizeof(FormulaRewriteCommandArchive::_impl_.super_)
      - PROTOBUF_FIELD_OFFSET(FormulaRewriteCommandArchive, _impl_.table_rewrite_command_)>(
          reinterpret_cast<char*>(&_impl_.table_rewrite_command_),
          reinterpret_cast<char*>(&other->_impl_.table_rewrite_command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaRewriteCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[132]);
}

// ===================================================================

class TrackedReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedReferenceArchive>()._impl_._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive& ast(const TrackedReferenceArchive* msg);
  static void set_has_ast(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_formula_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive&
TrackedReferenceArchive::_Internal::ast(const TrackedReferenceArchive* msg) {
  return *msg->_impl_.ast_;
}
TrackedReferenceArchive::TrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.TrackedReferenceArchive)
}
TrackedReferenceArchive::TrackedReferenceArchive(const TrackedReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackedReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_){nullptr}
    , decltype(_impl_.formula_id_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ast()) {
    _this->_impl_.ast_ = new ::TSCE::ASTNodeArrayArchive(*from._impl_.ast_);
  }
  _this->_impl_.formula_id_ = from._impl_.formula_id_;
  // @@protoc_insertion_point(copy_constructor:TSCE.TrackedReferenceArchive)
}

inline void TrackedReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_){nullptr}
    , decltype(_impl_.formula_id_){0u}
  };
}

TrackedReferenceArchive::~TrackedReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.TrackedReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackedReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ast_;
}

void TrackedReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackedReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.TrackedReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ast_ != nullptr);
    _impl_.ast_->Clear();
  }
  _impl_.formula_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive ast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 formula_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_formula_id(&has_bits);
          _impl_.formula_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackedReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.TrackedReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive ast = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ast(this),
        _Internal::ast(this).GetCachedSize(), target, stream);
  }

  // required uint32 formula_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_formula_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.TrackedReferenceArchive)
  return target;
}

size_t TrackedReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.TrackedReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_ast()) {
    // required .TSCE.ASTNodeArrayArchive ast = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ast_);
  }

  if (_internal_has_formula_id()) {
    // required uint32 formula_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_id());
  }

  return total_size;
}
size_t TrackedReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.TrackedReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSCE.ASTNodeArrayArchive ast = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ast_);

    // required uint32 formula_id = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackedReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackedReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackedReferenceArchive::GetClassData() const { return &_class_data_; }


void TrackedReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackedReferenceArchive*>(&to_msg);
  auto& from = static_cast<const TrackedReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.TrackedReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ast()->::TSCE::ASTNodeArrayArchive::MergeFrom(
          from._internal_ast());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.formula_id_ = from._impl_.formula_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackedReferenceArchive::CopyFrom(const TrackedReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.TrackedReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ast()) {
    if (!_impl_.ast_->IsInitialized()) return false;
  }
  return true;
}

void TrackedReferenceArchive::InternalSwap(TrackedReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackedReferenceArchive, _impl_.formula_id_)
      + sizeof(TrackedReferenceArchive::_impl_.formula_id_)
      - PROTOBUF_FIELD_OFFSET(TrackedReferenceArchive, _impl_.ast_)>(
          reinterpret_cast<char*>(&_impl_.ast_),
          reinterpret_cast<char*>(&other->_impl_.ast_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[133]);
}

// ===================================================================

class ExpandedTrackedReferenceArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ExpandedTrackedReferenceArchive>()._impl_._has_bits_);
  static const ::TSCE::ASTNodeArrayArchive& ast(const ExpandedTrackedReferenceArchive* msg);
  static void set_has_ast(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_formula_column(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_formula_row(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TSCE::ASTNodeArrayArchive&
ExpandedTrackedReferenceArchive::_Internal::ast(const ExpandedTrackedReferenceArchive* msg) {
  return *msg->_impl_.ast_;
}
ExpandedTrackedReferenceArchive::ExpandedTrackedReferenceArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ExpandedTrackedReferenceArchive)
}
ExpandedTrackedReferenceArchive::ExpandedTrackedReferenceArchive(const ExpandedTrackedReferenceArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExpandedTrackedReferenceArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_){nullptr}
    , decltype(_impl_.formula_column_){}
    , decltype(_impl_.formula_row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ast()) {
    _this->_impl_.ast_ = new ::TSCE::ASTNodeArrayArchive(*from._impl_.ast_);
  }
  ::memcpy(&_impl_.formula_column_, &from._impl_.formula_column_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.formula_row_) -
    reinterpret_cast<char*>(&_impl_.formula_column_)) + sizeof(_impl_.formula_row_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ExpandedTrackedReferenceArchive)
}

inline void ExpandedTrackedReferenceArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ast_){nullptr}
    , decltype(_impl_.formula_column_){0u}
    , decltype(_impl_.formula_row_){0u}
  };
}

ExpandedTrackedReferenceArchive::~ExpandedTrackedReferenceArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ExpandedTrackedReferenceArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExpandedTrackedReferenceArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ast_;
}

void ExpandedTrackedReferenceArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExpandedTrackedReferenceArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ExpandedTrackedReferenceArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.ast_ != nullptr);
    _impl_.ast_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.formula_column_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.formula_row_) -
        reinterpret_cast<char*>(&_impl_.formula_column_)) + sizeof(_impl_.formula_row_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExpandedTrackedReferenceArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.ASTNodeArrayArchive ast = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ast(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 formula_column = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_formula_column(&has_bits);
          _impl_.formula_column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 formula_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_formula_row(&has_bits);
          _impl_.formula_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExpandedTrackedReferenceArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ExpandedTrackedReferenceArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.ASTNodeArrayArchive ast = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::ast(this),
        _Internal::ast(this).GetCachedSize(), target, stream);
  }

  // required uint32 formula_column = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_formula_column(), target);
  }

  // required uint32 formula_row = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_formula_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ExpandedTrackedReferenceArchive)
  return target;
}

size_t ExpandedTrackedReferenceArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.ExpandedTrackedReferenceArchive)
  size_t total_size = 0;

  if (_internal_has_ast()) {
    // required .TSCE.ASTNodeArrayArchive ast = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ast_);
  }

  if (_internal_has_formula_column()) {
    // required uint32 formula_column = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_column());
  }

  if (_internal_has_formula_row()) {
    // required uint32 formula_row = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_row());
  }

  return total_size;
}
size_t ExpandedTrackedReferenceArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ExpandedTrackedReferenceArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TSCE.ASTNodeArrayArchive ast = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.ast_);

    // required uint32 formula_column = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_column());

    // required uint32 formula_row = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_formula_row());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExpandedTrackedReferenceArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExpandedTrackedReferenceArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExpandedTrackedReferenceArchive::GetClassData() const { return &_class_data_; }


void ExpandedTrackedReferenceArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExpandedTrackedReferenceArchive*>(&to_msg);
  auto& from = static_cast<const ExpandedTrackedReferenceArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ExpandedTrackedReferenceArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ast()->::TSCE::ASTNodeArrayArchive::MergeFrom(
          from._internal_ast());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.formula_column_ = from._impl_.formula_column_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.formula_row_ = from._impl_.formula_row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExpandedTrackedReferenceArchive::CopyFrom(const ExpandedTrackedReferenceArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ExpandedTrackedReferenceArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpandedTrackedReferenceArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_ast()) {
    if (!_impl_.ast_->IsInitialized()) return false;
  }
  return true;
}

void ExpandedTrackedReferenceArchive::InternalSwap(ExpandedTrackedReferenceArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExpandedTrackedReferenceArchive, _impl_.formula_row_)
      + sizeof(ExpandedTrackedReferenceArchive::_impl_.formula_row_)
      - PROTOBUF_FIELD_OFFSET(ExpandedTrackedReferenceArchive, _impl_.ast_)>(
          reinterpret_cast<char*>(&_impl_.ast_),
          reinterpret_cast<char*>(&other->_impl_.ast_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpandedTrackedReferenceArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[134]);
}

// ===================================================================

class TrackedReferenceStoreArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackedReferenceStoreArchive>()._impl_._has_bits_);
  static const ::TSP::CFUUIDArchive& uuid(const TrackedReferenceStoreArchive* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::CFUUIDArchive&
TrackedReferenceStoreArchive::_Internal::uuid(const TrackedReferenceStoreArchive* msg) {
  return *msg->_impl_.uuid_;
}
void TrackedReferenceStoreArchive::clear_uuid() {
  if (_impl_.uuid_ != nullptr) _impl_.uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TrackedReferenceStoreArchive::clear_tracked_reference() {
  _impl_.tracked_reference_.Clear();
}
TrackedReferenceStoreArchive::TrackedReferenceStoreArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.TrackedReferenceStoreArchive)
}
TrackedReferenceStoreArchive::TrackedReferenceStoreArchive(const TrackedReferenceStoreArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackedReferenceStoreArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracked_reference_){from._impl_.tracked_reference_}
    , decltype(_impl_.contained_tracked_reference_){from._impl_.contained_tracked_reference_}
    , decltype(_impl_.contained_expanded_tracked_reference_){from._impl_.contained_expanded_tracked_reference_}
    , decltype(_impl_.uuid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_ = new ::TSP::CFUUIDArchive(*from._impl_.uuid_);
  }
  // @@protoc_insertion_point(copy_constructor:TSCE.TrackedReferenceStoreArchive)
}

inline void TrackedReferenceStoreArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tracked_reference_){arena}
    , decltype(_impl_.contained_tracked_reference_){arena}
    , decltype(_impl_.contained_expanded_tracked_reference_){arena}
    , decltype(_impl_.uuid_){nullptr}
  };
}

TrackedReferenceStoreArchive::~TrackedReferenceStoreArchive() {
  // @@protoc_insertion_point(destructor:TSCE.TrackedReferenceStoreArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackedReferenceStoreArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tracked_reference_.~RepeatedPtrField();
  _impl_.contained_tracked_reference_.~RepeatedPtrField();
  _impl_.contained_expanded_tracked_reference_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.uuid_;
}

void TrackedReferenceStoreArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackedReferenceStoreArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.TrackedReferenceStoreArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tracked_reference_.Clear();
  _impl_.contained_tracked_reference_.Clear();
  _impl_.contained_expanded_tracked_reference_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.uuid_ != nullptr);
    _impl_.uuid_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackedReferenceStoreArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.CFUUIDArchive uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tracked_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contained_tracked_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.ExpandedTrackedReferenceArchive contained_expanded_tracked_reference = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contained_expanded_tracked_reference(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackedReferenceStoreArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.TrackedReferenceStoreArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.CFUUIDArchive uuid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::uuid(this),
        _Internal::uuid(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tracked_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_tracked_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contained_tracked_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_contained_tracked_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.ExpandedTrackedReferenceArchive contained_expanded_tracked_reference = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contained_expanded_tracked_reference_size()); i < n; i++) {
    const auto& repfield = this->_internal_contained_expanded_tracked_reference(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.TrackedReferenceStoreArchive)
  return target;
}

size_t TrackedReferenceStoreArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.TrackedReferenceStoreArchive)
  size_t total_size = 0;

  // required .TSP.CFUUIDArchive uuid = 1;
  if (_internal_has_uuid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.uuid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference tracked_reference = 2 [deprecated = true];
  total_size += 1UL * this->_internal_tracked_reference_size();
  for (const auto& msg : this->_impl_.tracked_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.TrackedReferenceArchive contained_tracked_reference = 3;
  total_size += 1UL * this->_internal_contained_tracked_reference_size();
  for (const auto& msg : this->_impl_.contained_tracked_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.ExpandedTrackedReferenceArchive contained_expanded_tracked_reference = 4;
  total_size += 1UL * this->_internal_contained_expanded_tracked_reference_size();
  for (const auto& msg : this->_impl_.contained_expanded_tracked_reference_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackedReferenceStoreArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackedReferenceStoreArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackedReferenceStoreArchive::GetClassData() const { return &_class_data_; }


void TrackedReferenceStoreArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackedReferenceStoreArchive*>(&to_msg);
  auto& from = static_cast<const TrackedReferenceStoreArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.TrackedReferenceStoreArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tracked_reference_.MergeFrom(from._impl_.tracked_reference_);
  _this->_impl_.contained_tracked_reference_.MergeFrom(from._impl_.contained_tracked_reference_);
  _this->_impl_.contained_expanded_tracked_reference_.MergeFrom(from._impl_.contained_expanded_tracked_reference_);
  if (from._internal_has_uuid()) {
    _this->_internal_mutable_uuid()->::TSP::CFUUIDArchive::MergeFrom(
        from._internal_uuid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackedReferenceStoreArchive::CopyFrom(const TrackedReferenceStoreArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.TrackedReferenceStoreArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackedReferenceStoreArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.tracked_reference_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.contained_tracked_reference_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.contained_expanded_tracked_reference_))
    return false;
  return true;
}

void TrackedReferenceStoreArchive::InternalSwap(TrackedReferenceStoreArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tracked_reference_.InternalSwap(&other->_impl_.tracked_reference_);
  _impl_.contained_tracked_reference_.InternalSwap(&other->_impl_.contained_tracked_reference_);
  _impl_.contained_expanded_tracked_reference_.InternalSwap(&other->_impl_.contained_expanded_tracked_reference_);
  swap(_impl_.uuid_, other->_impl_.uuid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackedReferenceStoreArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[135]);
}

// ===================================================================

class ViewTractRefArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ViewTractRefArchive>()._impl_._has_bits_);
  static const ::TSP::UUID& table_uid(const ViewTractRefArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::ASTNodeArrayArchive_ASTUidTract& uid_tract(const ViewTractRefArchive* msg);
  static void set_has_uid_tract(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::PreserveColumnRowFlagsArchive& preserve_flags(const ViewTractRefArchive* msg);
  static void set_has_preserve_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_agg_index_level(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_column_group_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_row_group_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUID&
ViewTractRefArchive::_Internal::table_uid(const ViewTractRefArchive* msg) {
  return *msg->_impl_.table_uid_;
}
const ::TSCE::ASTNodeArrayArchive_ASTUidTract&
ViewTractRefArchive::_Internal::uid_tract(const ViewTractRefArchive* msg) {
  return *msg->_impl_.uid_tract_;
}
const ::TSCE::PreserveColumnRowFlagsArchive&
ViewTractRefArchive::_Internal::preserve_flags(const ViewTractRefArchive* msg) {
  return *msg->_impl_.preserve_flags_;
}
void ViewTractRefArchive::clear_table_uid() {
  if (_impl_.table_uid_ != nullptr) _impl_.table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ViewTractRefArchive::ViewTractRefArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ViewTractRefArchive)
}
ViewTractRefArchive::ViewTractRefArchive(const ViewTractRefArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ViewTractRefArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.uid_tract_){nullptr}
    , decltype(_impl_.preserve_flags_){nullptr}
    , decltype(_impl_.agg_index_level_){}
    , decltype(_impl_.column_group_level_){}
    , decltype(_impl_.row_group_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    _this->_impl_.table_uid_ = new ::TSP::UUID(*from._impl_.table_uid_);
  }
  if (from._internal_has_uid_tract()) {
    _this->_impl_.uid_tract_ = new ::TSCE::ASTNodeArrayArchive_ASTUidTract(*from._impl_.uid_tract_);
  }
  if (from._internal_has_preserve_flags()) {
    _this->_impl_.preserve_flags_ = new ::TSCE::PreserveColumnRowFlagsArchive(*from._impl_.preserve_flags_);
  }
  ::memcpy(&_impl_.agg_index_level_, &from._impl_.agg_index_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.row_group_level_) -
    reinterpret_cast<char*>(&_impl_.agg_index_level_)) + sizeof(_impl_.row_group_level_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ViewTractRefArchive)
}

inline void ViewTractRefArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.uid_tract_){nullptr}
    , decltype(_impl_.preserve_flags_){nullptr}
    , decltype(_impl_.agg_index_level_){0u}
    , decltype(_impl_.column_group_level_){0}
    , decltype(_impl_.row_group_level_){0}
  };
}

ViewTractRefArchive::~ViewTractRefArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ViewTractRefArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ViewTractRefArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_uid_;
  if (this != internal_default_instance()) delete _impl_.uid_tract_;
  if (this != internal_default_instance()) delete _impl_.preserve_flags_;
}

void ViewTractRefArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ViewTractRefArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ViewTractRefArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_uid_ != nullptr);
      _impl_.table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.uid_tract_ != nullptr);
      _impl_.uid_tract_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.preserve_flags_ != nullptr);
      _impl_.preserve_flags_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.agg_index_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.row_group_level_) -
        reinterpret_cast<char*>(&_impl_.agg_index_level_)) + sizeof(_impl_.row_group_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewTractRefArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUID table_uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ASTNodeArrayArchive.ASTUidTract uid_tract = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uid_tract(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.PreserveColumnRowFlagsArchive preserve_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preserve_flags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 agg_index_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_agg_index_level(&has_bits);
          _impl_.agg_index_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 column_group_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_column_group_level(&has_bits);
          _impl_.column_group_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional sint32 row_group_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_row_group_level(&has_bits);
          _impl_.row_group_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ViewTractRefArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ViewTractRefArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUID table_uid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_uid(this),
        _Internal::table_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ASTNodeArrayArchive.ASTUidTract uid_tract = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::uid_tract(this),
        _Internal::uid_tract(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.PreserveColumnRowFlagsArchive preserve_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::preserve_flags(this),
        _Internal::preserve_flags(this).GetCachedSize(), target, stream);
  }

  // optional uint32 agg_index_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_agg_index_level(), target);
  }

  // optional sint32 column_group_level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_column_group_level(), target);
  }

  // optional sint32 row_group_level = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(6, this->_internal_row_group_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ViewTractRefArchive)
  return target;
}

size_t ViewTractRefArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ViewTractRefArchive)
  size_t total_size = 0;

  // required .TSP.UUID table_uid = 1;
  if (_internal_has_table_uid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_uid_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TSCE.ASTNodeArrayArchive.ASTUidTract uid_tract = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.uid_tract_);
    }

    // optional .TSCE.PreserveColumnRowFlagsArchive preserve_flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.preserve_flags_);
    }

    // optional uint32 agg_index_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_agg_index_level());
    }

    // optional sint32 column_group_level = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_column_group_level());
    }

    // optional sint32 row_group_level = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_row_group_level());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ViewTractRefArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ViewTractRefArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ViewTractRefArchive::GetClassData() const { return &_class_data_; }


void ViewTractRefArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ViewTractRefArchive*>(&to_msg);
  auto& from = static_cast<const ViewTractRefArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ViewTractRefArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_uid_tract()->::TSCE::ASTNodeArrayArchive_ASTUidTract::MergeFrom(
          from._internal_uid_tract());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_preserve_flags()->::TSCE::PreserveColumnRowFlagsArchive::MergeFrom(
          from._internal_preserve_flags());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.agg_index_level_ = from._impl_.agg_index_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.column_group_level_ = from._impl_.column_group_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.row_group_level_ = from._impl_.row_group_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ViewTractRefArchive::CopyFrom(const ViewTractRefArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ViewTractRefArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewTractRefArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_table_uid()) {
    if (!_impl_.table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_uid_tract()) {
    if (!_impl_.uid_tract_->IsInitialized()) return false;
  }
  if (_internal_has_preserve_flags()) {
    if (!_impl_.preserve_flags_->IsInitialized()) return false;
  }
  return true;
}

void ViewTractRefArchive::InternalSwap(ViewTractRefArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewTractRefArchive, _impl_.row_group_level_)
      + sizeof(ViewTractRefArchive::_impl_.row_group_level_)
      - PROTOBUF_FIELD_OFFSET(ViewTractRefArchive, _impl_.table_uid_)>(
          reinterpret_cast<char*>(&_impl_.table_uid_),
          reinterpret_cast<char*>(&other->_impl_.table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewTractRefArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[136]);
}

// ===================================================================

class BooleanCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<BooleanCellValueArchive>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::FormatStructArchive& format(const BooleanCellValueArchive* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format_is_explicit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::FormatStructArchive&
BooleanCellValueArchive::_Internal::format(const BooleanCellValueArchive* msg) {
  return *msg->_impl_.format_;
}
void BooleanCellValueArchive::clear_format() {
  if (_impl_.format_ != nullptr) _impl_.format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
BooleanCellValueArchive::BooleanCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.BooleanCellValueArchive)
}
BooleanCellValueArchive::BooleanCellValueArchive(const BooleanCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BooleanCellValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.value_){}
    , decltype(_impl_.format_is_explicit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_format()) {
    _this->_impl_.format_ = new ::TSK::FormatStructArchive(*from._impl_.format_);
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.format_is_explicit_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.format_is_explicit_));
  // @@protoc_insertion_point(copy_constructor:TSCE.BooleanCellValueArchive)
}

inline void BooleanCellValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.value_){false}
    , decltype(_impl_.format_is_explicit_){false}
  };
}

BooleanCellValueArchive::~BooleanCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.BooleanCellValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BooleanCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.format_;
}

void BooleanCellValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BooleanCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.BooleanCellValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.format_ != nullptr);
    _impl_.format_->Clear();
  }
  ::memset(&_impl_.value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.format_is_explicit_) -
      reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.format_is_explicit_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BooleanCellValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.FormatStructArchive format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool format_is_explicit = 3 [default = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_format_is_explicit(&has_bits);
          _impl_.format_is_explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BooleanCellValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.BooleanCellValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_value(), target);
  }

  // optional .TSK.FormatStructArchive format = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::format(this),
        _Internal::format(this).GetCachedSize(), target, stream);
  }

  // optional bool format_is_explicit = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_format_is_explicit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.BooleanCellValueArchive)
  return target;
}

size_t BooleanCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.BooleanCellValueArchive)
  size_t total_size = 0;

  // required bool value = 1;
  if (_internal_has_value()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSK.FormatStructArchive format = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);
  }

  // optional bool format_is_explicit = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BooleanCellValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BooleanCellValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BooleanCellValueArchive::GetClassData() const { return &_class_data_; }


void BooleanCellValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BooleanCellValueArchive*>(&to_msg);
  auto& from = static_cast<const BooleanCellValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.BooleanCellValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.format_is_explicit_ = from._impl_.format_is_explicit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BooleanCellValueArchive::CopyFrom(const BooleanCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.BooleanCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_format()) {
    if (!_impl_.format_->IsInitialized()) return false;
  }
  return true;
}

void BooleanCellValueArchive::InternalSwap(BooleanCellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BooleanCellValueArchive, _impl_.format_is_explicit_)
      + sizeof(BooleanCellValueArchive::_impl_.format_is_explicit_)
      - PROTOBUF_FIELD_OFFSET(BooleanCellValueArchive, _impl_.format_)>(
          reinterpret_cast<char*>(&_impl_.format_),
          reinterpret_cast<char*>(&other->_impl_.format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BooleanCellValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[137]);
}

// ===================================================================

class DateCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<DateCellValueArchive>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSK::FormatStructArchive& format(const DateCellValueArchive* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_format_is_implicit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_format_is_explicit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::FormatStructArchive&
DateCellValueArchive::_Internal::format(const DateCellValueArchive* msg) {
  return *msg->_impl_.format_;
}
void DateCellValueArchive::clear_format() {
  if (_impl_.format_ != nullptr) _impl_.format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
DateCellValueArchive::DateCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.DateCellValueArchive)
}
DateCellValueArchive::DateCellValueArchive(const DateCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DateCellValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.value_){}
    , decltype(_impl_.format_is_implicit_){}
    , decltype(_impl_.format_is_explicit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_format()) {
    _this->_impl_.format_ = new ::TSK::FormatStructArchive(*from._impl_.format_);
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.format_is_explicit_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.format_is_explicit_));
  // @@protoc_insertion_point(copy_constructor:TSCE.DateCellValueArchive)
}

inline void DateCellValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.format_is_implicit_){false}
    , decltype(_impl_.format_is_explicit_){false}
  };
}

DateCellValueArchive::~DateCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.DateCellValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DateCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.format_;
}

void DateCellValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DateCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.DateCellValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.format_ != nullptr);
    _impl_.format_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.format_is_explicit_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.format_is_explicit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateCellValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool format_is_implicit = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_format_is_implicit(&has_bits);
          _impl_.format_is_implicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool format_is_explicit = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_format_is_explicit(&has_bits);
          _impl_.format_is_explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DateCellValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.DateCellValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // required .TSK.FormatStructArchive format = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::format(this),
        _Internal::format(this).GetCachedSize(), target, stream);
  }

  // optional bool format_is_implicit = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_format_is_implicit(), target);
  }

  // optional bool format_is_explicit = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_format_is_explicit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.DateCellValueArchive)
  return target;
}

size_t DateCellValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.DateCellValueArchive)
  size_t total_size = 0;

  if (_internal_has_format()) {
    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);
  }

  if (_internal_has_value()) {
    // required double value = 1;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t DateCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.DateCellValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);

    // required double value = 1;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional bool format_is_implicit = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool format_is_explicit = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DateCellValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DateCellValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DateCellValueArchive::GetClassData() const { return &_class_data_; }


void DateCellValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DateCellValueArchive*>(&to_msg);
  auto& from = static_cast<const DateCellValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.DateCellValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_format());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.format_is_implicit_ = from._impl_.format_is_implicit_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.format_is_explicit_ = from._impl_.format_is_explicit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DateCellValueArchive::CopyFrom(const DateCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.DateCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_format()) {
    if (!_impl_.format_->IsInitialized()) return false;
  }
  return true;
}

void DateCellValueArchive::InternalSwap(DateCellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateCellValueArchive, _impl_.format_is_explicit_)
      + sizeof(DateCellValueArchive::_impl_.format_is_explicit_)
      - PROTOBUF_FIELD_OFFSET(DateCellValueArchive, _impl_.format_)>(
          reinterpret_cast<char*>(&_impl_.format_),
          reinterpret_cast<char*>(&other->_impl_.format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DateCellValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[138]);
}

// ===================================================================

class NumberCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<NumberCellValueArchive>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_unit_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::FormatStructArchive& format(const NumberCellValueArchive* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_format_is_implicit(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_format_is_explicit(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_decimal_low(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_decimal_high(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TSK::FormatStructArchive&
NumberCellValueArchive::_Internal::format(const NumberCellValueArchive* msg) {
  return *msg->_impl_.format_;
}
void NumberCellValueArchive::clear_format() {
  if (_impl_.format_ != nullptr) _impl_.format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
NumberCellValueArchive::NumberCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.NumberCellValueArchive)
}
NumberCellValueArchive::NumberCellValueArchive(const NumberCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NumberCellValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.value_){}
    , decltype(_impl_.unit_index_){}
    , decltype(_impl_.format_is_implicit_){}
    , decltype(_impl_.format_is_explicit_){}
    , decltype(_impl_.decimal_low_){}
    , decltype(_impl_.decimal_high_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_code()) {
    _this->_impl_.currency_code_.Set(from._internal_currency_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_format()) {
    _this->_impl_.format_ = new ::TSK::FormatStructArchive(*from._impl_.format_);
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.decimal_high_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.decimal_high_));
  // @@protoc_insertion_point(copy_constructor:TSCE.NumberCellValueArchive)
}

inline void NumberCellValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.value_){0}
    , decltype(_impl_.unit_index_){0}
    , decltype(_impl_.format_is_implicit_){false}
    , decltype(_impl_.format_is_explicit_){false}
    , decltype(_impl_.decimal_low_){uint64_t{0u}}
    , decltype(_impl_.decimal_high_){uint64_t{0u}}
  };
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NumberCellValueArchive::~NumberCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.NumberCellValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NumberCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currency_code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.format_;
}

void NumberCellValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NumberCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.NumberCellValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.format_ != nullptr);
      _impl_.format_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.decimal_high_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.decimal_high_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NumberCellValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 unit_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_unit_index(&has_bits);
          _impl_.unit_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive format = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool format_is_implicit = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_format_is_implicit(&has_bits);
          _impl_.format_is_implicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string currency_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.NumberCellValueArchive.currency_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool format_is_explicit = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_format_is_explicit(&has_bits);
          _impl_.format_is_explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 decimal_low = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_decimal_low(&has_bits);
          _impl_.decimal_low_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 decimal_high = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_decimal_high(&has_bits);
          _impl_.decimal_high_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NumberCellValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.NumberCellValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional double value = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_value(), target);
  }

  // optional int32 unit_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_unit_index(), target);
  }

  // required .TSK.FormatStructArchive format = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::format(this),
        _Internal::format(this).GetCachedSize(), target, stream);
  }

  // optional bool format_is_implicit = 4 [deprecated = true];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_format_is_implicit(), target);
  }

  // optional string currency_code = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.NumberCellValueArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_currency_code(), target);
  }

  // optional bool format_is_explicit = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_format_is_explicit(), target);
  }

  // optional uint64 decimal_low = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_decimal_low(), target);
  }

  // optional uint64 decimal_high = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_decimal_high(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.NumberCellValueArchive)
  return target;
}

size_t NumberCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.NumberCellValueArchive)
  size_t total_size = 0;

  // required .TSK.FormatStructArchive format = 3;
  if (_internal_has_format()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string currency_code = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency_code());
  }

  if (cached_has_bits & 0x000000fcu) {
    // optional double value = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional int32 unit_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_unit_index());
    }

    // optional bool format_is_implicit = 4 [deprecated = true];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool format_is_explicit = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional uint64 decimal_low = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_decimal_low());
    }

    // optional uint64 decimal_high = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_decimal_high());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NumberCellValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NumberCellValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NumberCellValueArchive::GetClassData() const { return &_class_data_; }


void NumberCellValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NumberCellValueArchive*>(&to_msg);
  auto& from = static_cast<const NumberCellValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.NumberCellValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.unit_index_ = from._impl_.unit_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.format_is_implicit_ = from._impl_.format_is_implicit_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.format_is_explicit_ = from._impl_.format_is_explicit_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.decimal_low_ = from._impl_.decimal_low_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.decimal_high_ = from._impl_.decimal_high_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NumberCellValueArchive::CopyFrom(const NumberCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.NumberCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_format()) {
    if (!_impl_.format_->IsInitialized()) return false;
  }
  return true;
}

void NumberCellValueArchive::InternalSwap(NumberCellValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_code_, lhs_arena,
      &other->_impl_.currency_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NumberCellValueArchive, _impl_.decimal_high_)
      + sizeof(NumberCellValueArchive::_impl_.decimal_high_)
      - PROTOBUF_FIELD_OFFSET(NumberCellValueArchive, _impl_.format_)>(
          reinterpret_cast<char*>(&_impl_.format_),
          reinterpret_cast<char*>(&other->_impl_.format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NumberCellValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[139]);
}

// ===================================================================

class StringCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StringCellValueArchive>()._impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSK::FormatStructArchive& format(const StringCellValueArchive* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_format_is_implicit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_format_is_explicit(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_case_sensitive_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::FormatStructArchive&
StringCellValueArchive::_Internal::format(const StringCellValueArchive* msg) {
  return *msg->_impl_.format_;
}
void StringCellValueArchive::clear_format() {
  if (_impl_.format_ != nullptr) _impl_.format_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
StringCellValueArchive::StringCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.StringCellValueArchive)
}
StringCellValueArchive::StringCellValueArchive(const StringCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StringCellValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.format_is_implicit_){}
    , decltype(_impl_.format_is_explicit_){}
    , decltype(_impl_.is_regex_){}
    , decltype(_impl_.is_case_sensitive_regex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_format()) {
    _this->_impl_.format_ = new ::TSK::FormatStructArchive(*from._impl_.format_);
  }
  ::memcpy(&_impl_.format_is_implicit_, &from._impl_.format_is_implicit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_case_sensitive_regex_) -
    reinterpret_cast<char*>(&_impl_.format_is_implicit_)) + sizeof(_impl_.is_case_sensitive_regex_));
  // @@protoc_insertion_point(copy_constructor:TSCE.StringCellValueArchive)
}

inline void StringCellValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.value_){}
    , decltype(_impl_.format_){nullptr}
    , decltype(_impl_.format_is_implicit_){false}
    , decltype(_impl_.format_is_explicit_){false}
    , decltype(_impl_.is_regex_){false}
    , decltype(_impl_.is_case_sensitive_regex_){false}
  };
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StringCellValueArchive::~StringCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.StringCellValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.Destroy();
  if (this != internal_default_instance()) delete _impl_.format_;
}

void StringCellValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StringCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.StringCellValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.format_ != nullptr);
      _impl_.format_->Clear();
    }
  }
  ::memset(&_impl_.format_is_implicit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_case_sensitive_regex_) -
      reinterpret_cast<char*>(&_impl_.format_is_implicit_)) + sizeof(_impl_.is_case_sensitive_regex_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StringCellValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.StringCellValueArchive.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required .TSK.FormatStructArchive format = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool format_is_implicit = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_format_is_implicit(&has_bits);
          _impl_.format_is_implicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool format_is_explicit = 4 [default = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_format_is_explicit(&has_bits);
          _impl_.format_is_explicit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_regex = 5 [default = false];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_regex(&has_bits);
          _impl_.is_regex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_case_sensitive_regex = 6 [default = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_is_case_sensitive_regex(&has_bits);
          _impl_.is_case_sensitive_regex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringCellValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.StringCellValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.StringCellValueArchive.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // required .TSK.FormatStructArchive format = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::format(this),
        _Internal::format(this).GetCachedSize(), target, stream);
  }

  // optional bool format_is_implicit = 3 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_format_is_implicit(), target);
  }

  // optional bool format_is_explicit = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_format_is_explicit(), target);
  }

  // optional bool is_regex = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_regex(), target);
  }

  // optional bool is_case_sensitive_regex = 6 [default = false];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_case_sensitive_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.StringCellValueArchive)
  return target;
}

size_t StringCellValueArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TSCE.StringCellValueArchive)
  size_t total_size = 0;

  if (_internal_has_value()) {
    // required string value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_format()) {
    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);
  }

  return total_size;
}
size_t StringCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.StringCellValueArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string value = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required .TSK.FormatStructArchive format = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional bool format_is_implicit = 3 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool format_is_explicit = 4 [default = false];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool is_regex = 5 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool is_case_sensitive_regex = 6 [default = false];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StringCellValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StringCellValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StringCellValueArchive::GetClassData() const { return &_class_data_; }


void StringCellValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StringCellValueArchive*>(&to_msg);
  auto& from = static_cast<const StringCellValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.StringCellValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_format()->::TSK::FormatStructArchive::MergeFrom(
          from._internal_format());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.format_is_implicit_ = from._impl_.format_is_implicit_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.format_is_explicit_ = from._impl_.format_is_explicit_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_regex_ = from._impl_.is_regex_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_case_sensitive_regex_ = from._impl_.is_case_sensitive_regex_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StringCellValueArchive::CopyFrom(const StringCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.StringCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_format()) {
    if (!_impl_.format_->IsInitialized()) return false;
  }
  return true;
}

void StringCellValueArchive::InternalSwap(StringCellValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StringCellValueArchive, _impl_.is_case_sensitive_regex_)
      + sizeof(StringCellValueArchive::_impl_.is_case_sensitive_regex_)
      - PROTOBUF_FIELD_OFFSET(StringCellValueArchive, _impl_.format_)>(
          reinterpret_cast<char*>(&_impl_.format_),
          reinterpret_cast<char*>(&other->_impl_.format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StringCellValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[140]);
}

// ===================================================================

class ErrorCellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ErrorCellValueArchive>()._impl_._has_bits_);
  static void set_has_error_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_extra_info_int(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_extra_info_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_extra_info_double(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

ErrorCellValueArchive::ErrorCellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.ErrorCellValueArchive)
}
ErrorCellValueArchive::ErrorCellValueArchive(const ErrorCellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ErrorCellValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_info_string_){}
    , decltype(_impl_.error_type_){}
    , decltype(_impl_.extra_info_int_){}
    , decltype(_impl_.extra_info_double_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.extra_info_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_info_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_extra_info_string()) {
    _this->_impl_.extra_info_string_.Set(from._internal_extra_info_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.error_type_, &from._impl_.error_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.extra_info_double_) -
    reinterpret_cast<char*>(&_impl_.error_type_)) + sizeof(_impl_.extra_info_double_));
  // @@protoc_insertion_point(copy_constructor:TSCE.ErrorCellValueArchive)
}

inline void ErrorCellValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.extra_info_string_){}
    , decltype(_impl_.error_type_){0}
    , decltype(_impl_.extra_info_int_){0}
    , decltype(_impl_.extra_info_double_){0}
  };
  _impl_.extra_info_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_info_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ErrorCellValueArchive::~ErrorCellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.ErrorCellValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ErrorCellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_info_string_.Destroy();
}

void ErrorCellValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ErrorCellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.ErrorCellValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.extra_info_string_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.error_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.extra_info_double_) -
        reinterpret_cast<char*>(&_impl_.error_type_)) + sizeof(_impl_.extra_info_double_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrorCellValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 error_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_error_type(&has_bits);
          _impl_.error_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 extra_info_int = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_extra_info_int(&has_bits);
          _impl_.extra_info_int_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string extra_info_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_extra_info_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TSCE.ErrorCellValueArchive.extra_info_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional double extra_info_double = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_extra_info_double(&has_bits);
          _impl_.extra_info_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrorCellValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.ErrorCellValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 error_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_error_type(), target);
  }

  // optional int32 extra_info_int = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_extra_info_int(), target);
  }

  // optional string extra_info_string = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_extra_info_string().data(), static_cast<int>(this->_internal_extra_info_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TSCE.ErrorCellValueArchive.extra_info_string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_extra_info_string(), target);
  }

  // optional double extra_info_double = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_extra_info_double(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.ErrorCellValueArchive)
  return target;
}

size_t ErrorCellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.ErrorCellValueArchive)
  size_t total_size = 0;

  // required int32 error_type = 1;
  if (_internal_has_error_type()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string extra_info_string = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra_info_string());
  }

  if (cached_has_bits & 0x0000000cu) {
    // optional int32 extra_info_int = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_extra_info_int());
    }

    // optional double extra_info_double = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrorCellValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ErrorCellValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrorCellValueArchive::GetClassData() const { return &_class_data_; }


void ErrorCellValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ErrorCellValueArchive*>(&to_msg);
  auto& from = static_cast<const ErrorCellValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.ErrorCellValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_extra_info_string(from._internal_extra_info_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.error_type_ = from._impl_.error_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.extra_info_int_ = from._impl_.extra_info_int_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.extra_info_double_ = from._impl_.extra_info_double_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrorCellValueArchive::CopyFrom(const ErrorCellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.ErrorCellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorCellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ErrorCellValueArchive::InternalSwap(ErrorCellValueArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_info_string_, lhs_arena,
      &other->_impl_.extra_info_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ErrorCellValueArchive, _impl_.extra_info_double_)
      + sizeof(ErrorCellValueArchive::_impl_.extra_info_double_)
      - PROTOBUF_FIELD_OFFSET(ErrorCellValueArchive, _impl_.error_type_)>(
          reinterpret_cast<char*>(&_impl_.error_type_),
          reinterpret_cast<char*>(&other->_impl_.error_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrorCellValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[141]);
}

// ===================================================================

class CellValueArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellValueArchive>()._impl_._has_bits_);
  static void set_has_cell_value_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::BooleanCellValueArchive& boolean_value(const CellValueArchive* msg);
  static void set_has_boolean_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::DateCellValueArchive& date_value(const CellValueArchive* msg);
  static void set_has_date_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::NumberCellValueArchive& number_value(const CellValueArchive* msg);
  static void set_has_number_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::StringCellValueArchive& string_value(const CellValueArchive* msg);
  static void set_has_string_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::ErrorCellValueArchive& error_value(const CellValueArchive* msg);
  static void set_has_error_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::TSCE::BooleanCellValueArchive&
CellValueArchive::_Internal::boolean_value(const CellValueArchive* msg) {
  return *msg->_impl_.boolean_value_;
}
const ::TSCE::DateCellValueArchive&
CellValueArchive::_Internal::date_value(const CellValueArchive* msg) {
  return *msg->_impl_.date_value_;
}
const ::TSCE::NumberCellValueArchive&
CellValueArchive::_Internal::number_value(const CellValueArchive* msg) {
  return *msg->_impl_.number_value_;
}
const ::TSCE::StringCellValueArchive&
CellValueArchive::_Internal::string_value(const CellValueArchive* msg) {
  return *msg->_impl_.string_value_;
}
const ::TSCE::ErrorCellValueArchive&
CellValueArchive::_Internal::error_value(const CellValueArchive* msg) {
  return *msg->_impl_.error_value_;
}
CellValueArchive::CellValueArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TSCE.CellValueArchive)
}
CellValueArchive::CellValueArchive(const CellValueArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellValueArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boolean_value_){nullptr}
    , decltype(_impl_.date_value_){nullptr}
    , decltype(_impl_.number_value_){nullptr}
    , decltype(_impl_.string_value_){nullptr}
    , decltype(_impl_.error_value_){nullptr}
    , decltype(_impl_.cell_value_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_boolean_value()) {
    _this->_impl_.boolean_value_ = new ::TSCE::BooleanCellValueArchive(*from._impl_.boolean_value_);
  }
  if (from._internal_has_date_value()) {
    _this->_impl_.date_value_ = new ::TSCE::DateCellValueArchive(*from._impl_.date_value_);
  }
  if (from._internal_has_number_value()) {
    _this->_impl_.number_value_ = new ::TSCE::NumberCellValueArchive(*from._impl_.number_value_);
  }
  if (from._internal_has_string_value()) {
    _this->_impl_.string_value_ = new ::TSCE::StringCellValueArchive(*from._impl_.string_value_);
  }
  if (from._internal_has_error_value()) {
    _this->_impl_.error_value_ = new ::TSCE::ErrorCellValueArchive(*from._impl_.error_value_);
  }
  _this->_impl_.cell_value_type_ = from._impl_.cell_value_type_;
  // @@protoc_insertion_point(copy_constructor:TSCE.CellValueArchive)
}

inline void CellValueArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.boolean_value_){nullptr}
    , decltype(_impl_.date_value_){nullptr}
    , decltype(_impl_.number_value_){nullptr}
    , decltype(_impl_.string_value_){nullptr}
    , decltype(_impl_.error_value_){nullptr}
    , decltype(_impl_.cell_value_type_){1}
  };
}

CellValueArchive::~CellValueArchive() {
  // @@protoc_insertion_point(destructor:TSCE.CellValueArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellValueArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.boolean_value_;
  if (this != internal_default_instance()) delete _impl_.date_value_;
  if (this != internal_default_instance()) delete _impl_.number_value_;
  if (this != internal_default_instance()) delete _impl_.string_value_;
  if (this != internal_default_instance()) delete _impl_.error_value_;
}

void CellValueArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellValueArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TSCE.CellValueArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.boolean_value_ != nullptr);
      _impl_.boolean_value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.date_value_ != nullptr);
      _impl_.date_value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.number_value_ != nullptr);
      _impl_.number_value_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.string_value_ != nullptr);
      _impl_.string_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.error_value_ != nullptr);
      _impl_.error_value_->Clear();
    }
    _impl_.cell_value_type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellValueArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSCE::CellValueArchive_CellValueType_IsValid(val))) {
            _internal_set_cell_value_type(static_cast<::TSCE::CellValueArchive_CellValueType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_boolean_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.DateCellValueArchive date_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_date_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.NumberCellValueArchive number_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_number_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.StringCellValueArchive string_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ErrorCellValueArchive error_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellValueArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TSCE.CellValueArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cell_value_type(), target);
  }

  // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::boolean_value(this),
        _Internal::boolean_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.DateCellValueArchive date_value = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::date_value(this),
        _Internal::date_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.NumberCellValueArchive number_value = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::number_value(this),
        _Internal::number_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.StringCellValueArchive string_value = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::string_value(this),
        _Internal::string_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ErrorCellValueArchive error_value = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::error_value(this),
        _Internal::error_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TSCE.CellValueArchive)
  return target;
}

size_t CellValueArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TSCE.CellValueArchive)
  size_t total_size = 0;

  // required .TSCE.CellValueArchive.CellValueType cell_value_type = 1;
  if (_internal_has_cell_value_type()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cell_value_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .TSCE.BooleanCellValueArchive boolean_value = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.boolean_value_);
    }

    // optional .TSCE.DateCellValueArchive date_value = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.date_value_);
    }

    // optional .TSCE.NumberCellValueArchive number_value = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.number_value_);
    }

    // optional .TSCE.StringCellValueArchive string_value = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.string_value_);
    }

    // optional .TSCE.ErrorCellValueArchive error_value = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.error_value_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellValueArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellValueArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellValueArchive::GetClassData() const { return &_class_data_; }


void CellValueArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellValueArchive*>(&to_msg);
  auto& from = static_cast<const CellValueArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TSCE.CellValueArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_boolean_value()->::TSCE::BooleanCellValueArchive::MergeFrom(
          from._internal_boolean_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_date_value()->::TSCE::DateCellValueArchive::MergeFrom(
          from._internal_date_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_number_value()->::TSCE::NumberCellValueArchive::MergeFrom(
          from._internal_number_value());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_string_value()->::TSCE::StringCellValueArchive::MergeFrom(
          from._internal_string_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_error_value()->::TSCE::ErrorCellValueArchive::MergeFrom(
          from._internal_error_value());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cell_value_type_ = from._impl_.cell_value_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellValueArchive::CopyFrom(const CellValueArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TSCE.CellValueArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellValueArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_boolean_value()) {
    if (!_impl_.boolean_value_->IsInitialized()) return false;
  }
  if (_internal_has_date_value()) {
    if (!_impl_.date_value_->IsInitialized()) return false;
  }
  if (_internal_has_number_value()) {
    if (!_impl_.number_value_->IsInitialized()) return false;
  }
  if (_internal_has_string_value()) {
    if (!_impl_.string_value_->IsInitialized()) return false;
  }
  if (_internal_has_error_value()) {
    if (!_impl_.error_value_->IsInitialized()) return false;
  }
  return true;
}

void CellValueArchive::InternalSwap(CellValueArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellValueArchive, _impl_.error_value_)
      + sizeof(CellValueArchive::_impl_.error_value_)
      - PROTOBUF_FIELD_OFFSET(CellValueArchive, _impl_.boolean_value_)>(
          reinterpret_cast<char*>(&_impl_.boolean_value_),
          reinterpret_cast<char*>(&other->_impl_.boolean_value_));
  swap(_impl_.cell_value_type_, other->_impl_.cell_value_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellValueArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSCEArchives_2eproto_getter, &descriptor_table_TSCEArchives_2eproto_once,
      file_level_metadata_TSCEArchives_2eproto[142]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TSCE
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TSCE::CellReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::CellReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::InternalCellReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::InternalCellReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::InternalCellReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RelativeCellRefArchive*
Arena::CreateMaybeMessage< ::TSCE::RelativeCellRefArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RelativeCellRefArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::RangeReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::InternalRangeReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::InternalRangeReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::InternalRangeReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::IndexSetArchive_IndexSetEntry*
Arena::CreateMaybeMessage< ::TSCE::IndexSetArchive_IndexSetEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::IndexSetArchive_IndexSetEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::IndexSetArchive*
Arena::CreateMaybeMessage< ::TSCE::IndexSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::IndexSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordSetArchive_ColumnEntry*
Arena::CreateMaybeMessage< ::TSCE::CellCoordSetArchive_ColumnEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordSetArchive_ColumnEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordSetArchive*
Arena::CreateMaybeMessage< ::TSCE::CellCoordSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::InternalCellRefSetArchive_OwnerEntry*
Arena::CreateMaybeMessage< ::TSCE::InternalCellRefSetArchive_OwnerEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::InternalCellRefSetArchive_OwnerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::InternalCellRefSetArchive*
Arena::CreateMaybeMessage< ::TSCE::InternalCellRefSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::InternalCellRefSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ColumnRowSize*
Arena::CreateMaybeMessage< ::TSCE::ColumnRowSize >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ColumnRowSize >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRectArchive*
Arena::CreateMaybeMessage< ::TSCE::CellRectArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRectArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRefSetArchive_OwnerEntry*
Arena::CreateMaybeMessage< ::TSCE::CellRefSetArchive_OwnerEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRefSetArchive_OwnerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRefSetArchive*
Arena::CreateMaybeMessage< ::TSCE::CellRefSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRefSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UidCoordSetArchive_ColumnEntry*
Arena::CreateMaybeMessage< ::TSCE::UidCoordSetArchive_ColumnEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UidCoordSetArchive_ColumnEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UidCoordSetArchive*
Arena::CreateMaybeMessage< ::TSCE::UidCoordSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UidCoordSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UidCellRefSetArchive_OwnerEntry*
Arena::CreateMaybeMessage< ::TSCE::UidCellRefSetArchive_OwnerEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UidCellRefSetArchive_OwnerEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UidCellRefSetArchive*
Arena::CreateMaybeMessage< ::TSCE::UidCellRefSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UidCellRefSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ReferencesToDirtyArchive*
Arena::CreateMaybeMessage< ::TSCE::ReferencesToDirtyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ReferencesToDirtyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CoordMapperArchive_BaseToViewEntry*
Arena::CreateMaybeMessage< ::TSCE::CoordMapperArchive_BaseToViewEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CoordMapperArchive_BaseToViewEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CoordMapperArchive_SummaryToViewEntry*
Arena::CreateMaybeMessage< ::TSCE::CoordMapperArchive_SummaryToViewEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CoordMapperArchive_SummaryToViewEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CoordMapperArchive*
Arena::CreateMaybeMessage< ::TSCE::CoordMapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CoordMapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::ReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::EdgeArchive*
Arena::CreateMaybeMessage< ::TSCE::EdgeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::EdgeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::EdgesArchive*
Arena::CreateMaybeMessage< ::TSCE::EdgesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::EdgesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ExpandedEdgesArchive*
Arena::CreateMaybeMessage< ::TSCE::ExpandedEdgesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ExpandedEdgesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRecordArchive*
Arena::CreateMaybeMessage< ::TSCE::CellRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellDependenciesArchive*
Arena::CreateMaybeMessage< ::TSCE::CellDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRecordExpandedArchive*
Arena::CreateMaybeMessage< ::TSCE::CellRecordExpandedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRecordExpandedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellDependenciesExpandedArchive*
Arena::CreateMaybeMessage< ::TSCE::CellDependenciesExpandedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellDependenciesExpandedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellRecordTileArchive*
Arena::CreateMaybeMessage< ::TSCE::CellRecordTileArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellRecordTileArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellDependenciesTiledArchive*
Arena::CreateMaybeMessage< ::TSCE::CellDependenciesTiledArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellDependenciesTiledArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::VolatileDependenciesArchive*
Arena::CreateMaybeMessage< ::TSCE::VolatileDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::VolatileDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::VolatileDependenciesExpandedArchive*
Arena::CreateMaybeMessage< ::TSCE::VolatileDependenciesExpandedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::VolatileDependenciesExpandedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeInternalNodeContentsArchive*
Arena::CreateMaybeMessage< ::TSCE::RTreeInternalNodeContentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeInternalNodeContentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeLeafNodeContentsArchive*
Arena::CreateMaybeMessage< ::TSCE::RTreeLeafNodeContentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeLeafNodeContentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeNodeArchive*
Arena::CreateMaybeMessage< ::TSCE::RTreeNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RTreeArchive*
Arena::CreateMaybeMessage< ::TSCE::RTreeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RTreeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeBackDependencyArchive*
Arena::CreateMaybeMessage< ::TSCE::RangeBackDependencyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeBackDependencyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeDependenciesArchive*
Arena::CreateMaybeMessage< ::TSCE::RangeDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive*
Arena::CreateMaybeMessage< ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangePrecedentsTileArchive_FromToRangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangePrecedentsTileArchive*
Arena::CreateMaybeMessage< ::TSCE::RangePrecedentsTileArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangePrecedentsTileArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeDependenciesTiledArchive*
Arena::CreateMaybeMessage< ::TSCE::RangeDependenciesTiledArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeDependenciesTiledArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells*
Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesArchive_ReferringColumnToLocalCells >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells*
Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesArchive_ReferringColumnToRemoteCells >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesArchive*
Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange*
Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRange >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext*
Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContext >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents*
Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesExpandedArchive_CellCoordRefersToExtents >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SpanningDependenciesExpandedArchive*
Arena::CreateMaybeMessage< ::TSCE::SpanningDependenciesExpandedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SpanningDependenciesExpandedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::WholeOwnerDependenciesArchive*
Arena::CreateMaybeMessage< ::TSCE::WholeOwnerDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::WholeOwnerDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::WholeOwnerDependenciesExpandedArchive*
Arena::CreateMaybeMessage< ::TSCE::WholeOwnerDependenciesExpandedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::WholeOwnerDependenciesExpandedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellErrorsArchive_ErrorForCell*
Arena::CreateMaybeMessage< ::TSCE::CellErrorsArchive_ErrorForCell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellErrorsArchive_ErrorForCell >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellErrorsArchive*
Arena::CreateMaybeMessage< ::TSCE::CellErrorsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellErrorsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferencesArchive_TableRef*
Arena::CreateMaybeMessage< ::TSCE::UuidReferencesArchive_TableRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferencesArchive_TableRef >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferencesArchive_UuidRef*
Arena::CreateMaybeMessage< ::TSCE::UuidReferencesArchive_UuidRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferencesArchive_UuidRef >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferencesArchive_TableWithUuidRef*
Arena::CreateMaybeMessage< ::TSCE::UuidReferencesArchive_TableWithUuidRef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferencesArchive_TableWithUuidRef >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferencesArchive*
Arena::CreateMaybeMessage< ::TSCE::UuidReferencesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferencesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaOwnerDependenciesArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaOwnerDependenciesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaOwnerDependenciesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaOwnerInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaOwnerInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaOwnerInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::SubFormulaOwnerIDArchive*
Arena::CreateMaybeMessage< ::TSCE::SubFormulaOwnerIDArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::SubFormulaOwnerIDArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry*
Arena::CreateMaybeMessage< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::OwnerIDMapArchive_OwnerIDMapArchiveEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::OwnerIDMapArchive*
Arena::CreateMaybeMessage< ::TSCE::OwnerIDMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::OwnerIDMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UidLookupListArchive*
Arena::CreateMaybeMessage< ::TSCE::UidLookupListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UidLookupListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::DependencyTrackerArchive*
Arena::CreateMaybeMessage< ::TSCE::DependencyTrackerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::DependencyTrackerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RemoteDataSpecifierArchive*
Arena::CreateMaybeMessage< ::TSCE::RemoteDataSpecifierArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RemoteDataSpecifierArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry*
Arena::CreateMaybeMessage< ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RemoteDataValueMapArchive_RemoteDataMapEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RemoteDataValueMapArchive*
Arena::CreateMaybeMessage< ::TSCE::RemoteDataValueMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RemoteDataValueMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::StockArchive_AttributeEntry*
Arena::CreateMaybeMessage< ::TSCE::StockArchive_AttributeEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::StockArchive_AttributeEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::StockArchive*
Arena::CreateMaybeMessage< ::TSCE::StockArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::StockArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RemoteDataStoreArchive*
Arena::CreateMaybeMessage< ::TSCE::RemoteDataStoreArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RemoteDataStoreArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NameTrackedReferencePair*
Arena::CreateMaybeMessage< ::TSCE::NameTrackedReferencePair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NameTrackedReferencePair >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NamesByTrackedReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::NamesByTrackedReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NamesByTrackedReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NamedReferenceManagerArchive*
Arena::CreateMaybeMessage< ::TSCE::NamedReferenceManagerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NamedReferenceManagerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidSetStoreArchive_UuidSet*
Arena::CreateMaybeMessage< ::TSCE::UuidSetStoreArchive_UuidSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidSetStoreArchive_UuidSet >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidSetStoreArchive*
Arena::CreateMaybeMessage< ::TSCE::UuidSetStoreArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidSetStoreArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferenceMapArchive_CellRefsForUuid*
Arena::CreateMaybeMessage< ::TSCE::UuidReferenceMapArchive_CellRefsForUuid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferenceMapArchive_CellRefsForUuid >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::UuidReferenceMapArchive*
Arena::CreateMaybeMessage< ::TSCE::UuidReferenceMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::UuidReferenceMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode*
Arena::CreateMaybeMessage< ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::GroupByNodeMapArchive_CellRefsForGroupNode >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy*
Arena::CreateMaybeMessage< ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::GroupByNodeMapArchive_GroupNodesForGroupBy >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::GroupByNodeMapArchive*
Arena::CreateMaybeMessage< ::TSCE::GroupByNodeMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::GroupByNodeMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CalculationEngineArchive*
Arena::CreateMaybeMessage< ::TSCE::CalculationEngineArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CalculationEngineArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::PreserveColumnRowFlagsArchive*
Arena::CreateMaybeMessage< ::TSCE::PreserveColumnRowFlagsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::PreserveColumnRowFlagsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CategoryReferenceArchive_CatRefUidList*
Arena::CreateMaybeMessage< ::TSCE::CategoryReferenceArchive_CatRefUidList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CategoryReferenceArchive_CatRefUidList >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CategoryReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::CategoryReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CategoryReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTColumnCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTRowCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTUidList*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTUidList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTUidList >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTUidTract*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTUidTract >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTUidTract >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTStickyBits*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTStickyBits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTStickyBits >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTUidTractList*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTUidTractList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTUidTractList >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTUidCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTCategoryLevels*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTCategoryLevels >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTCategoryLevels >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTCategoryReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTColonTractArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTLetNodeWhitespace >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive_ASTNodeArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive_ASTNodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ASTNodeArrayArchive*
Arena::CreateMaybeMessage< ::TSCE::ASTNodeArrayArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ASTNodeArrayArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaTranslationFlagsArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaTranslationFlagsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaTranslationFlagsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FunctorArchive*
Arena::CreateMaybeMessage< ::TSCE::FunctorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FunctorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormatStructArchive*
Arena::CreateMaybeMessage< ::TSCE::FormatStructArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormatStructArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RangeCoordinateArchive*
Arena::CreateMaybeMessage< ::TSCE::RangeCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RangeCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::TableTransposeInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::TableTransposeInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::TableTransposeInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::MergeOriginMovedArchive*
Arena::CreateMaybeMessage< ::TSCE::MergeOriginMovedArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::MergeOriginMovedArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::OwnerUIDMapperArchive*
Arena::CreateMaybeMessage< ::TSCE::OwnerUIDMapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::OwnerUIDMapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive*
Arena::CreateMaybeMessage< ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RewriteTableUIDInfoArchive_TableUIDMapEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RewriteTableUIDInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::RewriteTableUIDInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RewriteTableUIDInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive*
Arena::CreateMaybeMessage< ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::GroupByChangeArchive_GroupingColumnChangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::GroupByChangeArchive*
Arena::CreateMaybeMessage< ::TSCE::GroupByChangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::GroupByChangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RewriteGroupNodeUIDInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::RewriteGroupNodeUIDInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RewriteGroupNodeUIDInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::IndexedUidsArchive_IndexedUid*
Arena::CreateMaybeMessage< ::TSCE::IndexedUidsArchive_IndexedUid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::IndexedUidsArchive_IndexedUid >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::IndexedUidsArchive*
Arena::CreateMaybeMessage< ::TSCE::IndexedUidsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::IndexedUidsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RewriteRangeEntryArchive*
Arena::CreateMaybeMessage< ::TSCE::RewriteRangeEntryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RewriteRangeEntryArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ColumnOrRowUuidsInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::ColumnOrRowUuidsInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ColumnOrRowUuidsInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RegionInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::RegionInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RegionInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::RegionMovedInfoArchive*
Arena::CreateMaybeMessage< ::TSCE::RegionMovedInfoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::RegionMovedInfoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::MergeSourceArchive*
Arena::CreateMaybeMessage< ::TSCE::MergeSourceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::MergeSourceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::HauntedOwnerArchive*
Arena::CreateMaybeMessage< ::TSCE::HauntedOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::HauntedOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordinateArchive*
Arena::CreateMaybeMessage< ::TSCE::CellCoordinateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordinateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellCoordinateVectorArchive*
Arena::CreateMaybeMessage< ::TSCE::CellCoordinateVectorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellCoordinateVectorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ExpandedCellRefObjectPairArchive*
Arena::CreateMaybeMessage< ::TSCE::ExpandedCellRefObjectPairArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ExpandedCellRefObjectPairArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ExpandedCellRefObjectMapArchive*
Arena::CreateMaybeMessage< ::TSCE::ExpandedCellRefObjectMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ExpandedCellRefObjectMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaAtCoordArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaAtCoordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaAtCoordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaCoordPairsByOwnerArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaCoordPairsByOwnerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaCoordPairsByOwnerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulasForUndoArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulasForUndoArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulasForUndoArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::FormulaRewriteCommandArchive*
Arena::CreateMaybeMessage< ::TSCE::FormulaRewriteCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::FormulaRewriteCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::TrackedReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::TrackedReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::TrackedReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ExpandedTrackedReferenceArchive*
Arena::CreateMaybeMessage< ::TSCE::ExpandedTrackedReferenceArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ExpandedTrackedReferenceArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::TrackedReferenceStoreArchive*
Arena::CreateMaybeMessage< ::TSCE::TrackedReferenceStoreArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::TrackedReferenceStoreArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ViewTractRefArchive*
Arena::CreateMaybeMessage< ::TSCE::ViewTractRefArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ViewTractRefArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::BooleanCellValueArchive*
Arena::CreateMaybeMessage< ::TSCE::BooleanCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::BooleanCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::DateCellValueArchive*
Arena::CreateMaybeMessage< ::TSCE::DateCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::DateCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::NumberCellValueArchive*
Arena::CreateMaybeMessage< ::TSCE::NumberCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::NumberCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::StringCellValueArchive*
Arena::CreateMaybeMessage< ::TSCE::StringCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::StringCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::ErrorCellValueArchive*
Arena::CreateMaybeMessage< ::TSCE::ErrorCellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::ErrorCellValueArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TSCE::CellValueArchive*
Arena::CreateMaybeMessage< ::TSCE::CellValueArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TSCE::CellValueArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
