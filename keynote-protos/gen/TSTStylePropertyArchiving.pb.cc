// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSTStylePropertyArchiving.proto

#include "TSTStylePropertyArchiving.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TST {
PROTOBUF_CONSTEXPR Deprecated_TableStrokeArchive::Deprecated_TableStrokeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.stroke_)*/nullptr
  , /*decltype(_impl_.opacity_)*/0
  , /*decltype(_impl_.background_)*/false
  , /*decltype(_impl_.empty_)*/false} {}
struct Deprecated_TableStrokeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Deprecated_TableStrokeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Deprecated_TableStrokeArchiveDefaultTypeInternal() {}
  union {
    Deprecated_TableStrokeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Deprecated_TableStrokeArchiveDefaultTypeInternal _Deprecated_TableStrokeArchive_default_instance_;
PROTOBUF_CONSTEXPR CellStylePropertiesArchive::CellStylePropertiesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_fill_)*/nullptr
  , /*decltype(_impl_.deprecated_top_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_right_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_bottom_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_left_stroke_)*/nullptr
  , /*decltype(_impl_.padding_)*/nullptr
  , /*decltype(_impl_.top_stroke_)*/nullptr
  , /*decltype(_impl_.right_stroke_)*/nullptr
  , /*decltype(_impl_.bottom_stroke_)*/nullptr
  , /*decltype(_impl_.left_stroke_)*/nullptr
  , /*decltype(_impl_.text_wrap_)*/false
  , /*decltype(_impl_.vertical_alignment_)*/0} {}
struct CellStylePropertiesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CellStylePropertiesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CellStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    CellStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CellStylePropertiesArchiveDefaultTypeInternal _CellStylePropertiesArchive_default_instance_;
PROTOBUF_CONSTEXPR Deprecated_StrokePresetDataArchive::Deprecated_StrokePresetDataArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deprecated_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_exterior_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_visible_mask_)*/0} {}
struct Deprecated_StrokePresetDataArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Deprecated_StrokePresetDataArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Deprecated_StrokePresetDataArchiveDefaultTypeInternal() {}
  union {
    Deprecated_StrokePresetDataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Deprecated_StrokePresetDataArchiveDefaultTypeInternal _Deprecated_StrokePresetDataArchive_default_instance_;
PROTOBUF_CONSTEXPR StrokePresetDataArchive::StrokePresetDataArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.vertical_stroke_)*/nullptr
  , /*decltype(_impl_.exterior_stroke_)*/nullptr
  , /*decltype(_impl_.visible_mask_)*/0} {}
struct StrokePresetDataArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrokePresetDataArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrokePresetDataArchiveDefaultTypeInternal() {}
  union {
    StrokePresetDataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrokePresetDataArchiveDefaultTypeInternal _StrokePresetDataArchive_default_instance_;
PROTOBUF_CONSTEXPR StrokePresetListArchive::StrokePresetListArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deprecated_preset_)*/{}
  , /*decltype(_impl_.preset_)*/{}
  , /*decltype(_impl_.count_)*/0} {}
struct StrokePresetListArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrokePresetListArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrokePresetListArchiveDefaultTypeInternal() {}
  union {
    StrokePresetListArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrokePresetListArchiveDefaultTypeInternal _StrokePresetListArchive_default_instance_;
PROTOBUF_CONSTEXPR TableStylePropertiesArchive::TableStylePropertiesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.master_font_family_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.banded_fill_)*/nullptr
  , /*decltype(_impl_.deprecated_header_row_separator_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_header_row_border_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_header_column_border_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_header_column_separator_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_footer_row_separator_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_footer_row_border_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_table_body_horizontal_border_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_header_row_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_header_row_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_header_column_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_header_column_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_footer_row_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_footer_row_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_table_body_vertical_border_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_table_body_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.deprecated_table_body_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.stroke_preset_list_)*/nullptr
  , /*decltype(_impl_.header_row_separator_stroke_)*/nullptr
  , /*decltype(_impl_.header_row_border_stroke_)*/nullptr
  , /*decltype(_impl_.header_row_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.header_row_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.header_column_border_stroke_)*/nullptr
  , /*decltype(_impl_.header_column_separator_stroke_)*/nullptr
  , /*decltype(_impl_.header_column_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.header_column_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.footer_row_separator_stroke_)*/nullptr
  , /*decltype(_impl_.footer_row_border_stroke_)*/nullptr
  , /*decltype(_impl_.footer_row_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.footer_row_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.table_body_horizontal_border_stroke_)*/nullptr
  , /*decltype(_impl_.table_body_vertical_border_stroke_)*/nullptr
  , /*decltype(_impl_.table_body_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.table_body_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.category_level1_top_stroke_)*/nullptr
  , /*decltype(_impl_.category_level2_top_stroke_)*/nullptr
  , /*decltype(_impl_.category_level3_top_stroke_)*/nullptr
  , /*decltype(_impl_.category_level4_top_stroke_)*/nullptr
  , /*decltype(_impl_.category_level5_top_stroke_)*/nullptr
  , /*decltype(_impl_.category_level1_bottom_stroke_)*/nullptr
  , /*decltype(_impl_.category_level2_bottom_stroke_)*/nullptr
  , /*decltype(_impl_.category_level3_bottom_stroke_)*/nullptr
  , /*decltype(_impl_.category_level4_bottom_stroke_)*/nullptr
  , /*decltype(_impl_.category_level5_bottom_stroke_)*/nullptr
  , /*decltype(_impl_.category_level1_interior_stroke_)*/nullptr
  , /*decltype(_impl_.category_level2_interior_stroke_)*/nullptr
  , /*decltype(_impl_.category_level3_interior_stroke_)*/nullptr
  , /*decltype(_impl_.category_level4_interior_stroke_)*/nullptr
  , /*decltype(_impl_.category_level5_interior_stroke_)*/nullptr
  , /*decltype(_impl_.category_level1_label_separator_stroke_)*/nullptr
  , /*decltype(_impl_.category_level2_label_separator_stroke_)*/nullptr
  , /*decltype(_impl_.category_level3_label_separator_stroke_)*/nullptr
  , /*decltype(_impl_.category_level4_label_separator_stroke_)*/nullptr
  , /*decltype(_impl_.category_level5_label_separator_stroke_)*/nullptr
  , /*decltype(_impl_.table_body_pivot_group_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.table_body_pivot_group_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.table_body_pivot_deemphasis_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.table_body_pivot_emphasis_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.header_column_pivot_group_horizontal_stroke_)*/nullptr
  , /*decltype(_impl_.header_column_pivot_group_deemphasis_stroke_)*/nullptr
  , /*decltype(_impl_.header_column_pivot_separator_stroke_)*/nullptr
  , /*decltype(_impl_.header_row_pivot_group_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.header_row_pivot_group_deemphasis_stroke_)*/nullptr
  , /*decltype(_impl_.header_row_pivot_title_stroke_)*/nullptr
  , /*decltype(_impl_.footer_row_pivot_group_vertical_stroke_)*/nullptr
  , /*decltype(_impl_.banded_rows_)*/false
  , /*decltype(_impl_.behaves_like_spreadsheet_)*/false
  , /*decltype(_impl_.auto_resize_)*/false
  , /*decltype(_impl_.v_strokes_visible_)*/false
  , /*decltype(_impl_.h_strokes_visible_)*/false
  , /*decltype(_impl_.hr_separator_visible_)*/false
  , /*decltype(_impl_.hc_separator_visible_)*/false
  , /*decltype(_impl_.footer_separator_visible_)*/false
  , /*decltype(_impl_.obsolete_master_font_size_)*/0
  , /*decltype(_impl_.table_border_visible_)*/false
  , /*decltype(_impl_.table_header_border_visible_)*/false
  , /*decltype(_impl_.table_hc_divider_visible_)*/false
  , /*decltype(_impl_.table_hr_divider_visible_)*/false
  , /*decltype(_impl_.table_footer_divider_visible_)*/false
  , /*decltype(_impl_.writing_direction_)*/-1} {}
struct TableStylePropertiesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableStylePropertiesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    TableStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableStylePropertiesArchiveDefaultTypeInternal _TableStylePropertiesArchive_default_instance_;
PROTOBUF_CONSTEXPR TableStylePresetArchive::TableStylePresetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.image_)*/nullptr
  , /*decltype(_impl_.style_network_)*/nullptr
  , /*decltype(_impl_.index_)*/0} {}
struct TableStylePresetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableStylePresetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableStylePresetArchiveDefaultTypeInternal() {}
  union {
    TableStylePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableStylePresetArchiveDefaultTypeInternal _TableStylePresetArchive_default_instance_;
PROTOBUF_CONSTEXPR TableStrokePresetArchive::TableStrokePresetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.index_)*/0} {}
struct TableStrokePresetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableStrokePresetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableStrokePresetArchiveDefaultTypeInternal() {}
  union {
    TableStrokePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableStrokePresetArchiveDefaultTypeInternal _TableStrokePresetArchive_default_instance_;
PROTOBUF_CONSTEXPR ThemePresetsArchive::ThemePresetsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_style_presets_)*/{}
  , /*decltype(_impl_.table_cell_stroke_presets_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ThemePresetsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ThemePresetsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ThemePresetsArchiveDefaultTypeInternal() {}
  union {
    ThemePresetsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ThemePresetsArchiveDefaultTypeInternal _ThemePresetsArchive_default_instance_;
}  // namespace TST
static ::_pb::Metadata file_level_metadata_TSTStylePropertyArchiving_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_TSTStylePropertyArchiving_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSTStylePropertyArchiving_2eproto = nullptr;

const uint32_t TableStruct_TSTStylePropertyArchiving_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_TableStrokeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_TableStrokeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_TableStrokeArchive, _impl_.stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_TableStrokeArchive, _impl_.background_),
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_TableStrokeArchive, _impl_.opacity_),
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_TableStrokeArchive, _impl_.empty_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.cell_fill_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.text_wrap_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.deprecated_top_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.deprecated_right_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.deprecated_bottom_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.deprecated_left_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.vertical_alignment_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.padding_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.top_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.right_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.bottom_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::CellStylePropertiesArchive, _impl_.left_stroke_),
  0,
  10,
  1,
  2,
  3,
  4,
  11,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_StrokePresetDataArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_StrokePresetDataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_StrokePresetDataArchive, _impl_.deprecated_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_StrokePresetDataArchive, _impl_.deprecated_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_StrokePresetDataArchive, _impl_.deprecated_exterior_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::Deprecated_StrokePresetDataArchive, _impl_.deprecated_visible_mask_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::StrokePresetDataArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokePresetDataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StrokePresetDataArchive, _impl_.horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokePresetDataArchive, _impl_.vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokePresetDataArchive, _impl_.exterior_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokePresetDataArchive, _impl_.visible_mask_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::StrokePresetListArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokePresetListArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StrokePresetListArchive, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokePresetListArchive, _impl_.deprecated_preset_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokePresetListArchive, _impl_.preset_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.banded_rows_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.banded_fill_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.behaves_like_spreadsheet_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.auto_resize_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_header_row_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_header_row_border_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_header_row_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_header_row_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_header_column_border_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_header_column_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_header_column_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_header_column_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_footer_row_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_footer_row_border_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_footer_row_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_footer_row_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_table_body_horizontal_border_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_table_body_vertical_border_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_table_body_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.deprecated_table_body_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.stroke_preset_list_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.v_strokes_visible_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.h_strokes_visible_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.hr_separator_visible_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.hc_separator_visible_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.footer_separator_visible_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_border_visible_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_header_border_visible_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_hc_divider_visible_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_hr_divider_visible_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_footer_divider_visible_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.obsolete_master_font_size_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.master_font_family_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.writing_direction_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_row_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_row_border_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_row_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_row_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_column_border_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_column_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_column_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_column_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.footer_row_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.footer_row_border_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.footer_row_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.footer_row_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_body_horizontal_border_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_body_vertical_border_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_body_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_body_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level1_top_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level2_top_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level3_top_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level4_top_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level5_top_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level1_bottom_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level2_bottom_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level3_bottom_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level4_bottom_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level5_bottom_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level1_interior_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level2_interior_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level3_interior_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level4_interior_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level5_interior_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level1_label_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level2_label_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level3_label_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level4_label_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.category_level5_label_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_body_pivot_group_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_body_pivot_group_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_body_pivot_deemphasis_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.table_body_pivot_emphasis_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_column_pivot_group_horizontal_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_column_pivot_group_deemphasis_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_column_pivot_separator_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_row_pivot_group_vertical_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_row_pivot_group_deemphasis_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.header_row_pivot_title_stroke_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePropertiesArchive, _impl_.footer_row_pivot_group_vertical_stroke_),
  66,
  1,
  67,
  68,
  2,
  3,
  9,
  10,
  4,
  5,
  11,
  12,
  6,
  7,
  13,
  14,
  8,
  15,
  16,
  17,
  18,
  69,
  70,
  71,
  72,
  73,
  75,
  76,
  77,
  78,
  79,
  74,
  0,
  80,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePresetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePresetArchive, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePresetArchive, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStylePresetArchive, _impl_.style_network_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::TableStrokePresetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableStrokePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableStrokePresetArchive, _impl_.index_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ThemePresetsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ThemePresetsArchive, _impl_.table_style_presets_),
  PROTOBUF_FIELD_OFFSET(::TST::ThemePresetsArchive, _impl_.table_cell_stroke_presets_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::TST::Deprecated_TableStrokeArchive)},
  { 14, 32, -1, sizeof(::TST::CellStylePropertiesArchive)},
  { 44, 54, -1, sizeof(::TST::Deprecated_StrokePresetDataArchive)},
  { 58, 68, -1, sizeof(::TST::StrokePresetDataArchive)},
  { 72, 81, -1, sizeof(::TST::StrokePresetListArchive)},
  { 84, 171, -1, sizeof(::TST::TableStylePropertiesArchive)},
  { 252, 261, -1, sizeof(::TST::TableStylePresetArchive)},
  { 264, 271, -1, sizeof(::TST::TableStrokePresetArchive)},
  { 272, -1, -1, sizeof(::TST::ThemePresetsArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TST::_Deprecated_TableStrokeArchive_default_instance_._instance,
  &::TST::_CellStylePropertiesArchive_default_instance_._instance,
  &::TST::_Deprecated_StrokePresetDataArchive_default_instance_._instance,
  &::TST::_StrokePresetDataArchive_default_instance_._instance,
  &::TST::_StrokePresetListArchive_default_instance_._instance,
  &::TST::_TableStylePropertiesArchive_default_instance_._instance,
  &::TST::_TableStylePresetArchive_default_instance_._instance,
  &::TST::_TableStrokePresetArchive_default_instance_._instance,
  &::TST::_ThemePresetsArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSTStylePropertyArchiving_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037TSTStylePropertyArchiving.proto\022\003TST\032\021"
  "TSPMessages.proto\032\021TSDArchives.proto\032\021TS"
  "KArchives.proto\032\021TSSArchives.proto\032\022TSWP"
  "Archives.proto\"\203\001\n\035Deprecated_TableStrok"
  "eArchive\022\"\n\006stroke\030\001 \001(\0132\022.TSD.StrokeArc"
  "hive\022\026\n\nbackground\030\002 \001(\010B\002\030\001\022\023\n\007opacity\030"
  "\003 \001(\002B\002\030\001\022\021\n\005empty\030\004 \001(\010B\002\030\001\"\317\004\n\032CellSty"
  "lePropertiesArchive\022#\n\tcell_fill\030\001 \001(\0132\020"
  ".TSD.FillArchive\022\021\n\ttext_wrap\030\003 \001(\010\022A\n\025d"
  "eprecated_top_stroke\030\004 \001(\0132\".TST.Depreca"
  "ted_TableStrokeArchive\022C\n\027deprecated_rig"
  "ht_stroke\030\005 \001(\0132\".TST.Deprecated_TableSt"
  "rokeArchive\022D\n\030deprecated_bottom_stroke\030"
  "\006 \001(\0132\".TST.Deprecated_TableStrokeArchiv"
  "e\022B\n\026deprecated_left_stroke\030\007 \001(\0132\".TST."
  "Deprecated_TableStrokeArchive\022\032\n\022vertica"
  "l_alignment\030\010 \001(\005\022%\n\007padding\030\t \001(\0132\024.TSW"
  "P.PaddingArchive\022&\n\ntop_stroke\030\n \001(\0132\022.T"
  "SD.StrokeArchive\022(\n\014right_stroke\030\013 \001(\0132\022"
  ".TSD.StrokeArchive\022)\n\rbottom_stroke\030\014 \001("
  "\0132\022.TSD.StrokeArchive\022\'\n\013left_stroke\030\r \001"
  "(\0132\022.TSD.StrokeArchive\"\237\002\n\"Deprecated_St"
  "rokePresetDataArchive\022H\n\034deprecated_hori"
  "zontal_stroke\030\002 \002(\0132\".TST.Deprecated_Tab"
  "leStrokeArchive\022F\n\032deprecated_vertical_s"
  "troke\030\001 \002(\0132\".TST.Deprecated_TableStroke"
  "Archive\022F\n\032deprecated_exterior_stroke\030\003 "
  "\002(\0132\".TST.Deprecated_TableStrokeArchive\022"
  "\037\n\027deprecated_visible_mask\030\005 \002(\005\"\270\001\n\027Str"
  "okePresetDataArchive\022-\n\021horizontal_strok"
  "e\030\001 \001(\0132\022.TSD.StrokeArchive\022+\n\017vertical_"
  "stroke\030\002 \001(\0132\022.TSD.StrokeArchive\022+\n\017exte"
  "rior_stroke\030\003 \001(\0132\022.TSD.StrokeArchive\022\024\n"
  "\014visible_mask\030\004 \001(\005\"\232\001\n\027StrokePresetList"
  "Archive\022\r\n\005count\030\001 \002(\005\022B\n\021deprecated_pre"
  "set\030\002 \003(\0132\'.TST.Deprecated_StrokePresetD"
  "ataArchive\022,\n\006preset\030\003 \003(\0132\034.TST.StrokeP"
  "resetDataArchive\"\260&\n\033TableStylePropertie"
  "sArchive\022\023\n\013banded_rows\030\001 \001(\010\022%\n\013banded_"
  "fill\030\002 \001(\0132\020.TSD.FillArchive\022 \n\030behaves_"
  "like_spreadsheet\030\025 \001(\010\022\023\n\013auto_resize\030\026 "
  "\001(\010\022R\n&deprecated_header_row_separator_s"
  "troke\030\004 \001(\0132\".TST.Deprecated_TableStroke"
  "Archive\022O\n#deprecated_header_row_border_"
  "stroke\030\005 \001(\0132\".TST.Deprecated_TableStrok"
  "eArchive\022S\n\'deprecated_header_row_horizo"
  "ntal_stroke\030\027 \001(\0132\".TST.Deprecated_Table"
  "StrokeArchive\022Q\n%deprecated_header_row_v"
  "ertical_stroke\030\030 \001(\0132\".TST.Deprecated_Ta"
  "bleStrokeArchive\022R\n&deprecated_header_co"
  "lumn_border_stroke\030\007 \001(\0132\".TST.Deprecate"
  "d_TableStrokeArchive\022U\n)deprecated_heade"
  "r_column_separator_stroke\030\010 \001(\0132\".TST.De"
  "precated_TableStrokeArchive\022V\n*deprecate"
  "d_header_column_horizontal_stroke\030\031 \001(\0132"
  "\".TST.Deprecated_TableStrokeArchive\022T\n(d"
  "eprecated_header_column_vertical_stroke\030"
  "\032 \001(\0132\".TST.Deprecated_TableStrokeArchiv"
  "e\022R\n&deprecated_footer_row_separator_str"
  "oke\030\n \001(\0132\".TST.Deprecated_TableStrokeAr"
  "chive\022O\n#deprecated_footer_row_border_st"
  "roke\030\013 \001(\0132\".TST.Deprecated_TableStrokeA"
  "rchive\022S\n\'deprecated_footer_row_horizont"
  "al_stroke\030\033 \001(\0132\".TST.Deprecated_TableSt"
  "rokeArchive\022Q\n%deprecated_footer_row_ver"
  "tical_stroke\030\034 \001(\0132\".TST.Deprecated_Tabl"
  "eStrokeArchive\022Z\n.deprecated_table_body_"
  "horizontal_border_stroke\030\014 \001(\0132\".TST.Dep"
  "recated_TableStrokeArchive\022X\n,deprecated"
  "_table_body_vertical_border_stroke\030\035 \001(\013"
  "2\".TST.Deprecated_TableStrokeArchive\022S\n\'"
  "deprecated_table_body_horizontal_stroke\030"
  "\036 \001(\0132\".TST.Deprecated_TableStrokeArchiv"
  "e\022Q\n%deprecated_table_body_vertical_stro"
  "ke\030\037 \001(\0132\".TST.Deprecated_TableStrokeArc"
  "hive\0228\n\022stroke_preset_list\030  \001(\0132\034.TST.S"
  "trokePresetListArchive\022\031\n\021v_strokes_visi"
  "ble\030! \001(\010\022\031\n\021h_strokes_visible\030\" \001(\010\022\034\n\024"
  "hr_separator_visible\030# \001(\010\022\034\n\024hc_separat"
  "or_visible\030$ \001(\010\022 \n\030footer_separator_vis"
  "ible\030% \001(\010\022\034\n\024table_border_visible\030& \001(\010"
  "\022#\n\033table_header_border_visible\030\' \001(\010\022 \n"
  "\030table_hc_divider_visible\030* \001(\010\022 \n\030table"
  "_hr_divider_visible\030+ \001(\010\022$\n\034table_foote"
  "r_divider_visible\030, \001(\010\022!\n\031OBSOLETE_mast"
  "er_font_size\030( \001(\005\022\032\n\022master_font_family"
  "\030) \001(\t\0225\n\021writing_direction\030- \001(\0162\032.TSWP"
  ".WritingDirectionType\0227\n\033header_row_sepa"
  "rator_stroke\030. \001(\0132\022.TSD.StrokeArchive\0224"
  "\n\030header_row_border_stroke\030/ \001(\0132\022.TSD.S"
  "trokeArchive\0228\n\034header_row_horizontal_st"
  "roke\0300 \001(\0132\022.TSD.StrokeArchive\0226\n\032header"
  "_row_vertical_stroke\0301 \001(\0132\022.TSD.StrokeA"
  "rchive\0227\n\033header_column_border_stroke\0302 "
  "\001(\0132\022.TSD.StrokeArchive\022:\n\036header_column"
  "_separator_stroke\0303 \001(\0132\022.TSD.StrokeArch"
  "ive\022;\n\037header_column_horizontal_stroke\0304"
  " \001(\0132\022.TSD.StrokeArchive\0229\n\035header_colum"
  "n_vertical_stroke\0305 \001(\0132\022.TSD.StrokeArch"
  "ive\0227\n\033footer_row_separator_stroke\0306 \001(\013"
  "2\022.TSD.StrokeArchive\0224\n\030footer_row_borde"
  "r_stroke\0307 \001(\0132\022.TSD.StrokeArchive\0228\n\034fo"
  "oter_row_horizontal_stroke\0308 \001(\0132\022.TSD.S"
  "trokeArchive\0226\n\032footer_row_vertical_stro"
  "ke\0309 \001(\0132\022.TSD.StrokeArchive\022\?\n#table_bo"
  "dy_horizontal_border_stroke\030: \001(\0132\022.TSD."
  "StrokeArchive\022=\n!table_body_vertical_bor"
  "der_stroke\030; \001(\0132\022.TSD.StrokeArchive\0228\n\034"
  "table_body_horizontal_stroke\030< \001(\0132\022.TSD"
  ".StrokeArchive\0226\n\032table_body_vertical_st"
  "roke\030= \001(\0132\022.TSD.StrokeArchive\0226\n\032catego"
  "ry_level1_top_stroke\030> \001(\0132\022.TSD.StrokeA"
  "rchive\0226\n\032category_level2_top_stroke\030\? \001"
  "(\0132\022.TSD.StrokeArchive\0226\n\032category_level"
  "3_top_stroke\030@ \001(\0132\022.TSD.StrokeArchive\0226"
  "\n\032category_level4_top_stroke\030A \001(\0132\022.TSD"
  ".StrokeArchive\0226\n\032category_level5_top_st"
  "roke\030B \001(\0132\022.TSD.StrokeArchive\0229\n\035catego"
  "ry_level1_bottom_stroke\030C \001(\0132\022.TSD.Stro"
  "keArchive\0229\n\035category_level2_bottom_stro"
  "ke\030D \001(\0132\022.TSD.StrokeArchive\0229\n\035category"
  "_level3_bottom_stroke\030E \001(\0132\022.TSD.Stroke"
  "Archive\0229\n\035category_level4_bottom_stroke"
  "\030F \001(\0132\022.TSD.StrokeArchive\0229\n\035category_l"
  "evel5_bottom_stroke\030G \001(\0132\022.TSD.StrokeAr"
  "chive\022;\n\037category_level1_interior_stroke"
  "\030H \001(\0132\022.TSD.StrokeArchive\022;\n\037category_l"
  "evel2_interior_stroke\030I \001(\0132\022.TSD.Stroke"
  "Archive\022;\n\037category_level3_interior_stro"
  "ke\030J \001(\0132\022.TSD.StrokeArchive\022;\n\037category"
  "_level4_interior_stroke\030K \001(\0132\022.TSD.Stro"
  "keArchive\022;\n\037category_level5_interior_st"
  "roke\030L \001(\0132\022.TSD.StrokeArchive\022B\n&catego"
  "ry_level1_label_separator_stroke\030M \001(\0132\022"
  ".TSD.StrokeArchive\022B\n&category_level2_la"
  "bel_separator_stroke\030N \001(\0132\022.TSD.StrokeA"
  "rchive\022B\n&category_level3_label_separato"
  "r_stroke\030O \001(\0132\022.TSD.StrokeArchive\022B\n&ca"
  "tegory_level4_label_separator_stroke\030P \001"
  "(\0132\022.TSD.StrokeArchive\022B\n&category_level"
  "5_label_separator_stroke\030Q \001(\0132\022.TSD.Str"
  "okeArchive\022D\n(table_body_pivot_group_hor"
  "izontal_stroke\030R \001(\0132\022.TSD.StrokeArchive"
  "\022B\n&table_body_pivot_group_vertical_stro"
  "ke\030S \001(\0132\022.TSD.StrokeArchive\022I\n-table_bo"
  "dy_pivot_deemphasis_horizontal_stroke\030T "
  "\001(\0132\022.TSD.StrokeArchive\022E\n)table_body_pi"
  "vot_emphasis_vertical_stroke\030U \001(\0132\022.TSD"
  ".StrokeArchive\022G\n+header_column_pivot_gr"
  "oup_horizontal_stroke\030V \001(\0132\022.TSD.Stroke"
  "Archive\022G\n+header_column_pivot_group_dee"
  "mphasis_stroke\030W \001(\0132\022.TSD.StrokeArchive"
  "\022@\n$header_column_pivot_separator_stroke"
  "\030X \001(\0132\022.TSD.StrokeArchive\022B\n&header_row"
  "_pivot_group_vertical_stroke\030Y \001(\0132\022.TSD"
  ".StrokeArchive\022D\n(header_row_pivot_group"
  "_deemphasis_stroke\030Z \001(\0132\022.TSD.StrokeArc"
  "hive\0229\n\035header_row_pivot_title_stroke\030[ "
  "\001(\0132\022.TSD.StrokeArchive\022B\n&footer_row_pi"
  "vot_group_vertical_stroke\030\\ \001(\0132\022.TSD.St"
  "rokeArchive\"n\n\027TableStylePresetArchive\022\r"
  "\n\005index\030\001 \001(\005\022\035\n\005image\030\002 \001(\0132\016.TSP.Refer"
  "ence\022%\n\rstyle_network\030\003 \001(\0132\016.TSP.Refere"
  "nce\")\n\030TableStrokePresetArchive\022\r\n\005index"
  "\030\001 \002(\005\"\266\001\n\023ThemePresetsArchive\022+\n\023table_"
  "style_presets\030\001 \003(\0132\016.TSP.Reference\0221\n\031t"
  "able_cell_stroke_presets\030\002 \003(\0132\016.TSP.Ref"
  "erence2\?\n\textension\022\021.TSS.ThemeArchive\030\310"
  "\001 \001(\0132\030.TST.ThemePresetsArchive"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSTStylePropertyArchiving_2eproto_deps[5] = {
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSTStylePropertyArchiving_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSTStylePropertyArchiving_2eproto = {
    false, false, 6751, descriptor_table_protodef_TSTStylePropertyArchiving_2eproto,
    "TSTStylePropertyArchiving.proto",
    &descriptor_table_TSTStylePropertyArchiving_2eproto_once, descriptor_table_TSTStylePropertyArchiving_2eproto_deps, 5, 9,
    schemas, file_default_instances, TableStruct_TSTStylePropertyArchiving_2eproto::offsets,
    file_level_metadata_TSTStylePropertyArchiving_2eproto, file_level_enum_descriptors_TSTStylePropertyArchiving_2eproto,
    file_level_service_descriptors_TSTStylePropertyArchiving_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSTStylePropertyArchiving_2eproto_getter() {
  return &descriptor_table_TSTStylePropertyArchiving_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSTStylePropertyArchiving_2eproto(&descriptor_table_TSTStylePropertyArchiving_2eproto);
namespace TST {

// ===================================================================

class Deprecated_TableStrokeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Deprecated_TableStrokeArchive>()._impl_._has_bits_);
  static const ::TSD::StrokeArchive& stroke(const Deprecated_TableStrokeArchive* msg);
  static void set_has_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_background(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opacity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_empty(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSD::StrokeArchive&
Deprecated_TableStrokeArchive::_Internal::stroke(const Deprecated_TableStrokeArchive* msg) {
  return *msg->_impl_.stroke_;
}
void Deprecated_TableStrokeArchive::clear_stroke() {
  if (_impl_.stroke_ != nullptr) _impl_.stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Deprecated_TableStrokeArchive::Deprecated_TableStrokeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.Deprecated_TableStrokeArchive)
}
Deprecated_TableStrokeArchive::Deprecated_TableStrokeArchive(const Deprecated_TableStrokeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Deprecated_TableStrokeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.opacity_){}
    , decltype(_impl_.background_){}
    , decltype(_impl_.empty_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_stroke()) {
    _this->_impl_.stroke_ = new ::TSD::StrokeArchive(*from._impl_.stroke_);
  }
  ::memcpy(&_impl_.opacity_, &from._impl_.opacity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.empty_) -
    reinterpret_cast<char*>(&_impl_.opacity_)) + sizeof(_impl_.empty_));
  // @@protoc_insertion_point(copy_constructor:TST.Deprecated_TableStrokeArchive)
}

inline void Deprecated_TableStrokeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.stroke_){nullptr}
    , decltype(_impl_.opacity_){0}
    , decltype(_impl_.background_){false}
    , decltype(_impl_.empty_){false}
  };
}

Deprecated_TableStrokeArchive::~Deprecated_TableStrokeArchive() {
  // @@protoc_insertion_point(destructor:TST.Deprecated_TableStrokeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Deprecated_TableStrokeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.stroke_;
}

void Deprecated_TableStrokeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Deprecated_TableStrokeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.Deprecated_TableStrokeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.stroke_ != nullptr);
    _impl_.stroke_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.opacity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.empty_) -
        reinterpret_cast<char*>(&_impl_.opacity_)) + sizeof(_impl_.empty_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Deprecated_TableStrokeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.StrokeArchive stroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool background = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_background(&has_bits);
          _impl_.background_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float opacity = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_opacity(&has_bits);
          _impl_.opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool empty = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_empty(&has_bits);
          _impl_.empty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Deprecated_TableStrokeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.Deprecated_TableStrokeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive stroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::stroke(this),
        _Internal::stroke(this).GetCachedSize(), target, stream);
  }

  // optional bool background = 2 [deprecated = true];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_background(), target);
  }

  // optional float opacity = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_opacity(), target);
  }

  // optional bool empty = 4 [deprecated = true];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_empty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.Deprecated_TableStrokeArchive)
  return target;
}

size_t Deprecated_TableStrokeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.Deprecated_TableStrokeArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSD.StrokeArchive stroke = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stroke_);
    }

    // optional float opacity = 3 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool background = 2 [deprecated = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool empty = 4 [deprecated = true];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Deprecated_TableStrokeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Deprecated_TableStrokeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Deprecated_TableStrokeArchive::GetClassData() const { return &_class_data_; }


void Deprecated_TableStrokeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Deprecated_TableStrokeArchive*>(&to_msg);
  auto& from = static_cast<const Deprecated_TableStrokeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.Deprecated_TableStrokeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.opacity_ = from._impl_.opacity_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.background_ = from._impl_.background_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.empty_ = from._impl_.empty_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Deprecated_TableStrokeArchive::CopyFrom(const Deprecated_TableStrokeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.Deprecated_TableStrokeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deprecated_TableStrokeArchive::IsInitialized() const {
  if (_internal_has_stroke()) {
    if (!_impl_.stroke_->IsInitialized()) return false;
  }
  return true;
}

void Deprecated_TableStrokeArchive::InternalSwap(Deprecated_TableStrokeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Deprecated_TableStrokeArchive, _impl_.empty_)
      + sizeof(Deprecated_TableStrokeArchive::_impl_.empty_)
      - PROTOBUF_FIELD_OFFSET(Deprecated_TableStrokeArchive, _impl_.stroke_)>(
          reinterpret_cast<char*>(&_impl_.stroke_),
          reinterpret_cast<char*>(&other->_impl_.stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Deprecated_TableStrokeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTStylePropertyArchiving_2eproto_getter, &descriptor_table_TSTStylePropertyArchiving_2eproto_once,
      file_level_metadata_TSTStylePropertyArchiving_2eproto[0]);
}

// ===================================================================

class CellStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CellStylePropertiesArchive>()._impl_._has_bits_);
  static const ::TSD::FillArchive& cell_fill(const CellStylePropertiesArchive* msg);
  static void set_has_cell_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_text_wrap(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_top_stroke(const CellStylePropertiesArchive* msg);
  static void set_has_deprecated_top_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_right_stroke(const CellStylePropertiesArchive* msg);
  static void set_has_deprecated_right_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_bottom_stroke(const CellStylePropertiesArchive* msg);
  static void set_has_deprecated_bottom_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_left_stroke(const CellStylePropertiesArchive* msg);
  static void set_has_deprecated_left_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vertical_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSWP::PaddingArchive& padding(const CellStylePropertiesArchive* msg);
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSD::StrokeArchive& top_stroke(const CellStylePropertiesArchive* msg);
  static void set_has_top_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSD::StrokeArchive& right_stroke(const CellStylePropertiesArchive* msg);
  static void set_has_right_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSD::StrokeArchive& bottom_stroke(const CellStylePropertiesArchive* msg);
  static void set_has_bottom_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSD::StrokeArchive& left_stroke(const CellStylePropertiesArchive* msg);
  static void set_has_left_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::TSD::FillArchive&
CellStylePropertiesArchive::_Internal::cell_fill(const CellStylePropertiesArchive* msg) {
  return *msg->_impl_.cell_fill_;
}
const ::TST::Deprecated_TableStrokeArchive&
CellStylePropertiesArchive::_Internal::deprecated_top_stroke(const CellStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_top_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
CellStylePropertiesArchive::_Internal::deprecated_right_stroke(const CellStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_right_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
CellStylePropertiesArchive::_Internal::deprecated_bottom_stroke(const CellStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_bottom_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
CellStylePropertiesArchive::_Internal::deprecated_left_stroke(const CellStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_left_stroke_;
}
const ::TSWP::PaddingArchive&
CellStylePropertiesArchive::_Internal::padding(const CellStylePropertiesArchive* msg) {
  return *msg->_impl_.padding_;
}
const ::TSD::StrokeArchive&
CellStylePropertiesArchive::_Internal::top_stroke(const CellStylePropertiesArchive* msg) {
  return *msg->_impl_.top_stroke_;
}
const ::TSD::StrokeArchive&
CellStylePropertiesArchive::_Internal::right_stroke(const CellStylePropertiesArchive* msg) {
  return *msg->_impl_.right_stroke_;
}
const ::TSD::StrokeArchive&
CellStylePropertiesArchive::_Internal::bottom_stroke(const CellStylePropertiesArchive* msg) {
  return *msg->_impl_.bottom_stroke_;
}
const ::TSD::StrokeArchive&
CellStylePropertiesArchive::_Internal::left_stroke(const CellStylePropertiesArchive* msg) {
  return *msg->_impl_.left_stroke_;
}
void CellStylePropertiesArchive::clear_cell_fill() {
  if (_impl_.cell_fill_ != nullptr) _impl_.cell_fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CellStylePropertiesArchive::clear_padding() {
  if (_impl_.padding_ != nullptr) _impl_.padding_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CellStylePropertiesArchive::clear_top_stroke() {
  if (_impl_.top_stroke_ != nullptr) _impl_.top_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void CellStylePropertiesArchive::clear_right_stroke() {
  if (_impl_.right_stroke_ != nullptr) _impl_.right_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void CellStylePropertiesArchive::clear_bottom_stroke() {
  if (_impl_.bottom_stroke_ != nullptr) _impl_.bottom_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void CellStylePropertiesArchive::clear_left_stroke() {
  if (_impl_.left_stroke_ != nullptr) _impl_.left_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
CellStylePropertiesArchive::CellStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CellStylePropertiesArchive)
}
CellStylePropertiesArchive::CellStylePropertiesArchive(const CellStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CellStylePropertiesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_fill_){nullptr}
    , decltype(_impl_.deprecated_top_stroke_){nullptr}
    , decltype(_impl_.deprecated_right_stroke_){nullptr}
    , decltype(_impl_.deprecated_bottom_stroke_){nullptr}
    , decltype(_impl_.deprecated_left_stroke_){nullptr}
    , decltype(_impl_.padding_){nullptr}
    , decltype(_impl_.top_stroke_){nullptr}
    , decltype(_impl_.right_stroke_){nullptr}
    , decltype(_impl_.bottom_stroke_){nullptr}
    , decltype(_impl_.left_stroke_){nullptr}
    , decltype(_impl_.text_wrap_){}
    , decltype(_impl_.vertical_alignment_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_fill()) {
    _this->_impl_.cell_fill_ = new ::TSD::FillArchive(*from._impl_.cell_fill_);
  }
  if (from._internal_has_deprecated_top_stroke()) {
    _this->_impl_.deprecated_top_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_top_stroke_);
  }
  if (from._internal_has_deprecated_right_stroke()) {
    _this->_impl_.deprecated_right_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_right_stroke_);
  }
  if (from._internal_has_deprecated_bottom_stroke()) {
    _this->_impl_.deprecated_bottom_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_bottom_stroke_);
  }
  if (from._internal_has_deprecated_left_stroke()) {
    _this->_impl_.deprecated_left_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_left_stroke_);
  }
  if (from._internal_has_padding()) {
    _this->_impl_.padding_ = new ::TSWP::PaddingArchive(*from._impl_.padding_);
  }
  if (from._internal_has_top_stroke()) {
    _this->_impl_.top_stroke_ = new ::TSD::StrokeArchive(*from._impl_.top_stroke_);
  }
  if (from._internal_has_right_stroke()) {
    _this->_impl_.right_stroke_ = new ::TSD::StrokeArchive(*from._impl_.right_stroke_);
  }
  if (from._internal_has_bottom_stroke()) {
    _this->_impl_.bottom_stroke_ = new ::TSD::StrokeArchive(*from._impl_.bottom_stroke_);
  }
  if (from._internal_has_left_stroke()) {
    _this->_impl_.left_stroke_ = new ::TSD::StrokeArchive(*from._impl_.left_stroke_);
  }
  ::memcpy(&_impl_.text_wrap_, &from._impl_.text_wrap_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.vertical_alignment_) -
    reinterpret_cast<char*>(&_impl_.text_wrap_)) + sizeof(_impl_.vertical_alignment_));
  // @@protoc_insertion_point(copy_constructor:TST.CellStylePropertiesArchive)
}

inline void CellStylePropertiesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_fill_){nullptr}
    , decltype(_impl_.deprecated_top_stroke_){nullptr}
    , decltype(_impl_.deprecated_right_stroke_){nullptr}
    , decltype(_impl_.deprecated_bottom_stroke_){nullptr}
    , decltype(_impl_.deprecated_left_stroke_){nullptr}
    , decltype(_impl_.padding_){nullptr}
    , decltype(_impl_.top_stroke_){nullptr}
    , decltype(_impl_.right_stroke_){nullptr}
    , decltype(_impl_.bottom_stroke_){nullptr}
    , decltype(_impl_.left_stroke_){nullptr}
    , decltype(_impl_.text_wrap_){false}
    , decltype(_impl_.vertical_alignment_){0}
  };
}

CellStylePropertiesArchive::~CellStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TST.CellStylePropertiesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CellStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_fill_;
  if (this != internal_default_instance()) delete _impl_.deprecated_top_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_right_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_bottom_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_left_stroke_;
  if (this != internal_default_instance()) delete _impl_.padding_;
  if (this != internal_default_instance()) delete _impl_.top_stroke_;
  if (this != internal_default_instance()) delete _impl_.right_stroke_;
  if (this != internal_default_instance()) delete _impl_.bottom_stroke_;
  if (this != internal_default_instance()) delete _impl_.left_stroke_;
}

void CellStylePropertiesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CellStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CellStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cell_fill_ != nullptr);
      _impl_.cell_fill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.deprecated_top_stroke_ != nullptr);
      _impl_.deprecated_top_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.deprecated_right_stroke_ != nullptr);
      _impl_.deprecated_right_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.deprecated_bottom_stroke_ != nullptr);
      _impl_.deprecated_bottom_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.deprecated_left_stroke_ != nullptr);
      _impl_.deprecated_left_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.padding_ != nullptr);
      _impl_.padding_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.top_stroke_ != nullptr);
      _impl_.top_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.right_stroke_ != nullptr);
      _impl_.right_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.bottom_stroke_ != nullptr);
      _impl_.bottom_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.left_stroke_ != nullptr);
      _impl_.left_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00000c00u) {
    ::memset(&_impl_.text_wrap_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.vertical_alignment_) -
        reinterpret_cast<char*>(&_impl_.text_wrap_)) + sizeof(_impl_.vertical_alignment_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellStylePropertiesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.FillArchive cell_fill = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool text_wrap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_text_wrap(&has_bits);
          _impl_.text_wrap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_top_stroke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_top_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_right_stroke = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_right_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_bottom_stroke = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_bottom_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_left_stroke = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_left_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 vertical_alignment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_vertical_alignment(&has_bits);
          _impl_.vertical_alignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.PaddingArchive padding = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_padding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive top_stroke = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive right_stroke = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive bottom_stroke = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive left_stroke = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellStylePropertiesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CellStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive cell_fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cell_fill(this),
        _Internal::cell_fill(this).GetCachedSize(), target, stream);
  }

  // optional bool text_wrap = 3;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_text_wrap(), target);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_top_stroke = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::deprecated_top_stroke(this),
        _Internal::deprecated_top_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_right_stroke = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::deprecated_right_stroke(this),
        _Internal::deprecated_right_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_bottom_stroke = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::deprecated_bottom_stroke(this),
        _Internal::deprecated_bottom_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_left_stroke = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::deprecated_left_stroke(this),
        _Internal::deprecated_left_stroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 vertical_alignment = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_vertical_alignment(), target);
  }

  // optional .TSWP.PaddingArchive padding = 9;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::padding(this),
        _Internal::padding(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive top_stroke = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::top_stroke(this),
        _Internal::top_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive right_stroke = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::right_stroke(this),
        _Internal::right_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive bottom_stroke = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::bottom_stroke(this),
        _Internal::bottom_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive left_stroke = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::left_stroke(this),
        _Internal::left_stroke(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CellStylePropertiesArchive)
  return target;
}

size_t CellStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CellStylePropertiesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.FillArchive cell_fill = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_fill_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_top_stroke = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_top_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_right_stroke = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_right_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_bottom_stroke = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_bottom_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_left_stroke = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_left_stroke_);
    }

    // optional .TSWP.PaddingArchive padding = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.padding_);
    }

    // optional .TSD.StrokeArchive top_stroke = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.top_stroke_);
    }

    // optional .TSD.StrokeArchive right_stroke = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.right_stroke_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSD.StrokeArchive bottom_stroke = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.bottom_stroke_);
    }

    // optional .TSD.StrokeArchive left_stroke = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.left_stroke_);
    }

    // optional bool text_wrap = 3;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional int32 vertical_alignment = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vertical_alignment());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CellStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellStylePropertiesArchive::GetClassData() const { return &_class_data_; }


void CellStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CellStylePropertiesArchive*>(&to_msg);
  auto& from = static_cast<const CellStylePropertiesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CellStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_fill()->::TSD::FillArchive::MergeFrom(
          from._internal_cell_fill());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_deprecated_top_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_top_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deprecated_right_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_right_stroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_deprecated_bottom_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_bottom_stroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_deprecated_left_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_left_stroke());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_padding()->::TSWP::PaddingArchive::MergeFrom(
          from._internal_padding());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_top_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_top_stroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_right_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_right_stroke());
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_bottom_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_bottom_stroke());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_left_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_left_stroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.text_wrap_ = from._impl_.text_wrap_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.vertical_alignment_ = from._impl_.vertical_alignment_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellStylePropertiesArchive::CopyFrom(const CellStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CellStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_cell_fill()) {
    if (!_impl_.cell_fill_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_top_stroke()) {
    if (!_impl_.deprecated_top_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_right_stroke()) {
    if (!_impl_.deprecated_right_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_bottom_stroke()) {
    if (!_impl_.deprecated_bottom_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_left_stroke()) {
    if (!_impl_.deprecated_left_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_top_stroke()) {
    if (!_impl_.top_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_right_stroke()) {
    if (!_impl_.right_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_bottom_stroke()) {
    if (!_impl_.bottom_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_left_stroke()) {
    if (!_impl_.left_stroke_->IsInitialized()) return false;
  }
  return true;
}

void CellStylePropertiesArchive::InternalSwap(CellStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellStylePropertiesArchive, _impl_.vertical_alignment_)
      + sizeof(CellStylePropertiesArchive::_impl_.vertical_alignment_)
      - PROTOBUF_FIELD_OFFSET(CellStylePropertiesArchive, _impl_.cell_fill_)>(
          reinterpret_cast<char*>(&_impl_.cell_fill_),
          reinterpret_cast<char*>(&other->_impl_.cell_fill_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellStylePropertiesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTStylePropertyArchiving_2eproto_getter, &descriptor_table_TSTStylePropertyArchiving_2eproto_once,
      file_level_metadata_TSTStylePropertyArchiving_2eproto[1]);
}

// ===================================================================

class Deprecated_StrokePresetDataArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<Deprecated_StrokePresetDataArchive>()._impl_._has_bits_);
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_horizontal_stroke(const Deprecated_StrokePresetDataArchive* msg);
  static void set_has_deprecated_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_vertical_stroke(const Deprecated_StrokePresetDataArchive* msg);
  static void set_has_deprecated_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_exterior_stroke(const Deprecated_StrokePresetDataArchive* msg);
  static void set_has_deprecated_exterior_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_deprecated_visible_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TST::Deprecated_TableStrokeArchive&
Deprecated_StrokePresetDataArchive::_Internal::deprecated_horizontal_stroke(const Deprecated_StrokePresetDataArchive* msg) {
  return *msg->_impl_.deprecated_horizontal_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
Deprecated_StrokePresetDataArchive::_Internal::deprecated_vertical_stroke(const Deprecated_StrokePresetDataArchive* msg) {
  return *msg->_impl_.deprecated_vertical_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
Deprecated_StrokePresetDataArchive::_Internal::deprecated_exterior_stroke(const Deprecated_StrokePresetDataArchive* msg) {
  return *msg->_impl_.deprecated_exterior_stroke_;
}
Deprecated_StrokePresetDataArchive::Deprecated_StrokePresetDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.Deprecated_StrokePresetDataArchive)
}
Deprecated_StrokePresetDataArchive::Deprecated_StrokePresetDataArchive(const Deprecated_StrokePresetDataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Deprecated_StrokePresetDataArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deprecated_vertical_stroke_){nullptr}
    , decltype(_impl_.deprecated_horizontal_stroke_){nullptr}
    , decltype(_impl_.deprecated_exterior_stroke_){nullptr}
    , decltype(_impl_.deprecated_visible_mask_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_deprecated_vertical_stroke()) {
    _this->_impl_.deprecated_vertical_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_vertical_stroke_);
  }
  if (from._internal_has_deprecated_horizontal_stroke()) {
    _this->_impl_.deprecated_horizontal_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_horizontal_stroke_);
  }
  if (from._internal_has_deprecated_exterior_stroke()) {
    _this->_impl_.deprecated_exterior_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_exterior_stroke_);
  }
  _this->_impl_.deprecated_visible_mask_ = from._impl_.deprecated_visible_mask_;
  // @@protoc_insertion_point(copy_constructor:TST.Deprecated_StrokePresetDataArchive)
}

inline void Deprecated_StrokePresetDataArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deprecated_vertical_stroke_){nullptr}
    , decltype(_impl_.deprecated_horizontal_stroke_){nullptr}
    , decltype(_impl_.deprecated_exterior_stroke_){nullptr}
    , decltype(_impl_.deprecated_visible_mask_){0}
  };
}

Deprecated_StrokePresetDataArchive::~Deprecated_StrokePresetDataArchive() {
  // @@protoc_insertion_point(destructor:TST.Deprecated_StrokePresetDataArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Deprecated_StrokePresetDataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.deprecated_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_exterior_stroke_;
}

void Deprecated_StrokePresetDataArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Deprecated_StrokePresetDataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.Deprecated_StrokePresetDataArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.deprecated_vertical_stroke_ != nullptr);
      _impl_.deprecated_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.deprecated_horizontal_stroke_ != nullptr);
      _impl_.deprecated_horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.deprecated_exterior_stroke_ != nullptr);
      _impl_.deprecated_exterior_stroke_->Clear();
    }
  }
  _impl_.deprecated_visible_mask_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Deprecated_StrokePresetDataArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_exterior_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 deprecated_visible_mask = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_deprecated_visible_mask(&has_bits);
          _impl_.deprecated_visible_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Deprecated_StrokePresetDataArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.Deprecated_StrokePresetDataArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::deprecated_vertical_stroke(this),
        _Internal::deprecated_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::deprecated_horizontal_stroke(this),
        _Internal::deprecated_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::deprecated_exterior_stroke(this),
        _Internal::deprecated_exterior_stroke(this).GetCachedSize(), target, stream);
  }

  // required int32 deprecated_visible_mask = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_deprecated_visible_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.Deprecated_StrokePresetDataArchive)
  return target;
}

size_t Deprecated_StrokePresetDataArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.Deprecated_StrokePresetDataArchive)
  size_t total_size = 0;

  if (_internal_has_deprecated_vertical_stroke()) {
    // required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deprecated_vertical_stroke_);
  }

  if (_internal_has_deprecated_horizontal_stroke()) {
    // required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deprecated_horizontal_stroke_);
  }

  if (_internal_has_deprecated_exterior_stroke()) {
    // required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deprecated_exterior_stroke_);
  }

  if (_internal_has_deprecated_visible_mask()) {
    // required int32 deprecated_visible_mask = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deprecated_visible_mask());
  }

  return total_size;
}
size_t Deprecated_StrokePresetDataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.Deprecated_StrokePresetDataArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TST.Deprecated_TableStrokeArchive deprecated_vertical_stroke = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deprecated_vertical_stroke_);

    // required .TST.Deprecated_TableStrokeArchive deprecated_horizontal_stroke = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deprecated_horizontal_stroke_);

    // required .TST.Deprecated_TableStrokeArchive deprecated_exterior_stroke = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.deprecated_exterior_stroke_);

    // required int32 deprecated_visible_mask = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_deprecated_visible_mask());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Deprecated_StrokePresetDataArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Deprecated_StrokePresetDataArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Deprecated_StrokePresetDataArchive::GetClassData() const { return &_class_data_; }


void Deprecated_StrokePresetDataArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Deprecated_StrokePresetDataArchive*>(&to_msg);
  auto& from = static_cast<const Deprecated_StrokePresetDataArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.Deprecated_StrokePresetDataArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_deprecated_vertical_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_vertical_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_deprecated_horizontal_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_horizontal_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deprecated_exterior_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_exterior_stroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.deprecated_visible_mask_ = from._impl_.deprecated_visible_mask_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Deprecated_StrokePresetDataArchive::CopyFrom(const Deprecated_StrokePresetDataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.Deprecated_StrokePresetDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Deprecated_StrokePresetDataArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_deprecated_vertical_stroke()) {
    if (!_impl_.deprecated_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_horizontal_stroke()) {
    if (!_impl_.deprecated_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_exterior_stroke()) {
    if (!_impl_.deprecated_exterior_stroke_->IsInitialized()) return false;
  }
  return true;
}

void Deprecated_StrokePresetDataArchive::InternalSwap(Deprecated_StrokePresetDataArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Deprecated_StrokePresetDataArchive, _impl_.deprecated_visible_mask_)
      + sizeof(Deprecated_StrokePresetDataArchive::_impl_.deprecated_visible_mask_)
      - PROTOBUF_FIELD_OFFSET(Deprecated_StrokePresetDataArchive, _impl_.deprecated_vertical_stroke_)>(
          reinterpret_cast<char*>(&_impl_.deprecated_vertical_stroke_),
          reinterpret_cast<char*>(&other->_impl_.deprecated_vertical_stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Deprecated_StrokePresetDataArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTStylePropertyArchiving_2eproto_getter, &descriptor_table_TSTStylePropertyArchiving_2eproto_once,
      file_level_metadata_TSTStylePropertyArchiving_2eproto[2]);
}

// ===================================================================

class StrokePresetDataArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokePresetDataArchive>()._impl_._has_bits_);
  static const ::TSD::StrokeArchive& horizontal_stroke(const StrokePresetDataArchive* msg);
  static void set_has_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSD::StrokeArchive& vertical_stroke(const StrokePresetDataArchive* msg);
  static void set_has_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSD::StrokeArchive& exterior_stroke(const StrokePresetDataArchive* msg);
  static void set_has_exterior_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_visible_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TSD::StrokeArchive&
StrokePresetDataArchive::_Internal::horizontal_stroke(const StrokePresetDataArchive* msg) {
  return *msg->_impl_.horizontal_stroke_;
}
const ::TSD::StrokeArchive&
StrokePresetDataArchive::_Internal::vertical_stroke(const StrokePresetDataArchive* msg) {
  return *msg->_impl_.vertical_stroke_;
}
const ::TSD::StrokeArchive&
StrokePresetDataArchive::_Internal::exterior_stroke(const StrokePresetDataArchive* msg) {
  return *msg->_impl_.exterior_stroke_;
}
void StrokePresetDataArchive::clear_horizontal_stroke() {
  if (_impl_.horizontal_stroke_ != nullptr) _impl_.horizontal_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void StrokePresetDataArchive::clear_vertical_stroke() {
  if (_impl_.vertical_stroke_ != nullptr) _impl_.vertical_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void StrokePresetDataArchive::clear_exterior_stroke() {
  if (_impl_.exterior_stroke_ != nullptr) _impl_.exterior_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
StrokePresetDataArchive::StrokePresetDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StrokePresetDataArchive)
}
StrokePresetDataArchive::StrokePresetDataArchive(const StrokePresetDataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrokePresetDataArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.horizontal_stroke_){nullptr}
    , decltype(_impl_.vertical_stroke_){nullptr}
    , decltype(_impl_.exterior_stroke_){nullptr}
    , decltype(_impl_.visible_mask_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_horizontal_stroke()) {
    _this->_impl_.horizontal_stroke_ = new ::TSD::StrokeArchive(*from._impl_.horizontal_stroke_);
  }
  if (from._internal_has_vertical_stroke()) {
    _this->_impl_.vertical_stroke_ = new ::TSD::StrokeArchive(*from._impl_.vertical_stroke_);
  }
  if (from._internal_has_exterior_stroke()) {
    _this->_impl_.exterior_stroke_ = new ::TSD::StrokeArchive(*from._impl_.exterior_stroke_);
  }
  _this->_impl_.visible_mask_ = from._impl_.visible_mask_;
  // @@protoc_insertion_point(copy_constructor:TST.StrokePresetDataArchive)
}

inline void StrokePresetDataArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.horizontal_stroke_){nullptr}
    , decltype(_impl_.vertical_stroke_){nullptr}
    , decltype(_impl_.exterior_stroke_){nullptr}
    , decltype(_impl_.visible_mask_){0}
  };
}

StrokePresetDataArchive::~StrokePresetDataArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokePresetDataArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrokePresetDataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.exterior_stroke_;
}

void StrokePresetDataArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrokePresetDataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokePresetDataArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.horizontal_stroke_ != nullptr);
      _impl_.horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.vertical_stroke_ != nullptr);
      _impl_.vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.exterior_stroke_ != nullptr);
      _impl_.exterior_stroke_->Clear();
    }
  }
  _impl_.visible_mask_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokePresetDataArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSD.StrokeArchive horizontal_stroke = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive vertical_stroke = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive exterior_stroke = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_exterior_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 visible_mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_visible_mask(&has_bits);
          _impl_.visible_mask_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrokePresetDataArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokePresetDataArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive horizontal_stroke = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::horizontal_stroke(this),
        _Internal::horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive vertical_stroke = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vertical_stroke(this),
        _Internal::vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive exterior_stroke = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::exterior_stroke(this),
        _Internal::exterior_stroke(this).GetCachedSize(), target, stream);
  }

  // optional int32 visible_mask = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_visible_mask(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokePresetDataArchive)
  return target;
}

size_t StrokePresetDataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokePresetDataArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TSD.StrokeArchive horizontal_stroke = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.horizontal_stroke_);
    }

    // optional .TSD.StrokeArchive vertical_stroke = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vertical_stroke_);
    }

    // optional .TSD.StrokeArchive exterior_stroke = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.exterior_stroke_);
    }

    // optional int32 visible_mask = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_visible_mask());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokePresetDataArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrokePresetDataArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokePresetDataArchive::GetClassData() const { return &_class_data_; }


void StrokePresetDataArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrokePresetDataArchive*>(&to_msg);
  auto& from = static_cast<const StrokePresetDataArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokePresetDataArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_horizontal_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_vertical_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_exterior_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_exterior_stroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.visible_mask_ = from._impl_.visible_mask_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokePresetDataArchive::CopyFrom(const StrokePresetDataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokePresetDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokePresetDataArchive::IsInitialized() const {
  if (_internal_has_horizontal_stroke()) {
    if (!_impl_.horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_vertical_stroke()) {
    if (!_impl_.vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_exterior_stroke()) {
    if (!_impl_.exterior_stroke_->IsInitialized()) return false;
  }
  return true;
}

void StrokePresetDataArchive::InternalSwap(StrokePresetDataArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StrokePresetDataArchive, _impl_.visible_mask_)
      + sizeof(StrokePresetDataArchive::_impl_.visible_mask_)
      - PROTOBUF_FIELD_OFFSET(StrokePresetDataArchive, _impl_.horizontal_stroke_)>(
          reinterpret_cast<char*>(&_impl_.horizontal_stroke_),
          reinterpret_cast<char*>(&other->_impl_.horizontal_stroke_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokePresetDataArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTStylePropertyArchiving_2eproto_getter, &descriptor_table_TSTStylePropertyArchiving_2eproto_once,
      file_level_metadata_TSTStylePropertyArchiving_2eproto[3]);
}

// ===================================================================

class StrokePresetListArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokePresetListArchive>()._impl_._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

StrokePresetListArchive::StrokePresetListArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StrokePresetListArchive)
}
StrokePresetListArchive::StrokePresetListArchive(const StrokePresetListArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrokePresetListArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deprecated_preset_){from._impl_.deprecated_preset_}
    , decltype(_impl_.preset_){from._impl_.preset_}
    , decltype(_impl_.count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;
  // @@protoc_insertion_point(copy_constructor:TST.StrokePresetListArchive)
}

inline void StrokePresetListArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deprecated_preset_){arena}
    , decltype(_impl_.preset_){arena}
    , decltype(_impl_.count_){0}
  };
}

StrokePresetListArchive::~StrokePresetListArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokePresetListArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrokePresetListArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deprecated_preset_.~RepeatedPtrField();
  _impl_.preset_.~RepeatedPtrField();
}

void StrokePresetListArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrokePresetListArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokePresetListArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deprecated_preset_.Clear();
  _impl_.preset_.Clear();
  _impl_.count_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokePresetListArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_count(&has_bits);
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.Deprecated_StrokePresetDataArchive deprecated_preset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deprecated_preset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.StrokePresetDataArchive preset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_preset(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrokePresetListArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokePresetListArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // repeated .TST.Deprecated_StrokePresetDataArchive deprecated_preset = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_deprecated_preset_size()); i < n; i++) {
    const auto& repfield = this->_internal_deprecated_preset(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TST.StrokePresetDataArchive preset = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_preset_size()); i < n; i++) {
    const auto& repfield = this->_internal_preset(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokePresetListArchive)
  return target;
}

size_t StrokePresetListArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokePresetListArchive)
  size_t total_size = 0;

  // required int32 count = 1;
  if (_internal_has_count()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.Deprecated_StrokePresetDataArchive deprecated_preset = 2;
  total_size += 1UL * this->_internal_deprecated_preset_size();
  for (const auto& msg : this->_impl_.deprecated_preset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.StrokePresetDataArchive preset = 3;
  total_size += 1UL * this->_internal_preset_size();
  for (const auto& msg : this->_impl_.preset_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokePresetListArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrokePresetListArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokePresetListArchive::GetClassData() const { return &_class_data_; }


void StrokePresetListArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrokePresetListArchive*>(&to_msg);
  auto& from = static_cast<const StrokePresetListArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokePresetListArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.deprecated_preset_.MergeFrom(from._impl_.deprecated_preset_);
  _this->_impl_.preset_.MergeFrom(from._impl_.preset_);
  if (from._internal_has_count()) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokePresetListArchive::CopyFrom(const StrokePresetListArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokePresetListArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokePresetListArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.deprecated_preset_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.preset_))
    return false;
  return true;
}

void StrokePresetListArchive::InternalSwap(StrokePresetListArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.deprecated_preset_.InternalSwap(&other->_impl_.deprecated_preset_);
  _impl_.preset_.InternalSwap(&other->_impl_.preset_);
  swap(_impl_.count_, other->_impl_.count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokePresetListArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTStylePropertyArchiving_2eproto_getter, &descriptor_table_TSTStylePropertyArchiving_2eproto_once,
      file_level_metadata_TSTStylePropertyArchiving_2eproto[4]);
}

// ===================================================================

class TableStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableStylePropertiesArchive>()._impl_._has_bits_);
  static void set_has_banded_rows(HasBits* has_bits) {
    (*has_bits)[2] |= 4u;
  }
  static const ::TSD::FillArchive& banded_fill(const TableStylePropertiesArchive* msg);
  static void set_has_banded_fill(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_behaves_like_spreadsheet(HasBits* has_bits) {
    (*has_bits)[2] |= 8u;
  }
  static void set_has_auto_resize(HasBits* has_bits) {
    (*has_bits)[2] |= 16u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_header_row_separator_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_border_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_header_row_border_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_horizontal_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_header_row_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_header_row_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_header_row_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_border_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_header_column_border_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_header_column_separator_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_horizontal_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_header_column_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_header_column_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_header_column_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_footer_row_separator_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_border_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_footer_row_border_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_horizontal_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_footer_row_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_footer_row_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_footer_row_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_horizontal_border_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_table_body_horizontal_border_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_vertical_border_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_table_body_vertical_border_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_horizontal_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_table_body_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TST::Deprecated_TableStrokeArchive& deprecated_table_body_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_deprecated_table_body_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TST::StrokePresetListArchive& stroke_preset_list(const TableStylePropertiesArchive* msg);
  static void set_has_stroke_preset_list(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_v_strokes_visible(HasBits* has_bits) {
    (*has_bits)[2] |= 32u;
  }
  static void set_has_h_strokes_visible(HasBits* has_bits) {
    (*has_bits)[2] |= 64u;
  }
  static void set_has_hr_separator_visible(HasBits* has_bits) {
    (*has_bits)[2] |= 128u;
  }
  static void set_has_hc_separator_visible(HasBits* has_bits) {
    (*has_bits)[2] |= 256u;
  }
  static void set_has_footer_separator_visible(HasBits* has_bits) {
    (*has_bits)[2] |= 512u;
  }
  static void set_has_table_border_visible(HasBits* has_bits) {
    (*has_bits)[2] |= 2048u;
  }
  static void set_has_table_header_border_visible(HasBits* has_bits) {
    (*has_bits)[2] |= 4096u;
  }
  static void set_has_table_hc_divider_visible(HasBits* has_bits) {
    (*has_bits)[2] |= 8192u;
  }
  static void set_has_table_hr_divider_visible(HasBits* has_bits) {
    (*has_bits)[2] |= 16384u;
  }
  static void set_has_table_footer_divider_visible(HasBits* has_bits) {
    (*has_bits)[2] |= 32768u;
  }
  static void set_has_obsolete_master_font_size(HasBits* has_bits) {
    (*has_bits)[2] |= 1024u;
  }
  static void set_has_master_font_family(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_writing_direction(HasBits* has_bits) {
    (*has_bits)[2] |= 65536u;
  }
  static const ::TSD::StrokeArchive& header_row_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_row_separator_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSD::StrokeArchive& header_row_border_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_row_border_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSD::StrokeArchive& header_row_horizontal_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_row_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSD::StrokeArchive& header_row_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_row_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSD::StrokeArchive& header_column_border_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_column_border_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::TSD::StrokeArchive& header_column_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_column_separator_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSD::StrokeArchive& header_column_horizontal_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_column_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::TSD::StrokeArchive& header_column_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_column_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::TSD::StrokeArchive& footer_row_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_footer_row_separator_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSD::StrokeArchive& footer_row_border_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_footer_row_border_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSD::StrokeArchive& footer_row_horizontal_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_footer_row_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::TSD::StrokeArchive& footer_row_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_footer_row_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::TSD::StrokeArchive& table_body_horizontal_border_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_table_body_horizontal_border_stroke(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::TSD::StrokeArchive& table_body_vertical_border_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_table_body_vertical_border_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::TSD::StrokeArchive& table_body_horizontal_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_table_body_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::TSD::StrokeArchive& table_body_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_table_body_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::TSD::StrokeArchive& category_level1_top_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level1_top_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::TSD::StrokeArchive& category_level2_top_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level2_top_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::TSD::StrokeArchive& category_level3_top_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level3_top_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::TSD::StrokeArchive& category_level4_top_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level4_top_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::TSD::StrokeArchive& category_level5_top_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level5_top_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::TSD::StrokeArchive& category_level1_bottom_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level1_bottom_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::TSD::StrokeArchive& category_level2_bottom_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level2_bottom_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::TSD::StrokeArchive& category_level3_bottom_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level3_bottom_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::TSD::StrokeArchive& category_level4_bottom_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level4_bottom_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
  static const ::TSD::StrokeArchive& category_level5_bottom_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level5_bottom_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::TSD::StrokeArchive& category_level1_interior_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level1_interior_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 8192u;
  }
  static const ::TSD::StrokeArchive& category_level2_interior_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level2_interior_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 16384u;
  }
  static const ::TSD::StrokeArchive& category_level3_interior_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level3_interior_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 32768u;
  }
  static const ::TSD::StrokeArchive& category_level4_interior_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level4_interior_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 65536u;
  }
  static const ::TSD::StrokeArchive& category_level5_interior_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level5_interior_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 131072u;
  }
  static const ::TSD::StrokeArchive& category_level1_label_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level1_label_separator_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 262144u;
  }
  static const ::TSD::StrokeArchive& category_level2_label_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level2_label_separator_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 524288u;
  }
  static const ::TSD::StrokeArchive& category_level3_label_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level3_label_separator_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 1048576u;
  }
  static const ::TSD::StrokeArchive& category_level4_label_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level4_label_separator_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 2097152u;
  }
  static const ::TSD::StrokeArchive& category_level5_label_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_category_level5_label_separator_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 4194304u;
  }
  static const ::TSD::StrokeArchive& table_body_pivot_group_horizontal_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_table_body_pivot_group_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 8388608u;
  }
  static const ::TSD::StrokeArchive& table_body_pivot_group_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_table_body_pivot_group_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 16777216u;
  }
  static const ::TSD::StrokeArchive& table_body_pivot_deemphasis_horizontal_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_table_body_pivot_deemphasis_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 33554432u;
  }
  static const ::TSD::StrokeArchive& table_body_pivot_emphasis_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_table_body_pivot_emphasis_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 67108864u;
  }
  static const ::TSD::StrokeArchive& header_column_pivot_group_horizontal_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_column_pivot_group_horizontal_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 134217728u;
  }
  static const ::TSD::StrokeArchive& header_column_pivot_group_deemphasis_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_column_pivot_group_deemphasis_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 268435456u;
  }
  static const ::TSD::StrokeArchive& header_column_pivot_separator_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_column_pivot_separator_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 536870912u;
  }
  static const ::TSD::StrokeArchive& header_row_pivot_group_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_row_pivot_group_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 1073741824u;
  }
  static const ::TSD::StrokeArchive& header_row_pivot_group_deemphasis_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_row_pivot_group_deemphasis_stroke(HasBits* has_bits) {
    (*has_bits)[1] |= 2147483648u;
  }
  static const ::TSD::StrokeArchive& header_row_pivot_title_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_header_row_pivot_title_stroke(HasBits* has_bits) {
    (*has_bits)[2] |= 1u;
  }
  static const ::TSD::StrokeArchive& footer_row_pivot_group_vertical_stroke(const TableStylePropertiesArchive* msg);
  static void set_has_footer_row_pivot_group_vertical_stroke(HasBits* has_bits) {
    (*has_bits)[2] |= 2u;
  }
};

const ::TSD::FillArchive&
TableStylePropertiesArchive::_Internal::banded_fill(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.banded_fill_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_header_row_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_header_row_separator_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_header_row_border_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_header_row_border_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_header_row_horizontal_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_header_row_horizontal_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_header_row_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_header_row_vertical_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_header_column_border_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_header_column_border_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_header_column_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_header_column_separator_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_header_column_horizontal_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_header_column_horizontal_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_header_column_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_header_column_vertical_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_footer_row_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_footer_row_separator_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_footer_row_border_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_footer_row_border_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_footer_row_horizontal_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_footer_row_horizontal_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_footer_row_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_footer_row_vertical_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_table_body_horizontal_border_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_table_body_horizontal_border_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_table_body_vertical_border_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_table_body_vertical_border_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_table_body_horizontal_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_table_body_horizontal_stroke_;
}
const ::TST::Deprecated_TableStrokeArchive&
TableStylePropertiesArchive::_Internal::deprecated_table_body_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.deprecated_table_body_vertical_stroke_;
}
const ::TST::StrokePresetListArchive&
TableStylePropertiesArchive::_Internal::stroke_preset_list(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.stroke_preset_list_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_row_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_row_separator_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_row_border_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_row_border_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_row_horizontal_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_row_horizontal_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_row_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_row_vertical_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_column_border_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_column_border_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_column_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_column_separator_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_column_horizontal_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_column_horizontal_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_column_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_column_vertical_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::footer_row_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.footer_row_separator_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::footer_row_border_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.footer_row_border_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::footer_row_horizontal_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.footer_row_horizontal_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::footer_row_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.footer_row_vertical_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::table_body_horizontal_border_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.table_body_horizontal_border_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::table_body_vertical_border_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.table_body_vertical_border_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::table_body_horizontal_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.table_body_horizontal_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::table_body_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.table_body_vertical_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level1_top_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level1_top_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level2_top_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level2_top_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level3_top_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level3_top_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level4_top_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level4_top_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level5_top_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level5_top_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level1_bottom_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level1_bottom_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level2_bottom_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level2_bottom_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level3_bottom_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level3_bottom_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level4_bottom_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level4_bottom_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level5_bottom_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level5_bottom_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level1_interior_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level1_interior_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level2_interior_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level2_interior_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level3_interior_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level3_interior_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level4_interior_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level4_interior_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level5_interior_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level5_interior_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level1_label_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level1_label_separator_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level2_label_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level2_label_separator_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level3_label_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level3_label_separator_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level4_label_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level4_label_separator_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::category_level5_label_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.category_level5_label_separator_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::table_body_pivot_group_horizontal_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.table_body_pivot_group_horizontal_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::table_body_pivot_group_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.table_body_pivot_group_vertical_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::table_body_pivot_deemphasis_horizontal_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.table_body_pivot_deemphasis_horizontal_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::table_body_pivot_emphasis_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.table_body_pivot_emphasis_vertical_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_column_pivot_group_horizontal_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_column_pivot_group_horizontal_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_column_pivot_group_deemphasis_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_column_pivot_group_deemphasis_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_column_pivot_separator_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_column_pivot_separator_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_row_pivot_group_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_row_pivot_group_vertical_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_row_pivot_group_deemphasis_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_row_pivot_group_deemphasis_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::header_row_pivot_title_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.header_row_pivot_title_stroke_;
}
const ::TSD::StrokeArchive&
TableStylePropertiesArchive::_Internal::footer_row_pivot_group_vertical_stroke(const TableStylePropertiesArchive* msg) {
  return *msg->_impl_.footer_row_pivot_group_vertical_stroke_;
}
void TableStylePropertiesArchive::clear_banded_fill() {
  if (_impl_.banded_fill_ != nullptr) _impl_.banded_fill_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TableStylePropertiesArchive::clear_header_row_separator_stroke() {
  if (_impl_.header_row_separator_stroke_ != nullptr) _impl_.header_row_separator_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void TableStylePropertiesArchive::clear_header_row_border_stroke() {
  if (_impl_.header_row_border_stroke_ != nullptr) _impl_.header_row_border_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void TableStylePropertiesArchive::clear_header_row_horizontal_stroke() {
  if (_impl_.header_row_horizontal_stroke_ != nullptr) _impl_.header_row_horizontal_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
void TableStylePropertiesArchive::clear_header_row_vertical_stroke() {
  if (_impl_.header_row_vertical_stroke_ != nullptr) _impl_.header_row_vertical_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
void TableStylePropertiesArchive::clear_header_column_border_stroke() {
  if (_impl_.header_column_border_stroke_ != nullptr) _impl_.header_column_border_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
void TableStylePropertiesArchive::clear_header_column_separator_stroke() {
  if (_impl_.header_column_separator_stroke_ != nullptr) _impl_.header_column_separator_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
void TableStylePropertiesArchive::clear_header_column_horizontal_stroke() {
  if (_impl_.header_column_horizontal_stroke_ != nullptr) _impl_.header_column_horizontal_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
void TableStylePropertiesArchive::clear_header_column_vertical_stroke() {
  if (_impl_.header_column_vertical_stroke_ != nullptr) _impl_.header_column_vertical_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
void TableStylePropertiesArchive::clear_footer_row_separator_stroke() {
  if (_impl_.footer_row_separator_stroke_ != nullptr) _impl_.footer_row_separator_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
void TableStylePropertiesArchive::clear_footer_row_border_stroke() {
  if (_impl_.footer_row_border_stroke_ != nullptr) _impl_.footer_row_border_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
void TableStylePropertiesArchive::clear_footer_row_horizontal_stroke() {
  if (_impl_.footer_row_horizontal_stroke_ != nullptr) _impl_.footer_row_horizontal_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
void TableStylePropertiesArchive::clear_footer_row_vertical_stroke() {
  if (_impl_.footer_row_vertical_stroke_ != nullptr) _impl_.footer_row_vertical_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
void TableStylePropertiesArchive::clear_table_body_horizontal_border_stroke() {
  if (_impl_.table_body_horizontal_border_stroke_ != nullptr) _impl_.table_body_horizontal_border_stroke_->Clear();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
void TableStylePropertiesArchive::clear_table_body_vertical_border_stroke() {
  if (_impl_.table_body_vertical_border_stroke_ != nullptr) _impl_.table_body_vertical_border_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
void TableStylePropertiesArchive::clear_table_body_horizontal_stroke() {
  if (_impl_.table_body_horizontal_stroke_ != nullptr) _impl_.table_body_horizontal_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
void TableStylePropertiesArchive::clear_table_body_vertical_stroke() {
  if (_impl_.table_body_vertical_stroke_ != nullptr) _impl_.table_body_vertical_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000004u;
}
void TableStylePropertiesArchive::clear_category_level1_top_stroke() {
  if (_impl_.category_level1_top_stroke_ != nullptr) _impl_.category_level1_top_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000008u;
}
void TableStylePropertiesArchive::clear_category_level2_top_stroke() {
  if (_impl_.category_level2_top_stroke_ != nullptr) _impl_.category_level2_top_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000010u;
}
void TableStylePropertiesArchive::clear_category_level3_top_stroke() {
  if (_impl_.category_level3_top_stroke_ != nullptr) _impl_.category_level3_top_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000020u;
}
void TableStylePropertiesArchive::clear_category_level4_top_stroke() {
  if (_impl_.category_level4_top_stroke_ != nullptr) _impl_.category_level4_top_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000040u;
}
void TableStylePropertiesArchive::clear_category_level5_top_stroke() {
  if (_impl_.category_level5_top_stroke_ != nullptr) _impl_.category_level5_top_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000080u;
}
void TableStylePropertiesArchive::clear_category_level1_bottom_stroke() {
  if (_impl_.category_level1_bottom_stroke_ != nullptr) _impl_.category_level1_bottom_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000100u;
}
void TableStylePropertiesArchive::clear_category_level2_bottom_stroke() {
  if (_impl_.category_level2_bottom_stroke_ != nullptr) _impl_.category_level2_bottom_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000200u;
}
void TableStylePropertiesArchive::clear_category_level3_bottom_stroke() {
  if (_impl_.category_level3_bottom_stroke_ != nullptr) _impl_.category_level3_bottom_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000400u;
}
void TableStylePropertiesArchive::clear_category_level4_bottom_stroke() {
  if (_impl_.category_level4_bottom_stroke_ != nullptr) _impl_.category_level4_bottom_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00000800u;
}
void TableStylePropertiesArchive::clear_category_level5_bottom_stroke() {
  if (_impl_.category_level5_bottom_stroke_ != nullptr) _impl_.category_level5_bottom_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00001000u;
}
void TableStylePropertiesArchive::clear_category_level1_interior_stroke() {
  if (_impl_.category_level1_interior_stroke_ != nullptr) _impl_.category_level1_interior_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00002000u;
}
void TableStylePropertiesArchive::clear_category_level2_interior_stroke() {
  if (_impl_.category_level2_interior_stroke_ != nullptr) _impl_.category_level2_interior_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00004000u;
}
void TableStylePropertiesArchive::clear_category_level3_interior_stroke() {
  if (_impl_.category_level3_interior_stroke_ != nullptr) _impl_.category_level3_interior_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00008000u;
}
void TableStylePropertiesArchive::clear_category_level4_interior_stroke() {
  if (_impl_.category_level4_interior_stroke_ != nullptr) _impl_.category_level4_interior_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00010000u;
}
void TableStylePropertiesArchive::clear_category_level5_interior_stroke() {
  if (_impl_.category_level5_interior_stroke_ != nullptr) _impl_.category_level5_interior_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00020000u;
}
void TableStylePropertiesArchive::clear_category_level1_label_separator_stroke() {
  if (_impl_.category_level1_label_separator_stroke_ != nullptr) _impl_.category_level1_label_separator_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00040000u;
}
void TableStylePropertiesArchive::clear_category_level2_label_separator_stroke() {
  if (_impl_.category_level2_label_separator_stroke_ != nullptr) _impl_.category_level2_label_separator_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00080000u;
}
void TableStylePropertiesArchive::clear_category_level3_label_separator_stroke() {
  if (_impl_.category_level3_label_separator_stroke_ != nullptr) _impl_.category_level3_label_separator_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00100000u;
}
void TableStylePropertiesArchive::clear_category_level4_label_separator_stroke() {
  if (_impl_.category_level4_label_separator_stroke_ != nullptr) _impl_.category_level4_label_separator_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00200000u;
}
void TableStylePropertiesArchive::clear_category_level5_label_separator_stroke() {
  if (_impl_.category_level5_label_separator_stroke_ != nullptr) _impl_.category_level5_label_separator_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00400000u;
}
void TableStylePropertiesArchive::clear_table_body_pivot_group_horizontal_stroke() {
  if (_impl_.table_body_pivot_group_horizontal_stroke_ != nullptr) _impl_.table_body_pivot_group_horizontal_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x00800000u;
}
void TableStylePropertiesArchive::clear_table_body_pivot_group_vertical_stroke() {
  if (_impl_.table_body_pivot_group_vertical_stroke_ != nullptr) _impl_.table_body_pivot_group_vertical_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x01000000u;
}
void TableStylePropertiesArchive::clear_table_body_pivot_deemphasis_horizontal_stroke() {
  if (_impl_.table_body_pivot_deemphasis_horizontal_stroke_ != nullptr) _impl_.table_body_pivot_deemphasis_horizontal_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x02000000u;
}
void TableStylePropertiesArchive::clear_table_body_pivot_emphasis_vertical_stroke() {
  if (_impl_.table_body_pivot_emphasis_vertical_stroke_ != nullptr) _impl_.table_body_pivot_emphasis_vertical_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x04000000u;
}
void TableStylePropertiesArchive::clear_header_column_pivot_group_horizontal_stroke() {
  if (_impl_.header_column_pivot_group_horizontal_stroke_ != nullptr) _impl_.header_column_pivot_group_horizontal_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x08000000u;
}
void TableStylePropertiesArchive::clear_header_column_pivot_group_deemphasis_stroke() {
  if (_impl_.header_column_pivot_group_deemphasis_stroke_ != nullptr) _impl_.header_column_pivot_group_deemphasis_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x10000000u;
}
void TableStylePropertiesArchive::clear_header_column_pivot_separator_stroke() {
  if (_impl_.header_column_pivot_separator_stroke_ != nullptr) _impl_.header_column_pivot_separator_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x20000000u;
}
void TableStylePropertiesArchive::clear_header_row_pivot_group_vertical_stroke() {
  if (_impl_.header_row_pivot_group_vertical_stroke_ != nullptr) _impl_.header_row_pivot_group_vertical_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x40000000u;
}
void TableStylePropertiesArchive::clear_header_row_pivot_group_deemphasis_stroke() {
  if (_impl_.header_row_pivot_group_deemphasis_stroke_ != nullptr) _impl_.header_row_pivot_group_deemphasis_stroke_->Clear();
  _impl_._has_bits_[1] &= ~0x80000000u;
}
void TableStylePropertiesArchive::clear_header_row_pivot_title_stroke() {
  if (_impl_.header_row_pivot_title_stroke_ != nullptr) _impl_.header_row_pivot_title_stroke_->Clear();
  _impl_._has_bits_[2] &= ~0x00000001u;
}
void TableStylePropertiesArchive::clear_footer_row_pivot_group_vertical_stroke() {
  if (_impl_.footer_row_pivot_group_vertical_stroke_ != nullptr) _impl_.footer_row_pivot_group_vertical_stroke_->Clear();
  _impl_._has_bits_[2] &= ~0x00000002u;
}
TableStylePropertiesArchive::TableStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableStylePropertiesArchive)
}
TableStylePropertiesArchive::TableStylePropertiesArchive(const TableStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableStylePropertiesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.master_font_family_){}
    , decltype(_impl_.banded_fill_){nullptr}
    , decltype(_impl_.deprecated_header_row_separator_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_row_border_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_column_border_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_column_separator_stroke_){nullptr}
    , decltype(_impl_.deprecated_footer_row_separator_stroke_){nullptr}
    , decltype(_impl_.deprecated_footer_row_border_stroke_){nullptr}
    , decltype(_impl_.deprecated_table_body_horizontal_border_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_row_horizontal_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_row_vertical_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_column_horizontal_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_column_vertical_stroke_){nullptr}
    , decltype(_impl_.deprecated_footer_row_horizontal_stroke_){nullptr}
    , decltype(_impl_.deprecated_footer_row_vertical_stroke_){nullptr}
    , decltype(_impl_.deprecated_table_body_vertical_border_stroke_){nullptr}
    , decltype(_impl_.deprecated_table_body_horizontal_stroke_){nullptr}
    , decltype(_impl_.deprecated_table_body_vertical_stroke_){nullptr}
    , decltype(_impl_.stroke_preset_list_){nullptr}
    , decltype(_impl_.header_row_separator_stroke_){nullptr}
    , decltype(_impl_.header_row_border_stroke_){nullptr}
    , decltype(_impl_.header_row_horizontal_stroke_){nullptr}
    , decltype(_impl_.header_row_vertical_stroke_){nullptr}
    , decltype(_impl_.header_column_border_stroke_){nullptr}
    , decltype(_impl_.header_column_separator_stroke_){nullptr}
    , decltype(_impl_.header_column_horizontal_stroke_){nullptr}
    , decltype(_impl_.header_column_vertical_stroke_){nullptr}
    , decltype(_impl_.footer_row_separator_stroke_){nullptr}
    , decltype(_impl_.footer_row_border_stroke_){nullptr}
    , decltype(_impl_.footer_row_horizontal_stroke_){nullptr}
    , decltype(_impl_.footer_row_vertical_stroke_){nullptr}
    , decltype(_impl_.table_body_horizontal_border_stroke_){nullptr}
    , decltype(_impl_.table_body_vertical_border_stroke_){nullptr}
    , decltype(_impl_.table_body_horizontal_stroke_){nullptr}
    , decltype(_impl_.table_body_vertical_stroke_){nullptr}
    , decltype(_impl_.category_level1_top_stroke_){nullptr}
    , decltype(_impl_.category_level2_top_stroke_){nullptr}
    , decltype(_impl_.category_level3_top_stroke_){nullptr}
    , decltype(_impl_.category_level4_top_stroke_){nullptr}
    , decltype(_impl_.category_level5_top_stroke_){nullptr}
    , decltype(_impl_.category_level1_bottom_stroke_){nullptr}
    , decltype(_impl_.category_level2_bottom_stroke_){nullptr}
    , decltype(_impl_.category_level3_bottom_stroke_){nullptr}
    , decltype(_impl_.category_level4_bottom_stroke_){nullptr}
    , decltype(_impl_.category_level5_bottom_stroke_){nullptr}
    , decltype(_impl_.category_level1_interior_stroke_){nullptr}
    , decltype(_impl_.category_level2_interior_stroke_){nullptr}
    , decltype(_impl_.category_level3_interior_stroke_){nullptr}
    , decltype(_impl_.category_level4_interior_stroke_){nullptr}
    , decltype(_impl_.category_level5_interior_stroke_){nullptr}
    , decltype(_impl_.category_level1_label_separator_stroke_){nullptr}
    , decltype(_impl_.category_level2_label_separator_stroke_){nullptr}
    , decltype(_impl_.category_level3_label_separator_stroke_){nullptr}
    , decltype(_impl_.category_level4_label_separator_stroke_){nullptr}
    , decltype(_impl_.category_level5_label_separator_stroke_){nullptr}
    , decltype(_impl_.table_body_pivot_group_horizontal_stroke_){nullptr}
    , decltype(_impl_.table_body_pivot_group_vertical_stroke_){nullptr}
    , decltype(_impl_.table_body_pivot_deemphasis_horizontal_stroke_){nullptr}
    , decltype(_impl_.table_body_pivot_emphasis_vertical_stroke_){nullptr}
    , decltype(_impl_.header_column_pivot_group_horizontal_stroke_){nullptr}
    , decltype(_impl_.header_column_pivot_group_deemphasis_stroke_){nullptr}
    , decltype(_impl_.header_column_pivot_separator_stroke_){nullptr}
    , decltype(_impl_.header_row_pivot_group_vertical_stroke_){nullptr}
    , decltype(_impl_.header_row_pivot_group_deemphasis_stroke_){nullptr}
    , decltype(_impl_.header_row_pivot_title_stroke_){nullptr}
    , decltype(_impl_.footer_row_pivot_group_vertical_stroke_){nullptr}
    , decltype(_impl_.banded_rows_){}
    , decltype(_impl_.behaves_like_spreadsheet_){}
    , decltype(_impl_.auto_resize_){}
    , decltype(_impl_.v_strokes_visible_){}
    , decltype(_impl_.h_strokes_visible_){}
    , decltype(_impl_.hr_separator_visible_){}
    , decltype(_impl_.hc_separator_visible_){}
    , decltype(_impl_.footer_separator_visible_){}
    , decltype(_impl_.obsolete_master_font_size_){}
    , decltype(_impl_.table_border_visible_){}
    , decltype(_impl_.table_header_border_visible_){}
    , decltype(_impl_.table_hc_divider_visible_){}
    , decltype(_impl_.table_hr_divider_visible_){}
    , decltype(_impl_.table_footer_divider_visible_){}
    , decltype(_impl_.writing_direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.master_font_family_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_font_family_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_master_font_family()) {
    _this->_impl_.master_font_family_.Set(from._internal_master_font_family(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_banded_fill()) {
    _this->_impl_.banded_fill_ = new ::TSD::FillArchive(*from._impl_.banded_fill_);
  }
  if (from._internal_has_deprecated_header_row_separator_stroke()) {
    _this->_impl_.deprecated_header_row_separator_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_header_row_separator_stroke_);
  }
  if (from._internal_has_deprecated_header_row_border_stroke()) {
    _this->_impl_.deprecated_header_row_border_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_header_row_border_stroke_);
  }
  if (from._internal_has_deprecated_header_column_border_stroke()) {
    _this->_impl_.deprecated_header_column_border_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_header_column_border_stroke_);
  }
  if (from._internal_has_deprecated_header_column_separator_stroke()) {
    _this->_impl_.deprecated_header_column_separator_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_header_column_separator_stroke_);
  }
  if (from._internal_has_deprecated_footer_row_separator_stroke()) {
    _this->_impl_.deprecated_footer_row_separator_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_footer_row_separator_stroke_);
  }
  if (from._internal_has_deprecated_footer_row_border_stroke()) {
    _this->_impl_.deprecated_footer_row_border_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_footer_row_border_stroke_);
  }
  if (from._internal_has_deprecated_table_body_horizontal_border_stroke()) {
    _this->_impl_.deprecated_table_body_horizontal_border_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_table_body_horizontal_border_stroke_);
  }
  if (from._internal_has_deprecated_header_row_horizontal_stroke()) {
    _this->_impl_.deprecated_header_row_horizontal_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_header_row_horizontal_stroke_);
  }
  if (from._internal_has_deprecated_header_row_vertical_stroke()) {
    _this->_impl_.deprecated_header_row_vertical_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_header_row_vertical_stroke_);
  }
  if (from._internal_has_deprecated_header_column_horizontal_stroke()) {
    _this->_impl_.deprecated_header_column_horizontal_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_header_column_horizontal_stroke_);
  }
  if (from._internal_has_deprecated_header_column_vertical_stroke()) {
    _this->_impl_.deprecated_header_column_vertical_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_header_column_vertical_stroke_);
  }
  if (from._internal_has_deprecated_footer_row_horizontal_stroke()) {
    _this->_impl_.deprecated_footer_row_horizontal_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_footer_row_horizontal_stroke_);
  }
  if (from._internal_has_deprecated_footer_row_vertical_stroke()) {
    _this->_impl_.deprecated_footer_row_vertical_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_footer_row_vertical_stroke_);
  }
  if (from._internal_has_deprecated_table_body_vertical_border_stroke()) {
    _this->_impl_.deprecated_table_body_vertical_border_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_table_body_vertical_border_stroke_);
  }
  if (from._internal_has_deprecated_table_body_horizontal_stroke()) {
    _this->_impl_.deprecated_table_body_horizontal_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_table_body_horizontal_stroke_);
  }
  if (from._internal_has_deprecated_table_body_vertical_stroke()) {
    _this->_impl_.deprecated_table_body_vertical_stroke_ = new ::TST::Deprecated_TableStrokeArchive(*from._impl_.deprecated_table_body_vertical_stroke_);
  }
  if (from._internal_has_stroke_preset_list()) {
    _this->_impl_.stroke_preset_list_ = new ::TST::StrokePresetListArchive(*from._impl_.stroke_preset_list_);
  }
  if (from._internal_has_header_row_separator_stroke()) {
    _this->_impl_.header_row_separator_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_row_separator_stroke_);
  }
  if (from._internal_has_header_row_border_stroke()) {
    _this->_impl_.header_row_border_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_row_border_stroke_);
  }
  if (from._internal_has_header_row_horizontal_stroke()) {
    _this->_impl_.header_row_horizontal_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_row_horizontal_stroke_);
  }
  if (from._internal_has_header_row_vertical_stroke()) {
    _this->_impl_.header_row_vertical_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_row_vertical_stroke_);
  }
  if (from._internal_has_header_column_border_stroke()) {
    _this->_impl_.header_column_border_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_column_border_stroke_);
  }
  if (from._internal_has_header_column_separator_stroke()) {
    _this->_impl_.header_column_separator_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_column_separator_stroke_);
  }
  if (from._internal_has_header_column_horizontal_stroke()) {
    _this->_impl_.header_column_horizontal_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_column_horizontal_stroke_);
  }
  if (from._internal_has_header_column_vertical_stroke()) {
    _this->_impl_.header_column_vertical_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_column_vertical_stroke_);
  }
  if (from._internal_has_footer_row_separator_stroke()) {
    _this->_impl_.footer_row_separator_stroke_ = new ::TSD::StrokeArchive(*from._impl_.footer_row_separator_stroke_);
  }
  if (from._internal_has_footer_row_border_stroke()) {
    _this->_impl_.footer_row_border_stroke_ = new ::TSD::StrokeArchive(*from._impl_.footer_row_border_stroke_);
  }
  if (from._internal_has_footer_row_horizontal_stroke()) {
    _this->_impl_.footer_row_horizontal_stroke_ = new ::TSD::StrokeArchive(*from._impl_.footer_row_horizontal_stroke_);
  }
  if (from._internal_has_footer_row_vertical_stroke()) {
    _this->_impl_.footer_row_vertical_stroke_ = new ::TSD::StrokeArchive(*from._impl_.footer_row_vertical_stroke_);
  }
  if (from._internal_has_table_body_horizontal_border_stroke()) {
    _this->_impl_.table_body_horizontal_border_stroke_ = new ::TSD::StrokeArchive(*from._impl_.table_body_horizontal_border_stroke_);
  }
  if (from._internal_has_table_body_vertical_border_stroke()) {
    _this->_impl_.table_body_vertical_border_stroke_ = new ::TSD::StrokeArchive(*from._impl_.table_body_vertical_border_stroke_);
  }
  if (from._internal_has_table_body_horizontal_stroke()) {
    _this->_impl_.table_body_horizontal_stroke_ = new ::TSD::StrokeArchive(*from._impl_.table_body_horizontal_stroke_);
  }
  if (from._internal_has_table_body_vertical_stroke()) {
    _this->_impl_.table_body_vertical_stroke_ = new ::TSD::StrokeArchive(*from._impl_.table_body_vertical_stroke_);
  }
  if (from._internal_has_category_level1_top_stroke()) {
    _this->_impl_.category_level1_top_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level1_top_stroke_);
  }
  if (from._internal_has_category_level2_top_stroke()) {
    _this->_impl_.category_level2_top_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level2_top_stroke_);
  }
  if (from._internal_has_category_level3_top_stroke()) {
    _this->_impl_.category_level3_top_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level3_top_stroke_);
  }
  if (from._internal_has_category_level4_top_stroke()) {
    _this->_impl_.category_level4_top_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level4_top_stroke_);
  }
  if (from._internal_has_category_level5_top_stroke()) {
    _this->_impl_.category_level5_top_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level5_top_stroke_);
  }
  if (from._internal_has_category_level1_bottom_stroke()) {
    _this->_impl_.category_level1_bottom_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level1_bottom_stroke_);
  }
  if (from._internal_has_category_level2_bottom_stroke()) {
    _this->_impl_.category_level2_bottom_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level2_bottom_stroke_);
  }
  if (from._internal_has_category_level3_bottom_stroke()) {
    _this->_impl_.category_level3_bottom_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level3_bottom_stroke_);
  }
  if (from._internal_has_category_level4_bottom_stroke()) {
    _this->_impl_.category_level4_bottom_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level4_bottom_stroke_);
  }
  if (from._internal_has_category_level5_bottom_stroke()) {
    _this->_impl_.category_level5_bottom_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level5_bottom_stroke_);
  }
  if (from._internal_has_category_level1_interior_stroke()) {
    _this->_impl_.category_level1_interior_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level1_interior_stroke_);
  }
  if (from._internal_has_category_level2_interior_stroke()) {
    _this->_impl_.category_level2_interior_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level2_interior_stroke_);
  }
  if (from._internal_has_category_level3_interior_stroke()) {
    _this->_impl_.category_level3_interior_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level3_interior_stroke_);
  }
  if (from._internal_has_category_level4_interior_stroke()) {
    _this->_impl_.category_level4_interior_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level4_interior_stroke_);
  }
  if (from._internal_has_category_level5_interior_stroke()) {
    _this->_impl_.category_level5_interior_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level5_interior_stroke_);
  }
  if (from._internal_has_category_level1_label_separator_stroke()) {
    _this->_impl_.category_level1_label_separator_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level1_label_separator_stroke_);
  }
  if (from._internal_has_category_level2_label_separator_stroke()) {
    _this->_impl_.category_level2_label_separator_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level2_label_separator_stroke_);
  }
  if (from._internal_has_category_level3_label_separator_stroke()) {
    _this->_impl_.category_level3_label_separator_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level3_label_separator_stroke_);
  }
  if (from._internal_has_category_level4_label_separator_stroke()) {
    _this->_impl_.category_level4_label_separator_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level4_label_separator_stroke_);
  }
  if (from._internal_has_category_level5_label_separator_stroke()) {
    _this->_impl_.category_level5_label_separator_stroke_ = new ::TSD::StrokeArchive(*from._impl_.category_level5_label_separator_stroke_);
  }
  if (from._internal_has_table_body_pivot_group_horizontal_stroke()) {
    _this->_impl_.table_body_pivot_group_horizontal_stroke_ = new ::TSD::StrokeArchive(*from._impl_.table_body_pivot_group_horizontal_stroke_);
  }
  if (from._internal_has_table_body_pivot_group_vertical_stroke()) {
    _this->_impl_.table_body_pivot_group_vertical_stroke_ = new ::TSD::StrokeArchive(*from._impl_.table_body_pivot_group_vertical_stroke_);
  }
  if (from._internal_has_table_body_pivot_deemphasis_horizontal_stroke()) {
    _this->_impl_.table_body_pivot_deemphasis_horizontal_stroke_ = new ::TSD::StrokeArchive(*from._impl_.table_body_pivot_deemphasis_horizontal_stroke_);
  }
  if (from._internal_has_table_body_pivot_emphasis_vertical_stroke()) {
    _this->_impl_.table_body_pivot_emphasis_vertical_stroke_ = new ::TSD::StrokeArchive(*from._impl_.table_body_pivot_emphasis_vertical_stroke_);
  }
  if (from._internal_has_header_column_pivot_group_horizontal_stroke()) {
    _this->_impl_.header_column_pivot_group_horizontal_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_column_pivot_group_horizontal_stroke_);
  }
  if (from._internal_has_header_column_pivot_group_deemphasis_stroke()) {
    _this->_impl_.header_column_pivot_group_deemphasis_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_column_pivot_group_deemphasis_stroke_);
  }
  if (from._internal_has_header_column_pivot_separator_stroke()) {
    _this->_impl_.header_column_pivot_separator_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_column_pivot_separator_stroke_);
  }
  if (from._internal_has_header_row_pivot_group_vertical_stroke()) {
    _this->_impl_.header_row_pivot_group_vertical_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_row_pivot_group_vertical_stroke_);
  }
  if (from._internal_has_header_row_pivot_group_deemphasis_stroke()) {
    _this->_impl_.header_row_pivot_group_deemphasis_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_row_pivot_group_deemphasis_stroke_);
  }
  if (from._internal_has_header_row_pivot_title_stroke()) {
    _this->_impl_.header_row_pivot_title_stroke_ = new ::TSD::StrokeArchive(*from._impl_.header_row_pivot_title_stroke_);
  }
  if (from._internal_has_footer_row_pivot_group_vertical_stroke()) {
    _this->_impl_.footer_row_pivot_group_vertical_stroke_ = new ::TSD::StrokeArchive(*from._impl_.footer_row_pivot_group_vertical_stroke_);
  }
  ::memcpy(&_impl_.banded_rows_, &from._impl_.banded_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.writing_direction_) -
    reinterpret_cast<char*>(&_impl_.banded_rows_)) + sizeof(_impl_.writing_direction_));
  // @@protoc_insertion_point(copy_constructor:TST.TableStylePropertiesArchive)
}

inline void TableStylePropertiesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.master_font_family_){}
    , decltype(_impl_.banded_fill_){nullptr}
    , decltype(_impl_.deprecated_header_row_separator_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_row_border_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_column_border_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_column_separator_stroke_){nullptr}
    , decltype(_impl_.deprecated_footer_row_separator_stroke_){nullptr}
    , decltype(_impl_.deprecated_footer_row_border_stroke_){nullptr}
    , decltype(_impl_.deprecated_table_body_horizontal_border_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_row_horizontal_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_row_vertical_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_column_horizontal_stroke_){nullptr}
    , decltype(_impl_.deprecated_header_column_vertical_stroke_){nullptr}
    , decltype(_impl_.deprecated_footer_row_horizontal_stroke_){nullptr}
    , decltype(_impl_.deprecated_footer_row_vertical_stroke_){nullptr}
    , decltype(_impl_.deprecated_table_body_vertical_border_stroke_){nullptr}
    , decltype(_impl_.deprecated_table_body_horizontal_stroke_){nullptr}
    , decltype(_impl_.deprecated_table_body_vertical_stroke_){nullptr}
    , decltype(_impl_.stroke_preset_list_){nullptr}
    , decltype(_impl_.header_row_separator_stroke_){nullptr}
    , decltype(_impl_.header_row_border_stroke_){nullptr}
    , decltype(_impl_.header_row_horizontal_stroke_){nullptr}
    , decltype(_impl_.header_row_vertical_stroke_){nullptr}
    , decltype(_impl_.header_column_border_stroke_){nullptr}
    , decltype(_impl_.header_column_separator_stroke_){nullptr}
    , decltype(_impl_.header_column_horizontal_stroke_){nullptr}
    , decltype(_impl_.header_column_vertical_stroke_){nullptr}
    , decltype(_impl_.footer_row_separator_stroke_){nullptr}
    , decltype(_impl_.footer_row_border_stroke_){nullptr}
    , decltype(_impl_.footer_row_horizontal_stroke_){nullptr}
    , decltype(_impl_.footer_row_vertical_stroke_){nullptr}
    , decltype(_impl_.table_body_horizontal_border_stroke_){nullptr}
    , decltype(_impl_.table_body_vertical_border_stroke_){nullptr}
    , decltype(_impl_.table_body_horizontal_stroke_){nullptr}
    , decltype(_impl_.table_body_vertical_stroke_){nullptr}
    , decltype(_impl_.category_level1_top_stroke_){nullptr}
    , decltype(_impl_.category_level2_top_stroke_){nullptr}
    , decltype(_impl_.category_level3_top_stroke_){nullptr}
    , decltype(_impl_.category_level4_top_stroke_){nullptr}
    , decltype(_impl_.category_level5_top_stroke_){nullptr}
    , decltype(_impl_.category_level1_bottom_stroke_){nullptr}
    , decltype(_impl_.category_level2_bottom_stroke_){nullptr}
    , decltype(_impl_.category_level3_bottom_stroke_){nullptr}
    , decltype(_impl_.category_level4_bottom_stroke_){nullptr}
    , decltype(_impl_.category_level5_bottom_stroke_){nullptr}
    , decltype(_impl_.category_level1_interior_stroke_){nullptr}
    , decltype(_impl_.category_level2_interior_stroke_){nullptr}
    , decltype(_impl_.category_level3_interior_stroke_){nullptr}
    , decltype(_impl_.category_level4_interior_stroke_){nullptr}
    , decltype(_impl_.category_level5_interior_stroke_){nullptr}
    , decltype(_impl_.category_level1_label_separator_stroke_){nullptr}
    , decltype(_impl_.category_level2_label_separator_stroke_){nullptr}
    , decltype(_impl_.category_level3_label_separator_stroke_){nullptr}
    , decltype(_impl_.category_level4_label_separator_stroke_){nullptr}
    , decltype(_impl_.category_level5_label_separator_stroke_){nullptr}
    , decltype(_impl_.table_body_pivot_group_horizontal_stroke_){nullptr}
    , decltype(_impl_.table_body_pivot_group_vertical_stroke_){nullptr}
    , decltype(_impl_.table_body_pivot_deemphasis_horizontal_stroke_){nullptr}
    , decltype(_impl_.table_body_pivot_emphasis_vertical_stroke_){nullptr}
    , decltype(_impl_.header_column_pivot_group_horizontal_stroke_){nullptr}
    , decltype(_impl_.header_column_pivot_group_deemphasis_stroke_){nullptr}
    , decltype(_impl_.header_column_pivot_separator_stroke_){nullptr}
    , decltype(_impl_.header_row_pivot_group_vertical_stroke_){nullptr}
    , decltype(_impl_.header_row_pivot_group_deemphasis_stroke_){nullptr}
    , decltype(_impl_.header_row_pivot_title_stroke_){nullptr}
    , decltype(_impl_.footer_row_pivot_group_vertical_stroke_){nullptr}
    , decltype(_impl_.banded_rows_){false}
    , decltype(_impl_.behaves_like_spreadsheet_){false}
    , decltype(_impl_.auto_resize_){false}
    , decltype(_impl_.v_strokes_visible_){false}
    , decltype(_impl_.h_strokes_visible_){false}
    , decltype(_impl_.hr_separator_visible_){false}
    , decltype(_impl_.hc_separator_visible_){false}
    , decltype(_impl_.footer_separator_visible_){false}
    , decltype(_impl_.obsolete_master_font_size_){0}
    , decltype(_impl_.table_border_visible_){false}
    , decltype(_impl_.table_header_border_visible_){false}
    , decltype(_impl_.table_hc_divider_visible_){false}
    , decltype(_impl_.table_hr_divider_visible_){false}
    , decltype(_impl_.table_footer_divider_visible_){false}
    , decltype(_impl_.writing_direction_){-1}
  };
  _impl_.master_font_family_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.master_font_family_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableStylePropertiesArchive::~TableStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TST.TableStylePropertiesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.master_font_family_.Destroy();
  if (this != internal_default_instance()) delete _impl_.banded_fill_;
  if (this != internal_default_instance()) delete _impl_.deprecated_header_row_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_header_row_border_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_header_column_border_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_header_column_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_footer_row_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_footer_row_border_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_table_body_horizontal_border_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_header_row_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_header_row_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_header_column_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_header_column_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_footer_row_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_footer_row_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_table_body_vertical_border_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_table_body_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.deprecated_table_body_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.stroke_preset_list_;
  if (this != internal_default_instance()) delete _impl_.header_row_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_row_border_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_row_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_row_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_column_border_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_column_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_column_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_column_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.footer_row_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.footer_row_border_stroke_;
  if (this != internal_default_instance()) delete _impl_.footer_row_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.footer_row_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.table_body_horizontal_border_stroke_;
  if (this != internal_default_instance()) delete _impl_.table_body_vertical_border_stroke_;
  if (this != internal_default_instance()) delete _impl_.table_body_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.table_body_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level1_top_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level2_top_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level3_top_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level4_top_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level5_top_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level1_bottom_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level2_bottom_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level3_bottom_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level4_bottom_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level5_bottom_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level1_interior_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level2_interior_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level3_interior_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level4_interior_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level5_interior_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level1_label_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level2_label_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level3_label_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level4_label_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.category_level5_label_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.table_body_pivot_group_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.table_body_pivot_group_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.table_body_pivot_deemphasis_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.table_body_pivot_emphasis_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_column_pivot_group_horizontal_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_column_pivot_group_deemphasis_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_column_pivot_separator_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_row_pivot_group_vertical_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_row_pivot_group_deemphasis_stroke_;
  if (this != internal_default_instance()) delete _impl_.header_row_pivot_title_stroke_;
  if (this != internal_default_instance()) delete _impl_.footer_row_pivot_group_vertical_stroke_;
}

void TableStylePropertiesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.master_font_family_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.banded_fill_ != nullptr);
      _impl_.banded_fill_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.deprecated_header_row_separator_stroke_ != nullptr);
      _impl_.deprecated_header_row_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.deprecated_header_row_border_stroke_ != nullptr);
      _impl_.deprecated_header_row_border_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.deprecated_header_column_border_stroke_ != nullptr);
      _impl_.deprecated_header_column_border_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.deprecated_header_column_separator_stroke_ != nullptr);
      _impl_.deprecated_header_column_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.deprecated_footer_row_separator_stroke_ != nullptr);
      _impl_.deprecated_footer_row_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.deprecated_footer_row_border_stroke_ != nullptr);
      _impl_.deprecated_footer_row_border_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.deprecated_table_body_horizontal_border_stroke_ != nullptr);
      _impl_.deprecated_table_body_horizontal_border_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.deprecated_header_row_horizontal_stroke_ != nullptr);
      _impl_.deprecated_header_row_horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.deprecated_header_row_vertical_stroke_ != nullptr);
      _impl_.deprecated_header_row_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.deprecated_header_column_horizontal_stroke_ != nullptr);
      _impl_.deprecated_header_column_horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.deprecated_header_column_vertical_stroke_ != nullptr);
      _impl_.deprecated_header_column_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.deprecated_footer_row_horizontal_stroke_ != nullptr);
      _impl_.deprecated_footer_row_horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.deprecated_footer_row_vertical_stroke_ != nullptr);
      _impl_.deprecated_footer_row_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.deprecated_table_body_vertical_border_stroke_ != nullptr);
      _impl_.deprecated_table_body_vertical_border_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.deprecated_table_body_horizontal_stroke_ != nullptr);
      _impl_.deprecated_table_body_horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.deprecated_table_body_vertical_stroke_ != nullptr);
      _impl_.deprecated_table_body_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.stroke_preset_list_ != nullptr);
      _impl_.stroke_preset_list_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.header_row_separator_stroke_ != nullptr);
      _impl_.header_row_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.header_row_border_stroke_ != nullptr);
      _impl_.header_row_border_stroke_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.header_row_horizontal_stroke_ != nullptr);
      _impl_.header_row_horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.header_row_vertical_stroke_ != nullptr);
      _impl_.header_row_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.header_column_border_stroke_ != nullptr);
      _impl_.header_column_border_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.header_column_separator_stroke_ != nullptr);
      _impl_.header_column_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.header_column_horizontal_stroke_ != nullptr);
      _impl_.header_column_horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.header_column_vertical_stroke_ != nullptr);
      _impl_.header_column_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.footer_row_separator_stroke_ != nullptr);
      _impl_.footer_row_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.footer_row_border_stroke_ != nullptr);
      _impl_.footer_row_border_stroke_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.footer_row_horizontal_stroke_ != nullptr);
      _impl_.footer_row_horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.footer_row_vertical_stroke_ != nullptr);
      _impl_.footer_row_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.table_body_horizontal_border_stroke_ != nullptr);
      _impl_.table_body_horizontal_border_stroke_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_body_vertical_border_stroke_ != nullptr);
      _impl_.table_body_vertical_border_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.table_body_horizontal_stroke_ != nullptr);
      _impl_.table_body_horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.table_body_vertical_stroke_ != nullptr);
      _impl_.table_body_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.category_level1_top_stroke_ != nullptr);
      _impl_.category_level1_top_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.category_level2_top_stroke_ != nullptr);
      _impl_.category_level2_top_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.category_level3_top_stroke_ != nullptr);
      _impl_.category_level3_top_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.category_level4_top_stroke_ != nullptr);
      _impl_.category_level4_top_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.category_level5_top_stroke_ != nullptr);
      _impl_.category_level5_top_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.category_level1_bottom_stroke_ != nullptr);
      _impl_.category_level1_bottom_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.category_level2_bottom_stroke_ != nullptr);
      _impl_.category_level2_bottom_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.category_level3_bottom_stroke_ != nullptr);
      _impl_.category_level3_bottom_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.category_level4_bottom_stroke_ != nullptr);
      _impl_.category_level4_bottom_stroke_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.category_level5_bottom_stroke_ != nullptr);
      _impl_.category_level5_bottom_stroke_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.category_level1_interior_stroke_ != nullptr);
      _impl_.category_level1_interior_stroke_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.category_level2_interior_stroke_ != nullptr);
      _impl_.category_level2_interior_stroke_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.category_level3_interior_stroke_ != nullptr);
      _impl_.category_level3_interior_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.category_level4_interior_stroke_ != nullptr);
      _impl_.category_level4_interior_stroke_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.category_level5_interior_stroke_ != nullptr);
      _impl_.category_level5_interior_stroke_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.category_level1_label_separator_stroke_ != nullptr);
      _impl_.category_level1_label_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.category_level2_label_separator_stroke_ != nullptr);
      _impl_.category_level2_label_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.category_level3_label_separator_stroke_ != nullptr);
      _impl_.category_level3_label_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.category_level4_label_separator_stroke_ != nullptr);
      _impl_.category_level4_label_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.category_level5_label_separator_stroke_ != nullptr);
      _impl_.category_level5_label_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.table_body_pivot_group_horizontal_stroke_ != nullptr);
      _impl_.table_body_pivot_group_horizontal_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.table_body_pivot_group_vertical_stroke_ != nullptr);
      _impl_.table_body_pivot_group_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.table_body_pivot_deemphasis_horizontal_stroke_ != nullptr);
      _impl_.table_body_pivot_deemphasis_horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      GOOGLE_DCHECK(_impl_.table_body_pivot_emphasis_vertical_stroke_ != nullptr);
      _impl_.table_body_pivot_emphasis_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      GOOGLE_DCHECK(_impl_.header_column_pivot_group_horizontal_stroke_ != nullptr);
      _impl_.header_column_pivot_group_horizontal_stroke_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      GOOGLE_DCHECK(_impl_.header_column_pivot_group_deemphasis_stroke_ != nullptr);
      _impl_.header_column_pivot_group_deemphasis_stroke_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      GOOGLE_DCHECK(_impl_.header_column_pivot_separator_stroke_ != nullptr);
      _impl_.header_column_pivot_separator_stroke_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      GOOGLE_DCHECK(_impl_.header_row_pivot_group_vertical_stroke_ != nullptr);
      _impl_.header_row_pivot_group_vertical_stroke_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      GOOGLE_DCHECK(_impl_.header_row_pivot_group_deemphasis_stroke_ != nullptr);
      _impl_.header_row_pivot_group_deemphasis_stroke_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.header_row_pivot_title_stroke_ != nullptr);
      _impl_.header_row_pivot_title_stroke_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.footer_row_pivot_group_vertical_stroke_ != nullptr);
      _impl_.footer_row_pivot_group_vertical_stroke_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&_impl_.banded_rows_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hr_separator_visible_) -
        reinterpret_cast<char*>(&_impl_.banded_rows_)) + sizeof(_impl_.hr_separator_visible_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.hc_separator_visible_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.table_footer_divider_visible_) -
        reinterpret_cast<char*>(&_impl_.hc_separator_visible_)) + sizeof(_impl_.table_footer_divider_visible_));
  }
  _impl_.writing_direction_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableStylePropertiesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool banded_rows = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_banded_rows(&_impl_._has_bits_);
          _impl_.banded_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.FillArchive banded_fill = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_banded_fill(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_separator_stroke = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_header_row_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_border_stroke = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_header_row_border_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_border_stroke = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_header_column_border_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_separator_stroke = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_header_column_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_separator_stroke = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_footer_row_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_border_stroke = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_footer_row_border_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_border_stroke = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_table_body_horizontal_border_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool behaves_like_spreadsheet = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_behaves_like_spreadsheet(&_impl_._has_bits_);
          _impl_.behaves_like_spreadsheet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool auto_resize = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_auto_resize(&_impl_._has_bits_);
          _impl_.auto_resize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_horizontal_stroke = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_header_row_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_vertical_stroke = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_header_row_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_horizontal_stroke = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_header_column_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_vertical_stroke = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_header_column_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_horizontal_stroke = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_footer_row_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_vertical_stroke = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_footer_row_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_border_stroke = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_table_body_vertical_border_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_stroke = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_table_body_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_stroke = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_deprecated_table_body_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.StrokePresetListArchive stroke_preset_list = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_stroke_preset_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool v_strokes_visible = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_v_strokes_visible(&_impl_._has_bits_);
          _impl_.v_strokes_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool h_strokes_visible = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_h_strokes_visible(&_impl_._has_bits_);
          _impl_.h_strokes_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hr_separator_visible = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hr_separator_visible(&_impl_._has_bits_);
          _impl_.hr_separator_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool hc_separator_visible = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_hc_separator_visible(&_impl_._has_bits_);
          _impl_.hc_separator_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool footer_separator_visible = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_footer_separator_visible(&_impl_._has_bits_);
          _impl_.footer_separator_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool table_border_visible = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_table_border_visible(&_impl_._has_bits_);
          _impl_.table_border_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool table_header_border_visible = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_table_header_border_visible(&_impl_._has_bits_);
          _impl_.table_header_border_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 OBSOLETE_master_font_size = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_obsolete_master_font_size(&_impl_._has_bits_);
          _impl_.obsolete_master_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string master_font_family = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_master_font_family();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.TableStylePropertiesArchive.master_font_family");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool table_hc_divider_visible = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_table_hc_divider_visible(&_impl_._has_bits_);
          _impl_.table_hc_divider_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool table_hr_divider_visible = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_table_hr_divider_visible(&_impl_._has_bits_);
          _impl_.table_hr_divider_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool table_footer_divider_visible = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_table_footer_divider_visible(&_impl_._has_bits_);
          _impl_.table_footer_divider_visible_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.WritingDirectionType writing_direction = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSWP::WritingDirectionType_IsValid(val))) {
            _internal_set_writing_direction(static_cast<::TSWP::WritingDirectionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(45, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_row_separator_stroke = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_row_border_stroke = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_border_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_row_horizontal_stroke = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_row_vertical_stroke = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_column_border_stroke = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_border_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_column_separator_stroke = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_column_horizontal_stroke = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_column_vertical_stroke = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive footer_row_separator_stroke = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive footer_row_border_stroke = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_border_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive footer_row_horizontal_stroke = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive footer_row_vertical_stroke = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive table_body_horizontal_border_stroke = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_body_horizontal_border_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive table_body_vertical_border_stroke = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_body_vertical_border_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive table_body_horizontal_stroke = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_body_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive table_body_vertical_stroke = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_body_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level1_top_stroke = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level1_top_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level2_top_stroke = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level2_top_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level3_top_stroke = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level3_top_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level4_top_stroke = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level4_top_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level5_top_stroke = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level5_top_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level1_bottom_stroke = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level1_bottom_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level2_bottom_stroke = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level2_bottom_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level3_bottom_stroke = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level3_bottom_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level4_bottom_stroke = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level4_bottom_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level5_bottom_stroke = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level5_bottom_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level1_interior_stroke = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level1_interior_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level2_interior_stroke = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level2_interior_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level3_interior_stroke = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level3_interior_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level4_interior_stroke = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level4_interior_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level5_interior_stroke = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level5_interior_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level1_label_separator_stroke = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level1_label_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level2_label_separator_stroke = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level2_label_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level3_label_separator_stroke = 79;
      case 79:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level3_label_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level4_label_separator_stroke = 80;
      case 80:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level4_label_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive category_level5_label_separator_stroke = 81;
      case 81:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_level5_label_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive table_body_pivot_group_horizontal_stroke = 82;
      case 82:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_body_pivot_group_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive table_body_pivot_group_vertical_stroke = 83;
      case 83:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_body_pivot_group_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive table_body_pivot_deemphasis_horizontal_stroke = 84;
      case 84:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_body_pivot_deemphasis_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive table_body_pivot_emphasis_vertical_stroke = 85;
      case 85:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_body_pivot_emphasis_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_column_pivot_group_horizontal_stroke = 86;
      case 86:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_pivot_group_horizontal_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_column_pivot_group_deemphasis_stroke = 87;
      case 87:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_pivot_group_deemphasis_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_column_pivot_separator_stroke = 88;
      case 88:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_column_pivot_separator_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_row_pivot_group_vertical_stroke = 89;
      case 89:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_pivot_group_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_row_pivot_group_deemphasis_stroke = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_pivot_group_deemphasis_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive header_row_pivot_title_stroke = 91;
      case 91:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_row_pivot_title_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.StrokeArchive footer_row_pivot_group_vertical_stroke = 92;
      case 92:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_footer_row_pivot_group_vertical_stroke(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableStylePropertiesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool banded_rows = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_banded_rows(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.FillArchive banded_fill = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::banded_fill(this),
        _Internal::banded_fill(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_separator_stroke = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::deprecated_header_row_separator_stroke(this),
        _Internal::deprecated_header_row_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_border_stroke = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::deprecated_header_row_border_stroke(this),
        _Internal::deprecated_header_row_border_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_border_stroke = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::deprecated_header_column_border_stroke(this),
        _Internal::deprecated_header_column_border_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_separator_stroke = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::deprecated_header_column_separator_stroke(this),
        _Internal::deprecated_header_column_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_separator_stroke = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::deprecated_footer_row_separator_stroke(this),
        _Internal::deprecated_footer_row_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_border_stroke = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::deprecated_footer_row_border_stroke(this),
        _Internal::deprecated_footer_row_border_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_border_stroke = 12;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::deprecated_table_body_horizontal_border_stroke(this),
        _Internal::deprecated_table_body_horizontal_border_stroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool behaves_like_spreadsheet = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(21, this->_internal_behaves_like_spreadsheet(), target);
  }

  // optional bool auto_resize = 22;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_auto_resize(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_horizontal_stroke = 23;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::deprecated_header_row_horizontal_stroke(this),
        _Internal::deprecated_header_row_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_vertical_stroke = 24;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::deprecated_header_row_vertical_stroke(this),
        _Internal::deprecated_header_row_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_horizontal_stroke = 25;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::deprecated_header_column_horizontal_stroke(this),
        _Internal::deprecated_header_column_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_vertical_stroke = 26;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::deprecated_header_column_vertical_stroke(this),
        _Internal::deprecated_header_column_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_horizontal_stroke = 27;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::deprecated_footer_row_horizontal_stroke(this),
        _Internal::deprecated_footer_row_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_vertical_stroke = 28;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::deprecated_footer_row_vertical_stroke(this),
        _Internal::deprecated_footer_row_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_border_stroke = 29;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::deprecated_table_body_vertical_border_stroke(this),
        _Internal::deprecated_table_body_vertical_border_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_stroke = 30;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::deprecated_table_body_horizontal_stroke(this),
        _Internal::deprecated_table_body_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_stroke = 31;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::deprecated_table_body_vertical_stroke(this),
        _Internal::deprecated_table_body_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TST.StrokePresetListArchive stroke_preset_list = 32;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::stroke_preset_list(this),
        _Internal::stroke_preset_list(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool v_strokes_visible = 33;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(33, this->_internal_v_strokes_visible(), target);
  }

  // optional bool h_strokes_visible = 34;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(34, this->_internal_h_strokes_visible(), target);
  }

  // optional bool hr_separator_visible = 35;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(35, this->_internal_hr_separator_visible(), target);
  }

  // optional bool hc_separator_visible = 36;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(36, this->_internal_hc_separator_visible(), target);
  }

  // optional bool footer_separator_visible = 37;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_footer_separator_visible(), target);
  }

  // optional bool table_border_visible = 38;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(38, this->_internal_table_border_visible(), target);
  }

  // optional bool table_header_border_visible = 39;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(39, this->_internal_table_header_border_visible(), target);
  }

  // optional int32 OBSOLETE_master_font_size = 40;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_obsolete_master_font_size(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string master_font_family = 41;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_master_font_family().data(), static_cast<int>(this->_internal_master_font_family().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableStylePropertiesArchive.master_font_family");
    target = stream->WriteStringMaybeAliased(
        41, this->_internal_master_font_family(), target);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional bool table_hc_divider_visible = 42;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(42, this->_internal_table_hc_divider_visible(), target);
  }

  // optional bool table_hr_divider_visible = 43;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(43, this->_internal_table_hr_divider_visible(), target);
  }

  // optional bool table_footer_divider_visible = 44;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(44, this->_internal_table_footer_divider_visible(), target);
  }

  // optional .TSWP.WritingDirectionType writing_direction = 45;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      45, this->_internal_writing_direction(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSD.StrokeArchive header_row_separator_stroke = 46;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::header_row_separator_stroke(this),
        _Internal::header_row_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_row_border_stroke = 47;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(47, _Internal::header_row_border_stroke(this),
        _Internal::header_row_border_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_row_horizontal_stroke = 48;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(48, _Internal::header_row_horizontal_stroke(this),
        _Internal::header_row_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_row_vertical_stroke = 49;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(49, _Internal::header_row_vertical_stroke(this),
        _Internal::header_row_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_column_border_stroke = 50;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(50, _Internal::header_column_border_stroke(this),
        _Internal::header_column_border_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_column_separator_stroke = 51;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::header_column_separator_stroke(this),
        _Internal::header_column_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_column_horizontal_stroke = 52;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::header_column_horizontal_stroke(this),
        _Internal::header_column_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_column_vertical_stroke = 53;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::header_column_vertical_stroke(this),
        _Internal::header_column_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive footer_row_separator_stroke = 54;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::footer_row_separator_stroke(this),
        _Internal::footer_row_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive footer_row_border_stroke = 55;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::footer_row_border_stroke(this),
        _Internal::footer_row_border_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive footer_row_horizontal_stroke = 56;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::footer_row_horizontal_stroke(this),
        _Internal::footer_row_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive footer_row_vertical_stroke = 57;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(57, _Internal::footer_row_vertical_stroke(this),
        _Internal::footer_row_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive table_body_horizontal_border_stroke = 58;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(58, _Internal::table_body_horizontal_border_stroke(this),
        _Internal::table_body_horizontal_border_stroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TSD.StrokeArchive table_body_vertical_border_stroke = 59;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(59, _Internal::table_body_vertical_border_stroke(this),
        _Internal::table_body_vertical_border_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive table_body_horizontal_stroke = 60;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(60, _Internal::table_body_horizontal_stroke(this),
        _Internal::table_body_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive table_body_vertical_stroke = 61;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(61, _Internal::table_body_vertical_stroke(this),
        _Internal::table_body_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level1_top_stroke = 62;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(62, _Internal::category_level1_top_stroke(this),
        _Internal::category_level1_top_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level2_top_stroke = 63;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(63, _Internal::category_level2_top_stroke(this),
        _Internal::category_level2_top_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level3_top_stroke = 64;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(64, _Internal::category_level3_top_stroke(this),
        _Internal::category_level3_top_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level4_top_stroke = 65;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(65, _Internal::category_level4_top_stroke(this),
        _Internal::category_level4_top_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level5_top_stroke = 66;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(66, _Internal::category_level5_top_stroke(this),
        _Internal::category_level5_top_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level1_bottom_stroke = 67;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(67, _Internal::category_level1_bottom_stroke(this),
        _Internal::category_level1_bottom_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level2_bottom_stroke = 68;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(68, _Internal::category_level2_bottom_stroke(this),
        _Internal::category_level2_bottom_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level3_bottom_stroke = 69;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(69, _Internal::category_level3_bottom_stroke(this),
        _Internal::category_level3_bottom_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level4_bottom_stroke = 70;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(70, _Internal::category_level4_bottom_stroke(this),
        _Internal::category_level4_bottom_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level5_bottom_stroke = 71;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(71, _Internal::category_level5_bottom_stroke(this),
        _Internal::category_level5_bottom_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level1_interior_stroke = 72;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(72, _Internal::category_level1_interior_stroke(this),
        _Internal::category_level1_interior_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level2_interior_stroke = 73;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(73, _Internal::category_level2_interior_stroke(this),
        _Internal::category_level2_interior_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level3_interior_stroke = 74;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(74, _Internal::category_level3_interior_stroke(this),
        _Internal::category_level3_interior_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level4_interior_stroke = 75;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(75, _Internal::category_level4_interior_stroke(this),
        _Internal::category_level4_interior_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level5_interior_stroke = 76;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(76, _Internal::category_level5_interior_stroke(this),
        _Internal::category_level5_interior_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level1_label_separator_stroke = 77;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(77, _Internal::category_level1_label_separator_stroke(this),
        _Internal::category_level1_label_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level2_label_separator_stroke = 78;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(78, _Internal::category_level2_label_separator_stroke(this),
        _Internal::category_level2_label_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level3_label_separator_stroke = 79;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(79, _Internal::category_level3_label_separator_stroke(this),
        _Internal::category_level3_label_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level4_label_separator_stroke = 80;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(80, _Internal::category_level4_label_separator_stroke(this),
        _Internal::category_level4_label_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive category_level5_label_separator_stroke = 81;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(81, _Internal::category_level5_label_separator_stroke(this),
        _Internal::category_level5_label_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive table_body_pivot_group_horizontal_stroke = 82;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(82, _Internal::table_body_pivot_group_horizontal_stroke(this),
        _Internal::table_body_pivot_group_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive table_body_pivot_group_vertical_stroke = 83;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(83, _Internal::table_body_pivot_group_vertical_stroke(this),
        _Internal::table_body_pivot_group_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive table_body_pivot_deemphasis_horizontal_stroke = 84;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(84, _Internal::table_body_pivot_deemphasis_horizontal_stroke(this),
        _Internal::table_body_pivot_deemphasis_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive table_body_pivot_emphasis_vertical_stroke = 85;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(85, _Internal::table_body_pivot_emphasis_vertical_stroke(this),
        _Internal::table_body_pivot_emphasis_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_column_pivot_group_horizontal_stroke = 86;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(86, _Internal::header_column_pivot_group_horizontal_stroke(this),
        _Internal::header_column_pivot_group_horizontal_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_column_pivot_group_deemphasis_stroke = 87;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(87, _Internal::header_column_pivot_group_deemphasis_stroke(this),
        _Internal::header_column_pivot_group_deemphasis_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_column_pivot_separator_stroke = 88;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(88, _Internal::header_column_pivot_separator_stroke(this),
        _Internal::header_column_pivot_separator_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_row_pivot_group_vertical_stroke = 89;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(89, _Internal::header_row_pivot_group_vertical_stroke(this),
        _Internal::header_row_pivot_group_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive header_row_pivot_group_deemphasis_stroke = 90;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(90, _Internal::header_row_pivot_group_deemphasis_stroke(this),
        _Internal::header_row_pivot_group_deemphasis_stroke(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[2];
  // optional .TSD.StrokeArchive header_row_pivot_title_stroke = 91;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(91, _Internal::header_row_pivot_title_stroke(this),
        _Internal::header_row_pivot_title_stroke(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.StrokeArchive footer_row_pivot_group_vertical_stroke = 92;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(92, _Internal::footer_row_pivot_group_vertical_stroke(this),
        _Internal::footer_row_pivot_group_vertical_stroke(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableStylePropertiesArchive)
  return target;
}

size_t TableStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableStylePropertiesArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string master_font_family = 41;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_master_font_family());
    }

    // optional .TSD.FillArchive banded_fill = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.banded_fill_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_separator_stroke = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_header_row_separator_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_border_stroke = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_header_row_border_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_border_stroke = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_header_column_border_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_separator_stroke = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_header_column_separator_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_separator_stroke = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_footer_row_separator_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_border_stroke = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_footer_row_border_stroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_border_stroke = 12;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_table_body_horizontal_border_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_horizontal_stroke = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_header_row_horizontal_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_row_vertical_stroke = 24;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_header_row_vertical_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_horizontal_stroke = 25;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_header_column_horizontal_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_header_column_vertical_stroke = 26;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_header_column_vertical_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_horizontal_stroke = 27;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_footer_row_horizontal_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_footer_row_vertical_stroke = 28;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_footer_row_vertical_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_border_stroke = 29;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_table_body_vertical_border_stroke_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_horizontal_stroke = 30;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_table_body_horizontal_stroke_);
    }

    // optional .TST.Deprecated_TableStrokeArchive deprecated_table_body_vertical_stroke = 31;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.deprecated_table_body_vertical_stroke_);
    }

    // optional .TST.StrokePresetListArchive stroke_preset_list = 32;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stroke_preset_list_);
    }

    // optional .TSD.StrokeArchive header_row_separator_stroke = 46;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_row_separator_stroke_);
    }

    // optional .TSD.StrokeArchive header_row_border_stroke = 47;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_row_border_stroke_);
    }

    // optional .TSD.StrokeArchive header_row_horizontal_stroke = 48;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_row_horizontal_stroke_);
    }

    // optional .TSD.StrokeArchive header_row_vertical_stroke = 49;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_row_vertical_stroke_);
    }

    // optional .TSD.StrokeArchive header_column_border_stroke = 50;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_column_border_stroke_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.StrokeArchive header_column_separator_stroke = 51;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_column_separator_stroke_);
    }

    // optional .TSD.StrokeArchive header_column_horizontal_stroke = 52;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_column_horizontal_stroke_);
    }

    // optional .TSD.StrokeArchive header_column_vertical_stroke = 53;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_column_vertical_stroke_);
    }

    // optional .TSD.StrokeArchive footer_row_separator_stroke = 54;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.footer_row_separator_stroke_);
    }

    // optional .TSD.StrokeArchive footer_row_border_stroke = 55;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.footer_row_border_stroke_);
    }

    // optional .TSD.StrokeArchive footer_row_horizontal_stroke = 56;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.footer_row_horizontal_stroke_);
    }

    // optional .TSD.StrokeArchive footer_row_vertical_stroke = 57;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.footer_row_vertical_stroke_);
    }

    // optional .TSD.StrokeArchive table_body_horizontal_border_stroke = 58;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_body_horizontal_border_stroke_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.StrokeArchive table_body_vertical_border_stroke = 59;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_body_vertical_border_stroke_);
    }

    // optional .TSD.StrokeArchive table_body_horizontal_stroke = 60;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_body_horizontal_stroke_);
    }

    // optional .TSD.StrokeArchive table_body_vertical_stroke = 61;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_body_vertical_stroke_);
    }

    // optional .TSD.StrokeArchive category_level1_top_stroke = 62;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level1_top_stroke_);
    }

    // optional .TSD.StrokeArchive category_level2_top_stroke = 63;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level2_top_stroke_);
    }

    // optional .TSD.StrokeArchive category_level3_top_stroke = 64;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level3_top_stroke_);
    }

    // optional .TSD.StrokeArchive category_level4_top_stroke = 65;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level4_top_stroke_);
    }

    // optional .TSD.StrokeArchive category_level5_top_stroke = 66;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level5_top_stroke_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSD.StrokeArchive category_level1_bottom_stroke = 67;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level1_bottom_stroke_);
    }

    // optional .TSD.StrokeArchive category_level2_bottom_stroke = 68;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level2_bottom_stroke_);
    }

    // optional .TSD.StrokeArchive category_level3_bottom_stroke = 69;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level3_bottom_stroke_);
    }

    // optional .TSD.StrokeArchive category_level4_bottom_stroke = 70;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level4_bottom_stroke_);
    }

    // optional .TSD.StrokeArchive category_level5_bottom_stroke = 71;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level5_bottom_stroke_);
    }

    // optional .TSD.StrokeArchive category_level1_interior_stroke = 72;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level1_interior_stroke_);
    }

    // optional .TSD.StrokeArchive category_level2_interior_stroke = 73;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level2_interior_stroke_);
    }

    // optional .TSD.StrokeArchive category_level3_interior_stroke = 74;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level3_interior_stroke_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSD.StrokeArchive category_level4_interior_stroke = 75;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level4_interior_stroke_);
    }

    // optional .TSD.StrokeArchive category_level5_interior_stroke = 76;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level5_interior_stroke_);
    }

    // optional .TSD.StrokeArchive category_level1_label_separator_stroke = 77;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level1_label_separator_stroke_);
    }

    // optional .TSD.StrokeArchive category_level2_label_separator_stroke = 78;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level2_label_separator_stroke_);
    }

    // optional .TSD.StrokeArchive category_level3_label_separator_stroke = 79;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level3_label_separator_stroke_);
    }

    // optional .TSD.StrokeArchive category_level4_label_separator_stroke = 80;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level4_label_separator_stroke_);
    }

    // optional .TSD.StrokeArchive category_level5_label_separator_stroke = 81;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.category_level5_label_separator_stroke_);
    }

    // optional .TSD.StrokeArchive table_body_pivot_group_horizontal_stroke = 82;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_body_pivot_group_horizontal_stroke_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSD.StrokeArchive table_body_pivot_group_vertical_stroke = 83;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_body_pivot_group_vertical_stroke_);
    }

    // optional .TSD.StrokeArchive table_body_pivot_deemphasis_horizontal_stroke = 84;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_body_pivot_deemphasis_horizontal_stroke_);
    }

    // optional .TSD.StrokeArchive table_body_pivot_emphasis_vertical_stroke = 85;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_body_pivot_emphasis_vertical_stroke_);
    }

    // optional .TSD.StrokeArchive header_column_pivot_group_horizontal_stroke = 86;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_column_pivot_group_horizontal_stroke_);
    }

    // optional .TSD.StrokeArchive header_column_pivot_group_deemphasis_stroke = 87;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_column_pivot_group_deemphasis_stroke_);
    }

    // optional .TSD.StrokeArchive header_column_pivot_separator_stroke = 88;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_column_pivot_separator_stroke_);
    }

    // optional .TSD.StrokeArchive header_row_pivot_group_vertical_stroke = 89;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_row_pivot_group_vertical_stroke_);
    }

    // optional .TSD.StrokeArchive header_row_pivot_group_deemphasis_stroke = 90;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_row_pivot_group_deemphasis_stroke_);
    }

  }
  cached_has_bits = _impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSD.StrokeArchive header_row_pivot_title_stroke = 91;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.header_row_pivot_title_stroke_);
    }

    // optional .TSD.StrokeArchive footer_row_pivot_group_vertical_stroke = 92;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.footer_row_pivot_group_vertical_stroke_);
    }

    // optional bool banded_rows = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool behaves_like_spreadsheet = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

    // optional bool auto_resize = 22;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 + 1;
    }

    // optional bool v_strokes_visible = 33;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 + 1;
    }

    // optional bool h_strokes_visible = 34;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool hr_separator_visible = 35;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool hc_separator_visible = 36;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool footer_separator_visible = 37;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional int32 OBSOLETE_master_font_size = 40;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_obsolete_master_font_size());
    }

    // optional bool table_border_visible = 38;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool table_header_border_visible = 39;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional bool table_hc_divider_visible = 42;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 1;
    }

    // optional bool table_hr_divider_visible = 43;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool table_footer_divider_visible = 44;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional .TSWP.WritingDirectionType writing_direction = 45;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_writing_direction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableStylePropertiesArchive::GetClassData() const { return &_class_data_; }


void TableStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableStylePropertiesArchive*>(&to_msg);
  auto& from = static_cast<const TableStylePropertiesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_master_font_family(from._internal_master_font_family());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_banded_fill()->::TSD::FillArchive::MergeFrom(
          from._internal_banded_fill());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_deprecated_header_row_separator_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_header_row_separator_stroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_deprecated_header_row_border_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_header_row_border_stroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_deprecated_header_column_border_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_header_column_border_stroke());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_deprecated_header_column_separator_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_header_column_separator_stroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_deprecated_footer_row_separator_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_footer_row_separator_stroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_deprecated_footer_row_border_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_footer_row_border_stroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_deprecated_table_body_horizontal_border_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_table_body_horizontal_border_stroke());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_deprecated_header_row_horizontal_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_header_row_horizontal_stroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_deprecated_header_row_vertical_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_header_row_vertical_stroke());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_deprecated_header_column_horizontal_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_header_column_horizontal_stroke());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_deprecated_header_column_vertical_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_header_column_vertical_stroke());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_deprecated_footer_row_horizontal_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_footer_row_horizontal_stroke());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_deprecated_footer_row_vertical_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_footer_row_vertical_stroke());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_deprecated_table_body_vertical_border_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_table_body_vertical_border_stroke());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_deprecated_table_body_horizontal_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_table_body_horizontal_stroke());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_deprecated_table_body_vertical_stroke()->::TST::Deprecated_TableStrokeArchive::MergeFrom(
          from._internal_deprecated_table_body_vertical_stroke());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_stroke_preset_list()->::TST::StrokePresetListArchive::MergeFrom(
          from._internal_stroke_preset_list());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_header_row_separator_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_row_separator_stroke());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_header_row_border_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_row_border_stroke());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_header_row_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_row_horizontal_stroke());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_header_row_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_row_vertical_stroke());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_header_column_border_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_column_border_stroke());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_header_column_separator_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_column_separator_stroke());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_header_column_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_column_horizontal_stroke());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_header_column_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_column_vertical_stroke());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_footer_row_separator_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_footer_row_separator_stroke());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_footer_row_border_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_footer_row_border_stroke());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_footer_row_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_footer_row_horizontal_stroke());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_footer_row_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_footer_row_vertical_stroke());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_mutable_table_body_horizontal_border_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_table_body_horizontal_border_stroke());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_body_vertical_border_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_table_body_vertical_border_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_table_body_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_table_body_horizontal_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_table_body_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_table_body_vertical_stroke());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_category_level1_top_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level1_top_stroke());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_category_level2_top_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level2_top_stroke());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_category_level3_top_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level3_top_stroke());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_category_level4_top_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level4_top_stroke());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_category_level5_top_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level5_top_stroke());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_category_level1_bottom_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level1_bottom_stroke());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_category_level2_bottom_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level2_bottom_stroke());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_category_level3_bottom_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level3_bottom_stroke());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_category_level4_bottom_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level4_bottom_stroke());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_category_level5_bottom_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level5_bottom_stroke());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_category_level1_interior_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level1_interior_stroke());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_category_level2_interior_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level2_interior_stroke());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_category_level3_interior_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level3_interior_stroke());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_category_level4_interior_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level4_interior_stroke());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_category_level5_interior_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level5_interior_stroke());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_category_level1_label_separator_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level1_label_separator_stroke());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_category_level2_label_separator_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level2_label_separator_stroke());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_category_level3_label_separator_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level3_label_separator_stroke());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_category_level4_label_separator_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level4_label_separator_stroke());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_category_level5_label_separator_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_category_level5_label_separator_stroke());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_table_body_pivot_group_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_table_body_pivot_group_horizontal_stroke());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_table_body_pivot_group_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_table_body_pivot_group_vertical_stroke());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_table_body_pivot_deemphasis_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_table_body_pivot_deemphasis_horizontal_stroke());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_table_body_pivot_emphasis_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_table_body_pivot_emphasis_vertical_stroke());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_header_column_pivot_group_horizontal_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_column_pivot_group_horizontal_stroke());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_header_column_pivot_group_deemphasis_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_column_pivot_group_deemphasis_stroke());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_header_column_pivot_separator_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_column_pivot_separator_stroke());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_header_row_pivot_group_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_row_pivot_group_vertical_stroke());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_mutable_header_row_pivot_group_deemphasis_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_row_pivot_group_deemphasis_stroke());
    }
  }
  cached_has_bits = from._impl_._has_bits_[2];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_header_row_pivot_title_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_header_row_pivot_title_stroke());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_footer_row_pivot_group_vertical_stroke()->::TSD::StrokeArchive::MergeFrom(
          from._internal_footer_row_pivot_group_vertical_stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.banded_rows_ = from._impl_.banded_rows_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.behaves_like_spreadsheet_ = from._impl_.behaves_like_spreadsheet_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.auto_resize_ = from._impl_.auto_resize_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.v_strokes_visible_ = from._impl_.v_strokes_visible_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.h_strokes_visible_ = from._impl_.h_strokes_visible_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.hr_separator_visible_ = from._impl_.hr_separator_visible_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.hc_separator_visible_ = from._impl_.hc_separator_visible_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.footer_separator_visible_ = from._impl_.footer_separator_visible_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.obsolete_master_font_size_ = from._impl_.obsolete_master_font_size_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.table_border_visible_ = from._impl_.table_border_visible_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.table_header_border_visible_ = from._impl_.table_header_border_visible_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.table_hc_divider_visible_ = from._impl_.table_hc_divider_visible_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.table_hr_divider_visible_ = from._impl_.table_hr_divider_visible_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.table_footer_divider_visible_ = from._impl_.table_footer_divider_visible_;
    }
    _this->_impl_._has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _this->_internal_set_writing_direction(from._internal_writing_direction());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableStylePropertiesArchive::CopyFrom(const TableStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStylePropertiesArchive::IsInitialized() const {
  if (_internal_has_banded_fill()) {
    if (!_impl_.banded_fill_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_header_row_separator_stroke()) {
    if (!_impl_.deprecated_header_row_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_header_row_border_stroke()) {
    if (!_impl_.deprecated_header_row_border_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_header_column_border_stroke()) {
    if (!_impl_.deprecated_header_column_border_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_header_column_separator_stroke()) {
    if (!_impl_.deprecated_header_column_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_footer_row_separator_stroke()) {
    if (!_impl_.deprecated_footer_row_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_footer_row_border_stroke()) {
    if (!_impl_.deprecated_footer_row_border_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_table_body_horizontal_border_stroke()) {
    if (!_impl_.deprecated_table_body_horizontal_border_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_header_row_horizontal_stroke()) {
    if (!_impl_.deprecated_header_row_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_header_row_vertical_stroke()) {
    if (!_impl_.deprecated_header_row_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_header_column_horizontal_stroke()) {
    if (!_impl_.deprecated_header_column_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_header_column_vertical_stroke()) {
    if (!_impl_.deprecated_header_column_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_footer_row_horizontal_stroke()) {
    if (!_impl_.deprecated_footer_row_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_footer_row_vertical_stroke()) {
    if (!_impl_.deprecated_footer_row_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_table_body_vertical_border_stroke()) {
    if (!_impl_.deprecated_table_body_vertical_border_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_table_body_horizontal_stroke()) {
    if (!_impl_.deprecated_table_body_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_deprecated_table_body_vertical_stroke()) {
    if (!_impl_.deprecated_table_body_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_stroke_preset_list()) {
    if (!_impl_.stroke_preset_list_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_separator_stroke()) {
    if (!_impl_.header_row_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_border_stroke()) {
    if (!_impl_.header_row_border_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_horizontal_stroke()) {
    if (!_impl_.header_row_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_vertical_stroke()) {
    if (!_impl_.header_row_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_border_stroke()) {
    if (!_impl_.header_column_border_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_separator_stroke()) {
    if (!_impl_.header_column_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_horizontal_stroke()) {
    if (!_impl_.header_column_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_vertical_stroke()) {
    if (!_impl_.header_column_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_separator_stroke()) {
    if (!_impl_.footer_row_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_border_stroke()) {
    if (!_impl_.footer_row_border_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_horizontal_stroke()) {
    if (!_impl_.footer_row_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_vertical_stroke()) {
    if (!_impl_.footer_row_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_table_body_horizontal_border_stroke()) {
    if (!_impl_.table_body_horizontal_border_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_table_body_vertical_border_stroke()) {
    if (!_impl_.table_body_vertical_border_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_table_body_horizontal_stroke()) {
    if (!_impl_.table_body_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_table_body_vertical_stroke()) {
    if (!_impl_.table_body_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level1_top_stroke()) {
    if (!_impl_.category_level1_top_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level2_top_stroke()) {
    if (!_impl_.category_level2_top_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level3_top_stroke()) {
    if (!_impl_.category_level3_top_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level4_top_stroke()) {
    if (!_impl_.category_level4_top_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level5_top_stroke()) {
    if (!_impl_.category_level5_top_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level1_bottom_stroke()) {
    if (!_impl_.category_level1_bottom_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level2_bottom_stroke()) {
    if (!_impl_.category_level2_bottom_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level3_bottom_stroke()) {
    if (!_impl_.category_level3_bottom_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level4_bottom_stroke()) {
    if (!_impl_.category_level4_bottom_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level5_bottom_stroke()) {
    if (!_impl_.category_level5_bottom_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level1_interior_stroke()) {
    if (!_impl_.category_level1_interior_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level2_interior_stroke()) {
    if (!_impl_.category_level2_interior_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level3_interior_stroke()) {
    if (!_impl_.category_level3_interior_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level4_interior_stroke()) {
    if (!_impl_.category_level4_interior_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level5_interior_stroke()) {
    if (!_impl_.category_level5_interior_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level1_label_separator_stroke()) {
    if (!_impl_.category_level1_label_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level2_label_separator_stroke()) {
    if (!_impl_.category_level2_label_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level3_label_separator_stroke()) {
    if (!_impl_.category_level3_label_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level4_label_separator_stroke()) {
    if (!_impl_.category_level4_label_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_category_level5_label_separator_stroke()) {
    if (!_impl_.category_level5_label_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_table_body_pivot_group_horizontal_stroke()) {
    if (!_impl_.table_body_pivot_group_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_table_body_pivot_group_vertical_stroke()) {
    if (!_impl_.table_body_pivot_group_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_table_body_pivot_deemphasis_horizontal_stroke()) {
    if (!_impl_.table_body_pivot_deemphasis_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_table_body_pivot_emphasis_vertical_stroke()) {
    if (!_impl_.table_body_pivot_emphasis_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_pivot_group_horizontal_stroke()) {
    if (!_impl_.header_column_pivot_group_horizontal_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_pivot_group_deemphasis_stroke()) {
    if (!_impl_.header_column_pivot_group_deemphasis_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_column_pivot_separator_stroke()) {
    if (!_impl_.header_column_pivot_separator_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_pivot_group_vertical_stroke()) {
    if (!_impl_.header_row_pivot_group_vertical_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_pivot_group_deemphasis_stroke()) {
    if (!_impl_.header_row_pivot_group_deemphasis_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_header_row_pivot_title_stroke()) {
    if (!_impl_.header_row_pivot_title_stroke_->IsInitialized()) return false;
  }
  if (_internal_has_footer_row_pivot_group_vertical_stroke()) {
    if (!_impl_.footer_row_pivot_group_vertical_stroke_->IsInitialized()) return false;
  }
  return true;
}

void TableStylePropertiesArchive::InternalSwap(TableStylePropertiesArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  swap(_impl_._has_bits_[2], other->_impl_._has_bits_[2]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.master_font_family_, lhs_arena,
      &other->_impl_.master_font_family_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableStylePropertiesArchive, _impl_.table_footer_divider_visible_)
      + sizeof(TableStylePropertiesArchive::_impl_.table_footer_divider_visible_)
      - PROTOBUF_FIELD_OFFSET(TableStylePropertiesArchive, _impl_.banded_fill_)>(
          reinterpret_cast<char*>(&_impl_.banded_fill_),
          reinterpret_cast<char*>(&other->_impl_.banded_fill_));
  swap(_impl_.writing_direction_, other->_impl_.writing_direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableStylePropertiesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTStylePropertyArchiving_2eproto_getter, &descriptor_table_TSTStylePropertyArchiving_2eproto_once,
      file_level_metadata_TSTStylePropertyArchiving_2eproto[5]);
}

// ===================================================================

class TableStylePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableStylePresetArchive>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& image(const TableStylePresetArchive* msg);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& style_network(const TableStylePresetArchive* msg);
  static void set_has_style_network(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TSP::Reference&
TableStylePresetArchive::_Internal::image(const TableStylePresetArchive* msg) {
  return *msg->_impl_.image_;
}
const ::TSP::Reference&
TableStylePresetArchive::_Internal::style_network(const TableStylePresetArchive* msg) {
  return *msg->_impl_.style_network_;
}
void TableStylePresetArchive::clear_image() {
  if (_impl_.image_ != nullptr) _impl_.image_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TableStylePresetArchive::clear_style_network() {
  if (_impl_.style_network_ != nullptr) _impl_.style_network_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TableStylePresetArchive::TableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableStylePresetArchive)
}
TableStylePresetArchive::TableStylePresetArchive(const TableStylePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableStylePresetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.style_network_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_image()) {
    _this->_impl_.image_ = new ::TSP::Reference(*from._impl_.image_);
  }
  if (from._internal_has_style_network()) {
    _this->_impl_.style_network_ = new ::TSP::Reference(*from._impl_.style_network_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:TST.TableStylePresetArchive)
}

inline void TableStylePresetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.image_){nullptr}
    , decltype(_impl_.style_network_){nullptr}
    , decltype(_impl_.index_){0}
  };
}

TableStylePresetArchive::~TableStylePresetArchive() {
  // @@protoc_insertion_point(destructor:TST.TableStylePresetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableStylePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.image_;
  if (this != internal_default_instance()) delete _impl_.style_network_;
}

void TableStylePresetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableStylePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableStylePresetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.image_ != nullptr);
      _impl_.image_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.style_network_ != nullptr);
      _impl_.style_network_->Clear();
    }
  }
  _impl_.index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableStylePresetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference style_network = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_style_network(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableStylePresetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableStylePresetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // optional .TSP.Reference image = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference style_network = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::style_network(this),
        _Internal::style_network(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableStylePresetArchive)
  return target;
}

size_t TableStylePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableStylePresetArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference image = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.image_);
    }

    // optional .TSP.Reference style_network = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.style_network_);
    }

    // optional int32 index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableStylePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableStylePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableStylePresetArchive::GetClassData() const { return &_class_data_; }


void TableStylePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableStylePresetArchive*>(&to_msg);
  auto& from = static_cast<const TableStylePresetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableStylePresetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_image()->::TSP::Reference::MergeFrom(
          from._internal_image());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_style_network()->::TSP::Reference::MergeFrom(
          from._internal_style_network());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableStylePresetArchive::CopyFrom(const TableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableStylePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStylePresetArchive::IsInitialized() const {
  if (_internal_has_image()) {
    if (!_impl_.image_->IsInitialized()) return false;
  }
  if (_internal_has_style_network()) {
    if (!_impl_.style_network_->IsInitialized()) return false;
  }
  return true;
}

void TableStylePresetArchive::InternalSwap(TableStylePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableStylePresetArchive, _impl_.index_)
      + sizeof(TableStylePresetArchive::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(TableStylePresetArchive, _impl_.image_)>(
          reinterpret_cast<char*>(&_impl_.image_),
          reinterpret_cast<char*>(&other->_impl_.image_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableStylePresetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTStylePropertyArchiving_2eproto_getter, &descriptor_table_TSTStylePropertyArchiving_2eproto_once,
      file_level_metadata_TSTStylePropertyArchiving_2eproto[6]);
}

// ===================================================================

class TableStrokePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableStrokePresetArchive>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TableStrokePresetArchive::TableStrokePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableStrokePresetArchive)
}
TableStrokePresetArchive::TableStrokePresetArchive(const TableStrokePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableStrokePresetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:TST.TableStrokePresetArchive)
}

inline void TableStrokePresetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.index_){0}
  };
}

TableStrokePresetArchive::~TableStrokePresetArchive() {
  // @@protoc_insertion_point(destructor:TST.TableStrokePresetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableStrokePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TableStrokePresetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableStrokePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableStrokePresetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableStrokePresetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableStrokePresetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableStrokePresetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableStrokePresetArchive)
  return target;
}

size_t TableStrokePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableStrokePresetArchive)
  size_t total_size = 0;

  // required int32 index = 1;
  if (_internal_has_index()) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableStrokePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableStrokePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableStrokePresetArchive::GetClassData() const { return &_class_data_; }


void TableStrokePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableStrokePresetArchive*>(&to_msg);
  auto& from = static_cast<const TableStrokePresetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableStrokePresetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_index()) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableStrokePresetArchive::CopyFrom(const TableStrokePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableStrokePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableStrokePresetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void TableStrokePresetArchive::InternalSwap(TableStrokePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableStrokePresetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTStylePropertyArchiving_2eproto_getter, &descriptor_table_TSTStylePropertyArchiving_2eproto_once,
      file_level_metadata_TSTStylePropertyArchiving_2eproto[7]);
}

// ===================================================================

class ThemePresetsArchive::_Internal {
 public:
};

void ThemePresetsArchive::clear_table_style_presets() {
  _impl_.table_style_presets_.Clear();
}
void ThemePresetsArchive::clear_table_cell_stroke_presets() {
  _impl_.table_cell_stroke_presets_.Clear();
}
ThemePresetsArchive::ThemePresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ThemePresetsArchive)
}
ThemePresetsArchive::ThemePresetsArchive(const ThemePresetsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ThemePresetsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_style_presets_){from._impl_.table_style_presets_}
    , decltype(_impl_.table_cell_stroke_presets_){from._impl_.table_cell_stroke_presets_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ThemePresetsArchive)
}

inline void ThemePresetsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_style_presets_){arena}
    , decltype(_impl_.table_cell_stroke_presets_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ThemePresetsArchive::~ThemePresetsArchive() {
  // @@protoc_insertion_point(destructor:TST.ThemePresetsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ThemePresetsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_style_presets_.~RepeatedPtrField();
  _impl_.table_cell_stroke_presets_.~RepeatedPtrField();
}

void ThemePresetsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ThemePresetsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ThemePresetsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_style_presets_.Clear();
  _impl_.table_cell_stroke_presets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemePresetsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.Reference table_style_presets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_style_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference table_cell_stroke_presets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_cell_stroke_presets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemePresetsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ThemePresetsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.Reference table_style_presets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_table_style_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_table_style_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference table_cell_stroke_presets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_table_cell_stroke_presets_size()); i < n; i++) {
    const auto& repfield = this->_internal_table_cell_stroke_presets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ThemePresetsArchive)
  return target;
}

size_t ThemePresetsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ThemePresetsArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference table_style_presets = 1;
  total_size += 1UL * this->_internal_table_style_presets_size();
  for (const auto& msg : this->_impl_.table_style_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference table_cell_stroke_presets = 2;
  total_size += 1UL * this->_internal_table_cell_stroke_presets_size();
  for (const auto& msg : this->_impl_.table_cell_stroke_presets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemePresetsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ThemePresetsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemePresetsArchive::GetClassData() const { return &_class_data_; }


void ThemePresetsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ThemePresetsArchive*>(&to_msg);
  auto& from = static_cast<const ThemePresetsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ThemePresetsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.table_style_presets_.MergeFrom(from._impl_.table_style_presets_);
  _this->_impl_.table_cell_stroke_presets_.MergeFrom(from._impl_.table_cell_stroke_presets_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemePresetsArchive::CopyFrom(const ThemePresetsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ThemePresetsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemePresetsArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.table_style_presets_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.table_cell_stroke_presets_))
    return false;
  return true;
}

void ThemePresetsArchive::InternalSwap(ThemePresetsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.table_style_presets_.InternalSwap(&other->_impl_.table_style_presets_);
  _impl_.table_cell_stroke_presets_.InternalSwap(&other->_impl_.table_cell_stroke_presets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemePresetsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTStylePropertyArchiving_2eproto_getter, &descriptor_table_TSTStylePropertyArchiving_2eproto_once,
      file_level_metadata_TSTStylePropertyArchiving_2eproto[8]);
}
#if !defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912)
const int ThemePresetsArchive::kExtensionFieldNumber;
#endif
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TST::ThemePresetsArchive >, 11, false>
  ThemePresetsArchive::extension(kExtensionFieldNumber, ::TST::ThemePresetsArchive::default_instance(), nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace TST
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TST::Deprecated_TableStrokeArchive*
Arena::CreateMaybeMessage< ::TST::Deprecated_TableStrokeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::Deprecated_TableStrokeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CellStylePropertiesArchive*
Arena::CreateMaybeMessage< ::TST::CellStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CellStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::Deprecated_StrokePresetDataArchive*
Arena::CreateMaybeMessage< ::TST::Deprecated_StrokePresetDataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::Deprecated_StrokePresetDataArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokePresetDataArchive*
Arena::CreateMaybeMessage< ::TST::StrokePresetDataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokePresetDataArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokePresetListArchive*
Arena::CreateMaybeMessage< ::TST::StrokePresetListArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokePresetListArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableStylePropertiesArchive*
Arena::CreateMaybeMessage< ::TST::TableStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableStylePresetArchive*
Arena::CreateMaybeMessage< ::TST::TableStylePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableStylePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableStrokePresetArchive*
Arena::CreateMaybeMessage< ::TST::TableStrokePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableStrokePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ThemePresetsArchive*
Arena::CreateMaybeMessage< ::TST::ThemePresetsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ThemePresetsArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
