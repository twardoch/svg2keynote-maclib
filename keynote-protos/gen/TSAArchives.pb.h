// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSAArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSAArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSAArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TSDArchives.pb.h"
#include "TSDCommandArchives.pb.h"
#include "TSKArchives.pb.h"
#include "TSPMessages.pb.h"
#include "TSWPArchives.pb.h"
#include "TSWPCommandArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSTArchives.pb.h"
#include "TSCEArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSAArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSAArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSAArchives_2eproto;
namespace TSA {
class AddCustomFormatCommandArchive;
struct AddCustomFormatCommandArchiveDefaultTypeInternal;
extern AddCustomFormatCommandArchiveDefaultTypeInternal _AddCustomFormatCommandArchive_default_instance_;
class CaptionInfoArchive;
struct CaptionInfoArchiveDefaultTypeInternal;
extern CaptionInfoArchiveDefaultTypeInternal _CaptionInfoArchive_default_instance_;
class CaptionPlacementArchive;
struct CaptionPlacementArchiveDefaultTypeInternal;
extern CaptionPlacementArchiveDefaultTypeInternal _CaptionPlacementArchive_default_instance_;
class ChangeDocumentLocaleCommandArchive;
struct ChangeDocumentLocaleCommandArchiveDefaultTypeInternal;
extern ChangeDocumentLocaleCommandArchiveDefaultTypeInternal _ChangeDocumentLocaleCommandArchive_default_instance_;
class CollaboratorGalleryItemCursor;
struct CollaboratorGalleryItemCursorDefaultTypeInternal;
extern CollaboratorGalleryItemCursorDefaultTypeInternal _CollaboratorGalleryItemCursor_default_instance_;
class DocumentArchive;
struct DocumentArchiveDefaultTypeInternal;
extern DocumentArchiveDefaultTypeInternal _DocumentArchive_default_instance_;
class FunctionBrowserStateArchive;
struct FunctionBrowserStateArchiveDefaultTypeInternal;
extern FunctionBrowserStateArchiveDefaultTypeInternal _FunctionBrowserStateArchive_default_instance_;
class GalleryInfo;
struct GalleryInfoDefaultTypeInternal;
extern GalleryInfoDefaultTypeInternal _GalleryInfo_default_instance_;
class GalleryInfoInsertItemsCommandArchive;
struct GalleryInfoInsertItemsCommandArchiveDefaultTypeInternal;
extern GalleryInfoInsertItemsCommandArchiveDefaultTypeInternal _GalleryInfoInsertItemsCommandArchive_default_instance_;
class GalleryInfoRemoveItemsCommandArchive;
struct GalleryInfoRemoveItemsCommandArchiveDefaultTypeInternal;
extern GalleryInfoRemoveItemsCommandArchiveDefaultTypeInternal _GalleryInfoRemoveItemsCommandArchive_default_instance_;
class GalleryInfoSetValueCommandArchive;
struct GalleryInfoSetValueCommandArchiveDefaultTypeInternal;
extern GalleryInfoSetValueCommandArchiveDefaultTypeInternal _GalleryInfoSetValueCommandArchive_default_instance_;
class GalleryInfoSetValueCommandArchive_PropertyValue;
struct GalleryInfoSetValueCommandArchive_PropertyValueDefaultTypeInternal;
extern GalleryInfoSetValueCommandArchive_PropertyValueDefaultTypeInternal _GalleryInfoSetValueCommandArchive_PropertyValue_default_instance_;
class GalleryItem;
struct GalleryItemDefaultTypeInternal;
extern GalleryItemDefaultTypeInternal _GalleryItem_default_instance_;
class GalleryItemSelection;
struct GalleryItemSelectionDefaultTypeInternal;
extern GalleryItemSelectionDefaultTypeInternal _GalleryItemSelection_default_instance_;
class GalleryItemSelectionTransformer;
struct GalleryItemSelectionTransformerDefaultTypeInternal;
extern GalleryItemSelectionTransformerDefaultTypeInternal _GalleryItemSelectionTransformer_default_instance_;
class GalleryItemSelectionTransformerHelper;
struct GalleryItemSelectionTransformerHelperDefaultTypeInternal;
extern GalleryItemSelectionTransformerHelperDefaultTypeInternal _GalleryItemSelectionTransformerHelper_default_instance_;
class GalleryItemSetGeometryCommand;
struct GalleryItemSetGeometryCommandDefaultTypeInternal;
extern GalleryItemSetGeometryCommandDefaultTypeInternal _GalleryItemSetGeometryCommand_default_instance_;
class GalleryItemSetValueCommand;
struct GalleryItemSetValueCommandDefaultTypeInternal;
extern GalleryItemSetValueCommandDefaultTypeInternal _GalleryItemSetValueCommand_default_instance_;
class GalleryItemSetValueCommand_PropertyValue;
struct GalleryItemSetValueCommand_PropertyValueDefaultTypeInternal;
extern GalleryItemSetValueCommand_PropertyValueDefaultTypeInternal _GalleryItemSetValueCommand_PropertyValue_default_instance_;
class GallerySelectionTransformer;
struct GallerySelectionTransformerDefaultTypeInternal;
extern GallerySelectionTransformerDefaultTypeInternal _GallerySelectionTransformer_default_instance_;
class InducedVerifyObjectsWithServerCommandArchive;
struct InducedVerifyObjectsWithServerCommandArchiveDefaultTypeInternal;
extern InducedVerifyObjectsWithServerCommandArchiveDefaultTypeInternal _InducedVerifyObjectsWithServerCommandArchive_default_instance_;
class InducedVerifyTransformHistoryWithServerCommandArchive;
struct InducedVerifyTransformHistoryWithServerCommandArchiveDefaultTypeInternal;
extern InducedVerifyTransformHistoryWithServerCommandArchiveDefaultTypeInternal _InducedVerifyTransformHistoryWithServerCommandArchive_default_instance_;
class NeedsMediaCompatibilityUpgradeCommandArchive;
struct NeedsMediaCompatibilityUpgradeCommandArchiveDefaultTypeInternal;
extern NeedsMediaCompatibilityUpgradeCommandArchiveDefaultTypeInternal _NeedsMediaCompatibilityUpgradeCommandArchive_default_instance_;
class PropagatePresetCommandArchive;
struct PropagatePresetCommandArchiveDefaultTypeInternal;
extern PropagatePresetCommandArchiveDefaultTypeInternal _PropagatePresetCommandArchive_default_instance_;
class RemoteDataChangeCommandArchive;
struct RemoteDataChangeCommandArchiveDefaultTypeInternal;
extern RemoteDataChangeCommandArchiveDefaultTypeInternal _RemoteDataChangeCommandArchive_default_instance_;
class ReplaceCustomFormatCommandArchive;
struct ReplaceCustomFormatCommandArchiveDefaultTypeInternal;
extern ReplaceCustomFormatCommandArchiveDefaultTypeInternal _ReplaceCustomFormatCommandArchive_default_instance_;
class ShortcutCommandArchive;
struct ShortcutCommandArchiveDefaultTypeInternal;
extern ShortcutCommandArchiveDefaultTypeInternal _ShortcutCommandArchive_default_instance_;
class ShortcutControllerArchive;
struct ShortcutControllerArchiveDefaultTypeInternal;
extern ShortcutControllerArchiveDefaultTypeInternal _ShortcutControllerArchive_default_instance_;
class ShortcutControllerArchive_ShortcutMapEntry;
struct ShortcutControllerArchive_ShortcutMapEntryDefaultTypeInternal;
extern ShortcutControllerArchive_ShortcutMapEntryDefaultTypeInternal _ShortcutControllerArchive_ShortcutMapEntry_default_instance_;
class StyleUpdatePropertyMapCommandArchive;
struct StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal;
extern StyleUpdatePropertyMapCommandArchiveDefaultTypeInternal _StyleUpdatePropertyMapCommandArchive_default_instance_;
class ThemePresetsArchive;
struct ThemePresetsArchiveDefaultTypeInternal;
extern ThemePresetsArchiveDefaultTypeInternal _ThemePresetsArchive_default_instance_;
class TitlePlacementCommandArchive;
struct TitlePlacementCommandArchiveDefaultTypeInternal;
extern TitlePlacementCommandArchiveDefaultTypeInternal _TitlePlacementCommandArchive_default_instance_;
class UpdateCustomFormatCommandArchive;
struct UpdateCustomFormatCommandArchiveDefaultTypeInternal;
extern UpdateCustomFormatCommandArchiveDefaultTypeInternal _UpdateCustomFormatCommandArchive_default_instance_;
class WebVideoInfo;
struct WebVideoInfoDefaultTypeInternal;
extern WebVideoInfoDefaultTypeInternal _WebVideoInfo_default_instance_;
}  // namespace TSA
PROTOBUF_NAMESPACE_OPEN
template<> ::TSA::AddCustomFormatCommandArchive* Arena::CreateMaybeMessage<::TSA::AddCustomFormatCommandArchive>(Arena*);
template<> ::TSA::CaptionInfoArchive* Arena::CreateMaybeMessage<::TSA::CaptionInfoArchive>(Arena*);
template<> ::TSA::CaptionPlacementArchive* Arena::CreateMaybeMessage<::TSA::CaptionPlacementArchive>(Arena*);
template<> ::TSA::ChangeDocumentLocaleCommandArchive* Arena::CreateMaybeMessage<::TSA::ChangeDocumentLocaleCommandArchive>(Arena*);
template<> ::TSA::CollaboratorGalleryItemCursor* Arena::CreateMaybeMessage<::TSA::CollaboratorGalleryItemCursor>(Arena*);
template<> ::TSA::DocumentArchive* Arena::CreateMaybeMessage<::TSA::DocumentArchive>(Arena*);
template<> ::TSA::FunctionBrowserStateArchive* Arena::CreateMaybeMessage<::TSA::FunctionBrowserStateArchive>(Arena*);
template<> ::TSA::GalleryInfo* Arena::CreateMaybeMessage<::TSA::GalleryInfo>(Arena*);
template<> ::TSA::GalleryInfoInsertItemsCommandArchive* Arena::CreateMaybeMessage<::TSA::GalleryInfoInsertItemsCommandArchive>(Arena*);
template<> ::TSA::GalleryInfoRemoveItemsCommandArchive* Arena::CreateMaybeMessage<::TSA::GalleryInfoRemoveItemsCommandArchive>(Arena*);
template<> ::TSA::GalleryInfoSetValueCommandArchive* Arena::CreateMaybeMessage<::TSA::GalleryInfoSetValueCommandArchive>(Arena*);
template<> ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* Arena::CreateMaybeMessage<::TSA::GalleryInfoSetValueCommandArchive_PropertyValue>(Arena*);
template<> ::TSA::GalleryItem* Arena::CreateMaybeMessage<::TSA::GalleryItem>(Arena*);
template<> ::TSA::GalleryItemSelection* Arena::CreateMaybeMessage<::TSA::GalleryItemSelection>(Arena*);
template<> ::TSA::GalleryItemSelectionTransformer* Arena::CreateMaybeMessage<::TSA::GalleryItemSelectionTransformer>(Arena*);
template<> ::TSA::GalleryItemSelectionTransformerHelper* Arena::CreateMaybeMessage<::TSA::GalleryItemSelectionTransformerHelper>(Arena*);
template<> ::TSA::GalleryItemSetGeometryCommand* Arena::CreateMaybeMessage<::TSA::GalleryItemSetGeometryCommand>(Arena*);
template<> ::TSA::GalleryItemSetValueCommand* Arena::CreateMaybeMessage<::TSA::GalleryItemSetValueCommand>(Arena*);
template<> ::TSA::GalleryItemSetValueCommand_PropertyValue* Arena::CreateMaybeMessage<::TSA::GalleryItemSetValueCommand_PropertyValue>(Arena*);
template<> ::TSA::GallerySelectionTransformer* Arena::CreateMaybeMessage<::TSA::GallerySelectionTransformer>(Arena*);
template<> ::TSA::InducedVerifyObjectsWithServerCommandArchive* Arena::CreateMaybeMessage<::TSA::InducedVerifyObjectsWithServerCommandArchive>(Arena*);
template<> ::TSA::InducedVerifyTransformHistoryWithServerCommandArchive* Arena::CreateMaybeMessage<::TSA::InducedVerifyTransformHistoryWithServerCommandArchive>(Arena*);
template<> ::TSA::NeedsMediaCompatibilityUpgradeCommandArchive* Arena::CreateMaybeMessage<::TSA::NeedsMediaCompatibilityUpgradeCommandArchive>(Arena*);
template<> ::TSA::PropagatePresetCommandArchive* Arena::CreateMaybeMessage<::TSA::PropagatePresetCommandArchive>(Arena*);
template<> ::TSA::RemoteDataChangeCommandArchive* Arena::CreateMaybeMessage<::TSA::RemoteDataChangeCommandArchive>(Arena*);
template<> ::TSA::ReplaceCustomFormatCommandArchive* Arena::CreateMaybeMessage<::TSA::ReplaceCustomFormatCommandArchive>(Arena*);
template<> ::TSA::ShortcutCommandArchive* Arena::CreateMaybeMessage<::TSA::ShortcutCommandArchive>(Arena*);
template<> ::TSA::ShortcutControllerArchive* Arena::CreateMaybeMessage<::TSA::ShortcutControllerArchive>(Arena*);
template<> ::TSA::ShortcutControllerArchive_ShortcutMapEntry* Arena::CreateMaybeMessage<::TSA::ShortcutControllerArchive_ShortcutMapEntry>(Arena*);
template<> ::TSA::StyleUpdatePropertyMapCommandArchive* Arena::CreateMaybeMessage<::TSA::StyleUpdatePropertyMapCommandArchive>(Arena*);
template<> ::TSA::ThemePresetsArchive* Arena::CreateMaybeMessage<::TSA::ThemePresetsArchive>(Arena*);
template<> ::TSA::TitlePlacementCommandArchive* Arena::CreateMaybeMessage<::TSA::TitlePlacementCommandArchive>(Arena*);
template<> ::TSA::UpdateCustomFormatCommandArchive* Arena::CreateMaybeMessage<::TSA::UpdateCustomFormatCommandArchive>(Arena*);
template<> ::TSA::WebVideoInfo* Arena::CreateMaybeMessage<::TSA::WebVideoInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSA {

enum GalleryInfoCaptionMode : int {
  GalleryInfoCaptionModeNone = 0,
  GalleryInfoCaptionModePerImage = 1,
  GalleryInfoCaptionModeAllImages = 2
};
bool GalleryInfoCaptionMode_IsValid(int value);
constexpr GalleryInfoCaptionMode GalleryInfoCaptionMode_MIN = GalleryInfoCaptionModeNone;
constexpr GalleryInfoCaptionMode GalleryInfoCaptionMode_MAX = GalleryInfoCaptionModeAllImages;
constexpr int GalleryInfoCaptionMode_ARRAYSIZE = GalleryInfoCaptionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GalleryInfoCaptionMode_descriptor();
template<typename T>
inline const std::string& GalleryInfoCaptionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GalleryInfoCaptionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GalleryInfoCaptionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GalleryInfoCaptionMode_descriptor(), enum_t_value);
}
inline bool GalleryInfoCaptionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GalleryInfoCaptionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GalleryInfoCaptionMode>(
    GalleryInfoCaptionMode_descriptor(), name, value);
}
enum GalleryInfoProperty : int {
  GalleryInfoCaptionProperty = 0
};
bool GalleryInfoProperty_IsValid(int value);
constexpr GalleryInfoProperty GalleryInfoProperty_MIN = GalleryInfoCaptionProperty;
constexpr GalleryInfoProperty GalleryInfoProperty_MAX = GalleryInfoCaptionProperty;
constexpr int GalleryInfoProperty_ARRAYSIZE = GalleryInfoProperty_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GalleryInfoProperty_descriptor();
template<typename T>
inline const std::string& GalleryInfoProperty_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GalleryInfoProperty>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GalleryInfoProperty_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GalleryInfoProperty_descriptor(), enum_t_value);
}
inline bool GalleryInfoProperty_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GalleryInfoProperty* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GalleryInfoProperty>(
    GalleryInfoProperty_descriptor(), name, value);
}
enum GalleryCaptionMode : int {
  GalleryCaptionModeNone = 0,
  GalleryCaptionModePerImage = 1,
  GalleryCaptionModeAllImages = 2
};
bool GalleryCaptionMode_IsValid(int value);
constexpr GalleryCaptionMode GalleryCaptionMode_MIN = GalleryCaptionModeNone;
constexpr GalleryCaptionMode GalleryCaptionMode_MAX = GalleryCaptionModeAllImages;
constexpr int GalleryCaptionMode_ARRAYSIZE = GalleryCaptionMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GalleryCaptionMode_descriptor();
template<typename T>
inline const std::string& GalleryCaptionMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GalleryCaptionMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GalleryCaptionMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GalleryCaptionMode_descriptor(), enum_t_value);
}
inline bool GalleryCaptionMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GalleryCaptionMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GalleryCaptionMode>(
    GalleryCaptionMode_descriptor(), name, value);
}
enum GalleryItemProperty : int {
  GalleryItemPropertyImageData = 0,
  GalleryItemPropertyThumbnailImageData = 1,
  GalleryItemPropertyAccessibilityDescription = 2
};
bool GalleryItemProperty_IsValid(int value);
constexpr GalleryItemProperty GalleryItemProperty_MIN = GalleryItemPropertyImageData;
constexpr GalleryItemProperty GalleryItemProperty_MAX = GalleryItemPropertyAccessibilityDescription;
constexpr int GalleryItemProperty_ARRAYSIZE = GalleryItemProperty_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GalleryItemProperty_descriptor();
template<typename T>
inline const std::string& GalleryItemProperty_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GalleryItemProperty>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GalleryItemProperty_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GalleryItemProperty_descriptor(), enum_t_value);
}
inline bool GalleryItemProperty_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GalleryItemProperty* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GalleryItemProperty>(
    GalleryItemProperty_descriptor(), name, value);
}
// ===================================================================

class DocumentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.DocumentArchive) */ {
 public:
  inline DocumentArchive() : DocumentArchive(nullptr) {}
  ~DocumentArchive() override;
  explicit PROTOBUF_CONSTEXPR DocumentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DocumentArchive(const DocumentArchive& from);
  DocumentArchive(DocumentArchive&& from) noexcept
    : DocumentArchive() {
    *this = ::std::move(from);
  }

  inline DocumentArchive& operator=(const DocumentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline DocumentArchive& operator=(DocumentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DocumentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const DocumentArchive* internal_default_instance() {
    return reinterpret_cast<const DocumentArchive*>(
               &_DocumentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DocumentArchive& a, DocumentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(DocumentArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DocumentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DocumentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DocumentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DocumentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DocumentArchive& from) {
    DocumentArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DocumentArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.DocumentArchive";
  }
  protected:
  explicit DocumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextPresetDisplayItemsFieldNumber = 2,
    kDocumentLanguageFieldNumber = 3,
    kTemplateIdentifierFieldNumber = 9,
    kSuperFieldNumber = 1,
    kCalculationEngineFieldNumber = 4,
    kViewStateFieldNumber = 5,
    kFunctionBrowserStateFieldNumber = 6,
    kTablesCustomFormatListFieldNumber = 7,
    kShortcutControllerFieldNumber = 10,
    kAnnotationCacheDeprecatedFieldNumber = 11,
    kCustomFormatListFieldNumber = 12,
    kAnnotationCacheDeprecated2FieldNumber = 13,
    kNeedsMediaCompatibilityUpgradeFieldNumber = 8,
    kCollaborativeMediaCompatibilityUpgradeDidFailFieldNumber = 14,
    kCanUseHevcFieldNumber = 15,
    kIsContentSourceFieldNumber = 16,
  };
  // repeated .TSWP.TextPresetDisplayItemArchive text_preset_display_items = 2;
  int text_preset_display_items_size() const;
  private:
  int _internal_text_preset_display_items_size() const;
  public:
  void clear_text_preset_display_items();
  ::TSWP::TextPresetDisplayItemArchive* mutable_text_preset_display_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TextPresetDisplayItemArchive >*
      mutable_text_preset_display_items();
  private:
  const ::TSWP::TextPresetDisplayItemArchive& _internal_text_preset_display_items(int index) const;
  ::TSWP::TextPresetDisplayItemArchive* _internal_add_text_preset_display_items();
  public:
  const ::TSWP::TextPresetDisplayItemArchive& text_preset_display_items(int index) const;
  ::TSWP::TextPresetDisplayItemArchive* add_text_preset_display_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TextPresetDisplayItemArchive >&
      text_preset_display_items() const;

  // optional string document_language = 3;
  bool has_document_language() const;
  private:
  bool _internal_has_document_language() const;
  public:
  void clear_document_language();
  const std::string& document_language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_document_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_document_language();
  PROTOBUF_NODISCARD std::string* release_document_language();
  void set_allocated_document_language(std::string* document_language);
  private:
  const std::string& _internal_document_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_document_language(const std::string& value);
  std::string* _internal_mutable_document_language();
  public:

  // optional string template_identifier = 9;
  bool has_template_identifier() const;
  private:
  bool _internal_has_template_identifier() const;
  public:
  void clear_template_identifier();
  const std::string& template_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_template_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_template_identifier();
  PROTOBUF_NODISCARD std::string* release_template_identifier();
  void set_allocated_template_identifier(std::string* template_identifier);
  private:
  const std::string& _internal_template_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_template_identifier(const std::string& value);
  std::string* _internal_mutable_template_identifier();
  public:

  // required .TSK.DocumentArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::DocumentArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::DocumentArchive* release_super();
  ::TSK::DocumentArchive* mutable_super();
  void set_allocated_super(::TSK::DocumentArchive* super);
  private:
  const ::TSK::DocumentArchive& _internal_super() const;
  ::TSK::DocumentArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::DocumentArchive* super);
  ::TSK::DocumentArchive* unsafe_arena_release_super();

  // optional .TSP.Reference calculation_engine = 4;
  bool has_calculation_engine() const;
  private:
  bool _internal_has_calculation_engine() const;
  public:
  void clear_calculation_engine();
  const ::TSP::Reference& calculation_engine() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_calculation_engine();
  ::TSP::Reference* mutable_calculation_engine();
  void set_allocated_calculation_engine(::TSP::Reference* calculation_engine);
  private:
  const ::TSP::Reference& _internal_calculation_engine() const;
  ::TSP::Reference* _internal_mutable_calculation_engine();
  public:
  void unsafe_arena_set_allocated_calculation_engine(
      ::TSP::Reference* calculation_engine);
  ::TSP::Reference* unsafe_arena_release_calculation_engine();

  // optional .TSP.Reference view_state = 5;
  bool has_view_state() const;
  private:
  bool _internal_has_view_state() const;
  public:
  void clear_view_state();
  const ::TSP::Reference& view_state() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_view_state();
  ::TSP::Reference* mutable_view_state();
  void set_allocated_view_state(::TSP::Reference* view_state);
  private:
  const ::TSP::Reference& _internal_view_state() const;
  ::TSP::Reference* _internal_mutable_view_state();
  public:
  void unsafe_arena_set_allocated_view_state(
      ::TSP::Reference* view_state);
  ::TSP::Reference* unsafe_arena_release_view_state();

  // optional .TSP.Reference function_browser_state = 6;
  bool has_function_browser_state() const;
  private:
  bool _internal_has_function_browser_state() const;
  public:
  void clear_function_browser_state();
  const ::TSP::Reference& function_browser_state() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_function_browser_state();
  ::TSP::Reference* mutable_function_browser_state();
  void set_allocated_function_browser_state(::TSP::Reference* function_browser_state);
  private:
  const ::TSP::Reference& _internal_function_browser_state() const;
  ::TSP::Reference* _internal_mutable_function_browser_state();
  public:
  void unsafe_arena_set_allocated_function_browser_state(
      ::TSP::Reference* function_browser_state);
  ::TSP::Reference* unsafe_arena_release_function_browser_state();

  // optional .TSP.Reference tables_custom_format_list = 7;
  bool has_tables_custom_format_list() const;
  private:
  bool _internal_has_tables_custom_format_list() const;
  public:
  void clear_tables_custom_format_list();
  const ::TSP::Reference& tables_custom_format_list() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_tables_custom_format_list();
  ::TSP::Reference* mutable_tables_custom_format_list();
  void set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list);
  private:
  const ::TSP::Reference& _internal_tables_custom_format_list() const;
  ::TSP::Reference* _internal_mutable_tables_custom_format_list();
  public:
  void unsafe_arena_set_allocated_tables_custom_format_list(
      ::TSP::Reference* tables_custom_format_list);
  ::TSP::Reference* unsafe_arena_release_tables_custom_format_list();

  // optional .TSP.Reference shortcut_controller = 10;
  bool has_shortcut_controller() const;
  private:
  bool _internal_has_shortcut_controller() const;
  public:
  void clear_shortcut_controller();
  const ::TSP::Reference& shortcut_controller() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_shortcut_controller();
  ::TSP::Reference* mutable_shortcut_controller();
  void set_allocated_shortcut_controller(::TSP::Reference* shortcut_controller);
  private:
  const ::TSP::Reference& _internal_shortcut_controller() const;
  ::TSP::Reference* _internal_mutable_shortcut_controller();
  public:
  void unsafe_arena_set_allocated_shortcut_controller(
      ::TSP::Reference* shortcut_controller);
  ::TSP::Reference* unsafe_arena_release_shortcut_controller();

  // optional .TSP.Reference annotation_cache_deprecated = 11;
  bool has_annotation_cache_deprecated() const;
  private:
  bool _internal_has_annotation_cache_deprecated() const;
  public:
  void clear_annotation_cache_deprecated();
  const ::TSP::Reference& annotation_cache_deprecated() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_annotation_cache_deprecated();
  ::TSP::Reference* mutable_annotation_cache_deprecated();
  void set_allocated_annotation_cache_deprecated(::TSP::Reference* annotation_cache_deprecated);
  private:
  const ::TSP::Reference& _internal_annotation_cache_deprecated() const;
  ::TSP::Reference* _internal_mutable_annotation_cache_deprecated();
  public:
  void unsafe_arena_set_allocated_annotation_cache_deprecated(
      ::TSP::Reference* annotation_cache_deprecated);
  ::TSP::Reference* unsafe_arena_release_annotation_cache_deprecated();

  // optional .TSP.Reference custom_format_list = 12;
  bool has_custom_format_list() const;
  private:
  bool _internal_has_custom_format_list() const;
  public:
  void clear_custom_format_list();
  const ::TSP::Reference& custom_format_list() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_custom_format_list();
  ::TSP::Reference* mutable_custom_format_list();
  void set_allocated_custom_format_list(::TSP::Reference* custom_format_list);
  private:
  const ::TSP::Reference& _internal_custom_format_list() const;
  ::TSP::Reference* _internal_mutable_custom_format_list();
  public:
  void unsafe_arena_set_allocated_custom_format_list(
      ::TSP::Reference* custom_format_list);
  ::TSP::Reference* unsafe_arena_release_custom_format_list();

  // optional .TSP.Reference annotation_cache_deprecated_2 = 13;
  bool has_annotation_cache_deprecated_2() const;
  private:
  bool _internal_has_annotation_cache_deprecated_2() const;
  public:
  void clear_annotation_cache_deprecated_2();
  const ::TSP::Reference& annotation_cache_deprecated_2() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_annotation_cache_deprecated_2();
  ::TSP::Reference* mutable_annotation_cache_deprecated_2();
  void set_allocated_annotation_cache_deprecated_2(::TSP::Reference* annotation_cache_deprecated_2);
  private:
  const ::TSP::Reference& _internal_annotation_cache_deprecated_2() const;
  ::TSP::Reference* _internal_mutable_annotation_cache_deprecated_2();
  public:
  void unsafe_arena_set_allocated_annotation_cache_deprecated_2(
      ::TSP::Reference* annotation_cache_deprecated_2);
  ::TSP::Reference* unsafe_arena_release_annotation_cache_deprecated_2();

  // optional bool needs_media_compatibility_upgrade = 8;
  bool has_needs_media_compatibility_upgrade() const;
  private:
  bool _internal_has_needs_media_compatibility_upgrade() const;
  public:
  void clear_needs_media_compatibility_upgrade();
  bool needs_media_compatibility_upgrade() const;
  void set_needs_media_compatibility_upgrade(bool value);
  private:
  bool _internal_needs_media_compatibility_upgrade() const;
  void _internal_set_needs_media_compatibility_upgrade(bool value);
  public:

  // optional bool collaborative_media_compatibility_upgrade_did_fail = 14;
  bool has_collaborative_media_compatibility_upgrade_did_fail() const;
  private:
  bool _internal_has_collaborative_media_compatibility_upgrade_did_fail() const;
  public:
  void clear_collaborative_media_compatibility_upgrade_did_fail();
  bool collaborative_media_compatibility_upgrade_did_fail() const;
  void set_collaborative_media_compatibility_upgrade_did_fail(bool value);
  private:
  bool _internal_collaborative_media_compatibility_upgrade_did_fail() const;
  void _internal_set_collaborative_media_compatibility_upgrade_did_fail(bool value);
  public:

  // optional bool can_use_hevc = 15;
  bool has_can_use_hevc() const;
  private:
  bool _internal_has_can_use_hevc() const;
  public:
  void clear_can_use_hevc();
  bool can_use_hevc() const;
  void set_can_use_hevc(bool value);
  private:
  bool _internal_can_use_hevc() const;
  void _internal_set_can_use_hevc(bool value);
  public:

  // optional bool is_content_source = 16;
  bool has_is_content_source() const;
  private:
  bool _internal_has_is_content_source() const;
  public:
  void clear_is_content_source();
  bool is_content_source() const;
  void set_is_content_source(bool value);
  private:
  bool _internal_is_content_source() const;
  void _internal_set_is_content_source(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.DocumentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TextPresetDisplayItemArchive > text_preset_display_items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr document_language_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr template_identifier_;
    ::TSK::DocumentArchive* super_;
    ::TSP::Reference* calculation_engine_;
    ::TSP::Reference* view_state_;
    ::TSP::Reference* function_browser_state_;
    ::TSP::Reference* tables_custom_format_list_;
    ::TSP::Reference* shortcut_controller_;
    ::TSP::Reference* annotation_cache_deprecated_;
    ::TSP::Reference* custom_format_list_;
    ::TSP::Reference* annotation_cache_deprecated_2_;
    bool needs_media_compatibility_upgrade_;
    bool collaborative_media_compatibility_upgrade_did_fail_;
    bool can_use_hevc_;
    bool is_content_source_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class FunctionBrowserStateArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.FunctionBrowserStateArchive) */ {
 public:
  inline FunctionBrowserStateArchive() : FunctionBrowserStateArchive(nullptr) {}
  ~FunctionBrowserStateArchive() override;
  explicit PROTOBUF_CONSTEXPR FunctionBrowserStateArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionBrowserStateArchive(const FunctionBrowserStateArchive& from);
  FunctionBrowserStateArchive(FunctionBrowserStateArchive&& from) noexcept
    : FunctionBrowserStateArchive() {
    *this = ::std::move(from);
  }

  inline FunctionBrowserStateArchive& operator=(const FunctionBrowserStateArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionBrowserStateArchive& operator=(FunctionBrowserStateArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionBrowserStateArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionBrowserStateArchive* internal_default_instance() {
    return reinterpret_cast<const FunctionBrowserStateArchive*>(
               &_FunctionBrowserStateArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FunctionBrowserStateArchive& a, FunctionBrowserStateArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionBrowserStateArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionBrowserStateArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionBrowserStateArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionBrowserStateArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionBrowserStateArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FunctionBrowserStateArchive& from) {
    FunctionBrowserStateArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionBrowserStateArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.FunctionBrowserStateArchive";
  }
  protected:
  explicit FunctionBrowserStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecentFunctionsFieldNumber = 1,
    kBackFunctionsFieldNumber = 2,
    kForwardFunctionsFieldNumber = 3,
    kCurrentFunctionFieldNumber = 4,
  };
  // repeated uint32 recent_functions = 1;
  int recent_functions_size() const;
  private:
  int _internal_recent_functions_size() const;
  public:
  void clear_recent_functions();
  private:
  uint32_t _internal_recent_functions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_recent_functions() const;
  void _internal_add_recent_functions(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_recent_functions();
  public:
  uint32_t recent_functions(int index) const;
  void set_recent_functions(int index, uint32_t value);
  void add_recent_functions(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      recent_functions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_recent_functions();

  // repeated uint32 back_functions = 2;
  int back_functions_size() const;
  private:
  int _internal_back_functions_size() const;
  public:
  void clear_back_functions();
  private:
  uint32_t _internal_back_functions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_back_functions() const;
  void _internal_add_back_functions(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_back_functions();
  public:
  uint32_t back_functions(int index) const;
  void set_back_functions(int index, uint32_t value);
  void add_back_functions(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      back_functions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_back_functions();

  // repeated uint32 forward_functions = 3;
  int forward_functions_size() const;
  private:
  int _internal_forward_functions_size() const;
  public:
  void clear_forward_functions();
  private:
  uint32_t _internal_forward_functions(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_forward_functions() const;
  void _internal_add_forward_functions(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_forward_functions();
  public:
  uint32_t forward_functions(int index) const;
  void set_forward_functions(int index, uint32_t value);
  void add_forward_functions(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      forward_functions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_forward_functions();

  // optional uint32 current_function = 4;
  bool has_current_function() const;
  private:
  bool _internal_has_current_function() const;
  public:
  void clear_current_function();
  uint32_t current_function() const;
  void set_current_function(uint32_t value);
  private:
  uint32_t _internal_current_function() const;
  void _internal_set_current_function(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.FunctionBrowserStateArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > recent_functions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > back_functions_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > forward_functions_;
    uint32_t current_function_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class ThemePresetsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.ThemePresetsArchive) */ {
 public:
  inline ThemePresetsArchive() : ThemePresetsArchive(nullptr) {}
  ~ThemePresetsArchive() override;
  explicit PROTOBUF_CONSTEXPR ThemePresetsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemePresetsArchive(const ThemePresetsArchive& from);
  ThemePresetsArchive(ThemePresetsArchive&& from) noexcept
    : ThemePresetsArchive() {
    *this = ::std::move(from);
  }

  inline ThemePresetsArchive& operator=(const ThemePresetsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemePresetsArchive& operator=(ThemePresetsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemePresetsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemePresetsArchive* internal_default_instance() {
    return reinterpret_cast<const ThemePresetsArchive*>(
               &_ThemePresetsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ThemePresetsArchive& a, ThemePresetsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemePresetsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemePresetsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThemePresetsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThemePresetsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThemePresetsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ThemePresetsArchive& from) {
    ThemePresetsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemePresetsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.ThemePresetsArchive";
  }
  protected:
  explicit ThemePresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptionStylePresetsFieldNumber = 1,
  };
  // repeated .TSP.Reference caption_style_presets = 1;
  int caption_style_presets_size() const;
  private:
  int _internal_caption_style_presets_size() const;
  public:
  void clear_caption_style_presets();
  ::TSP::Reference* mutable_caption_style_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_caption_style_presets();
  private:
  const ::TSP::Reference& _internal_caption_style_presets(int index) const;
  ::TSP::Reference* _internal_add_caption_style_presets();
  public:
  const ::TSP::Reference& caption_style_presets(int index) const;
  ::TSP::Reference* add_caption_style_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      caption_style_presets() const;

  static const int kExtensionFieldNumber = 210;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSA::ThemePresetsArchive >, 11, false >
    extension;
  // @@protoc_insertion_point(class_scope:TSA.ThemePresetsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > caption_style_presets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class ShortcutControllerArchive_ShortcutMapEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.ShortcutControllerArchive.ShortcutMapEntry) */ {
 public:
  inline ShortcutControllerArchive_ShortcutMapEntry() : ShortcutControllerArchive_ShortcutMapEntry(nullptr) {}
  ~ShortcutControllerArchive_ShortcutMapEntry() override;
  explicit PROTOBUF_CONSTEXPR ShortcutControllerArchive_ShortcutMapEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShortcutControllerArchive_ShortcutMapEntry(const ShortcutControllerArchive_ShortcutMapEntry& from);
  ShortcutControllerArchive_ShortcutMapEntry(ShortcutControllerArchive_ShortcutMapEntry&& from) noexcept
    : ShortcutControllerArchive_ShortcutMapEntry() {
    *this = ::std::move(from);
  }

  inline ShortcutControllerArchive_ShortcutMapEntry& operator=(const ShortcutControllerArchive_ShortcutMapEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShortcutControllerArchive_ShortcutMapEntry& operator=(ShortcutControllerArchive_ShortcutMapEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShortcutControllerArchive_ShortcutMapEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShortcutControllerArchive_ShortcutMapEntry* internal_default_instance() {
    return reinterpret_cast<const ShortcutControllerArchive_ShortcutMapEntry*>(
               &_ShortcutControllerArchive_ShortcutMapEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ShortcutControllerArchive_ShortcutMapEntry& a, ShortcutControllerArchive_ShortcutMapEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ShortcutControllerArchive_ShortcutMapEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShortcutControllerArchive_ShortcutMapEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShortcutControllerArchive_ShortcutMapEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShortcutControllerArchive_ShortcutMapEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShortcutControllerArchive_ShortcutMapEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShortcutControllerArchive_ShortcutMapEntry& from) {
    ShortcutControllerArchive_ShortcutMapEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShortcutControllerArchive_ShortcutMapEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.ShortcutControllerArchive.ShortcutMapEntry";
  }
  protected:
  explicit ShortcutControllerArchive_ShortcutMapEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShortcutFieldNumber = 1,
    kStyleFieldNumber = 2,
  };
  // required string shortcut = 1;
  bool has_shortcut() const;
  private:
  bool _internal_has_shortcut() const;
  public:
  void clear_shortcut();
  const std::string& shortcut() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shortcut(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shortcut();
  PROTOBUF_NODISCARD std::string* release_shortcut();
  void set_allocated_shortcut(std::string* shortcut);
  private:
  const std::string& _internal_shortcut() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shortcut(const std::string& value);
  std::string* _internal_mutable_shortcut();
  public:

  // required .TSP.Reference style = 2;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const ::TSP::Reference& style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_style();
  ::TSP::Reference* mutable_style();
  void set_allocated_style(::TSP::Reference* style);
  private:
  const ::TSP::Reference& _internal_style() const;
  ::TSP::Reference* _internal_mutable_style();
  public:
  void unsafe_arena_set_allocated_style(
      ::TSP::Reference* style);
  ::TSP::Reference* unsafe_arena_release_style();

  // @@protoc_insertion_point(class_scope:TSA.ShortcutControllerArchive.ShortcutMapEntry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shortcut_;
    ::TSP::Reference* style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class ShortcutControllerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.ShortcutControllerArchive) */ {
 public:
  inline ShortcutControllerArchive() : ShortcutControllerArchive(nullptr) {}
  ~ShortcutControllerArchive() override;
  explicit PROTOBUF_CONSTEXPR ShortcutControllerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShortcutControllerArchive(const ShortcutControllerArchive& from);
  ShortcutControllerArchive(ShortcutControllerArchive&& from) noexcept
    : ShortcutControllerArchive() {
    *this = ::std::move(from);
  }

  inline ShortcutControllerArchive& operator=(const ShortcutControllerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShortcutControllerArchive& operator=(ShortcutControllerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShortcutControllerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShortcutControllerArchive* internal_default_instance() {
    return reinterpret_cast<const ShortcutControllerArchive*>(
               &_ShortcutControllerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ShortcutControllerArchive& a, ShortcutControllerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShortcutControllerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShortcutControllerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShortcutControllerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShortcutControllerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShortcutControllerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShortcutControllerArchive& from) {
    ShortcutControllerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShortcutControllerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.ShortcutControllerArchive";
  }
  protected:
  explicit ShortcutControllerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ShortcutControllerArchive_ShortcutMapEntry ShortcutMapEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .TSA.ShortcutControllerArchive.ShortcutMapEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::TSA::ShortcutControllerArchive_ShortcutMapEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSA::ShortcutControllerArchive_ShortcutMapEntry >*
      mutable_entries();
  private:
  const ::TSA::ShortcutControllerArchive_ShortcutMapEntry& _internal_entries(int index) const;
  ::TSA::ShortcutControllerArchive_ShortcutMapEntry* _internal_add_entries();
  public:
  const ::TSA::ShortcutControllerArchive_ShortcutMapEntry& entries(int index) const;
  ::TSA::ShortcutControllerArchive_ShortcutMapEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSA::ShortcutControllerArchive_ShortcutMapEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:TSA.ShortcutControllerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSA::ShortcutControllerArchive_ShortcutMapEntry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class PropagatePresetCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.PropagatePresetCommandArchive) */ {
 public:
  inline PropagatePresetCommandArchive() : PropagatePresetCommandArchive(nullptr) {}
  ~PropagatePresetCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR PropagatePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropagatePresetCommandArchive(const PropagatePresetCommandArchive& from);
  PropagatePresetCommandArchive(PropagatePresetCommandArchive&& from) noexcept
    : PropagatePresetCommandArchive() {
    *this = ::std::move(from);
  }

  inline PropagatePresetCommandArchive& operator=(const PropagatePresetCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropagatePresetCommandArchive& operator=(PropagatePresetCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropagatePresetCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropagatePresetCommandArchive* internal_default_instance() {
    return reinterpret_cast<const PropagatePresetCommandArchive*>(
               &_PropagatePresetCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PropagatePresetCommandArchive& a, PropagatePresetCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PropagatePresetCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropagatePresetCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropagatePresetCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropagatePresetCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropagatePresetCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropagatePresetCommandArchive& from) {
    PropagatePresetCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropagatePresetCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.PropagatePresetCommandArchive";
  }
  protected:
  explicit PropagatePresetCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPresetChangeCommandFieldNumber = 2,
    kAlwaysPreserveAppearanceFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSP.Reference preset_change_command = 2;
  bool has_preset_change_command() const;
  private:
  bool _internal_has_preset_change_command() const;
  public:
  void clear_preset_change_command();
  const ::TSP::Reference& preset_change_command() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_preset_change_command();
  ::TSP::Reference* mutable_preset_change_command();
  void set_allocated_preset_change_command(::TSP::Reference* preset_change_command);
  private:
  const ::TSP::Reference& _internal_preset_change_command() const;
  ::TSP::Reference* _internal_mutable_preset_change_command();
  public:
  void unsafe_arena_set_allocated_preset_change_command(
      ::TSP::Reference* preset_change_command);
  ::TSP::Reference* unsafe_arena_release_preset_change_command();

  // required bool always_preserve_appearance = 3;
  bool has_always_preserve_appearance() const;
  private:
  bool _internal_has_always_preserve_appearance() const;
  public:
  void clear_always_preserve_appearance();
  bool always_preserve_appearance() const;
  void set_always_preserve_appearance(bool value);
  private:
  bool _internal_always_preserve_appearance() const;
  void _internal_set_always_preserve_appearance(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.PropagatePresetCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* preset_change_command_;
    bool always_preserve_appearance_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class ShortcutCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.ShortcutCommandArchive) */ {
 public:
  inline ShortcutCommandArchive() : ShortcutCommandArchive(nullptr) {}
  ~ShortcutCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ShortcutCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShortcutCommandArchive(const ShortcutCommandArchive& from);
  ShortcutCommandArchive(ShortcutCommandArchive&& from) noexcept
    : ShortcutCommandArchive() {
    *this = ::std::move(from);
  }

  inline ShortcutCommandArchive& operator=(const ShortcutCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShortcutCommandArchive& operator=(ShortcutCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShortcutCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShortcutCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ShortcutCommandArchive*>(
               &_ShortcutCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ShortcutCommandArchive& a, ShortcutCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ShortcutCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShortcutCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShortcutCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShortcutCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ShortcutCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ShortcutCommandArchive& from) {
    ShortcutCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShortcutCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.ShortcutCommandArchive";
  }
  protected:
  explicit ShortcutCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldShortcutFieldNumber = 4,
    kNewShortcutFieldNumber = 5,
    kSuperFieldNumber = 1,
    kOldStyleFieldNumber = 2,
    kNewStyleFieldNumber = 3,
  };
  // optional string old_shortcut = 4;
  bool has_old_shortcut() const;
  private:
  bool _internal_has_old_shortcut() const;
  public:
  void clear_old_shortcut();
  const std::string& old_shortcut() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_shortcut(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_shortcut();
  PROTOBUF_NODISCARD std::string* release_old_shortcut();
  void set_allocated_old_shortcut(std::string* old_shortcut);
  private:
  const std::string& _internal_old_shortcut() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_shortcut(const std::string& value);
  std::string* _internal_mutable_old_shortcut();
  public:

  // optional string new_shortcut = 5;
  bool has_new_shortcut() const;
  private:
  bool _internal_has_new_shortcut() const;
  public:
  void clear_new_shortcut();
  const std::string& new_shortcut() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_shortcut(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_shortcut();
  PROTOBUF_NODISCARD std::string* release_new_shortcut();
  void set_allocated_new_shortcut(std::string* new_shortcut);
  private:
  const std::string& _internal_new_shortcut() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_shortcut(const std::string& value);
  std::string* _internal_mutable_new_shortcut();
  public:

  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference old_style = 2;
  bool has_old_style() const;
  private:
  bool _internal_has_old_style() const;
  public:
  void clear_old_style();
  const ::TSP::Reference& old_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_style();
  ::TSP::Reference* mutable_old_style();
  void set_allocated_old_style(::TSP::Reference* old_style);
  private:
  const ::TSP::Reference& _internal_old_style() const;
  ::TSP::Reference* _internal_mutable_old_style();
  public:
  void unsafe_arena_set_allocated_old_style(
      ::TSP::Reference* old_style);
  ::TSP::Reference* unsafe_arena_release_old_style();

  // optional .TSP.Reference new_style = 3;
  bool has_new_style() const;
  private:
  bool _internal_has_new_style() const;
  public:
  void clear_new_style();
  const ::TSP::Reference& new_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_new_style();
  ::TSP::Reference* mutable_new_style();
  void set_allocated_new_style(::TSP::Reference* new_style);
  private:
  const ::TSP::Reference& _internal_new_style() const;
  ::TSP::Reference* _internal_mutable_new_style();
  public:
  void unsafe_arena_set_allocated_new_style(
      ::TSP::Reference* new_style);
  ::TSP::Reference* unsafe_arena_release_new_style();

  // @@protoc_insertion_point(class_scope:TSA.ShortcutCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_shortcut_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_shortcut_;
    ::TSK::CommandArchive* super_;
    ::TSP::Reference* old_style_;
    ::TSP::Reference* new_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class AddCustomFormatCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.AddCustomFormatCommandArchive) */ {
 public:
  inline AddCustomFormatCommandArchive() : AddCustomFormatCommandArchive(nullptr) {}
  ~AddCustomFormatCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR AddCustomFormatCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddCustomFormatCommandArchive(const AddCustomFormatCommandArchive& from);
  AddCustomFormatCommandArchive(AddCustomFormatCommandArchive&& from) noexcept
    : AddCustomFormatCommandArchive() {
    *this = ::std::move(from);
  }

  inline AddCustomFormatCommandArchive& operator=(const AddCustomFormatCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCustomFormatCommandArchive& operator=(AddCustomFormatCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddCustomFormatCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddCustomFormatCommandArchive* internal_default_instance() {
    return reinterpret_cast<const AddCustomFormatCommandArchive*>(
               &_AddCustomFormatCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AddCustomFormatCommandArchive& a, AddCustomFormatCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCustomFormatCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCustomFormatCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddCustomFormatCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddCustomFormatCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddCustomFormatCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AddCustomFormatCommandArchive& from) {
    AddCustomFormatCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCustomFormatCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.AddCustomFormatCommandArchive";
  }
  protected:
  explicit AddCustomFormatCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCustomFormatFieldNumber = 2,
    kCustomFormatKeyFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSK.CustomFormatArchive custom_format = 2;
  bool has_custom_format() const;
  private:
  bool _internal_has_custom_format() const;
  public:
  void clear_custom_format();
  const ::TSK::CustomFormatArchive& custom_format() const;
  PROTOBUF_NODISCARD ::TSK::CustomFormatArchive* release_custom_format();
  ::TSK::CustomFormatArchive* mutable_custom_format();
  void set_allocated_custom_format(::TSK::CustomFormatArchive* custom_format);
  private:
  const ::TSK::CustomFormatArchive& _internal_custom_format() const;
  ::TSK::CustomFormatArchive* _internal_mutable_custom_format();
  public:
  void unsafe_arena_set_allocated_custom_format(
      ::TSK::CustomFormatArchive* custom_format);
  ::TSK::CustomFormatArchive* unsafe_arena_release_custom_format();

  // optional .TSP.UUID custom_format_key = 3;
  bool has_custom_format_key() const;
  private:
  bool _internal_has_custom_format_key() const;
  public:
  void clear_custom_format_key();
  const ::TSP::UUID& custom_format_key() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_custom_format_key();
  ::TSP::UUID* mutable_custom_format_key();
  void set_allocated_custom_format_key(::TSP::UUID* custom_format_key);
  private:
  const ::TSP::UUID& _internal_custom_format_key() const;
  ::TSP::UUID* _internal_mutable_custom_format_key();
  public:
  void unsafe_arena_set_allocated_custom_format_key(
      ::TSP::UUID* custom_format_key);
  ::TSP::UUID* unsafe_arena_release_custom_format_key();

  // @@protoc_insertion_point(class_scope:TSA.AddCustomFormatCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSK::CustomFormatArchive* custom_format_;
    ::TSP::UUID* custom_format_key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class UpdateCustomFormatCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.UpdateCustomFormatCommandArchive) */ {
 public:
  inline UpdateCustomFormatCommandArchive() : UpdateCustomFormatCommandArchive(nullptr) {}
  ~UpdateCustomFormatCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR UpdateCustomFormatCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateCustomFormatCommandArchive(const UpdateCustomFormatCommandArchive& from);
  UpdateCustomFormatCommandArchive(UpdateCustomFormatCommandArchive&& from) noexcept
    : UpdateCustomFormatCommandArchive() {
    *this = ::std::move(from);
  }

  inline UpdateCustomFormatCommandArchive& operator=(const UpdateCustomFormatCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCustomFormatCommandArchive& operator=(UpdateCustomFormatCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCustomFormatCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCustomFormatCommandArchive* internal_default_instance() {
    return reinterpret_cast<const UpdateCustomFormatCommandArchive*>(
               &_UpdateCustomFormatCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(UpdateCustomFormatCommandArchive& a, UpdateCustomFormatCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCustomFormatCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCustomFormatCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCustomFormatCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateCustomFormatCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateCustomFormatCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateCustomFormatCommandArchive& from) {
    UpdateCustomFormatCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCustomFormatCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.UpdateCustomFormatCommandArchive";
  }
  protected:
  explicit UpdateCustomFormatCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCustomFormatFieldNumber = 2,
    kOldCustomFormatFieldNumber = 3,
    kCustomFormatKeyFieldNumber = 4,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSK.CustomFormatArchive custom_format = 2;
  bool has_custom_format() const;
  private:
  bool _internal_has_custom_format() const;
  public:
  void clear_custom_format();
  const ::TSK::CustomFormatArchive& custom_format() const;
  PROTOBUF_NODISCARD ::TSK::CustomFormatArchive* release_custom_format();
  ::TSK::CustomFormatArchive* mutable_custom_format();
  void set_allocated_custom_format(::TSK::CustomFormatArchive* custom_format);
  private:
  const ::TSK::CustomFormatArchive& _internal_custom_format() const;
  ::TSK::CustomFormatArchive* _internal_mutable_custom_format();
  public:
  void unsafe_arena_set_allocated_custom_format(
      ::TSK::CustomFormatArchive* custom_format);
  ::TSK::CustomFormatArchive* unsafe_arena_release_custom_format();

  // optional .TSK.CustomFormatArchive old_custom_format = 3;
  bool has_old_custom_format() const;
  private:
  bool _internal_has_old_custom_format() const;
  public:
  void clear_old_custom_format();
  const ::TSK::CustomFormatArchive& old_custom_format() const;
  PROTOBUF_NODISCARD ::TSK::CustomFormatArchive* release_old_custom_format();
  ::TSK::CustomFormatArchive* mutable_old_custom_format();
  void set_allocated_old_custom_format(::TSK::CustomFormatArchive* old_custom_format);
  private:
  const ::TSK::CustomFormatArchive& _internal_old_custom_format() const;
  ::TSK::CustomFormatArchive* _internal_mutable_old_custom_format();
  public:
  void unsafe_arena_set_allocated_old_custom_format(
      ::TSK::CustomFormatArchive* old_custom_format);
  ::TSK::CustomFormatArchive* unsafe_arena_release_old_custom_format();

  // optional .TSP.UUID custom_format_key = 4;
  bool has_custom_format_key() const;
  private:
  bool _internal_has_custom_format_key() const;
  public:
  void clear_custom_format_key();
  const ::TSP::UUID& custom_format_key() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_custom_format_key();
  ::TSP::UUID* mutable_custom_format_key();
  void set_allocated_custom_format_key(::TSP::UUID* custom_format_key);
  private:
  const ::TSP::UUID& _internal_custom_format_key() const;
  ::TSP::UUID* _internal_mutable_custom_format_key();
  public:
  void unsafe_arena_set_allocated_custom_format_key(
      ::TSP::UUID* custom_format_key);
  ::TSP::UUID* unsafe_arena_release_custom_format_key();

  // @@protoc_insertion_point(class_scope:TSA.UpdateCustomFormatCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSK::CustomFormatArchive* custom_format_;
    ::TSK::CustomFormatArchive* old_custom_format_;
    ::TSP::UUID* custom_format_key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class ReplaceCustomFormatCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.ReplaceCustomFormatCommandArchive) */ {
 public:
  inline ReplaceCustomFormatCommandArchive() : ReplaceCustomFormatCommandArchive(nullptr) {}
  ~ReplaceCustomFormatCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ReplaceCustomFormatCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReplaceCustomFormatCommandArchive(const ReplaceCustomFormatCommandArchive& from);
  ReplaceCustomFormatCommandArchive(ReplaceCustomFormatCommandArchive&& from) noexcept
    : ReplaceCustomFormatCommandArchive() {
    *this = ::std::move(from);
  }

  inline ReplaceCustomFormatCommandArchive& operator=(const ReplaceCustomFormatCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaceCustomFormatCommandArchive& operator=(ReplaceCustomFormatCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReplaceCustomFormatCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReplaceCustomFormatCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ReplaceCustomFormatCommandArchive*>(
               &_ReplaceCustomFormatCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReplaceCustomFormatCommandArchive& a, ReplaceCustomFormatCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaceCustomFormatCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaceCustomFormatCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReplaceCustomFormatCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReplaceCustomFormatCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReplaceCustomFormatCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReplaceCustomFormatCommandArchive& from) {
    ReplaceCustomFormatCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaceCustomFormatCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.ReplaceCustomFormatCommandArchive";
  }
  protected:
  explicit ReplaceCustomFormatCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kCustomFormatFieldNumber = 2,
    kCustomFormatKeyFieldNumber = 3,
    kReplacementFormatFieldNumber = 4,
  };
  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSK.CustomFormatArchive custom_format = 2;
  bool has_custom_format() const;
  private:
  bool _internal_has_custom_format() const;
  public:
  void clear_custom_format();
  const ::TSK::CustomFormatArchive& custom_format() const;
  PROTOBUF_NODISCARD ::TSK::CustomFormatArchive* release_custom_format();
  ::TSK::CustomFormatArchive* mutable_custom_format();
  void set_allocated_custom_format(::TSK::CustomFormatArchive* custom_format);
  private:
  const ::TSK::CustomFormatArchive& _internal_custom_format() const;
  ::TSK::CustomFormatArchive* _internal_mutable_custom_format();
  public:
  void unsafe_arena_set_allocated_custom_format(
      ::TSK::CustomFormatArchive* custom_format);
  ::TSK::CustomFormatArchive* unsafe_arena_release_custom_format();

  // optional .TSP.UUID custom_format_key = 3;
  bool has_custom_format_key() const;
  private:
  bool _internal_has_custom_format_key() const;
  public:
  void clear_custom_format_key();
  const ::TSP::UUID& custom_format_key() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_custom_format_key();
  ::TSP::UUID* mutable_custom_format_key();
  void set_allocated_custom_format_key(::TSP::UUID* custom_format_key);
  private:
  const ::TSP::UUID& _internal_custom_format_key() const;
  ::TSP::UUID* _internal_mutable_custom_format_key();
  public:
  void unsafe_arena_set_allocated_custom_format_key(
      ::TSP::UUID* custom_format_key);
  ::TSP::UUID* unsafe_arena_release_custom_format_key();

  // optional .TSK.FormatStructArchive replacement_format = 4;
  bool has_replacement_format() const;
  private:
  bool _internal_has_replacement_format() const;
  public:
  void clear_replacement_format();
  const ::TSK::FormatStructArchive& replacement_format() const;
  PROTOBUF_NODISCARD ::TSK::FormatStructArchive* release_replacement_format();
  ::TSK::FormatStructArchive* mutable_replacement_format();
  void set_allocated_replacement_format(::TSK::FormatStructArchive* replacement_format);
  private:
  const ::TSK::FormatStructArchive& _internal_replacement_format() const;
  ::TSK::FormatStructArchive* _internal_mutable_replacement_format();
  public:
  void unsafe_arena_set_allocated_replacement_format(
      ::TSK::FormatStructArchive* replacement_format);
  ::TSK::FormatStructArchive* unsafe_arena_release_replacement_format();

  // @@protoc_insertion_point(class_scope:TSA.ReplaceCustomFormatCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSK::CustomFormatArchive* custom_format_;
    ::TSP::UUID* custom_format_key_;
    ::TSK::FormatStructArchive* replacement_format_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class NeedsMediaCompatibilityUpgradeCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.NeedsMediaCompatibilityUpgradeCommandArchive) */ {
 public:
  inline NeedsMediaCompatibilityUpgradeCommandArchive() : NeedsMediaCompatibilityUpgradeCommandArchive(nullptr) {}
  ~NeedsMediaCompatibilityUpgradeCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR NeedsMediaCompatibilityUpgradeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NeedsMediaCompatibilityUpgradeCommandArchive(const NeedsMediaCompatibilityUpgradeCommandArchive& from);
  NeedsMediaCompatibilityUpgradeCommandArchive(NeedsMediaCompatibilityUpgradeCommandArchive&& from) noexcept
    : NeedsMediaCompatibilityUpgradeCommandArchive() {
    *this = ::std::move(from);
  }

  inline NeedsMediaCompatibilityUpgradeCommandArchive& operator=(const NeedsMediaCompatibilityUpgradeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline NeedsMediaCompatibilityUpgradeCommandArchive& operator=(NeedsMediaCompatibilityUpgradeCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NeedsMediaCompatibilityUpgradeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const NeedsMediaCompatibilityUpgradeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const NeedsMediaCompatibilityUpgradeCommandArchive*>(
               &_NeedsMediaCompatibilityUpgradeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NeedsMediaCompatibilityUpgradeCommandArchive& a, NeedsMediaCompatibilityUpgradeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(NeedsMediaCompatibilityUpgradeCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NeedsMediaCompatibilityUpgradeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NeedsMediaCompatibilityUpgradeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NeedsMediaCompatibilityUpgradeCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NeedsMediaCompatibilityUpgradeCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NeedsMediaCompatibilityUpgradeCommandArchive& from) {
    NeedsMediaCompatibilityUpgradeCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeedsMediaCompatibilityUpgradeCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.NeedsMediaCompatibilityUpgradeCommandArchive";
  }
  protected:
  explicit NeedsMediaCompatibilityUpgradeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kNeedsMediaCompatibilityUpgradeFieldNumber = 2,
    kOldNeedsMediaCompatibilityUpgradeFieldNumber = 3,
    kCollaborativeMediaCompatibilityUpgradeDidFailFieldNumber = 4,
    kOldCollaborativeMediaCompatibilityUpgradeDidFailFieldNumber = 5,
    kCanUseHevcFieldNumber = 6,
    kOldCanUseHevcFieldNumber = 7,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional bool needs_media_compatibility_upgrade = 2;
  bool has_needs_media_compatibility_upgrade() const;
  private:
  bool _internal_has_needs_media_compatibility_upgrade() const;
  public:
  void clear_needs_media_compatibility_upgrade();
  bool needs_media_compatibility_upgrade() const;
  void set_needs_media_compatibility_upgrade(bool value);
  private:
  bool _internal_needs_media_compatibility_upgrade() const;
  void _internal_set_needs_media_compatibility_upgrade(bool value);
  public:

  // optional bool old_needs_media_compatibility_upgrade = 3;
  bool has_old_needs_media_compatibility_upgrade() const;
  private:
  bool _internal_has_old_needs_media_compatibility_upgrade() const;
  public:
  void clear_old_needs_media_compatibility_upgrade();
  bool old_needs_media_compatibility_upgrade() const;
  void set_old_needs_media_compatibility_upgrade(bool value);
  private:
  bool _internal_old_needs_media_compatibility_upgrade() const;
  void _internal_set_old_needs_media_compatibility_upgrade(bool value);
  public:

  // optional bool collaborative_media_compatibility_upgrade_did_fail = 4;
  bool has_collaborative_media_compatibility_upgrade_did_fail() const;
  private:
  bool _internal_has_collaborative_media_compatibility_upgrade_did_fail() const;
  public:
  void clear_collaborative_media_compatibility_upgrade_did_fail();
  bool collaborative_media_compatibility_upgrade_did_fail() const;
  void set_collaborative_media_compatibility_upgrade_did_fail(bool value);
  private:
  bool _internal_collaborative_media_compatibility_upgrade_did_fail() const;
  void _internal_set_collaborative_media_compatibility_upgrade_did_fail(bool value);
  public:

  // optional bool old_collaborative_media_compatibility_upgrade_did_fail = 5;
  bool has_old_collaborative_media_compatibility_upgrade_did_fail() const;
  private:
  bool _internal_has_old_collaborative_media_compatibility_upgrade_did_fail() const;
  public:
  void clear_old_collaborative_media_compatibility_upgrade_did_fail();
  bool old_collaborative_media_compatibility_upgrade_did_fail() const;
  void set_old_collaborative_media_compatibility_upgrade_did_fail(bool value);
  private:
  bool _internal_old_collaborative_media_compatibility_upgrade_did_fail() const;
  void _internal_set_old_collaborative_media_compatibility_upgrade_did_fail(bool value);
  public:

  // optional bool can_use_hevc = 6;
  bool has_can_use_hevc() const;
  private:
  bool _internal_has_can_use_hevc() const;
  public:
  void clear_can_use_hevc();
  bool can_use_hevc() const;
  void set_can_use_hevc(bool value);
  private:
  bool _internal_can_use_hevc() const;
  void _internal_set_can_use_hevc(bool value);
  public:

  // optional bool old_can_use_hevc = 7;
  bool has_old_can_use_hevc() const;
  private:
  bool _internal_has_old_can_use_hevc() const;
  public:
  void clear_old_can_use_hevc();
  bool old_can_use_hevc() const;
  void set_old_can_use_hevc(bool value);
  private:
  bool _internal_old_can_use_hevc() const;
  void _internal_set_old_can_use_hevc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.NeedsMediaCompatibilityUpgradeCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    bool needs_media_compatibility_upgrade_;
    bool old_needs_media_compatibility_upgrade_;
    bool collaborative_media_compatibility_upgrade_did_fail_;
    bool old_collaborative_media_compatibility_upgrade_did_fail_;
    bool can_use_hevc_;
    bool old_can_use_hevc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class ChangeDocumentLocaleCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.ChangeDocumentLocaleCommandArchive) */ {
 public:
  inline ChangeDocumentLocaleCommandArchive() : ChangeDocumentLocaleCommandArchive(nullptr) {}
  ~ChangeDocumentLocaleCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR ChangeDocumentLocaleCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeDocumentLocaleCommandArchive(const ChangeDocumentLocaleCommandArchive& from);
  ChangeDocumentLocaleCommandArchive(ChangeDocumentLocaleCommandArchive&& from) noexcept
    : ChangeDocumentLocaleCommandArchive() {
    *this = ::std::move(from);
  }

  inline ChangeDocumentLocaleCommandArchive& operator=(const ChangeDocumentLocaleCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeDocumentLocaleCommandArchive& operator=(ChangeDocumentLocaleCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeDocumentLocaleCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeDocumentLocaleCommandArchive* internal_default_instance() {
    return reinterpret_cast<const ChangeDocumentLocaleCommandArchive*>(
               &_ChangeDocumentLocaleCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChangeDocumentLocaleCommandArchive& a, ChangeDocumentLocaleCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeDocumentLocaleCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeDocumentLocaleCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeDocumentLocaleCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeDocumentLocaleCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeDocumentLocaleCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChangeDocumentLocaleCommandArchive& from) {
    ChangeDocumentLocaleCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeDocumentLocaleCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.ChangeDocumentLocaleCommandArchive";
  }
  protected:
  explicit ChangeDocumentLocaleCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldLocaleIdFieldNumber = 2,
    kNewLocaleIdFieldNumber = 3,
    kSuperFieldNumber = 1,
    kOldFormattingSymbolsFieldNumber = 4,
    kNewFormattingSymbolsFieldNumber = 5,
  };
  // optional string old_locale_id = 2;
  bool has_old_locale_id() const;
  private:
  bool _internal_has_old_locale_id() const;
  public:
  void clear_old_locale_id();
  const std::string& old_locale_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_locale_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_locale_id();
  PROTOBUF_NODISCARD std::string* release_old_locale_id();
  void set_allocated_old_locale_id(std::string* old_locale_id);
  private:
  const std::string& _internal_old_locale_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_locale_id(const std::string& value);
  std::string* _internal_mutable_old_locale_id();
  public:

  // optional string new_locale_id = 3;
  bool has_new_locale_id() const;
  private:
  bool _internal_has_new_locale_id() const;
  public:
  void clear_new_locale_id();
  const std::string& new_locale_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_locale_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_locale_id();
  PROTOBUF_NODISCARD std::string* release_new_locale_id();
  void set_allocated_new_locale_id(std::string* new_locale_id);
  private:
  const std::string& _internal_new_locale_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_locale_id(const std::string& value);
  std::string* _internal_mutable_new_locale_id();
  public:

  // optional .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSK.FormattingSymbolsArchive old_formatting_symbols = 4;
  bool has_old_formatting_symbols() const;
  private:
  bool _internal_has_old_formatting_symbols() const;
  public:
  void clear_old_formatting_symbols();
  const ::TSK::FormattingSymbolsArchive& old_formatting_symbols() const;
  PROTOBUF_NODISCARD ::TSK::FormattingSymbolsArchive* release_old_formatting_symbols();
  ::TSK::FormattingSymbolsArchive* mutable_old_formatting_symbols();
  void set_allocated_old_formatting_symbols(::TSK::FormattingSymbolsArchive* old_formatting_symbols);
  private:
  const ::TSK::FormattingSymbolsArchive& _internal_old_formatting_symbols() const;
  ::TSK::FormattingSymbolsArchive* _internal_mutable_old_formatting_symbols();
  public:
  void unsafe_arena_set_allocated_old_formatting_symbols(
      ::TSK::FormattingSymbolsArchive* old_formatting_symbols);
  ::TSK::FormattingSymbolsArchive* unsafe_arena_release_old_formatting_symbols();

  // optional .TSK.FormattingSymbolsArchive new_formatting_symbols = 5;
  bool has_new_formatting_symbols() const;
  private:
  bool _internal_has_new_formatting_symbols() const;
  public:
  void clear_new_formatting_symbols();
  const ::TSK::FormattingSymbolsArchive& new_formatting_symbols() const;
  PROTOBUF_NODISCARD ::TSK::FormattingSymbolsArchive* release_new_formatting_symbols();
  ::TSK::FormattingSymbolsArchive* mutable_new_formatting_symbols();
  void set_allocated_new_formatting_symbols(::TSK::FormattingSymbolsArchive* new_formatting_symbols);
  private:
  const ::TSK::FormattingSymbolsArchive& _internal_new_formatting_symbols() const;
  ::TSK::FormattingSymbolsArchive* _internal_mutable_new_formatting_symbols();
  public:
  void unsafe_arena_set_allocated_new_formatting_symbols(
      ::TSK::FormattingSymbolsArchive* new_formatting_symbols);
  ::TSK::FormattingSymbolsArchive* unsafe_arena_release_new_formatting_symbols();

  // @@protoc_insertion_point(class_scope:TSA.ChangeDocumentLocaleCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_locale_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_locale_id_;
    ::TSK::CommandArchive* super_;
    ::TSK::FormattingSymbolsArchive* old_formatting_symbols_;
    ::TSK::FormattingSymbolsArchive* new_formatting_symbols_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class InducedVerifyObjectsWithServerCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.InducedVerifyObjectsWithServerCommandArchive) */ {
 public:
  inline InducedVerifyObjectsWithServerCommandArchive() : InducedVerifyObjectsWithServerCommandArchive(nullptr) {}
  ~InducedVerifyObjectsWithServerCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR InducedVerifyObjectsWithServerCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InducedVerifyObjectsWithServerCommandArchive(const InducedVerifyObjectsWithServerCommandArchive& from);
  InducedVerifyObjectsWithServerCommandArchive(InducedVerifyObjectsWithServerCommandArchive&& from) noexcept
    : InducedVerifyObjectsWithServerCommandArchive() {
    *this = ::std::move(from);
  }

  inline InducedVerifyObjectsWithServerCommandArchive& operator=(const InducedVerifyObjectsWithServerCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InducedVerifyObjectsWithServerCommandArchive& operator=(InducedVerifyObjectsWithServerCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InducedVerifyObjectsWithServerCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InducedVerifyObjectsWithServerCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InducedVerifyObjectsWithServerCommandArchive*>(
               &_InducedVerifyObjectsWithServerCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(InducedVerifyObjectsWithServerCommandArchive& a, InducedVerifyObjectsWithServerCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InducedVerifyObjectsWithServerCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InducedVerifyObjectsWithServerCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InducedVerifyObjectsWithServerCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InducedVerifyObjectsWithServerCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InducedVerifyObjectsWithServerCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InducedVerifyObjectsWithServerCommandArchive& from) {
    InducedVerifyObjectsWithServerCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InducedVerifyObjectsWithServerCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.InducedVerifyObjectsWithServerCommandArchive";
  }
  protected:
  explicit InducedVerifyObjectsWithServerCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdListFieldNumber = 2,
    kServerObjectSOSStringListFieldNumber = 4,
    kSuperFieldNumber = 1,
    kRemoteDataSyncKeyFieldNumber = 7,
    kObjectIdListUndefinedFieldNumber = 3,
    kServerObjectSOSStringListUndefinedFieldNumber = 5,
    kPendingRecalcFieldNumber = 6,
  };
  // repeated .TSP.UUID object_id_list = 2;
  int object_id_list_size() const;
  private:
  int _internal_object_id_list_size() const;
  public:
  void clear_object_id_list();
  ::TSP::UUID* mutable_object_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_object_id_list();
  private:
  const ::TSP::UUID& _internal_object_id_list(int index) const;
  ::TSP::UUID* _internal_add_object_id_list();
  public:
  const ::TSP::UUID& object_id_list(int index) const;
  ::TSP::UUID* add_object_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      object_id_list() const;

  // repeated string server_object_s_o_s_string_list = 4;
  int server_object_s_o_s_string_list_size() const;
  private:
  int _internal_server_object_s_o_s_string_list_size() const;
  public:
  void clear_server_object_s_o_s_string_list();
  const std::string& server_object_s_o_s_string_list(int index) const;
  std::string* mutable_server_object_s_o_s_string_list(int index);
  void set_server_object_s_o_s_string_list(int index, const std::string& value);
  void set_server_object_s_o_s_string_list(int index, std::string&& value);
  void set_server_object_s_o_s_string_list(int index, const char* value);
  void set_server_object_s_o_s_string_list(int index, const char* value, size_t size);
  std::string* add_server_object_s_o_s_string_list();
  void add_server_object_s_o_s_string_list(const std::string& value);
  void add_server_object_s_o_s_string_list(std::string&& value);
  void add_server_object_s_o_s_string_list(const char* value);
  void add_server_object_s_o_s_string_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& server_object_s_o_s_string_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_server_object_s_o_s_string_list();
  private:
  const std::string& _internal_server_object_s_o_s_string_list(int index) const;
  std::string* _internal_add_server_object_s_o_s_string_list();
  public:

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required double remote_data_sync_key = 7;
  bool has_remote_data_sync_key() const;
  private:
  bool _internal_has_remote_data_sync_key() const;
  public:
  void clear_remote_data_sync_key();
  double remote_data_sync_key() const;
  void set_remote_data_sync_key(double value);
  private:
  double _internal_remote_data_sync_key() const;
  void _internal_set_remote_data_sync_key(double value);
  public:

  // optional bool object_id_list_undefined = 3;
  bool has_object_id_list_undefined() const;
  private:
  bool _internal_has_object_id_list_undefined() const;
  public:
  void clear_object_id_list_undefined();
  bool object_id_list_undefined() const;
  void set_object_id_list_undefined(bool value);
  private:
  bool _internal_object_id_list_undefined() const;
  void _internal_set_object_id_list_undefined(bool value);
  public:

  // optional bool server_object_s_o_s_string_list_undefined = 5;
  bool has_server_object_s_o_s_string_list_undefined() const;
  private:
  bool _internal_has_server_object_s_o_s_string_list_undefined() const;
  public:
  void clear_server_object_s_o_s_string_list_undefined();
  bool server_object_s_o_s_string_list_undefined() const;
  void set_server_object_s_o_s_string_list_undefined(bool value);
  private:
  bool _internal_server_object_s_o_s_string_list_undefined() const;
  void _internal_set_server_object_s_o_s_string_list_undefined(bool value);
  public:

  // required bool pending_recalc = 6;
  bool has_pending_recalc() const;
  private:
  bool _internal_has_pending_recalc() const;
  public:
  void clear_pending_recalc();
  bool pending_recalc() const;
  void set_pending_recalc(bool value);
  private:
  bool _internal_pending_recalc() const;
  void _internal_set_pending_recalc(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.InducedVerifyObjectsWithServerCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > object_id_list_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> server_object_s_o_s_string_list_;
    ::TSK::CommandArchive* super_;
    double remote_data_sync_key_;
    bool object_id_list_undefined_;
    bool server_object_s_o_s_string_list_undefined_;
    bool pending_recalc_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class InducedVerifyTransformHistoryWithServerCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.InducedVerifyTransformHistoryWithServerCommandArchive) */ {
 public:
  inline InducedVerifyTransformHistoryWithServerCommandArchive() : InducedVerifyTransformHistoryWithServerCommandArchive(nullptr) {}
  ~InducedVerifyTransformHistoryWithServerCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR InducedVerifyTransformHistoryWithServerCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InducedVerifyTransformHistoryWithServerCommandArchive(const InducedVerifyTransformHistoryWithServerCommandArchive& from);
  InducedVerifyTransformHistoryWithServerCommandArchive(InducedVerifyTransformHistoryWithServerCommandArchive&& from) noexcept
    : InducedVerifyTransformHistoryWithServerCommandArchive() {
    *this = ::std::move(from);
  }

  inline InducedVerifyTransformHistoryWithServerCommandArchive& operator=(const InducedVerifyTransformHistoryWithServerCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline InducedVerifyTransformHistoryWithServerCommandArchive& operator=(InducedVerifyTransformHistoryWithServerCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InducedVerifyTransformHistoryWithServerCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const InducedVerifyTransformHistoryWithServerCommandArchive* internal_default_instance() {
    return reinterpret_cast<const InducedVerifyTransformHistoryWithServerCommandArchive*>(
               &_InducedVerifyTransformHistoryWithServerCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(InducedVerifyTransformHistoryWithServerCommandArchive& a, InducedVerifyTransformHistoryWithServerCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(InducedVerifyTransformHistoryWithServerCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InducedVerifyTransformHistoryWithServerCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InducedVerifyTransformHistoryWithServerCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InducedVerifyTransformHistoryWithServerCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InducedVerifyTransformHistoryWithServerCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InducedVerifyTransformHistoryWithServerCommandArchive& from) {
    InducedVerifyTransformHistoryWithServerCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InducedVerifyTransformHistoryWithServerCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.InducedVerifyTransformHistoryWithServerCommandArchive";
  }
  protected:
  explicit InducedVerifyTransformHistoryWithServerCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerOperationStorageEntriesFieldNumber = 2,
    kSuperFieldNumber = 1,
    kServerOperationStorageEntriesUndefinedFieldNumber = 3,
  };
  // repeated .TSK.OperationStorageEntry server_operation_storage_entries = 2;
  int server_operation_storage_entries_size() const;
  private:
  int _internal_server_operation_storage_entries_size() const;
  public:
  void clear_server_operation_storage_entries();
  ::TSK::OperationStorageEntry* mutable_server_operation_storage_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageEntry >*
      mutable_server_operation_storage_entries();
  private:
  const ::TSK::OperationStorageEntry& _internal_server_operation_storage_entries(int index) const;
  ::TSK::OperationStorageEntry* _internal_add_server_operation_storage_entries();
  public:
  const ::TSK::OperationStorageEntry& server_operation_storage_entries(int index) const;
  ::TSK::OperationStorageEntry* add_server_operation_storage_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageEntry >&
      server_operation_storage_entries() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional bool server_operation_storage_entries_undefined = 3;
  bool has_server_operation_storage_entries_undefined() const;
  private:
  bool _internal_has_server_operation_storage_entries_undefined() const;
  public:
  void clear_server_operation_storage_entries_undefined();
  bool server_operation_storage_entries_undefined() const;
  void set_server_operation_storage_entries_undefined(bool value);
  private:
  bool _internal_server_operation_storage_entries_undefined() const;
  void _internal_set_server_operation_storage_entries_undefined(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.InducedVerifyTransformHistoryWithServerCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageEntry > server_operation_storage_entries_;
    ::TSK::CommandArchive* super_;
    bool server_operation_storage_entries_undefined_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class StyleUpdatePropertyMapCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.StyleUpdatePropertyMapCommandArchive) */ {
 public:
  inline StyleUpdatePropertyMapCommandArchive() : StyleUpdatePropertyMapCommandArchive(nullptr) {}
  ~StyleUpdatePropertyMapCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR StyleUpdatePropertyMapCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StyleUpdatePropertyMapCommandArchive(const StyleUpdatePropertyMapCommandArchive& from);
  StyleUpdatePropertyMapCommandArchive(StyleUpdatePropertyMapCommandArchive&& from) noexcept
    : StyleUpdatePropertyMapCommandArchive() {
    *this = ::std::move(from);
  }

  inline StyleUpdatePropertyMapCommandArchive& operator=(const StyleUpdatePropertyMapCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StyleUpdatePropertyMapCommandArchive& operator=(StyleUpdatePropertyMapCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StyleUpdatePropertyMapCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StyleUpdatePropertyMapCommandArchive* internal_default_instance() {
    return reinterpret_cast<const StyleUpdatePropertyMapCommandArchive*>(
               &_StyleUpdatePropertyMapCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(StyleUpdatePropertyMapCommandArchive& a, StyleUpdatePropertyMapCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StyleUpdatePropertyMapCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StyleUpdatePropertyMapCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StyleUpdatePropertyMapCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StyleUpdatePropertyMapCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StyleUpdatePropertyMapCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StyleUpdatePropertyMapCommandArchive& from) {
    StyleUpdatePropertyMapCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StyleUpdatePropertyMapCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.StyleUpdatePropertyMapCommandArchive";
  }
  protected:
  explicit StyleUpdatePropertyMapCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // optional .TSWP.StyleUpdatePropertyMapCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::StyleUpdatePropertyMapCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSWP::StyleUpdatePropertyMapCommandArchive* release_super();
  ::TSWP::StyleUpdatePropertyMapCommandArchive* mutable_super();
  void set_allocated_super(::TSWP::StyleUpdatePropertyMapCommandArchive* super);
  private:
  const ::TSWP::StyleUpdatePropertyMapCommandArchive& _internal_super() const;
  ::TSWP::StyleUpdatePropertyMapCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::StyleUpdatePropertyMapCommandArchive* super);
  ::TSWP::StyleUpdatePropertyMapCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSA.StyleUpdatePropertyMapCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSWP::StyleUpdatePropertyMapCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class RemoteDataChangeCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.RemoteDataChangeCommandArchive) */ {
 public:
  inline RemoteDataChangeCommandArchive() : RemoteDataChangeCommandArchive(nullptr) {}
  ~RemoteDataChangeCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR RemoteDataChangeCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteDataChangeCommandArchive(const RemoteDataChangeCommandArchive& from);
  RemoteDataChangeCommandArchive(RemoteDataChangeCommandArchive&& from) noexcept
    : RemoteDataChangeCommandArchive() {
    *this = ::std::move(from);
  }

  inline RemoteDataChangeCommandArchive& operator=(const RemoteDataChangeCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteDataChangeCommandArchive& operator=(RemoteDataChangeCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RemoteDataChangeCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteDataChangeCommandArchive* internal_default_instance() {
    return reinterpret_cast<const RemoteDataChangeCommandArchive*>(
               &_RemoteDataChangeCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RemoteDataChangeCommandArchive& a, RemoteDataChangeCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteDataChangeCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteDataChangeCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteDataChangeCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteDataChangeCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RemoteDataChangeCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RemoteDataChangeCommandArchive& from) {
    RemoteDataChangeCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteDataChangeCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.RemoteDataChangeCommandArchive";
  }
  protected:
  explicit RemoteDataChangeCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuotesFieldNumber = 3,
    kSuperFieldNumber = 1,
    kValueMapFieldNumber = 2,
    kRemoteDataSyncKeyFieldNumber = 4,
  };
  // repeated .TSCE.StockArchive quotes = 3;
  int quotes_size() const;
  private:
  int _internal_quotes_size() const;
  public:
  void clear_quotes();
  ::TSCE::StockArchive* mutable_quotes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive >*
      mutable_quotes();
  private:
  const ::TSCE::StockArchive& _internal_quotes(int index) const;
  ::TSCE::StockArchive* _internal_add_quotes();
  public:
  const ::TSCE::StockArchive& quotes(int index) const;
  ::TSCE::StockArchive* add_quotes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive >&
      quotes() const;

  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // required .TSCE.RemoteDataValueMapArchive value_map = 2;
  bool has_value_map() const;
  private:
  bool _internal_has_value_map() const;
  public:
  void clear_value_map();
  const ::TSCE::RemoteDataValueMapArchive& value_map() const;
  PROTOBUF_NODISCARD ::TSCE::RemoteDataValueMapArchive* release_value_map();
  ::TSCE::RemoteDataValueMapArchive* mutable_value_map();
  void set_allocated_value_map(::TSCE::RemoteDataValueMapArchive* value_map);
  private:
  const ::TSCE::RemoteDataValueMapArchive& _internal_value_map() const;
  ::TSCE::RemoteDataValueMapArchive* _internal_mutable_value_map();
  public:
  void unsafe_arena_set_allocated_value_map(
      ::TSCE::RemoteDataValueMapArchive* value_map);
  ::TSCE::RemoteDataValueMapArchive* unsafe_arena_release_value_map();

  // required double remote_data_sync_key = 4;
  bool has_remote_data_sync_key() const;
  private:
  bool _internal_has_remote_data_sync_key() const;
  public:
  void clear_remote_data_sync_key();
  double remote_data_sync_key() const;
  void set_remote_data_sync_key(double value);
  private:
  double _internal_remote_data_sync_key() const;
  void _internal_set_remote_data_sync_key(double value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.RemoteDataChangeCommandArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive > quotes_;
    ::TSK::CommandArchive* super_;
    ::TSCE::RemoteDataValueMapArchive* value_map_;
    double remote_data_sync_key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryInfoSetValueCommandArchive_PropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryInfoSetValueCommandArchive.PropertyValue) */ {
 public:
  inline GalleryInfoSetValueCommandArchive_PropertyValue() : GalleryInfoSetValueCommandArchive_PropertyValue(nullptr) {}
  ~GalleryInfoSetValueCommandArchive_PropertyValue() override;
  explicit PROTOBUF_CONSTEXPR GalleryInfoSetValueCommandArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryInfoSetValueCommandArchive_PropertyValue(const GalleryInfoSetValueCommandArchive_PropertyValue& from);
  GalleryInfoSetValueCommandArchive_PropertyValue(GalleryInfoSetValueCommandArchive_PropertyValue&& from) noexcept
    : GalleryInfoSetValueCommandArchive_PropertyValue() {
    *this = ::std::move(from);
  }

  inline GalleryInfoSetValueCommandArchive_PropertyValue& operator=(const GalleryInfoSetValueCommandArchive_PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryInfoSetValueCommandArchive_PropertyValue& operator=(GalleryInfoSetValueCommandArchive_PropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryInfoSetValueCommandArchive_PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryInfoSetValueCommandArchive_PropertyValue* internal_default_instance() {
    return reinterpret_cast<const GalleryInfoSetValueCommandArchive_PropertyValue*>(
               &_GalleryInfoSetValueCommandArchive_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GalleryInfoSetValueCommandArchive_PropertyValue& a, GalleryInfoSetValueCommandArchive_PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryInfoSetValueCommandArchive_PropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryInfoSetValueCommandArchive_PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryInfoSetValueCommandArchive_PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryInfoSetValueCommandArchive_PropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryInfoSetValueCommandArchive_PropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryInfoSetValueCommandArchive_PropertyValue& from) {
    GalleryInfoSetValueCommandArchive_PropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryInfoSetValueCommandArchive_PropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryInfoSetValueCommandArchive.PropertyValue";
  }
  protected:
  explicit GalleryInfoSetValueCommandArchive_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptionModeFieldNumber = 1,
  };
  // optional .TSA.GalleryInfoCaptionMode caption_mode = 1;
  bool has_caption_mode() const;
  private:
  bool _internal_has_caption_mode() const;
  public:
  void clear_caption_mode();
  ::TSA::GalleryInfoCaptionMode caption_mode() const;
  void set_caption_mode(::TSA::GalleryInfoCaptionMode value);
  private:
  ::TSA::GalleryInfoCaptionMode _internal_caption_mode() const;
  void _internal_set_caption_mode(::TSA::GalleryInfoCaptionMode value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.GalleryInfoSetValueCommandArchive.PropertyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int caption_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryInfoSetValueCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryInfoSetValueCommandArchive) */ {
 public:
  inline GalleryInfoSetValueCommandArchive() : GalleryInfoSetValueCommandArchive(nullptr) {}
  ~GalleryInfoSetValueCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR GalleryInfoSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryInfoSetValueCommandArchive(const GalleryInfoSetValueCommandArchive& from);
  GalleryInfoSetValueCommandArchive(GalleryInfoSetValueCommandArchive&& from) noexcept
    : GalleryInfoSetValueCommandArchive() {
    *this = ::std::move(from);
  }

  inline GalleryInfoSetValueCommandArchive& operator=(const GalleryInfoSetValueCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryInfoSetValueCommandArchive& operator=(GalleryInfoSetValueCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryInfoSetValueCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryInfoSetValueCommandArchive* internal_default_instance() {
    return reinterpret_cast<const GalleryInfoSetValueCommandArchive*>(
               &_GalleryInfoSetValueCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GalleryInfoSetValueCommandArchive& a, GalleryInfoSetValueCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryInfoSetValueCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryInfoSetValueCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryInfoSetValueCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryInfoSetValueCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryInfoSetValueCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryInfoSetValueCommandArchive& from) {
    GalleryInfoSetValueCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryInfoSetValueCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryInfoSetValueCommandArchive";
  }
  protected:
  explicit GalleryInfoSetValueCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GalleryInfoSetValueCommandArchive_PropertyValue PropertyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kInfoIdPathFieldNumber = 2,
    kValueFieldNumber = 4,
    kOldValueFieldNumber = 5,
    kPropertyFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath info_id_path = 2;
  bool has_info_id_path() const;
  private:
  bool _internal_has_info_id_path() const;
  public:
  void clear_info_id_path();
  const ::TSP::UUIDPath& info_id_path() const;
  PROTOBUF_NODISCARD ::TSP::UUIDPath* release_info_id_path();
  ::TSP::UUIDPath* mutable_info_id_path();
  void set_allocated_info_id_path(::TSP::UUIDPath* info_id_path);
  private:
  const ::TSP::UUIDPath& _internal_info_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_info_id_path();
  public:
  void unsafe_arena_set_allocated_info_id_path(
      ::TSP::UUIDPath* info_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_info_id_path();

  // optional .TSA.GalleryInfoSetValueCommandArchive.PropertyValue value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue& value() const;
  PROTOBUF_NODISCARD ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* release_value();
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* mutable_value();
  void set_allocated_value(::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* value);
  private:
  const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue& _internal_value() const;
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* value);
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* unsafe_arena_release_value();

  // optional .TSA.GalleryInfoSetValueCommandArchive.PropertyValue old_value = 5;
  bool has_old_value() const;
  private:
  bool _internal_has_old_value() const;
  public:
  void clear_old_value();
  const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue& old_value() const;
  PROTOBUF_NODISCARD ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* release_old_value();
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* mutable_old_value();
  void set_allocated_old_value(::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* old_value);
  private:
  const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue& _internal_old_value() const;
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* _internal_mutable_old_value();
  public:
  void unsafe_arena_set_allocated_old_value(
      ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* old_value);
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* unsafe_arena_release_old_value();

  // optional .TSA.GalleryInfoProperty property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  ::TSA::GalleryInfoProperty property() const;
  void set_property(::TSA::GalleryInfoProperty value);
  private:
  ::TSA::GalleryInfoProperty _internal_property() const;
  void _internal_set_property(::TSA::GalleryInfoProperty value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.GalleryInfoSetValueCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::UUIDPath* info_id_path_;
    ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* value_;
    ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* old_value_;
    int property_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryInfoInsertItemsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryInfoInsertItemsCommandArchive) */ {
 public:
  inline GalleryInfoInsertItemsCommandArchive() : GalleryInfoInsertItemsCommandArchive(nullptr) {}
  ~GalleryInfoInsertItemsCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR GalleryInfoInsertItemsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryInfoInsertItemsCommandArchive(const GalleryInfoInsertItemsCommandArchive& from);
  GalleryInfoInsertItemsCommandArchive(GalleryInfoInsertItemsCommandArchive&& from) noexcept
    : GalleryInfoInsertItemsCommandArchive() {
    *this = ::std::move(from);
  }

  inline GalleryInfoInsertItemsCommandArchive& operator=(const GalleryInfoInsertItemsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryInfoInsertItemsCommandArchive& operator=(GalleryInfoInsertItemsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryInfoInsertItemsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryInfoInsertItemsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const GalleryInfoInsertItemsCommandArchive*>(
               &_GalleryInfoInsertItemsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GalleryInfoInsertItemsCommandArchive& a, GalleryInfoInsertItemsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryInfoInsertItemsCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryInfoInsertItemsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryInfoInsertItemsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryInfoInsertItemsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryInfoInsertItemsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryInfoInsertItemsCommandArchive& from) {
    GalleryInfoInsertItemsCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryInfoInsertItemsCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryInfoInsertItemsCommandArchive";
  }
  protected:
  explicit GalleryInfoInsertItemsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kSuperFieldNumber = 1,
  };
  // repeated .TSP.Reference items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::TSP::Reference* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_items();
  private:
  const ::TSP::Reference& _internal_items(int index) const;
  ::TSP::Reference* _internal_add_items();
  public:
  const ::TSP::Reference& items(int index) const;
  ::TSP::Reference* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      items() const;

  // required .TSD.ContainerInsertChildrenCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ContainerInsertChildrenCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSD::ContainerInsertChildrenCommandArchive* release_super();
  ::TSD::ContainerInsertChildrenCommandArchive* mutable_super();
  void set_allocated_super(::TSD::ContainerInsertChildrenCommandArchive* super);
  private:
  const ::TSD::ContainerInsertChildrenCommandArchive& _internal_super() const;
  ::TSD::ContainerInsertChildrenCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ContainerInsertChildrenCommandArchive* super);
  ::TSD::ContainerInsertChildrenCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSA.GalleryInfoInsertItemsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > items_;
    ::TSD::ContainerInsertChildrenCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryInfoRemoveItemsCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryInfoRemoveItemsCommandArchive) */ {
 public:
  inline GalleryInfoRemoveItemsCommandArchive() : GalleryInfoRemoveItemsCommandArchive(nullptr) {}
  ~GalleryInfoRemoveItemsCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR GalleryInfoRemoveItemsCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryInfoRemoveItemsCommandArchive(const GalleryInfoRemoveItemsCommandArchive& from);
  GalleryInfoRemoveItemsCommandArchive(GalleryInfoRemoveItemsCommandArchive&& from) noexcept
    : GalleryInfoRemoveItemsCommandArchive() {
    *this = ::std::move(from);
  }

  inline GalleryInfoRemoveItemsCommandArchive& operator=(const GalleryInfoRemoveItemsCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryInfoRemoveItemsCommandArchive& operator=(GalleryInfoRemoveItemsCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryInfoRemoveItemsCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryInfoRemoveItemsCommandArchive* internal_default_instance() {
    return reinterpret_cast<const GalleryInfoRemoveItemsCommandArchive*>(
               &_GalleryInfoRemoveItemsCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GalleryInfoRemoveItemsCommandArchive& a, GalleryInfoRemoveItemsCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryInfoRemoveItemsCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryInfoRemoveItemsCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryInfoRemoveItemsCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryInfoRemoveItemsCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryInfoRemoveItemsCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryInfoRemoveItemsCommandArchive& from) {
    GalleryInfoRemoveItemsCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryInfoRemoveItemsCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryInfoRemoveItemsCommandArchive";
  }
  protected:
  explicit GalleryInfoRemoveItemsCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::ContainerRemoveChildrenCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSD::ContainerRemoveChildrenCommandArchive* release_super();
  ::TSD::ContainerRemoveChildrenCommandArchive* mutable_super();
  void set_allocated_super(::TSD::ContainerRemoveChildrenCommandArchive* super);
  private:
  const ::TSD::ContainerRemoveChildrenCommandArchive& _internal_super() const;
  ::TSD::ContainerRemoveChildrenCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::ContainerRemoveChildrenCommandArchive* super);
  ::TSD::ContainerRemoveChildrenCommandArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSA.GalleryInfoRemoveItemsCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::ContainerRemoveChildrenCommandArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryItemSetGeometryCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryItemSetGeometryCommand) */ {
 public:
  inline GalleryItemSetGeometryCommand() : GalleryItemSetGeometryCommand(nullptr) {}
  ~GalleryItemSetGeometryCommand() override;
  explicit PROTOBUF_CONSTEXPR GalleryItemSetGeometryCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryItemSetGeometryCommand(const GalleryItemSetGeometryCommand& from);
  GalleryItemSetGeometryCommand(GalleryItemSetGeometryCommand&& from) noexcept
    : GalleryItemSetGeometryCommand() {
    *this = ::std::move(from);
  }

  inline GalleryItemSetGeometryCommand& operator=(const GalleryItemSetGeometryCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryItemSetGeometryCommand& operator=(GalleryItemSetGeometryCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryItemSetGeometryCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryItemSetGeometryCommand* internal_default_instance() {
    return reinterpret_cast<const GalleryItemSetGeometryCommand*>(
               &_GalleryItemSetGeometryCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GalleryItemSetGeometryCommand& a, GalleryItemSetGeometryCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryItemSetGeometryCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryItemSetGeometryCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryItemSetGeometryCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryItemSetGeometryCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryItemSetGeometryCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryItemSetGeometryCommand& from) {
    GalleryItemSetGeometryCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryItemSetGeometryCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryItemSetGeometryCommand";
  }
  protected:
  explicit GalleryItemSetGeometryCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kItemIdPathFieldNumber = 2,
    kOffsetFieldNumber = 3,
    kOldOffsetFieldNumber = 5,
    kOldScaleFieldNumber = 6,
    kScaleFieldNumber = 4,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath item_id_path = 2;
  bool has_item_id_path() const;
  private:
  bool _internal_has_item_id_path() const;
  public:
  void clear_item_id_path();
  const ::TSP::UUIDPath& item_id_path() const;
  PROTOBUF_NODISCARD ::TSP::UUIDPath* release_item_id_path();
  ::TSP::UUIDPath* mutable_item_id_path();
  void set_allocated_item_id_path(::TSP::UUIDPath* item_id_path);
  private:
  const ::TSP::UUIDPath& _internal_item_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_item_id_path();
  public:
  void unsafe_arena_set_allocated_item_id_path(
      ::TSP::UUIDPath* item_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_item_id_path();

  // optional .TSP.Point offset = 3;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::TSP::Point& offset() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_offset();
  ::TSP::Point* mutable_offset();
  void set_allocated_offset(::TSP::Point* offset);
  private:
  const ::TSP::Point& _internal_offset() const;
  ::TSP::Point* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::TSP::Point* offset);
  ::TSP::Point* unsafe_arena_release_offset();

  // optional .TSP.Point old_offset = 5;
  bool has_old_offset() const;
  private:
  bool _internal_has_old_offset() const;
  public:
  void clear_old_offset();
  const ::TSP::Point& old_offset() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_old_offset();
  ::TSP::Point* mutable_old_offset();
  void set_allocated_old_offset(::TSP::Point* old_offset);
  private:
  const ::TSP::Point& _internal_old_offset() const;
  ::TSP::Point* _internal_mutable_old_offset();
  public:
  void unsafe_arena_set_allocated_old_offset(
      ::TSP::Point* old_offset);
  ::TSP::Point* unsafe_arena_release_old_offset();

  // optional float old_scale = 6;
  bool has_old_scale() const;
  private:
  bool _internal_has_old_scale() const;
  public:
  void clear_old_scale();
  float old_scale() const;
  void set_old_scale(float value);
  private:
  float _internal_old_scale() const;
  void _internal_set_old_scale(float value);
  public:

  // optional float scale = 4 [default = 1];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.GalleryItemSetGeometryCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::UUIDPath* item_id_path_;
    ::TSP::Point* offset_;
    ::TSP::Point* old_offset_;
    float old_scale_;
    float scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryItem) */ {
 public:
  inline GalleryItem() : GalleryItem(nullptr) {}
  ~GalleryItem() override;
  explicit PROTOBUF_CONSTEXPR GalleryItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryItem(const GalleryItem& from);
  GalleryItem(GalleryItem&& from) noexcept
    : GalleryItem() {
    *this = ::std::move(from);
  }

  inline GalleryItem& operator=(const GalleryItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryItem& operator=(GalleryItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryItem* internal_default_instance() {
    return reinterpret_cast<const GalleryItem*>(
               &_GalleryItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GalleryItem& a, GalleryItem& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryItem& from) {
    GalleryItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryItem";
  }
  protected:
  explicit GalleryItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessibilityDescriptionFieldNumber = 9,
    kOffsetFieldNumber = 1,
    kImageDataFieldNumber = 3,
    kThumbnailImageDataFieldNumber = 4,
    kImageAdjustmentsFieldNumber = 5,
    kAdjustedImageDataFieldNumber = 6,
    kThumbnailAdjustedImageDataFieldNumber = 7,
    kCaptionStorageFieldNumber = 8,
    kScaleFieldNumber = 2,
  };
  // optional string accessibility_description = 9;
  bool has_accessibility_description() const;
  private:
  bool _internal_has_accessibility_description() const;
  public:
  void clear_accessibility_description();
  const std::string& accessibility_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accessibility_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accessibility_description();
  PROTOBUF_NODISCARD std::string* release_accessibility_description();
  void set_allocated_accessibility_description(std::string* accessibility_description);
  private:
  const std::string& _internal_accessibility_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accessibility_description(const std::string& value);
  std::string* _internal_mutable_accessibility_description();
  public:

  // optional .TSP.Point offset = 1;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::TSP::Point& offset() const;
  PROTOBUF_NODISCARD ::TSP::Point* release_offset();
  ::TSP::Point* mutable_offset();
  void set_allocated_offset(::TSP::Point* offset);
  private:
  const ::TSP::Point& _internal_offset() const;
  ::TSP::Point* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::TSP::Point* offset);
  ::TSP::Point* unsafe_arena_release_offset();

  // optional .TSP.DataReference image_data = 3;
  bool has_image_data() const;
  private:
  bool _internal_has_image_data() const;
  public:
  void clear_image_data();
  const ::TSP::DataReference& image_data() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_image_data();
  ::TSP::DataReference* mutable_image_data();
  void set_allocated_image_data(::TSP::DataReference* image_data);
  private:
  const ::TSP::DataReference& _internal_image_data() const;
  ::TSP::DataReference* _internal_mutable_image_data();
  public:
  void unsafe_arena_set_allocated_image_data(
      ::TSP::DataReference* image_data);
  ::TSP::DataReference* unsafe_arena_release_image_data();

  // optional .TSP.DataReference thumbnail_image_data = 4;
  bool has_thumbnail_image_data() const;
  private:
  bool _internal_has_thumbnail_image_data() const;
  public:
  void clear_thumbnail_image_data();
  const ::TSP::DataReference& thumbnail_image_data() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_thumbnail_image_data();
  ::TSP::DataReference* mutable_thumbnail_image_data();
  void set_allocated_thumbnail_image_data(::TSP::DataReference* thumbnail_image_data);
  private:
  const ::TSP::DataReference& _internal_thumbnail_image_data() const;
  ::TSP::DataReference* _internal_mutable_thumbnail_image_data();
  public:
  void unsafe_arena_set_allocated_thumbnail_image_data(
      ::TSP::DataReference* thumbnail_image_data);
  ::TSP::DataReference* unsafe_arena_release_thumbnail_image_data();

  // optional .TSD.ImageAdjustmentsArchive image_adjustments = 5;
  bool has_image_adjustments() const;
  private:
  bool _internal_has_image_adjustments() const;
  public:
  void clear_image_adjustments();
  const ::TSD::ImageAdjustmentsArchive& image_adjustments() const;
  PROTOBUF_NODISCARD ::TSD::ImageAdjustmentsArchive* release_image_adjustments();
  ::TSD::ImageAdjustmentsArchive* mutable_image_adjustments();
  void set_allocated_image_adjustments(::TSD::ImageAdjustmentsArchive* image_adjustments);
  private:
  const ::TSD::ImageAdjustmentsArchive& _internal_image_adjustments() const;
  ::TSD::ImageAdjustmentsArchive* _internal_mutable_image_adjustments();
  public:
  void unsafe_arena_set_allocated_image_adjustments(
      ::TSD::ImageAdjustmentsArchive* image_adjustments);
  ::TSD::ImageAdjustmentsArchive* unsafe_arena_release_image_adjustments();

  // optional .TSP.DataReference adjusted_image_data = 6;
  bool has_adjusted_image_data() const;
  private:
  bool _internal_has_adjusted_image_data() const;
  public:
  void clear_adjusted_image_data();
  const ::TSP::DataReference& adjusted_image_data() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_adjusted_image_data();
  ::TSP::DataReference* mutable_adjusted_image_data();
  void set_allocated_adjusted_image_data(::TSP::DataReference* adjusted_image_data);
  private:
  const ::TSP::DataReference& _internal_adjusted_image_data() const;
  ::TSP::DataReference* _internal_mutable_adjusted_image_data();
  public:
  void unsafe_arena_set_allocated_adjusted_image_data(
      ::TSP::DataReference* adjusted_image_data);
  ::TSP::DataReference* unsafe_arena_release_adjusted_image_data();

  // optional .TSP.DataReference thumbnail_adjusted_image_data = 7;
  bool has_thumbnail_adjusted_image_data() const;
  private:
  bool _internal_has_thumbnail_adjusted_image_data() const;
  public:
  void clear_thumbnail_adjusted_image_data();
  const ::TSP::DataReference& thumbnail_adjusted_image_data() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_thumbnail_adjusted_image_data();
  ::TSP::DataReference* mutable_thumbnail_adjusted_image_data();
  void set_allocated_thumbnail_adjusted_image_data(::TSP::DataReference* thumbnail_adjusted_image_data);
  private:
  const ::TSP::DataReference& _internal_thumbnail_adjusted_image_data() const;
  ::TSP::DataReference* _internal_mutable_thumbnail_adjusted_image_data();
  public:
  void unsafe_arena_set_allocated_thumbnail_adjusted_image_data(
      ::TSP::DataReference* thumbnail_adjusted_image_data);
  ::TSP::DataReference* unsafe_arena_release_thumbnail_adjusted_image_data();

  // optional .TSP.Reference caption_storage = 8;
  bool has_caption_storage() const;
  private:
  bool _internal_has_caption_storage() const;
  public:
  void clear_caption_storage();
  const ::TSP::Reference& caption_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_caption_storage();
  ::TSP::Reference* mutable_caption_storage();
  void set_allocated_caption_storage(::TSP::Reference* caption_storage);
  private:
  const ::TSP::Reference& _internal_caption_storage() const;
  ::TSP::Reference* _internal_mutable_caption_storage();
  public:
  void unsafe_arena_set_allocated_caption_storage(
      ::TSP::Reference* caption_storage);
  ::TSP::Reference* unsafe_arena_release_caption_storage();

  // optional float scale = 2;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.GalleryItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accessibility_description_;
    ::TSP::Point* offset_;
    ::TSP::DataReference* image_data_;
    ::TSP::DataReference* thumbnail_image_data_;
    ::TSD::ImageAdjustmentsArchive* image_adjustments_;
    ::TSP::DataReference* adjusted_image_data_;
    ::TSP::DataReference* thumbnail_adjusted_image_data_;
    ::TSP::Reference* caption_storage_;
    float scale_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryInfo) */ {
 public:
  inline GalleryInfo() : GalleryInfo(nullptr) {}
  ~GalleryInfo() override;
  explicit PROTOBUF_CONSTEXPR GalleryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryInfo(const GalleryInfo& from);
  GalleryInfo(GalleryInfo&& from) noexcept
    : GalleryInfo() {
    *this = ::std::move(from);
  }

  inline GalleryInfo& operator=(const GalleryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryInfo& operator=(GalleryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryInfo* internal_default_instance() {
    return reinterpret_cast<const GalleryInfo*>(
               &_GalleryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GalleryInfo& a, GalleryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryInfo& from) {
    GalleryInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryInfo";
  }
  protected:
  explicit GalleryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
    kCaptionStorageFieldNumber = 3,
    kCaptionModeFieldNumber = 2,
  };
  // repeated .TSP.Reference items = 1;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::TSP::Reference* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_items();
  private:
  const ::TSP::Reference& _internal_items(int index) const;
  ::TSP::Reference* _internal_add_items();
  public:
  const ::TSP::Reference& items(int index) const;
  ::TSP::Reference* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      items() const;

  // optional .TSP.Reference caption_storage = 3;
  bool has_caption_storage() const;
  private:
  bool _internal_has_caption_storage() const;
  public:
  void clear_caption_storage();
  const ::TSP::Reference& caption_storage() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_caption_storage();
  ::TSP::Reference* mutable_caption_storage();
  void set_allocated_caption_storage(::TSP::Reference* caption_storage);
  private:
  const ::TSP::Reference& _internal_caption_storage() const;
  ::TSP::Reference* _internal_mutable_caption_storage();
  public:
  void unsafe_arena_set_allocated_caption_storage(
      ::TSP::Reference* caption_storage);
  ::TSP::Reference* unsafe_arena_release_caption_storage();

  // optional .TSA.GalleryCaptionMode caption_mode = 2;
  bool has_caption_mode() const;
  private:
  bool _internal_has_caption_mode() const;
  public:
  void clear_caption_mode();
  ::TSA::GalleryCaptionMode caption_mode() const;
  void set_caption_mode(::TSA::GalleryCaptionMode value);
  private:
  ::TSA::GalleryCaptionMode _internal_caption_mode() const;
  void _internal_set_caption_mode(::TSA::GalleryCaptionMode value);
  public:

  static const int kGalleryInfoFieldNumber = 200;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::ImageArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSA::GalleryInfo >, 11, false >
    gallery_info;
  // @@protoc_insertion_point(class_scope:TSA.GalleryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > items_;
    ::TSP::Reference* caption_storage_;
    int caption_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GallerySelectionTransformer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GallerySelectionTransformer) */ {
 public:
  inline GallerySelectionTransformer() : GallerySelectionTransformer(nullptr) {}
  ~GallerySelectionTransformer() override;
  explicit PROTOBUF_CONSTEXPR GallerySelectionTransformer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GallerySelectionTransformer(const GallerySelectionTransformer& from);
  GallerySelectionTransformer(GallerySelectionTransformer&& from) noexcept
    : GallerySelectionTransformer() {
    *this = ::std::move(from);
  }

  inline GallerySelectionTransformer& operator=(const GallerySelectionTransformer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GallerySelectionTransformer& operator=(GallerySelectionTransformer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GallerySelectionTransformer& default_instance() {
    return *internal_default_instance();
  }
  static inline const GallerySelectionTransformer* internal_default_instance() {
    return reinterpret_cast<const GallerySelectionTransformer*>(
               &_GallerySelectionTransformer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GallerySelectionTransformer& a, GallerySelectionTransformer& b) {
    a.Swap(&b);
  }
  inline void Swap(GallerySelectionTransformer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GallerySelectionTransformer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GallerySelectionTransformer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GallerySelectionTransformer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GallerySelectionTransformer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GallerySelectionTransformer& from) {
    GallerySelectionTransformer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GallerySelectionTransformer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GallerySelectionTransformer";
  }
  protected:
  explicit GallerySelectionTransformer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kGalleryUuidPathFieldNumber = 2,
    kCaptionStorageUuidPathFieldNumber = 3,
  };
  // required .TSD.DrawableSelectionTransformerArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableSelectionTransformerArchive& super() const;
  PROTOBUF_NODISCARD ::TSD::DrawableSelectionTransformerArchive* release_super();
  ::TSD::DrawableSelectionTransformerArchive* mutable_super();
  void set_allocated_super(::TSD::DrawableSelectionTransformerArchive* super);
  private:
  const ::TSD::DrawableSelectionTransformerArchive& _internal_super() const;
  ::TSD::DrawableSelectionTransformerArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableSelectionTransformerArchive* super);
  ::TSD::DrawableSelectionTransformerArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath gallery_uuid_path = 2;
  bool has_gallery_uuid_path() const;
  private:
  bool _internal_has_gallery_uuid_path() const;
  public:
  void clear_gallery_uuid_path();
  const ::TSP::UUIDPath& gallery_uuid_path() const;
  PROTOBUF_NODISCARD ::TSP::UUIDPath* release_gallery_uuid_path();
  ::TSP::UUIDPath* mutable_gallery_uuid_path();
  void set_allocated_gallery_uuid_path(::TSP::UUIDPath* gallery_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_gallery_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_gallery_uuid_path();
  public:
  void unsafe_arena_set_allocated_gallery_uuid_path(
      ::TSP::UUIDPath* gallery_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_gallery_uuid_path();

  // optional .TSP.UUIDPath caption_storage_uuid_path = 3;
  bool has_caption_storage_uuid_path() const;
  private:
  bool _internal_has_caption_storage_uuid_path() const;
  public:
  void clear_caption_storage_uuid_path();
  const ::TSP::UUIDPath& caption_storage_uuid_path() const;
  PROTOBUF_NODISCARD ::TSP::UUIDPath* release_caption_storage_uuid_path();
  ::TSP::UUIDPath* mutable_caption_storage_uuid_path();
  void set_allocated_caption_storage_uuid_path(::TSP::UUIDPath* caption_storage_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_caption_storage_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_caption_storage_uuid_path();
  public:
  void unsafe_arena_set_allocated_caption_storage_uuid_path(
      ::TSP::UUIDPath* caption_storage_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_caption_storage_uuid_path();

  // @@protoc_insertion_point(class_scope:TSA.GallerySelectionTransformer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::DrawableSelectionTransformerArchive* super_;
    ::TSP::UUIDPath* gallery_uuid_path_;
    ::TSP::UUIDPath* caption_storage_uuid_path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryItemSelection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryItemSelection) */ {
 public:
  inline GalleryItemSelection() : GalleryItemSelection(nullptr) {}
  ~GalleryItemSelection() override;
  explicit PROTOBUF_CONSTEXPR GalleryItemSelection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryItemSelection(const GalleryItemSelection& from);
  GalleryItemSelection(GalleryItemSelection&& from) noexcept
    : GalleryItemSelection() {
    *this = ::std::move(from);
  }

  inline GalleryItemSelection& operator=(const GalleryItemSelection& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryItemSelection& operator=(GalleryItemSelection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryItemSelection& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryItemSelection* internal_default_instance() {
    return reinterpret_cast<const GalleryItemSelection*>(
               &_GalleryItemSelection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GalleryItemSelection& a, GalleryItemSelection& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryItemSelection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryItemSelection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryItemSelection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryItemSelection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryItemSelection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryItemSelection& from) {
    GalleryItemSelection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryItemSelection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryItemSelection";
  }
  protected:
  explicit GalleryItemSelection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kDisplayedItemFieldNumber = 1,
  };
  // repeated .TSP.Reference items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::TSP::Reference* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_items();
  private:
  const ::TSP::Reference& _internal_items(int index) const;
  ::TSP::Reference* _internal_add_items();
  public:
  const ::TSP::Reference& items(int index) const;
  ::TSP::Reference* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      items() const;

  // optional .TSP.Reference displayed_item = 1;
  bool has_displayed_item() const;
  private:
  bool _internal_has_displayed_item() const;
  public:
  void clear_displayed_item();
  const ::TSP::Reference& displayed_item() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_displayed_item();
  ::TSP::Reference* mutable_displayed_item();
  void set_allocated_displayed_item(::TSP::Reference* displayed_item);
  private:
  const ::TSP::Reference& _internal_displayed_item() const;
  ::TSP::Reference* _internal_mutable_displayed_item();
  public:
  void unsafe_arena_set_allocated_displayed_item(
      ::TSP::Reference* displayed_item);
  ::TSP::Reference* unsafe_arena_release_displayed_item();

  // @@protoc_insertion_point(class_scope:TSA.GalleryItemSelection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > items_;
    ::TSP::Reference* displayed_item_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryItemSelectionTransformer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryItemSelectionTransformer) */ {
 public:
  inline GalleryItemSelectionTransformer() : GalleryItemSelectionTransformer(nullptr) {}
  ~GalleryItemSelectionTransformer() override;
  explicit PROTOBUF_CONSTEXPR GalleryItemSelectionTransformer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryItemSelectionTransformer(const GalleryItemSelectionTransformer& from);
  GalleryItemSelectionTransformer(GalleryItemSelectionTransformer&& from) noexcept
    : GalleryItemSelectionTransformer() {
    *this = ::std::move(from);
  }

  inline GalleryItemSelectionTransformer& operator=(const GalleryItemSelectionTransformer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryItemSelectionTransformer& operator=(GalleryItemSelectionTransformer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryItemSelectionTransformer& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryItemSelectionTransformer* internal_default_instance() {
    return reinterpret_cast<const GalleryItemSelectionTransformer*>(
               &_GalleryItemSelectionTransformer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GalleryItemSelectionTransformer& a, GalleryItemSelectionTransformer& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryItemSelectionTransformer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryItemSelectionTransformer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryItemSelectionTransformer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryItemSelectionTransformer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryItemSelectionTransformer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryItemSelectionTransformer& from) {
    GalleryItemSelectionTransformer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryItemSelectionTransformer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryItemSelectionTransformer";
  }
  protected:
  explicit GalleryItemSelectionTransformer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransformerHelperFieldNumber = 1,
    kCaptionStorageUuidPathFieldNumber = 2,
  };
  // optional .TSA.GalleryItemSelectionTransformerHelper transformer_helper = 1;
  bool has_transformer_helper() const;
  private:
  bool _internal_has_transformer_helper() const;
  public:
  void clear_transformer_helper();
  const ::TSA::GalleryItemSelectionTransformerHelper& transformer_helper() const;
  PROTOBUF_NODISCARD ::TSA::GalleryItemSelectionTransformerHelper* release_transformer_helper();
  ::TSA::GalleryItemSelectionTransformerHelper* mutable_transformer_helper();
  void set_allocated_transformer_helper(::TSA::GalleryItemSelectionTransformerHelper* transformer_helper);
  private:
  const ::TSA::GalleryItemSelectionTransformerHelper& _internal_transformer_helper() const;
  ::TSA::GalleryItemSelectionTransformerHelper* _internal_mutable_transformer_helper();
  public:
  void unsafe_arena_set_allocated_transformer_helper(
      ::TSA::GalleryItemSelectionTransformerHelper* transformer_helper);
  ::TSA::GalleryItemSelectionTransformerHelper* unsafe_arena_release_transformer_helper();

  // optional .TSP.UUIDPath caption_storage_uuid_path = 2;
  bool has_caption_storage_uuid_path() const;
  private:
  bool _internal_has_caption_storage_uuid_path() const;
  public:
  void clear_caption_storage_uuid_path();
  const ::TSP::UUIDPath& caption_storage_uuid_path() const;
  PROTOBUF_NODISCARD ::TSP::UUIDPath* release_caption_storage_uuid_path();
  ::TSP::UUIDPath* mutable_caption_storage_uuid_path();
  void set_allocated_caption_storage_uuid_path(::TSP::UUIDPath* caption_storage_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_caption_storage_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_caption_storage_uuid_path();
  public:
  void unsafe_arena_set_allocated_caption_storage_uuid_path(
      ::TSP::UUIDPath* caption_storage_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_caption_storage_uuid_path();

  // @@protoc_insertion_point(class_scope:TSA.GalleryItemSelectionTransformer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSA::GalleryItemSelectionTransformerHelper* transformer_helper_;
    ::TSP::UUIDPath* caption_storage_uuid_path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryItemSelectionTransformerHelper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryItemSelectionTransformerHelper) */ {
 public:
  inline GalleryItemSelectionTransformerHelper() : GalleryItemSelectionTransformerHelper(nullptr) {}
  ~GalleryItemSelectionTransformerHelper() override;
  explicit PROTOBUF_CONSTEXPR GalleryItemSelectionTransformerHelper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryItemSelectionTransformerHelper(const GalleryItemSelectionTransformerHelper& from);
  GalleryItemSelectionTransformerHelper(GalleryItemSelectionTransformerHelper&& from) noexcept
    : GalleryItemSelectionTransformerHelper() {
    *this = ::std::move(from);
  }

  inline GalleryItemSelectionTransformerHelper& operator=(const GalleryItemSelectionTransformerHelper& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryItemSelectionTransformerHelper& operator=(GalleryItemSelectionTransformerHelper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryItemSelectionTransformerHelper& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryItemSelectionTransformerHelper* internal_default_instance() {
    return reinterpret_cast<const GalleryItemSelectionTransformerHelper*>(
               &_GalleryItemSelectionTransformerHelper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GalleryItemSelectionTransformerHelper& a, GalleryItemSelectionTransformerHelper& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryItemSelectionTransformerHelper* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryItemSelectionTransformerHelper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryItemSelectionTransformerHelper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryItemSelectionTransformerHelper>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryItemSelectionTransformerHelper& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryItemSelectionTransformerHelper& from) {
    GalleryItemSelectionTransformerHelper::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryItemSelectionTransformerHelper* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryItemSelectionTransformerHelper";
  }
  protected:
  explicit GalleryItemSelectionTransformerHelper(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemUuidPathsFieldNumber = 2,
    kDisplayedItemUuidPathFieldNumber = 1,
  };
  // repeated .TSP.UUIDPath item_uuid_paths = 2;
  int item_uuid_paths_size() const;
  private:
  int _internal_item_uuid_paths_size() const;
  public:
  void clear_item_uuid_paths();
  ::TSP::UUIDPath* mutable_item_uuid_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
      mutable_item_uuid_paths();
  private:
  const ::TSP::UUIDPath& _internal_item_uuid_paths(int index) const;
  ::TSP::UUIDPath* _internal_add_item_uuid_paths();
  public:
  const ::TSP::UUIDPath& item_uuid_paths(int index) const;
  ::TSP::UUIDPath* add_item_uuid_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
      item_uuid_paths() const;

  // optional .TSP.UUIDPath displayed_item_uuid_path = 1;
  bool has_displayed_item_uuid_path() const;
  private:
  bool _internal_has_displayed_item_uuid_path() const;
  public:
  void clear_displayed_item_uuid_path();
  const ::TSP::UUIDPath& displayed_item_uuid_path() const;
  PROTOBUF_NODISCARD ::TSP::UUIDPath* release_displayed_item_uuid_path();
  ::TSP::UUIDPath* mutable_displayed_item_uuid_path();
  void set_allocated_displayed_item_uuid_path(::TSP::UUIDPath* displayed_item_uuid_path);
  private:
  const ::TSP::UUIDPath& _internal_displayed_item_uuid_path() const;
  ::TSP::UUIDPath* _internal_mutable_displayed_item_uuid_path();
  public:
  void unsafe_arena_set_allocated_displayed_item_uuid_path(
      ::TSP::UUIDPath* displayed_item_uuid_path);
  ::TSP::UUIDPath* unsafe_arena_release_displayed_item_uuid_path();

  // @@protoc_insertion_point(class_scope:TSA.GalleryItemSelectionTransformerHelper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath > item_uuid_paths_;
    ::TSP::UUIDPath* displayed_item_uuid_path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryItemSetValueCommand_PropertyValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryItemSetValueCommand.PropertyValue) */ {
 public:
  inline GalleryItemSetValueCommand_PropertyValue() : GalleryItemSetValueCommand_PropertyValue(nullptr) {}
  ~GalleryItemSetValueCommand_PropertyValue() override;
  explicit PROTOBUF_CONSTEXPR GalleryItemSetValueCommand_PropertyValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryItemSetValueCommand_PropertyValue(const GalleryItemSetValueCommand_PropertyValue& from);
  GalleryItemSetValueCommand_PropertyValue(GalleryItemSetValueCommand_PropertyValue&& from) noexcept
    : GalleryItemSetValueCommand_PropertyValue() {
    *this = ::std::move(from);
  }

  inline GalleryItemSetValueCommand_PropertyValue& operator=(const GalleryItemSetValueCommand_PropertyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryItemSetValueCommand_PropertyValue& operator=(GalleryItemSetValueCommand_PropertyValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryItemSetValueCommand_PropertyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryItemSetValueCommand_PropertyValue* internal_default_instance() {
    return reinterpret_cast<const GalleryItemSetValueCommand_PropertyValue*>(
               &_GalleryItemSetValueCommand_PropertyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GalleryItemSetValueCommand_PropertyValue& a, GalleryItemSetValueCommand_PropertyValue& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryItemSetValueCommand_PropertyValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryItemSetValueCommand_PropertyValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryItemSetValueCommand_PropertyValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryItemSetValueCommand_PropertyValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryItemSetValueCommand_PropertyValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryItemSetValueCommand_PropertyValue& from) {
    GalleryItemSetValueCommand_PropertyValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryItemSetValueCommand_PropertyValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryItemSetValueCommand.PropertyValue";
  }
  protected:
  explicit GalleryItemSetValueCommand_PropertyValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessibilityDescriptionFieldNumber = 2,
    kImageDataFieldNumber = 1,
  };
  // optional string accessibility_description = 2;
  bool has_accessibility_description() const;
  private:
  bool _internal_has_accessibility_description() const;
  public:
  void clear_accessibility_description();
  const std::string& accessibility_description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_accessibility_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_accessibility_description();
  PROTOBUF_NODISCARD std::string* release_accessibility_description();
  void set_allocated_accessibility_description(std::string* accessibility_description);
  private:
  const std::string& _internal_accessibility_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_accessibility_description(const std::string& value);
  std::string* _internal_mutable_accessibility_description();
  public:

  // optional .TSP.DataReference image_data = 1;
  bool has_image_data() const;
  private:
  bool _internal_has_image_data() const;
  public:
  void clear_image_data();
  const ::TSP::DataReference& image_data() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_image_data();
  ::TSP::DataReference* mutable_image_data();
  void set_allocated_image_data(::TSP::DataReference* image_data);
  private:
  const ::TSP::DataReference& _internal_image_data() const;
  ::TSP::DataReference* _internal_mutable_image_data();
  public:
  void unsafe_arena_set_allocated_image_data(
      ::TSP::DataReference* image_data);
  ::TSP::DataReference* unsafe_arena_release_image_data();

  // @@protoc_insertion_point(class_scope:TSA.GalleryItemSetValueCommand.PropertyValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr accessibility_description_;
    ::TSP::DataReference* image_data_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class GalleryItemSetValueCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.GalleryItemSetValueCommand) */ {
 public:
  inline GalleryItemSetValueCommand() : GalleryItemSetValueCommand(nullptr) {}
  ~GalleryItemSetValueCommand() override;
  explicit PROTOBUF_CONSTEXPR GalleryItemSetValueCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GalleryItemSetValueCommand(const GalleryItemSetValueCommand& from);
  GalleryItemSetValueCommand(GalleryItemSetValueCommand&& from) noexcept
    : GalleryItemSetValueCommand() {
    *this = ::std::move(from);
  }

  inline GalleryItemSetValueCommand& operator=(const GalleryItemSetValueCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GalleryItemSetValueCommand& operator=(GalleryItemSetValueCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GalleryItemSetValueCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const GalleryItemSetValueCommand* internal_default_instance() {
    return reinterpret_cast<const GalleryItemSetValueCommand*>(
               &_GalleryItemSetValueCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GalleryItemSetValueCommand& a, GalleryItemSetValueCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GalleryItemSetValueCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GalleryItemSetValueCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GalleryItemSetValueCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GalleryItemSetValueCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GalleryItemSetValueCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GalleryItemSetValueCommand& from) {
    GalleryItemSetValueCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GalleryItemSetValueCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.GalleryItemSetValueCommand";
  }
  protected:
  explicit GalleryItemSetValueCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GalleryItemSetValueCommand_PropertyValue PropertyValue;

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kItemIdPathFieldNumber = 2,
    kValueFieldNumber = 4,
    kOldValueFieldNumber = 5,
    kPropertyFieldNumber = 3,
  };
  // required .TSK.CommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSK::CommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSK::CommandArchive* release_super();
  ::TSK::CommandArchive* mutable_super();
  void set_allocated_super(::TSK::CommandArchive* super);
  private:
  const ::TSK::CommandArchive& _internal_super() const;
  ::TSK::CommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSK::CommandArchive* super);
  ::TSK::CommandArchive* unsafe_arena_release_super();

  // optional .TSP.UUIDPath item_id_path = 2;
  bool has_item_id_path() const;
  private:
  bool _internal_has_item_id_path() const;
  public:
  void clear_item_id_path();
  const ::TSP::UUIDPath& item_id_path() const;
  PROTOBUF_NODISCARD ::TSP::UUIDPath* release_item_id_path();
  ::TSP::UUIDPath* mutable_item_id_path();
  void set_allocated_item_id_path(::TSP::UUIDPath* item_id_path);
  private:
  const ::TSP::UUIDPath& _internal_item_id_path() const;
  ::TSP::UUIDPath* _internal_mutable_item_id_path();
  public:
  void unsafe_arena_set_allocated_item_id_path(
      ::TSP::UUIDPath* item_id_path);
  ::TSP::UUIDPath* unsafe_arena_release_item_id_path();

  // optional .TSA.GalleryItemSetValueCommand.PropertyValue value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::TSA::GalleryItemSetValueCommand_PropertyValue& value() const;
  PROTOBUF_NODISCARD ::TSA::GalleryItemSetValueCommand_PropertyValue* release_value();
  ::TSA::GalleryItemSetValueCommand_PropertyValue* mutable_value();
  void set_allocated_value(::TSA::GalleryItemSetValueCommand_PropertyValue* value);
  private:
  const ::TSA::GalleryItemSetValueCommand_PropertyValue& _internal_value() const;
  ::TSA::GalleryItemSetValueCommand_PropertyValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::TSA::GalleryItemSetValueCommand_PropertyValue* value);
  ::TSA::GalleryItemSetValueCommand_PropertyValue* unsafe_arena_release_value();

  // optional .TSA.GalleryItemSetValueCommand.PropertyValue old_value = 5;
  bool has_old_value() const;
  private:
  bool _internal_has_old_value() const;
  public:
  void clear_old_value();
  const ::TSA::GalleryItemSetValueCommand_PropertyValue& old_value() const;
  PROTOBUF_NODISCARD ::TSA::GalleryItemSetValueCommand_PropertyValue* release_old_value();
  ::TSA::GalleryItemSetValueCommand_PropertyValue* mutable_old_value();
  void set_allocated_old_value(::TSA::GalleryItemSetValueCommand_PropertyValue* old_value);
  private:
  const ::TSA::GalleryItemSetValueCommand_PropertyValue& _internal_old_value() const;
  ::TSA::GalleryItemSetValueCommand_PropertyValue* _internal_mutable_old_value();
  public:
  void unsafe_arena_set_allocated_old_value(
      ::TSA::GalleryItemSetValueCommand_PropertyValue* old_value);
  ::TSA::GalleryItemSetValueCommand_PropertyValue* unsafe_arena_release_old_value();

  // optional .TSA.GalleryItemProperty property = 3;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  ::TSA::GalleryItemProperty property() const;
  void set_property(::TSA::GalleryItemProperty value);
  private:
  ::TSA::GalleryItemProperty _internal_property() const;
  void _internal_set_property(::TSA::GalleryItemProperty value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.GalleryItemSetValueCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSK::CommandArchive* super_;
    ::TSP::UUIDPath* item_id_path_;
    ::TSA::GalleryItemSetValueCommand_PropertyValue* value_;
    ::TSA::GalleryItemSetValueCommand_PropertyValue* old_value_;
    int property_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaboratorGalleryItemCursor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.CollaboratorGalleryItemCursor) */ {
 public:
  inline CollaboratorGalleryItemCursor() : CollaboratorGalleryItemCursor(nullptr) {}
  ~CollaboratorGalleryItemCursor() override;
  explicit PROTOBUF_CONSTEXPR CollaboratorGalleryItemCursor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaboratorGalleryItemCursor(const CollaboratorGalleryItemCursor& from);
  CollaboratorGalleryItemCursor(CollaboratorGalleryItemCursor&& from) noexcept
    : CollaboratorGalleryItemCursor() {
    *this = ::std::move(from);
  }

  inline CollaboratorGalleryItemCursor& operator=(const CollaboratorGalleryItemCursor& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaboratorGalleryItemCursor& operator=(CollaboratorGalleryItemCursor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaboratorGalleryItemCursor& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaboratorGalleryItemCursor* internal_default_instance() {
    return reinterpret_cast<const CollaboratorGalleryItemCursor*>(
               &_CollaboratorGalleryItemCursor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CollaboratorGalleryItemCursor& a, CollaboratorGalleryItemCursor& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaboratorGalleryItemCursor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaboratorGalleryItemCursor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollaboratorGalleryItemCursor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollaboratorGalleryItemCursor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollaboratorGalleryItemCursor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollaboratorGalleryItemCursor& from) {
    CollaboratorGalleryItemCursor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaboratorGalleryItemCursor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.CollaboratorGalleryItemCursor";
  }
  protected:
  explicit CollaboratorGalleryItemCursor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdsFieldNumber = 2,
    kDisplayedItemIdFieldNumber = 1,
  };
  // repeated .TSP.UUID item_ids = 2;
  int item_ids_size() const;
  private:
  int _internal_item_ids_size() const;
  public:
  void clear_item_ids();
  ::TSP::UUID* mutable_item_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
      mutable_item_ids();
  private:
  const ::TSP::UUID& _internal_item_ids(int index) const;
  ::TSP::UUID* _internal_add_item_ids();
  public:
  const ::TSP::UUID& item_ids(int index) const;
  ::TSP::UUID* add_item_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
      item_ids() const;

  // optional .TSP.UUID displayed_item_id = 1;
  bool has_displayed_item_id() const;
  private:
  bool _internal_has_displayed_item_id() const;
  public:
  void clear_displayed_item_id();
  const ::TSP::UUID& displayed_item_id() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_displayed_item_id();
  ::TSP::UUID* mutable_displayed_item_id();
  void set_allocated_displayed_item_id(::TSP::UUID* displayed_item_id);
  private:
  const ::TSP::UUID& _internal_displayed_item_id() const;
  ::TSP::UUID* _internal_mutable_displayed_item_id();
  public:
  void unsafe_arena_set_allocated_displayed_item_id(
      ::TSP::UUID* displayed_item_id);
  ::TSP::UUID* unsafe_arena_release_displayed_item_id();

  static const int kGalleryItemCursorFieldNumber = 400;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::CollaboratorCursorArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSA::CollaboratorGalleryItemCursor >, 11, false >
    gallery_item_cursor;
  // @@protoc_insertion_point(class_scope:TSA.CollaboratorGalleryItemCursor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID > item_ids_;
    ::TSP::UUID* displayed_item_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class WebVideoInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.WebVideoInfo) */ {
 public:
  inline WebVideoInfo() : WebVideoInfo(nullptr) {}
  ~WebVideoInfo() override;
  explicit PROTOBUF_CONSTEXPR WebVideoInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebVideoInfo(const WebVideoInfo& from);
  WebVideoInfo(WebVideoInfo&& from) noexcept
    : WebVideoInfo() {
    *this = ::std::move(from);
  }

  inline WebVideoInfo& operator=(const WebVideoInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebVideoInfo& operator=(WebVideoInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WebVideoInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebVideoInfo* internal_default_instance() {
    return reinterpret_cast<const WebVideoInfo*>(
               &_WebVideoInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(WebVideoInfo& a, WebVideoInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WebVideoInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebVideoInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebVideoInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebVideoInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WebVideoInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WebVideoInfo& from) {
    WebVideoInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WebVideoInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.WebVideoInfo";
  }
  protected:
  explicit WebVideoInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kPosterImageDataFieldNumber = 2,
    kAttributionFieldNumber = 3,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional .TSP.DataReference poster_image_data = 2;
  bool has_poster_image_data() const;
  private:
  bool _internal_has_poster_image_data() const;
  public:
  void clear_poster_image_data();
  const ::TSP::DataReference& poster_image_data() const;
  PROTOBUF_NODISCARD ::TSP::DataReference* release_poster_image_data();
  ::TSP::DataReference* mutable_poster_image_data();
  void set_allocated_poster_image_data(::TSP::DataReference* poster_image_data);
  private:
  const ::TSP::DataReference& _internal_poster_image_data() const;
  ::TSP::DataReference* _internal_mutable_poster_image_data();
  public:
  void unsafe_arena_set_allocated_poster_image_data(
      ::TSP::DataReference* poster_image_data);
  ::TSP::DataReference* unsafe_arena_release_poster_image_data();

  // optional .TSD.Attribution attribution = 3;
  bool has_attribution() const;
  private:
  bool _internal_has_attribution() const;
  public:
  void clear_attribution();
  const ::TSD::Attribution& attribution() const;
  PROTOBUF_NODISCARD ::TSD::Attribution* release_attribution();
  ::TSD::Attribution* mutable_attribution();
  void set_allocated_attribution(::TSD::Attribution* attribution);
  private:
  const ::TSD::Attribution& _internal_attribution() const;
  ::TSD::Attribution* _internal_mutable_attribution();
  public:
  void unsafe_arena_set_allocated_attribution(
      ::TSD::Attribution* attribution);
  ::TSD::Attribution* unsafe_arena_release_attribution();

  static const int kWebVideoInfoFieldNumber = 300;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSD::ImageArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSA::WebVideoInfo >, 11, false >
    web_video_info;
  // @@protoc_insertion_point(class_scope:TSA.WebVideoInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::TSP::DataReference* poster_image_data_;
    ::TSD::Attribution* attribution_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class CaptionPlacementArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.CaptionPlacementArchive) */ {
 public:
  inline CaptionPlacementArchive() : CaptionPlacementArchive(nullptr) {}
  ~CaptionPlacementArchive() override;
  explicit PROTOBUF_CONSTEXPR CaptionPlacementArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptionPlacementArchive(const CaptionPlacementArchive& from);
  CaptionPlacementArchive(CaptionPlacementArchive&& from) noexcept
    : CaptionPlacementArchive() {
    *this = ::std::move(from);
  }

  inline CaptionPlacementArchive& operator=(const CaptionPlacementArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptionPlacementArchive& operator=(CaptionPlacementArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptionPlacementArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptionPlacementArchive* internal_default_instance() {
    return reinterpret_cast<const CaptionPlacementArchive*>(
               &_CaptionPlacementArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CaptionPlacementArchive& a, CaptionPlacementArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptionPlacementArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptionPlacementArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptionPlacementArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptionPlacementArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaptionPlacementArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CaptionPlacementArchive& from) {
    CaptionPlacementArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptionPlacementArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.CaptionPlacementArchive";
  }
  protected:
  explicit CaptionPlacementArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptionAnchorLocationFieldNumber = 1,
    kDrawableAnchorLocationFieldNumber = 2,
  };
  // optional int32 caption_anchor_location = 1;
  bool has_caption_anchor_location() const;
  private:
  bool _internal_has_caption_anchor_location() const;
  public:
  void clear_caption_anchor_location();
  int32_t caption_anchor_location() const;
  void set_caption_anchor_location(int32_t value);
  private:
  int32_t _internal_caption_anchor_location() const;
  void _internal_set_caption_anchor_location(int32_t value);
  public:

  // optional int32 drawable_anchor_location = 2;
  bool has_drawable_anchor_location() const;
  private:
  bool _internal_has_drawable_anchor_location() const;
  public:
  void clear_drawable_anchor_location();
  int32_t drawable_anchor_location() const;
  void set_drawable_anchor_location(int32_t value);
  private:
  int32_t _internal_drawable_anchor_location() const;
  void _internal_set_drawable_anchor_location(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.CaptionPlacementArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t caption_anchor_location_;
    int32_t drawable_anchor_location_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class CaptionInfoArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.CaptionInfoArchive) */ {
 public:
  inline CaptionInfoArchive() : CaptionInfoArchive(nullptr) {}
  ~CaptionInfoArchive() override;
  explicit PROTOBUF_CONSTEXPR CaptionInfoArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CaptionInfoArchive(const CaptionInfoArchive& from);
  CaptionInfoArchive(CaptionInfoArchive&& from) noexcept
    : CaptionInfoArchive() {
    *this = ::std::move(from);
  }

  inline CaptionInfoArchive& operator=(const CaptionInfoArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptionInfoArchive& operator=(CaptionInfoArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptionInfoArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptionInfoArchive* internal_default_instance() {
    return reinterpret_cast<const CaptionInfoArchive*>(
               &_CaptionInfoArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CaptionInfoArchive& a, CaptionInfoArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptionInfoArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptionInfoArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptionInfoArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptionInfoArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CaptionInfoArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CaptionInfoArchive& from) {
    CaptionInfoArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CaptionInfoArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.CaptionInfoArchive";
  }
  protected:
  explicit CaptionInfoArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPlacementFieldNumber = 2,
    kChildInfoKindFieldNumber = 3,
  };
  // required .TSWP.ShapeInfoArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSWP::ShapeInfoArchive& super() const;
  PROTOBUF_NODISCARD ::TSWP::ShapeInfoArchive* release_super();
  ::TSWP::ShapeInfoArchive* mutable_super();
  void set_allocated_super(::TSWP::ShapeInfoArchive* super);
  private:
  const ::TSWP::ShapeInfoArchive& _internal_super() const;
  ::TSWP::ShapeInfoArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSWP::ShapeInfoArchive* super);
  ::TSWP::ShapeInfoArchive* unsafe_arena_release_super();

  // optional .TSP.Reference placement = 2;
  bool has_placement() const;
  private:
  bool _internal_has_placement() const;
  public:
  void clear_placement();
  const ::TSP::Reference& placement() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_placement();
  ::TSP::Reference* mutable_placement();
  void set_allocated_placement(::TSP::Reference* placement);
  private:
  const ::TSP::Reference& _internal_placement() const;
  ::TSP::Reference* _internal_mutable_placement();
  public:
  void unsafe_arena_set_allocated_placement(
      ::TSP::Reference* placement);
  ::TSP::Reference* unsafe_arena_release_placement();

  // optional .TSD.CaptionOrTitleKind childInfoKind = 3;
  bool has_childinfokind() const;
  private:
  bool _internal_has_childinfokind() const;
  public:
  void clear_childinfokind();
  ::TSD::CaptionOrTitleKind childinfokind() const;
  void set_childinfokind(::TSD::CaptionOrTitleKind value);
  private:
  ::TSD::CaptionOrTitleKind _internal_childinfokind() const;
  void _internal_set_childinfokind(::TSD::CaptionOrTitleKind value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.CaptionInfoArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSWP::ShapeInfoArchive* super_;
    ::TSP::Reference* placement_;
    int childinfokind_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// -------------------------------------------------------------------

class TitlePlacementCommandArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSA.TitlePlacementCommandArchive) */ {
 public:
  inline TitlePlacementCommandArchive() : TitlePlacementCommandArchive(nullptr) {}
  ~TitlePlacementCommandArchive() override;
  explicit PROTOBUF_CONSTEXPR TitlePlacementCommandArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TitlePlacementCommandArchive(const TitlePlacementCommandArchive& from);
  TitlePlacementCommandArchive(TitlePlacementCommandArchive&& from) noexcept
    : TitlePlacementCommandArchive() {
    *this = ::std::move(from);
  }

  inline TitlePlacementCommandArchive& operator=(const TitlePlacementCommandArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline TitlePlacementCommandArchive& operator=(TitlePlacementCommandArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TitlePlacementCommandArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const TitlePlacementCommandArchive* internal_default_instance() {
    return reinterpret_cast<const TitlePlacementCommandArchive*>(
               &_TitlePlacementCommandArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(TitlePlacementCommandArchive& a, TitlePlacementCommandArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(TitlePlacementCommandArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TitlePlacementCommandArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TitlePlacementCommandArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TitlePlacementCommandArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TitlePlacementCommandArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TitlePlacementCommandArchive& from) {
    TitlePlacementCommandArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TitlePlacementCommandArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSA.TitlePlacementCommandArchive";
  }
  protected:
  explicit TitlePlacementCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kPlacementFieldNumber = 3,
    kOldPlacementFieldNumber = 4,
    kPlacingChildInfoKindFieldNumber = 2,
  };
  // required .TSD.InfoCommandArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::InfoCommandArchive& super() const;
  PROTOBUF_NODISCARD ::TSD::InfoCommandArchive* release_super();
  ::TSD::InfoCommandArchive* mutable_super();
  void set_allocated_super(::TSD::InfoCommandArchive* super);
  private:
  const ::TSD::InfoCommandArchive& _internal_super() const;
  ::TSD::InfoCommandArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::InfoCommandArchive* super);
  ::TSD::InfoCommandArchive* unsafe_arena_release_super();

  // optional .TSP.Reference placement = 3;
  bool has_placement() const;
  private:
  bool _internal_has_placement() const;
  public:
  void clear_placement();
  const ::TSP::Reference& placement() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_placement();
  ::TSP::Reference* mutable_placement();
  void set_allocated_placement(::TSP::Reference* placement);
  private:
  const ::TSP::Reference& _internal_placement() const;
  ::TSP::Reference* _internal_mutable_placement();
  public:
  void unsafe_arena_set_allocated_placement(
      ::TSP::Reference* placement);
  ::TSP::Reference* unsafe_arena_release_placement();

  // optional .TSP.Reference old_placement = 4;
  bool has_old_placement() const;
  private:
  bool _internal_has_old_placement() const;
  public:
  void clear_old_placement();
  const ::TSP::Reference& old_placement() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_old_placement();
  ::TSP::Reference* mutable_old_placement();
  void set_allocated_old_placement(::TSP::Reference* old_placement);
  private:
  const ::TSP::Reference& _internal_old_placement() const;
  ::TSP::Reference* _internal_mutable_old_placement();
  public:
  void unsafe_arena_set_allocated_old_placement(
      ::TSP::Reference* old_placement);
  ::TSP::Reference* unsafe_arena_release_old_placement();

  // optional .TSD.CaptionOrTitleKind placing_child_info_kind = 2;
  bool has_placing_child_info_kind() const;
  private:
  bool _internal_has_placing_child_info_kind() const;
  public:
  void clear_placing_child_info_kind();
  ::TSD::CaptionOrTitleKind placing_child_info_kind() const;
  void set_placing_child_info_kind(::TSD::CaptionOrTitleKind value);
  private:
  ::TSD::CaptionOrTitleKind _internal_placing_child_info_kind() const;
  void _internal_set_placing_child_info_kind(::TSD::CaptionOrTitleKind value);
  public:

  // @@protoc_insertion_point(class_scope:TSA.TitlePlacementCommandArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::InfoCommandArchive* super_;
    ::TSP::Reference* placement_;
    ::TSP::Reference* old_placement_;
    int placing_child_info_kind_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSAArchives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DocumentArchive

// required .TSK.DocumentArchive super = 1;
inline bool DocumentArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::DocumentArchive& DocumentArchive::_internal_super() const {
  const ::TSK::DocumentArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::DocumentArchive&>(
      ::TSK::_DocumentArchive_default_instance_);
}
inline const ::TSK::DocumentArchive& DocumentArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.super)
  return _internal_super();
}
inline void DocumentArchive::unsafe_arena_set_allocated_super(
    ::TSK::DocumentArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.DocumentArchive.super)
}
inline ::TSK::DocumentArchive* DocumentArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::DocumentArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::DocumentArchive* DocumentArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.DocumentArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::DocumentArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::DocumentArchive* DocumentArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::DocumentArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::DocumentArchive* DocumentArchive::mutable_super() {
  ::TSK::DocumentArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.super)
  return _msg;
}
inline void DocumentArchive::set_allocated_super(::TSK::DocumentArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.DocumentArchive.super)
}

// repeated .TSWP.TextPresetDisplayItemArchive text_preset_display_items = 2;
inline int DocumentArchive::_internal_text_preset_display_items_size() const {
  return _impl_.text_preset_display_items_.size();
}
inline int DocumentArchive::text_preset_display_items_size() const {
  return _internal_text_preset_display_items_size();
}
inline ::TSWP::TextPresetDisplayItemArchive* DocumentArchive::mutable_text_preset_display_items(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.text_preset_display_items)
  return _impl_.text_preset_display_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TextPresetDisplayItemArchive >*
DocumentArchive::mutable_text_preset_display_items() {
  // @@protoc_insertion_point(field_mutable_list:TSA.DocumentArchive.text_preset_display_items)
  return &_impl_.text_preset_display_items_;
}
inline const ::TSWP::TextPresetDisplayItemArchive& DocumentArchive::_internal_text_preset_display_items(int index) const {
  return _impl_.text_preset_display_items_.Get(index);
}
inline const ::TSWP::TextPresetDisplayItemArchive& DocumentArchive::text_preset_display_items(int index) const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.text_preset_display_items)
  return _internal_text_preset_display_items(index);
}
inline ::TSWP::TextPresetDisplayItemArchive* DocumentArchive::_internal_add_text_preset_display_items() {
  return _impl_.text_preset_display_items_.Add();
}
inline ::TSWP::TextPresetDisplayItemArchive* DocumentArchive::add_text_preset_display_items() {
  ::TSWP::TextPresetDisplayItemArchive* _add = _internal_add_text_preset_display_items();
  // @@protoc_insertion_point(field_add:TSA.DocumentArchive.text_preset_display_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSWP::TextPresetDisplayItemArchive >&
DocumentArchive::text_preset_display_items() const {
  // @@protoc_insertion_point(field_list:TSA.DocumentArchive.text_preset_display_items)
  return _impl_.text_preset_display_items_;
}

// optional string document_language = 3;
inline bool DocumentArchive::_internal_has_document_language() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DocumentArchive::has_document_language() const {
  return _internal_has_document_language();
}
inline void DocumentArchive::clear_document_language() {
  _impl_.document_language_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DocumentArchive::document_language() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.document_language)
  return _internal_document_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DocumentArchive::set_document_language(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.document_language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSA.DocumentArchive.document_language)
}
inline std::string* DocumentArchive::mutable_document_language() {
  std::string* _s = _internal_mutable_document_language();
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.document_language)
  return _s;
}
inline const std::string& DocumentArchive::_internal_document_language() const {
  return _impl_.document_language_.Get();
}
inline void DocumentArchive::_internal_set_document_language(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.document_language_.Set(value, GetArenaForAllocation());
}
inline std::string* DocumentArchive::_internal_mutable_document_language() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.document_language_.Mutable(GetArenaForAllocation());
}
inline std::string* DocumentArchive::release_document_language() {
  // @@protoc_insertion_point(field_release:TSA.DocumentArchive.document_language)
  if (!_internal_has_document_language()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.document_language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.document_language_.IsDefault()) {
    _impl_.document_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DocumentArchive::set_allocated_document_language(std::string* document_language) {
  if (document_language != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.document_language_.SetAllocated(document_language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.document_language_.IsDefault()) {
    _impl_.document_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSA.DocumentArchive.document_language)
}

// optional .TSP.Reference calculation_engine = 4;
inline bool DocumentArchive::_internal_has_calculation_engine() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.calculation_engine_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_calculation_engine() const {
  return _internal_has_calculation_engine();
}
inline const ::TSP::Reference& DocumentArchive::_internal_calculation_engine() const {
  const ::TSP::Reference* p = _impl_.calculation_engine_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::calculation_engine() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.calculation_engine)
  return _internal_calculation_engine();
}
inline void DocumentArchive::unsafe_arena_set_allocated_calculation_engine(
    ::TSP::Reference* calculation_engine) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.calculation_engine_);
  }
  _impl_.calculation_engine_ = calculation_engine;
  if (calculation_engine) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.DocumentArchive.calculation_engine)
}
inline ::TSP::Reference* DocumentArchive::release_calculation_engine() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.calculation_engine_;
  _impl_.calculation_engine_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_calculation_engine() {
  // @@protoc_insertion_point(field_release:TSA.DocumentArchive.calculation_engine)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.calculation_engine_;
  _impl_.calculation_engine_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_calculation_engine() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.calculation_engine_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.calculation_engine_ = p;
  }
  return _impl_.calculation_engine_;
}
inline ::TSP::Reference* DocumentArchive::mutable_calculation_engine() {
  ::TSP::Reference* _msg = _internal_mutable_calculation_engine();
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.calculation_engine)
  return _msg;
}
inline void DocumentArchive::set_allocated_calculation_engine(::TSP::Reference* calculation_engine) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.calculation_engine_);
  }
  if (calculation_engine) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(calculation_engine));
    if (message_arena != submessage_arena) {
      calculation_engine = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, calculation_engine, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.calculation_engine_ = calculation_engine;
  // @@protoc_insertion_point(field_set_allocated:TSA.DocumentArchive.calculation_engine)
}

// optional .TSP.Reference view_state = 5;
inline bool DocumentArchive::_internal_has_view_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.view_state_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_view_state() const {
  return _internal_has_view_state();
}
inline const ::TSP::Reference& DocumentArchive::_internal_view_state() const {
  const ::TSP::Reference* p = _impl_.view_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::view_state() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.view_state)
  return _internal_view_state();
}
inline void DocumentArchive::unsafe_arena_set_allocated_view_state(
    ::TSP::Reference* view_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.view_state_);
  }
  _impl_.view_state_ = view_state;
  if (view_state) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.DocumentArchive.view_state)
}
inline ::TSP::Reference* DocumentArchive::release_view_state() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.view_state_;
  _impl_.view_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_view_state() {
  // @@protoc_insertion_point(field_release:TSA.DocumentArchive.view_state)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.view_state_;
  _impl_.view_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_view_state() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.view_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.view_state_ = p;
  }
  return _impl_.view_state_;
}
inline ::TSP::Reference* DocumentArchive::mutable_view_state() {
  ::TSP::Reference* _msg = _internal_mutable_view_state();
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.view_state)
  return _msg;
}
inline void DocumentArchive::set_allocated_view_state(::TSP::Reference* view_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.view_state_);
  }
  if (view_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(view_state));
    if (message_arena != submessage_arena) {
      view_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, view_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.view_state_ = view_state;
  // @@protoc_insertion_point(field_set_allocated:TSA.DocumentArchive.view_state)
}

// optional .TSP.Reference function_browser_state = 6;
inline bool DocumentArchive::_internal_has_function_browser_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.function_browser_state_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_function_browser_state() const {
  return _internal_has_function_browser_state();
}
inline const ::TSP::Reference& DocumentArchive::_internal_function_browser_state() const {
  const ::TSP::Reference* p = _impl_.function_browser_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::function_browser_state() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.function_browser_state)
  return _internal_function_browser_state();
}
inline void DocumentArchive::unsafe_arena_set_allocated_function_browser_state(
    ::TSP::Reference* function_browser_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.function_browser_state_);
  }
  _impl_.function_browser_state_ = function_browser_state;
  if (function_browser_state) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.DocumentArchive.function_browser_state)
}
inline ::TSP::Reference* DocumentArchive::release_function_browser_state() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.function_browser_state_;
  _impl_.function_browser_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_function_browser_state() {
  // @@protoc_insertion_point(field_release:TSA.DocumentArchive.function_browser_state)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.function_browser_state_;
  _impl_.function_browser_state_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_function_browser_state() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.function_browser_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.function_browser_state_ = p;
  }
  return _impl_.function_browser_state_;
}
inline ::TSP::Reference* DocumentArchive::mutable_function_browser_state() {
  ::TSP::Reference* _msg = _internal_mutable_function_browser_state();
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.function_browser_state)
  return _msg;
}
inline void DocumentArchive::set_allocated_function_browser_state(::TSP::Reference* function_browser_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.function_browser_state_);
  }
  if (function_browser_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_browser_state));
    if (message_arena != submessage_arena) {
      function_browser_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_browser_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.function_browser_state_ = function_browser_state;
  // @@protoc_insertion_point(field_set_allocated:TSA.DocumentArchive.function_browser_state)
}

// optional .TSP.Reference tables_custom_format_list = 7;
inline bool DocumentArchive::_internal_has_tables_custom_format_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.tables_custom_format_list_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_tables_custom_format_list() const {
  return _internal_has_tables_custom_format_list();
}
inline const ::TSP::Reference& DocumentArchive::_internal_tables_custom_format_list() const {
  const ::TSP::Reference* p = _impl_.tables_custom_format_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::tables_custom_format_list() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.tables_custom_format_list)
  return _internal_tables_custom_format_list();
}
inline void DocumentArchive::unsafe_arena_set_allocated_tables_custom_format_list(
    ::TSP::Reference* tables_custom_format_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tables_custom_format_list_);
  }
  _impl_.tables_custom_format_list_ = tables_custom_format_list;
  if (tables_custom_format_list) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.DocumentArchive.tables_custom_format_list)
}
inline ::TSP::Reference* DocumentArchive::release_tables_custom_format_list() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.tables_custom_format_list_;
  _impl_.tables_custom_format_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_tables_custom_format_list() {
  // @@protoc_insertion_point(field_release:TSA.DocumentArchive.tables_custom_format_list)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.tables_custom_format_list_;
  _impl_.tables_custom_format_list_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_tables_custom_format_list() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.tables_custom_format_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.tables_custom_format_list_ = p;
  }
  return _impl_.tables_custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::mutable_tables_custom_format_list() {
  ::TSP::Reference* _msg = _internal_mutable_tables_custom_format_list();
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.tables_custom_format_list)
  return _msg;
}
inline void DocumentArchive::set_allocated_tables_custom_format_list(::TSP::Reference* tables_custom_format_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.tables_custom_format_list_);
  }
  if (tables_custom_format_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tables_custom_format_list));
    if (message_arena != submessage_arena) {
      tables_custom_format_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tables_custom_format_list, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.tables_custom_format_list_ = tables_custom_format_list;
  // @@protoc_insertion_point(field_set_allocated:TSA.DocumentArchive.tables_custom_format_list)
}

// optional bool needs_media_compatibility_upgrade = 8;
inline bool DocumentArchive::_internal_has_needs_media_compatibility_upgrade() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DocumentArchive::has_needs_media_compatibility_upgrade() const {
  return _internal_has_needs_media_compatibility_upgrade();
}
inline void DocumentArchive::clear_needs_media_compatibility_upgrade() {
  _impl_.needs_media_compatibility_upgrade_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool DocumentArchive::_internal_needs_media_compatibility_upgrade() const {
  return _impl_.needs_media_compatibility_upgrade_;
}
inline bool DocumentArchive::needs_media_compatibility_upgrade() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.needs_media_compatibility_upgrade)
  return _internal_needs_media_compatibility_upgrade();
}
inline void DocumentArchive::_internal_set_needs_media_compatibility_upgrade(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.needs_media_compatibility_upgrade_ = value;
}
inline void DocumentArchive::set_needs_media_compatibility_upgrade(bool value) {
  _internal_set_needs_media_compatibility_upgrade(value);
  // @@protoc_insertion_point(field_set:TSA.DocumentArchive.needs_media_compatibility_upgrade)
}

// optional string template_identifier = 9;
inline bool DocumentArchive::_internal_has_template_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DocumentArchive::has_template_identifier() const {
  return _internal_has_template_identifier();
}
inline void DocumentArchive::clear_template_identifier() {
  _impl_.template_identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DocumentArchive::template_identifier() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.template_identifier)
  return _internal_template_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DocumentArchive::set_template_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.template_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSA.DocumentArchive.template_identifier)
}
inline std::string* DocumentArchive::mutable_template_identifier() {
  std::string* _s = _internal_mutable_template_identifier();
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.template_identifier)
  return _s;
}
inline const std::string& DocumentArchive::_internal_template_identifier() const {
  return _impl_.template_identifier_.Get();
}
inline void DocumentArchive::_internal_set_template_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.template_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* DocumentArchive::_internal_mutable_template_identifier() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.template_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* DocumentArchive::release_template_identifier() {
  // @@protoc_insertion_point(field_release:TSA.DocumentArchive.template_identifier)
  if (!_internal_has_template_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.template_identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.template_identifier_.IsDefault()) {
    _impl_.template_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void DocumentArchive::set_allocated_template_identifier(std::string* template_identifier) {
  if (template_identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.template_identifier_.SetAllocated(template_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.template_identifier_.IsDefault()) {
    _impl_.template_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSA.DocumentArchive.template_identifier)
}

// optional .TSP.Reference shortcut_controller = 10;
inline bool DocumentArchive::_internal_has_shortcut_controller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shortcut_controller_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_shortcut_controller() const {
  return _internal_has_shortcut_controller();
}
inline const ::TSP::Reference& DocumentArchive::_internal_shortcut_controller() const {
  const ::TSP::Reference* p = _impl_.shortcut_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::shortcut_controller() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.shortcut_controller)
  return _internal_shortcut_controller();
}
inline void DocumentArchive::unsafe_arena_set_allocated_shortcut_controller(
    ::TSP::Reference* shortcut_controller) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shortcut_controller_);
  }
  _impl_.shortcut_controller_ = shortcut_controller;
  if (shortcut_controller) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.DocumentArchive.shortcut_controller)
}
inline ::TSP::Reference* DocumentArchive::release_shortcut_controller() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.shortcut_controller_;
  _impl_.shortcut_controller_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_shortcut_controller() {
  // @@protoc_insertion_point(field_release:TSA.DocumentArchive.shortcut_controller)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.shortcut_controller_;
  _impl_.shortcut_controller_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_shortcut_controller() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.shortcut_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.shortcut_controller_ = p;
  }
  return _impl_.shortcut_controller_;
}
inline ::TSP::Reference* DocumentArchive::mutable_shortcut_controller() {
  ::TSP::Reference* _msg = _internal_mutable_shortcut_controller();
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.shortcut_controller)
  return _msg;
}
inline void DocumentArchive::set_allocated_shortcut_controller(::TSP::Reference* shortcut_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shortcut_controller_);
  }
  if (shortcut_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shortcut_controller));
    if (message_arena != submessage_arena) {
      shortcut_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shortcut_controller, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.shortcut_controller_ = shortcut_controller;
  // @@protoc_insertion_point(field_set_allocated:TSA.DocumentArchive.shortcut_controller)
}

// optional .TSP.Reference annotation_cache_deprecated = 11;
inline bool DocumentArchive::_internal_has_annotation_cache_deprecated() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.annotation_cache_deprecated_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_annotation_cache_deprecated() const {
  return _internal_has_annotation_cache_deprecated();
}
inline const ::TSP::Reference& DocumentArchive::_internal_annotation_cache_deprecated() const {
  const ::TSP::Reference* p = _impl_.annotation_cache_deprecated_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::annotation_cache_deprecated() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.annotation_cache_deprecated)
  return _internal_annotation_cache_deprecated();
}
inline void DocumentArchive::unsafe_arena_set_allocated_annotation_cache_deprecated(
    ::TSP::Reference* annotation_cache_deprecated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotation_cache_deprecated_);
  }
  _impl_.annotation_cache_deprecated_ = annotation_cache_deprecated;
  if (annotation_cache_deprecated) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.DocumentArchive.annotation_cache_deprecated)
}
inline ::TSP::Reference* DocumentArchive::release_annotation_cache_deprecated() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.annotation_cache_deprecated_;
  _impl_.annotation_cache_deprecated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_annotation_cache_deprecated() {
  // @@protoc_insertion_point(field_release:TSA.DocumentArchive.annotation_cache_deprecated)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::Reference* temp = _impl_.annotation_cache_deprecated_;
  _impl_.annotation_cache_deprecated_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_annotation_cache_deprecated() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.annotation_cache_deprecated_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.annotation_cache_deprecated_ = p;
  }
  return _impl_.annotation_cache_deprecated_;
}
inline ::TSP::Reference* DocumentArchive::mutable_annotation_cache_deprecated() {
  ::TSP::Reference* _msg = _internal_mutable_annotation_cache_deprecated();
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.annotation_cache_deprecated)
  return _msg;
}
inline void DocumentArchive::set_allocated_annotation_cache_deprecated(::TSP::Reference* annotation_cache_deprecated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotation_cache_deprecated_);
  }
  if (annotation_cache_deprecated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_cache_deprecated));
    if (message_arena != submessage_arena) {
      annotation_cache_deprecated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_cache_deprecated, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.annotation_cache_deprecated_ = annotation_cache_deprecated;
  // @@protoc_insertion_point(field_set_allocated:TSA.DocumentArchive.annotation_cache_deprecated)
}

// optional .TSP.Reference custom_format_list = 12;
inline bool DocumentArchive::_internal_has_custom_format_list() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_format_list_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_custom_format_list() const {
  return _internal_has_custom_format_list();
}
inline const ::TSP::Reference& DocumentArchive::_internal_custom_format_list() const {
  const ::TSP::Reference* p = _impl_.custom_format_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::custom_format_list() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.custom_format_list)
  return _internal_custom_format_list();
}
inline void DocumentArchive::unsafe_arena_set_allocated_custom_format_list(
    ::TSP::Reference* custom_format_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_list_);
  }
  _impl_.custom_format_list_ = custom_format_list;
  if (custom_format_list) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.DocumentArchive.custom_format_list)
}
inline ::TSP::Reference* DocumentArchive::release_custom_format_list() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.custom_format_list_;
  _impl_.custom_format_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_custom_format_list() {
  // @@protoc_insertion_point(field_release:TSA.DocumentArchive.custom_format_list)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::Reference* temp = _impl_.custom_format_list_;
  _impl_.custom_format_list_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_custom_format_list() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.custom_format_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.custom_format_list_ = p;
  }
  return _impl_.custom_format_list_;
}
inline ::TSP::Reference* DocumentArchive::mutable_custom_format_list() {
  ::TSP::Reference* _msg = _internal_mutable_custom_format_list();
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.custom_format_list)
  return _msg;
}
inline void DocumentArchive::set_allocated_custom_format_list(::TSP::Reference* custom_format_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_list_);
  }
  if (custom_format_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_list));
    if (message_arena != submessage_arena) {
      custom_format_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format_list, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.custom_format_list_ = custom_format_list;
  // @@protoc_insertion_point(field_set_allocated:TSA.DocumentArchive.custom_format_list)
}

// optional .TSP.Reference annotation_cache_deprecated_2 = 13;
inline bool DocumentArchive::_internal_has_annotation_cache_deprecated_2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.annotation_cache_deprecated_2_ != nullptr);
  return value;
}
inline bool DocumentArchive::has_annotation_cache_deprecated_2() const {
  return _internal_has_annotation_cache_deprecated_2();
}
inline const ::TSP::Reference& DocumentArchive::_internal_annotation_cache_deprecated_2() const {
  const ::TSP::Reference* p = _impl_.annotation_cache_deprecated_2_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& DocumentArchive::annotation_cache_deprecated_2() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.annotation_cache_deprecated_2)
  return _internal_annotation_cache_deprecated_2();
}
inline void DocumentArchive::unsafe_arena_set_allocated_annotation_cache_deprecated_2(
    ::TSP::Reference* annotation_cache_deprecated_2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotation_cache_deprecated_2_);
  }
  _impl_.annotation_cache_deprecated_2_ = annotation_cache_deprecated_2;
  if (annotation_cache_deprecated_2) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.DocumentArchive.annotation_cache_deprecated_2)
}
inline ::TSP::Reference* DocumentArchive::release_annotation_cache_deprecated_2() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = _impl_.annotation_cache_deprecated_2_;
  _impl_.annotation_cache_deprecated_2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* DocumentArchive::unsafe_arena_release_annotation_cache_deprecated_2() {
  // @@protoc_insertion_point(field_release:TSA.DocumentArchive.annotation_cache_deprecated_2)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = _impl_.annotation_cache_deprecated_2_;
  _impl_.annotation_cache_deprecated_2_ = nullptr;
  return temp;
}
inline ::TSP::Reference* DocumentArchive::_internal_mutable_annotation_cache_deprecated_2() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.annotation_cache_deprecated_2_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.annotation_cache_deprecated_2_ = p;
  }
  return _impl_.annotation_cache_deprecated_2_;
}
inline ::TSP::Reference* DocumentArchive::mutable_annotation_cache_deprecated_2() {
  ::TSP::Reference* _msg = _internal_mutable_annotation_cache_deprecated_2();
  // @@protoc_insertion_point(field_mutable:TSA.DocumentArchive.annotation_cache_deprecated_2)
  return _msg;
}
inline void DocumentArchive::set_allocated_annotation_cache_deprecated_2(::TSP::Reference* annotation_cache_deprecated_2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.annotation_cache_deprecated_2_);
  }
  if (annotation_cache_deprecated_2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotation_cache_deprecated_2));
    if (message_arena != submessage_arena) {
      annotation_cache_deprecated_2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotation_cache_deprecated_2, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.annotation_cache_deprecated_2_ = annotation_cache_deprecated_2;
  // @@protoc_insertion_point(field_set_allocated:TSA.DocumentArchive.annotation_cache_deprecated_2)
}

// optional bool collaborative_media_compatibility_upgrade_did_fail = 14;
inline bool DocumentArchive::_internal_has_collaborative_media_compatibility_upgrade_did_fail() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DocumentArchive::has_collaborative_media_compatibility_upgrade_did_fail() const {
  return _internal_has_collaborative_media_compatibility_upgrade_did_fail();
}
inline void DocumentArchive::clear_collaborative_media_compatibility_upgrade_did_fail() {
  _impl_.collaborative_media_compatibility_upgrade_did_fail_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool DocumentArchive::_internal_collaborative_media_compatibility_upgrade_did_fail() const {
  return _impl_.collaborative_media_compatibility_upgrade_did_fail_;
}
inline bool DocumentArchive::collaborative_media_compatibility_upgrade_did_fail() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.collaborative_media_compatibility_upgrade_did_fail)
  return _internal_collaborative_media_compatibility_upgrade_did_fail();
}
inline void DocumentArchive::_internal_set_collaborative_media_compatibility_upgrade_did_fail(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.collaborative_media_compatibility_upgrade_did_fail_ = value;
}
inline void DocumentArchive::set_collaborative_media_compatibility_upgrade_did_fail(bool value) {
  _internal_set_collaborative_media_compatibility_upgrade_did_fail(value);
  // @@protoc_insertion_point(field_set:TSA.DocumentArchive.collaborative_media_compatibility_upgrade_did_fail)
}

// optional bool can_use_hevc = 15;
inline bool DocumentArchive::_internal_has_can_use_hevc() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DocumentArchive::has_can_use_hevc() const {
  return _internal_has_can_use_hevc();
}
inline void DocumentArchive::clear_can_use_hevc() {
  _impl_.can_use_hevc_ = false;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline bool DocumentArchive::_internal_can_use_hevc() const {
  return _impl_.can_use_hevc_;
}
inline bool DocumentArchive::can_use_hevc() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.can_use_hevc)
  return _internal_can_use_hevc();
}
inline void DocumentArchive::_internal_set_can_use_hevc(bool value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.can_use_hevc_ = value;
}
inline void DocumentArchive::set_can_use_hevc(bool value) {
  _internal_set_can_use_hevc(value);
  // @@protoc_insertion_point(field_set:TSA.DocumentArchive.can_use_hevc)
}

// optional bool is_content_source = 16;
inline bool DocumentArchive::_internal_has_is_content_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DocumentArchive::has_is_content_source() const {
  return _internal_has_is_content_source();
}
inline void DocumentArchive::clear_is_content_source() {
  _impl_.is_content_source_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool DocumentArchive::_internal_is_content_source() const {
  return _impl_.is_content_source_;
}
inline bool DocumentArchive::is_content_source() const {
  // @@protoc_insertion_point(field_get:TSA.DocumentArchive.is_content_source)
  return _internal_is_content_source();
}
inline void DocumentArchive::_internal_set_is_content_source(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.is_content_source_ = value;
}
inline void DocumentArchive::set_is_content_source(bool value) {
  _internal_set_is_content_source(value);
  // @@protoc_insertion_point(field_set:TSA.DocumentArchive.is_content_source)
}

// -------------------------------------------------------------------

// FunctionBrowserStateArchive

// repeated uint32 recent_functions = 1;
inline int FunctionBrowserStateArchive::_internal_recent_functions_size() const {
  return _impl_.recent_functions_.size();
}
inline int FunctionBrowserStateArchive::recent_functions_size() const {
  return _internal_recent_functions_size();
}
inline void FunctionBrowserStateArchive::clear_recent_functions() {
  _impl_.recent_functions_.Clear();
}
inline uint32_t FunctionBrowserStateArchive::_internal_recent_functions(int index) const {
  return _impl_.recent_functions_.Get(index);
}
inline uint32_t FunctionBrowserStateArchive::recent_functions(int index) const {
  // @@protoc_insertion_point(field_get:TSA.FunctionBrowserStateArchive.recent_functions)
  return _internal_recent_functions(index);
}
inline void FunctionBrowserStateArchive::set_recent_functions(int index, uint32_t value) {
  _impl_.recent_functions_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSA.FunctionBrowserStateArchive.recent_functions)
}
inline void FunctionBrowserStateArchive::_internal_add_recent_functions(uint32_t value) {
  _impl_.recent_functions_.Add(value);
}
inline void FunctionBrowserStateArchive::add_recent_functions(uint32_t value) {
  _internal_add_recent_functions(value);
  // @@protoc_insertion_point(field_add:TSA.FunctionBrowserStateArchive.recent_functions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FunctionBrowserStateArchive::_internal_recent_functions() const {
  return _impl_.recent_functions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FunctionBrowserStateArchive::recent_functions() const {
  // @@protoc_insertion_point(field_list:TSA.FunctionBrowserStateArchive.recent_functions)
  return _internal_recent_functions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FunctionBrowserStateArchive::_internal_mutable_recent_functions() {
  return &_impl_.recent_functions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FunctionBrowserStateArchive::mutable_recent_functions() {
  // @@protoc_insertion_point(field_mutable_list:TSA.FunctionBrowserStateArchive.recent_functions)
  return _internal_mutable_recent_functions();
}

// repeated uint32 back_functions = 2;
inline int FunctionBrowserStateArchive::_internal_back_functions_size() const {
  return _impl_.back_functions_.size();
}
inline int FunctionBrowserStateArchive::back_functions_size() const {
  return _internal_back_functions_size();
}
inline void FunctionBrowserStateArchive::clear_back_functions() {
  _impl_.back_functions_.Clear();
}
inline uint32_t FunctionBrowserStateArchive::_internal_back_functions(int index) const {
  return _impl_.back_functions_.Get(index);
}
inline uint32_t FunctionBrowserStateArchive::back_functions(int index) const {
  // @@protoc_insertion_point(field_get:TSA.FunctionBrowserStateArchive.back_functions)
  return _internal_back_functions(index);
}
inline void FunctionBrowserStateArchive::set_back_functions(int index, uint32_t value) {
  _impl_.back_functions_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSA.FunctionBrowserStateArchive.back_functions)
}
inline void FunctionBrowserStateArchive::_internal_add_back_functions(uint32_t value) {
  _impl_.back_functions_.Add(value);
}
inline void FunctionBrowserStateArchive::add_back_functions(uint32_t value) {
  _internal_add_back_functions(value);
  // @@protoc_insertion_point(field_add:TSA.FunctionBrowserStateArchive.back_functions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FunctionBrowserStateArchive::_internal_back_functions() const {
  return _impl_.back_functions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FunctionBrowserStateArchive::back_functions() const {
  // @@protoc_insertion_point(field_list:TSA.FunctionBrowserStateArchive.back_functions)
  return _internal_back_functions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FunctionBrowserStateArchive::_internal_mutable_back_functions() {
  return &_impl_.back_functions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FunctionBrowserStateArchive::mutable_back_functions() {
  // @@protoc_insertion_point(field_mutable_list:TSA.FunctionBrowserStateArchive.back_functions)
  return _internal_mutable_back_functions();
}

// repeated uint32 forward_functions = 3;
inline int FunctionBrowserStateArchive::_internal_forward_functions_size() const {
  return _impl_.forward_functions_.size();
}
inline int FunctionBrowserStateArchive::forward_functions_size() const {
  return _internal_forward_functions_size();
}
inline void FunctionBrowserStateArchive::clear_forward_functions() {
  _impl_.forward_functions_.Clear();
}
inline uint32_t FunctionBrowserStateArchive::_internal_forward_functions(int index) const {
  return _impl_.forward_functions_.Get(index);
}
inline uint32_t FunctionBrowserStateArchive::forward_functions(int index) const {
  // @@protoc_insertion_point(field_get:TSA.FunctionBrowserStateArchive.forward_functions)
  return _internal_forward_functions(index);
}
inline void FunctionBrowserStateArchive::set_forward_functions(int index, uint32_t value) {
  _impl_.forward_functions_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSA.FunctionBrowserStateArchive.forward_functions)
}
inline void FunctionBrowserStateArchive::_internal_add_forward_functions(uint32_t value) {
  _impl_.forward_functions_.Add(value);
}
inline void FunctionBrowserStateArchive::add_forward_functions(uint32_t value) {
  _internal_add_forward_functions(value);
  // @@protoc_insertion_point(field_add:TSA.FunctionBrowserStateArchive.forward_functions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FunctionBrowserStateArchive::_internal_forward_functions() const {
  return _impl_.forward_functions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
FunctionBrowserStateArchive::forward_functions() const {
  // @@protoc_insertion_point(field_list:TSA.FunctionBrowserStateArchive.forward_functions)
  return _internal_forward_functions();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FunctionBrowserStateArchive::_internal_mutable_forward_functions() {
  return &_impl_.forward_functions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
FunctionBrowserStateArchive::mutable_forward_functions() {
  // @@protoc_insertion_point(field_mutable_list:TSA.FunctionBrowserStateArchive.forward_functions)
  return _internal_mutable_forward_functions();
}

// optional uint32 current_function = 4;
inline bool FunctionBrowserStateArchive::_internal_has_current_function() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionBrowserStateArchive::has_current_function() const {
  return _internal_has_current_function();
}
inline void FunctionBrowserStateArchive::clear_current_function() {
  _impl_.current_function_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t FunctionBrowserStateArchive::_internal_current_function() const {
  return _impl_.current_function_;
}
inline uint32_t FunctionBrowserStateArchive::current_function() const {
  // @@protoc_insertion_point(field_get:TSA.FunctionBrowserStateArchive.current_function)
  return _internal_current_function();
}
inline void FunctionBrowserStateArchive::_internal_set_current_function(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.current_function_ = value;
}
inline void FunctionBrowserStateArchive::set_current_function(uint32_t value) {
  _internal_set_current_function(value);
  // @@protoc_insertion_point(field_set:TSA.FunctionBrowserStateArchive.current_function)
}

// -------------------------------------------------------------------

// ThemePresetsArchive

// repeated .TSP.Reference caption_style_presets = 1;
inline int ThemePresetsArchive::_internal_caption_style_presets_size() const {
  return _impl_.caption_style_presets_.size();
}
inline int ThemePresetsArchive::caption_style_presets_size() const {
  return _internal_caption_style_presets_size();
}
inline ::TSP::Reference* ThemePresetsArchive::mutable_caption_style_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.ThemePresetsArchive.caption_style_presets)
  return _impl_.caption_style_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ThemePresetsArchive::mutable_caption_style_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSA.ThemePresetsArchive.caption_style_presets)
  return &_impl_.caption_style_presets_;
}
inline const ::TSP::Reference& ThemePresetsArchive::_internal_caption_style_presets(int index) const {
  return _impl_.caption_style_presets_.Get(index);
}
inline const ::TSP::Reference& ThemePresetsArchive::caption_style_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSA.ThemePresetsArchive.caption_style_presets)
  return _internal_caption_style_presets(index);
}
inline ::TSP::Reference* ThemePresetsArchive::_internal_add_caption_style_presets() {
  return _impl_.caption_style_presets_.Add();
}
inline ::TSP::Reference* ThemePresetsArchive::add_caption_style_presets() {
  ::TSP::Reference* _add = _internal_add_caption_style_presets();
  // @@protoc_insertion_point(field_add:TSA.ThemePresetsArchive.caption_style_presets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ThemePresetsArchive::caption_style_presets() const {
  // @@protoc_insertion_point(field_list:TSA.ThemePresetsArchive.caption_style_presets)
  return _impl_.caption_style_presets_;
}

// -------------------------------------------------------------------

// ShortcutControllerArchive_ShortcutMapEntry

// required string shortcut = 1;
inline bool ShortcutControllerArchive_ShortcutMapEntry::_internal_has_shortcut() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShortcutControllerArchive_ShortcutMapEntry::has_shortcut() const {
  return _internal_has_shortcut();
}
inline void ShortcutControllerArchive_ShortcutMapEntry::clear_shortcut() {
  _impl_.shortcut_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShortcutControllerArchive_ShortcutMapEntry::shortcut() const {
  // @@protoc_insertion_point(field_get:TSA.ShortcutControllerArchive.ShortcutMapEntry.shortcut)
  return _internal_shortcut();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShortcutControllerArchive_ShortcutMapEntry::set_shortcut(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.shortcut_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSA.ShortcutControllerArchive.ShortcutMapEntry.shortcut)
}
inline std::string* ShortcutControllerArchive_ShortcutMapEntry::mutable_shortcut() {
  std::string* _s = _internal_mutable_shortcut();
  // @@protoc_insertion_point(field_mutable:TSA.ShortcutControllerArchive.ShortcutMapEntry.shortcut)
  return _s;
}
inline const std::string& ShortcutControllerArchive_ShortcutMapEntry::_internal_shortcut() const {
  return _impl_.shortcut_.Get();
}
inline void ShortcutControllerArchive_ShortcutMapEntry::_internal_set_shortcut(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.shortcut_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortcutControllerArchive_ShortcutMapEntry::_internal_mutable_shortcut() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.shortcut_.Mutable(GetArenaForAllocation());
}
inline std::string* ShortcutControllerArchive_ShortcutMapEntry::release_shortcut() {
  // @@protoc_insertion_point(field_release:TSA.ShortcutControllerArchive.ShortcutMapEntry.shortcut)
  if (!_internal_has_shortcut()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.shortcut_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shortcut_.IsDefault()) {
    _impl_.shortcut_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShortcutControllerArchive_ShortcutMapEntry::set_allocated_shortcut(std::string* shortcut) {
  if (shortcut != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.shortcut_.SetAllocated(shortcut, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.shortcut_.IsDefault()) {
    _impl_.shortcut_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSA.ShortcutControllerArchive.ShortcutMapEntry.shortcut)
}

// required .TSP.Reference style = 2;
inline bool ShortcutControllerArchive_ShortcutMapEntry::_internal_has_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.style_ != nullptr);
  return value;
}
inline bool ShortcutControllerArchive_ShortcutMapEntry::has_style() const {
  return _internal_has_style();
}
inline const ::TSP::Reference& ShortcutControllerArchive_ShortcutMapEntry::_internal_style() const {
  const ::TSP::Reference* p = _impl_.style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShortcutControllerArchive_ShortcutMapEntry::style() const {
  // @@protoc_insertion_point(field_get:TSA.ShortcutControllerArchive.ShortcutMapEntry.style)
  return _internal_style();
}
inline void ShortcutControllerArchive_ShortcutMapEntry::unsafe_arena_set_allocated_style(
    ::TSP::Reference* style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  _impl_.style_ = style;
  if (style) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.ShortcutControllerArchive.ShortcutMapEntry.style)
}
inline ::TSP::Reference* ShortcutControllerArchive_ShortcutMapEntry::release_style() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShortcutControllerArchive_ShortcutMapEntry::unsafe_arena_release_style() {
  // @@protoc_insertion_point(field_release:TSA.ShortcutControllerArchive.ShortcutMapEntry.style)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.style_;
  _impl_.style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShortcutControllerArchive_ShortcutMapEntry::_internal_mutable_style() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.style_ = p;
  }
  return _impl_.style_;
}
inline ::TSP::Reference* ShortcutControllerArchive_ShortcutMapEntry::mutable_style() {
  ::TSP::Reference* _msg = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:TSA.ShortcutControllerArchive.ShortcutMapEntry.style)
  return _msg;
}
inline void ShortcutControllerArchive_ShortcutMapEntry::set_allocated_style(::TSP::Reference* style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_);
  }
  if (style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(style));
    if (message_arena != submessage_arena) {
      style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.style_ = style;
  // @@protoc_insertion_point(field_set_allocated:TSA.ShortcutControllerArchive.ShortcutMapEntry.style)
}

// -------------------------------------------------------------------

// ShortcutControllerArchive

// repeated .TSA.ShortcutControllerArchive.ShortcutMapEntry entries = 1;
inline int ShortcutControllerArchive::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int ShortcutControllerArchive::entries_size() const {
  return _internal_entries_size();
}
inline void ShortcutControllerArchive::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::TSA::ShortcutControllerArchive_ShortcutMapEntry* ShortcutControllerArchive::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.ShortcutControllerArchive.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSA::ShortcutControllerArchive_ShortcutMapEntry >*
ShortcutControllerArchive::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSA.ShortcutControllerArchive.entries)
  return &_impl_.entries_;
}
inline const ::TSA::ShortcutControllerArchive_ShortcutMapEntry& ShortcutControllerArchive::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::TSA::ShortcutControllerArchive_ShortcutMapEntry& ShortcutControllerArchive::entries(int index) const {
  // @@protoc_insertion_point(field_get:TSA.ShortcutControllerArchive.entries)
  return _internal_entries(index);
}
inline ::TSA::ShortcutControllerArchive_ShortcutMapEntry* ShortcutControllerArchive::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::TSA::ShortcutControllerArchive_ShortcutMapEntry* ShortcutControllerArchive::add_entries() {
  ::TSA::ShortcutControllerArchive_ShortcutMapEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:TSA.ShortcutControllerArchive.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSA::ShortcutControllerArchive_ShortcutMapEntry >&
ShortcutControllerArchive::entries() const {
  // @@protoc_insertion_point(field_list:TSA.ShortcutControllerArchive.entries)
  return _impl_.entries_;
}

// -------------------------------------------------------------------

// PropagatePresetCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool PropagatePresetCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool PropagatePresetCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& PropagatePresetCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& PropagatePresetCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.PropagatePresetCommandArchive.super)
  return _internal_super();
}
inline void PropagatePresetCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.PropagatePresetCommandArchive.super)
}
inline ::TSK::CommandArchive* PropagatePresetCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* PropagatePresetCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.PropagatePresetCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* PropagatePresetCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* PropagatePresetCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.PropagatePresetCommandArchive.super)
  return _msg;
}
inline void PropagatePresetCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.PropagatePresetCommandArchive.super)
}

// required .TSP.Reference preset_change_command = 2;
inline bool PropagatePresetCommandArchive::_internal_has_preset_change_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.preset_change_command_ != nullptr);
  return value;
}
inline bool PropagatePresetCommandArchive::has_preset_change_command() const {
  return _internal_has_preset_change_command();
}
inline const ::TSP::Reference& PropagatePresetCommandArchive::_internal_preset_change_command() const {
  const ::TSP::Reference* p = _impl_.preset_change_command_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropagatePresetCommandArchive::preset_change_command() const {
  // @@protoc_insertion_point(field_get:TSA.PropagatePresetCommandArchive.preset_change_command)
  return _internal_preset_change_command();
}
inline void PropagatePresetCommandArchive::unsafe_arena_set_allocated_preset_change_command(
    ::TSP::Reference* preset_change_command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_change_command_);
  }
  _impl_.preset_change_command_ = preset_change_command;
  if (preset_change_command) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.PropagatePresetCommandArchive.preset_change_command)
}
inline ::TSP::Reference* PropagatePresetCommandArchive::release_preset_change_command() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.preset_change_command_;
  _impl_.preset_change_command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropagatePresetCommandArchive::unsafe_arena_release_preset_change_command() {
  // @@protoc_insertion_point(field_release:TSA.PropagatePresetCommandArchive.preset_change_command)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.preset_change_command_;
  _impl_.preset_change_command_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropagatePresetCommandArchive::_internal_mutable_preset_change_command() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.preset_change_command_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.preset_change_command_ = p;
  }
  return _impl_.preset_change_command_;
}
inline ::TSP::Reference* PropagatePresetCommandArchive::mutable_preset_change_command() {
  ::TSP::Reference* _msg = _internal_mutable_preset_change_command();
  // @@protoc_insertion_point(field_mutable:TSA.PropagatePresetCommandArchive.preset_change_command)
  return _msg;
}
inline void PropagatePresetCommandArchive::set_allocated_preset_change_command(::TSP::Reference* preset_change_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_change_command_);
  }
  if (preset_change_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset_change_command));
    if (message_arena != submessage_arena) {
      preset_change_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset_change_command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.preset_change_command_ = preset_change_command;
  // @@protoc_insertion_point(field_set_allocated:TSA.PropagatePresetCommandArchive.preset_change_command)
}

// required bool always_preserve_appearance = 3;
inline bool PropagatePresetCommandArchive::_internal_has_always_preserve_appearance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PropagatePresetCommandArchive::has_always_preserve_appearance() const {
  return _internal_has_always_preserve_appearance();
}
inline void PropagatePresetCommandArchive::clear_always_preserve_appearance() {
  _impl_.always_preserve_appearance_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool PropagatePresetCommandArchive::_internal_always_preserve_appearance() const {
  return _impl_.always_preserve_appearance_;
}
inline bool PropagatePresetCommandArchive::always_preserve_appearance() const {
  // @@protoc_insertion_point(field_get:TSA.PropagatePresetCommandArchive.always_preserve_appearance)
  return _internal_always_preserve_appearance();
}
inline void PropagatePresetCommandArchive::_internal_set_always_preserve_appearance(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.always_preserve_appearance_ = value;
}
inline void PropagatePresetCommandArchive::set_always_preserve_appearance(bool value) {
  _internal_set_always_preserve_appearance(value);
  // @@protoc_insertion_point(field_set:TSA.PropagatePresetCommandArchive.always_preserve_appearance)
}

// -------------------------------------------------------------------

// ShortcutCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool ShortcutCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ShortcutCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ShortcutCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ShortcutCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.ShortcutCommandArchive.super)
  return _internal_super();
}
inline void ShortcutCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.ShortcutCommandArchive.super)
}
inline ::TSK::CommandArchive* ShortcutCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ShortcutCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.ShortcutCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ShortcutCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ShortcutCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.ShortcutCommandArchive.super)
  return _msg;
}
inline void ShortcutCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.ShortcutCommandArchive.super)
}

// optional .TSP.Reference old_style = 2;
inline bool ShortcutCommandArchive::_internal_has_old_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_style_ != nullptr);
  return value;
}
inline bool ShortcutCommandArchive::has_old_style() const {
  return _internal_has_old_style();
}
inline const ::TSP::Reference& ShortcutCommandArchive::_internal_old_style() const {
  const ::TSP::Reference* p = _impl_.old_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShortcutCommandArchive::old_style() const {
  // @@protoc_insertion_point(field_get:TSA.ShortcutCommandArchive.old_style)
  return _internal_old_style();
}
inline void ShortcutCommandArchive::unsafe_arena_set_allocated_old_style(
    ::TSP::Reference* old_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_style_);
  }
  _impl_.old_style_ = old_style;
  if (old_style) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.ShortcutCommandArchive.old_style)
}
inline ::TSP::Reference* ShortcutCommandArchive::release_old_style() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_style_;
  _impl_.old_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShortcutCommandArchive::unsafe_arena_release_old_style() {
  // @@protoc_insertion_point(field_release:TSA.ShortcutCommandArchive.old_style)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.old_style_;
  _impl_.old_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShortcutCommandArchive::_internal_mutable_old_style() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_style_ = p;
  }
  return _impl_.old_style_;
}
inline ::TSP::Reference* ShortcutCommandArchive::mutable_old_style() {
  ::TSP::Reference* _msg = _internal_mutable_old_style();
  // @@protoc_insertion_point(field_mutable:TSA.ShortcutCommandArchive.old_style)
  return _msg;
}
inline void ShortcutCommandArchive::set_allocated_old_style(::TSP::Reference* old_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_style_);
  }
  if (old_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_style));
    if (message_arena != submessage_arena) {
      old_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_style_ = old_style;
  // @@protoc_insertion_point(field_set_allocated:TSA.ShortcutCommandArchive.old_style)
}

// optional .TSP.Reference new_style = 3;
inline bool ShortcutCommandArchive::_internal_has_new_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_style_ != nullptr);
  return value;
}
inline bool ShortcutCommandArchive::has_new_style() const {
  return _internal_has_new_style();
}
inline const ::TSP::Reference& ShortcutCommandArchive::_internal_new_style() const {
  const ::TSP::Reference* p = _impl_.new_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ShortcutCommandArchive::new_style() const {
  // @@protoc_insertion_point(field_get:TSA.ShortcutCommandArchive.new_style)
  return _internal_new_style();
}
inline void ShortcutCommandArchive::unsafe_arena_set_allocated_new_style(
    ::TSP::Reference* new_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_style_);
  }
  _impl_.new_style_ = new_style;
  if (new_style) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.ShortcutCommandArchive.new_style)
}
inline ::TSP::Reference* ShortcutCommandArchive::release_new_style() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.new_style_;
  _impl_.new_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ShortcutCommandArchive::unsafe_arena_release_new_style() {
  // @@protoc_insertion_point(field_release:TSA.ShortcutCommandArchive.new_style)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.new_style_;
  _impl_.new_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ShortcutCommandArchive::_internal_mutable_new_style() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.new_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.new_style_ = p;
  }
  return _impl_.new_style_;
}
inline ::TSP::Reference* ShortcutCommandArchive::mutable_new_style() {
  ::TSP::Reference* _msg = _internal_mutable_new_style();
  // @@protoc_insertion_point(field_mutable:TSA.ShortcutCommandArchive.new_style)
  return _msg;
}
inline void ShortcutCommandArchive::set_allocated_new_style(::TSP::Reference* new_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_style_);
  }
  if (new_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_style));
    if (message_arena != submessage_arena) {
      new_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.new_style_ = new_style;
  // @@protoc_insertion_point(field_set_allocated:TSA.ShortcutCommandArchive.new_style)
}

// optional string old_shortcut = 4;
inline bool ShortcutCommandArchive::_internal_has_old_shortcut() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShortcutCommandArchive::has_old_shortcut() const {
  return _internal_has_old_shortcut();
}
inline void ShortcutCommandArchive::clear_old_shortcut() {
  _impl_.old_shortcut_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShortcutCommandArchive::old_shortcut() const {
  // @@protoc_insertion_point(field_get:TSA.ShortcutCommandArchive.old_shortcut)
  return _internal_old_shortcut();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShortcutCommandArchive::set_old_shortcut(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.old_shortcut_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSA.ShortcutCommandArchive.old_shortcut)
}
inline std::string* ShortcutCommandArchive::mutable_old_shortcut() {
  std::string* _s = _internal_mutable_old_shortcut();
  // @@protoc_insertion_point(field_mutable:TSA.ShortcutCommandArchive.old_shortcut)
  return _s;
}
inline const std::string& ShortcutCommandArchive::_internal_old_shortcut() const {
  return _impl_.old_shortcut_.Get();
}
inline void ShortcutCommandArchive::_internal_set_old_shortcut(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.old_shortcut_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortcutCommandArchive::_internal_mutable_old_shortcut() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.old_shortcut_.Mutable(GetArenaForAllocation());
}
inline std::string* ShortcutCommandArchive::release_old_shortcut() {
  // @@protoc_insertion_point(field_release:TSA.ShortcutCommandArchive.old_shortcut)
  if (!_internal_has_old_shortcut()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.old_shortcut_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_shortcut_.IsDefault()) {
    _impl_.old_shortcut_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShortcutCommandArchive::set_allocated_old_shortcut(std::string* old_shortcut) {
  if (old_shortcut != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.old_shortcut_.SetAllocated(old_shortcut, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_shortcut_.IsDefault()) {
    _impl_.old_shortcut_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSA.ShortcutCommandArchive.old_shortcut)
}

// optional string new_shortcut = 5;
inline bool ShortcutCommandArchive::_internal_has_new_shortcut() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShortcutCommandArchive::has_new_shortcut() const {
  return _internal_has_new_shortcut();
}
inline void ShortcutCommandArchive::clear_new_shortcut() {
  _impl_.new_shortcut_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShortcutCommandArchive::new_shortcut() const {
  // @@protoc_insertion_point(field_get:TSA.ShortcutCommandArchive.new_shortcut)
  return _internal_new_shortcut();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShortcutCommandArchive::set_new_shortcut(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.new_shortcut_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSA.ShortcutCommandArchive.new_shortcut)
}
inline std::string* ShortcutCommandArchive::mutable_new_shortcut() {
  std::string* _s = _internal_mutable_new_shortcut();
  // @@protoc_insertion_point(field_mutable:TSA.ShortcutCommandArchive.new_shortcut)
  return _s;
}
inline const std::string& ShortcutCommandArchive::_internal_new_shortcut() const {
  return _impl_.new_shortcut_.Get();
}
inline void ShortcutCommandArchive::_internal_set_new_shortcut(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.new_shortcut_.Set(value, GetArenaForAllocation());
}
inline std::string* ShortcutCommandArchive::_internal_mutable_new_shortcut() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.new_shortcut_.Mutable(GetArenaForAllocation());
}
inline std::string* ShortcutCommandArchive::release_new_shortcut() {
  // @@protoc_insertion_point(field_release:TSA.ShortcutCommandArchive.new_shortcut)
  if (!_internal_has_new_shortcut()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.new_shortcut_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_shortcut_.IsDefault()) {
    _impl_.new_shortcut_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ShortcutCommandArchive::set_allocated_new_shortcut(std::string* new_shortcut) {
  if (new_shortcut != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.new_shortcut_.SetAllocated(new_shortcut, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_shortcut_.IsDefault()) {
    _impl_.new_shortcut_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSA.ShortcutCommandArchive.new_shortcut)
}

// -------------------------------------------------------------------

// AddCustomFormatCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool AddCustomFormatCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool AddCustomFormatCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& AddCustomFormatCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& AddCustomFormatCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.AddCustomFormatCommandArchive.super)
  return _internal_super();
}
inline void AddCustomFormatCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.AddCustomFormatCommandArchive.super)
}
inline ::TSK::CommandArchive* AddCustomFormatCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* AddCustomFormatCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.AddCustomFormatCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* AddCustomFormatCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* AddCustomFormatCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.AddCustomFormatCommandArchive.super)
  return _msg;
}
inline void AddCustomFormatCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.AddCustomFormatCommandArchive.super)
}

// optional .TSK.CustomFormatArchive custom_format = 2;
inline bool AddCustomFormatCommandArchive::_internal_has_custom_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_format_ != nullptr);
  return value;
}
inline bool AddCustomFormatCommandArchive::has_custom_format() const {
  return _internal_has_custom_format();
}
inline const ::TSK::CustomFormatArchive& AddCustomFormatCommandArchive::_internal_custom_format() const {
  const ::TSK::CustomFormatArchive* p = _impl_.custom_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CustomFormatArchive&>(
      ::TSK::_CustomFormatArchive_default_instance_);
}
inline const ::TSK::CustomFormatArchive& AddCustomFormatCommandArchive::custom_format() const {
  // @@protoc_insertion_point(field_get:TSA.AddCustomFormatCommandArchive.custom_format)
  return _internal_custom_format();
}
inline void AddCustomFormatCommandArchive::unsafe_arena_set_allocated_custom_format(
    ::TSK::CustomFormatArchive* custom_format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_);
  }
  _impl_.custom_format_ = custom_format;
  if (custom_format) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.AddCustomFormatCommandArchive.custom_format)
}
inline ::TSK::CustomFormatArchive* AddCustomFormatCommandArchive::release_custom_format() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CustomFormatArchive* temp = _impl_.custom_format_;
  _impl_.custom_format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CustomFormatArchive* AddCustomFormatCommandArchive::unsafe_arena_release_custom_format() {
  // @@protoc_insertion_point(field_release:TSA.AddCustomFormatCommandArchive.custom_format)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CustomFormatArchive* temp = _impl_.custom_format_;
  _impl_.custom_format_ = nullptr;
  return temp;
}
inline ::TSK::CustomFormatArchive* AddCustomFormatCommandArchive::_internal_mutable_custom_format() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.custom_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CustomFormatArchive>(GetArenaForAllocation());
    _impl_.custom_format_ = p;
  }
  return _impl_.custom_format_;
}
inline ::TSK::CustomFormatArchive* AddCustomFormatCommandArchive::mutable_custom_format() {
  ::TSK::CustomFormatArchive* _msg = _internal_mutable_custom_format();
  // @@protoc_insertion_point(field_mutable:TSA.AddCustomFormatCommandArchive.custom_format)
  return _msg;
}
inline void AddCustomFormatCommandArchive::set_allocated_custom_format(::TSK::CustomFormatArchive* custom_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_);
  }
  if (custom_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format));
    if (message_arena != submessage_arena) {
      custom_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.custom_format_ = custom_format;
  // @@protoc_insertion_point(field_set_allocated:TSA.AddCustomFormatCommandArchive.custom_format)
}

// optional .TSP.UUID custom_format_key = 3;
inline bool AddCustomFormatCommandArchive::_internal_has_custom_format_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_format_key_ != nullptr);
  return value;
}
inline bool AddCustomFormatCommandArchive::has_custom_format_key() const {
  return _internal_has_custom_format_key();
}
inline const ::TSP::UUID& AddCustomFormatCommandArchive::_internal_custom_format_key() const {
  const ::TSP::UUID* p = _impl_.custom_format_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& AddCustomFormatCommandArchive::custom_format_key() const {
  // @@protoc_insertion_point(field_get:TSA.AddCustomFormatCommandArchive.custom_format_key)
  return _internal_custom_format_key();
}
inline void AddCustomFormatCommandArchive::unsafe_arena_set_allocated_custom_format_key(
    ::TSP::UUID* custom_format_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_key_);
  }
  _impl_.custom_format_key_ = custom_format_key;
  if (custom_format_key) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.AddCustomFormatCommandArchive.custom_format_key)
}
inline ::TSP::UUID* AddCustomFormatCommandArchive::release_custom_format_key() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.custom_format_key_;
  _impl_.custom_format_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* AddCustomFormatCommandArchive::unsafe_arena_release_custom_format_key() {
  // @@protoc_insertion_point(field_release:TSA.AddCustomFormatCommandArchive.custom_format_key)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.custom_format_key_;
  _impl_.custom_format_key_ = nullptr;
  return temp;
}
inline ::TSP::UUID* AddCustomFormatCommandArchive::_internal_mutable_custom_format_key() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.custom_format_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.custom_format_key_ = p;
  }
  return _impl_.custom_format_key_;
}
inline ::TSP::UUID* AddCustomFormatCommandArchive::mutable_custom_format_key() {
  ::TSP::UUID* _msg = _internal_mutable_custom_format_key();
  // @@protoc_insertion_point(field_mutable:TSA.AddCustomFormatCommandArchive.custom_format_key)
  return _msg;
}
inline void AddCustomFormatCommandArchive::set_allocated_custom_format_key(::TSP::UUID* custom_format_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_key_);
  }
  if (custom_format_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_key));
    if (message_arena != submessage_arena) {
      custom_format_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.custom_format_key_ = custom_format_key;
  // @@protoc_insertion_point(field_set_allocated:TSA.AddCustomFormatCommandArchive.custom_format_key)
}

// -------------------------------------------------------------------

// UpdateCustomFormatCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool UpdateCustomFormatCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool UpdateCustomFormatCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& UpdateCustomFormatCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& UpdateCustomFormatCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.UpdateCustomFormatCommandArchive.super)
  return _internal_super();
}
inline void UpdateCustomFormatCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.UpdateCustomFormatCommandArchive.super)
}
inline ::TSK::CommandArchive* UpdateCustomFormatCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* UpdateCustomFormatCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.UpdateCustomFormatCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* UpdateCustomFormatCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* UpdateCustomFormatCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.UpdateCustomFormatCommandArchive.super)
  return _msg;
}
inline void UpdateCustomFormatCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.UpdateCustomFormatCommandArchive.super)
}

// optional .TSK.CustomFormatArchive custom_format = 2;
inline bool UpdateCustomFormatCommandArchive::_internal_has_custom_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_format_ != nullptr);
  return value;
}
inline bool UpdateCustomFormatCommandArchive::has_custom_format() const {
  return _internal_has_custom_format();
}
inline const ::TSK::CustomFormatArchive& UpdateCustomFormatCommandArchive::_internal_custom_format() const {
  const ::TSK::CustomFormatArchive* p = _impl_.custom_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CustomFormatArchive&>(
      ::TSK::_CustomFormatArchive_default_instance_);
}
inline const ::TSK::CustomFormatArchive& UpdateCustomFormatCommandArchive::custom_format() const {
  // @@protoc_insertion_point(field_get:TSA.UpdateCustomFormatCommandArchive.custom_format)
  return _internal_custom_format();
}
inline void UpdateCustomFormatCommandArchive::unsafe_arena_set_allocated_custom_format(
    ::TSK::CustomFormatArchive* custom_format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_);
  }
  _impl_.custom_format_ = custom_format;
  if (custom_format) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.UpdateCustomFormatCommandArchive.custom_format)
}
inline ::TSK::CustomFormatArchive* UpdateCustomFormatCommandArchive::release_custom_format() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CustomFormatArchive* temp = _impl_.custom_format_;
  _impl_.custom_format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CustomFormatArchive* UpdateCustomFormatCommandArchive::unsafe_arena_release_custom_format() {
  // @@protoc_insertion_point(field_release:TSA.UpdateCustomFormatCommandArchive.custom_format)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CustomFormatArchive* temp = _impl_.custom_format_;
  _impl_.custom_format_ = nullptr;
  return temp;
}
inline ::TSK::CustomFormatArchive* UpdateCustomFormatCommandArchive::_internal_mutable_custom_format() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.custom_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CustomFormatArchive>(GetArenaForAllocation());
    _impl_.custom_format_ = p;
  }
  return _impl_.custom_format_;
}
inline ::TSK::CustomFormatArchive* UpdateCustomFormatCommandArchive::mutable_custom_format() {
  ::TSK::CustomFormatArchive* _msg = _internal_mutable_custom_format();
  // @@protoc_insertion_point(field_mutable:TSA.UpdateCustomFormatCommandArchive.custom_format)
  return _msg;
}
inline void UpdateCustomFormatCommandArchive::set_allocated_custom_format(::TSK::CustomFormatArchive* custom_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_);
  }
  if (custom_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format));
    if (message_arena != submessage_arena) {
      custom_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.custom_format_ = custom_format;
  // @@protoc_insertion_point(field_set_allocated:TSA.UpdateCustomFormatCommandArchive.custom_format)
}

// optional .TSK.CustomFormatArchive old_custom_format = 3;
inline bool UpdateCustomFormatCommandArchive::_internal_has_old_custom_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_custom_format_ != nullptr);
  return value;
}
inline bool UpdateCustomFormatCommandArchive::has_old_custom_format() const {
  return _internal_has_old_custom_format();
}
inline const ::TSK::CustomFormatArchive& UpdateCustomFormatCommandArchive::_internal_old_custom_format() const {
  const ::TSK::CustomFormatArchive* p = _impl_.old_custom_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CustomFormatArchive&>(
      ::TSK::_CustomFormatArchive_default_instance_);
}
inline const ::TSK::CustomFormatArchive& UpdateCustomFormatCommandArchive::old_custom_format() const {
  // @@protoc_insertion_point(field_get:TSA.UpdateCustomFormatCommandArchive.old_custom_format)
  return _internal_old_custom_format();
}
inline void UpdateCustomFormatCommandArchive::unsafe_arena_set_allocated_old_custom_format(
    ::TSK::CustomFormatArchive* old_custom_format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_custom_format_);
  }
  _impl_.old_custom_format_ = old_custom_format;
  if (old_custom_format) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.UpdateCustomFormatCommandArchive.old_custom_format)
}
inline ::TSK::CustomFormatArchive* UpdateCustomFormatCommandArchive::release_old_custom_format() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CustomFormatArchive* temp = _impl_.old_custom_format_;
  _impl_.old_custom_format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CustomFormatArchive* UpdateCustomFormatCommandArchive::unsafe_arena_release_old_custom_format() {
  // @@protoc_insertion_point(field_release:TSA.UpdateCustomFormatCommandArchive.old_custom_format)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CustomFormatArchive* temp = _impl_.old_custom_format_;
  _impl_.old_custom_format_ = nullptr;
  return temp;
}
inline ::TSK::CustomFormatArchive* UpdateCustomFormatCommandArchive::_internal_mutable_old_custom_format() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_custom_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CustomFormatArchive>(GetArenaForAllocation());
    _impl_.old_custom_format_ = p;
  }
  return _impl_.old_custom_format_;
}
inline ::TSK::CustomFormatArchive* UpdateCustomFormatCommandArchive::mutable_old_custom_format() {
  ::TSK::CustomFormatArchive* _msg = _internal_mutable_old_custom_format();
  // @@protoc_insertion_point(field_mutable:TSA.UpdateCustomFormatCommandArchive.old_custom_format)
  return _msg;
}
inline void UpdateCustomFormatCommandArchive::set_allocated_old_custom_format(::TSK::CustomFormatArchive* old_custom_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_custom_format_);
  }
  if (old_custom_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_custom_format));
    if (message_arena != submessage_arena) {
      old_custom_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_custom_format, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_custom_format_ = old_custom_format;
  // @@protoc_insertion_point(field_set_allocated:TSA.UpdateCustomFormatCommandArchive.old_custom_format)
}

// optional .TSP.UUID custom_format_key = 4;
inline bool UpdateCustomFormatCommandArchive::_internal_has_custom_format_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_format_key_ != nullptr);
  return value;
}
inline bool UpdateCustomFormatCommandArchive::has_custom_format_key() const {
  return _internal_has_custom_format_key();
}
inline const ::TSP::UUID& UpdateCustomFormatCommandArchive::_internal_custom_format_key() const {
  const ::TSP::UUID* p = _impl_.custom_format_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& UpdateCustomFormatCommandArchive::custom_format_key() const {
  // @@protoc_insertion_point(field_get:TSA.UpdateCustomFormatCommandArchive.custom_format_key)
  return _internal_custom_format_key();
}
inline void UpdateCustomFormatCommandArchive::unsafe_arena_set_allocated_custom_format_key(
    ::TSP::UUID* custom_format_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_key_);
  }
  _impl_.custom_format_key_ = custom_format_key;
  if (custom_format_key) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.UpdateCustomFormatCommandArchive.custom_format_key)
}
inline ::TSP::UUID* UpdateCustomFormatCommandArchive::release_custom_format_key() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = _impl_.custom_format_key_;
  _impl_.custom_format_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* UpdateCustomFormatCommandArchive::unsafe_arena_release_custom_format_key() {
  // @@protoc_insertion_point(field_release:TSA.UpdateCustomFormatCommandArchive.custom_format_key)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::UUID* temp = _impl_.custom_format_key_;
  _impl_.custom_format_key_ = nullptr;
  return temp;
}
inline ::TSP::UUID* UpdateCustomFormatCommandArchive::_internal_mutable_custom_format_key() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.custom_format_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.custom_format_key_ = p;
  }
  return _impl_.custom_format_key_;
}
inline ::TSP::UUID* UpdateCustomFormatCommandArchive::mutable_custom_format_key() {
  ::TSP::UUID* _msg = _internal_mutable_custom_format_key();
  // @@protoc_insertion_point(field_mutable:TSA.UpdateCustomFormatCommandArchive.custom_format_key)
  return _msg;
}
inline void UpdateCustomFormatCommandArchive::set_allocated_custom_format_key(::TSP::UUID* custom_format_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_key_);
  }
  if (custom_format_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_key));
    if (message_arena != submessage_arena) {
      custom_format_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.custom_format_key_ = custom_format_key;
  // @@protoc_insertion_point(field_set_allocated:TSA.UpdateCustomFormatCommandArchive.custom_format_key)
}

// -------------------------------------------------------------------

// ReplaceCustomFormatCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool ReplaceCustomFormatCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ReplaceCustomFormatCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ReplaceCustomFormatCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ReplaceCustomFormatCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.ReplaceCustomFormatCommandArchive.super)
  return _internal_super();
}
inline void ReplaceCustomFormatCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.ReplaceCustomFormatCommandArchive.super)
}
inline ::TSK::CommandArchive* ReplaceCustomFormatCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ReplaceCustomFormatCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.ReplaceCustomFormatCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ReplaceCustomFormatCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ReplaceCustomFormatCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.ReplaceCustomFormatCommandArchive.super)
  return _msg;
}
inline void ReplaceCustomFormatCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.ReplaceCustomFormatCommandArchive.super)
}

// optional .TSK.CustomFormatArchive custom_format = 2;
inline bool ReplaceCustomFormatCommandArchive::_internal_has_custom_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_format_ != nullptr);
  return value;
}
inline bool ReplaceCustomFormatCommandArchive::has_custom_format() const {
  return _internal_has_custom_format();
}
inline const ::TSK::CustomFormatArchive& ReplaceCustomFormatCommandArchive::_internal_custom_format() const {
  const ::TSK::CustomFormatArchive* p = _impl_.custom_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CustomFormatArchive&>(
      ::TSK::_CustomFormatArchive_default_instance_);
}
inline const ::TSK::CustomFormatArchive& ReplaceCustomFormatCommandArchive::custom_format() const {
  // @@protoc_insertion_point(field_get:TSA.ReplaceCustomFormatCommandArchive.custom_format)
  return _internal_custom_format();
}
inline void ReplaceCustomFormatCommandArchive::unsafe_arena_set_allocated_custom_format(
    ::TSK::CustomFormatArchive* custom_format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_);
  }
  _impl_.custom_format_ = custom_format;
  if (custom_format) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.ReplaceCustomFormatCommandArchive.custom_format)
}
inline ::TSK::CustomFormatArchive* ReplaceCustomFormatCommandArchive::release_custom_format() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CustomFormatArchive* temp = _impl_.custom_format_;
  _impl_.custom_format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CustomFormatArchive* ReplaceCustomFormatCommandArchive::unsafe_arena_release_custom_format() {
  // @@protoc_insertion_point(field_release:TSA.ReplaceCustomFormatCommandArchive.custom_format)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSK::CustomFormatArchive* temp = _impl_.custom_format_;
  _impl_.custom_format_ = nullptr;
  return temp;
}
inline ::TSK::CustomFormatArchive* ReplaceCustomFormatCommandArchive::_internal_mutable_custom_format() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.custom_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CustomFormatArchive>(GetArenaForAllocation());
    _impl_.custom_format_ = p;
  }
  return _impl_.custom_format_;
}
inline ::TSK::CustomFormatArchive* ReplaceCustomFormatCommandArchive::mutable_custom_format() {
  ::TSK::CustomFormatArchive* _msg = _internal_mutable_custom_format();
  // @@protoc_insertion_point(field_mutable:TSA.ReplaceCustomFormatCommandArchive.custom_format)
  return _msg;
}
inline void ReplaceCustomFormatCommandArchive::set_allocated_custom_format(::TSK::CustomFormatArchive* custom_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_);
  }
  if (custom_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format));
    if (message_arena != submessage_arena) {
      custom_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.custom_format_ = custom_format;
  // @@protoc_insertion_point(field_set_allocated:TSA.ReplaceCustomFormatCommandArchive.custom_format)
}

// optional .TSP.UUID custom_format_key = 3;
inline bool ReplaceCustomFormatCommandArchive::_internal_has_custom_format_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.custom_format_key_ != nullptr);
  return value;
}
inline bool ReplaceCustomFormatCommandArchive::has_custom_format_key() const {
  return _internal_has_custom_format_key();
}
inline const ::TSP::UUID& ReplaceCustomFormatCommandArchive::_internal_custom_format_key() const {
  const ::TSP::UUID* p = _impl_.custom_format_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ReplaceCustomFormatCommandArchive::custom_format_key() const {
  // @@protoc_insertion_point(field_get:TSA.ReplaceCustomFormatCommandArchive.custom_format_key)
  return _internal_custom_format_key();
}
inline void ReplaceCustomFormatCommandArchive::unsafe_arena_set_allocated_custom_format_key(
    ::TSP::UUID* custom_format_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_key_);
  }
  _impl_.custom_format_key_ = custom_format_key;
  if (custom_format_key) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.ReplaceCustomFormatCommandArchive.custom_format_key)
}
inline ::TSP::UUID* ReplaceCustomFormatCommandArchive::release_custom_format_key() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.custom_format_key_;
  _impl_.custom_format_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* ReplaceCustomFormatCommandArchive::unsafe_arena_release_custom_format_key() {
  // @@protoc_insertion_point(field_release:TSA.ReplaceCustomFormatCommandArchive.custom_format_key)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUID* temp = _impl_.custom_format_key_;
  _impl_.custom_format_key_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ReplaceCustomFormatCommandArchive::_internal_mutable_custom_format_key() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.custom_format_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.custom_format_key_ = p;
  }
  return _impl_.custom_format_key_;
}
inline ::TSP::UUID* ReplaceCustomFormatCommandArchive::mutable_custom_format_key() {
  ::TSP::UUID* _msg = _internal_mutable_custom_format_key();
  // @@protoc_insertion_point(field_mutable:TSA.ReplaceCustomFormatCommandArchive.custom_format_key)
  return _msg;
}
inline void ReplaceCustomFormatCommandArchive::set_allocated_custom_format_key(::TSP::UUID* custom_format_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.custom_format_key_);
  }
  if (custom_format_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(custom_format_key));
    if (message_arena != submessage_arena) {
      custom_format_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_format_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.custom_format_key_ = custom_format_key;
  // @@protoc_insertion_point(field_set_allocated:TSA.ReplaceCustomFormatCommandArchive.custom_format_key)
}

// optional .TSK.FormatStructArchive replacement_format = 4;
inline bool ReplaceCustomFormatCommandArchive::_internal_has_replacement_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.replacement_format_ != nullptr);
  return value;
}
inline bool ReplaceCustomFormatCommandArchive::has_replacement_format() const {
  return _internal_has_replacement_format();
}
inline const ::TSK::FormatStructArchive& ReplaceCustomFormatCommandArchive::_internal_replacement_format() const {
  const ::TSK::FormatStructArchive* p = _impl_.replacement_format_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormatStructArchive&>(
      ::TSK::_FormatStructArchive_default_instance_);
}
inline const ::TSK::FormatStructArchive& ReplaceCustomFormatCommandArchive::replacement_format() const {
  // @@protoc_insertion_point(field_get:TSA.ReplaceCustomFormatCommandArchive.replacement_format)
  return _internal_replacement_format();
}
inline void ReplaceCustomFormatCommandArchive::unsafe_arena_set_allocated_replacement_format(
    ::TSK::FormatStructArchive* replacement_format) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replacement_format_);
  }
  _impl_.replacement_format_ = replacement_format;
  if (replacement_format) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.ReplaceCustomFormatCommandArchive.replacement_format)
}
inline ::TSK::FormatStructArchive* ReplaceCustomFormatCommandArchive::release_replacement_format() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = _impl_.replacement_format_;
  _impl_.replacement_format_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormatStructArchive* ReplaceCustomFormatCommandArchive::unsafe_arena_release_replacement_format() {
  // @@protoc_insertion_point(field_release:TSA.ReplaceCustomFormatCommandArchive.replacement_format)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::FormatStructArchive* temp = _impl_.replacement_format_;
  _impl_.replacement_format_ = nullptr;
  return temp;
}
inline ::TSK::FormatStructArchive* ReplaceCustomFormatCommandArchive::_internal_mutable_replacement_format() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.replacement_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormatStructArchive>(GetArenaForAllocation());
    _impl_.replacement_format_ = p;
  }
  return _impl_.replacement_format_;
}
inline ::TSK::FormatStructArchive* ReplaceCustomFormatCommandArchive::mutable_replacement_format() {
  ::TSK::FormatStructArchive* _msg = _internal_mutable_replacement_format();
  // @@protoc_insertion_point(field_mutable:TSA.ReplaceCustomFormatCommandArchive.replacement_format)
  return _msg;
}
inline void ReplaceCustomFormatCommandArchive::set_allocated_replacement_format(::TSK::FormatStructArchive* replacement_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.replacement_format_);
  }
  if (replacement_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replacement_format));
    if (message_arena != submessage_arena) {
      replacement_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replacement_format, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.replacement_format_ = replacement_format;
  // @@protoc_insertion_point(field_set_allocated:TSA.ReplaceCustomFormatCommandArchive.replacement_format)
}

// -------------------------------------------------------------------

// NeedsMediaCompatibilityUpgradeCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& NeedsMediaCompatibilityUpgradeCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& NeedsMediaCompatibilityUpgradeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.super)
  return _internal_super();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.super)
}
inline ::TSK::CommandArchive* NeedsMediaCompatibilityUpgradeCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* NeedsMediaCompatibilityUpgradeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* NeedsMediaCompatibilityUpgradeCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* NeedsMediaCompatibilityUpgradeCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.super)
  return _msg;
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.super)
}

// optional bool needs_media_compatibility_upgrade = 2;
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_has_needs_media_compatibility_upgrade() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::has_needs_media_compatibility_upgrade() const {
  return _internal_has_needs_media_compatibility_upgrade();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::clear_needs_media_compatibility_upgrade() {
  _impl_.needs_media_compatibility_upgrade_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_needs_media_compatibility_upgrade() const {
  return _impl_.needs_media_compatibility_upgrade_;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::needs_media_compatibility_upgrade() const {
  // @@protoc_insertion_point(field_get:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.needs_media_compatibility_upgrade)
  return _internal_needs_media_compatibility_upgrade();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::_internal_set_needs_media_compatibility_upgrade(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.needs_media_compatibility_upgrade_ = value;
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::set_needs_media_compatibility_upgrade(bool value) {
  _internal_set_needs_media_compatibility_upgrade(value);
  // @@protoc_insertion_point(field_set:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.needs_media_compatibility_upgrade)
}

// optional bool old_needs_media_compatibility_upgrade = 3;
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_has_old_needs_media_compatibility_upgrade() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::has_old_needs_media_compatibility_upgrade() const {
  return _internal_has_old_needs_media_compatibility_upgrade();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::clear_old_needs_media_compatibility_upgrade() {
  _impl_.old_needs_media_compatibility_upgrade_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_old_needs_media_compatibility_upgrade() const {
  return _impl_.old_needs_media_compatibility_upgrade_;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::old_needs_media_compatibility_upgrade() const {
  // @@protoc_insertion_point(field_get:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.old_needs_media_compatibility_upgrade)
  return _internal_old_needs_media_compatibility_upgrade();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::_internal_set_old_needs_media_compatibility_upgrade(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.old_needs_media_compatibility_upgrade_ = value;
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::set_old_needs_media_compatibility_upgrade(bool value) {
  _internal_set_old_needs_media_compatibility_upgrade(value);
  // @@protoc_insertion_point(field_set:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.old_needs_media_compatibility_upgrade)
}

// optional bool collaborative_media_compatibility_upgrade_did_fail = 4;
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_has_collaborative_media_compatibility_upgrade_did_fail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::has_collaborative_media_compatibility_upgrade_did_fail() const {
  return _internal_has_collaborative_media_compatibility_upgrade_did_fail();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::clear_collaborative_media_compatibility_upgrade_did_fail() {
  _impl_.collaborative_media_compatibility_upgrade_did_fail_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_collaborative_media_compatibility_upgrade_did_fail() const {
  return _impl_.collaborative_media_compatibility_upgrade_did_fail_;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::collaborative_media_compatibility_upgrade_did_fail() const {
  // @@protoc_insertion_point(field_get:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.collaborative_media_compatibility_upgrade_did_fail)
  return _internal_collaborative_media_compatibility_upgrade_did_fail();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::_internal_set_collaborative_media_compatibility_upgrade_did_fail(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.collaborative_media_compatibility_upgrade_did_fail_ = value;
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::set_collaborative_media_compatibility_upgrade_did_fail(bool value) {
  _internal_set_collaborative_media_compatibility_upgrade_did_fail(value);
  // @@protoc_insertion_point(field_set:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.collaborative_media_compatibility_upgrade_did_fail)
}

// optional bool old_collaborative_media_compatibility_upgrade_did_fail = 5;
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_has_old_collaborative_media_compatibility_upgrade_did_fail() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::has_old_collaborative_media_compatibility_upgrade_did_fail() const {
  return _internal_has_old_collaborative_media_compatibility_upgrade_did_fail();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::clear_old_collaborative_media_compatibility_upgrade_did_fail() {
  _impl_.old_collaborative_media_compatibility_upgrade_did_fail_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_old_collaborative_media_compatibility_upgrade_did_fail() const {
  return _impl_.old_collaborative_media_compatibility_upgrade_did_fail_;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::old_collaborative_media_compatibility_upgrade_did_fail() const {
  // @@protoc_insertion_point(field_get:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.old_collaborative_media_compatibility_upgrade_did_fail)
  return _internal_old_collaborative_media_compatibility_upgrade_did_fail();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::_internal_set_old_collaborative_media_compatibility_upgrade_did_fail(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.old_collaborative_media_compatibility_upgrade_did_fail_ = value;
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::set_old_collaborative_media_compatibility_upgrade_did_fail(bool value) {
  _internal_set_old_collaborative_media_compatibility_upgrade_did_fail(value);
  // @@protoc_insertion_point(field_set:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.old_collaborative_media_compatibility_upgrade_did_fail)
}

// optional bool can_use_hevc = 6;
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_has_can_use_hevc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::has_can_use_hevc() const {
  return _internal_has_can_use_hevc();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::clear_can_use_hevc() {
  _impl_.can_use_hevc_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_can_use_hevc() const {
  return _impl_.can_use_hevc_;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::can_use_hevc() const {
  // @@protoc_insertion_point(field_get:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.can_use_hevc)
  return _internal_can_use_hevc();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::_internal_set_can_use_hevc(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.can_use_hevc_ = value;
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::set_can_use_hevc(bool value) {
  _internal_set_can_use_hevc(value);
  // @@protoc_insertion_point(field_set:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.can_use_hevc)
}

// optional bool old_can_use_hevc = 7;
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_has_old_can_use_hevc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::has_old_can_use_hevc() const {
  return _internal_has_old_can_use_hevc();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::clear_old_can_use_hevc() {
  _impl_.old_can_use_hevc_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::_internal_old_can_use_hevc() const {
  return _impl_.old_can_use_hevc_;
}
inline bool NeedsMediaCompatibilityUpgradeCommandArchive::old_can_use_hevc() const {
  // @@protoc_insertion_point(field_get:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.old_can_use_hevc)
  return _internal_old_can_use_hevc();
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::_internal_set_old_can_use_hevc(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.old_can_use_hevc_ = value;
}
inline void NeedsMediaCompatibilityUpgradeCommandArchive::set_old_can_use_hevc(bool value) {
  _internal_set_old_can_use_hevc(value);
  // @@protoc_insertion_point(field_set:TSA.NeedsMediaCompatibilityUpgradeCommandArchive.old_can_use_hevc)
}

// -------------------------------------------------------------------

// ChangeDocumentLocaleCommandArchive

// optional .TSK.CommandArchive super = 1;
inline bool ChangeDocumentLocaleCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ChangeDocumentLocaleCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& ChangeDocumentLocaleCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& ChangeDocumentLocaleCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.ChangeDocumentLocaleCommandArchive.super)
  return _internal_super();
}
inline void ChangeDocumentLocaleCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.ChangeDocumentLocaleCommandArchive.super)
}
inline ::TSK::CommandArchive* ChangeDocumentLocaleCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* ChangeDocumentLocaleCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.ChangeDocumentLocaleCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* ChangeDocumentLocaleCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* ChangeDocumentLocaleCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.ChangeDocumentLocaleCommandArchive.super)
  return _msg;
}
inline void ChangeDocumentLocaleCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.ChangeDocumentLocaleCommandArchive.super)
}

// optional string old_locale_id = 2;
inline bool ChangeDocumentLocaleCommandArchive::_internal_has_old_locale_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChangeDocumentLocaleCommandArchive::has_old_locale_id() const {
  return _internal_has_old_locale_id();
}
inline void ChangeDocumentLocaleCommandArchive::clear_old_locale_id() {
  _impl_.old_locale_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangeDocumentLocaleCommandArchive::old_locale_id() const {
  // @@protoc_insertion_point(field_get:TSA.ChangeDocumentLocaleCommandArchive.old_locale_id)
  return _internal_old_locale_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeDocumentLocaleCommandArchive::set_old_locale_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.old_locale_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSA.ChangeDocumentLocaleCommandArchive.old_locale_id)
}
inline std::string* ChangeDocumentLocaleCommandArchive::mutable_old_locale_id() {
  std::string* _s = _internal_mutable_old_locale_id();
  // @@protoc_insertion_point(field_mutable:TSA.ChangeDocumentLocaleCommandArchive.old_locale_id)
  return _s;
}
inline const std::string& ChangeDocumentLocaleCommandArchive::_internal_old_locale_id() const {
  return _impl_.old_locale_id_.Get();
}
inline void ChangeDocumentLocaleCommandArchive::_internal_set_old_locale_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.old_locale_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeDocumentLocaleCommandArchive::_internal_mutable_old_locale_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.old_locale_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChangeDocumentLocaleCommandArchive::release_old_locale_id() {
  // @@protoc_insertion_point(field_release:TSA.ChangeDocumentLocaleCommandArchive.old_locale_id)
  if (!_internal_has_old_locale_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.old_locale_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_locale_id_.IsDefault()) {
    _impl_.old_locale_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChangeDocumentLocaleCommandArchive::set_allocated_old_locale_id(std::string* old_locale_id) {
  if (old_locale_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.old_locale_id_.SetAllocated(old_locale_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_locale_id_.IsDefault()) {
    _impl_.old_locale_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSA.ChangeDocumentLocaleCommandArchive.old_locale_id)
}

// optional string new_locale_id = 3;
inline bool ChangeDocumentLocaleCommandArchive::_internal_has_new_locale_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChangeDocumentLocaleCommandArchive::has_new_locale_id() const {
  return _internal_has_new_locale_id();
}
inline void ChangeDocumentLocaleCommandArchive::clear_new_locale_id() {
  _impl_.new_locale_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChangeDocumentLocaleCommandArchive::new_locale_id() const {
  // @@protoc_insertion_point(field_get:TSA.ChangeDocumentLocaleCommandArchive.new_locale_id)
  return _internal_new_locale_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeDocumentLocaleCommandArchive::set_new_locale_id(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.new_locale_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSA.ChangeDocumentLocaleCommandArchive.new_locale_id)
}
inline std::string* ChangeDocumentLocaleCommandArchive::mutable_new_locale_id() {
  std::string* _s = _internal_mutable_new_locale_id();
  // @@protoc_insertion_point(field_mutable:TSA.ChangeDocumentLocaleCommandArchive.new_locale_id)
  return _s;
}
inline const std::string& ChangeDocumentLocaleCommandArchive::_internal_new_locale_id() const {
  return _impl_.new_locale_id_.Get();
}
inline void ChangeDocumentLocaleCommandArchive::_internal_set_new_locale_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.new_locale_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeDocumentLocaleCommandArchive::_internal_mutable_new_locale_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.new_locale_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChangeDocumentLocaleCommandArchive::release_new_locale_id() {
  // @@protoc_insertion_point(field_release:TSA.ChangeDocumentLocaleCommandArchive.new_locale_id)
  if (!_internal_has_new_locale_id()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.new_locale_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_locale_id_.IsDefault()) {
    _impl_.new_locale_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChangeDocumentLocaleCommandArchive::set_allocated_new_locale_id(std::string* new_locale_id) {
  if (new_locale_id != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.new_locale_id_.SetAllocated(new_locale_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_locale_id_.IsDefault()) {
    _impl_.new_locale_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSA.ChangeDocumentLocaleCommandArchive.new_locale_id)
}

// optional .TSK.FormattingSymbolsArchive old_formatting_symbols = 4;
inline bool ChangeDocumentLocaleCommandArchive::_internal_has_old_formatting_symbols() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_formatting_symbols_ != nullptr);
  return value;
}
inline bool ChangeDocumentLocaleCommandArchive::has_old_formatting_symbols() const {
  return _internal_has_old_formatting_symbols();
}
inline const ::TSK::FormattingSymbolsArchive& ChangeDocumentLocaleCommandArchive::_internal_old_formatting_symbols() const {
  const ::TSK::FormattingSymbolsArchive* p = _impl_.old_formatting_symbols_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormattingSymbolsArchive&>(
      ::TSK::_FormattingSymbolsArchive_default_instance_);
}
inline const ::TSK::FormattingSymbolsArchive& ChangeDocumentLocaleCommandArchive::old_formatting_symbols() const {
  // @@protoc_insertion_point(field_get:TSA.ChangeDocumentLocaleCommandArchive.old_formatting_symbols)
  return _internal_old_formatting_symbols();
}
inline void ChangeDocumentLocaleCommandArchive::unsafe_arena_set_allocated_old_formatting_symbols(
    ::TSK::FormattingSymbolsArchive* old_formatting_symbols) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_formatting_symbols_);
  }
  _impl_.old_formatting_symbols_ = old_formatting_symbols;
  if (old_formatting_symbols) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.ChangeDocumentLocaleCommandArchive.old_formatting_symbols)
}
inline ::TSK::FormattingSymbolsArchive* ChangeDocumentLocaleCommandArchive::release_old_formatting_symbols() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::FormattingSymbolsArchive* temp = _impl_.old_formatting_symbols_;
  _impl_.old_formatting_symbols_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormattingSymbolsArchive* ChangeDocumentLocaleCommandArchive::unsafe_arena_release_old_formatting_symbols() {
  // @@protoc_insertion_point(field_release:TSA.ChangeDocumentLocaleCommandArchive.old_formatting_symbols)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSK::FormattingSymbolsArchive* temp = _impl_.old_formatting_symbols_;
  _impl_.old_formatting_symbols_ = nullptr;
  return temp;
}
inline ::TSK::FormattingSymbolsArchive* ChangeDocumentLocaleCommandArchive::_internal_mutable_old_formatting_symbols() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_formatting_symbols_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormattingSymbolsArchive>(GetArenaForAllocation());
    _impl_.old_formatting_symbols_ = p;
  }
  return _impl_.old_formatting_symbols_;
}
inline ::TSK::FormattingSymbolsArchive* ChangeDocumentLocaleCommandArchive::mutable_old_formatting_symbols() {
  ::TSK::FormattingSymbolsArchive* _msg = _internal_mutable_old_formatting_symbols();
  // @@protoc_insertion_point(field_mutable:TSA.ChangeDocumentLocaleCommandArchive.old_formatting_symbols)
  return _msg;
}
inline void ChangeDocumentLocaleCommandArchive::set_allocated_old_formatting_symbols(::TSK::FormattingSymbolsArchive* old_formatting_symbols) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_formatting_symbols_);
  }
  if (old_formatting_symbols) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_formatting_symbols));
    if (message_arena != submessage_arena) {
      old_formatting_symbols = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_formatting_symbols, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_formatting_symbols_ = old_formatting_symbols;
  // @@protoc_insertion_point(field_set_allocated:TSA.ChangeDocumentLocaleCommandArchive.old_formatting_symbols)
}

// optional .TSK.FormattingSymbolsArchive new_formatting_symbols = 5;
inline bool ChangeDocumentLocaleCommandArchive::_internal_has_new_formatting_symbols() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.new_formatting_symbols_ != nullptr);
  return value;
}
inline bool ChangeDocumentLocaleCommandArchive::has_new_formatting_symbols() const {
  return _internal_has_new_formatting_symbols();
}
inline const ::TSK::FormattingSymbolsArchive& ChangeDocumentLocaleCommandArchive::_internal_new_formatting_symbols() const {
  const ::TSK::FormattingSymbolsArchive* p = _impl_.new_formatting_symbols_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::FormattingSymbolsArchive&>(
      ::TSK::_FormattingSymbolsArchive_default_instance_);
}
inline const ::TSK::FormattingSymbolsArchive& ChangeDocumentLocaleCommandArchive::new_formatting_symbols() const {
  // @@protoc_insertion_point(field_get:TSA.ChangeDocumentLocaleCommandArchive.new_formatting_symbols)
  return _internal_new_formatting_symbols();
}
inline void ChangeDocumentLocaleCommandArchive::unsafe_arena_set_allocated_new_formatting_symbols(
    ::TSK::FormattingSymbolsArchive* new_formatting_symbols) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_formatting_symbols_);
  }
  _impl_.new_formatting_symbols_ = new_formatting_symbols;
  if (new_formatting_symbols) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.ChangeDocumentLocaleCommandArchive.new_formatting_symbols)
}
inline ::TSK::FormattingSymbolsArchive* ChangeDocumentLocaleCommandArchive::release_new_formatting_symbols() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSK::FormattingSymbolsArchive* temp = _impl_.new_formatting_symbols_;
  _impl_.new_formatting_symbols_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::FormattingSymbolsArchive* ChangeDocumentLocaleCommandArchive::unsafe_arena_release_new_formatting_symbols() {
  // @@protoc_insertion_point(field_release:TSA.ChangeDocumentLocaleCommandArchive.new_formatting_symbols)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSK::FormattingSymbolsArchive* temp = _impl_.new_formatting_symbols_;
  _impl_.new_formatting_symbols_ = nullptr;
  return temp;
}
inline ::TSK::FormattingSymbolsArchive* ChangeDocumentLocaleCommandArchive::_internal_mutable_new_formatting_symbols() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.new_formatting_symbols_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::FormattingSymbolsArchive>(GetArenaForAllocation());
    _impl_.new_formatting_symbols_ = p;
  }
  return _impl_.new_formatting_symbols_;
}
inline ::TSK::FormattingSymbolsArchive* ChangeDocumentLocaleCommandArchive::mutable_new_formatting_symbols() {
  ::TSK::FormattingSymbolsArchive* _msg = _internal_mutable_new_formatting_symbols();
  // @@protoc_insertion_point(field_mutable:TSA.ChangeDocumentLocaleCommandArchive.new_formatting_symbols)
  return _msg;
}
inline void ChangeDocumentLocaleCommandArchive::set_allocated_new_formatting_symbols(::TSK::FormattingSymbolsArchive* new_formatting_symbols) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_formatting_symbols_);
  }
  if (new_formatting_symbols) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_formatting_symbols));
    if (message_arena != submessage_arena) {
      new_formatting_symbols = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_formatting_symbols, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.new_formatting_symbols_ = new_formatting_symbols;
  // @@protoc_insertion_point(field_set_allocated:TSA.ChangeDocumentLocaleCommandArchive.new_formatting_symbols)
}

// -------------------------------------------------------------------

// InducedVerifyObjectsWithServerCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool InducedVerifyObjectsWithServerCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool InducedVerifyObjectsWithServerCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& InducedVerifyObjectsWithServerCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InducedVerifyObjectsWithServerCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.InducedVerifyObjectsWithServerCommandArchive.super)
  return _internal_super();
}
inline void InducedVerifyObjectsWithServerCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.InducedVerifyObjectsWithServerCommandArchive.super)
}
inline ::TSK::CommandArchive* InducedVerifyObjectsWithServerCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* InducedVerifyObjectsWithServerCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.InducedVerifyObjectsWithServerCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InducedVerifyObjectsWithServerCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* InducedVerifyObjectsWithServerCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.InducedVerifyObjectsWithServerCommandArchive.super)
  return _msg;
}
inline void InducedVerifyObjectsWithServerCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.InducedVerifyObjectsWithServerCommandArchive.super)
}

// repeated .TSP.UUID object_id_list = 2;
inline int InducedVerifyObjectsWithServerCommandArchive::_internal_object_id_list_size() const {
  return _impl_.object_id_list_.size();
}
inline int InducedVerifyObjectsWithServerCommandArchive::object_id_list_size() const {
  return _internal_object_id_list_size();
}
inline ::TSP::UUID* InducedVerifyObjectsWithServerCommandArchive::mutable_object_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.InducedVerifyObjectsWithServerCommandArchive.object_id_list)
  return _impl_.object_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
InducedVerifyObjectsWithServerCommandArchive::mutable_object_id_list() {
  // @@protoc_insertion_point(field_mutable_list:TSA.InducedVerifyObjectsWithServerCommandArchive.object_id_list)
  return &_impl_.object_id_list_;
}
inline const ::TSP::UUID& InducedVerifyObjectsWithServerCommandArchive::_internal_object_id_list(int index) const {
  return _impl_.object_id_list_.Get(index);
}
inline const ::TSP::UUID& InducedVerifyObjectsWithServerCommandArchive::object_id_list(int index) const {
  // @@protoc_insertion_point(field_get:TSA.InducedVerifyObjectsWithServerCommandArchive.object_id_list)
  return _internal_object_id_list(index);
}
inline ::TSP::UUID* InducedVerifyObjectsWithServerCommandArchive::_internal_add_object_id_list() {
  return _impl_.object_id_list_.Add();
}
inline ::TSP::UUID* InducedVerifyObjectsWithServerCommandArchive::add_object_id_list() {
  ::TSP::UUID* _add = _internal_add_object_id_list();
  // @@protoc_insertion_point(field_add:TSA.InducedVerifyObjectsWithServerCommandArchive.object_id_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
InducedVerifyObjectsWithServerCommandArchive::object_id_list() const {
  // @@protoc_insertion_point(field_list:TSA.InducedVerifyObjectsWithServerCommandArchive.object_id_list)
  return _impl_.object_id_list_;
}

// optional bool object_id_list_undefined = 3;
inline bool InducedVerifyObjectsWithServerCommandArchive::_internal_has_object_id_list_undefined() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InducedVerifyObjectsWithServerCommandArchive::has_object_id_list_undefined() const {
  return _internal_has_object_id_list_undefined();
}
inline void InducedVerifyObjectsWithServerCommandArchive::clear_object_id_list_undefined() {
  _impl_.object_id_list_undefined_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool InducedVerifyObjectsWithServerCommandArchive::_internal_object_id_list_undefined() const {
  return _impl_.object_id_list_undefined_;
}
inline bool InducedVerifyObjectsWithServerCommandArchive::object_id_list_undefined() const {
  // @@protoc_insertion_point(field_get:TSA.InducedVerifyObjectsWithServerCommandArchive.object_id_list_undefined)
  return _internal_object_id_list_undefined();
}
inline void InducedVerifyObjectsWithServerCommandArchive::_internal_set_object_id_list_undefined(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.object_id_list_undefined_ = value;
}
inline void InducedVerifyObjectsWithServerCommandArchive::set_object_id_list_undefined(bool value) {
  _internal_set_object_id_list_undefined(value);
  // @@protoc_insertion_point(field_set:TSA.InducedVerifyObjectsWithServerCommandArchive.object_id_list_undefined)
}

// repeated string server_object_s_o_s_string_list = 4;
inline int InducedVerifyObjectsWithServerCommandArchive::_internal_server_object_s_o_s_string_list_size() const {
  return _impl_.server_object_s_o_s_string_list_.size();
}
inline int InducedVerifyObjectsWithServerCommandArchive::server_object_s_o_s_string_list_size() const {
  return _internal_server_object_s_o_s_string_list_size();
}
inline void InducedVerifyObjectsWithServerCommandArchive::clear_server_object_s_o_s_string_list() {
  _impl_.server_object_s_o_s_string_list_.Clear();
}
inline std::string* InducedVerifyObjectsWithServerCommandArchive::add_server_object_s_o_s_string_list() {
  std::string* _s = _internal_add_server_object_s_o_s_string_list();
  // @@protoc_insertion_point(field_add_mutable:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
  return _s;
}
inline const std::string& InducedVerifyObjectsWithServerCommandArchive::_internal_server_object_s_o_s_string_list(int index) const {
  return _impl_.server_object_s_o_s_string_list_.Get(index);
}
inline const std::string& InducedVerifyObjectsWithServerCommandArchive::server_object_s_o_s_string_list(int index) const {
  // @@protoc_insertion_point(field_get:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
  return _internal_server_object_s_o_s_string_list(index);
}
inline std::string* InducedVerifyObjectsWithServerCommandArchive::mutable_server_object_s_o_s_string_list(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
  return _impl_.server_object_s_o_s_string_list_.Mutable(index);
}
inline void InducedVerifyObjectsWithServerCommandArchive::set_server_object_s_o_s_string_list(int index, const std::string& value) {
  _impl_.server_object_s_o_s_string_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
}
inline void InducedVerifyObjectsWithServerCommandArchive::set_server_object_s_o_s_string_list(int index, std::string&& value) {
  _impl_.server_object_s_o_s_string_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
}
inline void InducedVerifyObjectsWithServerCommandArchive::set_server_object_s_o_s_string_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.server_object_s_o_s_string_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
}
inline void InducedVerifyObjectsWithServerCommandArchive::set_server_object_s_o_s_string_list(int index, const char* value, size_t size) {
  _impl_.server_object_s_o_s_string_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
}
inline std::string* InducedVerifyObjectsWithServerCommandArchive::_internal_add_server_object_s_o_s_string_list() {
  return _impl_.server_object_s_o_s_string_list_.Add();
}
inline void InducedVerifyObjectsWithServerCommandArchive::add_server_object_s_o_s_string_list(const std::string& value) {
  _impl_.server_object_s_o_s_string_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
}
inline void InducedVerifyObjectsWithServerCommandArchive::add_server_object_s_o_s_string_list(std::string&& value) {
  _impl_.server_object_s_o_s_string_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
}
inline void InducedVerifyObjectsWithServerCommandArchive::add_server_object_s_o_s_string_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.server_object_s_o_s_string_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
}
inline void InducedVerifyObjectsWithServerCommandArchive::add_server_object_s_o_s_string_list(const char* value, size_t size) {
  _impl_.server_object_s_o_s_string_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InducedVerifyObjectsWithServerCommandArchive::server_object_s_o_s_string_list() const {
  // @@protoc_insertion_point(field_list:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
  return _impl_.server_object_s_o_s_string_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InducedVerifyObjectsWithServerCommandArchive::mutable_server_object_s_o_s_string_list() {
  // @@protoc_insertion_point(field_mutable_list:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list)
  return &_impl_.server_object_s_o_s_string_list_;
}

// optional bool server_object_s_o_s_string_list_undefined = 5;
inline bool InducedVerifyObjectsWithServerCommandArchive::_internal_has_server_object_s_o_s_string_list_undefined() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InducedVerifyObjectsWithServerCommandArchive::has_server_object_s_o_s_string_list_undefined() const {
  return _internal_has_server_object_s_o_s_string_list_undefined();
}
inline void InducedVerifyObjectsWithServerCommandArchive::clear_server_object_s_o_s_string_list_undefined() {
  _impl_.server_object_s_o_s_string_list_undefined_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool InducedVerifyObjectsWithServerCommandArchive::_internal_server_object_s_o_s_string_list_undefined() const {
  return _impl_.server_object_s_o_s_string_list_undefined_;
}
inline bool InducedVerifyObjectsWithServerCommandArchive::server_object_s_o_s_string_list_undefined() const {
  // @@protoc_insertion_point(field_get:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list_undefined)
  return _internal_server_object_s_o_s_string_list_undefined();
}
inline void InducedVerifyObjectsWithServerCommandArchive::_internal_set_server_object_s_o_s_string_list_undefined(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.server_object_s_o_s_string_list_undefined_ = value;
}
inline void InducedVerifyObjectsWithServerCommandArchive::set_server_object_s_o_s_string_list_undefined(bool value) {
  _internal_set_server_object_s_o_s_string_list_undefined(value);
  // @@protoc_insertion_point(field_set:TSA.InducedVerifyObjectsWithServerCommandArchive.server_object_s_o_s_string_list_undefined)
}

// required bool pending_recalc = 6;
inline bool InducedVerifyObjectsWithServerCommandArchive::_internal_has_pending_recalc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InducedVerifyObjectsWithServerCommandArchive::has_pending_recalc() const {
  return _internal_has_pending_recalc();
}
inline void InducedVerifyObjectsWithServerCommandArchive::clear_pending_recalc() {
  _impl_.pending_recalc_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool InducedVerifyObjectsWithServerCommandArchive::_internal_pending_recalc() const {
  return _impl_.pending_recalc_;
}
inline bool InducedVerifyObjectsWithServerCommandArchive::pending_recalc() const {
  // @@protoc_insertion_point(field_get:TSA.InducedVerifyObjectsWithServerCommandArchive.pending_recalc)
  return _internal_pending_recalc();
}
inline void InducedVerifyObjectsWithServerCommandArchive::_internal_set_pending_recalc(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.pending_recalc_ = value;
}
inline void InducedVerifyObjectsWithServerCommandArchive::set_pending_recalc(bool value) {
  _internal_set_pending_recalc(value);
  // @@protoc_insertion_point(field_set:TSA.InducedVerifyObjectsWithServerCommandArchive.pending_recalc)
}

// required double remote_data_sync_key = 7;
inline bool InducedVerifyObjectsWithServerCommandArchive::_internal_has_remote_data_sync_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InducedVerifyObjectsWithServerCommandArchive::has_remote_data_sync_key() const {
  return _internal_has_remote_data_sync_key();
}
inline void InducedVerifyObjectsWithServerCommandArchive::clear_remote_data_sync_key() {
  _impl_.remote_data_sync_key_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double InducedVerifyObjectsWithServerCommandArchive::_internal_remote_data_sync_key() const {
  return _impl_.remote_data_sync_key_;
}
inline double InducedVerifyObjectsWithServerCommandArchive::remote_data_sync_key() const {
  // @@protoc_insertion_point(field_get:TSA.InducedVerifyObjectsWithServerCommandArchive.remote_data_sync_key)
  return _internal_remote_data_sync_key();
}
inline void InducedVerifyObjectsWithServerCommandArchive::_internal_set_remote_data_sync_key(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.remote_data_sync_key_ = value;
}
inline void InducedVerifyObjectsWithServerCommandArchive::set_remote_data_sync_key(double value) {
  _internal_set_remote_data_sync_key(value);
  // @@protoc_insertion_point(field_set:TSA.InducedVerifyObjectsWithServerCommandArchive.remote_data_sync_key)
}

// -------------------------------------------------------------------

// InducedVerifyTransformHistoryWithServerCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool InducedVerifyTransformHistoryWithServerCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool InducedVerifyTransformHistoryWithServerCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& InducedVerifyTransformHistoryWithServerCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& InducedVerifyTransformHistoryWithServerCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.super)
  return _internal_super();
}
inline void InducedVerifyTransformHistoryWithServerCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.super)
}
inline ::TSK::CommandArchive* InducedVerifyTransformHistoryWithServerCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* InducedVerifyTransformHistoryWithServerCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* InducedVerifyTransformHistoryWithServerCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* InducedVerifyTransformHistoryWithServerCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.super)
  return _msg;
}
inline void InducedVerifyTransformHistoryWithServerCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.super)
}

// repeated .TSK.OperationStorageEntry server_operation_storage_entries = 2;
inline int InducedVerifyTransformHistoryWithServerCommandArchive::_internal_server_operation_storage_entries_size() const {
  return _impl_.server_operation_storage_entries_.size();
}
inline int InducedVerifyTransformHistoryWithServerCommandArchive::server_operation_storage_entries_size() const {
  return _internal_server_operation_storage_entries_size();
}
inline ::TSK::OperationStorageEntry* InducedVerifyTransformHistoryWithServerCommandArchive::mutable_server_operation_storage_entries(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.server_operation_storage_entries)
  return _impl_.server_operation_storage_entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageEntry >*
InducedVerifyTransformHistoryWithServerCommandArchive::mutable_server_operation_storage_entries() {
  // @@protoc_insertion_point(field_mutable_list:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.server_operation_storage_entries)
  return &_impl_.server_operation_storage_entries_;
}
inline const ::TSK::OperationStorageEntry& InducedVerifyTransformHistoryWithServerCommandArchive::_internal_server_operation_storage_entries(int index) const {
  return _impl_.server_operation_storage_entries_.Get(index);
}
inline const ::TSK::OperationStorageEntry& InducedVerifyTransformHistoryWithServerCommandArchive::server_operation_storage_entries(int index) const {
  // @@protoc_insertion_point(field_get:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.server_operation_storage_entries)
  return _internal_server_operation_storage_entries(index);
}
inline ::TSK::OperationStorageEntry* InducedVerifyTransformHistoryWithServerCommandArchive::_internal_add_server_operation_storage_entries() {
  return _impl_.server_operation_storage_entries_.Add();
}
inline ::TSK::OperationStorageEntry* InducedVerifyTransformHistoryWithServerCommandArchive::add_server_operation_storage_entries() {
  ::TSK::OperationStorageEntry* _add = _internal_add_server_operation_storage_entries();
  // @@protoc_insertion_point(field_add:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.server_operation_storage_entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSK::OperationStorageEntry >&
InducedVerifyTransformHistoryWithServerCommandArchive::server_operation_storage_entries() const {
  // @@protoc_insertion_point(field_list:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.server_operation_storage_entries)
  return _impl_.server_operation_storage_entries_;
}

// optional bool server_operation_storage_entries_undefined = 3;
inline bool InducedVerifyTransformHistoryWithServerCommandArchive::_internal_has_server_operation_storage_entries_undefined() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InducedVerifyTransformHistoryWithServerCommandArchive::has_server_operation_storage_entries_undefined() const {
  return _internal_has_server_operation_storage_entries_undefined();
}
inline void InducedVerifyTransformHistoryWithServerCommandArchive::clear_server_operation_storage_entries_undefined() {
  _impl_.server_operation_storage_entries_undefined_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool InducedVerifyTransformHistoryWithServerCommandArchive::_internal_server_operation_storage_entries_undefined() const {
  return _impl_.server_operation_storage_entries_undefined_;
}
inline bool InducedVerifyTransformHistoryWithServerCommandArchive::server_operation_storage_entries_undefined() const {
  // @@protoc_insertion_point(field_get:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.server_operation_storage_entries_undefined)
  return _internal_server_operation_storage_entries_undefined();
}
inline void InducedVerifyTransformHistoryWithServerCommandArchive::_internal_set_server_operation_storage_entries_undefined(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.server_operation_storage_entries_undefined_ = value;
}
inline void InducedVerifyTransformHistoryWithServerCommandArchive::set_server_operation_storage_entries_undefined(bool value) {
  _internal_set_server_operation_storage_entries_undefined(value);
  // @@protoc_insertion_point(field_set:TSA.InducedVerifyTransformHistoryWithServerCommandArchive.server_operation_storage_entries_undefined)
}

// -------------------------------------------------------------------

// StyleUpdatePropertyMapCommandArchive

// optional .TSWP.StyleUpdatePropertyMapCommandArchive super = 1;
inline bool StyleUpdatePropertyMapCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool StyleUpdatePropertyMapCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::StyleUpdatePropertyMapCommandArchive& StyleUpdatePropertyMapCommandArchive::_internal_super() const {
  const ::TSWP::StyleUpdatePropertyMapCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::StyleUpdatePropertyMapCommandArchive&>(
      ::TSWP::_StyleUpdatePropertyMapCommandArchive_default_instance_);
}
inline const ::TSWP::StyleUpdatePropertyMapCommandArchive& StyleUpdatePropertyMapCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.StyleUpdatePropertyMapCommandArchive.super)
  return _internal_super();
}
inline void StyleUpdatePropertyMapCommandArchive::unsafe_arena_set_allocated_super(
    ::TSWP::StyleUpdatePropertyMapCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.StyleUpdatePropertyMapCommandArchive.super)
}
inline ::TSWP::StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSWP::StyleUpdatePropertyMapCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.StyleUpdatePropertyMapCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSWP::StyleUpdatePropertyMapCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSWP::StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::StyleUpdatePropertyMapCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSWP::StyleUpdatePropertyMapCommandArchive* StyleUpdatePropertyMapCommandArchive::mutable_super() {
  ::TSWP::StyleUpdatePropertyMapCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.StyleUpdatePropertyMapCommandArchive.super)
  return _msg;
}
inline void StyleUpdatePropertyMapCommandArchive::set_allocated_super(::TSWP::StyleUpdatePropertyMapCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.StyleUpdatePropertyMapCommandArchive.super)
}

// -------------------------------------------------------------------

// RemoteDataChangeCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool RemoteDataChangeCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool RemoteDataChangeCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& RemoteDataChangeCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& RemoteDataChangeCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.RemoteDataChangeCommandArchive.super)
  return _internal_super();
}
inline void RemoteDataChangeCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.RemoteDataChangeCommandArchive.super)
}
inline ::TSK::CommandArchive* RemoteDataChangeCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* RemoteDataChangeCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.RemoteDataChangeCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* RemoteDataChangeCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* RemoteDataChangeCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.RemoteDataChangeCommandArchive.super)
  return _msg;
}
inline void RemoteDataChangeCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.RemoteDataChangeCommandArchive.super)
}

// required .TSCE.RemoteDataValueMapArchive value_map = 2;
inline bool RemoteDataChangeCommandArchive::_internal_has_value_map() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_map_ != nullptr);
  return value;
}
inline bool RemoteDataChangeCommandArchive::has_value_map() const {
  return _internal_has_value_map();
}
inline const ::TSCE::RemoteDataValueMapArchive& RemoteDataChangeCommandArchive::_internal_value_map() const {
  const ::TSCE::RemoteDataValueMapArchive* p = _impl_.value_map_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCE::RemoteDataValueMapArchive&>(
      ::TSCE::_RemoteDataValueMapArchive_default_instance_);
}
inline const ::TSCE::RemoteDataValueMapArchive& RemoteDataChangeCommandArchive::value_map() const {
  // @@protoc_insertion_point(field_get:TSA.RemoteDataChangeCommandArchive.value_map)
  return _internal_value_map();
}
inline void RemoteDataChangeCommandArchive::unsafe_arena_set_allocated_value_map(
    ::TSCE::RemoteDataValueMapArchive* value_map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_map_);
  }
  _impl_.value_map_ = value_map;
  if (value_map) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.RemoteDataChangeCommandArchive.value_map)
}
inline ::TSCE::RemoteDataValueMapArchive* RemoteDataChangeCommandArchive::release_value_map() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RemoteDataValueMapArchive* temp = _impl_.value_map_;
  _impl_.value_map_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCE::RemoteDataValueMapArchive* RemoteDataChangeCommandArchive::unsafe_arena_release_value_map() {
  // @@protoc_insertion_point(field_release:TSA.RemoteDataChangeCommandArchive.value_map)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCE::RemoteDataValueMapArchive* temp = _impl_.value_map_;
  _impl_.value_map_ = nullptr;
  return temp;
}
inline ::TSCE::RemoteDataValueMapArchive* RemoteDataChangeCommandArchive::_internal_mutable_value_map() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_map_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCE::RemoteDataValueMapArchive>(GetArenaForAllocation());
    _impl_.value_map_ = p;
  }
  return _impl_.value_map_;
}
inline ::TSCE::RemoteDataValueMapArchive* RemoteDataChangeCommandArchive::mutable_value_map() {
  ::TSCE::RemoteDataValueMapArchive* _msg = _internal_mutable_value_map();
  // @@protoc_insertion_point(field_mutable:TSA.RemoteDataChangeCommandArchive.value_map)
  return _msg;
}
inline void RemoteDataChangeCommandArchive::set_allocated_value_map(::TSCE::RemoteDataValueMapArchive* value_map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_map_);
  }
  if (value_map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_map));
    if (message_arena != submessage_arena) {
      value_map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_map, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_map_ = value_map;
  // @@protoc_insertion_point(field_set_allocated:TSA.RemoteDataChangeCommandArchive.value_map)
}

// repeated .TSCE.StockArchive quotes = 3;
inline int RemoteDataChangeCommandArchive::_internal_quotes_size() const {
  return _impl_.quotes_.size();
}
inline int RemoteDataChangeCommandArchive::quotes_size() const {
  return _internal_quotes_size();
}
inline ::TSCE::StockArchive* RemoteDataChangeCommandArchive::mutable_quotes(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.RemoteDataChangeCommandArchive.quotes)
  return _impl_.quotes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive >*
RemoteDataChangeCommandArchive::mutable_quotes() {
  // @@protoc_insertion_point(field_mutable_list:TSA.RemoteDataChangeCommandArchive.quotes)
  return &_impl_.quotes_;
}
inline const ::TSCE::StockArchive& RemoteDataChangeCommandArchive::_internal_quotes(int index) const {
  return _impl_.quotes_.Get(index);
}
inline const ::TSCE::StockArchive& RemoteDataChangeCommandArchive::quotes(int index) const {
  // @@protoc_insertion_point(field_get:TSA.RemoteDataChangeCommandArchive.quotes)
  return _internal_quotes(index);
}
inline ::TSCE::StockArchive* RemoteDataChangeCommandArchive::_internal_add_quotes() {
  return _impl_.quotes_.Add();
}
inline ::TSCE::StockArchive* RemoteDataChangeCommandArchive::add_quotes() {
  ::TSCE::StockArchive* _add = _internal_add_quotes();
  // @@protoc_insertion_point(field_add:TSA.RemoteDataChangeCommandArchive.quotes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCE::StockArchive >&
RemoteDataChangeCommandArchive::quotes() const {
  // @@protoc_insertion_point(field_list:TSA.RemoteDataChangeCommandArchive.quotes)
  return _impl_.quotes_;
}

// required double remote_data_sync_key = 4;
inline bool RemoteDataChangeCommandArchive::_internal_has_remote_data_sync_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RemoteDataChangeCommandArchive::has_remote_data_sync_key() const {
  return _internal_has_remote_data_sync_key();
}
inline void RemoteDataChangeCommandArchive::clear_remote_data_sync_key() {
  _impl_.remote_data_sync_key_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double RemoteDataChangeCommandArchive::_internal_remote_data_sync_key() const {
  return _impl_.remote_data_sync_key_;
}
inline double RemoteDataChangeCommandArchive::remote_data_sync_key() const {
  // @@protoc_insertion_point(field_get:TSA.RemoteDataChangeCommandArchive.remote_data_sync_key)
  return _internal_remote_data_sync_key();
}
inline void RemoteDataChangeCommandArchive::_internal_set_remote_data_sync_key(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.remote_data_sync_key_ = value;
}
inline void RemoteDataChangeCommandArchive::set_remote_data_sync_key(double value) {
  _internal_set_remote_data_sync_key(value);
  // @@protoc_insertion_point(field_set:TSA.RemoteDataChangeCommandArchive.remote_data_sync_key)
}

// -------------------------------------------------------------------

// GalleryInfoSetValueCommandArchive_PropertyValue

// optional .TSA.GalleryInfoCaptionMode caption_mode = 1;
inline bool GalleryInfoSetValueCommandArchive_PropertyValue::_internal_has_caption_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GalleryInfoSetValueCommandArchive_PropertyValue::has_caption_mode() const {
  return _internal_has_caption_mode();
}
inline void GalleryInfoSetValueCommandArchive_PropertyValue::clear_caption_mode() {
  _impl_.caption_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::TSA::GalleryInfoCaptionMode GalleryInfoSetValueCommandArchive_PropertyValue::_internal_caption_mode() const {
  return static_cast< ::TSA::GalleryInfoCaptionMode >(_impl_.caption_mode_);
}
inline ::TSA::GalleryInfoCaptionMode GalleryInfoSetValueCommandArchive_PropertyValue::caption_mode() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfoSetValueCommandArchive.PropertyValue.caption_mode)
  return _internal_caption_mode();
}
inline void GalleryInfoSetValueCommandArchive_PropertyValue::_internal_set_caption_mode(::TSA::GalleryInfoCaptionMode value) {
  assert(::TSA::GalleryInfoCaptionMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.caption_mode_ = value;
}
inline void GalleryInfoSetValueCommandArchive_PropertyValue::set_caption_mode(::TSA::GalleryInfoCaptionMode value) {
  _internal_set_caption_mode(value);
  // @@protoc_insertion_point(field_set:TSA.GalleryInfoSetValueCommandArchive.PropertyValue.caption_mode)
}

// -------------------------------------------------------------------

// GalleryInfoSetValueCommandArchive

// required .TSK.CommandArchive super = 1;
inline bool GalleryInfoSetValueCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool GalleryInfoSetValueCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& GalleryInfoSetValueCommandArchive::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& GalleryInfoSetValueCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfoSetValueCommandArchive.super)
  return _internal_super();
}
inline void GalleryInfoSetValueCommandArchive::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryInfoSetValueCommandArchive.super)
}
inline ::TSK::CommandArchive* GalleryInfoSetValueCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* GalleryInfoSetValueCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.GalleryInfoSetValueCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* GalleryInfoSetValueCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* GalleryInfoSetValueCommandArchive::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryInfoSetValueCommandArchive.super)
  return _msg;
}
inline void GalleryInfoSetValueCommandArchive::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryInfoSetValueCommandArchive.super)
}

// optional .TSP.UUIDPath info_id_path = 2;
inline bool GalleryInfoSetValueCommandArchive::_internal_has_info_id_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_id_path_ != nullptr);
  return value;
}
inline bool GalleryInfoSetValueCommandArchive::has_info_id_path() const {
  return _internal_has_info_id_path();
}
inline const ::TSP::UUIDPath& GalleryInfoSetValueCommandArchive::_internal_info_id_path() const {
  const ::TSP::UUIDPath* p = _impl_.info_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& GalleryInfoSetValueCommandArchive::info_id_path() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfoSetValueCommandArchive.info_id_path)
  return _internal_info_id_path();
}
inline void GalleryInfoSetValueCommandArchive::unsafe_arena_set_allocated_info_id_path(
    ::TSP::UUIDPath* info_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_id_path_);
  }
  _impl_.info_id_path_ = info_id_path;
  if (info_id_path) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryInfoSetValueCommandArchive.info_id_path)
}
inline ::TSP::UUIDPath* GalleryInfoSetValueCommandArchive::release_info_id_path() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.info_id_path_;
  _impl_.info_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* GalleryInfoSetValueCommandArchive::unsafe_arena_release_info_id_path() {
  // @@protoc_insertion_point(field_release:TSA.GalleryInfoSetValueCommandArchive.info_id_path)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.info_id_path_;
  _impl_.info_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* GalleryInfoSetValueCommandArchive::_internal_mutable_info_id_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.info_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    _impl_.info_id_path_ = p;
  }
  return _impl_.info_id_path_;
}
inline ::TSP::UUIDPath* GalleryInfoSetValueCommandArchive::mutable_info_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_info_id_path();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryInfoSetValueCommandArchive.info_id_path)
  return _msg;
}
inline void GalleryInfoSetValueCommandArchive::set_allocated_info_id_path(::TSP::UUIDPath* info_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_id_path_);
  }
  if (info_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_id_path));
    if (message_arena != submessage_arena) {
      info_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_id_path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.info_id_path_ = info_id_path;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryInfoSetValueCommandArchive.info_id_path)
}

// optional .TSA.GalleryInfoProperty property = 3;
inline bool GalleryInfoSetValueCommandArchive::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GalleryInfoSetValueCommandArchive::has_property() const {
  return _internal_has_property();
}
inline void GalleryInfoSetValueCommandArchive::clear_property() {
  _impl_.property_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::TSA::GalleryInfoProperty GalleryInfoSetValueCommandArchive::_internal_property() const {
  return static_cast< ::TSA::GalleryInfoProperty >(_impl_.property_);
}
inline ::TSA::GalleryInfoProperty GalleryInfoSetValueCommandArchive::property() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfoSetValueCommandArchive.property)
  return _internal_property();
}
inline void GalleryInfoSetValueCommandArchive::_internal_set_property(::TSA::GalleryInfoProperty value) {
  assert(::TSA::GalleryInfoProperty_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.property_ = value;
}
inline void GalleryInfoSetValueCommandArchive::set_property(::TSA::GalleryInfoProperty value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:TSA.GalleryInfoSetValueCommandArchive.property)
}

// optional .TSA.GalleryInfoSetValueCommandArchive.PropertyValue value = 4;
inline bool GalleryInfoSetValueCommandArchive::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool GalleryInfoSetValueCommandArchive::has_value() const {
  return _internal_has_value();
}
inline void GalleryInfoSetValueCommandArchive::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue& GalleryInfoSetValueCommandArchive::_internal_value() const {
  const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue&>(
      ::TSA::_GalleryInfoSetValueCommandArchive_PropertyValue_default_instance_);
}
inline const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue& GalleryInfoSetValueCommandArchive::value() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfoSetValueCommandArchive.value)
  return _internal_value();
}
inline void GalleryInfoSetValueCommandArchive::unsafe_arena_set_allocated_value(
    ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryInfoSetValueCommandArchive.value)
}
inline ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* GalleryInfoSetValueCommandArchive::release_value() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* GalleryInfoSetValueCommandArchive::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:TSA.GalleryInfoSetValueCommandArchive.value)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* GalleryInfoSetValueCommandArchive::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSA::GalleryInfoSetValueCommandArchive_PropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* GalleryInfoSetValueCommandArchive::mutable_value() {
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryInfoSetValueCommandArchive.value)
  return _msg;
}
inline void GalleryInfoSetValueCommandArchive::set_allocated_value(::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryInfoSetValueCommandArchive.value)
}

// optional .TSA.GalleryInfoSetValueCommandArchive.PropertyValue old_value = 5;
inline bool GalleryInfoSetValueCommandArchive::_internal_has_old_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_value_ != nullptr);
  return value;
}
inline bool GalleryInfoSetValueCommandArchive::has_old_value() const {
  return _internal_has_old_value();
}
inline void GalleryInfoSetValueCommandArchive::clear_old_value() {
  if (_impl_.old_value_ != nullptr) _impl_.old_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue& GalleryInfoSetValueCommandArchive::_internal_old_value() const {
  const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* p = _impl_.old_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue&>(
      ::TSA::_GalleryInfoSetValueCommandArchive_PropertyValue_default_instance_);
}
inline const ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue& GalleryInfoSetValueCommandArchive::old_value() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfoSetValueCommandArchive.old_value)
  return _internal_old_value();
}
inline void GalleryInfoSetValueCommandArchive::unsafe_arena_set_allocated_old_value(
    ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* old_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_value_);
  }
  _impl_.old_value_ = old_value;
  if (old_value) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryInfoSetValueCommandArchive.old_value)
}
inline ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* GalleryInfoSetValueCommandArchive::release_old_value() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* temp = _impl_.old_value_;
  _impl_.old_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* GalleryInfoSetValueCommandArchive::unsafe_arena_release_old_value() {
  // @@protoc_insertion_point(field_release:TSA.GalleryInfoSetValueCommandArchive.old_value)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* temp = _impl_.old_value_;
  _impl_.old_value_ = nullptr;
  return temp;
}
inline ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* GalleryInfoSetValueCommandArchive::_internal_mutable_old_value() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSA::GalleryInfoSetValueCommandArchive_PropertyValue>(GetArenaForAllocation());
    _impl_.old_value_ = p;
  }
  return _impl_.old_value_;
}
inline ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* GalleryInfoSetValueCommandArchive::mutable_old_value() {
  ::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* _msg = _internal_mutable_old_value();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryInfoSetValueCommandArchive.old_value)
  return _msg;
}
inline void GalleryInfoSetValueCommandArchive::set_allocated_old_value(::TSA::GalleryInfoSetValueCommandArchive_PropertyValue* old_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.old_value_;
  }
  if (old_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(old_value);
    if (message_arena != submessage_arena) {
      old_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_value_ = old_value;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryInfoSetValueCommandArchive.old_value)
}

// -------------------------------------------------------------------

// GalleryInfoInsertItemsCommandArchive

// required .TSD.ContainerInsertChildrenCommandArchive super = 1;
inline bool GalleryInfoInsertItemsCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool GalleryInfoInsertItemsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::ContainerInsertChildrenCommandArchive& GalleryInfoInsertItemsCommandArchive::_internal_super() const {
  const ::TSD::ContainerInsertChildrenCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ContainerInsertChildrenCommandArchive&>(
      ::TSD::_ContainerInsertChildrenCommandArchive_default_instance_);
}
inline const ::TSD::ContainerInsertChildrenCommandArchive& GalleryInfoInsertItemsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfoInsertItemsCommandArchive.super)
  return _internal_super();
}
inline void GalleryInfoInsertItemsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::ContainerInsertChildrenCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryInfoInsertItemsCommandArchive.super)
}
inline ::TSD::ContainerInsertChildrenCommandArchive* GalleryInfoInsertItemsCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerInsertChildrenCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ContainerInsertChildrenCommandArchive* GalleryInfoInsertItemsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.GalleryInfoInsertItemsCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerInsertChildrenCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSD::ContainerInsertChildrenCommandArchive* GalleryInfoInsertItemsCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ContainerInsertChildrenCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSD::ContainerInsertChildrenCommandArchive* GalleryInfoInsertItemsCommandArchive::mutable_super() {
  ::TSD::ContainerInsertChildrenCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryInfoInsertItemsCommandArchive.super)
  return _msg;
}
inline void GalleryInfoInsertItemsCommandArchive::set_allocated_super(::TSD::ContainerInsertChildrenCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryInfoInsertItemsCommandArchive.super)
}

// repeated .TSP.Reference items = 2;
inline int GalleryInfoInsertItemsCommandArchive::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GalleryInfoInsertItemsCommandArchive::items_size() const {
  return _internal_items_size();
}
inline ::TSP::Reference* GalleryInfoInsertItemsCommandArchive::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.GalleryInfoInsertItemsCommandArchive.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
GalleryInfoInsertItemsCommandArchive::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:TSA.GalleryInfoInsertItemsCommandArchive.items)
  return &_impl_.items_;
}
inline const ::TSP::Reference& GalleryInfoInsertItemsCommandArchive::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::TSP::Reference& GalleryInfoInsertItemsCommandArchive::items(int index) const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfoInsertItemsCommandArchive.items)
  return _internal_items(index);
}
inline ::TSP::Reference* GalleryInfoInsertItemsCommandArchive::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::TSP::Reference* GalleryInfoInsertItemsCommandArchive::add_items() {
  ::TSP::Reference* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:TSA.GalleryInfoInsertItemsCommandArchive.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
GalleryInfoInsertItemsCommandArchive::items() const {
  // @@protoc_insertion_point(field_list:TSA.GalleryInfoInsertItemsCommandArchive.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// GalleryInfoRemoveItemsCommandArchive

// required .TSD.ContainerRemoveChildrenCommandArchive super = 1;
inline bool GalleryInfoRemoveItemsCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool GalleryInfoRemoveItemsCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::ContainerRemoveChildrenCommandArchive& GalleryInfoRemoveItemsCommandArchive::_internal_super() const {
  const ::TSD::ContainerRemoveChildrenCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ContainerRemoveChildrenCommandArchive&>(
      ::TSD::_ContainerRemoveChildrenCommandArchive_default_instance_);
}
inline const ::TSD::ContainerRemoveChildrenCommandArchive& GalleryInfoRemoveItemsCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfoRemoveItemsCommandArchive.super)
  return _internal_super();
}
inline void GalleryInfoRemoveItemsCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::ContainerRemoveChildrenCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryInfoRemoveItemsCommandArchive.super)
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* GalleryInfoRemoveItemsCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerRemoveChildrenCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* GalleryInfoRemoveItemsCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.GalleryInfoRemoveItemsCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::ContainerRemoveChildrenCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* GalleryInfoRemoveItemsCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ContainerRemoveChildrenCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSD::ContainerRemoveChildrenCommandArchive* GalleryInfoRemoveItemsCommandArchive::mutable_super() {
  ::TSD::ContainerRemoveChildrenCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryInfoRemoveItemsCommandArchive.super)
  return _msg;
}
inline void GalleryInfoRemoveItemsCommandArchive::set_allocated_super(::TSD::ContainerRemoveChildrenCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryInfoRemoveItemsCommandArchive.super)
}

// -------------------------------------------------------------------

// GalleryItemSetGeometryCommand

// required .TSK.CommandArchive super = 1;
inline bool GalleryItemSetGeometryCommand::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool GalleryItemSetGeometryCommand::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& GalleryItemSetGeometryCommand::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& GalleryItemSetGeometryCommand::super() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetGeometryCommand.super)
  return _internal_super();
}
inline void GalleryItemSetGeometryCommand::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSetGeometryCommand.super)
}
inline ::TSK::CommandArchive* GalleryItemSetGeometryCommand::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* GalleryItemSetGeometryCommand::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSetGeometryCommand.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* GalleryItemSetGeometryCommand::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* GalleryItemSetGeometryCommand::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSetGeometryCommand.super)
  return _msg;
}
inline void GalleryItemSetGeometryCommand::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSetGeometryCommand.super)
}

// optional .TSP.UUIDPath item_id_path = 2;
inline bool GalleryItemSetGeometryCommand::_internal_has_item_id_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_id_path_ != nullptr);
  return value;
}
inline bool GalleryItemSetGeometryCommand::has_item_id_path() const {
  return _internal_has_item_id_path();
}
inline const ::TSP::UUIDPath& GalleryItemSetGeometryCommand::_internal_item_id_path() const {
  const ::TSP::UUIDPath* p = _impl_.item_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& GalleryItemSetGeometryCommand::item_id_path() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetGeometryCommand.item_id_path)
  return _internal_item_id_path();
}
inline void GalleryItemSetGeometryCommand::unsafe_arena_set_allocated_item_id_path(
    ::TSP::UUIDPath* item_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_path_);
  }
  _impl_.item_id_path_ = item_id_path;
  if (item_id_path) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSetGeometryCommand.item_id_path)
}
inline ::TSP::UUIDPath* GalleryItemSetGeometryCommand::release_item_id_path() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.item_id_path_;
  _impl_.item_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* GalleryItemSetGeometryCommand::unsafe_arena_release_item_id_path() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSetGeometryCommand.item_id_path)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.item_id_path_;
  _impl_.item_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* GalleryItemSetGeometryCommand::_internal_mutable_item_id_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.item_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    _impl_.item_id_path_ = p;
  }
  return _impl_.item_id_path_;
}
inline ::TSP::UUIDPath* GalleryItemSetGeometryCommand::mutable_item_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_item_id_path();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSetGeometryCommand.item_id_path)
  return _msg;
}
inline void GalleryItemSetGeometryCommand::set_allocated_item_id_path(::TSP::UUIDPath* item_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_path_);
  }
  if (item_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_id_path));
    if (message_arena != submessage_arena) {
      item_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_id_path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.item_id_path_ = item_id_path;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSetGeometryCommand.item_id_path)
}

// optional .TSP.Point offset = 3;
inline bool GalleryItemSetGeometryCommand::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.offset_ != nullptr);
  return value;
}
inline bool GalleryItemSetGeometryCommand::has_offset() const {
  return _internal_has_offset();
}
inline const ::TSP::Point& GalleryItemSetGeometryCommand::_internal_offset() const {
  const ::TSP::Point* p = _impl_.offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& GalleryItemSetGeometryCommand::offset() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetGeometryCommand.offset)
  return _internal_offset();
}
inline void GalleryItemSetGeometryCommand::unsafe_arena_set_allocated_offset(
    ::TSP::Point* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  _impl_.offset_ = offset;
  if (offset) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSetGeometryCommand.offset)
}
inline ::TSP::Point* GalleryItemSetGeometryCommand::release_offset() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Point* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* GalleryItemSetGeometryCommand::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSetGeometryCommand.offset)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Point* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
  return temp;
}
inline ::TSP::Point* GalleryItemSetGeometryCommand::_internal_mutable_offset() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.offset_ = p;
  }
  return _impl_.offset_;
}
inline ::TSP::Point* GalleryItemSetGeometryCommand::mutable_offset() {
  ::TSP::Point* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSetGeometryCommand.offset)
  return _msg;
}
inline void GalleryItemSetGeometryCommand::set_allocated_offset(::TSP::Point* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSetGeometryCommand.offset)
}

// optional float scale = 4 [default = 1];
inline bool GalleryItemSetGeometryCommand::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GalleryItemSetGeometryCommand::has_scale() const {
  return _internal_has_scale();
}
inline void GalleryItemSetGeometryCommand::clear_scale() {
  _impl_.scale_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float GalleryItemSetGeometryCommand::_internal_scale() const {
  return _impl_.scale_;
}
inline float GalleryItemSetGeometryCommand::scale() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetGeometryCommand.scale)
  return _internal_scale();
}
inline void GalleryItemSetGeometryCommand::_internal_set_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.scale_ = value;
}
inline void GalleryItemSetGeometryCommand::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:TSA.GalleryItemSetGeometryCommand.scale)
}

// optional .TSP.Point old_offset = 5;
inline bool GalleryItemSetGeometryCommand::_internal_has_old_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_offset_ != nullptr);
  return value;
}
inline bool GalleryItemSetGeometryCommand::has_old_offset() const {
  return _internal_has_old_offset();
}
inline const ::TSP::Point& GalleryItemSetGeometryCommand::_internal_old_offset() const {
  const ::TSP::Point* p = _impl_.old_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& GalleryItemSetGeometryCommand::old_offset() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetGeometryCommand.old_offset)
  return _internal_old_offset();
}
inline void GalleryItemSetGeometryCommand::unsafe_arena_set_allocated_old_offset(
    ::TSP::Point* old_offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_offset_);
  }
  _impl_.old_offset_ = old_offset;
  if (old_offset) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSetGeometryCommand.old_offset)
}
inline ::TSP::Point* GalleryItemSetGeometryCommand::release_old_offset() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Point* temp = _impl_.old_offset_;
  _impl_.old_offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* GalleryItemSetGeometryCommand::unsafe_arena_release_old_offset() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSetGeometryCommand.old_offset)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Point* temp = _impl_.old_offset_;
  _impl_.old_offset_ = nullptr;
  return temp;
}
inline ::TSP::Point* GalleryItemSetGeometryCommand::_internal_mutable_old_offset() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.old_offset_ = p;
  }
  return _impl_.old_offset_;
}
inline ::TSP::Point* GalleryItemSetGeometryCommand::mutable_old_offset() {
  ::TSP::Point* _msg = _internal_mutable_old_offset();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSetGeometryCommand.old_offset)
  return _msg;
}
inline void GalleryItemSetGeometryCommand::set_allocated_old_offset(::TSP::Point* old_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_offset_);
  }
  if (old_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_offset));
    if (message_arena != submessage_arena) {
      old_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_offset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_offset_ = old_offset;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSetGeometryCommand.old_offset)
}

// optional float old_scale = 6;
inline bool GalleryItemSetGeometryCommand::_internal_has_old_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GalleryItemSetGeometryCommand::has_old_scale() const {
  return _internal_has_old_scale();
}
inline void GalleryItemSetGeometryCommand::clear_old_scale() {
  _impl_.old_scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float GalleryItemSetGeometryCommand::_internal_old_scale() const {
  return _impl_.old_scale_;
}
inline float GalleryItemSetGeometryCommand::old_scale() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetGeometryCommand.old_scale)
  return _internal_old_scale();
}
inline void GalleryItemSetGeometryCommand::_internal_set_old_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.old_scale_ = value;
}
inline void GalleryItemSetGeometryCommand::set_old_scale(float value) {
  _internal_set_old_scale(value);
  // @@protoc_insertion_point(field_set:TSA.GalleryItemSetGeometryCommand.old_scale)
}

// -------------------------------------------------------------------

// GalleryItem

// optional .TSP.Point offset = 1;
inline bool GalleryItem::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.offset_ != nullptr);
  return value;
}
inline bool GalleryItem::has_offset() const {
  return _internal_has_offset();
}
inline const ::TSP::Point& GalleryItem::_internal_offset() const {
  const ::TSP::Point* p = _impl_.offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Point&>(
      ::TSP::_Point_default_instance_);
}
inline const ::TSP::Point& GalleryItem::offset() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItem.offset)
  return _internal_offset();
}
inline void GalleryItem::unsafe_arena_set_allocated_offset(
    ::TSP::Point* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  _impl_.offset_ = offset;
  if (offset) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItem.offset)
}
inline ::TSP::Point* GalleryItem::release_offset() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Point* GalleryItem::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItem.offset)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Point* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
  return temp;
}
inline ::TSP::Point* GalleryItem::_internal_mutable_offset() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Point>(GetArenaForAllocation());
    _impl_.offset_ = p;
  }
  return _impl_.offset_;
}
inline ::TSP::Point* GalleryItem::mutable_offset() {
  ::TSP::Point* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItem.offset)
  return _msg;
}
inline void GalleryItem::set_allocated_offset(::TSP::Point* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItem.offset)
}

// optional float scale = 2;
inline bool GalleryItem::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool GalleryItem::has_scale() const {
  return _internal_has_scale();
}
inline void GalleryItem::clear_scale() {
  _impl_.scale_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline float GalleryItem::_internal_scale() const {
  return _impl_.scale_;
}
inline float GalleryItem::scale() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItem.scale)
  return _internal_scale();
}
inline void GalleryItem::_internal_set_scale(float value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.scale_ = value;
}
inline void GalleryItem::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:TSA.GalleryItem.scale)
}

// optional .TSP.DataReference image_data = 3;
inline bool GalleryItem::_internal_has_image_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_data_ != nullptr);
  return value;
}
inline bool GalleryItem::has_image_data() const {
  return _internal_has_image_data();
}
inline const ::TSP::DataReference& GalleryItem::_internal_image_data() const {
  const ::TSP::DataReference* p = _impl_.image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& GalleryItem::image_data() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItem.image_data)
  return _internal_image_data();
}
inline void GalleryItem::unsafe_arena_set_allocated_image_data(
    ::TSP::DataReference* image_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_data_);
  }
  _impl_.image_data_ = image_data;
  if (image_data) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItem.image_data)
}
inline ::TSP::DataReference* GalleryItem::release_image_data() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::DataReference* temp = _impl_.image_data_;
  _impl_.image_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* GalleryItem::unsafe_arena_release_image_data() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItem.image_data)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::DataReference* temp = _impl_.image_data_;
  _impl_.image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* GalleryItem::_internal_mutable_image_data() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.image_data_ = p;
  }
  return _impl_.image_data_;
}
inline ::TSP::DataReference* GalleryItem::mutable_image_data() {
  ::TSP::DataReference* _msg = _internal_mutable_image_data();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItem.image_data)
  return _msg;
}
inline void GalleryItem::set_allocated_image_data(::TSP::DataReference* image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_data_);
  }
  if (image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_data));
    if (message_arena != submessage_arena) {
      image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.image_data_ = image_data;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItem.image_data)
}

// optional .TSP.DataReference thumbnail_image_data = 4;
inline bool GalleryItem::_internal_has_thumbnail_image_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.thumbnail_image_data_ != nullptr);
  return value;
}
inline bool GalleryItem::has_thumbnail_image_data() const {
  return _internal_has_thumbnail_image_data();
}
inline const ::TSP::DataReference& GalleryItem::_internal_thumbnail_image_data() const {
  const ::TSP::DataReference* p = _impl_.thumbnail_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& GalleryItem::thumbnail_image_data() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItem.thumbnail_image_data)
  return _internal_thumbnail_image_data();
}
inline void GalleryItem::unsafe_arena_set_allocated_thumbnail_image_data(
    ::TSP::DataReference* thumbnail_image_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thumbnail_image_data_);
  }
  _impl_.thumbnail_image_data_ = thumbnail_image_data;
  if (thumbnail_image_data) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItem.thumbnail_image_data)
}
inline ::TSP::DataReference* GalleryItem::release_thumbnail_image_data() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = _impl_.thumbnail_image_data_;
  _impl_.thumbnail_image_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* GalleryItem::unsafe_arena_release_thumbnail_image_data() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItem.thumbnail_image_data)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::DataReference* temp = _impl_.thumbnail_image_data_;
  _impl_.thumbnail_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* GalleryItem::_internal_mutable_thumbnail_image_data() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.thumbnail_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.thumbnail_image_data_ = p;
  }
  return _impl_.thumbnail_image_data_;
}
inline ::TSP::DataReference* GalleryItem::mutable_thumbnail_image_data() {
  ::TSP::DataReference* _msg = _internal_mutable_thumbnail_image_data();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItem.thumbnail_image_data)
  return _msg;
}
inline void GalleryItem::set_allocated_thumbnail_image_data(::TSP::DataReference* thumbnail_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thumbnail_image_data_);
  }
  if (thumbnail_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnail_image_data));
    if (message_arena != submessage_arena) {
      thumbnail_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumbnail_image_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.thumbnail_image_data_ = thumbnail_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItem.thumbnail_image_data)
}

// optional .TSD.ImageAdjustmentsArchive image_adjustments = 5;
inline bool GalleryItem::_internal_has_image_adjustments() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_adjustments_ != nullptr);
  return value;
}
inline bool GalleryItem::has_image_adjustments() const {
  return _internal_has_image_adjustments();
}
inline const ::TSD::ImageAdjustmentsArchive& GalleryItem::_internal_image_adjustments() const {
  const ::TSD::ImageAdjustmentsArchive* p = _impl_.image_adjustments_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::ImageAdjustmentsArchive&>(
      ::TSD::_ImageAdjustmentsArchive_default_instance_);
}
inline const ::TSD::ImageAdjustmentsArchive& GalleryItem::image_adjustments() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItem.image_adjustments)
  return _internal_image_adjustments();
}
inline void GalleryItem::unsafe_arena_set_allocated_image_adjustments(
    ::TSD::ImageAdjustmentsArchive* image_adjustments) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_adjustments_);
  }
  _impl_.image_adjustments_ = image_adjustments;
  if (image_adjustments) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItem.image_adjustments)
}
inline ::TSD::ImageAdjustmentsArchive* GalleryItem::release_image_adjustments() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::ImageAdjustmentsArchive* temp = _impl_.image_adjustments_;
  _impl_.image_adjustments_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* GalleryItem::unsafe_arena_release_image_adjustments() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItem.image_adjustments)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSD::ImageAdjustmentsArchive* temp = _impl_.image_adjustments_;
  _impl_.image_adjustments_ = nullptr;
  return temp;
}
inline ::TSD::ImageAdjustmentsArchive* GalleryItem::_internal_mutable_image_adjustments() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.image_adjustments_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::ImageAdjustmentsArchive>(GetArenaForAllocation());
    _impl_.image_adjustments_ = p;
  }
  return _impl_.image_adjustments_;
}
inline ::TSD::ImageAdjustmentsArchive* GalleryItem::mutable_image_adjustments() {
  ::TSD::ImageAdjustmentsArchive* _msg = _internal_mutable_image_adjustments();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItem.image_adjustments)
  return _msg;
}
inline void GalleryItem::set_allocated_image_adjustments(::TSD::ImageAdjustmentsArchive* image_adjustments) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_adjustments_);
  }
  if (image_adjustments) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_adjustments));
    if (message_arena != submessage_arena) {
      image_adjustments = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_adjustments, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.image_adjustments_ = image_adjustments;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItem.image_adjustments)
}

// optional .TSP.DataReference adjusted_image_data = 6;
inline bool GalleryItem::_internal_has_adjusted_image_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.adjusted_image_data_ != nullptr);
  return value;
}
inline bool GalleryItem::has_adjusted_image_data() const {
  return _internal_has_adjusted_image_data();
}
inline const ::TSP::DataReference& GalleryItem::_internal_adjusted_image_data() const {
  const ::TSP::DataReference* p = _impl_.adjusted_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& GalleryItem::adjusted_image_data() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItem.adjusted_image_data)
  return _internal_adjusted_image_data();
}
inline void GalleryItem::unsafe_arena_set_allocated_adjusted_image_data(
    ::TSP::DataReference* adjusted_image_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adjusted_image_data_);
  }
  _impl_.adjusted_image_data_ = adjusted_image_data;
  if (adjusted_image_data) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItem.adjusted_image_data)
}
inline ::TSP::DataReference* GalleryItem::release_adjusted_image_data() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::DataReference* temp = _impl_.adjusted_image_data_;
  _impl_.adjusted_image_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* GalleryItem::unsafe_arena_release_adjusted_image_data() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItem.adjusted_image_data)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::DataReference* temp = _impl_.adjusted_image_data_;
  _impl_.adjusted_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* GalleryItem::_internal_mutable_adjusted_image_data() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.adjusted_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.adjusted_image_data_ = p;
  }
  return _impl_.adjusted_image_data_;
}
inline ::TSP::DataReference* GalleryItem::mutable_adjusted_image_data() {
  ::TSP::DataReference* _msg = _internal_mutable_adjusted_image_data();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItem.adjusted_image_data)
  return _msg;
}
inline void GalleryItem::set_allocated_adjusted_image_data(::TSP::DataReference* adjusted_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.adjusted_image_data_);
  }
  if (adjusted_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(adjusted_image_data));
    if (message_arena != submessage_arena) {
      adjusted_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adjusted_image_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.adjusted_image_data_ = adjusted_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItem.adjusted_image_data)
}

// optional .TSP.DataReference thumbnail_adjusted_image_data = 7;
inline bool GalleryItem::_internal_has_thumbnail_adjusted_image_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.thumbnail_adjusted_image_data_ != nullptr);
  return value;
}
inline bool GalleryItem::has_thumbnail_adjusted_image_data() const {
  return _internal_has_thumbnail_adjusted_image_data();
}
inline const ::TSP::DataReference& GalleryItem::_internal_thumbnail_adjusted_image_data() const {
  const ::TSP::DataReference* p = _impl_.thumbnail_adjusted_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& GalleryItem::thumbnail_adjusted_image_data() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItem.thumbnail_adjusted_image_data)
  return _internal_thumbnail_adjusted_image_data();
}
inline void GalleryItem::unsafe_arena_set_allocated_thumbnail_adjusted_image_data(
    ::TSP::DataReference* thumbnail_adjusted_image_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thumbnail_adjusted_image_data_);
  }
  _impl_.thumbnail_adjusted_image_data_ = thumbnail_adjusted_image_data;
  if (thumbnail_adjusted_image_data) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItem.thumbnail_adjusted_image_data)
}
inline ::TSP::DataReference* GalleryItem::release_thumbnail_adjusted_image_data() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::DataReference* temp = _impl_.thumbnail_adjusted_image_data_;
  _impl_.thumbnail_adjusted_image_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* GalleryItem::unsafe_arena_release_thumbnail_adjusted_image_data() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItem.thumbnail_adjusted_image_data)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::DataReference* temp = _impl_.thumbnail_adjusted_image_data_;
  _impl_.thumbnail_adjusted_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* GalleryItem::_internal_mutable_thumbnail_adjusted_image_data() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.thumbnail_adjusted_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.thumbnail_adjusted_image_data_ = p;
  }
  return _impl_.thumbnail_adjusted_image_data_;
}
inline ::TSP::DataReference* GalleryItem::mutable_thumbnail_adjusted_image_data() {
  ::TSP::DataReference* _msg = _internal_mutable_thumbnail_adjusted_image_data();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItem.thumbnail_adjusted_image_data)
  return _msg;
}
inline void GalleryItem::set_allocated_thumbnail_adjusted_image_data(::TSP::DataReference* thumbnail_adjusted_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.thumbnail_adjusted_image_data_);
  }
  if (thumbnail_adjusted_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(thumbnail_adjusted_image_data));
    if (message_arena != submessage_arena) {
      thumbnail_adjusted_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thumbnail_adjusted_image_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.thumbnail_adjusted_image_data_ = thumbnail_adjusted_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItem.thumbnail_adjusted_image_data)
}

// optional .TSP.Reference caption_storage = 8;
inline bool GalleryItem::_internal_has_caption_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.caption_storage_ != nullptr);
  return value;
}
inline bool GalleryItem::has_caption_storage() const {
  return _internal_has_caption_storage();
}
inline const ::TSP::Reference& GalleryItem::_internal_caption_storage() const {
  const ::TSP::Reference* p = _impl_.caption_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& GalleryItem::caption_storage() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItem.caption_storage)
  return _internal_caption_storage();
}
inline void GalleryItem::unsafe_arena_set_allocated_caption_storage(
    ::TSP::Reference* caption_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caption_storage_);
  }
  _impl_.caption_storage_ = caption_storage;
  if (caption_storage) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItem.caption_storage)
}
inline ::TSP::Reference* GalleryItem::release_caption_storage() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.caption_storage_;
  _impl_.caption_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* GalleryItem::unsafe_arena_release_caption_storage() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItem.caption_storage)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.caption_storage_;
  _impl_.caption_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* GalleryItem::_internal_mutable_caption_storage() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.caption_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.caption_storage_ = p;
  }
  return _impl_.caption_storage_;
}
inline ::TSP::Reference* GalleryItem::mutable_caption_storage() {
  ::TSP::Reference* _msg = _internal_mutable_caption_storage();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItem.caption_storage)
  return _msg;
}
inline void GalleryItem::set_allocated_caption_storage(::TSP::Reference* caption_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caption_storage_);
  }
  if (caption_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_storage));
    if (message_arena != submessage_arena) {
      caption_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.caption_storage_ = caption_storage;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItem.caption_storage)
}

// optional string accessibility_description = 9;
inline bool GalleryItem::_internal_has_accessibility_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GalleryItem::has_accessibility_description() const {
  return _internal_has_accessibility_description();
}
inline void GalleryItem::clear_accessibility_description() {
  _impl_.accessibility_description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GalleryItem::accessibility_description() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItem.accessibility_description)
  return _internal_accessibility_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GalleryItem::set_accessibility_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.accessibility_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSA.GalleryItem.accessibility_description)
}
inline std::string* GalleryItem::mutable_accessibility_description() {
  std::string* _s = _internal_mutable_accessibility_description();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItem.accessibility_description)
  return _s;
}
inline const std::string& GalleryItem::_internal_accessibility_description() const {
  return _impl_.accessibility_description_.Get();
}
inline void GalleryItem::_internal_set_accessibility_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.accessibility_description_.Set(value, GetArenaForAllocation());
}
inline std::string* GalleryItem::_internal_mutable_accessibility_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.accessibility_description_.Mutable(GetArenaForAllocation());
}
inline std::string* GalleryItem::release_accessibility_description() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItem.accessibility_description)
  if (!_internal_has_accessibility_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.accessibility_description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accessibility_description_.IsDefault()) {
    _impl_.accessibility_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GalleryItem::set_allocated_accessibility_description(std::string* accessibility_description) {
  if (accessibility_description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.accessibility_description_.SetAllocated(accessibility_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accessibility_description_.IsDefault()) {
    _impl_.accessibility_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItem.accessibility_description)
}

// -------------------------------------------------------------------

// GalleryInfo

// repeated .TSP.Reference items = 1;
inline int GalleryInfo::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GalleryInfo::items_size() const {
  return _internal_items_size();
}
inline ::TSP::Reference* GalleryInfo::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.GalleryInfo.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
GalleryInfo::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:TSA.GalleryInfo.items)
  return &_impl_.items_;
}
inline const ::TSP::Reference& GalleryInfo::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::TSP::Reference& GalleryInfo::items(int index) const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfo.items)
  return _internal_items(index);
}
inline ::TSP::Reference* GalleryInfo::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::TSP::Reference* GalleryInfo::add_items() {
  ::TSP::Reference* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:TSA.GalleryInfo.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
GalleryInfo::items() const {
  // @@protoc_insertion_point(field_list:TSA.GalleryInfo.items)
  return _impl_.items_;
}

// optional .TSA.GalleryCaptionMode caption_mode = 2;
inline bool GalleryInfo::_internal_has_caption_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GalleryInfo::has_caption_mode() const {
  return _internal_has_caption_mode();
}
inline void GalleryInfo::clear_caption_mode() {
  _impl_.caption_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::TSA::GalleryCaptionMode GalleryInfo::_internal_caption_mode() const {
  return static_cast< ::TSA::GalleryCaptionMode >(_impl_.caption_mode_);
}
inline ::TSA::GalleryCaptionMode GalleryInfo::caption_mode() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfo.caption_mode)
  return _internal_caption_mode();
}
inline void GalleryInfo::_internal_set_caption_mode(::TSA::GalleryCaptionMode value) {
  assert(::TSA::GalleryCaptionMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.caption_mode_ = value;
}
inline void GalleryInfo::set_caption_mode(::TSA::GalleryCaptionMode value) {
  _internal_set_caption_mode(value);
  // @@protoc_insertion_point(field_set:TSA.GalleryInfo.caption_mode)
}

// optional .TSP.Reference caption_storage = 3;
inline bool GalleryInfo::_internal_has_caption_storage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.caption_storage_ != nullptr);
  return value;
}
inline bool GalleryInfo::has_caption_storage() const {
  return _internal_has_caption_storage();
}
inline const ::TSP::Reference& GalleryInfo::_internal_caption_storage() const {
  const ::TSP::Reference* p = _impl_.caption_storage_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& GalleryInfo::caption_storage() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryInfo.caption_storage)
  return _internal_caption_storage();
}
inline void GalleryInfo::unsafe_arena_set_allocated_caption_storage(
    ::TSP::Reference* caption_storage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caption_storage_);
  }
  _impl_.caption_storage_ = caption_storage;
  if (caption_storage) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryInfo.caption_storage)
}
inline ::TSP::Reference* GalleryInfo::release_caption_storage() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.caption_storage_;
  _impl_.caption_storage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* GalleryInfo::unsafe_arena_release_caption_storage() {
  // @@protoc_insertion_point(field_release:TSA.GalleryInfo.caption_storage)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.caption_storage_;
  _impl_.caption_storage_ = nullptr;
  return temp;
}
inline ::TSP::Reference* GalleryInfo::_internal_mutable_caption_storage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.caption_storage_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.caption_storage_ = p;
  }
  return _impl_.caption_storage_;
}
inline ::TSP::Reference* GalleryInfo::mutable_caption_storage() {
  ::TSP::Reference* _msg = _internal_mutable_caption_storage();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryInfo.caption_storage)
  return _msg;
}
inline void GalleryInfo::set_allocated_caption_storage(::TSP::Reference* caption_storage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caption_storage_);
  }
  if (caption_storage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_storage));
    if (message_arena != submessage_arena) {
      caption_storage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption_storage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.caption_storage_ = caption_storage;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryInfo.caption_storage)
}

// -------------------------------------------------------------------

// GallerySelectionTransformer

// required .TSD.DrawableSelectionTransformerArchive super = 1;
inline bool GallerySelectionTransformer::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool GallerySelectionTransformer::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::DrawableSelectionTransformerArchive& GallerySelectionTransformer::_internal_super() const {
  const ::TSD::DrawableSelectionTransformerArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableSelectionTransformerArchive&>(
      ::TSD::_DrawableSelectionTransformerArchive_default_instance_);
}
inline const ::TSD::DrawableSelectionTransformerArchive& GallerySelectionTransformer::super() const {
  // @@protoc_insertion_point(field_get:TSA.GallerySelectionTransformer.super)
  return _internal_super();
}
inline void GallerySelectionTransformer::unsafe_arena_set_allocated_super(
    ::TSD::DrawableSelectionTransformerArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GallerySelectionTransformer.super)
}
inline ::TSD::DrawableSelectionTransformerArchive* GallerySelectionTransformer::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableSelectionTransformerArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::DrawableSelectionTransformerArchive* GallerySelectionTransformer::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.GallerySelectionTransformer.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableSelectionTransformerArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableSelectionTransformerArchive* GallerySelectionTransformer::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableSelectionTransformerArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSD::DrawableSelectionTransformerArchive* GallerySelectionTransformer::mutable_super() {
  ::TSD::DrawableSelectionTransformerArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.GallerySelectionTransformer.super)
  return _msg;
}
inline void GallerySelectionTransformer::set_allocated_super(::TSD::DrawableSelectionTransformerArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.GallerySelectionTransformer.super)
}

// optional .TSP.UUIDPath gallery_uuid_path = 2;
inline bool GallerySelectionTransformer::_internal_has_gallery_uuid_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gallery_uuid_path_ != nullptr);
  return value;
}
inline bool GallerySelectionTransformer::has_gallery_uuid_path() const {
  return _internal_has_gallery_uuid_path();
}
inline const ::TSP::UUIDPath& GallerySelectionTransformer::_internal_gallery_uuid_path() const {
  const ::TSP::UUIDPath* p = _impl_.gallery_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& GallerySelectionTransformer::gallery_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSA.GallerySelectionTransformer.gallery_uuid_path)
  return _internal_gallery_uuid_path();
}
inline void GallerySelectionTransformer::unsafe_arena_set_allocated_gallery_uuid_path(
    ::TSP::UUIDPath* gallery_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gallery_uuid_path_);
  }
  _impl_.gallery_uuid_path_ = gallery_uuid_path;
  if (gallery_uuid_path) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GallerySelectionTransformer.gallery_uuid_path)
}
inline ::TSP::UUIDPath* GallerySelectionTransformer::release_gallery_uuid_path() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.gallery_uuid_path_;
  _impl_.gallery_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* GallerySelectionTransformer::unsafe_arena_release_gallery_uuid_path() {
  // @@protoc_insertion_point(field_release:TSA.GallerySelectionTransformer.gallery_uuid_path)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.gallery_uuid_path_;
  _impl_.gallery_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* GallerySelectionTransformer::_internal_mutable_gallery_uuid_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.gallery_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    _impl_.gallery_uuid_path_ = p;
  }
  return _impl_.gallery_uuid_path_;
}
inline ::TSP::UUIDPath* GallerySelectionTransformer::mutable_gallery_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_gallery_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSA.GallerySelectionTransformer.gallery_uuid_path)
  return _msg;
}
inline void GallerySelectionTransformer::set_allocated_gallery_uuid_path(::TSP::UUIDPath* gallery_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gallery_uuid_path_);
  }
  if (gallery_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gallery_uuid_path));
    if (message_arena != submessage_arena) {
      gallery_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gallery_uuid_path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.gallery_uuid_path_ = gallery_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSA.GallerySelectionTransformer.gallery_uuid_path)
}

// optional .TSP.UUIDPath caption_storage_uuid_path = 3;
inline bool GallerySelectionTransformer::_internal_has_caption_storage_uuid_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.caption_storage_uuid_path_ != nullptr);
  return value;
}
inline bool GallerySelectionTransformer::has_caption_storage_uuid_path() const {
  return _internal_has_caption_storage_uuid_path();
}
inline const ::TSP::UUIDPath& GallerySelectionTransformer::_internal_caption_storage_uuid_path() const {
  const ::TSP::UUIDPath* p = _impl_.caption_storage_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& GallerySelectionTransformer::caption_storage_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSA.GallerySelectionTransformer.caption_storage_uuid_path)
  return _internal_caption_storage_uuid_path();
}
inline void GallerySelectionTransformer::unsafe_arena_set_allocated_caption_storage_uuid_path(
    ::TSP::UUIDPath* caption_storage_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caption_storage_uuid_path_);
  }
  _impl_.caption_storage_uuid_path_ = caption_storage_uuid_path;
  if (caption_storage_uuid_path) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GallerySelectionTransformer.caption_storage_uuid_path)
}
inline ::TSP::UUIDPath* GallerySelectionTransformer::release_caption_storage_uuid_path() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = _impl_.caption_storage_uuid_path_;
  _impl_.caption_storage_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* GallerySelectionTransformer::unsafe_arena_release_caption_storage_uuid_path() {
  // @@protoc_insertion_point(field_release:TSA.GallerySelectionTransformer.caption_storage_uuid_path)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::UUIDPath* temp = _impl_.caption_storage_uuid_path_;
  _impl_.caption_storage_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* GallerySelectionTransformer::_internal_mutable_caption_storage_uuid_path() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.caption_storage_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    _impl_.caption_storage_uuid_path_ = p;
  }
  return _impl_.caption_storage_uuid_path_;
}
inline ::TSP::UUIDPath* GallerySelectionTransformer::mutable_caption_storage_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_caption_storage_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSA.GallerySelectionTransformer.caption_storage_uuid_path)
  return _msg;
}
inline void GallerySelectionTransformer::set_allocated_caption_storage_uuid_path(::TSP::UUIDPath* caption_storage_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caption_storage_uuid_path_);
  }
  if (caption_storage_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_storage_uuid_path));
    if (message_arena != submessage_arena) {
      caption_storage_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption_storage_uuid_path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.caption_storage_uuid_path_ = caption_storage_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSA.GallerySelectionTransformer.caption_storage_uuid_path)
}

// -------------------------------------------------------------------

// GalleryItemSelection

// optional .TSP.Reference displayed_item = 1;
inline bool GalleryItemSelection::_internal_has_displayed_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.displayed_item_ != nullptr);
  return value;
}
inline bool GalleryItemSelection::has_displayed_item() const {
  return _internal_has_displayed_item();
}
inline const ::TSP::Reference& GalleryItemSelection::_internal_displayed_item() const {
  const ::TSP::Reference* p = _impl_.displayed_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& GalleryItemSelection::displayed_item() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSelection.displayed_item)
  return _internal_displayed_item();
}
inline void GalleryItemSelection::unsafe_arena_set_allocated_displayed_item(
    ::TSP::Reference* displayed_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.displayed_item_);
  }
  _impl_.displayed_item_ = displayed_item;
  if (displayed_item) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSelection.displayed_item)
}
inline ::TSP::Reference* GalleryItemSelection::release_displayed_item() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.displayed_item_;
  _impl_.displayed_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* GalleryItemSelection::unsafe_arena_release_displayed_item() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSelection.displayed_item)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.displayed_item_;
  _impl_.displayed_item_ = nullptr;
  return temp;
}
inline ::TSP::Reference* GalleryItemSelection::_internal_mutable_displayed_item() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.displayed_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.displayed_item_ = p;
  }
  return _impl_.displayed_item_;
}
inline ::TSP::Reference* GalleryItemSelection::mutable_displayed_item() {
  ::TSP::Reference* _msg = _internal_mutable_displayed_item();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSelection.displayed_item)
  return _msg;
}
inline void GalleryItemSelection::set_allocated_displayed_item(::TSP::Reference* displayed_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.displayed_item_);
  }
  if (displayed_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(displayed_item));
    if (message_arena != submessage_arena) {
      displayed_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, displayed_item, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.displayed_item_ = displayed_item;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSelection.displayed_item)
}

// repeated .TSP.Reference items = 2;
inline int GalleryItemSelection::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int GalleryItemSelection::items_size() const {
  return _internal_items_size();
}
inline ::TSP::Reference* GalleryItemSelection::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSelection.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
GalleryItemSelection::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:TSA.GalleryItemSelection.items)
  return &_impl_.items_;
}
inline const ::TSP::Reference& GalleryItemSelection::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::TSP::Reference& GalleryItemSelection::items(int index) const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSelection.items)
  return _internal_items(index);
}
inline ::TSP::Reference* GalleryItemSelection::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::TSP::Reference* GalleryItemSelection::add_items() {
  ::TSP::Reference* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:TSA.GalleryItemSelection.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
GalleryItemSelection::items() const {
  // @@protoc_insertion_point(field_list:TSA.GalleryItemSelection.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// GalleryItemSelectionTransformer

// optional .TSA.GalleryItemSelectionTransformerHelper transformer_helper = 1;
inline bool GalleryItemSelectionTransformer::_internal_has_transformer_helper() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transformer_helper_ != nullptr);
  return value;
}
inline bool GalleryItemSelectionTransformer::has_transformer_helper() const {
  return _internal_has_transformer_helper();
}
inline void GalleryItemSelectionTransformer::clear_transformer_helper() {
  if (_impl_.transformer_helper_ != nullptr) _impl_.transformer_helper_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSA::GalleryItemSelectionTransformerHelper& GalleryItemSelectionTransformer::_internal_transformer_helper() const {
  const ::TSA::GalleryItemSelectionTransformerHelper* p = _impl_.transformer_helper_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSA::GalleryItemSelectionTransformerHelper&>(
      ::TSA::_GalleryItemSelectionTransformerHelper_default_instance_);
}
inline const ::TSA::GalleryItemSelectionTransformerHelper& GalleryItemSelectionTransformer::transformer_helper() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSelectionTransformer.transformer_helper)
  return _internal_transformer_helper();
}
inline void GalleryItemSelectionTransformer::unsafe_arena_set_allocated_transformer_helper(
    ::TSA::GalleryItemSelectionTransformerHelper* transformer_helper) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transformer_helper_);
  }
  _impl_.transformer_helper_ = transformer_helper;
  if (transformer_helper) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSelectionTransformer.transformer_helper)
}
inline ::TSA::GalleryItemSelectionTransformerHelper* GalleryItemSelectionTransformer::release_transformer_helper() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSA::GalleryItemSelectionTransformerHelper* temp = _impl_.transformer_helper_;
  _impl_.transformer_helper_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSA::GalleryItemSelectionTransformerHelper* GalleryItemSelectionTransformer::unsafe_arena_release_transformer_helper() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSelectionTransformer.transformer_helper)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSA::GalleryItemSelectionTransformerHelper* temp = _impl_.transformer_helper_;
  _impl_.transformer_helper_ = nullptr;
  return temp;
}
inline ::TSA::GalleryItemSelectionTransformerHelper* GalleryItemSelectionTransformer::_internal_mutable_transformer_helper() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.transformer_helper_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSA::GalleryItemSelectionTransformerHelper>(GetArenaForAllocation());
    _impl_.transformer_helper_ = p;
  }
  return _impl_.transformer_helper_;
}
inline ::TSA::GalleryItemSelectionTransformerHelper* GalleryItemSelectionTransformer::mutable_transformer_helper() {
  ::TSA::GalleryItemSelectionTransformerHelper* _msg = _internal_mutable_transformer_helper();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSelectionTransformer.transformer_helper)
  return _msg;
}
inline void GalleryItemSelectionTransformer::set_allocated_transformer_helper(::TSA::GalleryItemSelectionTransformerHelper* transformer_helper) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transformer_helper_;
  }
  if (transformer_helper) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transformer_helper);
    if (message_arena != submessage_arena) {
      transformer_helper = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transformer_helper, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.transformer_helper_ = transformer_helper;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSelectionTransformer.transformer_helper)
}

// optional .TSP.UUIDPath caption_storage_uuid_path = 2;
inline bool GalleryItemSelectionTransformer::_internal_has_caption_storage_uuid_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.caption_storage_uuid_path_ != nullptr);
  return value;
}
inline bool GalleryItemSelectionTransformer::has_caption_storage_uuid_path() const {
  return _internal_has_caption_storage_uuid_path();
}
inline const ::TSP::UUIDPath& GalleryItemSelectionTransformer::_internal_caption_storage_uuid_path() const {
  const ::TSP::UUIDPath* p = _impl_.caption_storage_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& GalleryItemSelectionTransformer::caption_storage_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSelectionTransformer.caption_storage_uuid_path)
  return _internal_caption_storage_uuid_path();
}
inline void GalleryItemSelectionTransformer::unsafe_arena_set_allocated_caption_storage_uuid_path(
    ::TSP::UUIDPath* caption_storage_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caption_storage_uuid_path_);
  }
  _impl_.caption_storage_uuid_path_ = caption_storage_uuid_path;
  if (caption_storage_uuid_path) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSelectionTransformer.caption_storage_uuid_path)
}
inline ::TSP::UUIDPath* GalleryItemSelectionTransformer::release_caption_storage_uuid_path() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.caption_storage_uuid_path_;
  _impl_.caption_storage_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* GalleryItemSelectionTransformer::unsafe_arena_release_caption_storage_uuid_path() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSelectionTransformer.caption_storage_uuid_path)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.caption_storage_uuid_path_;
  _impl_.caption_storage_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* GalleryItemSelectionTransformer::_internal_mutable_caption_storage_uuid_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.caption_storage_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    _impl_.caption_storage_uuid_path_ = p;
  }
  return _impl_.caption_storage_uuid_path_;
}
inline ::TSP::UUIDPath* GalleryItemSelectionTransformer::mutable_caption_storage_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_caption_storage_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSelectionTransformer.caption_storage_uuid_path)
  return _msg;
}
inline void GalleryItemSelectionTransformer::set_allocated_caption_storage_uuid_path(::TSP::UUIDPath* caption_storage_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.caption_storage_uuid_path_);
  }
  if (caption_storage_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caption_storage_uuid_path));
    if (message_arena != submessage_arena) {
      caption_storage_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caption_storage_uuid_path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.caption_storage_uuid_path_ = caption_storage_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSelectionTransformer.caption_storage_uuid_path)
}

// -------------------------------------------------------------------

// GalleryItemSelectionTransformerHelper

// optional .TSP.UUIDPath displayed_item_uuid_path = 1;
inline bool GalleryItemSelectionTransformerHelper::_internal_has_displayed_item_uuid_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.displayed_item_uuid_path_ != nullptr);
  return value;
}
inline bool GalleryItemSelectionTransformerHelper::has_displayed_item_uuid_path() const {
  return _internal_has_displayed_item_uuid_path();
}
inline const ::TSP::UUIDPath& GalleryItemSelectionTransformerHelper::_internal_displayed_item_uuid_path() const {
  const ::TSP::UUIDPath* p = _impl_.displayed_item_uuid_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& GalleryItemSelectionTransformerHelper::displayed_item_uuid_path() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSelectionTransformerHelper.displayed_item_uuid_path)
  return _internal_displayed_item_uuid_path();
}
inline void GalleryItemSelectionTransformerHelper::unsafe_arena_set_allocated_displayed_item_uuid_path(
    ::TSP::UUIDPath* displayed_item_uuid_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.displayed_item_uuid_path_);
  }
  _impl_.displayed_item_uuid_path_ = displayed_item_uuid_path;
  if (displayed_item_uuid_path) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSelectionTransformerHelper.displayed_item_uuid_path)
}
inline ::TSP::UUIDPath* GalleryItemSelectionTransformerHelper::release_displayed_item_uuid_path() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = _impl_.displayed_item_uuid_path_;
  _impl_.displayed_item_uuid_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* GalleryItemSelectionTransformerHelper::unsafe_arena_release_displayed_item_uuid_path() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSelectionTransformerHelper.displayed_item_uuid_path)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::UUIDPath* temp = _impl_.displayed_item_uuid_path_;
  _impl_.displayed_item_uuid_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* GalleryItemSelectionTransformerHelper::_internal_mutable_displayed_item_uuid_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.displayed_item_uuid_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    _impl_.displayed_item_uuid_path_ = p;
  }
  return _impl_.displayed_item_uuid_path_;
}
inline ::TSP::UUIDPath* GalleryItemSelectionTransformerHelper::mutable_displayed_item_uuid_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_displayed_item_uuid_path();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSelectionTransformerHelper.displayed_item_uuid_path)
  return _msg;
}
inline void GalleryItemSelectionTransformerHelper::set_allocated_displayed_item_uuid_path(::TSP::UUIDPath* displayed_item_uuid_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.displayed_item_uuid_path_);
  }
  if (displayed_item_uuid_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(displayed_item_uuid_path));
    if (message_arena != submessage_arena) {
      displayed_item_uuid_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, displayed_item_uuid_path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.displayed_item_uuid_path_ = displayed_item_uuid_path;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSelectionTransformerHelper.displayed_item_uuid_path)
}

// repeated .TSP.UUIDPath item_uuid_paths = 2;
inline int GalleryItemSelectionTransformerHelper::_internal_item_uuid_paths_size() const {
  return _impl_.item_uuid_paths_.size();
}
inline int GalleryItemSelectionTransformerHelper::item_uuid_paths_size() const {
  return _internal_item_uuid_paths_size();
}
inline ::TSP::UUIDPath* GalleryItemSelectionTransformerHelper::mutable_item_uuid_paths(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSelectionTransformerHelper.item_uuid_paths)
  return _impl_.item_uuid_paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >*
GalleryItemSelectionTransformerHelper::mutable_item_uuid_paths() {
  // @@protoc_insertion_point(field_mutable_list:TSA.GalleryItemSelectionTransformerHelper.item_uuid_paths)
  return &_impl_.item_uuid_paths_;
}
inline const ::TSP::UUIDPath& GalleryItemSelectionTransformerHelper::_internal_item_uuid_paths(int index) const {
  return _impl_.item_uuid_paths_.Get(index);
}
inline const ::TSP::UUIDPath& GalleryItemSelectionTransformerHelper::item_uuid_paths(int index) const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSelectionTransformerHelper.item_uuid_paths)
  return _internal_item_uuid_paths(index);
}
inline ::TSP::UUIDPath* GalleryItemSelectionTransformerHelper::_internal_add_item_uuid_paths() {
  return _impl_.item_uuid_paths_.Add();
}
inline ::TSP::UUIDPath* GalleryItemSelectionTransformerHelper::add_item_uuid_paths() {
  ::TSP::UUIDPath* _add = _internal_add_item_uuid_paths();
  // @@protoc_insertion_point(field_add:TSA.GalleryItemSelectionTransformerHelper.item_uuid_paths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUIDPath >&
GalleryItemSelectionTransformerHelper::item_uuid_paths() const {
  // @@protoc_insertion_point(field_list:TSA.GalleryItemSelectionTransformerHelper.item_uuid_paths)
  return _impl_.item_uuid_paths_;
}

// -------------------------------------------------------------------

// GalleryItemSetValueCommand_PropertyValue

// optional .TSP.DataReference image_data = 1;
inline bool GalleryItemSetValueCommand_PropertyValue::_internal_has_image_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.image_data_ != nullptr);
  return value;
}
inline bool GalleryItemSetValueCommand_PropertyValue::has_image_data() const {
  return _internal_has_image_data();
}
inline const ::TSP::DataReference& GalleryItemSetValueCommand_PropertyValue::_internal_image_data() const {
  const ::TSP::DataReference* p = _impl_.image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& GalleryItemSetValueCommand_PropertyValue::image_data() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetValueCommand.PropertyValue.image_data)
  return _internal_image_data();
}
inline void GalleryItemSetValueCommand_PropertyValue::unsafe_arena_set_allocated_image_data(
    ::TSP::DataReference* image_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_data_);
  }
  _impl_.image_data_ = image_data;
  if (image_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSetValueCommand.PropertyValue.image_data)
}
inline ::TSP::DataReference* GalleryItemSetValueCommand_PropertyValue::release_image_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = _impl_.image_data_;
  _impl_.image_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* GalleryItemSetValueCommand_PropertyValue::unsafe_arena_release_image_data() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSetValueCommand.PropertyValue.image_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = _impl_.image_data_;
  _impl_.image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* GalleryItemSetValueCommand_PropertyValue::_internal_mutable_image_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.image_data_ = p;
  }
  return _impl_.image_data_;
}
inline ::TSP::DataReference* GalleryItemSetValueCommand_PropertyValue::mutable_image_data() {
  ::TSP::DataReference* _msg = _internal_mutable_image_data();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSetValueCommand.PropertyValue.image_data)
  return _msg;
}
inline void GalleryItemSetValueCommand_PropertyValue::set_allocated_image_data(::TSP::DataReference* image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.image_data_);
  }
  if (image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image_data));
    if (message_arena != submessage_arena) {
      image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.image_data_ = image_data;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSetValueCommand.PropertyValue.image_data)
}

// optional string accessibility_description = 2;
inline bool GalleryItemSetValueCommand_PropertyValue::_internal_has_accessibility_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GalleryItemSetValueCommand_PropertyValue::has_accessibility_description() const {
  return _internal_has_accessibility_description();
}
inline void GalleryItemSetValueCommand_PropertyValue::clear_accessibility_description() {
  _impl_.accessibility_description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GalleryItemSetValueCommand_PropertyValue::accessibility_description() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetValueCommand.PropertyValue.accessibility_description)
  return _internal_accessibility_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GalleryItemSetValueCommand_PropertyValue::set_accessibility_description(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.accessibility_description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSA.GalleryItemSetValueCommand.PropertyValue.accessibility_description)
}
inline std::string* GalleryItemSetValueCommand_PropertyValue::mutable_accessibility_description() {
  std::string* _s = _internal_mutable_accessibility_description();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSetValueCommand.PropertyValue.accessibility_description)
  return _s;
}
inline const std::string& GalleryItemSetValueCommand_PropertyValue::_internal_accessibility_description() const {
  return _impl_.accessibility_description_.Get();
}
inline void GalleryItemSetValueCommand_PropertyValue::_internal_set_accessibility_description(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.accessibility_description_.Set(value, GetArenaForAllocation());
}
inline std::string* GalleryItemSetValueCommand_PropertyValue::_internal_mutable_accessibility_description() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.accessibility_description_.Mutable(GetArenaForAllocation());
}
inline std::string* GalleryItemSetValueCommand_PropertyValue::release_accessibility_description() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSetValueCommand.PropertyValue.accessibility_description)
  if (!_internal_has_accessibility_description()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.accessibility_description_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accessibility_description_.IsDefault()) {
    _impl_.accessibility_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GalleryItemSetValueCommand_PropertyValue::set_allocated_accessibility_description(std::string* accessibility_description) {
  if (accessibility_description != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.accessibility_description_.SetAllocated(accessibility_description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.accessibility_description_.IsDefault()) {
    _impl_.accessibility_description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSetValueCommand.PropertyValue.accessibility_description)
}

// -------------------------------------------------------------------

// GalleryItemSetValueCommand

// required .TSK.CommandArchive super = 1;
inline bool GalleryItemSetValueCommand::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool GalleryItemSetValueCommand::has_super() const {
  return _internal_has_super();
}
inline const ::TSK::CommandArchive& GalleryItemSetValueCommand::_internal_super() const {
  const ::TSK::CommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSK::CommandArchive&>(
      ::TSK::_CommandArchive_default_instance_);
}
inline const ::TSK::CommandArchive& GalleryItemSetValueCommand::super() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetValueCommand.super)
  return _internal_super();
}
inline void GalleryItemSetValueCommand::unsafe_arena_set_allocated_super(
    ::TSK::CommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSetValueCommand.super)
}
inline ::TSK::CommandArchive* GalleryItemSetValueCommand::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSK::CommandArchive* GalleryItemSetValueCommand::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSetValueCommand.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSK::CommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSK::CommandArchive* GalleryItemSetValueCommand::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSK::CommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSK::CommandArchive* GalleryItemSetValueCommand::mutable_super() {
  ::TSK::CommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSetValueCommand.super)
  return _msg;
}
inline void GalleryItemSetValueCommand::set_allocated_super(::TSK::CommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSetValueCommand.super)
}

// optional .TSP.UUIDPath item_id_path = 2;
inline bool GalleryItemSetValueCommand::_internal_has_item_id_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.item_id_path_ != nullptr);
  return value;
}
inline bool GalleryItemSetValueCommand::has_item_id_path() const {
  return _internal_has_item_id_path();
}
inline const ::TSP::UUIDPath& GalleryItemSetValueCommand::_internal_item_id_path() const {
  const ::TSP::UUIDPath* p = _impl_.item_id_path_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUIDPath&>(
      ::TSP::_UUIDPath_default_instance_);
}
inline const ::TSP::UUIDPath& GalleryItemSetValueCommand::item_id_path() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetValueCommand.item_id_path)
  return _internal_item_id_path();
}
inline void GalleryItemSetValueCommand::unsafe_arena_set_allocated_item_id_path(
    ::TSP::UUIDPath* item_id_path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_path_);
  }
  _impl_.item_id_path_ = item_id_path;
  if (item_id_path) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSetValueCommand.item_id_path)
}
inline ::TSP::UUIDPath* GalleryItemSetValueCommand::release_item_id_path() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.item_id_path_;
  _impl_.item_id_path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUIDPath* GalleryItemSetValueCommand::unsafe_arena_release_item_id_path() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSetValueCommand.item_id_path)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUIDPath* temp = _impl_.item_id_path_;
  _impl_.item_id_path_ = nullptr;
  return temp;
}
inline ::TSP::UUIDPath* GalleryItemSetValueCommand::_internal_mutable_item_id_path() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.item_id_path_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUIDPath>(GetArenaForAllocation());
    _impl_.item_id_path_ = p;
  }
  return _impl_.item_id_path_;
}
inline ::TSP::UUIDPath* GalleryItemSetValueCommand::mutable_item_id_path() {
  ::TSP::UUIDPath* _msg = _internal_mutable_item_id_path();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSetValueCommand.item_id_path)
  return _msg;
}
inline void GalleryItemSetValueCommand::set_allocated_item_id_path(::TSP::UUIDPath* item_id_path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_id_path_);
  }
  if (item_id_path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_id_path));
    if (message_arena != submessage_arena) {
      item_id_path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_id_path, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.item_id_path_ = item_id_path;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSetValueCommand.item_id_path)
}

// optional .TSA.GalleryItemProperty property = 3;
inline bool GalleryItemSetValueCommand::_internal_has_property() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GalleryItemSetValueCommand::has_property() const {
  return _internal_has_property();
}
inline void GalleryItemSetValueCommand::clear_property() {
  _impl_.property_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::TSA::GalleryItemProperty GalleryItemSetValueCommand::_internal_property() const {
  return static_cast< ::TSA::GalleryItemProperty >(_impl_.property_);
}
inline ::TSA::GalleryItemProperty GalleryItemSetValueCommand::property() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetValueCommand.property)
  return _internal_property();
}
inline void GalleryItemSetValueCommand::_internal_set_property(::TSA::GalleryItemProperty value) {
  assert(::TSA::GalleryItemProperty_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.property_ = value;
}
inline void GalleryItemSetValueCommand::set_property(::TSA::GalleryItemProperty value) {
  _internal_set_property(value);
  // @@protoc_insertion_point(field_set:TSA.GalleryItemSetValueCommand.property)
}

// optional .TSA.GalleryItemSetValueCommand.PropertyValue value = 4;
inline bool GalleryItemSetValueCommand::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool GalleryItemSetValueCommand::has_value() const {
  return _internal_has_value();
}
inline void GalleryItemSetValueCommand::clear_value() {
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSA::GalleryItemSetValueCommand_PropertyValue& GalleryItemSetValueCommand::_internal_value() const {
  const ::TSA::GalleryItemSetValueCommand_PropertyValue* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSA::GalleryItemSetValueCommand_PropertyValue&>(
      ::TSA::_GalleryItemSetValueCommand_PropertyValue_default_instance_);
}
inline const ::TSA::GalleryItemSetValueCommand_PropertyValue& GalleryItemSetValueCommand::value() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetValueCommand.value)
  return _internal_value();
}
inline void GalleryItemSetValueCommand::unsafe_arena_set_allocated_value(
    ::TSA::GalleryItemSetValueCommand_PropertyValue* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSetValueCommand.value)
}
inline ::TSA::GalleryItemSetValueCommand_PropertyValue* GalleryItemSetValueCommand::release_value() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSA::GalleryItemSetValueCommand_PropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSA::GalleryItemSetValueCommand_PropertyValue* GalleryItemSetValueCommand::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSetValueCommand.value)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSA::GalleryItemSetValueCommand_PropertyValue* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::TSA::GalleryItemSetValueCommand_PropertyValue* GalleryItemSetValueCommand::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSA::GalleryItemSetValueCommand_PropertyValue>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::TSA::GalleryItemSetValueCommand_PropertyValue* GalleryItemSetValueCommand::mutable_value() {
  ::TSA::GalleryItemSetValueCommand_PropertyValue* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSetValueCommand.value)
  return _msg;
}
inline void GalleryItemSetValueCommand::set_allocated_value(::TSA::GalleryItemSetValueCommand_PropertyValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value);
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSetValueCommand.value)
}

// optional .TSA.GalleryItemSetValueCommand.PropertyValue old_value = 5;
inline bool GalleryItemSetValueCommand::_internal_has_old_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_value_ != nullptr);
  return value;
}
inline bool GalleryItemSetValueCommand::has_old_value() const {
  return _internal_has_old_value();
}
inline void GalleryItemSetValueCommand::clear_old_value() {
  if (_impl_.old_value_ != nullptr) _impl_.old_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TSA::GalleryItemSetValueCommand_PropertyValue& GalleryItemSetValueCommand::_internal_old_value() const {
  const ::TSA::GalleryItemSetValueCommand_PropertyValue* p = _impl_.old_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSA::GalleryItemSetValueCommand_PropertyValue&>(
      ::TSA::_GalleryItemSetValueCommand_PropertyValue_default_instance_);
}
inline const ::TSA::GalleryItemSetValueCommand_PropertyValue& GalleryItemSetValueCommand::old_value() const {
  // @@protoc_insertion_point(field_get:TSA.GalleryItemSetValueCommand.old_value)
  return _internal_old_value();
}
inline void GalleryItemSetValueCommand::unsafe_arena_set_allocated_old_value(
    ::TSA::GalleryItemSetValueCommand_PropertyValue* old_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_value_);
  }
  _impl_.old_value_ = old_value;
  if (old_value) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.GalleryItemSetValueCommand.old_value)
}
inline ::TSA::GalleryItemSetValueCommand_PropertyValue* GalleryItemSetValueCommand::release_old_value() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSA::GalleryItemSetValueCommand_PropertyValue* temp = _impl_.old_value_;
  _impl_.old_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSA::GalleryItemSetValueCommand_PropertyValue* GalleryItemSetValueCommand::unsafe_arena_release_old_value() {
  // @@protoc_insertion_point(field_release:TSA.GalleryItemSetValueCommand.old_value)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSA::GalleryItemSetValueCommand_PropertyValue* temp = _impl_.old_value_;
  _impl_.old_value_ = nullptr;
  return temp;
}
inline ::TSA::GalleryItemSetValueCommand_PropertyValue* GalleryItemSetValueCommand::_internal_mutable_old_value() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.old_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSA::GalleryItemSetValueCommand_PropertyValue>(GetArenaForAllocation());
    _impl_.old_value_ = p;
  }
  return _impl_.old_value_;
}
inline ::TSA::GalleryItemSetValueCommand_PropertyValue* GalleryItemSetValueCommand::mutable_old_value() {
  ::TSA::GalleryItemSetValueCommand_PropertyValue* _msg = _internal_mutable_old_value();
  // @@protoc_insertion_point(field_mutable:TSA.GalleryItemSetValueCommand.old_value)
  return _msg;
}
inline void GalleryItemSetValueCommand::set_allocated_old_value(::TSA::GalleryItemSetValueCommand_PropertyValue* old_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.old_value_;
  }
  if (old_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(old_value);
    if (message_arena != submessage_arena) {
      old_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.old_value_ = old_value;
  // @@protoc_insertion_point(field_set_allocated:TSA.GalleryItemSetValueCommand.old_value)
}

// -------------------------------------------------------------------

// CollaboratorGalleryItemCursor

// optional .TSP.UUID displayed_item_id = 1;
inline bool CollaboratorGalleryItemCursor::_internal_has_displayed_item_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.displayed_item_id_ != nullptr);
  return value;
}
inline bool CollaboratorGalleryItemCursor::has_displayed_item_id() const {
  return _internal_has_displayed_item_id();
}
inline const ::TSP::UUID& CollaboratorGalleryItemCursor::_internal_displayed_item_id() const {
  const ::TSP::UUID* p = _impl_.displayed_item_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& CollaboratorGalleryItemCursor::displayed_item_id() const {
  // @@protoc_insertion_point(field_get:TSA.CollaboratorGalleryItemCursor.displayed_item_id)
  return _internal_displayed_item_id();
}
inline void CollaboratorGalleryItemCursor::unsafe_arena_set_allocated_displayed_item_id(
    ::TSP::UUID* displayed_item_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.displayed_item_id_);
  }
  _impl_.displayed_item_id_ = displayed_item_id;
  if (displayed_item_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.CollaboratorGalleryItemCursor.displayed_item_id)
}
inline ::TSP::UUID* CollaboratorGalleryItemCursor::release_displayed_item_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = _impl_.displayed_item_id_;
  _impl_.displayed_item_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* CollaboratorGalleryItemCursor::unsafe_arena_release_displayed_item_id() {
  // @@protoc_insertion_point(field_release:TSA.CollaboratorGalleryItemCursor.displayed_item_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::UUID* temp = _impl_.displayed_item_id_;
  _impl_.displayed_item_id_ = nullptr;
  return temp;
}
inline ::TSP::UUID* CollaboratorGalleryItemCursor::_internal_mutable_displayed_item_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.displayed_item_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.displayed_item_id_ = p;
  }
  return _impl_.displayed_item_id_;
}
inline ::TSP::UUID* CollaboratorGalleryItemCursor::mutable_displayed_item_id() {
  ::TSP::UUID* _msg = _internal_mutable_displayed_item_id();
  // @@protoc_insertion_point(field_mutable:TSA.CollaboratorGalleryItemCursor.displayed_item_id)
  return _msg;
}
inline void CollaboratorGalleryItemCursor::set_allocated_displayed_item_id(::TSP::UUID* displayed_item_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.displayed_item_id_);
  }
  if (displayed_item_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(displayed_item_id));
    if (message_arena != submessage_arena) {
      displayed_item_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, displayed_item_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.displayed_item_id_ = displayed_item_id;
  // @@protoc_insertion_point(field_set_allocated:TSA.CollaboratorGalleryItemCursor.displayed_item_id)
}

// repeated .TSP.UUID item_ids = 2;
inline int CollaboratorGalleryItemCursor::_internal_item_ids_size() const {
  return _impl_.item_ids_.size();
}
inline int CollaboratorGalleryItemCursor::item_ids_size() const {
  return _internal_item_ids_size();
}
inline ::TSP::UUID* CollaboratorGalleryItemCursor::mutable_item_ids(int index) {
  // @@protoc_insertion_point(field_mutable:TSA.CollaboratorGalleryItemCursor.item_ids)
  return _impl_.item_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >*
CollaboratorGalleryItemCursor::mutable_item_ids() {
  // @@protoc_insertion_point(field_mutable_list:TSA.CollaboratorGalleryItemCursor.item_ids)
  return &_impl_.item_ids_;
}
inline const ::TSP::UUID& CollaboratorGalleryItemCursor::_internal_item_ids(int index) const {
  return _impl_.item_ids_.Get(index);
}
inline const ::TSP::UUID& CollaboratorGalleryItemCursor::item_ids(int index) const {
  // @@protoc_insertion_point(field_get:TSA.CollaboratorGalleryItemCursor.item_ids)
  return _internal_item_ids(index);
}
inline ::TSP::UUID* CollaboratorGalleryItemCursor::_internal_add_item_ids() {
  return _impl_.item_ids_.Add();
}
inline ::TSP::UUID* CollaboratorGalleryItemCursor::add_item_ids() {
  ::TSP::UUID* _add = _internal_add_item_ids();
  // @@protoc_insertion_point(field_add:TSA.CollaboratorGalleryItemCursor.item_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::UUID >&
CollaboratorGalleryItemCursor::item_ids() const {
  // @@protoc_insertion_point(field_list:TSA.CollaboratorGalleryItemCursor.item_ids)
  return _impl_.item_ids_;
}

// -------------------------------------------------------------------

// WebVideoInfo

// optional string url = 1;
inline bool WebVideoInfo::_internal_has_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebVideoInfo::has_url() const {
  return _internal_has_url();
}
inline void WebVideoInfo::clear_url() {
  _impl_.url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WebVideoInfo::url() const {
  // @@protoc_insertion_point(field_get:TSA.WebVideoInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebVideoInfo::set_url(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSA.WebVideoInfo.url)
}
inline std::string* WebVideoInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:TSA.WebVideoInfo.url)
  return _s;
}
inline const std::string& WebVideoInfo::_internal_url() const {
  return _impl_.url_.Get();
}
inline void WebVideoInfo::_internal_set_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* WebVideoInfo::_internal_mutable_url() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.url_.Mutable(GetArenaForAllocation());
}
inline std::string* WebVideoInfo::release_url() {
  // @@protoc_insertion_point(field_release:TSA.WebVideoInfo.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void WebVideoInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.url_.IsDefault()) {
    _impl_.url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSA.WebVideoInfo.url)
}

// optional .TSP.DataReference poster_image_data = 2;
inline bool WebVideoInfo::_internal_has_poster_image_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.poster_image_data_ != nullptr);
  return value;
}
inline bool WebVideoInfo::has_poster_image_data() const {
  return _internal_has_poster_image_data();
}
inline const ::TSP::DataReference& WebVideoInfo::_internal_poster_image_data() const {
  const ::TSP::DataReference* p = _impl_.poster_image_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::DataReference&>(
      ::TSP::_DataReference_default_instance_);
}
inline const ::TSP::DataReference& WebVideoInfo::poster_image_data() const {
  // @@protoc_insertion_point(field_get:TSA.WebVideoInfo.poster_image_data)
  return _internal_poster_image_data();
}
inline void WebVideoInfo::unsafe_arena_set_allocated_poster_image_data(
    ::TSP::DataReference* poster_image_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.poster_image_data_);
  }
  _impl_.poster_image_data_ = poster_image_data;
  if (poster_image_data) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.WebVideoInfo.poster_image_data)
}
inline ::TSP::DataReference* WebVideoInfo::release_poster_image_data() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = _impl_.poster_image_data_;
  _impl_.poster_image_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::DataReference* WebVideoInfo::unsafe_arena_release_poster_image_data() {
  // @@protoc_insertion_point(field_release:TSA.WebVideoInfo.poster_image_data)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::DataReference* temp = _impl_.poster_image_data_;
  _impl_.poster_image_data_ = nullptr;
  return temp;
}
inline ::TSP::DataReference* WebVideoInfo::_internal_mutable_poster_image_data() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.poster_image_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::DataReference>(GetArenaForAllocation());
    _impl_.poster_image_data_ = p;
  }
  return _impl_.poster_image_data_;
}
inline ::TSP::DataReference* WebVideoInfo::mutable_poster_image_data() {
  ::TSP::DataReference* _msg = _internal_mutable_poster_image_data();
  // @@protoc_insertion_point(field_mutable:TSA.WebVideoInfo.poster_image_data)
  return _msg;
}
inline void WebVideoInfo::set_allocated_poster_image_data(::TSP::DataReference* poster_image_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.poster_image_data_);
  }
  if (poster_image_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(poster_image_data));
    if (message_arena != submessage_arena) {
      poster_image_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, poster_image_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.poster_image_data_ = poster_image_data;
  // @@protoc_insertion_point(field_set_allocated:TSA.WebVideoInfo.poster_image_data)
}

// optional .TSD.Attribution attribution = 3;
inline bool WebVideoInfo::_internal_has_attribution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attribution_ != nullptr);
  return value;
}
inline bool WebVideoInfo::has_attribution() const {
  return _internal_has_attribution();
}
inline const ::TSD::Attribution& WebVideoInfo::_internal_attribution() const {
  const ::TSD::Attribution* p = _impl_.attribution_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::Attribution&>(
      ::TSD::_Attribution_default_instance_);
}
inline const ::TSD::Attribution& WebVideoInfo::attribution() const {
  // @@protoc_insertion_point(field_get:TSA.WebVideoInfo.attribution)
  return _internal_attribution();
}
inline void WebVideoInfo::unsafe_arena_set_allocated_attribution(
    ::TSD::Attribution* attribution) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attribution_);
  }
  _impl_.attribution_ = attribution;
  if (attribution) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.WebVideoInfo.attribution)
}
inline ::TSD::Attribution* WebVideoInfo::release_attribution() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::Attribution* temp = _impl_.attribution_;
  _impl_.attribution_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::Attribution* WebVideoInfo::unsafe_arena_release_attribution() {
  // @@protoc_insertion_point(field_release:TSA.WebVideoInfo.attribution)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSD::Attribution* temp = _impl_.attribution_;
  _impl_.attribution_ = nullptr;
  return temp;
}
inline ::TSD::Attribution* WebVideoInfo::_internal_mutable_attribution() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.attribution_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::Attribution>(GetArenaForAllocation());
    _impl_.attribution_ = p;
  }
  return _impl_.attribution_;
}
inline ::TSD::Attribution* WebVideoInfo::mutable_attribution() {
  ::TSD::Attribution* _msg = _internal_mutable_attribution();
  // @@protoc_insertion_point(field_mutable:TSA.WebVideoInfo.attribution)
  return _msg;
}
inline void WebVideoInfo::set_allocated_attribution(::TSD::Attribution* attribution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.attribution_);
  }
  if (attribution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(attribution));
    if (message_arena != submessage_arena) {
      attribution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attribution, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.attribution_ = attribution;
  // @@protoc_insertion_point(field_set_allocated:TSA.WebVideoInfo.attribution)
}

// -------------------------------------------------------------------

// CaptionPlacementArchive

// optional int32 caption_anchor_location = 1;
inline bool CaptionPlacementArchive::_internal_has_caption_anchor_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CaptionPlacementArchive::has_caption_anchor_location() const {
  return _internal_has_caption_anchor_location();
}
inline void CaptionPlacementArchive::clear_caption_anchor_location() {
  _impl_.caption_anchor_location_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CaptionPlacementArchive::_internal_caption_anchor_location() const {
  return _impl_.caption_anchor_location_;
}
inline int32_t CaptionPlacementArchive::caption_anchor_location() const {
  // @@protoc_insertion_point(field_get:TSA.CaptionPlacementArchive.caption_anchor_location)
  return _internal_caption_anchor_location();
}
inline void CaptionPlacementArchive::_internal_set_caption_anchor_location(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.caption_anchor_location_ = value;
}
inline void CaptionPlacementArchive::set_caption_anchor_location(int32_t value) {
  _internal_set_caption_anchor_location(value);
  // @@protoc_insertion_point(field_set:TSA.CaptionPlacementArchive.caption_anchor_location)
}

// optional int32 drawable_anchor_location = 2;
inline bool CaptionPlacementArchive::_internal_has_drawable_anchor_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CaptionPlacementArchive::has_drawable_anchor_location() const {
  return _internal_has_drawable_anchor_location();
}
inline void CaptionPlacementArchive::clear_drawable_anchor_location() {
  _impl_.drawable_anchor_location_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CaptionPlacementArchive::_internal_drawable_anchor_location() const {
  return _impl_.drawable_anchor_location_;
}
inline int32_t CaptionPlacementArchive::drawable_anchor_location() const {
  // @@protoc_insertion_point(field_get:TSA.CaptionPlacementArchive.drawable_anchor_location)
  return _internal_drawable_anchor_location();
}
inline void CaptionPlacementArchive::_internal_set_drawable_anchor_location(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.drawable_anchor_location_ = value;
}
inline void CaptionPlacementArchive::set_drawable_anchor_location(int32_t value) {
  _internal_set_drawable_anchor_location(value);
  // @@protoc_insertion_point(field_set:TSA.CaptionPlacementArchive.drawable_anchor_location)
}

// -------------------------------------------------------------------

// CaptionInfoArchive

// required .TSWP.ShapeInfoArchive super = 1;
inline bool CaptionInfoArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool CaptionInfoArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSWP::ShapeInfoArchive& CaptionInfoArchive::_internal_super() const {
  const ::TSWP::ShapeInfoArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSWP::ShapeInfoArchive&>(
      ::TSWP::_ShapeInfoArchive_default_instance_);
}
inline const ::TSWP::ShapeInfoArchive& CaptionInfoArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.CaptionInfoArchive.super)
  return _internal_super();
}
inline void CaptionInfoArchive::unsafe_arena_set_allocated_super(
    ::TSWP::ShapeInfoArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.CaptionInfoArchive.super)
}
inline ::TSWP::ShapeInfoArchive* CaptionInfoArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSWP::ShapeInfoArchive* CaptionInfoArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.CaptionInfoArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSWP::ShapeInfoArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSWP::ShapeInfoArchive* CaptionInfoArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSWP::ShapeInfoArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSWP::ShapeInfoArchive* CaptionInfoArchive::mutable_super() {
  ::TSWP::ShapeInfoArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.CaptionInfoArchive.super)
  return _msg;
}
inline void CaptionInfoArchive::set_allocated_super(::TSWP::ShapeInfoArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.CaptionInfoArchive.super)
}

// optional .TSP.Reference placement = 2;
inline bool CaptionInfoArchive::_internal_has_placement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.placement_ != nullptr);
  return value;
}
inline bool CaptionInfoArchive::has_placement() const {
  return _internal_has_placement();
}
inline const ::TSP::Reference& CaptionInfoArchive::_internal_placement() const {
  const ::TSP::Reference* p = _impl_.placement_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& CaptionInfoArchive::placement() const {
  // @@protoc_insertion_point(field_get:TSA.CaptionInfoArchive.placement)
  return _internal_placement();
}
inline void CaptionInfoArchive::unsafe_arena_set_allocated_placement(
    ::TSP::Reference* placement) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.placement_);
  }
  _impl_.placement_ = placement;
  if (placement) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.CaptionInfoArchive.placement)
}
inline ::TSP::Reference* CaptionInfoArchive::release_placement() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.placement_;
  _impl_.placement_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* CaptionInfoArchive::unsafe_arena_release_placement() {
  // @@protoc_insertion_point(field_release:TSA.CaptionInfoArchive.placement)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.placement_;
  _impl_.placement_ = nullptr;
  return temp;
}
inline ::TSP::Reference* CaptionInfoArchive::_internal_mutable_placement() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.placement_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.placement_ = p;
  }
  return _impl_.placement_;
}
inline ::TSP::Reference* CaptionInfoArchive::mutable_placement() {
  ::TSP::Reference* _msg = _internal_mutable_placement();
  // @@protoc_insertion_point(field_mutable:TSA.CaptionInfoArchive.placement)
  return _msg;
}
inline void CaptionInfoArchive::set_allocated_placement(::TSP::Reference* placement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.placement_);
  }
  if (placement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(placement));
    if (message_arena != submessage_arena) {
      placement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placement, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.placement_ = placement;
  // @@protoc_insertion_point(field_set_allocated:TSA.CaptionInfoArchive.placement)
}

// optional .TSD.CaptionOrTitleKind childInfoKind = 3;
inline bool CaptionInfoArchive::_internal_has_childinfokind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CaptionInfoArchive::has_childinfokind() const {
  return _internal_has_childinfokind();
}
inline void CaptionInfoArchive::clear_childinfokind() {
  _impl_.childinfokind_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::TSD::CaptionOrTitleKind CaptionInfoArchive::_internal_childinfokind() const {
  return static_cast< ::TSD::CaptionOrTitleKind >(_impl_.childinfokind_);
}
inline ::TSD::CaptionOrTitleKind CaptionInfoArchive::childinfokind() const {
  // @@protoc_insertion_point(field_get:TSA.CaptionInfoArchive.childInfoKind)
  return _internal_childinfokind();
}
inline void CaptionInfoArchive::_internal_set_childinfokind(::TSD::CaptionOrTitleKind value) {
  assert(::TSD::CaptionOrTitleKind_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.childinfokind_ = value;
}
inline void CaptionInfoArchive::set_childinfokind(::TSD::CaptionOrTitleKind value) {
  _internal_set_childinfokind(value);
  // @@protoc_insertion_point(field_set:TSA.CaptionInfoArchive.childInfoKind)
}

// -------------------------------------------------------------------

// TitlePlacementCommandArchive

// required .TSD.InfoCommandArchive super = 1;
inline bool TitlePlacementCommandArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool TitlePlacementCommandArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::InfoCommandArchive& TitlePlacementCommandArchive::_internal_super() const {
  const ::TSD::InfoCommandArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::InfoCommandArchive&>(
      ::TSD::_InfoCommandArchive_default_instance_);
}
inline const ::TSD::InfoCommandArchive& TitlePlacementCommandArchive::super() const {
  // @@protoc_insertion_point(field_get:TSA.TitlePlacementCommandArchive.super)
  return _internal_super();
}
inline void TitlePlacementCommandArchive::unsafe_arena_set_allocated_super(
    ::TSD::InfoCommandArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.TitlePlacementCommandArchive.super)
}
inline ::TSD::InfoCommandArchive* TitlePlacementCommandArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::InfoCommandArchive* TitlePlacementCommandArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSA.TitlePlacementCommandArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::InfoCommandArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSD::InfoCommandArchive* TitlePlacementCommandArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::InfoCommandArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSD::InfoCommandArchive* TitlePlacementCommandArchive::mutable_super() {
  ::TSD::InfoCommandArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSA.TitlePlacementCommandArchive.super)
  return _msg;
}
inline void TitlePlacementCommandArchive::set_allocated_super(::TSD::InfoCommandArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSA.TitlePlacementCommandArchive.super)
}

// optional .TSD.CaptionOrTitleKind placing_child_info_kind = 2;
inline bool TitlePlacementCommandArchive::_internal_has_placing_child_info_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TitlePlacementCommandArchive::has_placing_child_info_kind() const {
  return _internal_has_placing_child_info_kind();
}
inline void TitlePlacementCommandArchive::clear_placing_child_info_kind() {
  _impl_.placing_child_info_kind_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::TSD::CaptionOrTitleKind TitlePlacementCommandArchive::_internal_placing_child_info_kind() const {
  return static_cast< ::TSD::CaptionOrTitleKind >(_impl_.placing_child_info_kind_);
}
inline ::TSD::CaptionOrTitleKind TitlePlacementCommandArchive::placing_child_info_kind() const {
  // @@protoc_insertion_point(field_get:TSA.TitlePlacementCommandArchive.placing_child_info_kind)
  return _internal_placing_child_info_kind();
}
inline void TitlePlacementCommandArchive::_internal_set_placing_child_info_kind(::TSD::CaptionOrTitleKind value) {
  assert(::TSD::CaptionOrTitleKind_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.placing_child_info_kind_ = value;
}
inline void TitlePlacementCommandArchive::set_placing_child_info_kind(::TSD::CaptionOrTitleKind value) {
  _internal_set_placing_child_info_kind(value);
  // @@protoc_insertion_point(field_set:TSA.TitlePlacementCommandArchive.placing_child_info_kind)
}

// optional .TSP.Reference placement = 3;
inline bool TitlePlacementCommandArchive::_internal_has_placement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.placement_ != nullptr);
  return value;
}
inline bool TitlePlacementCommandArchive::has_placement() const {
  return _internal_has_placement();
}
inline const ::TSP::Reference& TitlePlacementCommandArchive::_internal_placement() const {
  const ::TSP::Reference* p = _impl_.placement_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TitlePlacementCommandArchive::placement() const {
  // @@protoc_insertion_point(field_get:TSA.TitlePlacementCommandArchive.placement)
  return _internal_placement();
}
inline void TitlePlacementCommandArchive::unsafe_arena_set_allocated_placement(
    ::TSP::Reference* placement) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.placement_);
  }
  _impl_.placement_ = placement;
  if (placement) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.TitlePlacementCommandArchive.placement)
}
inline ::TSP::Reference* TitlePlacementCommandArchive::release_placement() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.placement_;
  _impl_.placement_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TitlePlacementCommandArchive::unsafe_arena_release_placement() {
  // @@protoc_insertion_point(field_release:TSA.TitlePlacementCommandArchive.placement)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.placement_;
  _impl_.placement_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TitlePlacementCommandArchive::_internal_mutable_placement() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.placement_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.placement_ = p;
  }
  return _impl_.placement_;
}
inline ::TSP::Reference* TitlePlacementCommandArchive::mutable_placement() {
  ::TSP::Reference* _msg = _internal_mutable_placement();
  // @@protoc_insertion_point(field_mutable:TSA.TitlePlacementCommandArchive.placement)
  return _msg;
}
inline void TitlePlacementCommandArchive::set_allocated_placement(::TSP::Reference* placement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.placement_);
  }
  if (placement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(placement));
    if (message_arena != submessage_arena) {
      placement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, placement, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.placement_ = placement;
  // @@protoc_insertion_point(field_set_allocated:TSA.TitlePlacementCommandArchive.placement)
}

// optional .TSP.Reference old_placement = 4;
inline bool TitlePlacementCommandArchive::_internal_has_old_placement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.old_placement_ != nullptr);
  return value;
}
inline bool TitlePlacementCommandArchive::has_old_placement() const {
  return _internal_has_old_placement();
}
inline const ::TSP::Reference& TitlePlacementCommandArchive::_internal_old_placement() const {
  const ::TSP::Reference* p = _impl_.old_placement_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& TitlePlacementCommandArchive::old_placement() const {
  // @@protoc_insertion_point(field_get:TSA.TitlePlacementCommandArchive.old_placement)
  return _internal_old_placement();
}
inline void TitlePlacementCommandArchive::unsafe_arena_set_allocated_old_placement(
    ::TSP::Reference* old_placement) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_placement_);
  }
  _impl_.old_placement_ = old_placement;
  if (old_placement) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSA.TitlePlacementCommandArchive.old_placement)
}
inline ::TSP::Reference* TitlePlacementCommandArchive::release_old_placement() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_placement_;
  _impl_.old_placement_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* TitlePlacementCommandArchive::unsafe_arena_release_old_placement() {
  // @@protoc_insertion_point(field_release:TSA.TitlePlacementCommandArchive.old_placement)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.old_placement_;
  _impl_.old_placement_ = nullptr;
  return temp;
}
inline ::TSP::Reference* TitlePlacementCommandArchive::_internal_mutable_old_placement() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.old_placement_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.old_placement_ = p;
  }
  return _impl_.old_placement_;
}
inline ::TSP::Reference* TitlePlacementCommandArchive::mutable_old_placement() {
  ::TSP::Reference* _msg = _internal_mutable_old_placement();
  // @@protoc_insertion_point(field_mutable:TSA.TitlePlacementCommandArchive.old_placement)
  return _msg;
}
inline void TitlePlacementCommandArchive::set_allocated_old_placement(::TSP::Reference* old_placement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.old_placement_);
  }
  if (old_placement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(old_placement));
    if (message_arena != submessage_arena) {
      old_placement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, old_placement, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.old_placement_ = old_placement;
  // @@protoc_insertion_point(field_set_allocated:TSA.TitlePlacementCommandArchive.old_placement)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSA

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TSA::GalleryInfoCaptionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSA::GalleryInfoCaptionMode>() {
  return ::TSA::GalleryInfoCaptionMode_descriptor();
}
template <> struct is_proto_enum< ::TSA::GalleryInfoProperty> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSA::GalleryInfoProperty>() {
  return ::TSA::GalleryInfoProperty_descriptor();
}
template <> struct is_proto_enum< ::TSA::GalleryCaptionMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSA::GalleryCaptionMode>() {
  return ::TSA::GalleryCaptionMode_descriptor();
}
template <> struct is_proto_enum< ::TSA::GalleryItemProperty> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TSA::GalleryItemProperty>() {
  return ::TSA::GalleryItemProperty_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSAArchives_2eproto
