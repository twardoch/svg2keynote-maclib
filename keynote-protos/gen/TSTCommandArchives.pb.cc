// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSTCommandArchives.proto

#include "TSTCommandArchives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace TST {
PROTOBUF_CONSTEXPR TableCommandArchive::TableCommandArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commandname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.table_info_id_path_)*/nullptr
  , /*decltype(_impl_.default_cell_styles_container_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/0
  , /*decltype(_impl_.random_seed_lo_)*/0u
  , /*decltype(_impl_.random_seed_hi_)*/0u
  , /*decltype(_impl_.old_timestamp_)*/0
  , /*decltype(_impl_.old_random_seed_)*/uint64_t{0u}
  , /*decltype(_impl_.is_inverse_)*/false} {}
struct TableCommandArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableCommandArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableCommandArchiveDefaultTypeInternal() {}
  union {
    TableCommandArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableCommandArchiveDefaultTypeInternal _TableCommandArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandApplyCellContentsArchive::CommandApplyCellContentsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_format_keys_)*/{}
  , /*decltype(_impl_.action_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_diff_map_)*/nullptr
  , /*decltype(_impl_.rollback_cell_diff_map_)*/nullptr} {}
struct CommandApplyCellContentsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandApplyCellContentsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandApplyCellContentsArchiveDefaultTypeInternal() {}
  union {
    CommandApplyCellContentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandApplyCellContentsArchiveDefaultTypeInternal _CommandApplyCellContentsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandApplyCellDiffMapArchive::CommandApplyCellDiffMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_format_keys_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_diff_map_)*/nullptr
  , /*decltype(_impl_.inverse_cell_diff_map_)*/nullptr
  , /*decltype(_impl_.should_allow_merge_fragments_)*/false} {}
struct CommandApplyCellDiffMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandApplyCellDiffMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandApplyCellDiffMapArchiveDefaultTypeInternal() {}
  union {
    CommandApplyCellDiffMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandApplyCellDiffMapArchiveDefaultTypeInternal _CommandApplyCellDiffMapArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandApplyCellMapArchive::CommandApplyCellMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_format_keys_)*/{}
  , /*decltype(_impl_.formula_rewrite_commands_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.redo_cell_map_)*/nullptr
  , /*decltype(_impl_.undo_cell_map_)*/nullptr
  , /*decltype(_impl_.undo_formula_rewrite_command_)*/nullptr
  , /*decltype(_impl_.merge_owner_rollback_index_)*/0u
  , /*decltype(_impl_.is_from_paste_)*/false} {}
struct CommandApplyCellMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandApplyCellMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandApplyCellMapArchiveDefaultTypeInternal() {}
  union {
    CommandApplyCellMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandApplyCellMapArchiveDefaultTypeInternal _CommandApplyCellMapArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandApplyConcurrentCellMapArchive::CommandApplyConcurrentCellMapArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_format_keys_)*/{}
  , /*decltype(_impl_.formula_rewrite_commands_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.redo_concurrent_cell_map_)*/nullptr
  , /*decltype(_impl_.undo_concurrent_cell_map_)*/nullptr
  , /*decltype(_impl_.undo_formula_rewrite_command_)*/nullptr
  , /*decltype(_impl_.merge_owner_rollback_index_)*/0u
  , /*decltype(_impl_.is_from_paste_)*/false} {}
struct CommandApplyConcurrentCellMapArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandApplyConcurrentCellMapArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandApplyConcurrentCellMapArchiveDefaultTypeInternal() {}
  union {
    CommandApplyConcurrentCellMapArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandApplyConcurrentCellMapArchiveDefaultTypeInternal _CommandApplyConcurrentCellMapArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandChangeFreezeHeaderStateArchive::CommandChangeFreezeHeaderStateArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_freeze_state_)*/false
  , /*decltype(_impl_.prev_freeze_state_)*/false
  , /*decltype(_impl_.direction_)*/-1} {}
struct CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal() {}
  union {
    CommandChangeFreezeHeaderStateArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandChangeFreezeHeaderStateArchiveDefaultTypeInternal _CommandChangeFreezeHeaderStateArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandDeleteCellsArchive::CommandDeleteCellsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_uid_region_)*/nullptr
  , /*decltype(_impl_.summary_cell_uid_list_)*/nullptr
  , /*decltype(_impl_.inverse_concurrent_cell_map_)*/nullptr
  , /*decltype(_impl_.invalidate_comments_)*/false
  , /*decltype(_impl_.invalidate_comments_valid_)*/false} {}
struct CommandDeleteCellsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDeleteCellsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDeleteCellsArchiveDefaultTypeInternal() {}
  union {
    CommandDeleteCellsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDeleteCellsArchiveDefaultTypeInternal _CommandDeleteCellsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandDeleteCellContentsArchive::CommandDeleteCellContentsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_uid_list_)*/nullptr
  , /*decltype(_impl_.inverse_cell_diff_map_)*/nullptr} {}
struct CommandDeleteCellContentsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandDeleteCellContentsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandDeleteCellContentsArchiveDefaultTypeInternal() {}
  union {
    CommandDeleteCellContentsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandDeleteCellContentsArchiveDefaultTypeInternal _CommandDeleteCellContentsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMutateCellFormatArchive::CommandMutateCellFormatArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_uid_list_)*/nullptr
  , /*decltype(_impl_.inverse_cell_diff_map_)*/nullptr
  , /*decltype(_impl_.whole_format_diff_map_)*/nullptr
  , /*decltype(_impl_.intended_format_type_)*/0u} {}
struct CommandMutateCellFormatArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMutateCellFormatArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMutateCellFormatArchiveDefaultTypeInternal() {}
  union {
    CommandMutateCellFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMutateCellFormatArchiveDefaultTypeInternal _CommandMutateCellFormatArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetAutomaticDurationUnitsArchive::CommandSetAutomaticDurationUnitsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.automatic_units_)*/false} {}
struct CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal() {}
  union {
    CommandSetAutomaticDurationUnitsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetAutomaticDurationUnitsArchiveDefaultTypeInternal _CommandSetAutomaticDurationUnitsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetDurationStyleArchive::CommandSetDurationStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.duration_style_)*/0u} {}
struct CommandSetDurationStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetDurationStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetDurationStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSetDurationStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetDurationStyleArchiveDefaultTypeInternal _CommandSetDurationStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetDurationUnitSmallestLargestArchive::CommandSetDurationUnitSmallestLargestArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.smallest_unit_)*/0u
  , /*decltype(_impl_.largest_unit_)*/0u} {}
struct CommandSetDurationUnitSmallestLargestArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetDurationUnitSmallestLargestArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetDurationUnitSmallestLargestArchiveDefaultTypeInternal() {}
  union {
    CommandSetDurationUnitSmallestLargestArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetDurationUnitSmallestLargestArchiveDefaultTypeInternal _CommandSetDurationUnitSmallestLargestArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandReplaceCustomFormatArchive::CommandReplaceCustomFormatArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.undo_diff_map_)*/nullptr
  , /*decltype(_impl_.commit_diff_map_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandReplaceCustomFormatArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandReplaceCustomFormatArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandReplaceCustomFormatArchiveDefaultTypeInternal() {}
  union {
    CommandReplaceCustomFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandReplaceCustomFormatArchiveDefaultTypeInternal _CommandReplaceCustomFormatArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMoveCellsArchive::CommandMoveCellsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.formula_rewrite_commands_)*/{}
  , /*decltype(_impl_.comment_storages_to_restore_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.dst_table_info_id_path_)*/nullptr
  , /*decltype(_impl_.src_uid_range_)*/nullptr
  , /*decltype(_impl_.dst_uid_range_)*/nullptr
  , /*decltype(_impl_.src_cell_map_)*/nullptr
  , /*decltype(_impl_.dst_cell_map_)*/nullptr
  , /*decltype(_impl_.dst_cell_styles_container_)*/nullptr
  , /*decltype(_impl_.src_undo_cell_map_)*/nullptr
  , /*decltype(_impl_.dst_undo_cell_map_)*/nullptr
  , /*decltype(_impl_.merge_action_to_restore_)*/nullptr
  , /*decltype(_impl_.comment_cell_uids_to_restore_)*/nullptr
  , /*decltype(_impl_.dst_merge_owner_rollback_index_)*/0u
  , /*decltype(_impl_.table_dimension_)*/-1} {}
struct CommandMoveCellsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMoveCellsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMoveCellsArchiveDefaultTypeInternal() {}
  union {
    CommandMoveCellsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMoveCellsArchiveDefaultTypeInternal _CommandMoveCellsArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnRowMetadataArchive::ColumnRowMetadataArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_style_)*/nullptr
  , /*decltype(_impl_.text_style_)*/nullptr
  , /*decltype(_impl_.uuid_)*/nullptr
  , /*decltype(_impl_.size_)*/0
  , /*decltype(_impl_.hiding_action_)*/0u} {}
struct ColumnRowMetadataArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnRowMetadataArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnRowMetadataArchiveDefaultTypeInternal() {}
  union {
    ColumnRowMetadataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnRowMetadataArchiveDefaultTypeInternal _ColumnRowMetadataArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandInsertColumnsOrRowsArchive::CommandInsertColumnsOrRowsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.undo_order_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.bundle_)*/nullptr
  , /*decltype(_impl_.undo_commands_)*/nullptr
  , /*decltype(_impl_.sort_order_)*/nullptr
  , /*decltype(_impl_.filter_set_)*/nullptr
  , /*decltype(_impl_.src_row_column_uid_)*/nullptr
  , /*decltype(_impl_.opp_row_column_uid_)*/nullptr
  , /*decltype(_impl_.undo_bundle_)*/nullptr
  , /*decltype(_impl_.group_sort_order_)*/nullptr
  , /*decltype(_impl_.concurrent_cell_map_)*/nullptr
  , /*decltype(_impl_.categories_cell_map_)*/nullptr
  , /*decltype(_impl_.undo_concurrent_cell_map_)*/nullptr
  , /*decltype(_impl_.undo_categories_cell_map_)*/nullptr
  , /*decltype(_impl_.should_edge_expand_formula_ranges_)*/false
  , /*decltype(_impl_.was_categorized_)*/false} {}
struct CommandInsertColumnsOrRowsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandInsertColumnsOrRowsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandInsertColumnsOrRowsArchiveDefaultTypeInternal() {}
  union {
    CommandInsertColumnsOrRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandInsertColumnsOrRowsArchiveDefaultTypeInternal _CommandInsertColumnsOrRowsArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnRowBundleArchive::ColumnRowBundleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.view_uid_list_)*/{}
  , /*decltype(_impl_.view_type_list_)*/{}
  , /*decltype(_impl_.base_uid_list_)*/{}
  , /*decltype(_impl_.base_type_list_)*/{}
  , /*decltype(_impl_.category_order_uid_list_)*/{}
  , /*decltype(_impl_.category_order_type_list_)*/{}
  , /*decltype(_impl_.metadata_list_)*/{}
  , /*decltype(_impl_.is_row_)*/false} {}
struct ColumnRowBundleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnRowBundleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnRowBundleArchiveDefaultTypeInternal() {}
  union {
    ColumnRowBundleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnRowBundleArchiveDefaultTypeInternal _ColumnRowBundleArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRemoveColumnsOrRowsArchive::CommandRemoveColumnsOrRowsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.undo_order_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.bundle_)*/nullptr
  , /*decltype(_impl_.undo_filter_set_)*/nullptr
  , /*decltype(_impl_.undo_sort_order_)*/nullptr
  , /*decltype(_impl_.formula_rewrite_command_for_undo_)*/nullptr
  , /*decltype(_impl_.undo_group_sort_order_)*/nullptr
  , /*decltype(_impl_.concurrent_cell_map_)*/nullptr
  , /*decltype(_impl_.categories_cell_map_)*/nullptr
  , /*decltype(_impl_.undo_concurrent_cell_map_)*/nullptr
  , /*decltype(_impl_.undo_categories_cell_map_)*/nullptr
  , /*decltype(_impl_.inverse_should_edge_expand_formula_ranges_)*/false} {}
struct CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal() {}
  union {
    CommandRemoveColumnsOrRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRemoveColumnsOrRowsArchiveDefaultTypeInternal _CommandRemoveColumnsOrRowsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRowColumnRangeArchive::CommandRowColumnRangeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uids_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.is_row_)*/false} {}
struct CommandRowColumnRangeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRowColumnRangeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRowColumnRangeArchiveDefaultTypeInternal() {}
  union {
    CommandRowColumnRangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRowColumnRangeArchiveDefaultTypeInternal _CommandRowColumnRangeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandResizeColumnOrRowArchive::CommandResizeColumnOrRowArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sizes_)*/{}
  , /*decltype(_impl_.sizes_for_undo_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandResizeColumnOrRowArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandResizeColumnOrRowArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandResizeColumnOrRowArchiveDefaultTypeInternal() {}
  union {
    CommandResizeColumnOrRowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandResizeColumnOrRowArchiveDefaultTypeInternal _CommandResizeColumnOrRowArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandCategoryResizeColumnOrRowArchive::CommandCategoryResizeColumnOrRowArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.category_row_sizes_)*/{}
  , /*decltype(_impl_.category_row_sizes_for_undo_)*/{}
  , /*decltype(_impl_.category_label_row_sizes_)*/{}
  , /*decltype(_impl_.category_label_row_sizes_for_undo_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.category_column_size_)*/0
  , /*decltype(_impl_.category_column_size_for_undo_)*/0} {}
struct CommandCategoryResizeColumnOrRowArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandCategoryResizeColumnOrRowArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandCategoryResizeColumnOrRowArchiveDefaultTypeInternal() {}
  union {
    CommandCategoryResizeColumnOrRowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandCategoryResizeColumnOrRowArchiveDefaultTypeInternal _CommandCategoryResizeColumnOrRowArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandHideShowArchive::CommandHideShowArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hide_show_action_for_undo_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.hide_show_action_)*/0
  , /*decltype(_impl_.hiding_action_)*/0u} {}
struct CommandHideShowArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandHideShowArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandHideShowArchiveDefaultTypeInternal() {}
  union {
    CommandHideShowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandHideShowArchiveDefaultTypeInternal _CommandHideShowArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandTextPreflightInsertCellArchive::CommandTextPreflightInsertCellArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.coalesced_textcommand_)*/nullptr
  , /*decltype(_impl_.postflightcommand_)*/nullptr
  , /*decltype(_impl_.editing_cell_)*/nullptr
  , /*decltype(_impl_.editing_storage_)*/nullptr
  , /*decltype(_impl_.cell_uid_)*/nullptr
  , /*decltype(_impl_.archived_initial_selection_path_)*/nullptr
  , /*decltype(_impl_.grouped_with_postflight_)*/false
  , /*decltype(_impl_.last_column_hit_by_tap_)*/0u} {}
struct CommandTextPreflightInsertCellArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandTextPreflightInsertCellArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandTextPreflightInsertCellArchiveDefaultTypeInternal() {}
  union {
    CommandTextPreflightInsertCellArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandTextPreflightInsertCellArchiveDefaultTypeInternal _CommandTextPreflightInsertCellArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandPostflightSetCellArchive::CommandPostflightSetCellArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.childcommandundo_)*/nullptr
  , /*decltype(_impl_.editing_cell_)*/nullptr
  , /*decltype(_impl_.new_cell_)*/nullptr
  , /*decltype(_impl_.editing_storage_)*/nullptr
  , /*decltype(_impl_.cell_uid_)*/nullptr
  , /*decltype(_impl_.last_column_hit_by_tap_)*/0u} {}
struct CommandPostflightSetCellArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandPostflightSetCellArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandPostflightSetCellArchiveDefaultTypeInternal() {}
  union {
    CommandPostflightSetCellArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandPostflightSetCellArchiveDefaultTypeInternal _CommandPostflightSetCellArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandChangeTableAreaForColumnOrRowArchive::CommandChangeTableAreaForColumnOrRowArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.action_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_diff_map_)*/nullptr
  , /*decltype(_impl_.undo_cell_diff_map_)*/nullptr
  , /*decltype(_impl_.undo_commands_)*/nullptr
  , /*decltype(_impl_.table_area_transition_)*/1} {}
struct CommandChangeTableAreaForColumnOrRowArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandChangeTableAreaForColumnOrRowArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandChangeTableAreaForColumnOrRowArchiveDefaultTypeInternal() {}
  union {
    CommandChangeTableAreaForColumnOrRowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandChangeTableAreaForColumnOrRowArchiveDefaultTypeInternal _CommandChangeTableAreaForColumnOrRowArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetPencilAnnotationsArchive::CommandSetPencilAnnotationsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.annotations_)*/{}
  , /*decltype(_impl_.formulas_)*/{}
  , /*decltype(_impl_.formula_indexes_)*/{}
  , /*decltype(_impl_.inverse_formulas_)*/{}
  , /*decltype(_impl_.inverse_formula_indexes_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rollback_index_)*/uint64_t{0u}} {}
struct CommandSetPencilAnnotationsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetPencilAnnotationsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetPencilAnnotationsArchiveDefaultTypeInternal() {}
  union {
    CommandSetPencilAnnotationsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetPencilAnnotationsArchiveDefaultTypeInternal _CommandSetPencilAnnotationsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetTableNameArchive::CommandSetTableNameArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.newtablename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.oldtablename_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.newstyle_)*/nullptr
  , /*decltype(_impl_.oldstyle_)*/nullptr
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_shape_style_)*/nullptr
  , /*decltype(_impl_.new_shape_style_)*/nullptr
  , /*decltype(_impl_.old_table_name_border_enabled_)*/false
  , /*decltype(_impl_.new_table_name_border_enabled_)*/false} {}
struct CommandSetTableNameArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetTableNameArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetTableNameArchiveDefaultTypeInternal() {}
  union {
    CommandSetTableNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetTableNameArchiveDefaultTypeInternal _CommandSetTableNameArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetTableNameEnabledArchive::CommandSetTableNameEnabledArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.table_name_enabled_)*/false
  , /*decltype(_impl_.prev_table_name_enabled_)*/false} {}
struct CommandSetTableNameEnabledArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetTableNameEnabledArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetTableNameEnabledArchiveDefaultTypeInternal() {}
  union {
    CommandSetTableNameEnabledArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetTableNameEnabledArchiveDefaultTypeInternal _CommandSetTableNameEnabledArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetTableFontSizeArchive::CommandSetTableFontSizeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.font_size_list_)*/{}
  , /*decltype(_impl_.inverse_font_size_list_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_diff_map_)*/nullptr
  , /*decltype(_impl_.inverse_cell_diff_map_)*/nullptr
  , /*decltype(_impl_.font_size_diff_)*/0
  , /*decltype(_impl_.is_increase_)*/false
  , /*decltype(_impl_.styles_container_refresh_done_)*/false} {}
struct CommandSetTableFontSizeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetTableFontSizeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetTableFontSizeArchiveDefaultTypeInternal() {}
  union {
    CommandSetTableFontSizeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetTableFontSizeArchiveDefaultTypeInternal _CommandSetTableFontSizeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetTableFontNameArchive::CommandSetTableFontNameArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.previous_text_styles_)*/{}
  , /*decltype(_impl_.font_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.previous_font_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.previous_table_style_)*/nullptr
  , /*decltype(_impl_.cell_diff_map_)*/nullptr
  , /*decltype(_impl_.inverse_cell_diff_map_)*/nullptr
  , /*decltype(_impl_.preserve_face_)*/false} {}
struct CommandSetTableFontNameArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetTableFontNameArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetTableFontNameArchiveDefaultTypeInternal() {}
  union {
    CommandSetTableFontNameArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetTableFontNameArchiveDefaultTypeInternal _CommandSetTableFontNameArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetTableNameHeightArchive::CommandSetTableNameHeightArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_table_name_height_)*/0
  , /*decltype(_impl_.new_table_name_height_)*/0} {}
struct CommandSetTableNameHeightArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetTableNameHeightArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetTableNameHeightArchiveDefaultTypeInternal() {}
  union {
    CommandSetTableNameHeightArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetTableNameHeightArchiveDefaultTypeInternal _CommandSetTableNameHeightArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetNowArchive::CommandSetNowArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandSetNowArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetNowArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetNowArchiveDefaultTypeInternal() {}
  union {
    CommandSetNowArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetNowArchiveDefaultTypeInternal _CommandSetNowArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetWasCutArchive::CommandSetWasCutArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.from_table_uid_)*/nullptr
  , /*decltype(_impl_.prev_from_table_uid_)*/nullptr
  , /*decltype(_impl_.from_group_by_uid_)*/nullptr
  , /*decltype(_impl_.prev_from_group_by_uid_)*/nullptr
  , /*decltype(_impl_.was_cut_)*/false
  , /*decltype(_impl_.prev_was_cut_)*/false} {}
struct CommandSetWasCutArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetWasCutArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetWasCutArchiveDefaultTypeInternal() {}
  union {
    CommandSetWasCutArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetWasCutArchiveDefaultTypeInternal _CommandSetWasCutArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandStyleCellsArchive::CommandStyleCellsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.format_properties_)*/nullptr
  , /*decltype(_impl_.selection_)*/nullptr
  , /*decltype(_impl_.undo_cell_map_)*/nullptr
  , /*decltype(_impl_.redo_cell_map_)*/nullptr
  , /*decltype(_impl_.text_undo_)*/nullptr} {}
struct CommandStyleCellsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandStyleCellsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandStyleCellsArchiveDefaultTypeInternal() {}
  union {
    CommandStyleCellsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandStyleCellsArchiveDefaultTypeInternal _CommandStyleCellsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandStyleTableArchive::CommandStyleTableArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.format_properties_)*/nullptr
  , /*decltype(_impl_.old_style_)*/nullptr
  , /*decltype(_impl_.new_style_)*/nullptr} {}
struct CommandStyleTableArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandStyleTableArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandStyleTableArchiveDefaultTypeInternal() {}
  union {
    CommandStyleTableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandStyleTableArchiveDefaultTypeInternal _CommandStyleTableArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetRepeatingHeaderEnabledArchive::CommandSetRepeatingHeaderEnabledArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.repeating_header_enabled_)*/false
  , /*decltype(_impl_.prev_repeating_header_enabled_)*/false
  , /*decltype(_impl_.direction_)*/-1} {}
struct CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal() {}
  union {
    CommandSetRepeatingHeaderEnabledArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetRepeatingHeaderEnabledArchiveDefaultTypeInternal _CommandSetRepeatingHeaderEnabledArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetFiltersEnabledArchive::CommandSetFiltersEnabledArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rollback_uid_list_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_filters_enabled_)*/false
  , /*decltype(_impl_.old_filters_enabled_)*/false} {}
struct CommandSetFiltersEnabledArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetFiltersEnabledArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetFiltersEnabledArchiveDefaultTypeInternal() {}
  union {
    CommandSetFiltersEnabledArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetFiltersEnabledArchiveDefaultTypeInternal _CommandSetFiltersEnabledArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandAddTableStylePresetArchive::CommandAddTableStylePresetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.table_styles_)*/nullptr
  , /*decltype(_impl_.preset_index_)*/0
  , /*decltype(_impl_.send_notification_)*/false} {}
struct CommandAddTableStylePresetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandAddTableStylePresetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandAddTableStylePresetArchiveDefaultTypeInternal() {}
  union {
    CommandAddTableStylePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandAddTableStylePresetArchiveDefaultTypeInternal _CommandAddTableStylePresetArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRemoveTableStylePresetArchive::CommandRemoveTableStylePresetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.removed_table_styles_)*/nullptr
  , /*decltype(_impl_.preset_id_)*/0
  , /*decltype(_impl_.preset_index_in_theme_)*/0} {}
struct CommandRemoveTableStylePresetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRemoveTableStylePresetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRemoveTableStylePresetArchiveDefaultTypeInternal() {}
  union {
    CommandRemoveTableStylePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRemoveTableStylePresetArchiveDefaultTypeInternal _CommandRemoveTableStylePresetArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandReplaceTableStylePresetArchive::CommandReplaceTableStylePresetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.theme_)*/nullptr
  , /*decltype(_impl_.old_table_styles_)*/nullptr
  , /*decltype(_impl_.new_table_styles_)*/nullptr} {}
struct CommandReplaceTableStylePresetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandReplaceTableStylePresetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandReplaceTableStylePresetArchiveDefaultTypeInternal() {}
  union {
    CommandReplaceTableStylePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandReplaceTableStylePresetArchiveDefaultTypeInternal _CommandReplaceTableStylePresetArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandApplyTableStylePresetArchive::CommandApplyTableStylePresetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_col_styles_)*/{}
  , /*decltype(_impl_.undo_row_col_styles_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.preset_)*/nullptr
  , /*decltype(_impl_.styles_)*/nullptr
  , /*decltype(_impl_.undo_preset_)*/nullptr
  , /*decltype(_impl_.undo_styles_)*/nullptr
  , /*decltype(_impl_.cell_diff_map_)*/nullptr
  , /*decltype(_impl_.undo_cell_diff_map_)*/nullptr
  , /*decltype(_impl_.change_prop_map_wrapper_)*/nullptr
  , /*decltype(_impl_.apply_preset_option_)*/0
  , /*decltype(_impl_.table_clears_all_flag_)*/false
  , /*decltype(_impl_.undo_table_clears_all_flag_)*/false} {}
struct CommandApplyTableStylePresetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandApplyTableStylePresetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandApplyTableStylePresetArchiveDefaultTypeInternal() {}
  union {
    CommandApplyTableStylePresetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandApplyTableStylePresetArchiveDefaultTypeInternal _CommandApplyTableStylePresetArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetBaseArchive::CommandSetBaseArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.base_)*/0u} {}
struct CommandSetBaseArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetBaseArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetBaseArchiveDefaultTypeInternal() {}
  union {
    CommandSetBaseArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetBaseArchiveDefaultTypeInternal _CommandSetBaseArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetBasePlacesArchive::CommandSetBasePlacesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.base_places_)*/0u} {}
struct CommandSetBasePlacesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetBasePlacesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetBasePlacesArchiveDefaultTypeInternal() {}
  union {
    CommandSetBasePlacesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetBasePlacesArchiveDefaultTypeInternal _CommandSetBasePlacesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetBaseUseMinusSignArchive::CommandSetBaseUseMinusSignArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.base_use_minus_sign_)*/false} {}
struct CommandSetBaseUseMinusSignArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetBaseUseMinusSignArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetBaseUseMinusSignArchiveDefaultTypeInternal() {}
  union {
    CommandSetBaseUseMinusSignArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetBaseUseMinusSignArchiveDefaultTypeInternal _CommandSetBaseUseMinusSignArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetCurrencyCodeArchive::CommandSetCurrencyCodeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.currency_code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandSetCurrencyCodeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetCurrencyCodeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetCurrencyCodeArchiveDefaultTypeInternal() {}
  union {
    CommandSetCurrencyCodeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetCurrencyCodeArchiveDefaultTypeInternal _CommandSetCurrencyCodeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetFractionAccuracyArchive::CommandSetFractionAccuracyArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.fraction_accuracy_)*/0u} {}
struct CommandSetFractionAccuracyArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetFractionAccuracyArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetFractionAccuracyArchiveDefaultTypeInternal() {}
  union {
    CommandSetFractionAccuracyArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetFractionAccuracyArchiveDefaultTypeInternal _CommandSetFractionAccuracyArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetNegativeNumberStyleArchive::CommandSetNegativeNumberStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.negative_number_style_)*/0u} {}
struct CommandSetNegativeNumberStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetNegativeNumberStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetNegativeNumberStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSetNegativeNumberStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetNegativeNumberStyleArchiveDefaultTypeInternal _CommandSetNegativeNumberStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetNumberOfDecimalPlacesArchive::CommandSetNumberOfDecimalPlacesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.decimal_places_)*/0u} {}
struct CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal() {}
  union {
    CommandSetNumberOfDecimalPlacesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetNumberOfDecimalPlacesArchiveDefaultTypeInternal _CommandSetNumberOfDecimalPlacesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetDateTimeFormatArchive::CommandSetDateTimeFormatArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.date_format_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.time_format_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandSetDateTimeFormatArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetDateTimeFormatArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetDateTimeFormatArchiveDefaultTypeInternal() {}
  union {
    CommandSetDateTimeFormatArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetDateTimeFormatArchiveDefaultTypeInternal _CommandSetDateTimeFormatArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetShowThousandsSeparatorArchive::CommandSetShowThousandsSeparatorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.show_thousands_separator_)*/false} {}
struct CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal() {}
  union {
    CommandSetShowThousandsSeparatorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetShowThousandsSeparatorArchiveDefaultTypeInternal _CommandSetShowThousandsSeparatorArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetUseAccountingStyleArchive::CommandSetUseAccountingStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.use_accounting_style_)*/false} {}
struct CommandSetUseAccountingStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetUseAccountingStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetUseAccountingStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSetUseAccountingStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetUseAccountingStyleArchiveDefaultTypeInternal _CommandSetUseAccountingStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetRangeControlMinMaxIncArchive::CommandSetRangeControlMinMaxIncArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_diff_map_)*/nullptr
  , /*decltype(_impl_.cell_uid_list_)*/nullptr
  , /*decltype(_impl_.inverse_cell_diff_map_)*/nullptr
  , /*decltype(_impl_.minimum_)*/0
  , /*decltype(_impl_.maximum_)*/0
  , /*decltype(_impl_.increment_)*/0
  , /*decltype(_impl_.is_first_commit_)*/false} {}
struct CommandSetRangeControlMinMaxIncArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetRangeControlMinMaxIncArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetRangeControlMinMaxIncArchiveDefaultTypeInternal() {}
  union {
    CommandSetRangeControlMinMaxIncArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetRangeControlMinMaxIncArchiveDefaultTypeInternal _CommandSetRangeControlMinMaxIncArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMoveColumnsOrRowsArchive::CommandMoveColumnsOrRowsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.uids_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.dest_uid_)*/nullptr
  , /*decltype(_impl_.undo_dest_uid_)*/nullptr
  , /*decltype(_impl_.formula_rewrite_command_)*/nullptr
  , /*decltype(_impl_.before_)*/false
  , /*decltype(_impl_.undo_before_)*/false
  , /*decltype(_impl_.direction_)*/-1} {}
struct CommandMoveColumnsOrRowsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMoveColumnsOrRowsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMoveColumnsOrRowsArchiveDefaultTypeInternal() {}
  union {
    CommandMoveColumnsOrRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMoveColumnsOrRowsArchiveDefaultTypeInternal _CommandMoveColumnsOrRowsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSortArchive::CommandSortArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.from_row_uids_)*/{}
  , /*decltype(_impl_.to_row_uids_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.formula_rewrite_command_)*/nullptr} {}
struct CommandSortArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSortArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSortArchiveDefaultTypeInternal() {}
  union {
    CommandSortArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSortArchiveDefaultTypeInternal _CommandSortArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaRewriteSpecArchive::FormulaRewriteSpecArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_uid_)*/nullptr
  , /*decltype(_impl_.cond_style_owner_uid_)*/nullptr
  , /*decltype(_impl_.group_by_uid_)*/nullptr
  , /*decltype(_impl_.column_or_row_uuids_info_)*/nullptr
  , /*decltype(_impl_.aux_column_or_row_uuids_info_)*/nullptr
  , /*decltype(_impl_.region_moved_info_)*/nullptr
  , /*decltype(_impl_.region_info_)*/nullptr
  , /*decltype(_impl_.rewrite_table_id_info_)*/nullptr
  , /*decltype(_impl_.transposed_table_info_)*/nullptr
  , /*decltype(_impl_.merge_origin_moved_info_)*/nullptr
  , /*decltype(_impl_.merge_source_)*/nullptr
  , /*decltype(_impl_.group_node_info_)*/nullptr
  , /*decltype(_impl_.groupby_change_)*/nullptr
  , /*decltype(_impl_.rewrite_type_)*/0u
  , /*decltype(_impl_.is_inverse_)*/false} {}
struct FormulaRewriteSpecArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaRewriteSpecArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaRewriteSpecArchiveDefaultTypeInternal() {}
  union {
    FormulaRewriteSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaRewriteSpecArchiveDefaultTypeInternal _FormulaRewriteSpecArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewriteFormulasForTransposeArchive::CommandRewriteFormulasForTransposeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr
  , /*decltype(_impl_.formulas_to_rewrite_)*/nullptr
  , /*decltype(_impl_.warningset_map_)*/nullptr} {}
struct CommandRewriteFormulasForTransposeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewriteFormulasForTransposeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewriteFormulasForTransposeArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteFormulasForTransposeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewriteFormulasForTransposeArchiveDefaultTypeInternal _CommandRewriteFormulasForTransposeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewriteTableFormulasForRewriteSpecArchive::CommandRewriteTableFormulasForRewriteSpecArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr
  , /*decltype(_impl_.formulas_to_rewrite_)*/nullptr} {}
struct CommandRewriteTableFormulasForRewriteSpecArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewriteTableFormulasForRewriteSpecArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewriteTableFormulasForRewriteSpecArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteTableFormulasForRewriteSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewriteTableFormulasForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteTableFormulasForRewriteSpecArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewriteMergeFormulasArchive::CommandRewriteMergeFormulasArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr
  , /*decltype(_impl_.formulas_to_rewrite_)*/nullptr} {}
struct CommandRewriteMergeFormulasArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewriteMergeFormulasArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewriteMergeFormulasArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteMergeFormulasArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewriteMergeFormulasArchiveDefaultTypeInternal _CommandRewriteMergeFormulasArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewriteCategoryFormulasArchive::CommandRewriteCategoryFormulasArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr
  , /*decltype(_impl_.formulas_to_rewrite_)*/nullptr} {}
struct CommandRewriteCategoryFormulasArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewriteCategoryFormulasArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewriteCategoryFormulasArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteCategoryFormulasArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewriteCategoryFormulasArchiveDefaultTypeInternal _CommandRewriteCategoryFormulasArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewriteFilterFormulasForTableResizeArchive::CommandRewriteFilterFormulasForTableResizeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteFilterFormulasForTableResizeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewriteFilterFormulasForTableResizeArchiveDefaultTypeInternal _CommandRewriteFilterFormulasForTableResizeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewriteFilterFormulasForRewriteSpecArchive::CommandRewriteFilterFormulasForRewriteSpecArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.filter_set_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr} {}
struct CommandRewriteFilterFormulasForRewriteSpecArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewriteFilterFormulasForRewriteSpecArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewriteFilterFormulasForRewriteSpecArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteFilterFormulasForRewriteSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewriteFilterFormulasForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteFilterFormulasForRewriteSpecArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewriteConditionalStylesForRewriteSpecArchive::CommandRewriteConditionalStylesForRewriteSpecArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr
  , /*decltype(_impl_.formulas_to_rewrite_)*/nullptr
  , /*decltype(_impl_.conditional_style_sets_)*/nullptr} {}
struct CommandRewriteConditionalStylesForRewriteSpecArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewriteConditionalStylesForRewriteSpecArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewriteConditionalStylesForRewriteSpecArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteConditionalStylesForRewriteSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewriteConditionalStylesForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteConditionalStylesForRewriteSpecArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewritePivotOwnerFormulasArchive::CommandRewritePivotOwnerFormulasArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr
  , /*decltype(_impl_.formulas_to_rewrite_)*/nullptr} {}
struct CommandRewritePivotOwnerFormulasArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewritePivotOwnerFormulasArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewritePivotOwnerFormulasArchiveDefaultTypeInternal() {}
  union {
    CommandRewritePivotOwnerFormulasArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewritePivotOwnerFormulasArchiveDefaultTypeInternal _CommandRewritePivotOwnerFormulasArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandMergeArchive::CommandMergeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_uid_list_)*/nullptr
  , /*decltype(_impl_.undo_cell_map_)*/nullptr
  , /*decltype(_impl_.undo_formula_rewrite_command_)*/nullptr
  , /*decltype(_impl_.commit_cell_map_)*/nullptr
  , /*decltype(_impl_.merge_owner_rollback_)*/0u} {}
struct CommandMergeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandMergeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandMergeArchiveDefaultTypeInternal() {}
  union {
    CommandMergeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandMergeArchiveDefaultTypeInternal _CommandMergeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandInverseMergeArchive::CommandInverseMergeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.merge_source_cell_uid_)*/nullptr} {}
struct CommandInverseMergeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandInverseMergeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandInverseMergeArchiveDefaultTypeInternal() {}
  union {
    CommandInverseMergeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandInverseMergeArchiveDefaultTypeInternal _CommandInverseMergeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandUnmergeArchive::CommandUnmergeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unmerge_uid_ranges_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.undo_cell_map_)*/nullptr
  , /*decltype(_impl_.undo_formula_rewrite_command_)*/nullptr} {}
struct CommandUnmergeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandUnmergeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandUnmergeArchiveDefaultTypeInternal() {}
  union {
    CommandUnmergeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandUnmergeArchiveDefaultTypeInternal _CommandUnmergeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandChooseTableIdRemapperArchive::CommandChooseTableIdRemapperArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.table_id_mapper_)*/nullptr
  , /*decltype(_impl_.formula_rewrite_command_for_undo_)*/nullptr
  , /*decltype(_impl_.apply_and_clear_)*/false} {}
struct CommandChooseTableIdRemapperArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandChooseTableIdRemapperArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandChooseTableIdRemapperArchiveDefaultTypeInternal() {}
  union {
    CommandChooseTableIdRemapperArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandChooseTableIdRemapperArchiveDefaultTypeInternal _CommandChooseTableIdRemapperArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandCategorySetGroupingColumnsArchive::CommandCategorySetGroupingColumnsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.base_row_order_)*/{}
  , /*decltype(_impl_.undo_base_row_order_)*/{}
  , /*decltype(_impl_.view_row_order_)*/{}
  , /*decltype(_impl_.undo_view_row_order_)*/{}
  , /*decltype(_impl_.collapse_state_)*/{}
  , /*decltype(_impl_.undo_collapse_state_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_grouping_columns_)*/nullptr
  , /*decltype(_impl_.old_grouping_columns_)*/nullptr
  , /*decltype(_impl_.summary_change_state_)*/nullptr
  , /*decltype(_impl_.undo_summary_change_state_)*/nullptr
  , /*decltype(_impl_.new_column_aggregates_)*/nullptr
  , /*decltype(_impl_.old_column_aggregates_)*/nullptr
  , /*decltype(_impl_.undo_set_enabled_rewrite_command_)*/nullptr
  , /*decltype(_impl_.undo_set_columns_rewrite_command_)*/nullptr
  , /*decltype(_impl_.cell_diff_map_)*/nullptr
  , /*decltype(_impl_.undo_cell_diff_map_)*/nullptr
  , /*decltype(_impl_.undo_set_group_sort_order_command_)*/nullptr
  , /*decltype(_impl_.new_enabled_changing_)*/0
  , /*decltype(_impl_.old_enabled_changing_)*/0
  , /*decltype(_impl_.restore_base_order_)*/false
  , /*decltype(_impl_.undo_restore_base_order_)*/false
  , /*decltype(_impl_.restore_view_order_)*/false
  , /*decltype(_impl_.undo_restore_view_order_)*/false
  , /*decltype(_impl_.force_restore_all_states_)*/false} {}
struct CommandCategorySetGroupingColumnsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandCategorySetGroupingColumnsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandCategorySetGroupingColumnsArchiveDefaultTypeInternal() {}
  union {
    CommandCategorySetGroupingColumnsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandCategorySetGroupingColumnsArchiveDefaultTypeInternal _CommandCategorySetGroupingColumnsArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaEditingCommandGroupArchive::FormulaEditingCommandGroupArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.undoselectionstart_)*/0u
  , /*decltype(_impl_.undoselectionlength_)*/0u
  , /*decltype(_impl_.undoselectionvalid_)*/false
  , /*decltype(_impl_.redoselectionvalid_)*/false
  , /*decltype(_impl_.undoactivetoken_)*/0u
  , /*decltype(_impl_.redoselectionstart_)*/0u
  , /*decltype(_impl_.redoselectionlength_)*/0u
  , /*decltype(_impl_.redoactivetoken_)*/0u} {}
struct FormulaEditingCommandGroupArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaEditingCommandGroupArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaEditingCommandGroupArchiveDefaultTypeInternal() {}
  union {
    FormulaEditingCommandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaEditingCommandGroupArchiveDefaultTypeInternal _FormulaEditingCommandGroupArchive_default_instance_;
PROTOBUF_CONSTEXPR FormulaEditingCommandSelectionBehaviorArchive::FormulaEditingCommandSelectionBehaviorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.undoactivetoken_)*/0u
  , /*decltype(_impl_.redoactivetoken_)*/0u} {}
struct FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal() {}
  union {
    FormulaEditingCommandSelectionBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FormulaEditingCommandSelectionBehaviorArchiveDefaultTypeInternal _FormulaEditingCommandSelectionBehaviorArchive_default_instance_;
PROTOBUF_CONSTEXPR TableCommandSelectionBehaviorArchive::TableCommandSelectionBehaviorArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.table_info_)*/nullptr
  , /*decltype(_impl_.last_column_uid_hit_by_tap_)*/nullptr
  , /*decltype(_impl_.invalidate_comments_)*/0u} {}
struct TableCommandSelectionBehaviorArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableCommandSelectionBehaviorArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableCommandSelectionBehaviorArchiveDefaultTypeInternal() {}
  union {
    TableCommandSelectionBehaviorArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableCommandSelectionBehaviorArchiveDefaultTypeInternal _TableCommandSelectionBehaviorArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandApplyCellCommentArchive::CommandApplyCellCommentArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_uid_)*/nullptr
  , /*decltype(_impl_.old_comment_storage_)*/nullptr
  , /*decltype(_impl_.new_comment_storage_)*/nullptr
  , /*decltype(_impl_.forward_variant_)*/0
  , /*decltype(_impl_.inverse_variant_)*/0} {}
struct CommandApplyCellCommentArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandApplyCellCommentArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandApplyCellCommentArchiveDefaultTypeInternal() {}
  union {
    CommandApplyCellCommentArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandApplyCellCommentArchiveDefaultTypeInternal _CommandApplyCellCommentArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetFormulaTokenizationArchive::CommandSetFormulaTokenizationArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.tokenization_)*/false} {}
struct CommandSetFormulaTokenizationArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetFormulaTokenizationArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetFormulaTokenizationArchiveDefaultTypeInternal() {}
  union {
    CommandSetFormulaTokenizationArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetFormulaTokenizationArchiveDefaultTypeInternal _CommandSetFormulaTokenizationArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetFilterSetTypeArchive::CommandSetFilterSetTypeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rollback_uid_list_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_filter_set_type_)*/0
  , /*decltype(_impl_.new_filter_set_type_)*/0} {}
struct CommandSetFilterSetTypeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetFilterSetTypeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetFilterSetTypeArchiveDefaultTypeInternal() {}
  union {
    CommandSetFilterSetTypeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetFilterSetTypeArchiveDefaultTypeInternal _CommandSetFilterSetTypeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetTextStyleArchive::CommandSetTextStyleArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_diff_map_)*/nullptr
  , /*decltype(_impl_.inverse_cell_diff_map_)*/nullptr} {}
struct CommandSetTextStyleArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetTextStyleArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetTextStyleArchiveDefaultTypeInternal() {}
  union {
    CommandSetTextStyleArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetTextStyleArchiveDefaultTypeInternal _CommandSetTextStyleArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetTextStylePropertiesArchive::CommandSetTextStylePropertiesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cell_was_rich_text_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_diff_map_)*/nullptr
  , /*decltype(_impl_.inverse_cell_diff_map_)*/nullptr} {}
struct CommandSetTextStylePropertiesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetTextStylePropertiesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetTextStylePropertiesArchiveDefaultTypeInternal() {}
  union {
    CommandSetTextStylePropertiesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetTextStylePropertiesArchiveDefaultTypeInternal _CommandSetTextStylePropertiesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandJustForNotifyingArchive::CommandJustForNotifyingArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.change_descriptor_type_)*/0u} {}
struct CommandJustForNotifyingArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandJustForNotifyingArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandJustForNotifyingArchiveDefaultTypeInternal() {}
  union {
    CommandJustForNotifyingArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandJustForNotifyingArchiveDefaultTypeInternal _CommandJustForNotifyingArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetStorageLanguageArchive::CommandSetStorageLanguageArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.storage_)*/nullptr
  , /*decltype(_impl_.undo_transaction_)*/nullptr
  , /*decltype(_impl_.range_location_)*/0u
  , /*decltype(_impl_.range_length_)*/0u} {}
struct CommandSetStorageLanguageArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetStorageLanguageArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetStorageLanguageArchiveDefaultTypeInternal() {}
  union {
    CommandSetStorageLanguageArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetStorageLanguageArchiveDefaultTypeInternal _CommandSetStorageLanguageArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetSortOrderArchive::CommandSetSortOrderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_sort_order_)*/nullptr
  , /*decltype(_impl_.new_sort_order_)*/nullptr} {}
struct CommandSetSortOrderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetSortOrderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetSortOrderArchiveDefaultTypeInternal() {}
  union {
    CommandSetSortOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetSortOrderArchiveDefaultTypeInternal _CommandSetSortOrderArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetGroupSortOrderArchive::CommandSetGroupSortOrderArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_group_sort_order_)*/nullptr
  , /*decltype(_impl_.new_group_sort_order_)*/nullptr} {}
struct CommandSetGroupSortOrderArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetGroupSortOrderArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetGroupSortOrderArchiveDefaultTypeInternal() {}
  union {
    CommandSetGroupSortOrderArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetGroupSortOrderArchiveDefaultTypeInternal _CommandSetGroupSortOrderArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewriteSortOrderForTableResizeArchive::CommandRewriteSortOrderForTableResizeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.old_sort_order_)*/nullptr
  , /*decltype(_impl_.new_sort_order_)*/nullptr} {}
struct CommandRewriteSortOrderForTableResizeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewriteSortOrderForTableResizeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewriteSortOrderForTableResizeArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteSortOrderForTableResizeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewriteSortOrderForTableResizeArchiveDefaultTypeInternal _CommandRewriteSortOrderForTableResizeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewriteSortOrderForRewriteSpecArchive::CommandRewriteSortOrderForRewriteSpecArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr
  , /*decltype(_impl_.old_sort_order_)*/nullptr
  , /*decltype(_impl_.new_sort_order_)*/nullptr} {}
struct CommandRewriteSortOrderForRewriteSpecArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewriteSortOrderForRewriteSpecArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewriteSortOrderForRewriteSpecArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteSortOrderForRewriteSpecArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewriteSortOrderForRewriteSpecArchiveDefaultTypeInternal _CommandRewriteSortOrderForRewriteSpecArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetFilterSetArchive::CommandSetFilterSetArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rollback_uid_list_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_filter_set_)*/nullptr
  , /*decltype(_impl_.old_filter_set_)*/nullptr} {}
struct CommandSetFilterSetArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetFilterSetArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetFilterSetArchiveDefaultTypeInternal() {}
  union {
    CommandSetFilterSetArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetFilterSetArchiveDefaultTypeInternal _CommandSetFilterSetArchive_default_instance_;
PROTOBUF_CONSTEXPR ColumnRowRestoreDataArchive::ColumnRowRestoreDataArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uid_list_)*/{}
  , /*decltype(_impl_.metadatas_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColumnRowRestoreDataArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColumnRowRestoreDataArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColumnRowRestoreDataArchiveDefaultTypeInternal() {}
  union {
    ColumnRowRestoreDataArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColumnRowRestoreDataArchiveDefaultTypeInternal _ColumnRowRestoreDataArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandTransposeTableArchive::CommandTransposeTableArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.original_column_widths_)*/{}
  , /*decltype(_impl_.original_row_heights_)*/{}
  , /*decltype(_impl_.ineligible_merge_list_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.original_table_range_)*/nullptr
  , /*decltype(_impl_.original_cell_map_)*/nullptr
  , /*decltype(_impl_.transposed_cell_map_)*/nullptr
  , /*decltype(_impl_.undo_formula_rewrite_command_)*/nullptr
  , /*decltype(_impl_.rich_text_subcommands_)*/nullptr
  , /*decltype(_impl_.column_restore_data_)*/nullptr
  , /*decltype(_impl_.row_restore_data_)*/nullptr
  , /*decltype(_impl_.original_footer_row_count_)*/0u} {}
struct CommandTransposeTableArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandTransposeTableArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandTransposeTableArchiveDefaultTypeInternal() {}
  union {
    CommandTransposeTableArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandTransposeTableArchiveDefaultTypeInternal _CommandTransposeTableArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandSetStructuredTextImportRecordArchive::CommandSetStructuredTextImportRecordArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_import_record_)*/nullptr
  , /*decltype(_impl_.old_import_record_)*/nullptr} {}
struct CommandSetStructuredTextImportRecordArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandSetStructuredTextImportRecordArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandSetStructuredTextImportRecordArchiveDefaultTypeInternal() {}
  union {
    CommandSetStructuredTextImportRecordArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandSetStructuredTextImportRecordArchiveDefaultTypeInternal _CommandSetStructuredTextImportRecordArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandCategoryCollapseExpandGroupArchive::CommandCategoryCollapseExpandGroupArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.grouping_columns_)*/nullptr
  , /*decltype(_impl_.collapse_state_)*/nullptr
  , /*decltype(_impl_.undo_collapse_state_)*/nullptr
  , /*decltype(_impl_.is_collapsing_)*/false} {}
struct CommandCategoryCollapseExpandGroupArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandCategoryCollapseExpandGroupArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandCategoryCollapseExpandGroupArchiveDefaultTypeInternal() {}
  union {
    CommandCategoryCollapseExpandGroupArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandCategoryCollapseExpandGroupArchiveDefaultTypeInternal _CommandCategoryCollapseExpandGroupArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandCategoryChangeSummaryAggregateType::CommandCategoryChangeSummaryAggregateType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.column_uid_)*/nullptr
  , /*decltype(_impl_.aggregate_type_)*/0u
  , /*decltype(_impl_.undo_aggregate_type_)*/0u
  , /*decltype(_impl_.group_level_)*/0} {}
struct CommandCategoryChangeSummaryAggregateTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandCategoryChangeSummaryAggregateTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandCategoryChangeSummaryAggregateTypeDefaultTypeInternal() {}
  union {
    CommandCategoryChangeSummaryAggregateType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandCategoryChangeSummaryAggregateTypeDefaultTypeInternal _CommandCategoryChangeSummaryAggregateType_default_instance_;
PROTOBUF_CONSTEXPR CommandCategorySetLabelRowVisibility::CommandCategorySetLabelRowVisibility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.group_level_)*/0u
  , /*decltype(_impl_.label_row_visibility_)*/0u
  , /*decltype(_impl_.undo_label_row_visibility_)*/0u} {}
struct CommandCategorySetLabelRowVisibilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandCategorySetLabelRowVisibilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandCategorySetLabelRowVisibilityDefaultTypeInternal() {}
  union {
    CommandCategorySetLabelRowVisibility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandCategorySetLabelRowVisibilityDefaultTypeInternal _CommandCategorySetLabelRowVisibility_default_instance_;
PROTOBUF_CONSTEXPR CommandCategoryWillChangeGroupValue::CommandCategoryWillChangeGroupValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.group_node_uid_)*/nullptr
  , /*decltype(_impl_.undo_group_node_uid_)*/nullptr
  , /*decltype(_impl_.group_value_)*/nullptr
  , /*decltype(_impl_.undo_group_value_)*/nullptr
  , /*decltype(_impl_.rewrite_command_for_undo_)*/nullptr} {}
struct CommandCategoryWillChangeGroupValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandCategoryWillChangeGroupValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandCategoryWillChangeGroupValueDefaultTypeInternal() {}
  union {
    CommandCategoryWillChangeGroupValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandCategoryWillChangeGroupValueDefaultTypeInternal _CommandCategoryWillChangeGroupValue_default_instance_;
PROTOBUF_CONSTEXPR IdempotentSelectionTransformerArchive::IdempotentSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.archived_selection_)*/nullptr} {}
struct IdempotentSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IdempotentSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IdempotentSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    IdempotentSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IdempotentSelectionTransformerArchiveDefaultTypeInternal _IdempotentSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR WPSelectionTransformerArchive::WPSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.archived_selection_)*/nullptr
  , /*decltype(_impl_.origin_cell_uid_)*/nullptr} {}
struct WPSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WPSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WPSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    WPSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WPSelectionTransformerArchiveDefaultTypeInternal _WPSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR TableSubSelectionTransformerBaseArchive::TableSubSelectionTransformerBaseArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.table_info_id_path_)*/nullptr} {}
struct TableSubSelectionTransformerBaseArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableSubSelectionTransformerBaseArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableSubSelectionTransformerBaseArchiveDefaultTypeInternal() {}
  union {
    TableSubSelectionTransformerBaseArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableSubSelectionTransformerBaseArchiveDefaultTypeInternal _TableSubSelectionTransformerBaseArchive_default_instance_;
PROTOBUF_CONSTEXPR TableNameSelectionTransformerArchive::TableNameSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr} {}
struct TableNameSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableNameSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableNameSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    TableNameSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableNameSelectionTransformerArchiveDefaultTypeInternal _TableNameSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR ControlCellSelectionTransformerArchive::ControlCellSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_uids_)*/nullptr
  , /*decltype(_impl_.origin_cell_uid_)*/nullptr
  , /*decltype(_impl_.origin_cell_id_)*/nullptr} {}
struct ControlCellSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlCellSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlCellSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    ControlCellSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlCellSelectionTransformerArchiveDefaultTypeInternal _ControlCellSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR StockCellSelectionTransformerArchive::StockCellSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_uids_)*/nullptr
  , /*decltype(_impl_.origin_cell_uid_)*/nullptr
  , /*decltype(_impl_.origin_cell_id_)*/nullptr} {}
struct StockCellSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StockCellSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StockCellSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    StockCellSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StockCellSelectionTransformerArchiveDefaultTypeInternal _StockCellSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR RegionSelectionTransformerArchive::RegionSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_uids_)*/nullptr
  , /*decltype(_impl_.origin_cell_uid_)*/nullptr
  , /*decltype(_impl_.anchor_cell_uid_)*/nullptr
  , /*decltype(_impl_.cursor_cell_uid_)*/nullptr} {}
struct RegionSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    RegionSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionSelectionTransformerArchiveDefaultTypeInternal _RegionSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR StrokeSelectionTransformerArchive::StrokeSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.archived_selection_)*/nullptr} {}
struct StrokeSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StrokeSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StrokeSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    StrokeSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StrokeSelectionTransformerArchiveDefaultTypeInternal _StrokeSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR RowColumnSelectionTransformerArchive::RowColumnSelectionTransformerArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.row_col_uids_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.selection_type_)*/0} {}
struct RowColumnSelectionTransformerArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RowColumnSelectionTransformerArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RowColumnSelectionTransformerArchiveDefaultTypeInternal() {}
  union {
    RowColumnSelectionTransformerArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RowColumnSelectionTransformerArchiveDefaultTypeInternal _RowColumnSelectionTransformerArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandCategoryMoveRowsArchive::CommandCategoryMoveRowsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.category_row_order_)*/{}
  , /*decltype(_impl_.undo_category_row_order_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.cell_diff_map_)*/nullptr
  , /*decltype(_impl_.undo_cell_diff_map_)*/nullptr
  , /*decltype(_impl_.grouping_columns_)*/nullptr
  , /*decltype(_impl_.action_type_)*/0u} {}
struct CommandCategoryMoveRowsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandCategoryMoveRowsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandCategoryMoveRowsArchiveDefaultTypeInternal() {}
  union {
    CommandCategoryMoveRowsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandCategoryMoveRowsArchiveDefaultTypeInternal _CommandCategoryMoveRowsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewriteHiddenStatesForGroupByChangeArchive::CommandRewriteHiddenStatesForGroupByChangeArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.group_by_change_)*/nullptr
  , /*decltype(_impl_.collapsed_state_)*/nullptr} {}
struct CommandRewriteHiddenStatesForGroupByChangeArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewriteHiddenStatesForGroupByChangeArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewriteHiddenStatesForGroupByChangeArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteHiddenStatesForGroupByChangeArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewriteHiddenStatesForGroupByChangeArchiveDefaultTypeInternal _CommandRewriteHiddenStatesForGroupByChangeArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.annotation_)*/nullptr
  , /*decltype(_impl_.index_)*/uint64_t{0u}} {}
struct CommandRewritePencilAnnotationFormulasArchive_AnnotationPairDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewritePencilAnnotationFormulasArchive_AnnotationPairDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewritePencilAnnotationFormulasArchive_AnnotationPairDefaultTypeInternal() {}
  union {
    CommandRewritePencilAnnotationFormulasArchive_AnnotationPair _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewritePencilAnnotationFormulasArchive_AnnotationPairDefaultTypeInternal _CommandRewritePencilAnnotationFormulasArchive_AnnotationPair_default_instance_;
PROTOBUF_CONSTEXPR CommandRewritePencilAnnotationFormulasArchive::CommandRewritePencilAnnotationFormulasArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.annotations_for_undo_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr
  , /*decltype(_impl_.formulas_to_rewrite_)*/nullptr} {}
struct CommandRewritePencilAnnotationFormulasArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewritePencilAnnotationFormulasArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewritePencilAnnotationFormulasArchiveDefaultTypeInternal() {}
  union {
    CommandRewritePencilAnnotationFormulasArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewritePencilAnnotationFormulasArchiveDefaultTypeInternal _CommandRewritePencilAnnotationFormulasArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandPivotSetPivotRulesArchive::CommandPivotSetPivotRulesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.new_view_row_order_)*/{}
  , /*decltype(_impl_.old_view_row_order_)*/{}
  , /*decltype(_impl_.new_view_column_order_)*/{}
  , /*decltype(_impl_.old_view_column_order_)*/{}
  , /*decltype(_impl_.new_collapsed_row_groups_)*/{}
  , /*decltype(_impl_.old_collapsed_row_groups_)*/{}
  , /*decltype(_impl_.new_collapsed_column_groups_)*/{}
  , /*decltype(_impl_.old_collapsed_column_groups_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.new_target_pivot_refresh_uid_)*/nullptr
  , /*decltype(_impl_.new_row_groupings_)*/nullptr
  , /*decltype(_impl_.old_row_groupings_)*/nullptr
  , /*decltype(_impl_.new_column_groupings_)*/nullptr
  , /*decltype(_impl_.old_column_groupings_)*/nullptr
  , /*decltype(_impl_.new_aggregates_)*/nullptr
  , /*decltype(_impl_.old_aggregates_)*/nullptr
  , /*decltype(_impl_.new_pivot_data_model_)*/nullptr
  , /*decltype(_impl_.old_pivot_data_model_)*/nullptr
  , /*decltype(_impl_.new_pivot_refresh_uid_)*/nullptr
  , /*decltype(_impl_.old_pivot_refresh_uid_)*/nullptr
  , /*decltype(_impl_.new_options_map_)*/nullptr
  , /*decltype(_impl_.old_options_map_)*/nullptr
  , /*decltype(_impl_.new_hierarchical_cell_diff_map_)*/nullptr
  , /*decltype(_impl_.old_hierarchical_cell_diff_map_)*/nullptr
  , /*decltype(_impl_.formula_rewrite_command_for_undo_)*/nullptr
  , /*decltype(_impl_.new_body_uid_tract_)*/nullptr
  , /*decltype(_impl_.old_body_uid_tract_)*/nullptr
  , /*decltype(_impl_.old_target_pivot_refresh_uid_)*/nullptr
  , /*decltype(_impl_.new_target_pivot_row_column_rule_change_uid_)*/nullptr
  , /*decltype(_impl_.old_target_pivot_row_column_rule_change_uid_)*/nullptr
  , /*decltype(_impl_.new_target_pivot_aggregate_rule_change_uid_)*/nullptr
  , /*decltype(_impl_.old_target_pivot_aggregate_rule_change_uid_)*/nullptr
  , /*decltype(_impl_.new_filter_set_)*/nullptr
  , /*decltype(_impl_.old_filter_set_)*/nullptr
  , /*decltype(_impl_.new_pivot_refresh_timestamp_)*/0
  , /*decltype(_impl_.old_pivot_refresh_timestamp_)*/0
  , /*decltype(_impl_.is_order_finalized_)*/false
  , /*decltype(_impl_.use_small_table_limits_)*/false
  , /*decltype(_impl_.setting_filters_enabled_)*/0
  , /*decltype(_impl_.undo_setting_filters_enabled_)*/0
  , /*decltype(_impl_.new_flattening_dimension_)*/-1
  , /*decltype(_impl_.old_flattening_dimension_)*/-1} {}
struct CommandPivotSetPivotRulesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandPivotSetPivotRulesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandPivotSetPivotRulesArchiveDefaultTypeInternal() {}
  union {
    CommandPivotSetPivotRulesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandPivotSetPivotRulesArchiveDefaultTypeInternal _CommandPivotSetPivotRulesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandPivotSetGroupingColumnOptionsArchive::CommandPivotSetGroupingColumnOptionsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.grouping_column_uid_)*/nullptr
  , /*decltype(_impl_.non_sorting_flag_)*/0u
  , /*decltype(_impl_.bool_value_)*/false
  , /*decltype(_impl_.undo_bool_value_)*/false} {}
struct CommandPivotSetGroupingColumnOptionsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandPivotSetGroupingColumnOptionsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandPivotSetGroupingColumnOptionsArchiveDefaultTypeInternal() {}
  union {
    CommandPivotSetGroupingColumnOptionsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandPivotSetGroupingColumnOptionsArchiveDefaultTypeInternal _CommandPivotSetGroupingColumnOptionsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandPivotHideShowGrandTotalsArchive::CommandPivotHideShowGrandTotalsArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.is_hiding_)*/false
  , /*decltype(_impl_.undo_is_hiding_)*/false
  , /*decltype(_impl_.dimension_)*/-1} {}
struct CommandPivotHideShowGrandTotalsArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandPivotHideShowGrandTotalsArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandPivotHideShowGrandTotalsArchiveDefaultTypeInternal() {}
  union {
    CommandPivotHideShowGrandTotalsArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandPivotHideShowGrandTotalsArchiveDefaultTypeInternal _CommandPivotHideShowGrandTotalsArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandPivotSortArchive::CommandPivotSortArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.column_order_)*/{}
  , /*decltype(_impl_.undo_column_order_)*/{}
  , /*decltype(_impl_.row_order_)*/{}
  , /*decltype(_impl_.undo_row_order_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.target_pivot_row_column_rule_change_uid_)*/nullptr
  , /*decltype(_impl_.target_pivot_aggregate_rule_change_uid_)*/nullptr
  , /*decltype(_impl_.target_pivot_data_refresh_uid_)*/nullptr
  , /*decltype(_impl_.grouping_column_uid_)*/nullptr
  , /*decltype(_impl_.sorting_aggregate_rule_uid_)*/nullptr
  , /*decltype(_impl_.undo_sorting_aggregate_rule_uid_)*/nullptr
  , /*decltype(_impl_.sorting_flags_)*/0u
  , /*decltype(_impl_.undo_sorting_flags_)*/0u
  , /*decltype(_impl_.is_order_finalized_)*/false
  , /*decltype(_impl_.dimension_)*/-1} {}
struct CommandPivotSortArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandPivotSortArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandPivotSortArchiveDefaultTypeInternal() {}
  union {
    CommandPivotSortArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandPivotSortArchiveDefaultTypeInternal _CommandPivotSortArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandRewriteTrackedReferencesArchive::CommandRewriteTrackedReferencesArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr} {}
struct CommandRewriteTrackedReferencesArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandRewriteTrackedReferencesArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandRewriteTrackedReferencesArchiveDefaultTypeInternal() {}
  union {
    CommandRewriteTrackedReferencesArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandRewriteTrackedReferencesArchiveDefaultTypeInternal _CommandRewriteTrackedReferencesArchive_default_instance_;
PROTOBUF_CONSTEXPR CommandExtendTableIDHistoryArchive::CommandExtendTableIDHistoryArchive(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.super_)*/nullptr
  , /*decltype(_impl_.rewrite_spec_)*/nullptr
  , /*decltype(_impl_.table_uid_history_rollback_)*/nullptr} {}
struct CommandExtendTableIDHistoryArchiveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommandExtendTableIDHistoryArchiveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommandExtendTableIDHistoryArchiveDefaultTypeInternal() {}
  union {
    CommandExtendTableIDHistoryArchive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommandExtendTableIDHistoryArchiveDefaultTypeInternal _CommandExtendTableIDHistoryArchive_default_instance_;
}  // namespace TST
static ::_pb::Metadata file_level_metadata_TSTCommandArchives_2eproto[109];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_TSTCommandArchives_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_TSTCommandArchives_2eproto = nullptr;

const uint32_t TableStruct_TSTCommandArchives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _impl_.table_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _impl_.commandname_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _impl_.default_cell_styles_container_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _impl_.random_seed_lo_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _impl_.random_seed_hi_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _impl_.is_inverse_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _impl_.old_timestamp_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandArchive, _impl_.old_random_seed_),
  1,
  2,
  0,
  3,
  4,
  5,
  6,
  9,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, _impl_.cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, _impl_.rollback_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, _impl_.custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellContentsArchive, _impl_.action_string_),
  1,
  2,
  3,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, _impl_.cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, _impl_.should_allow_merge_fragments_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, _impl_.inverse_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellDiffMapArchive, _impl_.custom_format_keys_),
  0,
  1,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _impl_.redo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _impl_.undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _impl_.undo_formula_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _impl_.custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _impl_.merge_owner_rollback_index_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _impl_.is_from_paste_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellMapArchive, _impl_.formula_rewrite_commands_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _impl_.redo_concurrent_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _impl_.undo_concurrent_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _impl_.undo_formula_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _impl_.custom_format_keys_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _impl_.merge_owner_rollback_index_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _impl_.is_from_paste_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyConcurrentCellMapArchive, _impl_.formula_rewrite_commands_),
  0,
  1,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, _impl_.new_freeze_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeFreezeHeaderStateArchive, _impl_.prev_freeze_state_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, _impl_.invalidate_comments_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, _impl_.invalidate_comments_valid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, _impl_.cell_uid_region_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, _impl_.summary_cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellsArchive, _impl_.inverse_concurrent_cell_map_),
  0,
  4,
  5,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellContentsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellContentsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellContentsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellContentsArchive, _impl_.cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandDeleteCellContentsArchive, _impl_.inverse_cell_diff_map_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, _impl_.cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, _impl_.inverse_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, _impl_.whole_format_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMutateCellFormatArchive, _impl_.intended_format_type_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetAutomaticDurationUnitsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetAutomaticDurationUnitsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetAutomaticDurationUnitsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetAutomaticDurationUnitsArchive, _impl_.automatic_units_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationStyleArchive, _impl_.duration_style_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationUnitSmallestLargestArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationUnitSmallestLargestArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationUnitSmallestLargestArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationUnitSmallestLargestArchive, _impl_.smallest_unit_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDurationUnitSmallestLargestArchive, _impl_.largest_unit_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceCustomFormatArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceCustomFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceCustomFormatArchive, _impl_.undo_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceCustomFormatArchive, _impl_.commit_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceCustomFormatArchive, _impl_.super_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.dst_table_info_id_path_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.src_uid_range_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.dst_uid_range_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.table_dimension_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.src_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.dst_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.dst_cell_styles_container_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.src_undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.dst_undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.dst_merge_owner_rollback_index_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.formula_rewrite_commands_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.merge_action_to_restore_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.comment_cell_uids_to_restore_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveCellsArchive, _impl_.comment_storages_to_restore_),
  0,
  1,
  2,
  3,
  12,
  4,
  5,
  6,
  7,
  8,
  11,
  ~0u,
  9,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, _impl_.hiding_action_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, _impl_.cell_style_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, _impl_.text_style_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowMetadataArchive, _impl_.uuid_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.bundle_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.concurrent_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.categories_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.undo_commands_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.undo_concurrent_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.undo_categories_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.group_sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.should_edge_expand_formula_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.was_categorized_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.undo_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.src_row_column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.opp_row_column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInsertColumnsOrRowsArchive, _impl_.undo_bundle_),
  0,
  1,
  9,
  10,
  2,
  11,
  12,
  3,
  8,
  4,
  13,
  14,
  ~0u,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _impl_.is_row_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _impl_.view_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _impl_.view_type_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _impl_.base_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _impl_.base_type_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _impl_.category_order_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _impl_.category_order_type_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowBundleArchive, _impl_.metadata_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.bundle_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.concurrent_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.categories_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.undo_concurrent_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.undo_categories_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.undo_filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.undo_sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.undo_group_sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.formula_rewrite_command_for_undo_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.inverse_should_edge_expand_formula_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveColumnsOrRowsArchive, _impl_.undo_order_),
  0,
  1,
  6,
  7,
  8,
  9,
  2,
  3,
  5,
  4,
  10,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRowColumnRangeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRowColumnRangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRowColumnRangeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRowColumnRangeArchive, _impl_.uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRowColumnRangeArchive, _impl_.is_row_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandResizeColumnOrRowArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandResizeColumnOrRowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandResizeColumnOrRowArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandResizeColumnOrRowArchive, _impl_.sizes_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandResizeColumnOrRowArchive, _impl_.sizes_for_undo_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, _impl_.category_row_sizes_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, _impl_.category_row_sizes_for_undo_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, _impl_.category_label_row_sizes_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, _impl_.category_label_row_sizes_for_undo_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, _impl_.category_column_size_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryResizeColumnOrRowArchive, _impl_.category_column_size_for_undo_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, _impl_.hide_show_action_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, _impl_.hiding_action_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandHideShowArchive, _impl_.hide_show_action_for_undo_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _impl_.coalesced_textcommand_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _impl_.postflightcommand_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _impl_.grouped_with_postflight_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _impl_.editing_cell_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _impl_.editing_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _impl_.last_column_hit_by_tap_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _impl_.cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTextPreflightInsertCellArchive, _impl_.archived_initial_selection_path_),
  0,
  1,
  2,
  7,
  3,
  4,
  8,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, _impl_.childcommandundo_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, _impl_.editing_cell_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, _impl_.new_cell_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, _impl_.editing_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, _impl_.last_column_hit_by_tap_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPostflightSetCellArchive, _impl_.cell_uid_),
  0,
  1,
  2,
  3,
  4,
  6,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, _impl_.table_area_transition_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, _impl_.cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, _impl_.undo_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, _impl_.undo_commands_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChangeTableAreaForColumnOrRowArchive, _impl_.action_string_),
  1,
  5,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, _impl_.annotations_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, _impl_.formulas_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, _impl_.formula_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, _impl_.inverse_formulas_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, _impl_.inverse_formula_indexes_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetPencilAnnotationsArchive, _impl_.rollback_index_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _impl_.newtablename_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _impl_.oldtablename_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _impl_.newstyle_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _impl_.oldstyle_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _impl_.old_shape_style_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _impl_.new_shape_style_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _impl_.old_table_name_border_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameArchive, _impl_.new_table_name_border_enabled_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameEnabledArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameEnabledArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameEnabledArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameEnabledArchive, _impl_.table_name_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameEnabledArchive, _impl_.prev_table_name_enabled_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _impl_.is_increase_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _impl_.font_size_diff_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _impl_.font_size_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _impl_.inverse_font_size_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _impl_.cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _impl_.inverse_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontSizeArchive, _impl_.styles_container_refresh_done_),
  0,
  4,
  3,
  ~0u,
  ~0u,
  1,
  2,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _impl_.font_name_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _impl_.preserve_face_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _impl_.previous_font_name_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _impl_.previous_table_style_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _impl_.previous_text_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _impl_.cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableFontNameArchive, _impl_.inverse_cell_diff_map_),
  2,
  0,
  6,
  1,
  3,
  ~0u,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameHeightArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameHeightArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameHeightArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameHeightArchive, _impl_.old_table_name_height_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTableNameHeightArchive, _impl_.new_table_name_height_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNowArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNowArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNowArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, _impl_.from_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, _impl_.prev_from_table_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, _impl_.was_cut_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, _impl_.prev_was_cut_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, _impl_.from_group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetWasCutArchive, _impl_.prev_from_group_by_uid_),
  0,
  1,
  2,
  5,
  6,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, _impl_.format_properties_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, _impl_.selection_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, _impl_.undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, _impl_.redo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleCellsArchive, _impl_.text_undo_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, _impl_.format_properties_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, _impl_.old_style_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandStyleTableArchive, _impl_.new_style_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, _impl_.repeating_header_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRepeatingHeaderEnabledArchive, _impl_.prev_repeating_header_enabled_),
  1,
  3,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, _impl_.new_filters_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, _impl_.old_filters_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFiltersEnabledArchive, _impl_.rollback_uid_list_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, _impl_.preset_index_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, _impl_.table_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandAddTableStylePresetArchive, _impl_.send_notification_),
  0,
  2,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, _impl_.removed_table_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, _impl_.preset_id_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRemoveTableStylePresetArchive, _impl_.preset_index_in_theme_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, _impl_.theme_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, _impl_.old_table_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandReplaceTableStylePresetArchive, _impl_.new_table_styles_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.preset_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.undo_preset_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.undo_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.undo_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.apply_preset_option_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.table_clears_all_flag_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.undo_table_clears_all_flag_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.row_col_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.undo_row_col_styles_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyTableStylePresetArchive, _impl_.change_prop_map_wrapper_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  8,
  9,
  10,
  ~0u,
  ~0u,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseArchive, _impl_.base_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBasePlacesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBasePlacesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBasePlacesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBasePlacesArchive, _impl_.base_places_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseUseMinusSignArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseUseMinusSignArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseUseMinusSignArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetBaseUseMinusSignArchive, _impl_.base_use_minus_sign_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetCurrencyCodeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetCurrencyCodeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetCurrencyCodeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetCurrencyCodeArchive, _impl_.currency_code_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFractionAccuracyArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFractionAccuracyArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFractionAccuracyArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFractionAccuracyArchive, _impl_.fraction_accuracy_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNegativeNumberStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNegativeNumberStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNegativeNumberStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNegativeNumberStyleArchive, _impl_.negative_number_style_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNumberOfDecimalPlacesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNumberOfDecimalPlacesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNumberOfDecimalPlacesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetNumberOfDecimalPlacesArchive, _impl_.decimal_places_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDateTimeFormatArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDateTimeFormatArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDateTimeFormatArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDateTimeFormatArchive, _impl_.date_format_string_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetDateTimeFormatArchive, _impl_.time_format_string_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetShowThousandsSeparatorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetShowThousandsSeparatorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetShowThousandsSeparatorArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetShowThousandsSeparatorArchive, _impl_.show_thousands_separator_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetUseAccountingStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetUseAccountingStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetUseAccountingStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetUseAccountingStyleArchive, _impl_.use_accounting_style_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _impl_.minimum_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _impl_.maximum_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _impl_.increment_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _impl_.cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _impl_.cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _impl_.inverse_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetRangeControlMinMaxIncArchive, _impl_.is_first_commit_),
  0,
  4,
  5,
  6,
  1,
  2,
  3,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _impl_.dest_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _impl_.before_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _impl_.undo_dest_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _impl_.undo_before_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _impl_.uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _impl_.direction_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMoveColumnsOrRowsArchive, _impl_.formula_rewrite_command_),
  0,
  1,
  4,
  2,
  5,
  ~0u,
  6,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, _impl_.from_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, _impl_.to_row_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSortArchive, _impl_.formula_rewrite_command_),
  0,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.rewrite_type_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.table_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.cond_style_owner_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.group_by_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.is_inverse_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.column_or_row_uuids_info_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.aux_column_or_row_uuids_info_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.region_moved_info_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.region_info_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.rewrite_table_id_info_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.transposed_table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.merge_origin_moved_info_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.merge_source_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.group_node_info_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaRewriteSpecArchive, _impl_.groupby_change_),
  13,
  0,
  1,
  2,
  14,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, _impl_.rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, _impl_.formulas_to_rewrite_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFormulasForTransposeArchive, _impl_.warningset_map_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTableFormulasForRewriteSpecArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTableFormulasForRewriteSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTableFormulasForRewriteSpecArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTableFormulasForRewriteSpecArchive, _impl_.rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTableFormulasForRewriteSpecArchive, _impl_.formulas_to_rewrite_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteMergeFormulasArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteMergeFormulasArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteMergeFormulasArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteMergeFormulasArchive, _impl_.rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteMergeFormulasArchive, _impl_.formulas_to_rewrite_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteCategoryFormulasArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteCategoryFormulasArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteCategoryFormulasArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteCategoryFormulasArchive, _impl_.rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteCategoryFormulasArchive, _impl_.formulas_to_rewrite_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForTableResizeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForTableResizeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForTableResizeArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive, _impl_.filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive, _impl_.rewrite_spec_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, _impl_.rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, _impl_.formulas_to_rewrite_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive, _impl_.conditional_style_sets_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePivotOwnerFormulasArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePivotOwnerFormulasArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePivotOwnerFormulasArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePivotOwnerFormulasArchive, _impl_.rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePivotOwnerFormulasArchive, _impl_.formulas_to_rewrite_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, _impl_.cell_uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, _impl_.undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, _impl_.undo_formula_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, _impl_.merge_owner_rollback_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandMergeArchive, _impl_.commit_cell_map_),
  0,
  1,
  2,
  3,
  5,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::CommandInverseMergeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInverseMergeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandInverseMergeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandInverseMergeArchive, _impl_.merge_source_cell_uid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, _impl_.unmerge_uid_ranges_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, _impl_.undo_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandUnmergeArchive, _impl_.undo_formula_rewrite_command_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, _impl_.table_id_mapper_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, _impl_.formula_rewrite_command_for_undo_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandChooseTableIdRemapperArchive, _impl_.apply_and_clear_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.new_enabled_changing_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.old_enabled_changing_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.new_grouping_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.old_grouping_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.restore_base_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.base_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.undo_restore_base_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.undo_base_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.restore_view_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.view_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.undo_restore_view_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.undo_view_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.collapse_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.undo_collapse_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.summary_change_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.undo_summary_change_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.new_column_aggregates_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.old_column_aggregates_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.undo_set_enabled_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.undo_set_columns_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.force_restore_all_states_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.undo_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetGroupingColumnsArchive, _impl_.undo_set_group_sort_order_command_),
  0,
  12,
  13,
  1,
  2,
  14,
  ~0u,
  15,
  ~0u,
  16,
  ~0u,
  17,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  18,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _impl_.undoselectionvalid_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _impl_.undoselectionstart_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _impl_.undoselectionlength_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _impl_.undoactivetoken_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _impl_.redoselectionvalid_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _impl_.redoselectionstart_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _impl_.redoselectionlength_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandGroupArchive, _impl_.redoactivetoken_),
  0,
  3,
  1,
  2,
  5,
  4,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandSelectionBehaviorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandSelectionBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandSelectionBehaviorArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandSelectionBehaviorArchive, _impl_.undoactivetoken_),
  PROTOBUF_FIELD_OFFSET(::TST::FormulaEditingCommandSelectionBehaviorArchive, _impl_.redoactivetoken_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, _impl_.table_info_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, _impl_.last_column_uid_hit_by_tap_),
  PROTOBUF_FIELD_OFFSET(::TST::TableCommandSelectionBehaviorArchive, _impl_.invalidate_comments_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, _impl_.cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, _impl_.old_comment_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, _impl_.new_comment_storage_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, _impl_.forward_variant_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandApplyCellCommentArchive, _impl_.inverse_variant_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFormulaTokenizationArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFormulaTokenizationArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFormulaTokenizationArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFormulaTokenizationArchive, _impl_.tokenization_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, _impl_.old_filter_set_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, _impl_.new_filter_set_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetTypeArchive, _impl_.rollback_uid_list_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStyleArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStyleArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStyleArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStyleArchive, _impl_.cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStyleArchive, _impl_.inverse_cell_diff_map_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, _impl_.cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, _impl_.cell_was_rich_text_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetTextStylePropertiesArchive, _impl_.inverse_cell_diff_map_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandJustForNotifyingArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandJustForNotifyingArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandJustForNotifyingArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandJustForNotifyingArchive, _impl_.change_descriptor_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, _impl_.storage_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, _impl_.language_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, _impl_.range_location_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, _impl_.range_length_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStorageLanguageArchive, _impl_.undo_transaction_),
  1,
  2,
  0,
  4,
  5,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetSortOrderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetSortOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetSortOrderArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetSortOrderArchive, _impl_.old_sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetSortOrderArchive, _impl_.new_sort_order_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetGroupSortOrderArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetGroupSortOrderArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetGroupSortOrderArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetGroupSortOrderArchive, _impl_.old_group_sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetGroupSortOrderArchive, _impl_.new_group_sort_order_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForTableResizeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForTableResizeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForTableResizeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForTableResizeArchive, _impl_.old_sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForTableResizeArchive, _impl_.new_sort_order_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, _impl_.rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, _impl_.old_sort_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteSortOrderForRewriteSpecArchive, _impl_.new_sort_order_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, _impl_.new_filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, _impl_.old_filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetFilterSetArchive, _impl_.rollback_uid_list_),
  0,
  1,
  2,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowRestoreDataArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowRestoreDataArchive, _impl_.uid_list_),
  PROTOBUF_FIELD_OFFSET(::TST::ColumnRowRestoreDataArchive, _impl_.metadatas_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.original_table_range_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.original_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.original_footer_row_count_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.original_column_widths_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.original_row_heights_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.ineligible_merge_list_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.transposed_cell_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.undo_formula_rewrite_command_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.rich_text_subcommands_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.column_restore_data_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandTransposeTableArchive, _impl_.row_restore_data_),
  0,
  1,
  2,
  8,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStructuredTextImportRecordArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStructuredTextImportRecordArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStructuredTextImportRecordArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStructuredTextImportRecordArchive, _impl_.new_import_record_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandSetStructuredTextImportRecordArchive, _impl_.old_import_record_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, _impl_.is_collapsing_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, _impl_.grouping_columns_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, _impl_.collapse_state_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryCollapseExpandGroupArchive, _impl_.undo_collapse_state_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, _impl_.aggregate_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, _impl_.undo_aggregate_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, _impl_.column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryChangeSummaryAggregateType, _impl_.group_level_),
  0,
  2,
  3,
  1,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, _impl_.group_level_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, _impl_.label_row_visibility_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategorySetLabelRowVisibility, _impl_.undo_label_row_visibility_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, _impl_.group_node_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, _impl_.undo_group_node_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, _impl_.group_value_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, _impl_.undo_group_value_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryWillChangeGroupValue, _impl_.rewrite_command_for_undo_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::TST::IdempotentSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::IdempotentSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::IdempotentSelectionTransformerArchive, _impl_.archived_selection_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::WPSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::WPSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::WPSelectionTransformerArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::WPSelectionTransformerArchive, _impl_.archived_selection_),
  PROTOBUF_FIELD_OFFSET(::TST::WPSelectionTransformerArchive, _impl_.origin_cell_uid_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::TableSubSelectionTransformerBaseArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableSubSelectionTransformerBaseArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableSubSelectionTransformerBaseArchive, _impl_.table_info_id_path_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::TableNameSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::TableNameSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::TableNameSelectionTransformerArchive, _impl_.super_),
  0,
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, _impl_.cell_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, _impl_.origin_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::ControlCellSelectionTransformerArchive, _impl_.origin_cell_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, _impl_.cell_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, _impl_.origin_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::StockCellSelectionTransformerArchive, _impl_.origin_cell_id_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, _impl_.cell_uids_),
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, _impl_.origin_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, _impl_.anchor_cell_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::RegionSelectionTransformerArchive, _impl_.cursor_cell_uid_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionTransformerArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::StrokeSelectionTransformerArchive, _impl_.archived_selection_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::RowColumnSelectionTransformerArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::RowColumnSelectionTransformerArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::RowColumnSelectionTransformerArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::RowColumnSelectionTransformerArchive, _impl_.selection_type_),
  PROTOBUF_FIELD_OFFSET(::TST::RowColumnSelectionTransformerArchive, _impl_.row_col_uids_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, _impl_.action_type_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, _impl_.category_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, _impl_.undo_category_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, _impl_.cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, _impl_.undo_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandCategoryMoveRowsArchive, _impl_.grouping_columns_),
  0,
  4,
  ~0u,
  ~0u,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive, _impl_.group_by_change_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive, _impl_.collapsed_state_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, _impl_.annotation_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, _impl_.rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, _impl_.formulas_to_rewrite_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewritePencilAnnotationFormulasArchive, _impl_.annotations_for_undo_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_target_pivot_refresh_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_row_groupings_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_row_groupings_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_column_groupings_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_column_groupings_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_aggregates_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_aggregates_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_flattening_dimension_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_flattening_dimension_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_pivot_data_model_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_pivot_data_model_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_pivot_refresh_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_pivot_refresh_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_pivot_refresh_timestamp_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_pivot_refresh_timestamp_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_options_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_options_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_view_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_view_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_view_column_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_view_column_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_collapsed_row_groups_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_collapsed_row_groups_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_collapsed_column_groups_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_collapsed_column_groups_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_hierarchical_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_hierarchical_cell_diff_map_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.formula_rewrite_command_for_undo_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_body_uid_tract_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_body_uid_tract_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_target_pivot_refresh_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_target_pivot_row_column_rule_change_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_target_pivot_row_column_rule_change_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_target_pivot_aggregate_rule_change_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_target_pivot_aggregate_rule_change_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.is_order_finalized_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.new_filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.old_filter_set_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.use_small_table_limits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.setting_filters_enabled_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetPivotRulesArchive, _impl_.undo_setting_filters_enabled_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  32,
  33,
  8,
  9,
  10,
  11,
  26,
  27,
  12,
  13,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  28,
  24,
  25,
  29,
  30,
  31,
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetGroupingColumnOptionsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetGroupingColumnOptionsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetGroupingColumnOptionsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetGroupingColumnOptionsArchive, _impl_.grouping_column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetGroupingColumnOptionsArchive, _impl_.non_sorting_flag_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetGroupingColumnOptionsArchive, _impl_.bool_value_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSetGroupingColumnOptionsArchive, _impl_.undo_bool_value_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotHideShowGrandTotalsArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotHideShowGrandTotalsArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotHideShowGrandTotalsArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotHideShowGrandTotalsArchive, _impl_.dimension_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotHideShowGrandTotalsArchive, _impl_.is_hiding_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotHideShowGrandTotalsArchive, _impl_.undo_is_hiding_),
  0,
  3,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.dimension_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.column_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.undo_column_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.undo_row_order_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.target_pivot_row_column_rule_change_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.target_pivot_aggregate_rule_change_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.target_pivot_data_refresh_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.grouping_column_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.sorting_flags_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.undo_sorting_flags_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.sorting_aggregate_rule_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.undo_sorting_aggregate_rule_uid_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandPivotSortArchive, _impl_.is_order_finalized_),
  0,
  10,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  2,
  3,
  4,
  7,
  8,
  5,
  6,
  9,
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTrackedReferencesArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTrackedReferencesArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTrackedReferencesArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandRewriteTrackedReferencesArchive, _impl_.rewrite_spec_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TST::CommandExtendTableIDHistoryArchive, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandExtendTableIDHistoryArchive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TST::CommandExtendTableIDHistoryArchive, _impl_.super_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandExtendTableIDHistoryArchive, _impl_.rewrite_spec_),
  PROTOBUF_FIELD_OFFSET(::TST::CommandExtendTableIDHistoryArchive, _impl_.table_uid_history_rollback_),
  0,
  1,
  2,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 16, -1, sizeof(::TST::TableCommandArchive)},
  { 26, 37, -1, sizeof(::TST::CommandApplyCellContentsArchive)},
  { 42, 53, -1, sizeof(::TST::CommandApplyCellDiffMapArchive)},
  { 58, 72, -1, sizeof(::TST::CommandApplyCellMapArchive)},
  { 80, 94, -1, sizeof(::TST::CommandApplyConcurrentCellMapArchive)},
  { 102, 112, -1, sizeof(::TST::CommandChangeFreezeHeaderStateArchive)},
  { 116, 128, -1, sizeof(::TST::CommandDeleteCellsArchive)},
  { 134, 143, -1, sizeof(::TST::CommandDeleteCellContentsArchive)},
  { 146, 157, -1, sizeof(::TST::CommandMutateCellFormatArchive)},
  { 162, 170, -1, sizeof(::TST::CommandSetAutomaticDurationUnitsArchive)},
  { 172, 180, -1, sizeof(::TST::CommandSetDurationStyleArchive)},
  { 182, 191, -1, sizeof(::TST::CommandSetDurationUnitSmallestLargestArchive)},
  { 194, 203, -1, sizeof(::TST::CommandReplaceCustomFormatArchive)},
  { 206, 227, -1, sizeof(::TST::CommandMoveCellsArchive)},
  { 242, 253, -1, sizeof(::TST::ColumnRowMetadataArchive)},
  { 258, 280, -1, sizeof(::TST::CommandInsertColumnsOrRowsArchive)},
  { 296, 310, -1, sizeof(::TST::ColumnRowBundleArchive)},
  { 318, 336, -1, sizeof(::TST::CommandRemoveColumnsOrRowsArchive)},
  { 348, 357, -1, sizeof(::TST::CommandRowColumnRangeArchive)},
  { 360, 369, -1, sizeof(::TST::CommandResizeColumnOrRowArchive)},
  { 372, 385, -1, sizeof(::TST::CommandCategoryResizeColumnOrRowArchive)},
  { 392, 402, -1, sizeof(::TST::CommandHideShowArchive)},
  { 406, 421, -1, sizeof(::TST::CommandTextPreflightInsertCellArchive)},
  { 430, 443, -1, sizeof(::TST::CommandPostflightSetCellArchive)},
  { 450, 462, -1, sizeof(::TST::CommandChangeTableAreaForColumnOrRowArchive)},
  { 468, 481, -1, sizeof(::TST::CommandSetPencilAnnotationsArchive)},
  { 488, 503, -1, sizeof(::TST::CommandSetTableNameArchive)},
  { 512, 521, -1, sizeof(::TST::CommandSetTableNameEnabledArchive)},
  { 524, 538, -1, sizeof(::TST::CommandSetTableFontSizeArchive)},
  { 546, 560, -1, sizeof(::TST::CommandSetTableFontNameArchive)},
  { 568, 577, -1, sizeof(::TST::CommandSetTableNameHeightArchive)},
  { 580, 587, -1, sizeof(::TST::CommandSetNowArchive)},
  { 588, 601, -1, sizeof(::TST::CommandSetWasCutArchive)},
  { 608, 620, -1, sizeof(::TST::CommandStyleCellsArchive)},
  { 626, 636, -1, sizeof(::TST::CommandStyleTableArchive)},
  { 640, 650, -1, sizeof(::TST::CommandSetRepeatingHeaderEnabledArchive)},
  { 654, 664, -1, sizeof(::TST::CommandSetFiltersEnabledArchive)},
  { 668, 678, -1, sizeof(::TST::CommandAddTableStylePresetArchive)},
  { 682, 693, -1, sizeof(::TST::CommandRemoveTableStylePresetArchive)},
  { 698, 708, -1, sizeof(::TST::CommandReplaceTableStylePresetArchive)},
  { 712, 731, -1, sizeof(::TST::CommandApplyTableStylePresetArchive)},
  { 744, 752, -1, sizeof(::TST::CommandSetBaseArchive)},
  { 754, 762, -1, sizeof(::TST::CommandSetBasePlacesArchive)},
  { 764, 772, -1, sizeof(::TST::CommandSetBaseUseMinusSignArchive)},
  { 774, 782, -1, sizeof(::TST::CommandSetCurrencyCodeArchive)},
  { 784, 792, -1, sizeof(::TST::CommandSetFractionAccuracyArchive)},
  { 794, 802, -1, sizeof(::TST::CommandSetNegativeNumberStyleArchive)},
  { 804, 812, -1, sizeof(::TST::CommandSetNumberOfDecimalPlacesArchive)},
  { 814, 823, -1, sizeof(::TST::CommandSetDateTimeFormatArchive)},
  { 826, 834, -1, sizeof(::TST::CommandSetShowThousandsSeparatorArchive)},
  { 836, 844, -1, sizeof(::TST::CommandSetUseAccountingStyleArchive)},
  { 846, 860, -1, sizeof(::TST::CommandSetRangeControlMinMaxIncArchive)},
  { 868, 882, -1, sizeof(::TST::CommandMoveColumnsOrRowsArchive)},
  { 890, 900, -1, sizeof(::TST::CommandSortArchive)},
  { 904, 925, -1, sizeof(::TST::FormulaRewriteSpecArchive)},
  { 940, 950, -1, sizeof(::TST::CommandRewriteFormulasForTransposeArchive)},
  { 954, 963, -1, sizeof(::TST::CommandRewriteTableFormulasForRewriteSpecArchive)},
  { 966, 975, -1, sizeof(::TST::CommandRewriteMergeFormulasArchive)},
  { 978, 987, -1, sizeof(::TST::CommandRewriteCategoryFormulasArchive)},
  { 990, 997, -1, sizeof(::TST::CommandRewriteFilterFormulasForTableResizeArchive)},
  { 998, 1007, -1, sizeof(::TST::CommandRewriteFilterFormulasForRewriteSpecArchive)},
  { 1010, 1020, -1, sizeof(::TST::CommandRewriteConditionalStylesForRewriteSpecArchive)},
  { 1024, 1033, -1, sizeof(::TST::CommandRewritePivotOwnerFormulasArchive)},
  { 1036, 1048, -1, sizeof(::TST::CommandMergeArchive)},
  { 1054, 1062, -1, sizeof(::TST::CommandInverseMergeArchive)},
  { 1064, 1074, -1, sizeof(::TST::CommandUnmergeArchive)},
  { 1078, 1088, -1, sizeof(::TST::CommandChooseTableIdRemapperArchive)},
  { 1092, 1123, -1, sizeof(::TST::CommandCategorySetGroupingColumnsArchive)},
  { 1148, 1163, -1, sizeof(::TST::FormulaEditingCommandGroupArchive)},
  { 1172, 1181, -1, sizeof(::TST::FormulaEditingCommandSelectionBehaviorArchive)},
  { 1184, 1194, -1, sizeof(::TST::TableCommandSelectionBehaviorArchive)},
  { 1198, 1210, -1, sizeof(::TST::CommandApplyCellCommentArchive)},
  { 1216, 1224, -1, sizeof(::TST::CommandSetFormulaTokenizationArchive)},
  { 1226, 1236, -1, sizeof(::TST::CommandSetFilterSetTypeArchive)},
  { 1240, 1249, -1, sizeof(::TST::CommandSetTextStyleArchive)},
  { 1252, 1262, -1, sizeof(::TST::CommandSetTextStylePropertiesArchive)},
  { 1266, 1274, -1, sizeof(::TST::CommandJustForNotifyingArchive)},
  { 1276, 1288, -1, sizeof(::TST::CommandSetStorageLanguageArchive)},
  { 1294, 1303, -1, sizeof(::TST::CommandSetSortOrderArchive)},
  { 1306, 1315, -1, sizeof(::TST::CommandSetGroupSortOrderArchive)},
  { 1318, 1327, -1, sizeof(::TST::CommandRewriteSortOrderForTableResizeArchive)},
  { 1330, 1340, -1, sizeof(::TST::CommandRewriteSortOrderForRewriteSpecArchive)},
  { 1344, 1354, -1, sizeof(::TST::CommandSetFilterSetArchive)},
  { 1358, -1, -1, sizeof(::TST::ColumnRowRestoreDataArchive)},
  { 1366, 1384, -1, sizeof(::TST::CommandTransposeTableArchive)},
  { 1396, 1405, -1, sizeof(::TST::CommandSetStructuredTextImportRecordArchive)},
  { 1408, 1419, -1, sizeof(::TST::CommandCategoryCollapseExpandGroupArchive)},
  { 1424, 1435, -1, sizeof(::TST::CommandCategoryChangeSummaryAggregateType)},
  { 1440, 1450, -1, sizeof(::TST::CommandCategorySetLabelRowVisibility)},
  { 1454, 1466, -1, sizeof(::TST::CommandCategoryWillChangeGroupValue)},
  { 1472, 1479, -1, sizeof(::TST::IdempotentSelectionTransformerArchive)},
  { 1480, 1489, -1, sizeof(::TST::WPSelectionTransformerArchive)},
  { 1492, 1499, -1, sizeof(::TST::TableSubSelectionTransformerBaseArchive)},
  { 1500, 1507, -1, sizeof(::TST::TableNameSelectionTransformerArchive)},
  { 1508, 1518, -1, sizeof(::TST::ControlCellSelectionTransformerArchive)},
  { 1522, 1532, -1, sizeof(::TST::StockCellSelectionTransformerArchive)},
  { 1536, 1547, -1, sizeof(::TST::RegionSelectionTransformerArchive)},
  { 1552, 1560, -1, sizeof(::TST::StrokeSelectionTransformerArchive)},
  { 1562, 1571, -1, sizeof(::TST::RowColumnSelectionTransformerArchive)},
  { 1574, 1587, -1, sizeof(::TST::CommandCategoryMoveRowsArchive)},
  { 1594, 1603, -1, sizeof(::TST::CommandRewriteHiddenStatesForGroupByChangeArchive)},
  { 1606, 1614, -1, sizeof(::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair)},
  { 1616, 1626, -1, sizeof(::TST::CommandRewritePencilAnnotationFormulasArchive)},
  { 1630, 1678, -1, sizeof(::TST::CommandPivotSetPivotRulesArchive)},
  { 1720, 1731, -1, sizeof(::TST::CommandPivotSetGroupingColumnOptionsArchive)},
  { 1736, 1746, -1, sizeof(::TST::CommandPivotHideShowGrandTotalsArchive)},
  { 1750, 1771, -1, sizeof(::TST::CommandPivotSortArchive)},
  { 1786, 1794, -1, sizeof(::TST::CommandRewriteTrackedReferencesArchive)},
  { 1796, 1805, -1, sizeof(::TST::CommandExtendTableIDHistoryArchive)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::TST::_TableCommandArchive_default_instance_._instance,
  &::TST::_CommandApplyCellContentsArchive_default_instance_._instance,
  &::TST::_CommandApplyCellDiffMapArchive_default_instance_._instance,
  &::TST::_CommandApplyCellMapArchive_default_instance_._instance,
  &::TST::_CommandApplyConcurrentCellMapArchive_default_instance_._instance,
  &::TST::_CommandChangeFreezeHeaderStateArchive_default_instance_._instance,
  &::TST::_CommandDeleteCellsArchive_default_instance_._instance,
  &::TST::_CommandDeleteCellContentsArchive_default_instance_._instance,
  &::TST::_CommandMutateCellFormatArchive_default_instance_._instance,
  &::TST::_CommandSetAutomaticDurationUnitsArchive_default_instance_._instance,
  &::TST::_CommandSetDurationStyleArchive_default_instance_._instance,
  &::TST::_CommandSetDurationUnitSmallestLargestArchive_default_instance_._instance,
  &::TST::_CommandReplaceCustomFormatArchive_default_instance_._instance,
  &::TST::_CommandMoveCellsArchive_default_instance_._instance,
  &::TST::_ColumnRowMetadataArchive_default_instance_._instance,
  &::TST::_CommandInsertColumnsOrRowsArchive_default_instance_._instance,
  &::TST::_ColumnRowBundleArchive_default_instance_._instance,
  &::TST::_CommandRemoveColumnsOrRowsArchive_default_instance_._instance,
  &::TST::_CommandRowColumnRangeArchive_default_instance_._instance,
  &::TST::_CommandResizeColumnOrRowArchive_default_instance_._instance,
  &::TST::_CommandCategoryResizeColumnOrRowArchive_default_instance_._instance,
  &::TST::_CommandHideShowArchive_default_instance_._instance,
  &::TST::_CommandTextPreflightInsertCellArchive_default_instance_._instance,
  &::TST::_CommandPostflightSetCellArchive_default_instance_._instance,
  &::TST::_CommandChangeTableAreaForColumnOrRowArchive_default_instance_._instance,
  &::TST::_CommandSetPencilAnnotationsArchive_default_instance_._instance,
  &::TST::_CommandSetTableNameArchive_default_instance_._instance,
  &::TST::_CommandSetTableNameEnabledArchive_default_instance_._instance,
  &::TST::_CommandSetTableFontSizeArchive_default_instance_._instance,
  &::TST::_CommandSetTableFontNameArchive_default_instance_._instance,
  &::TST::_CommandSetTableNameHeightArchive_default_instance_._instance,
  &::TST::_CommandSetNowArchive_default_instance_._instance,
  &::TST::_CommandSetWasCutArchive_default_instance_._instance,
  &::TST::_CommandStyleCellsArchive_default_instance_._instance,
  &::TST::_CommandStyleTableArchive_default_instance_._instance,
  &::TST::_CommandSetRepeatingHeaderEnabledArchive_default_instance_._instance,
  &::TST::_CommandSetFiltersEnabledArchive_default_instance_._instance,
  &::TST::_CommandAddTableStylePresetArchive_default_instance_._instance,
  &::TST::_CommandRemoveTableStylePresetArchive_default_instance_._instance,
  &::TST::_CommandReplaceTableStylePresetArchive_default_instance_._instance,
  &::TST::_CommandApplyTableStylePresetArchive_default_instance_._instance,
  &::TST::_CommandSetBaseArchive_default_instance_._instance,
  &::TST::_CommandSetBasePlacesArchive_default_instance_._instance,
  &::TST::_CommandSetBaseUseMinusSignArchive_default_instance_._instance,
  &::TST::_CommandSetCurrencyCodeArchive_default_instance_._instance,
  &::TST::_CommandSetFractionAccuracyArchive_default_instance_._instance,
  &::TST::_CommandSetNegativeNumberStyleArchive_default_instance_._instance,
  &::TST::_CommandSetNumberOfDecimalPlacesArchive_default_instance_._instance,
  &::TST::_CommandSetDateTimeFormatArchive_default_instance_._instance,
  &::TST::_CommandSetShowThousandsSeparatorArchive_default_instance_._instance,
  &::TST::_CommandSetUseAccountingStyleArchive_default_instance_._instance,
  &::TST::_CommandSetRangeControlMinMaxIncArchive_default_instance_._instance,
  &::TST::_CommandMoveColumnsOrRowsArchive_default_instance_._instance,
  &::TST::_CommandSortArchive_default_instance_._instance,
  &::TST::_FormulaRewriteSpecArchive_default_instance_._instance,
  &::TST::_CommandRewriteFormulasForTransposeArchive_default_instance_._instance,
  &::TST::_CommandRewriteTableFormulasForRewriteSpecArchive_default_instance_._instance,
  &::TST::_CommandRewriteMergeFormulasArchive_default_instance_._instance,
  &::TST::_CommandRewriteCategoryFormulasArchive_default_instance_._instance,
  &::TST::_CommandRewriteFilterFormulasForTableResizeArchive_default_instance_._instance,
  &::TST::_CommandRewriteFilterFormulasForRewriteSpecArchive_default_instance_._instance,
  &::TST::_CommandRewriteConditionalStylesForRewriteSpecArchive_default_instance_._instance,
  &::TST::_CommandRewritePivotOwnerFormulasArchive_default_instance_._instance,
  &::TST::_CommandMergeArchive_default_instance_._instance,
  &::TST::_CommandInverseMergeArchive_default_instance_._instance,
  &::TST::_CommandUnmergeArchive_default_instance_._instance,
  &::TST::_CommandChooseTableIdRemapperArchive_default_instance_._instance,
  &::TST::_CommandCategorySetGroupingColumnsArchive_default_instance_._instance,
  &::TST::_FormulaEditingCommandGroupArchive_default_instance_._instance,
  &::TST::_FormulaEditingCommandSelectionBehaviorArchive_default_instance_._instance,
  &::TST::_TableCommandSelectionBehaviorArchive_default_instance_._instance,
  &::TST::_CommandApplyCellCommentArchive_default_instance_._instance,
  &::TST::_CommandSetFormulaTokenizationArchive_default_instance_._instance,
  &::TST::_CommandSetFilterSetTypeArchive_default_instance_._instance,
  &::TST::_CommandSetTextStyleArchive_default_instance_._instance,
  &::TST::_CommandSetTextStylePropertiesArchive_default_instance_._instance,
  &::TST::_CommandJustForNotifyingArchive_default_instance_._instance,
  &::TST::_CommandSetStorageLanguageArchive_default_instance_._instance,
  &::TST::_CommandSetSortOrderArchive_default_instance_._instance,
  &::TST::_CommandSetGroupSortOrderArchive_default_instance_._instance,
  &::TST::_CommandRewriteSortOrderForTableResizeArchive_default_instance_._instance,
  &::TST::_CommandRewriteSortOrderForRewriteSpecArchive_default_instance_._instance,
  &::TST::_CommandSetFilterSetArchive_default_instance_._instance,
  &::TST::_ColumnRowRestoreDataArchive_default_instance_._instance,
  &::TST::_CommandTransposeTableArchive_default_instance_._instance,
  &::TST::_CommandSetStructuredTextImportRecordArchive_default_instance_._instance,
  &::TST::_CommandCategoryCollapseExpandGroupArchive_default_instance_._instance,
  &::TST::_CommandCategoryChangeSummaryAggregateType_default_instance_._instance,
  &::TST::_CommandCategorySetLabelRowVisibility_default_instance_._instance,
  &::TST::_CommandCategoryWillChangeGroupValue_default_instance_._instance,
  &::TST::_IdempotentSelectionTransformerArchive_default_instance_._instance,
  &::TST::_WPSelectionTransformerArchive_default_instance_._instance,
  &::TST::_TableSubSelectionTransformerBaseArchive_default_instance_._instance,
  &::TST::_TableNameSelectionTransformerArchive_default_instance_._instance,
  &::TST::_ControlCellSelectionTransformerArchive_default_instance_._instance,
  &::TST::_StockCellSelectionTransformerArchive_default_instance_._instance,
  &::TST::_RegionSelectionTransformerArchive_default_instance_._instance,
  &::TST::_StrokeSelectionTransformerArchive_default_instance_._instance,
  &::TST::_RowColumnSelectionTransformerArchive_default_instance_._instance,
  &::TST::_CommandCategoryMoveRowsArchive_default_instance_._instance,
  &::TST::_CommandRewriteHiddenStatesForGroupByChangeArchive_default_instance_._instance,
  &::TST::_CommandRewritePencilAnnotationFormulasArchive_AnnotationPair_default_instance_._instance,
  &::TST::_CommandRewritePencilAnnotationFormulasArchive_default_instance_._instance,
  &::TST::_CommandPivotSetPivotRulesArchive_default_instance_._instance,
  &::TST::_CommandPivotSetGroupingColumnOptionsArchive_default_instance_._instance,
  &::TST::_CommandPivotHideShowGrandTotalsArchive_default_instance_._instance,
  &::TST::_CommandPivotSortArchive_default_instance_._instance,
  &::TST::_CommandRewriteTrackedReferencesArchive_default_instance_._instance,
  &::TST::_CommandExtendTableIDHistoryArchive_default_instance_._instance,
};

const char descriptor_table_protodef_TSTCommandArchives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030TSTCommandArchives.proto\022\003TST\032\021TSPMess"
  "ages.proto\032\021TSDArchives.proto\032\030TSDComman"
  "dArchives.proto\032\021TSKArchives.proto\032\021TSSA"
  "rchives.proto\032\022TSCEArchives.proto\032\022TSWPA"
  "rchives.proto\032\021TSTArchives.proto\032\025TSTArc"
  "hives.sos.proto\"\267\002\n\023TableCommandArchive\022"
  "\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022)\n\022t"
  "able_info_id_path\030\002 \002(\0132\r.TSP.UUIDPath\022\023"
  "\n\013commandname\030\003 \001(\t\0225\n\035default_cell_styl"
  "es_container\030\004 \001(\0132\016.TSP.Reference\022\021\n\tti"
  "mestamp\030\005 \001(\001\022\026\n\016random_seed_lo\030\006 \001(\r\022\026\n"
  "\016random_seed_hi\030\007 \001(\r\022\022\n\nis_inverse\030\010 \001("
  "\010\022\025\n\rold_timestamp\030\t \001(\001\022\027\n\017old_random_s"
  "eed\030\n \001(\004\"\337\001\n\037CommandApplyCellContentsAr"
  "chive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandA"
  "rchive\022%\n\rcell_diff_map\030\002 \002(\0132\016.TSP.Refe"
  "rence\022.\n\026rollback_cell_diff_map\030\003 \001(\0132\016."
  "TSP.Reference\022%\n\022custom_format_keys\030\004 \003("
  "\0132\t.TSP.UUID\022\025\n\raction_string\030\005 \001(\t\"\354\001\n\036"
  "CommandApplyCellDiffMapArchive\022\'\n\005super\030"
  "\001 \002(\0132\030.TST.TableCommandArchive\022%\n\rcell_"
  "diff_map\030\002 \002(\0132\016.TSP.Reference\022$\n\034should"
  "_allow_merge_fragments\030\003 \002(\010\022-\n\025inverse_"
  "cell_diff_map\030\004 \001(\0132\016.TSP.Reference\022%\n\022c"
  "ustom_format_keys\030\005 \003(\0132\t.TSP.UUID\"\335\002\n\032C"
  "ommandApplyCellMapArchive\022\'\n\005super\030\001 \002(\013"
  "2\030.TST.TableCommandArchive\022%\n\rredo_cell_"
  "map\030\002 \002(\0132\016.TSP.Reference\022%\n\rundo_cell_m"
  "ap\030\003 \001(\0132\016.TSP.Reference\0224\n\034undo_formula"
  "_rewrite_command\030\004 \001(\0132\016.TSP.Reference\022%"
  "\n\022custom_format_keys\030\005 \003(\0132\t.TSP.UUID\022\"\n"
  "\032merge_owner_rollback_index\030\006 \001(\r\022\025\n\ris_"
  "from_paste\030\007 \002(\010\0220\n\030formula_rewrite_comm"
  "ands\030\010 \003(\0132\016.TSP.Reference\"\375\002\n$CommandAp"
  "plyConcurrentCellMapArchive\022\'\n\005super\030\001 \002"
  "(\0132\030.TST.TableCommandArchive\0220\n\030redo_con"
  "current_cell_map\030\002 \002(\0132\016.TSP.Reference\0220"
  "\n\030undo_concurrent_cell_map\030\003 \001(\0132\016.TSP.R"
  "eference\0224\n\034undo_formula_rewrite_command"
  "\030\004 \001(\0132\016.TSP.Reference\022%\n\022custom_format_"
  "keys\030\005 \003(\0132\t.TSP.UUID\022\"\n\032merge_owner_rol"
  "lback_index\030\006 \001(\r\022\025\n\ris_from_paste\030\007 \002(\010"
  "\0220\n\030formula_rewrite_commands\030\010 \003(\0132\016.TSP"
  ".Reference\"\264\001\n%CommandChangeFreezeHeader"
  "StateArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableC"
  "ommandArchive\022-\n\tdirection\030\002 \002(\0162\032.TST.T"
  "ableDimensionArchive\022\030\n\020new_freeze_state"
  "\030\003 \002(\010\022\031\n\021prev_freeze_state\030\004 \002(\010\"\245\002\n\031Co"
  "mmandDeleteCellsArchive\022\'\n\005super\030\001 \002(\0132\030"
  ".TST.TableCommandArchive\022\033\n\023invalidate_c"
  "omments\030\005 \001(\010\022!\n\031invalidate_comments_val"
  "id\030\006 \001(\010\0222\n\017cell_uid_region\030\007 \001(\0132\031.TST."
  "CellUIDRegionArchive\0226\n\025summary_cell_uid"
  "_list\030\010 \001(\0132\027.TST.CellUIDListArchive\0223\n\033"
  "inverse_concurrent_cell_map\030\t \001(\0132\016.TSP."
  "Reference\"\252\001\n CommandDeleteCellContentsA"
  "rchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommand"
  "Archive\022.\n\rcell_uid_list\030\002 \002(\0132\027.TST.Cel"
  "lUIDListArchive\022-\n\025inverse_cell_diff_map"
  "\030\003 \001(\0132\016.TSP.Reference\"\365\001\n\036CommandMutate"
  "CellFormatArchive\022\'\n\005super\030\001 \002(\0132\030.TST.T"
  "ableCommandArchive\022.\n\rcell_uid_list\030\002 \001("
  "\0132\027.TST.CellUIDListArchive\022-\n\025inverse_ce"
  "ll_diff_map\030\003 \001(\0132\016.TSP.Reference\022-\n\025who"
  "le_format_diff_map\030\004 \001(\0132\016.TSP.Reference"
  "\022\034\n\024intended_format_type\030\005 \002(\r\"v\n\'Comman"
  "dSetAutomaticDurationUnitsArchive\0222\n\005sup"
  "er\030\001 \002(\0132#.TST.CommandMutateCellFormatAr"
  "chive\022\027\n\017automatic_units\030\004 \001(\010\"l\n\036Comman"
  "dSetDurationStyleArchive\0222\n\005super\030\001 \002(\0132"
  "#.TST.CommandMutateCellFormatArchive\022\026\n\016"
  "duration_style\030\002 \001(\r\"\217\001\n,CommandSetDurat"
  "ionUnitSmallestLargestArchive\0222\n\005super\030\001"
  " \002(\0132#.TST.CommandMutateCellFormatArchiv"
  "e\022\025\n\rsmallest_unit\030\002 \001(\r\022\024\n\014largest_unit"
  "\030\003 \001(\r\"\234\001\n!CommandReplaceCustomFormatArc"
  "hive\022%\n\rundo_diff_map\030\001 \001(\0132\016.TSP.Refere"
  "nce\022\'\n\017commit_diff_map\030\002 \001(\0132\016.TSP.Refer"
  "ence\022\'\n\005super\030\006 \002(\0132\030.TST.TableCommandAr"
  "chive\"\340\005\n\027CommandMoveCellsArchive\022\'\n\005sup"
  "er\030\001 \002(\0132\030.TST.TableCommandArchive\022-\n\026ds"
  "t_table_info_id_path\030\002 \002(\0132\r.TSP.UUIDPat"
  "h\022+\n\rsrc_uid_range\030\003 \002(\0132\024.TSP.UUIDRectA"
  "rchive\022+\n\rdst_uid_range\030\004 \002(\0132\024.TSP.UUID"
  "RectArchive\0223\n\017table_dimension\030\005 \001(\0162\032.T"
  "ST.TableDimensionArchive\022$\n\014src_cell_map"
  "\030\006 \002(\0132\016.TSP.Reference\022$\n\014dst_cell_map\030\007"
  " \001(\0132\016.TSP.Reference\0221\n\031dst_cell_styles_"
  "container\030\010 \001(\0132\016.TSP.Reference\022)\n\021src_u"
  "ndo_cell_map\030\t \001(\0132\016.TSP.Reference\022)\n\021ds"
  "t_undo_cell_map\030\n \001(\0132\016.TSP.Reference\022&\n"
  "\036dst_merge_owner_rollback_index\030\013 \002(\r\0220\n"
  "\030formula_rewrite_commands\030\014 \003(\0132\016.TSP.Re"
  "ference\022;\n\027merge_action_to_restore\030\r \001(\013"
  "2\032.TST.MergeOperationArchive\022=\n\034comment_"
  "cell_uids_to_restore\030\016 \001(\0132\027.TST.CellUID"
  "ListArchive\0223\n\033comment_storages_to_resto"
  "re\030\017 \003(\0132\016.TSP.Reference\"\240\001\n\030ColumnRowMe"
  "tadataArchive\022\014\n\004size\030\001 \002(\001\022\025\n\rhiding_ac"
  "tion\030\002 \002(\r\022\"\n\ncell_style\030\003 \001(\0132\016.TSP.Ref"
  "erence\022\"\n\ntext_style\030\004 \001(\0132\016.TSP.Referen"
  "ce\022\027\n\004uuid\030\005 \001(\0132\t.TSP.UUID\"\326\005\n!CommandI"
  "nsertColumnsOrRowsArchive\022\'\n\005super\030\001 \002(\013"
  "2\030.TST.TableCommandArchive\022+\n\006bundle\030\002 \002"
  "(\0132\033.TST.ColumnRowBundleArchive\022+\n\023concu"
  "rrent_cell_map\030\017 \002(\0132\016.TSP.Reference\022+\n\023"
  "categories_cell_map\030\020 \002(\0132\016.TSP.Referenc"
  "e\022%\n\rundo_commands\030\004 \001(\0132\016.TSP.Reference"
  "\0220\n\030undo_concurrent_cell_map\030\021 \001(\0132\016.TSP"
  ".Reference\0220\n\030undo_categories_cell_map\030\022"
  " \001(\0132\016.TSP.Reference\0221\n\nsort_order\030\006 \001(\013"
  "2\035.TST.TableSortOrderUIDArchive\022<\n\020group"
  "_sort_order\030\016 \001(\0132\".TST.TableGroupSortOr"
  "derUIDArchive\022\"\n\nfilter_set\030\007 \001(\0132\016.TSP."
  "Reference\022)\n!should_edge_expand_formula_"
  "ranges\030\010 \001(\010\022\027\n\017was_categorized\030\t \001(\010\022\035\n"
  "\nundo_order\030\n \003(\0132\t.TSP.UUID\022%\n\022src_row_"
  "column_uid\030\013 \002(\0132\t.TSP.UUID\022%\n\022opp_row_c"
  "olumn_uid\030\014 \002(\0132\t.TSP.UUID\0220\n\013undo_bundl"
  "e\030\r \001(\0132\033.TST.ColumnRowBundleArchive\"\206\003\n"
  "\026ColumnRowBundleArchive\022\016\n\006is_row\030\001 \002(\010\022"
  " \n\rview_uid_list\030\002 \003(\0132\t.TSP.UUID\0228\n\016vie"
  "w_type_list\030\003 \003(\0162 .TST.ColumnRowBundleI"
  "temTypeEnum\022 \n\rbase_uid_list\030\004 \003(\0132\t.TSP"
  ".UUID\0228\n\016base_type_list\030\005 \003(\0162 .TST.Colu"
  "mnRowBundleItemTypeEnum\022*\n\027category_orde"
  "r_uid_list\030\006 \003(\0132\t.TSP.UUID\022B\n\030category_"
  "order_type_list\030\007 \003(\0162 .TST.ColumnRowBun"
  "dleItemTypeEnum\0224\n\rmetadata_list\030\010 \003(\0132\035"
  ".TST.ColumnRowMetadataArchive\"\347\004\n!Comman"
  "dRemoveColumnsOrRowsArchive\022\'\n\005super\030\001 \002"
  "(\0132\030.TST.TableCommandArchive\022+\n\006bundle\030\002"
  " \002(\0132\033.TST.ColumnRowBundleArchive\022+\n\023con"
  "current_cell_map\030\013 \001(\0132\016.TSP.Reference\022+"
  "\n\023categories_cell_map\030\014 \001(\0132\016.TSP.Refere"
  "nce\0220\n\030undo_concurrent_cell_map\030\r \001(\0132\016."
  "TSP.Reference\0220\n\030undo_categories_cell_ma"
  "p\030\016 \001(\0132\016.TSP.Reference\022\'\n\017undo_filter_s"
  "et\030\005 \001(\0132\016.TSP.Reference\0226\n\017undo_sort_or"
  "der\030\006 \001(\0132\035.TST.TableSortOrderUIDArchive"
  "\022A\n\025undo_group_sort_order\030\n \001(\0132\".TST.Ta"
  "bleGroupSortOrderUIDArchive\0228\n formula_r"
  "ewrite_command_for_undo\030\007 \001(\0132\016.TSP.Refe"
  "rence\0221\n)inverse_should_edge_expand_form"
  "ula_ranges\030\010 \001(\010\022\035\n\nundo_order\030\t \003(\0132\t.T"
  "SP.UUID\"p\n\034CommandRowColumnRangeArchive\022"
  "\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchive"
  "\022\027\n\004uids\030\002 \003(\0132\t.TSP.UUID\022\016\n\006is_row\030\003 \002("
  "\010\"z\n\037CommandResizeColumnOrRowArchive\0220\n\005"
  "super\030\001 \002(\0132!.TST.CommandRowColumnRangeA"
  "rchive\022\r\n\005sizes\030\002 \003(\002\022\026\n\016sizes_for_undo\030"
  "\003 \003(\002\"\245\002\n\'CommandCategoryResizeColumnOrR"
  "owArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableComm"
  "andArchive\022\032\n\022category_row_sizes\030\002 \003(\002\022#"
  "\n\033category_row_sizes_for_undo\030\003 \003(\002\022 \n\030c"
  "ategory_label_row_sizes\030\004 \003(\002\022)\n!categor"
  "y_label_row_sizes_for_undo\030\005 \003(\002\022\034\n\024cate"
  "gory_column_size\030\006 \001(\001\022%\n\035category_colum"
  "n_size_for_undo\030\007 \001(\001\"\326\001\n\026CommandHideSho"
  "wArchive\0220\n\005super\030\001 \002(\0132!.TST.CommandRow"
  "ColumnRangeArchive\0224\n\020hide_show_action\030\002"
  " \002(\0162\032.TST.HideShowActionArchive\022\025\n\rhidi"
  "ng_action\030\003 \002(\r\022=\n\031hide_show_action_for_"
  "undo\030\004 \003(\0162\032.TST.HideShowActionArchive\"\242"
  "\003\n%CommandTextPreflightInsertCellArchive"
  "\022\'\n\005super\030\003 \002(\0132\030.TST.TableCommandArchiv"
  "e\022-\n\025coalesced_textcommand\030\006 \001(\0132\016.TSP.R"
  "eference\022)\n\021postflightcommand\030\010 \001(\0132\016.TS"
  "P.Reference\022\037\n\027grouped_with_postflight\030\t"
  " \001(\010\022\037\n\014editing_cell\030\n \002(\0132\t.TST.Cell\022\'\n"
  "\017editing_storage\030\013 \002(\0132\016.TSP.Reference\022\036"
  "\n\026last_column_hit_by_tap\030\014 \001(\r\022\'\n\010cell_u"
  "id\030\r \002(\0132\025.TSP.UUIDCoordArchive\022B\n\037archi"
  "ved_initial_selection_path\030\016 \001(\0132\031.TSK.S"
  "electionPathArchive\"\244\002\n\037CommandPostfligh"
  "tSetCellArchive\022\'\n\005super\030\003 \002(\0132\030.TST.Tab"
  "leCommandArchive\022(\n\020childcommandundo\030\004 \001"
  "(\0132\016.TSP.Reference\022\037\n\014editing_cell\030\006 \002(\013"
  "2\t.TST.Cell\022\033\n\010new_cell\030\007 \002(\0132\t.TST.Cell"
  "\022\'\n\017editing_storage\030\010 \002(\0132\016.TSP.Referenc"
  "e\022\036\n\026last_column_hit_by_tap\030\t \001(\r\022\'\n\010cel"
  "l_uid\030\n \002(\0132\025.TSP.UUIDCoordArchive\"\251\002\n+C"
  "ommandChangeTableAreaForColumnOrRowArchi"
  "ve\0220\n\005super\030\001 \002(\0132!.TST.CommandRowColumn"
  "RangeArchive\0227\n\025table_area_transition\030\002 "
  "\002(\0162\030.TST.TableAreaTransition\022%\n\rcell_di"
  "ff_map\030\003 \001(\0132\016.TSP.Reference\022*\n\022undo_cel"
  "l_diff_map\030\004 \001(\0132\016.TSP.Reference\022%\n\rundo"
  "_commands\030\005 \001(\0132\016.TSP.Reference\022\025\n\ractio"
  "n_string\030\006 \001(\t\"\234\002\n\"CommandSetPencilAnnot"
  "ationsArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Table"
  "CommandArchive\022#\n\013annotations\030\002 \003(\0132\016.TS"
  "P.Reference\022&\n\010formulas\030\003 \003(\0132\024.TSCE.For"
  "mulaArchive\022\027\n\017formula_indexes\030\004 \003(\004\022.\n\020"
  "inverse_formulas\030\005 \003(\0132\024.TSCE.FormulaArc"
  "hive\022\037\n\027inverse_formula_indexes\030\006 \003(\004\022\026\n"
  "\016rollback_index\030\007 \001(\004\"\325\002\n\032CommandSetTabl"
  "eNameArchive\022\024\n\014newtablename\030\001 \002(\t\022\024\n\014ol"
  "dtablename\030\002 \001(\t\022 \n\010newstyle\030\003 \001(\0132\016.TSP"
  ".Reference\022 \n\010oldstyle\030\004 \001(\0132\016.TSP.Refer"
  "ence\022\'\n\005super\030\005 \002(\0132\030.TST.TableCommandAr"
  "chive\022\'\n\017old_shape_style\030\006 \001(\0132\016.TSP.Ref"
  "erence\022\'\n\017new_shape_style\030\007 \001(\0132\016.TSP.Re"
  "ference\022%\n\035old_table_name_border_enabled"
  "\030\010 \001(\010\022%\n\035new_table_name_border_enabled\030"
  "\t \001(\010\"\211\001\n!CommandSetTableNameEnabledArch"
  "ive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArc"
  "hive\022\032\n\022table_name_enabled\030\002 \002(\010\022\037\n\027prev"
  "_table_name_enabled\030\003 \001(\010\"\253\002\n\036CommandSet"
  "TableFontSizeArchive\022\'\n\005super\030\001 \002(\0132\030.TS"
  "T.TableCommandArchive\022\023\n\013is_increase\030\002 \002"
  "(\010\022\026\n\016font_size_diff\030\003 \002(\005\022\026\n\016font_size_"
  "list\030\004 \003(\001\022\036\n\026inverse_font_size_list\030\005 \003"
  "(\001\022%\n\rcell_diff_map\030\006 \001(\0132\016.TSP.Referenc"
  "e\022-\n\025inverse_cell_diff_map\030\007 \001(\0132\016.TSP.R"
  "eference\022%\n\035styles_container_refresh_don"
  "e\030\010 \002(\010\"\301\002\n\036CommandSetTableFontNameArchi"
  "ve\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArch"
  "ive\022\021\n\tfont_name\030\002 \002(\t\022\025\n\rpreserve_face\030"
  "\003 \002(\010\022\032\n\022previous_font_name\030\004 \001(\t\022,\n\024pre"
  "vious_table_style\030\005 \001(\0132\016.TSP.Reference\022"
  ",\n\024previous_text_styles\030\006 \003(\0132\016.TSP.Refe"
  "rence\022%\n\rcell_diff_map\030\007 \002(\0132\016.TSP.Refer"
  "ence\022-\n\025inverse_cell_diff_map\030\010 \001(\0132\016.TS"
  "P.Reference\"\211\001\n CommandSetTableNameHeigh"
  "tArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableComma"
  "ndArchive\022\035\n\025old_table_name_height\030\002 \002(\001"
  "\022\035\n\025new_table_name_height\030\003 \002(\001\"\?\n\024Comma"
  "ndSetNowArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Tab"
  "leCommandArchive\"\205\002\n\027CommandSetWasCutArc"
  "hive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandAr"
  "chive\022!\n\016from_table_uid\030\002 \002(\0132\t.TSP.UUID"
  "\022&\n\023prev_from_table_uid\030\003 \002(\0132\t.TSP.UUID"
  "\022\017\n\007was_cut\030\004 \002(\010\022\024\n\014prev_was_cut\030\005 \002(\010\022"
  "$\n\021from_group_by_uid\030\006 \002(\0132\t.TSP.UUID\022)\n"
  "\026prev_from_group_by_uid\030\007 \002(\0132\t.TSP.UUID"
  "\"\223\002\n\030CommandStyleCellsArchive\022\'\n\005super\030\001"
  " \002(\0132\030.TST.TableCommandArchive\0223\n\021format"
  "_properties\030\002 \001(\0132\030.TSP.ReferenceDiction"
  "ary\022(\n\tselection\030\003 \002(\0132\025.TST.SelectionAr"
  "chive\022%\n\rundo_cell_map\030\004 \002(\0132\016.TSP.Refer"
  "ence\022%\n\rredo_cell_map\030\005 \002(\0132\016.TSP.Refere"
  "nce\022!\n\ttext_undo\030\006 \001(\0132\016.TSP.Reference\"\366"
  "\001\n\030CommandStyleTableArchive\022\'\n\005super\030\001 \002"
  "(\0132\030.TST.TableCommandArchive\0223\n\021format_p"
  "roperties\030\002 \001(\0132\030.TSP.ReferenceDictionar"
  "y\022=\n\told_style\030\003 \001(\0132*.TSTSOS.TableStyle"
  "PropertyChangeSetArchive\022=\n\tnew_style\030\004 "
  "\001(\0132*.TSTSOS.TableStylePropertyChangeSet"
  "Archive\"\312\001\n\'CommandSetRepeatingHeaderEna"
  "bledArchive\022 \n\030repeating_header_enabled\030"
  "\001 \002(\010\022-\n\tdirection\030\002 \002(\0162\032.TST.TableDime"
  "nsionArchive\022\'\n\005super\030\003 \002(\0132\030.TST.TableC"
  "ommandArchive\022%\n\035prev_repeating_header_e"
  "nabled\030\004 \001(\010\"\252\001\n\037CommandSetFiltersEnable"
  "dArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableComma"
  "ndArchive\022\033\n\023new_filters_enabled\030\002 \002(\010\022\033"
  "\n\023old_filters_enabled\030\003 \001(\010\022$\n\021rollback_"
  "uid_list\030\004 \003(\0132\t.TSP.UUID\"\243\001\n!CommandAdd"
  "TableStylePresetArchive\022\'\n\005super\030\001 \002(\0132\030"
  ".TST.TableCommandArchive\022\024\n\014preset_index"
  "\030\002 \002(\005\022$\n\014table_styles\030\003 \002(\0132\016.TSP.Refer"
  "ence\022\031\n\021send_notification\030\004 \002(\010\"\311\001\n$Comm"
  "andRemoveTableStylePresetArchive\022\"\n\005supe"
  "r\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005theme\030\002 "
  "\002(\0132\016.TSP.Reference\022,\n\024removed_table_sty"
  "les\030\003 \002(\0132\016.TSP.Reference\022\021\n\tpreset_id\030\004"
  " \002(\005\022\035\n\025preset_index_in_theme\030\005 \002(\005\"\276\001\n%"
  "CommandReplaceTableStylePresetArchive\022\"\n"
  "\005super\030\001 \002(\0132\023.TSK.CommandArchive\022\035\n\005the"
  "me\030\002 \002(\0132\016.TSP.Reference\022(\n\020old_table_st"
  "yles\030\003 \002(\0132\016.TSP.Reference\022(\n\020new_table_"
  "styles\030\004 \002(\0132\016.TSP.Reference\"\257\004\n#Command"
  "ApplyTableStylePresetArchive\022\'\n\005super\030\001 "
  "\002(\0132\030.TST.TableCommandArchive\022\036\n\006preset\030"
  "\002 \001(\0132\016.TSP.Reference\022\036\n\006styles\030\003 \001(\0132\016."
  "TSP.Reference\022#\n\013undo_preset\030\004 \001(\0132\016.TSP"
  ".Reference\022#\n\013undo_styles\030\005 \001(\0132\016.TSP.Re"
  "ference\022%\n\rcell_diff_map\030\006 \001(\0132\016.TSP.Ref"
  "erence\022*\n\022undo_cell_diff_map\030\007 \001(\0132\016.TSP"
  ".Reference\022\033\n\023apply_preset_option\030\010 \002(\005\022"
  "\035\n\025table_clears_all_flag\030\013 \002(\010\022\"\n\032undo_t"
  "able_clears_all_flag\030\014 \002(\010\0225\n\016row_col_st"
  "yles\030\r \003(\0132\035.TST.ColumnRowMetadataArchiv"
  "e\022:\n\023undo_row_col_styles\030\016 \003(\0132\035.TST.Col"
  "umnRowMetadataArchive\022/\n\027change_prop_map"
  "_wrapper\030\017 \001(\0132\016.TSP.Reference\"Y\n\025Comman"
  "dSetBaseArchive\0222\n\005super\030\001 \002(\0132#.TST.Com"
  "mandMutateCellFormatArchive\022\014\n\004base\030\002 \002("
  "\r\"f\n\033CommandSetBasePlacesArchive\0222\n\005supe"
  "r\030\001 \002(\0132#.TST.CommandMutateCellFormatArc"
  "hive\022\023\n\013base_places\030\002 \002(\r\"t\n!CommandSetB"
  "aseUseMinusSignArchive\0222\n\005super\030\001 \002(\0132#."
  "TST.CommandMutateCellFormatArchive\022\033\n\023ba"
  "se_use_minus_sign\030\002 \002(\010\"j\n\035CommandSetCur"
  "rencyCodeArchive\0222\n\005super\030\001 \002(\0132#.TST.Co"
  "mmandMutateCellFormatArchive\022\025\n\rcurrency"
  "_code\030\002 \002(\t\"r\n!CommandSetFractionAccurac"
  "yArchive\0222\n\005super\030\001 \002(\0132#.TST.CommandMut"
  "ateCellFormatArchive\022\031\n\021fraction_accurac"
  "y\030\002 \002(\r\"y\n$CommandSetNegativeNumberStyle"
  "Archive\0222\n\005super\030\001 \002(\0132#.TST.CommandMuta"
  "teCellFormatArchive\022\035\n\025negative_number_s"
  "tyle\030\002 \002(\r\"t\n&CommandSetNumberOfDecimalP"
  "lacesArchive\0222\n\005super\030\001 \002(\0132#.TST.Comman"
  "dMutateCellFormatArchive\022\026\n\016decimal_plac"
  "es\030\002 \002(\r\"\215\001\n\037CommandSetDateTimeFormatArc"
  "hive\0222\n\005super\030\001 \002(\0132#.TST.CommandMutateC"
  "ellFormatArchive\022\032\n\022date_format_string\030\002"
  " \001(\t\022\032\n\022time_format_string\030\003 \001(\t\"\177\n\'Comm"
  "andSetShowThousandsSeparatorArchive\0222\n\005s"
  "uper\030\001 \002(\0132#.TST.CommandMutateCellFormat"
  "Archive\022 \n\030show_thousands_separator\030\002 \002("
  "\010\"w\n#CommandSetUseAccountingStyleArchive"
  "\0222\n\005super\030\001 \002(\0132#.TST.CommandMutateCellF"
  "ormatArchive\022\034\n\024use_accounting_style\030\002 \002"
  "(\010\"\245\002\n&CommandSetRangeControlMinMaxIncAr"
  "chive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandA"
  "rchive\022\017\n\007minimum\030\002 \001(\001\022\017\n\007maximum\030\003 \001(\001"
  "\022\021\n\tincrement\030\004 \001(\001\022%\n\rcell_diff_map\030\005 \001"
  "(\0132\016.TSP.Reference\022.\n\rcell_uid_list\030\006 \001("
  "\0132\027.TST.CellUIDListArchive\022-\n\025inverse_ce"
  "ll_diff_map\030\007 \001(\0132\016.TSP.Reference\022\027\n\017is_"
  "first_commit\030\010 \002(\010\"\247\002\n\037CommandMoveColumn"
  "sOrRowsArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Tabl"
  "eCommandArchive\022\033\n\010dest_uid\030\002 \002(\0132\t.TSP."
  "UUID\022\016\n\006before\030\003 \002(\010\022 \n\rundo_dest_uid\030\004 "
  "\002(\0132\t.TSP.UUID\022\023\n\013undo_before\030\005 \002(\010\022\027\n\004u"
  "ids\030\006 \003(\0132\t.TSP.UUID\022-\n\tdirection\030\007 \002(\0162"
  "\032.TST.TableDimensionArchive\022/\n\027formula_r"
  "ewrite_command\030\010 \001(\0132\016.TSP.Reference\"\260\001\n"
  "\022CommandSortArchive\022\'\n\005super\030\001 \002(\0132\030.TST"
  ".TableCommandArchive\022 \n\rfrom_row_uids\030\002 "
  "\003(\0132\t.TSP.UUID\022\036\n\013to_row_uids\030\003 \003(\0132\t.TS"
  "P.UUID\022/\n\027formula_rewrite_command\030\004 \001(\0132"
  "\016.TSP.Reference\"\206\006\n\031FormulaRewriteSpecAr"
  "chive\022\024\n\014rewrite_type\030\001 \002(\r\022\034\n\ttable_uid"
  "\030\002 \001(\0132\t.TSP.UUID\022\'\n\024cond_style_owner_ui"
  "d\030\003 \001(\0132\t.TSP.UUID\022\037\n\014group_by_uid\030\004 \001(\013"
  "2\t.TSP.UUID\022\022\n\nis_inverse\030\005 \001(\010\022C\n\030colum"
  "n_or_row_uuids_info\030\006 \001(\0132!.TSCE.ColumnO"
  "rRowUuidsInfoArchive\022G\n\034aux_column_or_ro"
  "w_uuids_info\030\007 \001(\0132!.TSCE.ColumnOrRowUui"
  "dsInfoArchive\0227\n\021region_moved_info\030\010 \001(\013"
  "2\034.TSCE.RegionMovedInfoArchive\022,\n\013region"
  "_info\030\t \001(\0132\027.TSCE.RegionInfoArchive\022\?\n\025"
  "rewrite_table_id_info\030\n \001(\0132 .TSCE.Rewri"
  "teTableUIDInfoArchive\022>\n\025transposed_tabl"
  "e_info\030\013 \001(\0132\037.TSCE.TableTransposeInfoAr"
  "chive\022>\n\027merge_origin_moved_info\030\014 \001(\0132\035"
  ".TSCE.MergeOriginMovedArchive\022.\n\014merge_s"
  "ource\030\r \001(\0132\030.TSCE.MergeSourceArchive\022=\n"
  "\017group_node_info\030\016 \001(\0132$.TSCE.RewriteGro"
  "upNodeUIDInfoArchive\0222\n\016groupby_change\030\017"
  " \001(\0132\032.TSCE.GroupByChangeArchive\"\204\002\n)Com"
  "mandRewriteFormulasForTransposeArchive\022\'"
  "\n\005super\030\001 \002(\0132\030.TST.TableCommandArchive\022"
  "4\n\014rewrite_spec\030\002 \002(\0132\036.TST.FormulaRewri"
  "teSpecArchive\0229\n\023formulas_to_rewrite\030\003 \002"
  "(\0132\034.TSCE.FormulasForUndoArchive\022=\n\016warn"
  "ingset_map\030\004 \001(\0132%.TST.ImportWarningSetB"
  "yCellRefArchive\"\314\001\n0CommandRewriteTableF"
  "ormulasForRewriteSpecArchive\022\'\n\005super\030\001 "
  "\002(\0132\030.TST.TableCommandArchive\0224\n\014rewrite"
  "_spec\030\002 \002(\0132\036.TST.FormulaRewriteSpecArch"
  "ive\0229\n\023formulas_to_rewrite\030\003 \002(\0132\034.TSCE."
  "FormulasForUndoArchive\"\276\001\n\"CommandRewrit"
  "eMergeFormulasArchive\022\'\n\005super\030\001 \002(\0132\030.T"
  "ST.TableCommandArchive\0224\n\014rewrite_spec\030\002"
  " \002(\0132\036.TST.FormulaRewriteSpecArchive\0229\n\023"
  "formulas_to_rewrite\030\003 \002(\0132\034.TSCE.Formula"
  "sForUndoArchive\"\301\001\n%CommandRewriteCatego"
  "ryFormulasArchive\022\'\n\005super\030\001 \002(\0132\030.TST.T"
  "ableCommandArchive\0224\n\014rewrite_spec\030\002 \002(\013"
  "2\036.TST.FormulaRewriteSpecArchive\0229\n\023form"
  "ulas_to_rewrite\030\003 \002(\0132\034.TSCE.FormulasFor"
  "UndoArchive\"\\\n1CommandRewriteFilterFormu"
  "lasForTableResizeArchive\022\'\n\005super\030\001 \002(\0132"
  "\030.TST.TableCommandArchive\"\266\001\n1CommandRew"
  "riteFilterFormulasForRewriteSpecArchive\022"
  "\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchive"
  "\022\"\n\nfilter_set\030\002 \002(\0132\016.TSP.Reference\0224\n\014"
  "rewrite_spec\030\003 \002(\0132\036.TST.FormulaRewriteS"
  "pecArchive\"\227\002\n4CommandRewriteConditional"
  "StylesForRewriteSpecArchive\022\'\n\005super\030\001 \002"
  "(\0132\030.TST.TableCommandArchive\0224\n\014rewrite_"
  "spec\030\002 \002(\0132\036.TST.FormulaRewriteSpecArchi"
  "ve\0229\n\023formulas_to_rewrite\030\003 \001(\0132\034.TSCE.F"
  "ormulasForUndoArchive\022E\n\026conditional_sty"
  "le_sets\030\004 \001(\0132%.TSCE.ExpandedCellRefObje"
  "ctMapArchive\"\303\001\n\'CommandRewritePivotOwne"
  "rFormulasArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Ta"
  "bleCommandArchive\0224\n\014rewrite_spec\030\002 \002(\0132"
  "\036.TST.FormulaRewriteSpecArchive\0229\n\023formu"
  "las_to_rewrite\030\003 \002(\0132\034.TSCE.FormulasForU"
  "ndoArchive\"\222\002\n\023CommandMergeArchive\022\'\n\005su"
  "per\030\001 \002(\0132\030.TST.TableCommandArchive\022.\n\rc"
  "ell_uid_list\030\002 \002(\0132\027.TST.CellUIDListArch"
  "ive\022%\n\rundo_cell_map\030\003 \001(\0132\016.TSP.Referen"
  "ce\0224\n\034undo_formula_rewrite_command\030\004 \001(\013"
  "2\016.TSP.Reference\022\034\n\024merge_owner_rollback"
  "\030\005 \001(\r\022\'\n\017commit_cell_map\030\006 \001(\0132\016.TSP.Re"
  "ference\"\202\001\n\032CommandInverseMergeArchive\022."
  "\n\005super\030\001 \002(\0132\037.TST.CommandApplyCellMapA"
  "rchive\0224\n\025merge_source_cell_uid\030\002 \002(\0132\025."
  "TSP.UUIDCoordArchive\"\317\001\n\025CommandUnmergeA"
  "rchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommand"
  "Archive\0220\n\022unmerge_uid_ranges\030\002 \003(\0132\024.TS"
  "P.UUIDRectArchive\022%\n\rundo_cell_map\030\003 \001(\013"
  "2\016.TSP.Reference\0224\n\034undo_formula_rewrite"
  "_command\030\004 \001(\0132\016.TSP.Reference\"\325\001\n#Comma"
  "ndChooseTableIdRemapperArchive\022\"\n\005super\030"
  "\001 \002(\0132\023.TSK.CommandArchive\0227\n\017table_id_m"
  "apper\030\002 \002(\0132\036.TST.MultiTableRemapperArch"
  "ive\0228\n formula_rewrite_command_for_undo\030"
  "\003 \001(\0132\016.TSP.Reference\022\027\n\017apply_and_clear"
  "\030\004 \002(\010\"\235\t\n(CommandCategorySetGroupingCol"
  "umnsArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCo"
  "mmandArchive\022\034\n\024new_enabled_changing\030\002 \002"
  "(\005\022\034\n\024old_enabled_changing\030\003 \002(\005\0229\n\024new_"
  "grouping_columns\030\004 \002(\0132\033.TST.GroupColumn"
  "ListArchive\0229\n\024old_grouping_columns\030\005 \001("
  "\0132\033.TST.GroupColumnListArchive\022\032\n\022restor"
  "e_base_order\030\006 \002(\010\022!\n\016base_row_order\030\007 \003"
  "(\0132\t.TSP.UUID\022\037\n\027undo_restore_base_order"
  "\030\010 \002(\010\022&\n\023undo_base_row_order\030\t \003(\0132\t.TS"
  "P.UUID\022\032\n\022restore_view_order\030\n \002(\010\022!\n\016vi"
  "ew_row_order\030\013 \003(\0132\t.TSP.UUID\022\037\n\027undo_re"
  "store_view_order\030\014 \002(\010\022&\n\023undo_view_row_"
  "order\030\r \003(\0132\t.TSP.UUID\022!\n\016collapse_state"
  "\030\016 \003(\0132\t.TSP.UUID\022&\n\023undo_collapse_state"
  "\030\017 \003(\0132\t.TSP.UUID\022H\n\024summary_change_stat"
  "e\030\020 \001(\0132*.TST.SummaryModelGroupByChangeS"
  "tateArchive\022M\n\031undo_summary_change_state"
  "\030\021 \001(\0132*.TST.SummaryModelGroupByChangeSt"
  "ateArchive\022>\n\025new_column_aggregates\030\022 \001("
  "\0132\037.TST.ColumnAggregateListArchive\022>\n\025ol"
  "d_column_aggregates\030\023 \001(\0132\037.TST.ColumnAg"
  "gregateListArchive\0228\n undo_set_enabled_r"
  "ewrite_command\030\024 \001(\0132\016.TSP.Reference\0228\n "
  "undo_set_columns_rewrite_command\030\025 \001(\0132\016"
  ".TSP.Reference\022 \n\030force_restore_all_stat"
  "es\030\026 \002(\010\022%\n\rcell_diff_map\030\027 \001(\0132\016.TSP.Re"
  "ference\022*\n\022undo_cell_diff_map\030\030 \001(\0132\016.TS"
  "P.Reference\0229\n!undo_set_group_sort_order"
  "_command\030\031 \001(\0132\016.TSP.Reference\"\263\002\n!Formu"
  "laEditingCommandGroupArchive\0222\n\005super\030\001 "
  "\002(\0132#.TSK.ProgressiveCommandGroupArchive"
  "\022\032\n\022undoSelectionValid\030\002 \002(\010\022\032\n\022undoSele"
  "ctionStart\030\003 \002(\r\022\033\n\023undoSelectionLength\030"
  "\004 \002(\r\022\027\n\017undoActiveToken\030\005 \002(\r\022\032\n\022redoSe"
  "lectionValid\030\006 \002(\010\022\032\n\022redoSelectionStart"
  "\030\007 \002(\r\022\033\n\023redoSelectionLength\030\010 \002(\r\022\027\n\017r"
  "edoActiveToken\030\t \002(\r\"\226\001\n-FormulaEditingC"
  "ommandSelectionBehaviorArchive\0223\n\005super\030"
  "\001 \002(\0132$.TSK.CommandSelectionBehaviorArch"
  "ive\022\027\n\017undoActiveToken\030\002 \001(\r\022\027\n\017redoActi"
  "veToken\030\003 \001(\r\"\313\001\n$TableCommandSelectionB"
  "ehaviorArchive\0223\n\005super\030\001 \002(\0132$.TSK.Comm"
  "andSelectionBehaviorArchive\022\"\n\ntable_inf"
  "o\030\002 \001(\0132\016.TSP.Reference\022-\n\032last_column_u"
  "id_hit_by_tap\030\003 \001(\0132\t.TSP.UUID\022\033\n\023invali"
  "date_comments\030\004 \001(\r\"\266\002\n\036CommandApplyCell"
  "CommentArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Tabl"
  "eCommandArchive\022\'\n\010cell_uid\030\002 \002(\0132\025.TSP."
  "UUIDCoordArchive\022+\n\023old_comment_storage\030"
  "\003 \001(\0132\016.TSP.Reference\022+\n\023new_comment_sto"
  "rage\030\004 \001(\0132\016.TSP.Reference\0223\n\017forward_va"
  "riant\030\005 \001(\0162\032.TSD.CommentCommandVariant\022"
  "3\n\017inverse_variant\030\006 \001(\0162\032.TSD.CommentCo"
  "mmandVariant\"`\n$CommandSetFormulaTokeniz"
  "ationArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
  "dArchive\022\024\n\014tokenization\030\002 \002(\010\"\363\001\n\036Comma"
  "ndSetFilterSetTypeArchive\022\'\n\005super\030\001 \002(\013"
  "2\030.TST.TableCommandArchive\022@\n\023old_filter"
  "_set_type\030\002 \001(\0162#.TST.FilterSetArchive.F"
  "ilterSetType\022@\n\023new_filter_set_type\030\003 \002("
  "\0162#.TST.FilterSetArchive.FilterSetType\022$"
  "\n\021rollback_uid_list\030\004 \003(\0132\t.TSP.UUID\"\233\001\n"
  "\032CommandSetTextStyleArchive\022\'\n\005super\030\001 \002"
  "(\0132\030.TST.TableCommandArchive\022%\n\rcell_dif"
  "f_map\030\002 \002(\0132\016.TSP.Reference\022-\n\025inverse_c"
  "ell_diff_map\030\003 \001(\0132\016.TSP.Reference\"\301\001\n$C"
  "ommandSetTextStylePropertiesArchive\022\'\n\005s"
  "uper\030\001 \002(\0132\030.TST.TableCommandArchive\022%\n\r"
  "cell_diff_map\030\002 \002(\0132\016.TSP.Reference\022\032\n\022c"
  "ell_was_rich_text\030\003 \003(\010\022-\n\025inverse_cell_"
  "diff_map\030\004 \001(\0132\016.TSP.Reference\"i\n\036Comman"
  "dJustForNotifyingArchive\022\'\n\005super\030\001 \002(\0132"
  "\030.TST.TableCommandArchive\022\036\n\026change_desc"
  "riptor_type\030\002 \002(\r\"\330\001\n CommandSetStorageL"
  "anguageArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comm"
  "andArchive\022\037\n\007storage\030\002 \002(\0132\016.TSP.Refere"
  "nce\022\020\n\010language\030\003 \002(\t\022\026\n\016range_location\030"
  "\004 \002(\r\022\024\n\014range_length\030\005 \002(\r\022/\n\020undo_tran"
  "saction\030\006 \001(\0132\025.TSWP.UndoTransaction\"\255\001\n"
  "\032CommandSetSortOrderArchive\022\'\n\005super\030\001 \002"
  "(\0132\030.TST.TableCommandArchive\0222\n\016old_sort"
  "_order\030\002 \001(\0132\032.TST.TableSortOrderArchive"
  "\0222\n\016new_sort_order\030\003 \001(\0132\032.TST.TableSort"
  "OrderArchive\"\316\001\n\037CommandSetGroupSortOrde"
  "rArchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableComma"
  "ndArchive\022@\n\024old_group_sort_order\030\002 \001(\0132"
  "\".TST.TableGroupSortOrderUIDArchive\022@\n\024n"
  "ew_group_sort_order\030\003 \001(\0132\".TST.TableGro"
  "upSortOrderUIDArchive\"\277\001\n,CommandRewrite"
  "SortOrderForTableResizeArchive\022\'\n\005super\030"
  "\001 \002(\0132\030.TST.TableCommandArchive\0222\n\016old_s"
  "ort_order\030\002 \001(\0132\032.TST.TableSortOrderArch"
  "ive\0222\n\016new_sort_order\030\003 \001(\0132\032.TST.TableS"
  "ortOrderArchive\"\365\001\n,CommandRewriteSortOr"
  "derForRewriteSpecArchive\022\'\n\005super\030\001 \002(\0132"
  "\030.TST.TableCommandArchive\0224\n\014rewrite_spe"
  "c\030\002 \002(\0132\036.TST.FormulaRewriteSpecArchive\022"
  "2\n\016old_sort_order\030\003 \001(\0132\032.TST.TableSortO"
  "rderArchive\0222\n\016new_sort_order\030\004 \001(\0132\032.TS"
  "T.TableSortOrderArchive\"\273\001\n\032CommandSetFi"
  "lterSetArchive\022\'\n\005super\030\001 \002(\0132\030.TST.Tabl"
  "eCommandArchive\022&\n\016new_filter_set\030\002 \002(\0132"
  "\016.TSP.Reference\022&\n\016old_filter_set\030\003 \001(\0132"
  "\016.TSP.Reference\022$\n\021rollback_uid_list\030\004 \003"
  "(\0132\t.TSP.UUID\"l\n\033ColumnRowRestoreDataArc"
  "hive\022\033\n\010uid_list\030\001 \003(\0132\t.TSP.UUID\0220\n\tmet"
  "adatas\030\002 \003(\0132\035.TST.ColumnRowMetadataArch"
  "ive\"\305\004\n\034CommandTransposeTableArchive\022\'\n\005"
  "super\030\001 \002(\0132\030.TST.TableCommandArchive\0224\n"
  "\024original_table_range\030\002 \002(\0132\026.TST.Expand"
  "edCellRange\022)\n\021original_cell_map\030\003 \002(\0132\016"
  ".TSP.Reference\022!\n\031original_footer_row_co"
  "unt\030\004 \002(\r\022\036\n\026original_column_widths\030\005 \003("
  "\002\022\034\n\024original_row_heights\030\006 \003(\002\022-\n\025ineli"
  "gible_merge_list\030\007 \003(\0132\016.TST.CellRange\022+"
  "\n\023transposed_cell_map\030\010 \002(\0132\016.TSP.Refere"
  "nce\0224\n\034undo_formula_rewrite_command\030\t \001("
  "\0132\016.TSP.Reference\022-\n\025rich_text_subcomman"
  "ds\030\n \001(\0132\016.TSP.Reference\022=\n\023column_resto"
  "re_data\030\013 \001(\0132 .TST.ColumnRowRestoreData"
  "Archive\022:\n\020row_restore_data\030\014 \001(\0132 .TST."
  "ColumnRowRestoreDataArchive\"\316\001\n+CommandS"
  "etStructuredTextImportRecordArchive\022\'\n\005s"
  "uper\030\001 \002(\0132\030.TST.TableCommandArchive\022:\n\021"
  "new_import_record\030\002 \001(\0132\037.TST.Structured"
  "TextImportRecord\022:\n\021old_import_record\030\003 "
  "\001(\0132\037.TST.StructuredTextImportRecord\"\231\002\n"
  ")CommandCategoryCollapseExpandGroupArchi"
  "ve\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArch"
  "ive\022\025\n\ris_collapsing\030\002 \002(\010\0225\n\020grouping_c"
  "olumns\030\003 \002(\0132\033.TST.GroupColumnListArchiv"
  "e\0227\n\016collapse_state\030\004 \002(\0132\037.TST.ExpandCo"
  "llapseStateArchive\022<\n\023undo_collapse_stat"
  "e\030\005 \001(\0132\037.TST.ExpandCollapseStateArchive"
  "\"\275\001\n)CommandCategoryChangeSummaryAggrega"
  "teType\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommand"
  "Archive\022\026\n\016aggregate_type\030\002 \002(\r\022\033\n\023undo_"
  "aggregate_type\030\003 \002(\r\022\035\n\ncolumn_uid\030\004 \002(\013"
  "2\t.TSP.UUID\022\023\n\013group_level\030\005 \002(\021\"\245\001\n$Com"
  "mandCategorySetLabelRowVisibility\022\'\n\005sup"
  "er\030\001 \002(\0132\030.TST.TableCommandArchive\022\023\n\013gr"
  "oup_level\030\002 \002(\r\022\034\n\024label_row_visibility\030"
  "\003 \002(\r\022!\n\031undo_label_row_visibility\030\004 \002(\r"
  "\"\252\002\n#CommandCategoryWillChangeGroupValue"
  "\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArchiv"
  "e\022!\n\016group_node_uid\030\002 \002(\0132\t.TSP.UUID\022&\n\023"
  "undo_group_node_uid\030\003 \001(\0132\t.TSP.UUID\022+\n\013"
  "group_value\030\004 \001(\0132\026.TSCE.CellValueArchiv"
  "e\0220\n\020undo_group_value\030\005 \001(\0132\026.TSCE.CellV"
  "alueArchive\0220\n\030rewrite_command_for_undo\030"
  "\006 \001(\0132\016.TSP.Reference\"S\n%IdempotentSelec"
  "tionTransformerArchive\022*\n\022archived_selec"
  "tion\030\001 \002(\0132\016.TSP.Reference\"\270\001\n\035WPSelecti"
  "onTransformerArchive\022;\n\005super\030\001 \002(\0132,.TS"
  "T.TableSubSelectionTransformerBaseArchiv"
  "e\022*\n\022archived_selection\030\002 \002(\0132\016.TSP.Refe"
  "rence\022.\n\017origin_cell_uid\030\003 \001(\0132\025.TSP.UUI"
  "DCoordArchive\"T\n\'TableSubSelectionTransf"
  "ormerBaseArchive\022)\n\022table_info_id_path\030\001"
  " \002(\0132\r.TSP.UUIDPath\"c\n$TableNameSelectio"
  "nTransformerArchive\022;\n\005super\030\001 \002(\0132,.TST"
  ".TableSubSelectionTransformerBaseArchive"
  "\"\366\001\n&ControlCellSelectionTransformerArch"
  "ive\022;\n\005super\030\001 \002(\0132,.TST.TableSubSelecti"
  "onTransformerBaseArchive\022*\n\tcell_uids\030\002 "
  "\001(\0132\027.TST.CellUIDListArchive\022.\n\017origin_c"
  "ell_uid\030\003 \001(\0132\025.TSP.UUIDCoordArchive\0223\n\016"
  "origin_cell_id\030\004 \002(\0132\033.TSCE.CellCoordina"
  "teArchive\"\364\001\n$StockCellSelectionTransfor"
  "merArchive\022;\n\005super\030\001 \002(\0132,.TST.TableSub"
  "SelectionTransformerBaseArchive\022*\n\tcell_"
  "uids\030\002 \001(\0132\027.TST.CellUIDListArchive\022.\n\017o"
  "rigin_cell_uid\030\003 \001(\0132\025.TSP.UUIDCoordArch"
  "ive\0223\n\016origin_cell_id\030\004 \002(\0132\033.TSCE.CellC"
  "oordinateArchive\"\234\002\n!RegionSelectionTran"
  "sformerArchive\022;\n\005super\030\001 \002(\0132,.TST.Tabl"
  "eSubSelectionTransformerBaseArchive\022*\n\tc"
  "ell_uids\030\002 \001(\0132\027.TST.CellUIDListArchive\022"
  ".\n\017origin_cell_uid\030\003 \001(\0132\025.TSP.UUIDCoord"
  "Archive\022.\n\017anchor_cell_uid\030\004 \002(\0132\025.TSP.U"
  "UIDCoordArchive\022.\n\017cursor_cell_uid\030\005 \002(\013"
  "2\025.TSP.UUIDCoordArchive\"\214\001\n!StrokeSelect"
  "ionTransformerArchive\022;\n\005super\030\001 \002(\0132,.T"
  "ST.TableSubSelectionTransformerBaseArchi"
  "ve\022*\n\022archived_selection\030\002 \002(\0132\016.TSP.Ref"
  "erence\"\267\001\n$RowColumnSelectionTransformer"
  "Archive\022;\n\005super\030\001 \002(\0132,.TST.TableSubSel"
  "ectionTransformerBaseArchive\0221\n\016selectio"
  "n_type\030\002 \002(\0162\031.TST.SelectionTypeArchive\022"
  "\037\n\014row_col_uids\030\003 \003(\0132\t.TSP.UUID\"\273\002\n\036Com"
  "mandCategoryMoveRowsArchive\022\'\n\005super\030\001 \002"
  "(\0132\030.TST.TableCommandArchive\022\023\n\013action_t"
  "ype\030\002 \002(\r\022%\n\022category_row_order\030\003 \003(\0132\t."
  "TSP.UUID\022*\n\027undo_category_row_order\030\004 \003("
  "\0132\t.TSP.UUID\022%\n\rcell_diff_map\030\005 \002(\0132\016.TS"
  "P.Reference\022*\n\022undo_cell_diff_map\030\006 \001(\0132"
  "\016.TSP.Reference\0225\n\020grouping_columns\030\007 \001("
  "\0132\033.TST.GroupColumnListArchive\"\313\001\n1Comma"
  "ndRewriteHiddenStatesForGroupByChangeArc"
  "hive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandAr"
  "chive\0223\n\017group_by_change\030\002 \002(\0132\032.TSCE.Gr"
  "oupByChangeArchive\0228\n\017collapsed_state\030\003 "
  "\001(\0132\037.TST.ExpandCollapseStateArchive\"\357\002\n"
  "-CommandRewritePencilAnnotationFormulasA"
  "rchive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommand"
  "Archive\0224\n\014rewrite_spec\030\002 \002(\0132\036.TST.Form"
  "ulaRewriteSpecArchive\0229\n\023formulas_to_rew"
  "rite\030\003 \002(\0132\034.TSCE.FormulasForUndoArchive"
  "\022_\n\024annotations_for_undo\030\004 \003(\0132A.TST.Com"
  "mandRewritePencilAnnotationFormulasArchi"
  "ve.AnnotationPair\032C\n\016AnnotationPair\022\r\n\005i"
  "ndex\030\001 \002(\004\022\"\n\nannotation\030\002 \002(\0132\016.TSP.Ref"
  "erence\"\262\020\n CommandPivotSetPivotRulesArch"
  "ive\022\'\n\005super\030\001 \002(\0132\030.TST.TableCommandArc"
  "hive\022/\n\034new_target_pivot_refresh_uid\030\002 \001"
  "(\0132\t.TSP.UUID\0226\n\021new_row_groupings\030\003 \001(\013"
  "2\033.TST.GroupColumnListArchive\0226\n\021old_row"
  "_groupings\030\004 \001(\0132\033.TST.GroupColumnListAr"
  "chive\0229\n\024new_column_groupings\030\005 \001(\0132\033.TS"
  "T.GroupColumnListArchive\0229\n\024old_column_g"
  "roupings\030\006 \001(\0132\033.TST.GroupColumnListArch"
  "ive\0227\n\016new_aggregates\030\007 \001(\0132\037.TST.Column"
  "AggregateListArchive\0227\n\016old_aggregates\030\010"
  " \001(\0132\037.TST.ColumnAggregateListArchive\022<\n"
  "\030new_flattening_dimension\030\t \001(\0162\032.TST.Ta"
  "bleDimensionArchive\022<\n\030old_flattening_di"
  "mension\030\n \001(\0162\032.TST.TableDimensionArchiv"
  "e\022,\n\024new_pivot_data_model\030\013 \001(\0132\016.TSP.Re"
  "ference\022,\n\024old_pivot_data_model\030\014 \001(\0132\016."
  "TSP.Reference\022(\n\025new_pivot_refresh_uid\030\r"
  " \001(\0132\t.TSP.UUID\022(\n\025old_pivot_refresh_uid"
  "\030\016 \001(\0132\t.TSP.UUID\022#\n\033new_pivot_refresh_t"
  "imestamp\030\017 \001(\001\022#\n\033old_pivot_refresh_time"
  "stamp\030\020 \001(\001\022\'\n\017new_options_map\030\021 \001(\0132\016.T"
  "SP.Reference\022\'\n\017old_options_map\030\022 \001(\0132\016."
  "TSP.Reference\022%\n\022new_view_row_order\030\023 \003("
  "\0132\t.TSP.UUID\022%\n\022old_view_row_order\030\024 \003(\013"
  "2\t.TSP.UUID\022(\n\025new_view_column_order\030\025 \003"
  "(\0132\t.TSP.UUID\022(\n\025old_view_column_order\030\026"
  " \003(\0132\t.TSP.UUID\022+\n\030new_collapsed_row_gro"
  "ups\030\027 \003(\0132\t.TSP.UUID\022+\n\030old_collapsed_ro"
  "w_groups\030\030 \003(\0132\t.TSP.UUID\022.\n\033new_collaps"
  "ed_column_groups\030\031 \003(\0132\t.TSP.UUID\022.\n\033old"
  "_collapsed_column_groups\030\032 \003(\0132\t.TSP.UUI"
  "D\022K\n\036new_hierarchical_cell_diff_map\030\033 \001("
  "\0132#.TST.HierarchicalCellDiffMapArchive\022K"
  "\n\036old_hierarchical_cell_diff_map\030\034 \001(\0132#"
  ".TST.HierarchicalCellDiffMapArchive\0228\n f"
  "ormula_rewrite_command_for_undo\030\035 \001(\0132\016."
  "TSP.Reference\0220\n\022new_body_uid_tract\030\036 \001("
  "\0132\024.TSP.UUIDRectArchive\0220\n\022old_body_uid_"
  "tract\030\037 \001(\0132\024.TSP.UUIDRectArchive\022/\n\034old"
  "_target_pivot_refresh_uid\030  \001(\0132\t.TSP.UU"
  "ID\022>\n+new_target_pivot_row_column_rule_c"
  "hange_uid\030! \001(\0132\t.TSP.UUID\022>\n+old_target"
  "_pivot_row_column_rule_change_uid\030\" \001(\0132"
  "\t.TSP.UUID\022=\n*new_target_pivot_aggregate"
  "_rule_change_uid\030# \001(\0132\t.TSP.UUID\022=\n*old"
  "_target_pivot_aggregate_rule_change_uid\030"
  "$ \001(\0132\t.TSP.UUID\022\032\n\022is_order_finalized\030%"
  " \001(\010\022&\n\016new_filter_set\030\' \001(\0132\016.TSP.Refer"
  "ence\022&\n\016old_filter_set\030( \001(\0132\016.TSP.Refer"
  "ence\022\036\n\026use_small_table_limits\030) \001(\010\022\037\n\027"
  "setting_filters_enabled\030* \001(\005\022$\n\034undo_se"
  "tting_filters_enabled\030+ \001(\005\"\305\001\n+CommandP"
  "ivotSetGroupingColumnOptionsArchive\022\'\n\005s"
  "uper\030\001 \002(\0132\030.TST.TableCommandArchive\022&\n\023"
  "grouping_column_uid\030\002 \001(\0132\t.TSP.UUID\022\030\n\020"
  "non_sorting_flag\030\003 \001(\r\022\022\n\nbool_value\030\004 \001"
  "(\010\022\027\n\017undo_bool_value\030\005 \001(\010\"\253\001\n&CommandP"
  "ivotHideShowGrandTotalsArchive\022\'\n\005super\030"
  "\001 \002(\0132\030.TST.TableCommandArchive\022-\n\tdimen"
  "sion\030\002 \001(\0162\032.TST.TableDimensionArchive\022\021"
  "\n\tis_hiding\030\003 \001(\010\022\026\n\016undo_is_hiding\030\004 \001("
  "\010\"\374\004\n\027CommandPivotSortArchive\022\'\n\005super\030\001"
  " \002(\0132\030.TST.TableCommandArchive\022-\n\tdimens"
  "ion\030\002 \001(\0162\032.TST.TableDimensionArchive\022\037\n"
  "\014column_order\030\003 \003(\0132\t.TSP.UUID\022$\n\021undo_c"
  "olumn_order\030\004 \003(\0132\t.TSP.UUID\022\034\n\trow_orde"
  "r\030\005 \003(\0132\t.TSP.UUID\022!\n\016undo_row_order\030\006 \003"
  "(\0132\t.TSP.UUID\022:\n\'target_pivot_row_column"
  "_rule_change_uid\030\007 \002(\0132\t.TSP.UUID\0229\n&tar"
  "get_pivot_aggregate_rule_change_uid\030\010 \002("
  "\0132\t.TSP.UUID\0220\n\035target_pivot_data_refres"
  "h_uid\030\t \002(\0132\t.TSP.UUID\022&\n\023grouping_colum"
  "n_uid\030\n \001(\0132\t.TSP.UUID\022\025\n\rsorting_flags\030"
  "\013 \001(\r\022\032\n\022undo_sorting_flags\030\014 \001(\r\022-\n\032sor"
  "ting_aggregate_rule_uid\030\r \001(\0132\t.TSP.UUID"
  "\0222\n\037undo_sorting_aggregate_rule_uid\030\016 \001("
  "\0132\t.TSP.UUID\022\032\n\022is_order_finalized\030\017 \002(\010"
  "\"\202\001\n&CommandRewriteTrackedReferencesArch"
  "ive\022\"\n\005super\030\001 \002(\0132\023.TSK.CommandArchive\022"
  "4\n\014rewrite_spec\030\002 \001(\0132\036.TST.FormulaRewri"
  "teSpecArchive\"\304\001\n\"CommandExtendTableIDHi"
  "storyArchive\022\"\n\005super\030\001 \002(\0132\023.TSK.Comman"
  "dArchive\0224\n\014rewrite_spec\030\002 \002(\0132\036.TST.For"
  "mulaRewriteSpecArchive\022D\n\032table_uid_hist"
  "ory_rollback\030\003 \001(\0132 .TSCE.RewriteTableUI"
  "DInfoArchive*i\n\tTableArea\022\021\n\rTableAreaBo"
  "dy\020\001\022\026\n\022TableAreaHeaderRow\020\002\022\031\n\025TableAre"
  "aHeaderColumn\020\003\022\026\n\022TableAreaFooterRow\020\004*"
  "\213\002\n\023TableAreaTransition\022&\n\"TableAreaTran"
  "sitionHeaderRowToBody\020\001\022&\n\"TableAreaTran"
  "sitionBodyToHeaderRow\020\002\022&\n\"TableAreaTran"
  "sitionFooterRowToBody\020\003\022&\n\"TableAreaTran"
  "sitionBodyToFooterRow\020\004\022)\n%TableAreaTran"
  "sitionHeaderColumnToBody\020\005\022)\n%TableAreaT"
  "ransitionBodyToHeaderColumn\020\006*\304\001\n\033Column"
  "RowBundleItemTypeEnum\022\027\n\023ColumnRowTypeAn"
  "chor\020\000\022\032\n\026ColumnRowTypeHeaderRow\020\001\022\030\n\024Co"
  "lumnRowTypeBodyRow\020\002\022\032\n\026ColumnRowTypeFoo"
  "terRow\020\003\022\035\n\031ColumnRowTypeHeaderColumn\020\004\022"
  "\033\n\027ColumnRowTypeBodyColumn\020\005"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_TSTCommandArchives_2eproto_deps[9] = {
  &::descriptor_table_TSCEArchives_2eproto,
  &::descriptor_table_TSDArchives_2eproto,
  &::descriptor_table_TSDCommandArchives_2eproto,
  &::descriptor_table_TSKArchives_2eproto,
  &::descriptor_table_TSPMessages_2eproto,
  &::descriptor_table_TSSArchives_2eproto,
  &::descriptor_table_TSTArchives_2eproto,
  &::descriptor_table_TSTArchives_2esos_2eproto,
  &::descriptor_table_TSWPArchives_2eproto,
};
static ::_pbi::once_flag descriptor_table_TSTCommandArchives_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_TSTCommandArchives_2eproto = {
    false, false, 29188, descriptor_table_protodef_TSTCommandArchives_2eproto,
    "TSTCommandArchives.proto",
    &descriptor_table_TSTCommandArchives_2eproto_once, descriptor_table_TSTCommandArchives_2eproto_deps, 9, 109,
    schemas, file_default_instances, TableStruct_TSTCommandArchives_2eproto::offsets,
    file_level_metadata_TSTCommandArchives_2eproto, file_level_enum_descriptors_TSTCommandArchives_2eproto,
    file_level_service_descriptors_TSTCommandArchives_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_TSTCommandArchives_2eproto_getter() {
  return &descriptor_table_TSTCommandArchives_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_TSTCommandArchives_2eproto(&descriptor_table_TSTCommandArchives_2eproto);
namespace TST {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableArea_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTCommandArchives_2eproto);
  return file_level_enum_descriptors_TSTCommandArchives_2eproto[0];
}
bool TableArea_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TableAreaTransition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTCommandArchives_2eproto);
  return file_level_enum_descriptors_TSTCommandArchives_2eproto[1];
}
bool TableAreaTransition_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ColumnRowBundleItemTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_TSTCommandArchives_2eproto);
  return file_level_enum_descriptors_TSTCommandArchives_2eproto[2];
}
bool ColumnRowBundleItemTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TableCommandArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableCommandArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const TableCommandArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDPath& table_info_id_path(const TableCommandArchive* msg);
  static void set_has_table_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_commandname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& default_cell_styles_container(const TableCommandArchive* msg);
  static void set_has_default_cell_styles_container(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_random_seed_lo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_random_seed_hi(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_inverse(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_old_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_old_random_seed(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TSK::CommandArchive&
TableCommandArchive::_Internal::super(const TableCommandArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
TableCommandArchive::_Internal::table_info_id_path(const TableCommandArchive* msg) {
  return *msg->_impl_.table_info_id_path_;
}
const ::TSP::Reference&
TableCommandArchive::_Internal::default_cell_styles_container(const TableCommandArchive* msg) {
  return *msg->_impl_.default_cell_styles_container_;
}
void TableCommandArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TableCommandArchive::clear_table_info_id_path() {
  if (_impl_.table_info_id_path_ != nullptr) _impl_.table_info_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TableCommandArchive::clear_default_cell_styles_container() {
  if (_impl_.default_cell_styles_container_ != nullptr) _impl_.default_cell_styles_container_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
TableCommandArchive::TableCommandArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableCommandArchive)
}
TableCommandArchive::TableCommandArchive(const TableCommandArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableCommandArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commandname_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_info_id_path_){nullptr}
    , decltype(_impl_.default_cell_styles_container_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.random_seed_lo_){}
    , decltype(_impl_.random_seed_hi_){}
    , decltype(_impl_.old_timestamp_){}
    , decltype(_impl_.old_random_seed_){}
    , decltype(_impl_.is_inverse_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.commandname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commandname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_commandname()) {
    _this->_impl_.commandname_.Set(from._internal_commandname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_table_info_id_path()) {
    _this->_impl_.table_info_id_path_ = new ::TSP::UUIDPath(*from._impl_.table_info_id_path_);
  }
  if (from._internal_has_default_cell_styles_container()) {
    _this->_impl_.default_cell_styles_container_ = new ::TSP::Reference(*from._impl_.default_cell_styles_container_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_inverse_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.is_inverse_));
  // @@protoc_insertion_point(copy_constructor:TST.TableCommandArchive)
}

inline void TableCommandArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commandname_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_info_id_path_){nullptr}
    , decltype(_impl_.default_cell_styles_container_){nullptr}
    , decltype(_impl_.timestamp_){0}
    , decltype(_impl_.random_seed_lo_){0u}
    , decltype(_impl_.random_seed_hi_){0u}
    , decltype(_impl_.old_timestamp_){0}
    , decltype(_impl_.old_random_seed_){uint64_t{0u}}
    , decltype(_impl_.is_inverse_){false}
  };
  _impl_.commandname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.commandname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TableCommandArchive::~TableCommandArchive() {
  // @@protoc_insertion_point(destructor:TST.TableCommandArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableCommandArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commandname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.table_info_id_path_;
  if (this != internal_default_instance()) delete _impl_.default_cell_styles_container_;
}

void TableCommandArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableCommandArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableCommandArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.commandname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.table_info_id_path_ != nullptr);
      _impl_.table_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.default_cell_styles_container_ != nullptr);
      _impl_.default_cell_styles_container_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.old_timestamp_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.old_timestamp_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.old_random_seed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_inverse_) -
        reinterpret_cast<char*>(&_impl_.old_random_seed_)) + sizeof(_impl_.is_inverse_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCommandArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath table_info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string commandname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_commandname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.TableCommandArchive.commandname");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference default_cell_styles_container = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_cell_styles_container(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 random_seed_lo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_random_seed_lo(&has_bits);
          _impl_.random_seed_lo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 random_seed_hi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_random_seed_hi(&has_bits);
          _impl_.random_seed_hi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_inverse = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_inverse(&has_bits);
          _impl_.is_inverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double old_timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_old_timestamp(&has_bits);
          _impl_.old_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 old_random_seed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_old_random_seed(&has_bits);
          _impl_.old_random_seed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableCommandArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableCommandArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath table_info_id_path = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table_info_id_path(this),
        _Internal::table_info_id_path(this).GetCachedSize(), target, stream);
  }

  // optional string commandname = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_commandname().data(), static_cast<int>(this->_internal_commandname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.TableCommandArchive.commandname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_commandname(), target);
  }

  // optional .TSP.Reference default_cell_styles_container = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::default_cell_styles_container(this),
        _Internal::default_cell_styles_container(this).GetCachedSize(), target, stream);
  }

  // optional double timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_timestamp(), target);
  }

  // optional uint32 random_seed_lo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_random_seed_lo(), target);
  }

  // optional uint32 random_seed_hi = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_random_seed_hi(), target);
  }

  // optional bool is_inverse = 8;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_inverse(), target);
  }

  // optional double old_timestamp = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_old_timestamp(), target);
  }

  // optional uint64 old_random_seed = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_old_random_seed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableCommandArchive)
  return target;
}

size_t TableCommandArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.TableCommandArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_table_info_id_path()) {
    // required .TSP.UUIDPath table_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_info_id_path_);
  }

  return total_size;
}
size_t TableCommandArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableCommandArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath table_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_info_id_path_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string commandname = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_commandname());
  }

  if (cached_has_bits & 0x000000f8u) {
    // optional .TSP.Reference default_cell_styles_container = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.default_cell_styles_container_);
    }

    // optional double timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional uint32 random_seed_lo = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_random_seed_lo());
    }

    // optional uint32 random_seed_hi = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_random_seed_hi());
    }

    // optional double old_timestamp = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 old_random_seed = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_old_random_seed());
    }

    // optional bool is_inverse = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableCommandArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableCommandArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableCommandArchive::GetClassData() const { return &_class_data_; }


void TableCommandArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableCommandArchive*>(&to_msg);
  auto& from = static_cast<const TableCommandArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableCommandArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_commandname(from._internal_commandname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_table_info_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_table_info_id_path());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_default_cell_styles_container()->::TSP::Reference::MergeFrom(
          from._internal_default_cell_styles_container());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.random_seed_lo_ = from._impl_.random_seed_lo_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.random_seed_hi_ = from._impl_.random_seed_hi_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.old_timestamp_ = from._impl_.old_timestamp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.old_random_seed_ = from._impl_.old_random_seed_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_inverse_ = from._impl_.is_inverse_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableCommandArchive::CopyFrom(const TableCommandArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableCommandArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCommandArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_table_info_id_path()) {
    if (!_impl_.table_info_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_default_cell_styles_container()) {
    if (!_impl_.default_cell_styles_container_->IsInitialized()) return false;
  }
  return true;
}

void TableCommandArchive::InternalSwap(TableCommandArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.commandname_, lhs_arena,
      &other->_impl_.commandname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableCommandArchive, _impl_.is_inverse_)
      + sizeof(TableCommandArchive::_impl_.is_inverse_)
      - PROTOBUF_FIELD_OFFSET(TableCommandArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCommandArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[0]);
}

// ===================================================================

class CommandApplyCellContentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyCellContentsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyCellContentsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandApplyCellContentsArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& rollback_cell_diff_map(const CommandApplyCellContentsArchive* msg);
  static void set_has_rollback_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyCellContentsArchive::_Internal::super(const CommandApplyCellContentsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandApplyCellContentsArchive::_Internal::cell_diff_map(const CommandApplyCellContentsArchive* msg) {
  return *msg->_impl_.cell_diff_map_;
}
const ::TSP::Reference&
CommandApplyCellContentsArchive::_Internal::rollback_cell_diff_map(const CommandApplyCellContentsArchive* msg) {
  return *msg->_impl_.rollback_cell_diff_map_;
}
void CommandApplyCellContentsArchive::clear_cell_diff_map() {
  if (_impl_.cell_diff_map_ != nullptr) _impl_.cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandApplyCellContentsArchive::clear_rollback_cell_diff_map() {
  if (_impl_.rollback_cell_diff_map_ != nullptr) _impl_.rollback_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandApplyCellContentsArchive::clear_custom_format_keys() {
  _impl_.custom_format_keys_.Clear();
}
CommandApplyCellContentsArchive::CommandApplyCellContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyCellContentsArchive)
}
CommandApplyCellContentsArchive::CommandApplyCellContentsArchive(const CommandApplyCellContentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandApplyCellContentsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_format_keys_){from._impl_.custom_format_keys_}
    , decltype(_impl_.action_string_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.rollback_cell_diff_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action_string()) {
    _this->_impl_.action_string_.Set(from._internal_action_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_diff_map()) {
    _this->_impl_.cell_diff_map_ = new ::TSP::Reference(*from._impl_.cell_diff_map_);
  }
  if (from._internal_has_rollback_cell_diff_map()) {
    _this->_impl_.rollback_cell_diff_map_ = new ::TSP::Reference(*from._impl_.rollback_cell_diff_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyCellContentsArchive)
}

inline void CommandApplyCellContentsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_format_keys_){arena}
    , decltype(_impl_.action_string_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.rollback_cell_diff_map_){nullptr}
  };
  _impl_.action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandApplyCellContentsArchive::~CommandApplyCellContentsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyCellContentsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandApplyCellContentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_format_keys_.~RepeatedPtrField();
  _impl_.action_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.rollback_cell_diff_map_;
}

void CommandApplyCellContentsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandApplyCellContentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyCellContentsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_format_keys_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.cell_diff_map_ != nullptr);
      _impl_.cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.rollback_cell_diff_map_ != nullptr);
      _impl_.rollback_cell_diff_map_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyCellContentsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference rollback_cell_diff_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string action_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_action_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CommandApplyCellContentsArchive.action_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandApplyCellContentsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyCellContentsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_diff_map(this),
        _Internal::cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference rollback_cell_diff_map = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rollback_cell_diff_map(this),
        _Internal::rollback_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_format_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_format_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string action_string = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_string().data(), static_cast<int>(this->_internal_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandApplyCellContentsArchive.action_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyCellContentsArchive)
  return target;
}

size_t CommandApplyCellContentsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyCellContentsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);
  }

  return total_size;
}
size_t CommandApplyCellContentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyCellContentsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID custom_format_keys = 4;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->_impl_.custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string action_string = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_string());
  }

  // optional .TSP.Reference rollback_cell_diff_map = 3;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rollback_cell_diff_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyCellContentsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandApplyCellContentsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyCellContentsArchive::GetClassData() const { return &_class_data_; }


void CommandApplyCellContentsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandApplyCellContentsArchive*>(&to_msg);
  auto& from = static_cast<const CommandApplyCellContentsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyCellContentsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_format_keys_.MergeFrom(from._impl_.custom_format_keys_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_action_string(from._internal_action_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_rollback_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_rollback_cell_diff_map());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyCellContentsArchive::CopyFrom(const CommandApplyCellContentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyCellContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyCellContentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_format_keys_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!_impl_.cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_rollback_cell_diff_map()) {
    if (!_impl_.rollback_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyCellContentsArchive::InternalSwap(CommandApplyCellContentsArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.custom_format_keys_.InternalSwap(&other->_impl_.custom_format_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_string_, lhs_arena,
      &other->_impl_.action_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyCellContentsArchive, _impl_.rollback_cell_diff_map_)
      + sizeof(CommandApplyCellContentsArchive::_impl_.rollback_cell_diff_map_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyCellContentsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyCellContentsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[1]);
}

// ===================================================================

class CommandApplyCellDiffMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyCellDiffMapArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyCellDiffMapArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandApplyCellDiffMapArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_should_allow_merge_fragments(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandApplyCellDiffMapArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyCellDiffMapArchive::_Internal::super(const CommandApplyCellDiffMapArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandApplyCellDiffMapArchive::_Internal::cell_diff_map(const CommandApplyCellDiffMapArchive* msg) {
  return *msg->_impl_.cell_diff_map_;
}
const ::TSP::Reference&
CommandApplyCellDiffMapArchive::_Internal::inverse_cell_diff_map(const CommandApplyCellDiffMapArchive* msg) {
  return *msg->_impl_.inverse_cell_diff_map_;
}
void CommandApplyCellDiffMapArchive::clear_cell_diff_map() {
  if (_impl_.cell_diff_map_ != nullptr) _impl_.cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandApplyCellDiffMapArchive::clear_inverse_cell_diff_map() {
  if (_impl_.inverse_cell_diff_map_ != nullptr) _impl_.inverse_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandApplyCellDiffMapArchive::clear_custom_format_keys() {
  _impl_.custom_format_keys_.Clear();
}
CommandApplyCellDiffMapArchive::CommandApplyCellDiffMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyCellDiffMapArchive)
}
CommandApplyCellDiffMapArchive::CommandApplyCellDiffMapArchive(const CommandApplyCellDiffMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandApplyCellDiffMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_format_keys_){from._impl_.custom_format_keys_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
    , decltype(_impl_.should_allow_merge_fragments_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_diff_map()) {
    _this->_impl_.cell_diff_map_ = new ::TSP::Reference(*from._impl_.cell_diff_map_);
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    _this->_impl_.inverse_cell_diff_map_ = new ::TSP::Reference(*from._impl_.inverse_cell_diff_map_);
  }
  _this->_impl_.should_allow_merge_fragments_ = from._impl_.should_allow_merge_fragments_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyCellDiffMapArchive)
}

inline void CommandApplyCellDiffMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_format_keys_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
    , decltype(_impl_.should_allow_merge_fragments_){false}
  };
}

CommandApplyCellDiffMapArchive::~CommandApplyCellDiffMapArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyCellDiffMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandApplyCellDiffMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_format_keys_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.inverse_cell_diff_map_;
}

void CommandApplyCellDiffMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandApplyCellDiffMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyCellDiffMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_format_keys_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_diff_map_ != nullptr);
      _impl_.cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.inverse_cell_diff_map_ != nullptr);
      _impl_.inverse_cell_diff_map_->Clear();
    }
  }
  _impl_.should_allow_merge_fragments_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyCellDiffMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool should_allow_merge_fragments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_should_allow_merge_fragments(&has_bits);
          _impl_.should_allow_merge_fragments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandApplyCellDiffMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyCellDiffMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_diff_map(this),
        _Internal::cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // required bool should_allow_merge_fragments = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_should_allow_merge_fragments(), target);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::inverse_cell_diff_map(this),
        _Internal::inverse_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_format_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_format_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyCellDiffMapArchive)
  return target;
}

size_t CommandApplyCellDiffMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyCellDiffMapArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);
  }

  if (_internal_has_should_allow_merge_fragments()) {
    // required bool should_allow_merge_fragments = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandApplyCellDiffMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyCellDiffMapArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);

    // required bool should_allow_merge_fragments = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID custom_format_keys = 5;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->_impl_.custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inverse_cell_diff_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyCellDiffMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandApplyCellDiffMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyCellDiffMapArchive::GetClassData() const { return &_class_data_; }


void CommandApplyCellDiffMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandApplyCellDiffMapArchive*>(&to_msg);
  auto& from = static_cast<const CommandApplyCellDiffMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyCellDiffMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_format_keys_.MergeFrom(from._impl_.custom_format_keys_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_inverse_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.should_allow_merge_fragments_ = from._impl_.should_allow_merge_fragments_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyCellDiffMapArchive::CopyFrom(const CommandApplyCellDiffMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyCellDiffMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyCellDiffMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_format_keys_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!_impl_.cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!_impl_.inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyCellDiffMapArchive::InternalSwap(CommandApplyCellDiffMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.custom_format_keys_.InternalSwap(&other->_impl_.custom_format_keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyCellDiffMapArchive, _impl_.should_allow_merge_fragments_)
      + sizeof(CommandApplyCellDiffMapArchive::_impl_.should_allow_merge_fragments_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyCellDiffMapArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyCellDiffMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[2]);
}

// ===================================================================

class CommandApplyCellMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyCellMapArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyCellMapArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& redo_cell_map(const CommandApplyCellMapArchive* msg);
  static void set_has_redo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_cell_map(const CommandApplyCellMapArchive* msg);
  static void set_has_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_formula_rewrite_command(const CommandApplyCellMapArchive* msg);
  static void set_has_undo_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_merge_owner_rollback_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_from_paste(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000023) ^ 0x00000023) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyCellMapArchive::_Internal::super(const CommandApplyCellMapArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandApplyCellMapArchive::_Internal::redo_cell_map(const CommandApplyCellMapArchive* msg) {
  return *msg->_impl_.redo_cell_map_;
}
const ::TSP::Reference&
CommandApplyCellMapArchive::_Internal::undo_cell_map(const CommandApplyCellMapArchive* msg) {
  return *msg->_impl_.undo_cell_map_;
}
const ::TSP::Reference&
CommandApplyCellMapArchive::_Internal::undo_formula_rewrite_command(const CommandApplyCellMapArchive* msg) {
  return *msg->_impl_.undo_formula_rewrite_command_;
}
void CommandApplyCellMapArchive::clear_redo_cell_map() {
  if (_impl_.redo_cell_map_ != nullptr) _impl_.redo_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandApplyCellMapArchive::clear_undo_cell_map() {
  if (_impl_.undo_cell_map_ != nullptr) _impl_.undo_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandApplyCellMapArchive::clear_undo_formula_rewrite_command() {
  if (_impl_.undo_formula_rewrite_command_ != nullptr) _impl_.undo_formula_rewrite_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandApplyCellMapArchive::clear_custom_format_keys() {
  _impl_.custom_format_keys_.Clear();
}
void CommandApplyCellMapArchive::clear_formula_rewrite_commands() {
  _impl_.formula_rewrite_commands_.Clear();
}
CommandApplyCellMapArchive::CommandApplyCellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyCellMapArchive)
}
CommandApplyCellMapArchive::CommandApplyCellMapArchive(const CommandApplyCellMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandApplyCellMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_format_keys_){from._impl_.custom_format_keys_}
    , decltype(_impl_.formula_rewrite_commands_){from._impl_.formula_rewrite_commands_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.redo_cell_map_){nullptr}
    , decltype(_impl_.undo_cell_map_){nullptr}
    , decltype(_impl_.undo_formula_rewrite_command_){nullptr}
    , decltype(_impl_.merge_owner_rollback_index_){}
    , decltype(_impl_.is_from_paste_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_redo_cell_map()) {
    _this->_impl_.redo_cell_map_ = new ::TSP::Reference(*from._impl_.redo_cell_map_);
  }
  if (from._internal_has_undo_cell_map()) {
    _this->_impl_.undo_cell_map_ = new ::TSP::Reference(*from._impl_.undo_cell_map_);
  }
  if (from._internal_has_undo_formula_rewrite_command()) {
    _this->_impl_.undo_formula_rewrite_command_ = new ::TSP::Reference(*from._impl_.undo_formula_rewrite_command_);
  }
  ::memcpy(&_impl_.merge_owner_rollback_index_, &from._impl_.merge_owner_rollback_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_from_paste_) -
    reinterpret_cast<char*>(&_impl_.merge_owner_rollback_index_)) + sizeof(_impl_.is_from_paste_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyCellMapArchive)
}

inline void CommandApplyCellMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_format_keys_){arena}
    , decltype(_impl_.formula_rewrite_commands_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.redo_cell_map_){nullptr}
    , decltype(_impl_.undo_cell_map_){nullptr}
    , decltype(_impl_.undo_formula_rewrite_command_){nullptr}
    , decltype(_impl_.merge_owner_rollback_index_){0u}
    , decltype(_impl_.is_from_paste_){false}
  };
}

CommandApplyCellMapArchive::~CommandApplyCellMapArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyCellMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandApplyCellMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_format_keys_.~RepeatedPtrField();
  _impl_.formula_rewrite_commands_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.redo_cell_map_;
  if (this != internal_default_instance()) delete _impl_.undo_cell_map_;
  if (this != internal_default_instance()) delete _impl_.undo_formula_rewrite_command_;
}

void CommandApplyCellMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandApplyCellMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyCellMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_format_keys_.Clear();
  _impl_.formula_rewrite_commands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.redo_cell_map_ != nullptr);
      _impl_.redo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.undo_cell_map_ != nullptr);
      _impl_.undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.undo_formula_rewrite_command_ != nullptr);
      _impl_.undo_formula_rewrite_command_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.merge_owner_rollback_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_from_paste_) -
        reinterpret_cast<char*>(&_impl_.merge_owner_rollback_index_)) + sizeof(_impl_.is_from_paste_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyCellMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference redo_cell_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_redo_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_formula_rewrite_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 merge_owner_rollback_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_merge_owner_rollback_index(&has_bits);
          _impl_.merge_owner_rollback_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_from_paste = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_from_paste(&has_bits);
          _impl_.is_from_paste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference formula_rewrite_commands = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_rewrite_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandApplyCellMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyCellMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference redo_cell_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::redo_cell_map(this),
        _Internal::redo_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_cell_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::undo_cell_map(this),
        _Internal::undo_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::undo_formula_rewrite_command(this),
        _Internal::undo_formula_rewrite_command(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_format_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_format_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 merge_owner_rollback_index = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_merge_owner_rollback_index(), target);
  }

  // required bool is_from_paste = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_from_paste(), target);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_formula_rewrite_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_formula_rewrite_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyCellMapArchive)
  return target;
}

size_t CommandApplyCellMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyCellMapArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_redo_cell_map()) {
    // required .TSP.Reference redo_cell_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redo_cell_map_);
  }

  if (_internal_has_is_from_paste()) {
    // required bool is_from_paste = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandApplyCellMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyCellMapArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference redo_cell_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redo_cell_map_);

    // required bool is_from_paste = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID custom_format_keys = 5;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->_impl_.custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 8;
  total_size += 1UL * this->_internal_formula_rewrite_commands_size();
  for (const auto& msg : this->_impl_.formula_rewrite_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference undo_cell_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_cell_map_);
    }

    // optional .TSP.Reference undo_formula_rewrite_command = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_formula_rewrite_command_);
    }

    // optional uint32 merge_owner_rollback_index = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_merge_owner_rollback_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyCellMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandApplyCellMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyCellMapArchive::GetClassData() const { return &_class_data_; }


void CommandApplyCellMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandApplyCellMapArchive*>(&to_msg);
  auto& from = static_cast<const CommandApplyCellMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyCellMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_format_keys_.MergeFrom(from._impl_.custom_format_keys_);
  _this->_impl_.formula_rewrite_commands_.MergeFrom(from._impl_.formula_rewrite_commands_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_redo_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_redo_cell_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_undo_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_cell_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_undo_formula_rewrite_command()->::TSP::Reference::MergeFrom(
          from._internal_undo_formula_rewrite_command());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.merge_owner_rollback_index_ = from._impl_.merge_owner_rollback_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_from_paste_ = from._impl_.is_from_paste_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyCellMapArchive::CopyFrom(const CommandApplyCellMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyCellMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyCellMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_format_keys_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.formula_rewrite_commands_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_redo_cell_map()) {
    if (!_impl_.redo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_map()) {
    if (!_impl_.undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_formula_rewrite_command()) {
    if (!_impl_.undo_formula_rewrite_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyCellMapArchive::InternalSwap(CommandApplyCellMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.custom_format_keys_.InternalSwap(&other->_impl_.custom_format_keys_);
  _impl_.formula_rewrite_commands_.InternalSwap(&other->_impl_.formula_rewrite_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyCellMapArchive, _impl_.is_from_paste_)
      + sizeof(CommandApplyCellMapArchive::_impl_.is_from_paste_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyCellMapArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyCellMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[3]);
}

// ===================================================================

class CommandApplyConcurrentCellMapArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyConcurrentCellMapArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyConcurrentCellMapArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& redo_concurrent_cell_map(const CommandApplyConcurrentCellMapArchive* msg);
  static void set_has_redo_concurrent_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_concurrent_cell_map(const CommandApplyConcurrentCellMapArchive* msg);
  static void set_has_undo_concurrent_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_formula_rewrite_command(const CommandApplyConcurrentCellMapArchive* msg);
  static void set_has_undo_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_merge_owner_rollback_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_is_from_paste(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000023) ^ 0x00000023) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyConcurrentCellMapArchive::_Internal::super(const CommandApplyConcurrentCellMapArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandApplyConcurrentCellMapArchive::_Internal::redo_concurrent_cell_map(const CommandApplyConcurrentCellMapArchive* msg) {
  return *msg->_impl_.redo_concurrent_cell_map_;
}
const ::TSP::Reference&
CommandApplyConcurrentCellMapArchive::_Internal::undo_concurrent_cell_map(const CommandApplyConcurrentCellMapArchive* msg) {
  return *msg->_impl_.undo_concurrent_cell_map_;
}
const ::TSP::Reference&
CommandApplyConcurrentCellMapArchive::_Internal::undo_formula_rewrite_command(const CommandApplyConcurrentCellMapArchive* msg) {
  return *msg->_impl_.undo_formula_rewrite_command_;
}
void CommandApplyConcurrentCellMapArchive::clear_redo_concurrent_cell_map() {
  if (_impl_.redo_concurrent_cell_map_ != nullptr) _impl_.redo_concurrent_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandApplyConcurrentCellMapArchive::clear_undo_concurrent_cell_map() {
  if (_impl_.undo_concurrent_cell_map_ != nullptr) _impl_.undo_concurrent_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandApplyConcurrentCellMapArchive::clear_undo_formula_rewrite_command() {
  if (_impl_.undo_formula_rewrite_command_ != nullptr) _impl_.undo_formula_rewrite_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandApplyConcurrentCellMapArchive::clear_custom_format_keys() {
  _impl_.custom_format_keys_.Clear();
}
void CommandApplyConcurrentCellMapArchive::clear_formula_rewrite_commands() {
  _impl_.formula_rewrite_commands_.Clear();
}
CommandApplyConcurrentCellMapArchive::CommandApplyConcurrentCellMapArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyConcurrentCellMapArchive)
}
CommandApplyConcurrentCellMapArchive::CommandApplyConcurrentCellMapArchive(const CommandApplyConcurrentCellMapArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandApplyConcurrentCellMapArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_format_keys_){from._impl_.custom_format_keys_}
    , decltype(_impl_.formula_rewrite_commands_){from._impl_.formula_rewrite_commands_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.redo_concurrent_cell_map_){nullptr}
    , decltype(_impl_.undo_concurrent_cell_map_){nullptr}
    , decltype(_impl_.undo_formula_rewrite_command_){nullptr}
    , decltype(_impl_.merge_owner_rollback_index_){}
    , decltype(_impl_.is_from_paste_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_redo_concurrent_cell_map()) {
    _this->_impl_.redo_concurrent_cell_map_ = new ::TSP::Reference(*from._impl_.redo_concurrent_cell_map_);
  }
  if (from._internal_has_undo_concurrent_cell_map()) {
    _this->_impl_.undo_concurrent_cell_map_ = new ::TSP::Reference(*from._impl_.undo_concurrent_cell_map_);
  }
  if (from._internal_has_undo_formula_rewrite_command()) {
    _this->_impl_.undo_formula_rewrite_command_ = new ::TSP::Reference(*from._impl_.undo_formula_rewrite_command_);
  }
  ::memcpy(&_impl_.merge_owner_rollback_index_, &from._impl_.merge_owner_rollback_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_from_paste_) -
    reinterpret_cast<char*>(&_impl_.merge_owner_rollback_index_)) + sizeof(_impl_.is_from_paste_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyConcurrentCellMapArchive)
}

inline void CommandApplyConcurrentCellMapArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_format_keys_){arena}
    , decltype(_impl_.formula_rewrite_commands_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.redo_concurrent_cell_map_){nullptr}
    , decltype(_impl_.undo_concurrent_cell_map_){nullptr}
    , decltype(_impl_.undo_formula_rewrite_command_){nullptr}
    , decltype(_impl_.merge_owner_rollback_index_){0u}
    , decltype(_impl_.is_from_paste_){false}
  };
}

CommandApplyConcurrentCellMapArchive::~CommandApplyConcurrentCellMapArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyConcurrentCellMapArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandApplyConcurrentCellMapArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_format_keys_.~RepeatedPtrField();
  _impl_.formula_rewrite_commands_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.redo_concurrent_cell_map_;
  if (this != internal_default_instance()) delete _impl_.undo_concurrent_cell_map_;
  if (this != internal_default_instance()) delete _impl_.undo_formula_rewrite_command_;
}

void CommandApplyConcurrentCellMapArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandApplyConcurrentCellMapArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyConcurrentCellMapArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.custom_format_keys_.Clear();
  _impl_.formula_rewrite_commands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.redo_concurrent_cell_map_ != nullptr);
      _impl_.redo_concurrent_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.undo_concurrent_cell_map_ != nullptr);
      _impl_.undo_concurrent_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.undo_formula_rewrite_command_ != nullptr);
      _impl_.undo_formula_rewrite_command_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.merge_owner_rollback_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_from_paste_) -
        reinterpret_cast<char*>(&_impl_.merge_owner_rollback_index_)) + sizeof(_impl_.is_from_paste_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyConcurrentCellMapArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference redo_concurrent_cell_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_redo_concurrent_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_concurrent_cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_concurrent_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_formula_rewrite_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID custom_format_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_format_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint32 merge_owner_rollback_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_merge_owner_rollback_index(&has_bits);
          _impl_.merge_owner_rollback_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_from_paste = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_is_from_paste(&has_bits);
          _impl_.is_from_paste_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference formula_rewrite_commands = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_rewrite_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandApplyConcurrentCellMapArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyConcurrentCellMapArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference redo_concurrent_cell_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::redo_concurrent_cell_map(this),
        _Internal::redo_concurrent_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_concurrent_cell_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::undo_concurrent_cell_map(this),
        _Internal::undo_concurrent_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::undo_formula_rewrite_command(this),
        _Internal::undo_formula_rewrite_command(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID custom_format_keys = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_format_keys_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_format_keys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint32 merge_owner_rollback_index = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_merge_owner_rollback_index(), target);
  }

  // required bool is_from_paste = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_from_paste(), target);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_formula_rewrite_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_formula_rewrite_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyConcurrentCellMapArchive)
  return target;
}

size_t CommandApplyConcurrentCellMapArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyConcurrentCellMapArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_redo_concurrent_cell_map()) {
    // required .TSP.Reference redo_concurrent_cell_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redo_concurrent_cell_map_);
  }

  if (_internal_has_is_from_paste()) {
    // required bool is_from_paste = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandApplyConcurrentCellMapArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyConcurrentCellMapArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000023) ^ 0x00000023) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference redo_concurrent_cell_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redo_concurrent_cell_map_);

    // required bool is_from_paste = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID custom_format_keys = 5;
  total_size += 1UL * this->_internal_custom_format_keys_size();
  for (const auto& msg : this->_impl_.custom_format_keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 8;
  total_size += 1UL * this->_internal_formula_rewrite_commands_size();
  for (const auto& msg : this->_impl_.formula_rewrite_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference undo_concurrent_cell_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_concurrent_cell_map_);
    }

    // optional .TSP.Reference undo_formula_rewrite_command = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_formula_rewrite_command_);
    }

    // optional uint32 merge_owner_rollback_index = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_merge_owner_rollback_index());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyConcurrentCellMapArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandApplyConcurrentCellMapArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyConcurrentCellMapArchive::GetClassData() const { return &_class_data_; }


void CommandApplyConcurrentCellMapArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandApplyConcurrentCellMapArchive*>(&to_msg);
  auto& from = static_cast<const CommandApplyConcurrentCellMapArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyConcurrentCellMapArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.custom_format_keys_.MergeFrom(from._impl_.custom_format_keys_);
  _this->_impl_.formula_rewrite_commands_.MergeFrom(from._impl_.formula_rewrite_commands_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_redo_concurrent_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_redo_concurrent_cell_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_undo_concurrent_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_concurrent_cell_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_undo_formula_rewrite_command()->::TSP::Reference::MergeFrom(
          from._internal_undo_formula_rewrite_command());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.merge_owner_rollback_index_ = from._impl_.merge_owner_rollback_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.is_from_paste_ = from._impl_.is_from_paste_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyConcurrentCellMapArchive::CopyFrom(const CommandApplyConcurrentCellMapArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyConcurrentCellMapArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyConcurrentCellMapArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.custom_format_keys_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.formula_rewrite_commands_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_redo_concurrent_cell_map()) {
    if (!_impl_.redo_concurrent_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_concurrent_cell_map()) {
    if (!_impl_.undo_concurrent_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_formula_rewrite_command()) {
    if (!_impl_.undo_formula_rewrite_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyConcurrentCellMapArchive::InternalSwap(CommandApplyConcurrentCellMapArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.custom_format_keys_.InternalSwap(&other->_impl_.custom_format_keys_);
  _impl_.formula_rewrite_commands_.InternalSwap(&other->_impl_.formula_rewrite_commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyConcurrentCellMapArchive, _impl_.is_from_paste_)
      + sizeof(CommandApplyConcurrentCellMapArchive::_impl_.is_from_paste_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyConcurrentCellMapArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyConcurrentCellMapArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[4]);
}

// ===================================================================

class CommandChangeFreezeHeaderStateArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChangeFreezeHeaderStateArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandChangeFreezeHeaderStateArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_new_freeze_state(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prev_freeze_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandChangeFreezeHeaderStateArchive::_Internal::super(const CommandChangeFreezeHeaderStateArchive* msg) {
  return *msg->_impl_.super_;
}
CommandChangeFreezeHeaderStateArchive::CommandChangeFreezeHeaderStateArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandChangeFreezeHeaderStateArchive)
}
CommandChangeFreezeHeaderStateArchive::CommandChangeFreezeHeaderStateArchive(const CommandChangeFreezeHeaderStateArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandChangeFreezeHeaderStateArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_freeze_state_){}
    , decltype(_impl_.prev_freeze_state_){}
    , decltype(_impl_.direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.new_freeze_state_, &from._impl_.new_freeze_state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.new_freeze_state_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandChangeFreezeHeaderStateArchive)
}

inline void CommandChangeFreezeHeaderStateArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_freeze_state_){false}
    , decltype(_impl_.prev_freeze_state_){false}
    , decltype(_impl_.direction_){-1}
  };
}

CommandChangeFreezeHeaderStateArchive::~CommandChangeFreezeHeaderStateArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandChangeFreezeHeaderStateArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandChangeFreezeHeaderStateArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandChangeFreezeHeaderStateArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandChangeFreezeHeaderStateArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandChangeFreezeHeaderStateArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  ::memset(&_impl_.new_freeze_state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prev_freeze_state_) -
      reinterpret_cast<char*>(&_impl_.new_freeze_state_)) + sizeof(_impl_.prev_freeze_state_));
  _impl_.direction_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChangeFreezeHeaderStateArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableDimensionArchive direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_direction(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required bool new_freeze_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_new_freeze_state(&has_bits);
          _impl_.new_freeze_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool prev_freeze_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_prev_freeze_state(&has_bits);
          _impl_.prev_freeze_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandChangeFreezeHeaderStateArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandChangeFreezeHeaderStateArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.TableDimensionArchive direction = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // required bool new_freeze_state = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_new_freeze_state(), target);
  }

  // required bool prev_freeze_state = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_prev_freeze_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandChangeFreezeHeaderStateArchive)
  return target;
}

size_t CommandChangeFreezeHeaderStateArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandChangeFreezeHeaderStateArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_new_freeze_state()) {
    // required bool new_freeze_state = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_prev_freeze_state()) {
    // required bool prev_freeze_state = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_direction()) {
    // required .TST.TableDimensionArchive direction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return total_size;
}
size_t CommandChangeFreezeHeaderStateArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandChangeFreezeHeaderStateArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool new_freeze_state = 3;
    total_size += 1 + 1;

    // required bool prev_freeze_state = 4;
    total_size += 1 + 1;

    // required .TST.TableDimensionArchive direction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChangeFreezeHeaderStateArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandChangeFreezeHeaderStateArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChangeFreezeHeaderStateArchive::GetClassData() const { return &_class_data_; }


void CommandChangeFreezeHeaderStateArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandChangeFreezeHeaderStateArchive*>(&to_msg);
  auto& from = static_cast<const CommandChangeFreezeHeaderStateArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandChangeFreezeHeaderStateArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.new_freeze_state_ = from._impl_.new_freeze_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.prev_freeze_state_ = from._impl_.prev_freeze_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChangeFreezeHeaderStateArchive::CopyFrom(const CommandChangeFreezeHeaderStateArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandChangeFreezeHeaderStateArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChangeFreezeHeaderStateArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandChangeFreezeHeaderStateArchive::InternalSwap(CommandChangeFreezeHeaderStateArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChangeFreezeHeaderStateArchive, _impl_.prev_freeze_state_)
      + sizeof(CommandChangeFreezeHeaderStateArchive::_impl_.prev_freeze_state_)
      - PROTOBUF_FIELD_OFFSET(CommandChangeFreezeHeaderStateArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.direction_, other->_impl_.direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChangeFreezeHeaderStateArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[5]);
}

// ===================================================================

class CommandDeleteCellsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDeleteCellsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandDeleteCellsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invalidate_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_invalidate_comments_valid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TST::CellUIDRegionArchive& cell_uid_region(const CommandDeleteCellsArchive* msg);
  static void set_has_cell_uid_region(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellUIDListArchive& summary_cell_uid_list(const CommandDeleteCellsArchive* msg);
  static void set_has_summary_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& inverse_concurrent_cell_map(const CommandDeleteCellsArchive* msg);
  static void set_has_inverse_concurrent_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandDeleteCellsArchive::_Internal::super(const CommandDeleteCellsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::CellUIDRegionArchive&
CommandDeleteCellsArchive::_Internal::cell_uid_region(const CommandDeleteCellsArchive* msg) {
  return *msg->_impl_.cell_uid_region_;
}
const ::TST::CellUIDListArchive&
CommandDeleteCellsArchive::_Internal::summary_cell_uid_list(const CommandDeleteCellsArchive* msg) {
  return *msg->_impl_.summary_cell_uid_list_;
}
const ::TSP::Reference&
CommandDeleteCellsArchive::_Internal::inverse_concurrent_cell_map(const CommandDeleteCellsArchive* msg) {
  return *msg->_impl_.inverse_concurrent_cell_map_;
}
void CommandDeleteCellsArchive::clear_cell_uid_region() {
  if (_impl_.cell_uid_region_ != nullptr) _impl_.cell_uid_region_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandDeleteCellsArchive::clear_summary_cell_uid_list() {
  if (_impl_.summary_cell_uid_list_ != nullptr) _impl_.summary_cell_uid_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandDeleteCellsArchive::clear_inverse_concurrent_cell_map() {
  if (_impl_.inverse_concurrent_cell_map_ != nullptr) _impl_.inverse_concurrent_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandDeleteCellsArchive::CommandDeleteCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandDeleteCellsArchive)
}
CommandDeleteCellsArchive::CommandDeleteCellsArchive(const CommandDeleteCellsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDeleteCellsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uid_region_){nullptr}
    , decltype(_impl_.summary_cell_uid_list_){nullptr}
    , decltype(_impl_.inverse_concurrent_cell_map_){nullptr}
    , decltype(_impl_.invalidate_comments_){}
    , decltype(_impl_.invalidate_comments_valid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_uid_region()) {
    _this->_impl_.cell_uid_region_ = new ::TST::CellUIDRegionArchive(*from._impl_.cell_uid_region_);
  }
  if (from._internal_has_summary_cell_uid_list()) {
    _this->_impl_.summary_cell_uid_list_ = new ::TST::CellUIDListArchive(*from._impl_.summary_cell_uid_list_);
  }
  if (from._internal_has_inverse_concurrent_cell_map()) {
    _this->_impl_.inverse_concurrent_cell_map_ = new ::TSP::Reference(*from._impl_.inverse_concurrent_cell_map_);
  }
  ::memcpy(&_impl_.invalidate_comments_, &from._impl_.invalidate_comments_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.invalidate_comments_valid_) -
    reinterpret_cast<char*>(&_impl_.invalidate_comments_)) + sizeof(_impl_.invalidate_comments_valid_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandDeleteCellsArchive)
}

inline void CommandDeleteCellsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uid_region_){nullptr}
    , decltype(_impl_.summary_cell_uid_list_){nullptr}
    , decltype(_impl_.inverse_concurrent_cell_map_){nullptr}
    , decltype(_impl_.invalidate_comments_){false}
    , decltype(_impl_.invalidate_comments_valid_){false}
  };
}

CommandDeleteCellsArchive::~CommandDeleteCellsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandDeleteCellsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDeleteCellsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_uid_region_;
  if (this != internal_default_instance()) delete _impl_.summary_cell_uid_list_;
  if (this != internal_default_instance()) delete _impl_.inverse_concurrent_cell_map_;
}

void CommandDeleteCellsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDeleteCellsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandDeleteCellsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_uid_region_ != nullptr);
      _impl_.cell_uid_region_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.summary_cell_uid_list_ != nullptr);
      _impl_.summary_cell_uid_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.inverse_concurrent_cell_map_ != nullptr);
      _impl_.inverse_concurrent_cell_map_->Clear();
    }
  }
  ::memset(&_impl_.invalidate_comments_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.invalidate_comments_valid_) -
      reinterpret_cast<char*>(&_impl_.invalidate_comments_)) + sizeof(_impl_.invalidate_comments_valid_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDeleteCellsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool invalidate_comments = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_invalidate_comments(&has_bits);
          _impl_.invalidate_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool invalidate_comments_valid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_invalidate_comments_valid(&has_bits);
          _impl_.invalidate_comments_valid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDRegionArchive cell_uid_region = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_region(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive summary_cell_uid_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_cell_uid_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_concurrent_cell_map = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_concurrent_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDeleteCellsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandDeleteCellsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional bool invalidate_comments = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_invalidate_comments(), target);
  }

  // optional bool invalidate_comments_valid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_invalidate_comments_valid(), target);
  }

  // optional .TST.CellUIDRegionArchive cell_uid_region = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::cell_uid_region(this),
        _Internal::cell_uid_region(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellUIDListArchive summary_cell_uid_list = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::summary_cell_uid_list(this),
        _Internal::summary_cell_uid_list(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference inverse_concurrent_cell_map = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::inverse_concurrent_cell_map(this),
        _Internal::inverse_concurrent_cell_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandDeleteCellsArchive)
  return target;
}

size_t CommandDeleteCellsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandDeleteCellsArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional .TST.CellUIDRegionArchive cell_uid_region = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_uid_region_);
    }

    // optional .TST.CellUIDListArchive summary_cell_uid_list = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.summary_cell_uid_list_);
    }

    // optional .TSP.Reference inverse_concurrent_cell_map = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inverse_concurrent_cell_map_);
    }

    // optional bool invalidate_comments = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool invalidate_comments_valid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDeleteCellsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDeleteCellsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDeleteCellsArchive::GetClassData() const { return &_class_data_; }


void CommandDeleteCellsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDeleteCellsArchive*>(&to_msg);
  auto& from = static_cast<const CommandDeleteCellsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandDeleteCellsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_uid_region()->::TST::CellUIDRegionArchive::MergeFrom(
          from._internal_cell_uid_region());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_summary_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_summary_cell_uid_list());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_inverse_concurrent_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_inverse_concurrent_cell_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.invalidate_comments_ = from._impl_.invalidate_comments_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.invalidate_comments_valid_ = from._impl_.invalidate_comments_valid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDeleteCellsArchive::CopyFrom(const CommandDeleteCellsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandDeleteCellsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteCellsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_region()) {
    if (!_impl_.cell_uid_region_->IsInitialized()) return false;
  }
  if (_internal_has_summary_cell_uid_list()) {
    if (!_impl_.summary_cell_uid_list_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_concurrent_cell_map()) {
    if (!_impl_.inverse_concurrent_cell_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteCellsArchive::InternalSwap(CommandDeleteCellsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDeleteCellsArchive, _impl_.invalidate_comments_valid_)
      + sizeof(CommandDeleteCellsArchive::_impl_.invalidate_comments_valid_)
      - PROTOBUF_FIELD_OFFSET(CommandDeleteCellsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDeleteCellsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[6]);
}

// ===================================================================

class CommandDeleteCellContentsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandDeleteCellContentsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandDeleteCellContentsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uid_list(const CommandDeleteCellContentsArchive* msg);
  static void set_has_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandDeleteCellContentsArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandDeleteCellContentsArchive::_Internal::super(const CommandDeleteCellContentsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::CellUIDListArchive&
CommandDeleteCellContentsArchive::_Internal::cell_uid_list(const CommandDeleteCellContentsArchive* msg) {
  return *msg->_impl_.cell_uid_list_;
}
const ::TSP::Reference&
CommandDeleteCellContentsArchive::_Internal::inverse_cell_diff_map(const CommandDeleteCellContentsArchive* msg) {
  return *msg->_impl_.inverse_cell_diff_map_;
}
void CommandDeleteCellContentsArchive::clear_cell_uid_list() {
  if (_impl_.cell_uid_list_ != nullptr) _impl_.cell_uid_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandDeleteCellContentsArchive::clear_inverse_cell_diff_map() {
  if (_impl_.inverse_cell_diff_map_ != nullptr) _impl_.inverse_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandDeleteCellContentsArchive::CommandDeleteCellContentsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandDeleteCellContentsArchive)
}
CommandDeleteCellContentsArchive::CommandDeleteCellContentsArchive(const CommandDeleteCellContentsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandDeleteCellContentsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_uid_list()) {
    _this->_impl_.cell_uid_list_ = new ::TST::CellUIDListArchive(*from._impl_.cell_uid_list_);
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    _this->_impl_.inverse_cell_diff_map_ = new ::TSP::Reference(*from._impl_.inverse_cell_diff_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandDeleteCellContentsArchive)
}

inline void CommandDeleteCellContentsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
  };
}

CommandDeleteCellContentsArchive::~CommandDeleteCellContentsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandDeleteCellContentsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandDeleteCellContentsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_uid_list_;
  if (this != internal_default_instance()) delete _impl_.inverse_cell_diff_map_;
}

void CommandDeleteCellContentsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandDeleteCellContentsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandDeleteCellContentsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_uid_list_ != nullptr);
      _impl_.cell_uid_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.inverse_cell_diff_map_ != nullptr);
      _impl_.inverse_cell_diff_map_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandDeleteCellContentsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.CellUIDListArchive cell_uid_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandDeleteCellContentsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandDeleteCellContentsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.CellUIDListArchive cell_uid_list = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_uid_list(this),
        _Internal::cell_uid_list(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::inverse_cell_diff_map(this),
        _Internal::inverse_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandDeleteCellContentsArchive)
  return target;
}

size_t CommandDeleteCellContentsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandDeleteCellContentsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_cell_uid_list()) {
    // required .TST.CellUIDListArchive cell_uid_list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uid_list_);
  }

  return total_size;
}
size_t CommandDeleteCellContentsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandDeleteCellContentsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.CellUIDListArchive cell_uid_list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uid_list_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inverse_cell_diff_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandDeleteCellContentsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandDeleteCellContentsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandDeleteCellContentsArchive::GetClassData() const { return &_class_data_; }


void CommandDeleteCellContentsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandDeleteCellContentsArchive*>(&to_msg);
  auto& from = static_cast<const CommandDeleteCellContentsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandDeleteCellContentsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_cell_uid_list());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_inverse_cell_diff_map());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandDeleteCellContentsArchive::CopyFrom(const CommandDeleteCellContentsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandDeleteCellContentsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandDeleteCellContentsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_list()) {
    if (!_impl_.cell_uid_list_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!_impl_.inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandDeleteCellContentsArchive::InternalSwap(CommandDeleteCellContentsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandDeleteCellContentsArchive, _impl_.inverse_cell_diff_map_)
      + sizeof(CommandDeleteCellContentsArchive::_impl_.inverse_cell_diff_map_)
      - PROTOBUF_FIELD_OFFSET(CommandDeleteCellContentsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandDeleteCellContentsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[7]);
}

// ===================================================================

class CommandMutateCellFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMutateCellFormatArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandMutateCellFormatArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uid_list(const CommandMutateCellFormatArchive* msg);
  static void set_has_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandMutateCellFormatArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& whole_format_diff_map(const CommandMutateCellFormatArchive* msg);
  static void set_has_whole_format_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_intended_format_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000011) ^ 0x00000011) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandMutateCellFormatArchive::_Internal::super(const CommandMutateCellFormatArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::CellUIDListArchive&
CommandMutateCellFormatArchive::_Internal::cell_uid_list(const CommandMutateCellFormatArchive* msg) {
  return *msg->_impl_.cell_uid_list_;
}
const ::TSP::Reference&
CommandMutateCellFormatArchive::_Internal::inverse_cell_diff_map(const CommandMutateCellFormatArchive* msg) {
  return *msg->_impl_.inverse_cell_diff_map_;
}
const ::TSP::Reference&
CommandMutateCellFormatArchive::_Internal::whole_format_diff_map(const CommandMutateCellFormatArchive* msg) {
  return *msg->_impl_.whole_format_diff_map_;
}
void CommandMutateCellFormatArchive::clear_cell_uid_list() {
  if (_impl_.cell_uid_list_ != nullptr) _impl_.cell_uid_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandMutateCellFormatArchive::clear_inverse_cell_diff_map() {
  if (_impl_.inverse_cell_diff_map_ != nullptr) _impl_.inverse_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandMutateCellFormatArchive::clear_whole_format_diff_map() {
  if (_impl_.whole_format_diff_map_ != nullptr) _impl_.whole_format_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandMutateCellFormatArchive::CommandMutateCellFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandMutateCellFormatArchive)
}
CommandMutateCellFormatArchive::CommandMutateCellFormatArchive(const CommandMutateCellFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMutateCellFormatArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
    , decltype(_impl_.whole_format_diff_map_){nullptr}
    , decltype(_impl_.intended_format_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_uid_list()) {
    _this->_impl_.cell_uid_list_ = new ::TST::CellUIDListArchive(*from._impl_.cell_uid_list_);
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    _this->_impl_.inverse_cell_diff_map_ = new ::TSP::Reference(*from._impl_.inverse_cell_diff_map_);
  }
  if (from._internal_has_whole_format_diff_map()) {
    _this->_impl_.whole_format_diff_map_ = new ::TSP::Reference(*from._impl_.whole_format_diff_map_);
  }
  _this->_impl_.intended_format_type_ = from._impl_.intended_format_type_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandMutateCellFormatArchive)
}

inline void CommandMutateCellFormatArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
    , decltype(_impl_.whole_format_diff_map_){nullptr}
    , decltype(_impl_.intended_format_type_){0u}
  };
}

CommandMutateCellFormatArchive::~CommandMutateCellFormatArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandMutateCellFormatArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMutateCellFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_uid_list_;
  if (this != internal_default_instance()) delete _impl_.inverse_cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.whole_format_diff_map_;
}

void CommandMutateCellFormatArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMutateCellFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandMutateCellFormatArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_uid_list_ != nullptr);
      _impl_.cell_uid_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.inverse_cell_diff_map_ != nullptr);
      _impl_.inverse_cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.whole_format_diff_map_ != nullptr);
      _impl_.whole_format_diff_map_->Clear();
    }
  }
  _impl_.intended_format_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMutateCellFormatArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uid_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference whole_format_diff_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_whole_format_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 intended_format_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_intended_format_type(&has_bits);
          _impl_.intended_format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMutateCellFormatArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandMutateCellFormatArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellUIDListArchive cell_uid_list = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_uid_list(this),
        _Internal::cell_uid_list(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::inverse_cell_diff_map(this),
        _Internal::inverse_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference whole_format_diff_map = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::whole_format_diff_map(this),
        _Internal::whole_format_diff_map(this).GetCachedSize(), target, stream);
  }

  // required uint32 intended_format_type = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_intended_format_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandMutateCellFormatArchive)
  return target;
}

size_t CommandMutateCellFormatArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandMutateCellFormatArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_intended_format_type()) {
    // required uint32 intended_format_type = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_intended_format_type());
  }

  return total_size;
}
size_t CommandMutateCellFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandMutateCellFormatArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 intended_format_type = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_intended_format_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TST.CellUIDListArchive cell_uid_list = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_uid_list_);
    }

    // optional .TSP.Reference inverse_cell_diff_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inverse_cell_diff_map_);
    }

    // optional .TSP.Reference whole_format_diff_map = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.whole_format_diff_map_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMutateCellFormatArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMutateCellFormatArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMutateCellFormatArchive::GetClassData() const { return &_class_data_; }


void CommandMutateCellFormatArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMutateCellFormatArchive*>(&to_msg);
  auto& from = static_cast<const CommandMutateCellFormatArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandMutateCellFormatArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_cell_uid_list());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_inverse_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_whole_format_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_whole_format_diff_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.intended_format_type_ = from._impl_.intended_format_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMutateCellFormatArchive::CopyFrom(const CommandMutateCellFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandMutateCellFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMutateCellFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_list()) {
    if (!_impl_.cell_uid_list_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!_impl_.inverse_cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_whole_format_diff_map()) {
    if (!_impl_.whole_format_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandMutateCellFormatArchive::InternalSwap(CommandMutateCellFormatArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMutateCellFormatArchive, _impl_.intended_format_type_)
      + sizeof(CommandMutateCellFormatArchive::_impl_.intended_format_type_)
      - PROTOBUF_FIELD_OFFSET(CommandMutateCellFormatArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMutateCellFormatArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[8]);
}

// ===================================================================

class CommandSetAutomaticDurationUnitsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetAutomaticDurationUnitsArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetAutomaticDurationUnitsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_automatic_units(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetAutomaticDurationUnitsArchive::_Internal::super(const CommandSetAutomaticDurationUnitsArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetAutomaticDurationUnitsArchive::CommandSetAutomaticDurationUnitsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetAutomaticDurationUnitsArchive)
}
CommandSetAutomaticDurationUnitsArchive::CommandSetAutomaticDurationUnitsArchive(const CommandSetAutomaticDurationUnitsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetAutomaticDurationUnitsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.automatic_units_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  _this->_impl_.automatic_units_ = from._impl_.automatic_units_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetAutomaticDurationUnitsArchive)
}

inline void CommandSetAutomaticDurationUnitsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.automatic_units_){false}
  };
}

CommandSetAutomaticDurationUnitsArchive::~CommandSetAutomaticDurationUnitsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetAutomaticDurationUnitsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetAutomaticDurationUnitsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetAutomaticDurationUnitsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetAutomaticDurationUnitsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetAutomaticDurationUnitsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.automatic_units_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetAutomaticDurationUnitsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool automatic_units = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_automatic_units(&has_bits);
          _impl_.automatic_units_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetAutomaticDurationUnitsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetAutomaticDurationUnitsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional bool automatic_units = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_automatic_units(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetAutomaticDurationUnitsArchive)
  return target;
}

size_t CommandSetAutomaticDurationUnitsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetAutomaticDurationUnitsArchive)
  size_t total_size = 0;

  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool automatic_units = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetAutomaticDurationUnitsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetAutomaticDurationUnitsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetAutomaticDurationUnitsArchive::GetClassData() const { return &_class_data_; }


void CommandSetAutomaticDurationUnitsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetAutomaticDurationUnitsArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetAutomaticDurationUnitsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetAutomaticDurationUnitsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.automatic_units_ = from._impl_.automatic_units_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetAutomaticDurationUnitsArchive::CopyFrom(const CommandSetAutomaticDurationUnitsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetAutomaticDurationUnitsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetAutomaticDurationUnitsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetAutomaticDurationUnitsArchive::InternalSwap(CommandSetAutomaticDurationUnitsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetAutomaticDurationUnitsArchive, _impl_.automatic_units_)
      + sizeof(CommandSetAutomaticDurationUnitsArchive::_impl_.automatic_units_)
      - PROTOBUF_FIELD_OFFSET(CommandSetAutomaticDurationUnitsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetAutomaticDurationUnitsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[9]);
}

// ===================================================================

class CommandSetDurationStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetDurationStyleArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetDurationStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetDurationStyleArchive::_Internal::super(const CommandSetDurationStyleArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetDurationStyleArchive::CommandSetDurationStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetDurationStyleArchive)
}
CommandSetDurationStyleArchive::CommandSetDurationStyleArchive(const CommandSetDurationStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetDurationStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.duration_style_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  _this->_impl_.duration_style_ = from._impl_.duration_style_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetDurationStyleArchive)
}

inline void CommandSetDurationStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.duration_style_){0u}
  };
}

CommandSetDurationStyleArchive::~CommandSetDurationStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetDurationStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetDurationStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetDurationStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetDurationStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetDurationStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.duration_style_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetDurationStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_duration_style(&has_bits);
          _impl_.duration_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetDurationStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetDurationStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 duration_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetDurationStyleArchive)
  return target;
}

size_t CommandSetDurationStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetDurationStyleArchive)
  size_t total_size = 0;

  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 duration_style = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration_style());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetDurationStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetDurationStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetDurationStyleArchive::GetClassData() const { return &_class_data_; }


void CommandSetDurationStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetDurationStyleArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetDurationStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetDurationStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_style_ = from._impl_.duration_style_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetDurationStyleArchive::CopyFrom(const CommandSetDurationStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetDurationStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetDurationStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetDurationStyleArchive::InternalSwap(CommandSetDurationStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetDurationStyleArchive, _impl_.duration_style_)
      + sizeof(CommandSetDurationStyleArchive::_impl_.duration_style_)
      - PROTOBUF_FIELD_OFFSET(CommandSetDurationStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetDurationStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[10]);
}

// ===================================================================

class CommandSetDurationUnitSmallestLargestArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetDurationUnitSmallestLargestArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetDurationUnitSmallestLargestArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_smallest_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_largest_unit(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetDurationUnitSmallestLargestArchive::_Internal::super(const CommandSetDurationUnitSmallestLargestArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetDurationUnitSmallestLargestArchive::CommandSetDurationUnitSmallestLargestArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetDurationUnitSmallestLargestArchive)
}
CommandSetDurationUnitSmallestLargestArchive::CommandSetDurationUnitSmallestLargestArchive(const CommandSetDurationUnitSmallestLargestArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetDurationUnitSmallestLargestArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.smallest_unit_){}
    , decltype(_impl_.largest_unit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.smallest_unit_, &from._impl_.smallest_unit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.largest_unit_) -
    reinterpret_cast<char*>(&_impl_.smallest_unit_)) + sizeof(_impl_.largest_unit_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetDurationUnitSmallestLargestArchive)
}

inline void CommandSetDurationUnitSmallestLargestArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.smallest_unit_){0u}
    , decltype(_impl_.largest_unit_){0u}
  };
}

CommandSetDurationUnitSmallestLargestArchive::~CommandSetDurationUnitSmallestLargestArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetDurationUnitSmallestLargestArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetDurationUnitSmallestLargestArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetDurationUnitSmallestLargestArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetDurationUnitSmallestLargestArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetDurationUnitSmallestLargestArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.smallest_unit_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.largest_unit_) -
        reinterpret_cast<char*>(&_impl_.smallest_unit_)) + sizeof(_impl_.largest_unit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetDurationUnitSmallestLargestArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 smallest_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_smallest_unit(&has_bits);
          _impl_.smallest_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 largest_unit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_largest_unit(&has_bits);
          _impl_.largest_unit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetDurationUnitSmallestLargestArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetDurationUnitSmallestLargestArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 smallest_unit = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_smallest_unit(), target);
  }

  // optional uint32 largest_unit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_largest_unit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetDurationUnitSmallestLargestArchive)
  return target;
}

size_t CommandSetDurationUnitSmallestLargestArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetDurationUnitSmallestLargestArchive)
  size_t total_size = 0;

  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 smallest_unit = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_smallest_unit());
    }

    // optional uint32 largest_unit = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_largest_unit());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetDurationUnitSmallestLargestArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetDurationUnitSmallestLargestArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetDurationUnitSmallestLargestArchive::GetClassData() const { return &_class_data_; }


void CommandSetDurationUnitSmallestLargestArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetDurationUnitSmallestLargestArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetDurationUnitSmallestLargestArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetDurationUnitSmallestLargestArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.smallest_unit_ = from._impl_.smallest_unit_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.largest_unit_ = from._impl_.largest_unit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetDurationUnitSmallestLargestArchive::CopyFrom(const CommandSetDurationUnitSmallestLargestArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetDurationUnitSmallestLargestArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetDurationUnitSmallestLargestArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetDurationUnitSmallestLargestArchive::InternalSwap(CommandSetDurationUnitSmallestLargestArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetDurationUnitSmallestLargestArchive, _impl_.largest_unit_)
      + sizeof(CommandSetDurationUnitSmallestLargestArchive::_impl_.largest_unit_)
      - PROTOBUF_FIELD_OFFSET(CommandSetDurationUnitSmallestLargestArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetDurationUnitSmallestLargestArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[11]);
}

// ===================================================================

class CommandReplaceCustomFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceCustomFormatArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& undo_diff_map(const CommandReplaceCustomFormatArchive* msg);
  static void set_has_undo_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& commit_diff_map(const CommandReplaceCustomFormatArchive* msg);
  static void set_has_commit_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TableCommandArchive& super(const CommandReplaceCustomFormatArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TSP::Reference&
CommandReplaceCustomFormatArchive::_Internal::undo_diff_map(const CommandReplaceCustomFormatArchive* msg) {
  return *msg->_impl_.undo_diff_map_;
}
const ::TSP::Reference&
CommandReplaceCustomFormatArchive::_Internal::commit_diff_map(const CommandReplaceCustomFormatArchive* msg) {
  return *msg->_impl_.commit_diff_map_;
}
const ::TST::TableCommandArchive&
CommandReplaceCustomFormatArchive::_Internal::super(const CommandReplaceCustomFormatArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandReplaceCustomFormatArchive::clear_undo_diff_map() {
  if (_impl_.undo_diff_map_ != nullptr) _impl_.undo_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandReplaceCustomFormatArchive::clear_commit_diff_map() {
  if (_impl_.commit_diff_map_ != nullptr) _impl_.commit_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandReplaceCustomFormatArchive::CommandReplaceCustomFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandReplaceCustomFormatArchive)
}
CommandReplaceCustomFormatArchive::CommandReplaceCustomFormatArchive(const CommandReplaceCustomFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandReplaceCustomFormatArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_diff_map_){nullptr}
    , decltype(_impl_.commit_diff_map_){nullptr}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_undo_diff_map()) {
    _this->_impl_.undo_diff_map_ = new ::TSP::Reference(*from._impl_.undo_diff_map_);
  }
  if (from._internal_has_commit_diff_map()) {
    _this->_impl_.commit_diff_map_ = new ::TSP::Reference(*from._impl_.commit_diff_map_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandReplaceCustomFormatArchive)
}

inline void CommandReplaceCustomFormatArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_diff_map_){nullptr}
    , decltype(_impl_.commit_diff_map_){nullptr}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandReplaceCustomFormatArchive::~CommandReplaceCustomFormatArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandReplaceCustomFormatArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandReplaceCustomFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.undo_diff_map_;
  if (this != internal_default_instance()) delete _impl_.commit_diff_map_;
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandReplaceCustomFormatArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandReplaceCustomFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandReplaceCustomFormatArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.undo_diff_map_ != nullptr);
      _impl_.undo_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.commit_diff_map_ != nullptr);
      _impl_.commit_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceCustomFormatArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TSP.Reference undo_diff_map = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference commit_diff_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableCommandArchive super = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandReplaceCustomFormatArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandReplaceCustomFormatArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference undo_diff_map = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::undo_diff_map(this),
        _Internal::undo_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference commit_diff_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::commit_diff_map(this),
        _Internal::commit_diff_map(this).GetCachedSize(), target, stream);
  }

  // required .TST.TableCommandArchive super = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandReplaceCustomFormatArchive)
  return target;
}

size_t CommandReplaceCustomFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandReplaceCustomFormatArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 6;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .TSP.Reference undo_diff_map = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_diff_map_);
    }

    // optional .TSP.Reference commit_diff_map = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.commit_diff_map_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandReplaceCustomFormatArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandReplaceCustomFormatArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandReplaceCustomFormatArchive::GetClassData() const { return &_class_data_; }


void CommandReplaceCustomFormatArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandReplaceCustomFormatArchive*>(&to_msg);
  auto& from = static_cast<const CommandReplaceCustomFormatArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandReplaceCustomFormatArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_undo_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_diff_map());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_commit_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_commit_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandReplaceCustomFormatArchive::CopyFrom(const CommandReplaceCustomFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandReplaceCustomFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceCustomFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_undo_diff_map()) {
    if (!_impl_.undo_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_commit_diff_map()) {
    if (!_impl_.commit_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceCustomFormatArchive::InternalSwap(CommandReplaceCustomFormatArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceCustomFormatArchive, _impl_.super_)
      + sizeof(CommandReplaceCustomFormatArchive::_impl_.super_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceCustomFormatArchive, _impl_.undo_diff_map_)>(
          reinterpret_cast<char*>(&_impl_.undo_diff_map_),
          reinterpret_cast<char*>(&other->_impl_.undo_diff_map_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceCustomFormatArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[12]);
}

// ===================================================================

class CommandMoveCellsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMoveCellsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandMoveCellsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDPath& dst_table_info_id_path(const CommandMoveCellsArchive* msg);
  static void set_has_dst_table_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDRectArchive& src_uid_range(const CommandMoveCellsArchive* msg);
  static void set_has_src_uid_range(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUIDRectArchive& dst_uid_range(const CommandMoveCellsArchive* msg);
  static void set_has_dst_uid_range(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_table_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& src_cell_map(const CommandMoveCellsArchive* msg);
  static void set_has_src_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& dst_cell_map(const CommandMoveCellsArchive* msg);
  static void set_has_dst_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& dst_cell_styles_container(const CommandMoveCellsArchive* msg);
  static void set_has_dst_cell_styles_container(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& src_undo_cell_map(const CommandMoveCellsArchive* msg);
  static void set_has_src_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& dst_undo_cell_map(const CommandMoveCellsArchive* msg);
  static void set_has_dst_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_dst_merge_owner_rollback_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TST::MergeOperationArchive& merge_action_to_restore(const CommandMoveCellsArchive* msg);
  static void set_has_merge_action_to_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TST::CellUIDListArchive& comment_cell_uids_to_restore(const CommandMoveCellsArchive* msg);
  static void set_has_comment_cell_uids_to_restore(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000081f) ^ 0x0000081f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandMoveCellsArchive::_Internal::super(const CommandMoveCellsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDPath&
CommandMoveCellsArchive::_Internal::dst_table_info_id_path(const CommandMoveCellsArchive* msg) {
  return *msg->_impl_.dst_table_info_id_path_;
}
const ::TSP::UUIDRectArchive&
CommandMoveCellsArchive::_Internal::src_uid_range(const CommandMoveCellsArchive* msg) {
  return *msg->_impl_.src_uid_range_;
}
const ::TSP::UUIDRectArchive&
CommandMoveCellsArchive::_Internal::dst_uid_range(const CommandMoveCellsArchive* msg) {
  return *msg->_impl_.dst_uid_range_;
}
const ::TSP::Reference&
CommandMoveCellsArchive::_Internal::src_cell_map(const CommandMoveCellsArchive* msg) {
  return *msg->_impl_.src_cell_map_;
}
const ::TSP::Reference&
CommandMoveCellsArchive::_Internal::dst_cell_map(const CommandMoveCellsArchive* msg) {
  return *msg->_impl_.dst_cell_map_;
}
const ::TSP::Reference&
CommandMoveCellsArchive::_Internal::dst_cell_styles_container(const CommandMoveCellsArchive* msg) {
  return *msg->_impl_.dst_cell_styles_container_;
}
const ::TSP::Reference&
CommandMoveCellsArchive::_Internal::src_undo_cell_map(const CommandMoveCellsArchive* msg) {
  return *msg->_impl_.src_undo_cell_map_;
}
const ::TSP::Reference&
CommandMoveCellsArchive::_Internal::dst_undo_cell_map(const CommandMoveCellsArchive* msg) {
  return *msg->_impl_.dst_undo_cell_map_;
}
const ::TST::MergeOperationArchive&
CommandMoveCellsArchive::_Internal::merge_action_to_restore(const CommandMoveCellsArchive* msg) {
  return *msg->_impl_.merge_action_to_restore_;
}
const ::TST::CellUIDListArchive&
CommandMoveCellsArchive::_Internal::comment_cell_uids_to_restore(const CommandMoveCellsArchive* msg) {
  return *msg->_impl_.comment_cell_uids_to_restore_;
}
void CommandMoveCellsArchive::clear_dst_table_info_id_path() {
  if (_impl_.dst_table_info_id_path_ != nullptr) _impl_.dst_table_info_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandMoveCellsArchive::clear_src_uid_range() {
  if (_impl_.src_uid_range_ != nullptr) _impl_.src_uid_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandMoveCellsArchive::clear_dst_uid_range() {
  if (_impl_.dst_uid_range_ != nullptr) _impl_.dst_uid_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandMoveCellsArchive::clear_src_cell_map() {
  if (_impl_.src_cell_map_ != nullptr) _impl_.src_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandMoveCellsArchive::clear_dst_cell_map() {
  if (_impl_.dst_cell_map_ != nullptr) _impl_.dst_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CommandMoveCellsArchive::clear_dst_cell_styles_container() {
  if (_impl_.dst_cell_styles_container_ != nullptr) _impl_.dst_cell_styles_container_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void CommandMoveCellsArchive::clear_src_undo_cell_map() {
  if (_impl_.src_undo_cell_map_ != nullptr) _impl_.src_undo_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void CommandMoveCellsArchive::clear_dst_undo_cell_map() {
  if (_impl_.dst_undo_cell_map_ != nullptr) _impl_.dst_undo_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void CommandMoveCellsArchive::clear_formula_rewrite_commands() {
  _impl_.formula_rewrite_commands_.Clear();
}
void CommandMoveCellsArchive::clear_merge_action_to_restore() {
  if (_impl_.merge_action_to_restore_ != nullptr) _impl_.merge_action_to_restore_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void CommandMoveCellsArchive::clear_comment_cell_uids_to_restore() {
  if (_impl_.comment_cell_uids_to_restore_ != nullptr) _impl_.comment_cell_uids_to_restore_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void CommandMoveCellsArchive::clear_comment_storages_to_restore() {
  _impl_.comment_storages_to_restore_.Clear();
}
CommandMoveCellsArchive::CommandMoveCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandMoveCellsArchive)
}
CommandMoveCellsArchive::CommandMoveCellsArchive(const CommandMoveCellsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMoveCellsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_rewrite_commands_){from._impl_.formula_rewrite_commands_}
    , decltype(_impl_.comment_storages_to_restore_){from._impl_.comment_storages_to_restore_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.dst_table_info_id_path_){nullptr}
    , decltype(_impl_.src_uid_range_){nullptr}
    , decltype(_impl_.dst_uid_range_){nullptr}
    , decltype(_impl_.src_cell_map_){nullptr}
    , decltype(_impl_.dst_cell_map_){nullptr}
    , decltype(_impl_.dst_cell_styles_container_){nullptr}
    , decltype(_impl_.src_undo_cell_map_){nullptr}
    , decltype(_impl_.dst_undo_cell_map_){nullptr}
    , decltype(_impl_.merge_action_to_restore_){nullptr}
    , decltype(_impl_.comment_cell_uids_to_restore_){nullptr}
    , decltype(_impl_.dst_merge_owner_rollback_index_){}
    , decltype(_impl_.table_dimension_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_dst_table_info_id_path()) {
    _this->_impl_.dst_table_info_id_path_ = new ::TSP::UUIDPath(*from._impl_.dst_table_info_id_path_);
  }
  if (from._internal_has_src_uid_range()) {
    _this->_impl_.src_uid_range_ = new ::TSP::UUIDRectArchive(*from._impl_.src_uid_range_);
  }
  if (from._internal_has_dst_uid_range()) {
    _this->_impl_.dst_uid_range_ = new ::TSP::UUIDRectArchive(*from._impl_.dst_uid_range_);
  }
  if (from._internal_has_src_cell_map()) {
    _this->_impl_.src_cell_map_ = new ::TSP::Reference(*from._impl_.src_cell_map_);
  }
  if (from._internal_has_dst_cell_map()) {
    _this->_impl_.dst_cell_map_ = new ::TSP::Reference(*from._impl_.dst_cell_map_);
  }
  if (from._internal_has_dst_cell_styles_container()) {
    _this->_impl_.dst_cell_styles_container_ = new ::TSP::Reference(*from._impl_.dst_cell_styles_container_);
  }
  if (from._internal_has_src_undo_cell_map()) {
    _this->_impl_.src_undo_cell_map_ = new ::TSP::Reference(*from._impl_.src_undo_cell_map_);
  }
  if (from._internal_has_dst_undo_cell_map()) {
    _this->_impl_.dst_undo_cell_map_ = new ::TSP::Reference(*from._impl_.dst_undo_cell_map_);
  }
  if (from._internal_has_merge_action_to_restore()) {
    _this->_impl_.merge_action_to_restore_ = new ::TST::MergeOperationArchive(*from._impl_.merge_action_to_restore_);
  }
  if (from._internal_has_comment_cell_uids_to_restore()) {
    _this->_impl_.comment_cell_uids_to_restore_ = new ::TST::CellUIDListArchive(*from._impl_.comment_cell_uids_to_restore_);
  }
  ::memcpy(&_impl_.dst_merge_owner_rollback_index_, &from._impl_.dst_merge_owner_rollback_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.table_dimension_) -
    reinterpret_cast<char*>(&_impl_.dst_merge_owner_rollback_index_)) + sizeof(_impl_.table_dimension_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandMoveCellsArchive)
}

inline void CommandMoveCellsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.formula_rewrite_commands_){arena}
    , decltype(_impl_.comment_storages_to_restore_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.dst_table_info_id_path_){nullptr}
    , decltype(_impl_.src_uid_range_){nullptr}
    , decltype(_impl_.dst_uid_range_){nullptr}
    , decltype(_impl_.src_cell_map_){nullptr}
    , decltype(_impl_.dst_cell_map_){nullptr}
    , decltype(_impl_.dst_cell_styles_container_){nullptr}
    , decltype(_impl_.src_undo_cell_map_){nullptr}
    , decltype(_impl_.dst_undo_cell_map_){nullptr}
    , decltype(_impl_.merge_action_to_restore_){nullptr}
    , decltype(_impl_.comment_cell_uids_to_restore_){nullptr}
    , decltype(_impl_.dst_merge_owner_rollback_index_){0u}
    , decltype(_impl_.table_dimension_){-1}
  };
}

CommandMoveCellsArchive::~CommandMoveCellsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandMoveCellsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMoveCellsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.formula_rewrite_commands_.~RepeatedPtrField();
  _impl_.comment_storages_to_restore_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.dst_table_info_id_path_;
  if (this != internal_default_instance()) delete _impl_.src_uid_range_;
  if (this != internal_default_instance()) delete _impl_.dst_uid_range_;
  if (this != internal_default_instance()) delete _impl_.src_cell_map_;
  if (this != internal_default_instance()) delete _impl_.dst_cell_map_;
  if (this != internal_default_instance()) delete _impl_.dst_cell_styles_container_;
  if (this != internal_default_instance()) delete _impl_.src_undo_cell_map_;
  if (this != internal_default_instance()) delete _impl_.dst_undo_cell_map_;
  if (this != internal_default_instance()) delete _impl_.merge_action_to_restore_;
  if (this != internal_default_instance()) delete _impl_.comment_cell_uids_to_restore_;
}

void CommandMoveCellsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMoveCellsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandMoveCellsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.formula_rewrite_commands_.Clear();
  _impl_.comment_storages_to_restore_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.dst_table_info_id_path_ != nullptr);
      _impl_.dst_table_info_id_path_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.src_uid_range_ != nullptr);
      _impl_.src_uid_range_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.dst_uid_range_ != nullptr);
      _impl_.dst_uid_range_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.src_cell_map_ != nullptr);
      _impl_.src_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.dst_cell_map_ != nullptr);
      _impl_.dst_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.dst_cell_styles_container_ != nullptr);
      _impl_.dst_cell_styles_container_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.src_undo_cell_map_ != nullptr);
      _impl_.src_undo_cell_map_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.dst_undo_cell_map_ != nullptr);
      _impl_.dst_undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.merge_action_to_restore_ != nullptr);
      _impl_.merge_action_to_restore_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.comment_cell_uids_to_restore_ != nullptr);
      _impl_.comment_cell_uids_to_restore_->Clear();
    }
  }
  if (cached_has_bits & 0x00001800u) {
    _impl_.dst_merge_owner_rollback_index_ = 0u;
    _impl_.table_dimension_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMoveCellsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDPath dst_table_info_id_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_table_info_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDRectArchive src_uid_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_uid_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDRectArchive dst_uid_range = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_uid_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableDimensionArchive table_dimension = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_table_dimension(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference src_cell_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference dst_cell_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference dst_cell_styles_container = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_cell_styles_container(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference src_undo_cell_map = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_undo_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference dst_undo_cell_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dst_undo_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 dst_merge_owner_rollback_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_dst_merge_owner_rollback_index(&has_bits);
          _impl_.dst_merge_owner_rollback_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference formula_rewrite_commands = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formula_rewrite_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TST.MergeOperationArchive merge_action_to_restore = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_action_to_restore(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive comment_cell_uids_to_restore = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_comment_cell_uids_to_restore(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference comment_storages_to_restore = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_comment_storages_to_restore(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMoveCellsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandMoveCellsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDPath dst_table_info_id_path = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dst_table_info_id_path(this),
        _Internal::dst_table_info_id_path(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDRectArchive src_uid_range = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::src_uid_range(this),
        _Internal::src_uid_range(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDRectArchive dst_uid_range = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::dst_uid_range(this),
        _Internal::dst_uid_range(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableDimensionArchive table_dimension = 5;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_table_dimension(), target);
  }

  // required .TSP.Reference src_cell_map = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::src_cell_map(this),
        _Internal::src_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference dst_cell_map = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::dst_cell_map(this),
        _Internal::dst_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference dst_cell_styles_container = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::dst_cell_styles_container(this),
        _Internal::dst_cell_styles_container(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference src_undo_cell_map = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::src_undo_cell_map(this),
        _Internal::src_undo_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference dst_undo_cell_map = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::dst_undo_cell_map(this),
        _Internal::dst_undo_cell_map(this).GetCachedSize(), target, stream);
  }

  // required uint32 dst_merge_owner_rollback_index = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_dst_merge_owner_rollback_index(), target);
  }

  // repeated .TSP.Reference formula_rewrite_commands = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_formula_rewrite_commands_size()); i < n; i++) {
    const auto& repfield = this->_internal_formula_rewrite_commands(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TST.MergeOperationArchive merge_action_to_restore = 13;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::merge_action_to_restore(this),
        _Internal::merge_action_to_restore(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellUIDListArchive comment_cell_uids_to_restore = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::comment_cell_uids_to_restore(this),
        _Internal::comment_cell_uids_to_restore(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference comment_storages_to_restore = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_comment_storages_to_restore_size()); i < n; i++) {
    const auto& repfield = this->_internal_comment_storages_to_restore(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandMoveCellsArchive)
  return target;
}

size_t CommandMoveCellsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandMoveCellsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_dst_table_info_id_path()) {
    // required .TSP.UUIDPath dst_table_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dst_table_info_id_path_);
  }

  if (_internal_has_src_uid_range()) {
    // required .TSP.UUIDRectArchive src_uid_range = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.src_uid_range_);
  }

  if (_internal_has_dst_uid_range()) {
    // required .TSP.UUIDRectArchive dst_uid_range = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dst_uid_range_);
  }

  if (_internal_has_src_cell_map()) {
    // required .TSP.Reference src_cell_map = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.src_cell_map_);
  }

  if (_internal_has_dst_merge_owner_rollback_index()) {
    // required uint32 dst_merge_owner_rollback_index = 11;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dst_merge_owner_rollback_index());
  }

  return total_size;
}
size_t CommandMoveCellsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandMoveCellsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000081f) ^ 0x0000081f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDPath dst_table_info_id_path = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dst_table_info_id_path_);

    // required .TSP.UUIDRectArchive src_uid_range = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.src_uid_range_);

    // required .TSP.UUIDRectArchive dst_uid_range = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dst_uid_range_);

    // required .TSP.Reference src_cell_map = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.src_cell_map_);

    // required uint32 dst_merge_owner_rollback_index = 11;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_dst_merge_owner_rollback_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference formula_rewrite_commands = 12;
  total_size += 1UL * this->_internal_formula_rewrite_commands_size();
  for (const auto& msg : this->_impl_.formula_rewrite_commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.Reference comment_storages_to_restore = 15;
  total_size += 1UL * this->_internal_comment_storages_to_restore_size();
  for (const auto& msg : this->_impl_.comment_storages_to_restore_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference dst_cell_map = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dst_cell_map_);
    }

    // optional .TSP.Reference dst_cell_styles_container = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dst_cell_styles_container_);
    }

    // optional .TSP.Reference src_undo_cell_map = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.src_undo_cell_map_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TSP.Reference dst_undo_cell_map = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dst_undo_cell_map_);
    }

    // optional .TST.MergeOperationArchive merge_action_to_restore = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.merge_action_to_restore_);
    }

    // optional .TST.CellUIDListArchive comment_cell_uids_to_restore = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.comment_cell_uids_to_restore_);
    }

  }
  // optional .TST.TableDimensionArchive table_dimension = 5;
  if (cached_has_bits & 0x00001000u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_table_dimension());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMoveCellsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMoveCellsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMoveCellsArchive::GetClassData() const { return &_class_data_; }


void CommandMoveCellsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMoveCellsArchive*>(&to_msg);
  auto& from = static_cast<const CommandMoveCellsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandMoveCellsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.formula_rewrite_commands_.MergeFrom(from._impl_.formula_rewrite_commands_);
  _this->_impl_.comment_storages_to_restore_.MergeFrom(from._impl_.comment_storages_to_restore_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dst_table_info_id_path()->::TSP::UUIDPath::MergeFrom(
          from._internal_dst_table_info_id_path());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_src_uid_range()->::TSP::UUIDRectArchive::MergeFrom(
          from._internal_src_uid_range());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_dst_uid_range()->::TSP::UUIDRectArchive::MergeFrom(
          from._internal_dst_uid_range());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_src_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_src_cell_map());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_dst_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_dst_cell_map());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_dst_cell_styles_container()->::TSP::Reference::MergeFrom(
          from._internal_dst_cell_styles_container());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_src_undo_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_src_undo_cell_map());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_dst_undo_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_dst_undo_cell_map());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_merge_action_to_restore()->::TST::MergeOperationArchive::MergeFrom(
          from._internal_merge_action_to_restore());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_comment_cell_uids_to_restore()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_comment_cell_uids_to_restore());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.dst_merge_owner_rollback_index_ = from._impl_.dst_merge_owner_rollback_index_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.table_dimension_ = from._impl_.table_dimension_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMoveCellsArchive::CopyFrom(const CommandMoveCellsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandMoveCellsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveCellsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.formula_rewrite_commands_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.comment_storages_to_restore_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_dst_table_info_id_path()) {
    if (!_impl_.dst_table_info_id_path_->IsInitialized()) return false;
  }
  if (_internal_has_src_uid_range()) {
    if (!_impl_.src_uid_range_->IsInitialized()) return false;
  }
  if (_internal_has_dst_uid_range()) {
    if (!_impl_.dst_uid_range_->IsInitialized()) return false;
  }
  if (_internal_has_src_cell_map()) {
    if (!_impl_.src_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_dst_cell_map()) {
    if (!_impl_.dst_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_dst_cell_styles_container()) {
    if (!_impl_.dst_cell_styles_container_->IsInitialized()) return false;
  }
  if (_internal_has_src_undo_cell_map()) {
    if (!_impl_.src_undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_dst_undo_cell_map()) {
    if (!_impl_.dst_undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_merge_action_to_restore()) {
    if (!_impl_.merge_action_to_restore_->IsInitialized()) return false;
  }
  if (_internal_has_comment_cell_uids_to_restore()) {
    if (!_impl_.comment_cell_uids_to_restore_->IsInitialized()) return false;
  }
  return true;
}

void CommandMoveCellsArchive::InternalSwap(CommandMoveCellsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.formula_rewrite_commands_.InternalSwap(&other->_impl_.formula_rewrite_commands_);
  _impl_.comment_storages_to_restore_.InternalSwap(&other->_impl_.comment_storages_to_restore_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMoveCellsArchive, _impl_.dst_merge_owner_rollback_index_)
      + sizeof(CommandMoveCellsArchive::_impl_.dst_merge_owner_rollback_index_)
      - PROTOBUF_FIELD_OFFSET(CommandMoveCellsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.table_dimension_, other->_impl_.table_dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMoveCellsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[13]);
}

// ===================================================================

class ColumnRowMetadataArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnRowMetadataArchive>()._impl_._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hiding_action(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& cell_style(const ColumnRowMetadataArchive* msg);
  static void set_has_cell_style(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& text_style(const ColumnRowMetadataArchive* msg);
  static void set_has_text_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& uuid(const ColumnRowMetadataArchive* msg);
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000018) ^ 0x00000018) != 0;
  }
};

const ::TSP::Reference&
ColumnRowMetadataArchive::_Internal::cell_style(const ColumnRowMetadataArchive* msg) {
  return *msg->_impl_.cell_style_;
}
const ::TSP::Reference&
ColumnRowMetadataArchive::_Internal::text_style(const ColumnRowMetadataArchive* msg) {
  return *msg->_impl_.text_style_;
}
const ::TSP::UUID&
ColumnRowMetadataArchive::_Internal::uuid(const ColumnRowMetadataArchive* msg) {
  return *msg->_impl_.uuid_;
}
void ColumnRowMetadataArchive::clear_cell_style() {
  if (_impl_.cell_style_ != nullptr) _impl_.cell_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ColumnRowMetadataArchive::clear_text_style() {
  if (_impl_.text_style_ != nullptr) _impl_.text_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ColumnRowMetadataArchive::clear_uuid() {
  if (_impl_.uuid_ != nullptr) _impl_.uuid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
ColumnRowMetadataArchive::ColumnRowMetadataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ColumnRowMetadataArchive)
}
ColumnRowMetadataArchive::ColumnRowMetadataArchive(const ColumnRowMetadataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnRowMetadataArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_style_){nullptr}
    , decltype(_impl_.text_style_){nullptr}
    , decltype(_impl_.uuid_){nullptr}
    , decltype(_impl_.size_){}
    , decltype(_impl_.hiding_action_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell_style()) {
    _this->_impl_.cell_style_ = new ::TSP::Reference(*from._impl_.cell_style_);
  }
  if (from._internal_has_text_style()) {
    _this->_impl_.text_style_ = new ::TSP::Reference(*from._impl_.text_style_);
  }
  if (from._internal_has_uuid()) {
    _this->_impl_.uuid_ = new ::TSP::UUID(*from._impl_.uuid_);
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hiding_action_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.hiding_action_));
  // @@protoc_insertion_point(copy_constructor:TST.ColumnRowMetadataArchive)
}

inline void ColumnRowMetadataArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_style_){nullptr}
    , decltype(_impl_.text_style_){nullptr}
    , decltype(_impl_.uuid_){nullptr}
    , decltype(_impl_.size_){0}
    , decltype(_impl_.hiding_action_){0u}
  };
}

ColumnRowMetadataArchive::~ColumnRowMetadataArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnRowMetadataArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnRowMetadataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cell_style_;
  if (this != internal_default_instance()) delete _impl_.text_style_;
  if (this != internal_default_instance()) delete _impl_.uuid_;
}

void ColumnRowMetadataArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnRowMetadataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnRowMetadataArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.cell_style_ != nullptr);
      _impl_.cell_style_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.text_style_ != nullptr);
      _impl_.text_style_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.uuid_ != nullptr);
      _impl_.uuid_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hiding_action_) -
        reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.hiding_action_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnRowMetadataArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_size(&has_bits);
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required uint32 hiding_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_hiding_action(&has_bits);
          _impl_.hiding_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference text_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID uuid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_uuid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnRowMetadataArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnRowMetadataArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required double size = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_size(), target);
  }

  // required uint32 hiding_action = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_hiding_action(), target);
  }

  // optional .TSP.Reference cell_style = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell_style(this),
        _Internal::cell_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference text_style = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::text_style(this),
        _Internal::text_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID uuid = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::uuid(this),
        _Internal::uuid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnRowMetadataArchive)
  return target;
}

size_t ColumnRowMetadataArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ColumnRowMetadataArchive)
  size_t total_size = 0;

  if (_internal_has_size()) {
    // required double size = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_hiding_action()) {
    // required uint32 hiding_action = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hiding_action());
  }

  return total_size;
}
size_t ColumnRowMetadataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnRowMetadataArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000018) ^ 0x00000018) == 0) {  // All required fields are present.
    // required double size = 1;
    total_size += 1 + 8;

    // required uint32 hiding_action = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hiding_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TSP.Reference cell_style = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_style_);
    }

    // optional .TSP.Reference text_style = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.text_style_);
    }

    // optional .TSP.UUID uuid = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.uuid_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnRowMetadataArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnRowMetadataArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnRowMetadataArchive::GetClassData() const { return &_class_data_; }


void ColumnRowMetadataArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnRowMetadataArchive*>(&to_msg);
  auto& from = static_cast<const ColumnRowMetadataArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnRowMetadataArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cell_style()->::TSP::Reference::MergeFrom(
          from._internal_cell_style());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_text_style()->::TSP::Reference::MergeFrom(
          from._internal_text_style());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_uuid()->::TSP::UUID::MergeFrom(
          from._internal_uuid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.size_ = from._impl_.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.hiding_action_ = from._impl_.hiding_action_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnRowMetadataArchive::CopyFrom(const ColumnRowMetadataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnRowMetadataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRowMetadataArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_cell_style()) {
    if (!_impl_.cell_style_->IsInitialized()) return false;
  }
  if (_internal_has_text_style()) {
    if (!_impl_.text_style_->IsInitialized()) return false;
  }
  if (_internal_has_uuid()) {
    if (!_impl_.uuid_->IsInitialized()) return false;
  }
  return true;
}

void ColumnRowMetadataArchive::InternalSwap(ColumnRowMetadataArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColumnRowMetadataArchive, _impl_.hiding_action_)
      + sizeof(ColumnRowMetadataArchive::_impl_.hiding_action_)
      - PROTOBUF_FIELD_OFFSET(ColumnRowMetadataArchive, _impl_.cell_style_)>(
          reinterpret_cast<char*>(&_impl_.cell_style_),
          reinterpret_cast<char*>(&other->_impl_.cell_style_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnRowMetadataArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[14]);
}

// ===================================================================

class CommandInsertColumnsOrRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInsertColumnsOrRowsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::ColumnRowBundleArchive& bundle(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_bundle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& concurrent_cell_map(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_concurrent_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& categories_cell_map(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_categories_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& undo_commands(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_undo_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_concurrent_cell_map(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_undo_concurrent_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSP::Reference& undo_categories_cell_map(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_undo_categories_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TST::TableSortOrderUIDArchive& sort_order(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::TableGroupSortOrderUIDArchive& group_sort_order(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_group_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& filter_set(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_should_edge_expand_formula_ranges(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_was_categorized(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSP::UUID& src_row_column_uid(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_src_row_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& opp_row_column_uid(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_opp_row_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TST::ColumnRowBundleArchive& undo_bundle(const CommandInsertColumnsOrRowsArchive* msg);
  static void set_has_undo_bundle(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000663) ^ 0x00000663) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandInsertColumnsOrRowsArchive::_Internal::super(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::ColumnRowBundleArchive&
CommandInsertColumnsOrRowsArchive::_Internal::bundle(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.bundle_;
}
const ::TSP::Reference&
CommandInsertColumnsOrRowsArchive::_Internal::concurrent_cell_map(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.concurrent_cell_map_;
}
const ::TSP::Reference&
CommandInsertColumnsOrRowsArchive::_Internal::categories_cell_map(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.categories_cell_map_;
}
const ::TSP::Reference&
CommandInsertColumnsOrRowsArchive::_Internal::undo_commands(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.undo_commands_;
}
const ::TSP::Reference&
CommandInsertColumnsOrRowsArchive::_Internal::undo_concurrent_cell_map(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.undo_concurrent_cell_map_;
}
const ::TSP::Reference&
CommandInsertColumnsOrRowsArchive::_Internal::undo_categories_cell_map(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.undo_categories_cell_map_;
}
const ::TST::TableSortOrderUIDArchive&
CommandInsertColumnsOrRowsArchive::_Internal::sort_order(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.sort_order_;
}
const ::TST::TableGroupSortOrderUIDArchive&
CommandInsertColumnsOrRowsArchive::_Internal::group_sort_order(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.group_sort_order_;
}
const ::TSP::Reference&
CommandInsertColumnsOrRowsArchive::_Internal::filter_set(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.filter_set_;
}
const ::TSP::UUID&
CommandInsertColumnsOrRowsArchive::_Internal::src_row_column_uid(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.src_row_column_uid_;
}
const ::TSP::UUID&
CommandInsertColumnsOrRowsArchive::_Internal::opp_row_column_uid(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.opp_row_column_uid_;
}
const ::TST::ColumnRowBundleArchive&
CommandInsertColumnsOrRowsArchive::_Internal::undo_bundle(const CommandInsertColumnsOrRowsArchive* msg) {
  return *msg->_impl_.undo_bundle_;
}
void CommandInsertColumnsOrRowsArchive::clear_concurrent_cell_map() {
  if (_impl_.concurrent_cell_map_ != nullptr) _impl_.concurrent_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void CommandInsertColumnsOrRowsArchive::clear_categories_cell_map() {
  if (_impl_.categories_cell_map_ != nullptr) _impl_.categories_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void CommandInsertColumnsOrRowsArchive::clear_undo_commands() {
  if (_impl_.undo_commands_ != nullptr) _impl_.undo_commands_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandInsertColumnsOrRowsArchive::clear_undo_concurrent_cell_map() {
  if (_impl_.undo_concurrent_cell_map_ != nullptr) _impl_.undo_concurrent_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void CommandInsertColumnsOrRowsArchive::clear_undo_categories_cell_map() {
  if (_impl_.undo_categories_cell_map_ != nullptr) _impl_.undo_categories_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void CommandInsertColumnsOrRowsArchive::clear_sort_order() {
  if (_impl_.sort_order_ != nullptr) _impl_.sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandInsertColumnsOrRowsArchive::clear_group_sort_order() {
  if (_impl_.group_sort_order_ != nullptr) _impl_.group_sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void CommandInsertColumnsOrRowsArchive::clear_filter_set() {
  if (_impl_.filter_set_ != nullptr) _impl_.filter_set_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandInsertColumnsOrRowsArchive::clear_undo_order() {
  _impl_.undo_order_.Clear();
}
void CommandInsertColumnsOrRowsArchive::clear_src_row_column_uid() {
  if (_impl_.src_row_column_uid_ != nullptr) _impl_.src_row_column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CommandInsertColumnsOrRowsArchive::clear_opp_row_column_uid() {
  if (_impl_.opp_row_column_uid_ != nullptr) _impl_.opp_row_column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
CommandInsertColumnsOrRowsArchive::CommandInsertColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandInsertColumnsOrRowsArchive)
}
CommandInsertColumnsOrRowsArchive::CommandInsertColumnsOrRowsArchive(const CommandInsertColumnsOrRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandInsertColumnsOrRowsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_order_){from._impl_.undo_order_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.bundle_){nullptr}
    , decltype(_impl_.undo_commands_){nullptr}
    , decltype(_impl_.sort_order_){nullptr}
    , decltype(_impl_.filter_set_){nullptr}
    , decltype(_impl_.src_row_column_uid_){nullptr}
    , decltype(_impl_.opp_row_column_uid_){nullptr}
    , decltype(_impl_.undo_bundle_){nullptr}
    , decltype(_impl_.group_sort_order_){nullptr}
    , decltype(_impl_.concurrent_cell_map_){nullptr}
    , decltype(_impl_.categories_cell_map_){nullptr}
    , decltype(_impl_.undo_concurrent_cell_map_){nullptr}
    , decltype(_impl_.undo_categories_cell_map_){nullptr}
    , decltype(_impl_.should_edge_expand_formula_ranges_){}
    , decltype(_impl_.was_categorized_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_bundle()) {
    _this->_impl_.bundle_ = new ::TST::ColumnRowBundleArchive(*from._impl_.bundle_);
  }
  if (from._internal_has_undo_commands()) {
    _this->_impl_.undo_commands_ = new ::TSP::Reference(*from._impl_.undo_commands_);
  }
  if (from._internal_has_sort_order()) {
    _this->_impl_.sort_order_ = new ::TST::TableSortOrderUIDArchive(*from._impl_.sort_order_);
  }
  if (from._internal_has_filter_set()) {
    _this->_impl_.filter_set_ = new ::TSP::Reference(*from._impl_.filter_set_);
  }
  if (from._internal_has_src_row_column_uid()) {
    _this->_impl_.src_row_column_uid_ = new ::TSP::UUID(*from._impl_.src_row_column_uid_);
  }
  if (from._internal_has_opp_row_column_uid()) {
    _this->_impl_.opp_row_column_uid_ = new ::TSP::UUID(*from._impl_.opp_row_column_uid_);
  }
  if (from._internal_has_undo_bundle()) {
    _this->_impl_.undo_bundle_ = new ::TST::ColumnRowBundleArchive(*from._impl_.undo_bundle_);
  }
  if (from._internal_has_group_sort_order()) {
    _this->_impl_.group_sort_order_ = new ::TST::TableGroupSortOrderUIDArchive(*from._impl_.group_sort_order_);
  }
  if (from._internal_has_concurrent_cell_map()) {
    _this->_impl_.concurrent_cell_map_ = new ::TSP::Reference(*from._impl_.concurrent_cell_map_);
  }
  if (from._internal_has_categories_cell_map()) {
    _this->_impl_.categories_cell_map_ = new ::TSP::Reference(*from._impl_.categories_cell_map_);
  }
  if (from._internal_has_undo_concurrent_cell_map()) {
    _this->_impl_.undo_concurrent_cell_map_ = new ::TSP::Reference(*from._impl_.undo_concurrent_cell_map_);
  }
  if (from._internal_has_undo_categories_cell_map()) {
    _this->_impl_.undo_categories_cell_map_ = new ::TSP::Reference(*from._impl_.undo_categories_cell_map_);
  }
  ::memcpy(&_impl_.should_edge_expand_formula_ranges_, &from._impl_.should_edge_expand_formula_ranges_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.was_categorized_) -
    reinterpret_cast<char*>(&_impl_.should_edge_expand_formula_ranges_)) + sizeof(_impl_.was_categorized_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandInsertColumnsOrRowsArchive)
}

inline void CommandInsertColumnsOrRowsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_order_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.bundle_){nullptr}
    , decltype(_impl_.undo_commands_){nullptr}
    , decltype(_impl_.sort_order_){nullptr}
    , decltype(_impl_.filter_set_){nullptr}
    , decltype(_impl_.src_row_column_uid_){nullptr}
    , decltype(_impl_.opp_row_column_uid_){nullptr}
    , decltype(_impl_.undo_bundle_){nullptr}
    , decltype(_impl_.group_sort_order_){nullptr}
    , decltype(_impl_.concurrent_cell_map_){nullptr}
    , decltype(_impl_.categories_cell_map_){nullptr}
    , decltype(_impl_.undo_concurrent_cell_map_){nullptr}
    , decltype(_impl_.undo_categories_cell_map_){nullptr}
    , decltype(_impl_.should_edge_expand_formula_ranges_){false}
    , decltype(_impl_.was_categorized_){false}
  };
}

CommandInsertColumnsOrRowsArchive::~CommandInsertColumnsOrRowsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandInsertColumnsOrRowsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandInsertColumnsOrRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.undo_order_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.bundle_;
  if (this != internal_default_instance()) delete _impl_.undo_commands_;
  if (this != internal_default_instance()) delete _impl_.sort_order_;
  if (this != internal_default_instance()) delete _impl_.filter_set_;
  if (this != internal_default_instance()) delete _impl_.src_row_column_uid_;
  if (this != internal_default_instance()) delete _impl_.opp_row_column_uid_;
  if (this != internal_default_instance()) delete _impl_.undo_bundle_;
  if (this != internal_default_instance()) delete _impl_.group_sort_order_;
  if (this != internal_default_instance()) delete _impl_.concurrent_cell_map_;
  if (this != internal_default_instance()) delete _impl_.categories_cell_map_;
  if (this != internal_default_instance()) delete _impl_.undo_concurrent_cell_map_;
  if (this != internal_default_instance()) delete _impl_.undo_categories_cell_map_;
}

void CommandInsertColumnsOrRowsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandInsertColumnsOrRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandInsertColumnsOrRowsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.undo_order_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bundle_ != nullptr);
      _impl_.bundle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.undo_commands_ != nullptr);
      _impl_.undo_commands_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.sort_order_ != nullptr);
      _impl_.sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.filter_set_ != nullptr);
      _impl_.filter_set_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.src_row_column_uid_ != nullptr);
      _impl_.src_row_column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.opp_row_column_uid_ != nullptr);
      _impl_.opp_row_column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.undo_bundle_ != nullptr);
      _impl_.undo_bundle_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.group_sort_order_ != nullptr);
      _impl_.group_sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.concurrent_cell_map_ != nullptr);
      _impl_.concurrent_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.categories_cell_map_ != nullptr);
      _impl_.categories_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.undo_concurrent_cell_map_ != nullptr);
      _impl_.undo_concurrent_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.undo_categories_cell_map_ != nullptr);
      _impl_.undo_categories_cell_map_->Clear();
    }
  }
  ::memset(&_impl_.should_edge_expand_formula_ranges_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.was_categorized_) -
      reinterpret_cast<char*>(&_impl_.should_edge_expand_formula_ranges_)) + sizeof(_impl_.was_categorized_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInsertColumnsOrRowsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.ColumnRowBundleArchive bundle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bundle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_commands = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_commands(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderUIDArchive sort_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference filter_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool should_edge_expand_formula_ranges = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_should_edge_expand_formula_ranges(&has_bits);
          _impl_.should_edge_expand_formula_ranges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool was_categorized = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_was_categorized(&has_bits);
          _impl_.was_categorized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_order = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID src_row_column_uid = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_src_row_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID opp_row_column_uid = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_opp_row_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ColumnRowBundleArchive undo_bundle = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_bundle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableGroupSortOrderUIDArchive group_sort_order = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference concurrent_cell_map = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_concurrent_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference categories_cell_map = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_categories_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_concurrent_cell_map = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_concurrent_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_categories_cell_map = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_categories_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandInsertColumnsOrRowsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandInsertColumnsOrRowsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.ColumnRowBundleArchive bundle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::bundle(this),
        _Internal::bundle(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_commands = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::undo_commands(this),
        _Internal::undo_commands(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableSortOrderUIDArchive sort_order = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sort_order(this),
        _Internal::sort_order(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference filter_set = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::filter_set(this),
        _Internal::filter_set(this).GetCachedSize(), target, stream);
  }

  // optional bool should_edge_expand_formula_ranges = 8;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_should_edge_expand_formula_ranges(), target);
  }

  // optional bool was_categorized = 9;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_was_categorized(), target);
  }

  // repeated .TSP.UUID undo_order = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_undo_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_undo_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.UUID src_row_column_uid = 11;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::src_row_column_uid(this),
        _Internal::src_row_column_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID opp_row_column_uid = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::opp_row_column_uid(this),
        _Internal::opp_row_column_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ColumnRowBundleArchive undo_bundle = 13;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::undo_bundle(this),
        _Internal::undo_bundle(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableGroupSortOrderUIDArchive group_sort_order = 14;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::group_sort_order(this),
        _Internal::group_sort_order(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference concurrent_cell_map = 15;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::concurrent_cell_map(this),
        _Internal::concurrent_cell_map(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference categories_cell_map = 16;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::categories_cell_map(this),
        _Internal::categories_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_concurrent_cell_map = 17;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::undo_concurrent_cell_map(this),
        _Internal::undo_concurrent_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_categories_cell_map = 18;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::undo_categories_cell_map(this),
        _Internal::undo_categories_cell_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandInsertColumnsOrRowsArchive)
  return target;
}

size_t CommandInsertColumnsOrRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandInsertColumnsOrRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_bundle()) {
    // required .TST.ColumnRowBundleArchive bundle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bundle_);
  }

  if (_internal_has_src_row_column_uid()) {
    // required .TSP.UUID src_row_column_uid = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.src_row_column_uid_);
  }

  if (_internal_has_opp_row_column_uid()) {
    // required .TSP.UUID opp_row_column_uid = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opp_row_column_uid_);
  }

  if (_internal_has_concurrent_cell_map()) {
    // required .TSP.Reference concurrent_cell_map = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.concurrent_cell_map_);
  }

  if (_internal_has_categories_cell_map()) {
    // required .TSP.Reference categories_cell_map = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.categories_cell_map_);
  }

  return total_size;
}
size_t CommandInsertColumnsOrRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandInsertColumnsOrRowsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000663) ^ 0x00000663) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.ColumnRowBundleArchive bundle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bundle_);

    // required .TSP.UUID src_row_column_uid = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.src_row_column_uid_);

    // required .TSP.UUID opp_row_column_uid = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.opp_row_column_uid_);

    // required .TSP.Reference concurrent_cell_map = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.concurrent_cell_map_);

    // required .TSP.Reference categories_cell_map = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.categories_cell_map_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID undo_order = 10;
  total_size += 1UL * this->_internal_undo_order_size();
  for (const auto& msg : this->_impl_.undo_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference undo_commands = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_commands_);
    }

    // optional .TST.TableSortOrderUIDArchive sort_order = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sort_order_);
    }

    // optional .TSP.Reference filter_set = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.filter_set_);
    }

  }
  // optional .TST.ColumnRowBundleArchive undo_bundle = 13;
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.undo_bundle_);
  }

  // optional .TST.TableGroupSortOrderUIDArchive group_sort_order = 14;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_sort_order_);
  }

  if (cached_has_bits & 0x00007800u) {
    // optional .TSP.Reference undo_concurrent_cell_map = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_concurrent_cell_map_);
    }

    // optional .TSP.Reference undo_categories_cell_map = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_categories_cell_map_);
    }

    // optional bool should_edge_expand_formula_ranges = 8;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool was_categorized = 9;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandInsertColumnsOrRowsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandInsertColumnsOrRowsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandInsertColumnsOrRowsArchive::GetClassData() const { return &_class_data_; }


void CommandInsertColumnsOrRowsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandInsertColumnsOrRowsArchive*>(&to_msg);
  auto& from = static_cast<const CommandInsertColumnsOrRowsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandInsertColumnsOrRowsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.undo_order_.MergeFrom(from._impl_.undo_order_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_bundle()->::TST::ColumnRowBundleArchive::MergeFrom(
          from._internal_bundle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_undo_commands()->::TSP::Reference::MergeFrom(
          from._internal_undo_commands());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_sort_order()->::TST::TableSortOrderUIDArchive::MergeFrom(
          from._internal_sort_order());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_filter_set()->::TSP::Reference::MergeFrom(
          from._internal_filter_set());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_src_row_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_src_row_column_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_opp_row_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_opp_row_column_uid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_undo_bundle()->::TST::ColumnRowBundleArchive::MergeFrom(
          from._internal_undo_bundle());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_group_sort_order()->::TST::TableGroupSortOrderUIDArchive::MergeFrom(
          from._internal_group_sort_order());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_concurrent_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_concurrent_cell_map());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_categories_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_categories_cell_map());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_undo_concurrent_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_concurrent_cell_map());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_undo_categories_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_categories_cell_map());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.should_edge_expand_formula_ranges_ = from._impl_.should_edge_expand_formula_ranges_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.was_categorized_ = from._impl_.was_categorized_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandInsertColumnsOrRowsArchive::CopyFrom(const CommandInsertColumnsOrRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandInsertColumnsOrRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInsertColumnsOrRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.undo_order_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_bundle()) {
    if (!_impl_.bundle_->IsInitialized()) return false;
  }
  if (_internal_has_undo_commands()) {
    if (!_impl_.undo_commands_->IsInitialized()) return false;
  }
  if (_internal_has_sort_order()) {
    if (!_impl_.sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_filter_set()) {
    if (!_impl_.filter_set_->IsInitialized()) return false;
  }
  if (_internal_has_src_row_column_uid()) {
    if (!_impl_.src_row_column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_opp_row_column_uid()) {
    if (!_impl_.opp_row_column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_undo_bundle()) {
    if (!_impl_.undo_bundle_->IsInitialized()) return false;
  }
  if (_internal_has_group_sort_order()) {
    if (!_impl_.group_sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_concurrent_cell_map()) {
    if (!_impl_.concurrent_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_categories_cell_map()) {
    if (!_impl_.categories_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_concurrent_cell_map()) {
    if (!_impl_.undo_concurrent_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_categories_cell_map()) {
    if (!_impl_.undo_categories_cell_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandInsertColumnsOrRowsArchive::InternalSwap(CommandInsertColumnsOrRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.undo_order_.InternalSwap(&other->_impl_.undo_order_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, _impl_.was_categorized_)
      + sizeof(CommandInsertColumnsOrRowsArchive::_impl_.was_categorized_)
      - PROTOBUF_FIELD_OFFSET(CommandInsertColumnsOrRowsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInsertColumnsOrRowsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[15]);
}

// ===================================================================

class ColumnRowBundleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ColumnRowBundleArchive>()._impl_._has_bits_);
  static void set_has_is_row(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

void ColumnRowBundleArchive::clear_view_uid_list() {
  _impl_.view_uid_list_.Clear();
}
void ColumnRowBundleArchive::clear_base_uid_list() {
  _impl_.base_uid_list_.Clear();
}
void ColumnRowBundleArchive::clear_category_order_uid_list() {
  _impl_.category_order_uid_list_.Clear();
}
ColumnRowBundleArchive::ColumnRowBundleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ColumnRowBundleArchive)
}
ColumnRowBundleArchive::ColumnRowBundleArchive(const ColumnRowBundleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnRowBundleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.view_uid_list_){from._impl_.view_uid_list_}
    , decltype(_impl_.view_type_list_){from._impl_.view_type_list_}
    , decltype(_impl_.base_uid_list_){from._impl_.base_uid_list_}
    , decltype(_impl_.base_type_list_){from._impl_.base_type_list_}
    , decltype(_impl_.category_order_uid_list_){from._impl_.category_order_uid_list_}
    , decltype(_impl_.category_order_type_list_){from._impl_.category_order_type_list_}
    , decltype(_impl_.metadata_list_){from._impl_.metadata_list_}
    , decltype(_impl_.is_row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.is_row_ = from._impl_.is_row_;
  // @@protoc_insertion_point(copy_constructor:TST.ColumnRowBundleArchive)
}

inline void ColumnRowBundleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.view_uid_list_){arena}
    , decltype(_impl_.view_type_list_){arena}
    , decltype(_impl_.base_uid_list_){arena}
    , decltype(_impl_.base_type_list_){arena}
    , decltype(_impl_.category_order_uid_list_){arena}
    , decltype(_impl_.category_order_type_list_){arena}
    , decltype(_impl_.metadata_list_){arena}
    , decltype(_impl_.is_row_){false}
  };
}

ColumnRowBundleArchive::~ColumnRowBundleArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnRowBundleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnRowBundleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.view_uid_list_.~RepeatedPtrField();
  _impl_.view_type_list_.~RepeatedField();
  _impl_.base_uid_list_.~RepeatedPtrField();
  _impl_.base_type_list_.~RepeatedField();
  _impl_.category_order_uid_list_.~RepeatedPtrField();
  _impl_.category_order_type_list_.~RepeatedField();
  _impl_.metadata_list_.~RepeatedPtrField();
}

void ColumnRowBundleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnRowBundleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnRowBundleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.view_uid_list_.Clear();
  _impl_.view_type_list_.Clear();
  _impl_.base_uid_list_.Clear();
  _impl_.base_type_list_.Clear();
  _impl_.category_order_uid_list_.Clear();
  _impl_.category_order_type_list_.Clear();
  _impl_.metadata_list_.Clear();
  _impl_.is_row_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnRowBundleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool is_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_is_row(&has_bits);
          _impl_.is_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID view_uid_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_view_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowBundleItemTypeEnum view_type_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TST::ColumnRowBundleItemTypeEnum_IsValid(val))) {
              _internal_add_view_type_list(static_cast<::TST::ColumnRowBundleItemTypeEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_view_type_list(), ptr, ctx, ::TST::ColumnRowBundleItemTypeEnum_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID base_uid_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowBundleItemTypeEnum base_type_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TST::ColumnRowBundleItemTypeEnum_IsValid(val))) {
              _internal_add_base_type_list(static_cast<::TST::ColumnRowBundleItemTypeEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_base_type_list(), ptr, ctx, ::TST::ColumnRowBundleItemTypeEnum_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID category_order_uid_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_order_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowBundleItemTypeEnum category_order_type_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TST::ColumnRowBundleItemTypeEnum_IsValid(val))) {
              _internal_add_category_order_type_list(static_cast<::TST::ColumnRowBundleItemTypeEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<uint8_t>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_category_order_type_list(), ptr, ctx, ::TST::ColumnRowBundleItemTypeEnum_IsValid, &_internal_metadata_, 7);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowMetadataArchive metadata_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadata_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnRowBundleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnRowBundleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool is_row = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_row(), target);
  }

  // repeated .TSP.UUID view_uid_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_view_uid_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_view_uid_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TST.ColumnRowBundleItemTypeEnum view_type_list = 3;
  for (int i = 0, n = this->_internal_view_type_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_view_type_list(i), target);
  }

  // repeated .TSP.UUID base_uid_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_base_uid_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_base_uid_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TST.ColumnRowBundleItemTypeEnum base_type_list = 5;
  for (int i = 0, n = this->_internal_base_type_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_base_type_list(i), target);
  }

  // repeated .TSP.UUID category_order_uid_list = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_order_uid_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_category_order_uid_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TST.ColumnRowBundleItemTypeEnum category_order_type_list = 7;
  for (int i = 0, n = this->_internal_category_order_type_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_category_order_type_list(i), target);
  }

  // repeated .TST.ColumnRowMetadataArchive metadata_list = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadata_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadata_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnRowBundleArchive)
  return target;
}

size_t ColumnRowBundleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnRowBundleArchive)
  size_t total_size = 0;

  // required bool is_row = 1;
  if (_internal_has_is_row()) {
    total_size += 1 + 1;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID view_uid_list = 2;
  total_size += 1UL * this->_internal_view_uid_list_size();
  for (const auto& msg : this->_impl_.view_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnRowBundleItemTypeEnum view_type_list = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_view_type_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_view_type_list(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TSP.UUID base_uid_list = 4;
  total_size += 1UL * this->_internal_base_uid_list_size();
  for (const auto& msg : this->_impl_.base_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnRowBundleItemTypeEnum base_type_list = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_base_type_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_base_type_list(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TSP.UUID category_order_uid_list = 6;
  total_size += 1UL * this->_internal_category_order_uid_list_size();
  for (const auto& msg : this->_impl_.category_order_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnRowBundleItemTypeEnum category_order_type_list = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_category_order_type_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_category_order_type_list(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TST.ColumnRowMetadataArchive metadata_list = 8;
  total_size += 1UL * this->_internal_metadata_list_size();
  for (const auto& msg : this->_impl_.metadata_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnRowBundleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnRowBundleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnRowBundleArchive::GetClassData() const { return &_class_data_; }


void ColumnRowBundleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnRowBundleArchive*>(&to_msg);
  auto& from = static_cast<const ColumnRowBundleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnRowBundleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.view_uid_list_.MergeFrom(from._impl_.view_uid_list_);
  _this->_impl_.view_type_list_.MergeFrom(from._impl_.view_type_list_);
  _this->_impl_.base_uid_list_.MergeFrom(from._impl_.base_uid_list_);
  _this->_impl_.base_type_list_.MergeFrom(from._impl_.base_type_list_);
  _this->_impl_.category_order_uid_list_.MergeFrom(from._impl_.category_order_uid_list_);
  _this->_impl_.category_order_type_list_.MergeFrom(from._impl_.category_order_type_list_);
  _this->_impl_.metadata_list_.MergeFrom(from._impl_.metadata_list_);
  if (from._internal_has_is_row()) {
    _this->_internal_set_is_row(from._internal_is_row());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnRowBundleArchive::CopyFrom(const ColumnRowBundleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnRowBundleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRowBundleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.view_uid_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.base_uid_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.category_order_uid_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.metadata_list_))
    return false;
  return true;
}

void ColumnRowBundleArchive::InternalSwap(ColumnRowBundleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.view_uid_list_.InternalSwap(&other->_impl_.view_uid_list_);
  _impl_.view_type_list_.InternalSwap(&other->_impl_.view_type_list_);
  _impl_.base_uid_list_.InternalSwap(&other->_impl_.base_uid_list_);
  _impl_.base_type_list_.InternalSwap(&other->_impl_.base_type_list_);
  _impl_.category_order_uid_list_.InternalSwap(&other->_impl_.category_order_uid_list_);
  _impl_.category_order_type_list_.InternalSwap(&other->_impl_.category_order_type_list_);
  _impl_.metadata_list_.InternalSwap(&other->_impl_.metadata_list_);
  swap(_impl_.is_row_, other->_impl_.is_row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnRowBundleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[16]);
}

// ===================================================================

class CommandRemoveColumnsOrRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRemoveColumnsOrRowsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::ColumnRowBundleArchive& bundle(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_bundle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& concurrent_cell_map(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_concurrent_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& categories_cell_map(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_categories_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& undo_concurrent_cell_map(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_undo_concurrent_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& undo_categories_cell_map(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_undo_categories_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& undo_filter_set(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_undo_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::TableSortOrderUIDArchive& undo_sort_order(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_undo_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::TableGroupSortOrderUIDArchive& undo_group_sort_order(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_undo_group_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& formula_rewrite_command_for_undo(const CommandRemoveColumnsOrRowsArchive* msg);
  static void set_has_formula_rewrite_command_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inverse_should_edge_expand_formula_ranges(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRemoveColumnsOrRowsArchive::_Internal::super(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::ColumnRowBundleArchive&
CommandRemoveColumnsOrRowsArchive::_Internal::bundle(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.bundle_;
}
const ::TSP::Reference&
CommandRemoveColumnsOrRowsArchive::_Internal::concurrent_cell_map(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.concurrent_cell_map_;
}
const ::TSP::Reference&
CommandRemoveColumnsOrRowsArchive::_Internal::categories_cell_map(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.categories_cell_map_;
}
const ::TSP::Reference&
CommandRemoveColumnsOrRowsArchive::_Internal::undo_concurrent_cell_map(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.undo_concurrent_cell_map_;
}
const ::TSP::Reference&
CommandRemoveColumnsOrRowsArchive::_Internal::undo_categories_cell_map(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.undo_categories_cell_map_;
}
const ::TSP::Reference&
CommandRemoveColumnsOrRowsArchive::_Internal::undo_filter_set(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.undo_filter_set_;
}
const ::TST::TableSortOrderUIDArchive&
CommandRemoveColumnsOrRowsArchive::_Internal::undo_sort_order(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.undo_sort_order_;
}
const ::TST::TableGroupSortOrderUIDArchive&
CommandRemoveColumnsOrRowsArchive::_Internal::undo_group_sort_order(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.undo_group_sort_order_;
}
const ::TSP::Reference&
CommandRemoveColumnsOrRowsArchive::_Internal::formula_rewrite_command_for_undo(const CommandRemoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.formula_rewrite_command_for_undo_;
}
void CommandRemoveColumnsOrRowsArchive::clear_concurrent_cell_map() {
  if (_impl_.concurrent_cell_map_ != nullptr) _impl_.concurrent_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void CommandRemoveColumnsOrRowsArchive::clear_categories_cell_map() {
  if (_impl_.categories_cell_map_ != nullptr) _impl_.categories_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void CommandRemoveColumnsOrRowsArchive::clear_undo_concurrent_cell_map() {
  if (_impl_.undo_concurrent_cell_map_ != nullptr) _impl_.undo_concurrent_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void CommandRemoveColumnsOrRowsArchive::clear_undo_categories_cell_map() {
  if (_impl_.undo_categories_cell_map_ != nullptr) _impl_.undo_categories_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void CommandRemoveColumnsOrRowsArchive::clear_undo_filter_set() {
  if (_impl_.undo_filter_set_ != nullptr) _impl_.undo_filter_set_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandRemoveColumnsOrRowsArchive::clear_undo_sort_order() {
  if (_impl_.undo_sort_order_ != nullptr) _impl_.undo_sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandRemoveColumnsOrRowsArchive::clear_undo_group_sort_order() {
  if (_impl_.undo_group_sort_order_ != nullptr) _impl_.undo_group_sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CommandRemoveColumnsOrRowsArchive::clear_formula_rewrite_command_for_undo() {
  if (_impl_.formula_rewrite_command_for_undo_ != nullptr) _impl_.formula_rewrite_command_for_undo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandRemoveColumnsOrRowsArchive::clear_undo_order() {
  _impl_.undo_order_.Clear();
}
CommandRemoveColumnsOrRowsArchive::CommandRemoveColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRemoveColumnsOrRowsArchive)
}
CommandRemoveColumnsOrRowsArchive::CommandRemoveColumnsOrRowsArchive(const CommandRemoveColumnsOrRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRemoveColumnsOrRowsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_order_){from._impl_.undo_order_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.bundle_){nullptr}
    , decltype(_impl_.undo_filter_set_){nullptr}
    , decltype(_impl_.undo_sort_order_){nullptr}
    , decltype(_impl_.formula_rewrite_command_for_undo_){nullptr}
    , decltype(_impl_.undo_group_sort_order_){nullptr}
    , decltype(_impl_.concurrent_cell_map_){nullptr}
    , decltype(_impl_.categories_cell_map_){nullptr}
    , decltype(_impl_.undo_concurrent_cell_map_){nullptr}
    , decltype(_impl_.undo_categories_cell_map_){nullptr}
    , decltype(_impl_.inverse_should_edge_expand_formula_ranges_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_bundle()) {
    _this->_impl_.bundle_ = new ::TST::ColumnRowBundleArchive(*from._impl_.bundle_);
  }
  if (from._internal_has_undo_filter_set()) {
    _this->_impl_.undo_filter_set_ = new ::TSP::Reference(*from._impl_.undo_filter_set_);
  }
  if (from._internal_has_undo_sort_order()) {
    _this->_impl_.undo_sort_order_ = new ::TST::TableSortOrderUIDArchive(*from._impl_.undo_sort_order_);
  }
  if (from._internal_has_formula_rewrite_command_for_undo()) {
    _this->_impl_.formula_rewrite_command_for_undo_ = new ::TSP::Reference(*from._impl_.formula_rewrite_command_for_undo_);
  }
  if (from._internal_has_undo_group_sort_order()) {
    _this->_impl_.undo_group_sort_order_ = new ::TST::TableGroupSortOrderUIDArchive(*from._impl_.undo_group_sort_order_);
  }
  if (from._internal_has_concurrent_cell_map()) {
    _this->_impl_.concurrent_cell_map_ = new ::TSP::Reference(*from._impl_.concurrent_cell_map_);
  }
  if (from._internal_has_categories_cell_map()) {
    _this->_impl_.categories_cell_map_ = new ::TSP::Reference(*from._impl_.categories_cell_map_);
  }
  if (from._internal_has_undo_concurrent_cell_map()) {
    _this->_impl_.undo_concurrent_cell_map_ = new ::TSP::Reference(*from._impl_.undo_concurrent_cell_map_);
  }
  if (from._internal_has_undo_categories_cell_map()) {
    _this->_impl_.undo_categories_cell_map_ = new ::TSP::Reference(*from._impl_.undo_categories_cell_map_);
  }
  _this->_impl_.inverse_should_edge_expand_formula_ranges_ = from._impl_.inverse_should_edge_expand_formula_ranges_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandRemoveColumnsOrRowsArchive)
}

inline void CommandRemoveColumnsOrRowsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.undo_order_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.bundle_){nullptr}
    , decltype(_impl_.undo_filter_set_){nullptr}
    , decltype(_impl_.undo_sort_order_){nullptr}
    , decltype(_impl_.formula_rewrite_command_for_undo_){nullptr}
    , decltype(_impl_.undo_group_sort_order_){nullptr}
    , decltype(_impl_.concurrent_cell_map_){nullptr}
    , decltype(_impl_.categories_cell_map_){nullptr}
    , decltype(_impl_.undo_concurrent_cell_map_){nullptr}
    , decltype(_impl_.undo_categories_cell_map_){nullptr}
    , decltype(_impl_.inverse_should_edge_expand_formula_ranges_){false}
  };
}

CommandRemoveColumnsOrRowsArchive::~CommandRemoveColumnsOrRowsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRemoveColumnsOrRowsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRemoveColumnsOrRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.undo_order_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.bundle_;
  if (this != internal_default_instance()) delete _impl_.undo_filter_set_;
  if (this != internal_default_instance()) delete _impl_.undo_sort_order_;
  if (this != internal_default_instance()) delete _impl_.formula_rewrite_command_for_undo_;
  if (this != internal_default_instance()) delete _impl_.undo_group_sort_order_;
  if (this != internal_default_instance()) delete _impl_.concurrent_cell_map_;
  if (this != internal_default_instance()) delete _impl_.categories_cell_map_;
  if (this != internal_default_instance()) delete _impl_.undo_concurrent_cell_map_;
  if (this != internal_default_instance()) delete _impl_.undo_categories_cell_map_;
}

void CommandRemoveColumnsOrRowsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRemoveColumnsOrRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRemoveColumnsOrRowsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.undo_order_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.bundle_ != nullptr);
      _impl_.bundle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.undo_filter_set_ != nullptr);
      _impl_.undo_filter_set_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.undo_sort_order_ != nullptr);
      _impl_.undo_sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.formula_rewrite_command_for_undo_ != nullptr);
      _impl_.formula_rewrite_command_for_undo_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.undo_group_sort_order_ != nullptr);
      _impl_.undo_group_sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.concurrent_cell_map_ != nullptr);
      _impl_.concurrent_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.categories_cell_map_ != nullptr);
      _impl_.categories_cell_map_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.undo_concurrent_cell_map_ != nullptr);
      _impl_.undo_concurrent_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.undo_categories_cell_map_ != nullptr);
      _impl_.undo_categories_cell_map_->Clear();
    }
  }
  _impl_.inverse_should_edge_expand_formula_ranges_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRemoveColumnsOrRowsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.ColumnRowBundleArchive bundle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bundle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_filter_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_filter_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderUIDArchive undo_sort_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command_for_undo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command_for_undo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool inverse_should_edge_expand_formula_ranges = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_inverse_should_edge_expand_formula_ranges(&has_bits);
          _impl_.inverse_should_edge_expand_formula_ranges_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_order = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableGroupSortOrderUIDArchive undo_group_sort_order = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_group_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference concurrent_cell_map = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_concurrent_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference categories_cell_map = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_categories_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_concurrent_cell_map = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_concurrent_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_categories_cell_map = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_categories_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRemoveColumnsOrRowsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRemoveColumnsOrRowsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.ColumnRowBundleArchive bundle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::bundle(this),
        _Internal::bundle(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_filter_set = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::undo_filter_set(this),
        _Internal::undo_filter_set(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableSortOrderUIDArchive undo_sort_order = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::undo_sort_order(this),
        _Internal::undo_sort_order(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::formula_rewrite_command_for_undo(this),
        _Internal::formula_rewrite_command_for_undo(this).GetCachedSize(), target, stream);
  }

  // optional bool inverse_should_edge_expand_formula_ranges = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_inverse_should_edge_expand_formula_ranges(), target);
  }

  // repeated .TSP.UUID undo_order = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_undo_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_undo_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TST.TableGroupSortOrderUIDArchive undo_group_sort_order = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::undo_group_sort_order(this),
        _Internal::undo_group_sort_order(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference concurrent_cell_map = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::concurrent_cell_map(this),
        _Internal::concurrent_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference categories_cell_map = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::categories_cell_map(this),
        _Internal::categories_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_concurrent_cell_map = 13;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::undo_concurrent_cell_map(this),
        _Internal::undo_concurrent_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_categories_cell_map = 14;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::undo_categories_cell_map(this),
        _Internal::undo_categories_cell_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRemoveColumnsOrRowsArchive)
  return target;
}

size_t CommandRemoveColumnsOrRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRemoveColumnsOrRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_bundle()) {
    // required .TST.ColumnRowBundleArchive bundle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bundle_);
  }

  return total_size;
}
size_t CommandRemoveColumnsOrRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRemoveColumnsOrRowsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.ColumnRowBundleArchive bundle = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bundle_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID undo_order = 9;
  total_size += 1UL * this->_internal_undo_order_size();
  for (const auto& msg : this->_impl_.undo_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional .TSP.Reference undo_filter_set = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_filter_set_);
    }

    // optional .TST.TableSortOrderUIDArchive undo_sort_order = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_sort_order_);
    }

    // optional .TSP.Reference formula_rewrite_command_for_undo = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formula_rewrite_command_for_undo_);
    }

    // optional .TST.TableGroupSortOrderUIDArchive undo_group_sort_order = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_group_sort_order_);
    }

    // optional .TSP.Reference concurrent_cell_map = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.concurrent_cell_map_);
    }

    // optional .TSP.Reference categories_cell_map = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.categories_cell_map_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TSP.Reference undo_concurrent_cell_map = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_concurrent_cell_map_);
    }

    // optional .TSP.Reference undo_categories_cell_map = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_categories_cell_map_);
    }

    // optional bool inverse_should_edge_expand_formula_ranges = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRemoveColumnsOrRowsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRemoveColumnsOrRowsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRemoveColumnsOrRowsArchive::GetClassData() const { return &_class_data_; }


void CommandRemoveColumnsOrRowsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRemoveColumnsOrRowsArchive*>(&to_msg);
  auto& from = static_cast<const CommandRemoveColumnsOrRowsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRemoveColumnsOrRowsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.undo_order_.MergeFrom(from._impl_.undo_order_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_bundle()->::TST::ColumnRowBundleArchive::MergeFrom(
          from._internal_bundle());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_undo_filter_set()->::TSP::Reference::MergeFrom(
          from._internal_undo_filter_set());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_undo_sort_order()->::TST::TableSortOrderUIDArchive::MergeFrom(
          from._internal_undo_sort_order());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_formula_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(
          from._internal_formula_rewrite_command_for_undo());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_undo_group_sort_order()->::TST::TableGroupSortOrderUIDArchive::MergeFrom(
          from._internal_undo_group_sort_order());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_concurrent_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_concurrent_cell_map());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_categories_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_categories_cell_map());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_undo_concurrent_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_concurrent_cell_map());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_undo_categories_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_categories_cell_map());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.inverse_should_edge_expand_formula_ranges_ = from._impl_.inverse_should_edge_expand_formula_ranges_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRemoveColumnsOrRowsArchive::CopyFrom(const CommandRemoveColumnsOrRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRemoveColumnsOrRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRemoveColumnsOrRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.undo_order_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_bundle()) {
    if (!_impl_.bundle_->IsInitialized()) return false;
  }
  if (_internal_has_undo_filter_set()) {
    if (!_impl_.undo_filter_set_->IsInitialized()) return false;
  }
  if (_internal_has_undo_sort_order()) {
    if (!_impl_.undo_sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command_for_undo()) {
    if (!_impl_.formula_rewrite_command_for_undo_->IsInitialized()) return false;
  }
  if (_internal_has_undo_group_sort_order()) {
    if (!_impl_.undo_group_sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_concurrent_cell_map()) {
    if (!_impl_.concurrent_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_categories_cell_map()) {
    if (!_impl_.categories_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_concurrent_cell_map()) {
    if (!_impl_.undo_concurrent_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_categories_cell_map()) {
    if (!_impl_.undo_categories_cell_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandRemoveColumnsOrRowsArchive::InternalSwap(CommandRemoveColumnsOrRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.undo_order_.InternalSwap(&other->_impl_.undo_order_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, _impl_.inverse_should_edge_expand_formula_ranges_)
      + sizeof(CommandRemoveColumnsOrRowsArchive::_impl_.inverse_should_edge_expand_formula_ranges_)
      - PROTOBUF_FIELD_OFFSET(CommandRemoveColumnsOrRowsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRemoveColumnsOrRowsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[17]);
}

// ===================================================================

class CommandRowColumnRangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRowColumnRangeArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRowColumnRangeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_row(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRowColumnRangeArchive::_Internal::super(const CommandRowColumnRangeArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandRowColumnRangeArchive::clear_uids() {
  _impl_.uids_.Clear();
}
CommandRowColumnRangeArchive::CommandRowColumnRangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRowColumnRangeArchive)
}
CommandRowColumnRangeArchive::CommandRowColumnRangeArchive(const CommandRowColumnRangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRowColumnRangeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uids_){from._impl_.uids_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.is_row_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  _this->_impl_.is_row_ = from._impl_.is_row_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandRowColumnRangeArchive)
}

inline void CommandRowColumnRangeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uids_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.is_row_){false}
  };
}

CommandRowColumnRangeArchive::~CommandRowColumnRangeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRowColumnRangeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRowColumnRangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandRowColumnRangeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRowColumnRangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRowColumnRangeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.is_row_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRowColumnRangeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool is_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_row(&has_bits);
          _impl_.is_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRowColumnRangeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRowColumnRangeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID uids = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool is_row = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_row(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRowColumnRangeArchive)
  return target;
}

size_t CommandRowColumnRangeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRowColumnRangeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_is_row()) {
    // required bool is_row = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandRowColumnRangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRowColumnRangeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool is_row = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uids = 2;
  total_size += 1UL * this->_internal_uids_size();
  for (const auto& msg : this->_impl_.uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRowColumnRangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRowColumnRangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRowColumnRangeArchive::GetClassData() const { return &_class_data_; }


void CommandRowColumnRangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRowColumnRangeArchive*>(&to_msg);
  auto& from = static_cast<const CommandRowColumnRangeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRowColumnRangeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uids_.MergeFrom(from._impl_.uids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_row_ = from._impl_.is_row_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRowColumnRangeArchive::CopyFrom(const CommandRowColumnRangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRowColumnRangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRowColumnRangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uids_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandRowColumnRangeArchive::InternalSwap(CommandRowColumnRangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.uids_.InternalSwap(&other->_impl_.uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRowColumnRangeArchive, _impl_.is_row_)
      + sizeof(CommandRowColumnRangeArchive::_impl_.is_row_)
      - PROTOBUF_FIELD_OFFSET(CommandRowColumnRangeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRowColumnRangeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[18]);
}

// ===================================================================

class CommandResizeColumnOrRowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandResizeColumnOrRowArchive>()._impl_._has_bits_);
  static const ::TST::CommandRowColumnRangeArchive& super(const CommandResizeColumnOrRowArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::CommandRowColumnRangeArchive&
CommandResizeColumnOrRowArchive::_Internal::super(const CommandResizeColumnOrRowArchive* msg) {
  return *msg->_impl_.super_;
}
CommandResizeColumnOrRowArchive::CommandResizeColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandResizeColumnOrRowArchive)
}
CommandResizeColumnOrRowArchive::CommandResizeColumnOrRowArchive(const CommandResizeColumnOrRowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandResizeColumnOrRowArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sizes_){from._impl_.sizes_}
    , decltype(_impl_.sizes_for_undo_){from._impl_.sizes_for_undo_}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandRowColumnRangeArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandResizeColumnOrRowArchive)
}

inline void CommandResizeColumnOrRowArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sizes_){arena}
    , decltype(_impl_.sizes_for_undo_){arena}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandResizeColumnOrRowArchive::~CommandResizeColumnOrRowArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandResizeColumnOrRowArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandResizeColumnOrRowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sizes_.~RepeatedField();
  _impl_.sizes_for_undo_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandResizeColumnOrRowArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandResizeColumnOrRowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandResizeColumnOrRowArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sizes_.Clear();
  _impl_.sizes_for_undo_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandResizeColumnOrRowArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandRowColumnRangeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float sizes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sizes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float sizes_for_undo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sizes_for_undo(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_sizes_for_undo(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandResizeColumnOrRowArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandResizeColumnOrRowArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandRowColumnRangeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated float sizes = 2;
  for (int i = 0, n = this->_internal_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_sizes(i), target);
  }

  // repeated float sizes_for_undo = 3;
  for (int i = 0, n = this->_internal_sizes_for_undo_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_sizes_for_undo(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandResizeColumnOrRowArchive)
  return target;
}

size_t CommandResizeColumnOrRowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandResizeColumnOrRowArchive)
  size_t total_size = 0;

  // required .TST.CommandRowColumnRangeArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float sizes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sizes_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sizes_size());
    total_size += data_size;
  }

  // repeated float sizes_for_undo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_sizes_for_undo_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_sizes_for_undo_size());
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandResizeColumnOrRowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandResizeColumnOrRowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandResizeColumnOrRowArchive::GetClassData() const { return &_class_data_; }


void CommandResizeColumnOrRowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandResizeColumnOrRowArchive*>(&to_msg);
  auto& from = static_cast<const CommandResizeColumnOrRowArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandResizeColumnOrRowArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.sizes_.MergeFrom(from._impl_.sizes_);
  _this->_impl_.sizes_for_undo_.MergeFrom(from._impl_.sizes_for_undo_);
  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TST::CommandRowColumnRangeArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandResizeColumnOrRowArchive::CopyFrom(const CommandResizeColumnOrRowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandResizeColumnOrRowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResizeColumnOrRowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandResizeColumnOrRowArchive::InternalSwap(CommandResizeColumnOrRowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.sizes_.InternalSwap(&other->_impl_.sizes_);
  _impl_.sizes_for_undo_.InternalSwap(&other->_impl_.sizes_for_undo_);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResizeColumnOrRowArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[19]);
}

// ===================================================================

class CommandCategoryResizeColumnOrRowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategoryResizeColumnOrRowArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategoryResizeColumnOrRowArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_category_column_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_category_column_size_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategoryResizeColumnOrRowArchive::_Internal::super(const CommandCategoryResizeColumnOrRowArchive* msg) {
  return *msg->_impl_.super_;
}
CommandCategoryResizeColumnOrRowArchive::CommandCategoryResizeColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategoryResizeColumnOrRowArchive)
}
CommandCategoryResizeColumnOrRowArchive::CommandCategoryResizeColumnOrRowArchive(const CommandCategoryResizeColumnOrRowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandCategoryResizeColumnOrRowArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_row_sizes_){from._impl_.category_row_sizes_}
    , decltype(_impl_.category_row_sizes_for_undo_){from._impl_.category_row_sizes_for_undo_}
    , decltype(_impl_.category_label_row_sizes_){from._impl_.category_label_row_sizes_}
    , decltype(_impl_.category_label_row_sizes_for_undo_){from._impl_.category_label_row_sizes_for_undo_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.category_column_size_){}
    , decltype(_impl_.category_column_size_for_undo_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.category_column_size_, &from._impl_.category_column_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.category_column_size_for_undo_) -
    reinterpret_cast<char*>(&_impl_.category_column_size_)) + sizeof(_impl_.category_column_size_for_undo_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategoryResizeColumnOrRowArchive)
}

inline void CommandCategoryResizeColumnOrRowArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_row_sizes_){arena}
    , decltype(_impl_.category_row_sizes_for_undo_){arena}
    , decltype(_impl_.category_label_row_sizes_){arena}
    , decltype(_impl_.category_label_row_sizes_for_undo_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.category_column_size_){0}
    , decltype(_impl_.category_column_size_for_undo_){0}
  };
}

CommandCategoryResizeColumnOrRowArchive::~CommandCategoryResizeColumnOrRowArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandCategoryResizeColumnOrRowArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandCategoryResizeColumnOrRowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_row_sizes_.~RepeatedField();
  _impl_.category_row_sizes_for_undo_.~RepeatedField();
  _impl_.category_label_row_sizes_.~RepeatedField();
  _impl_.category_label_row_sizes_for_undo_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandCategoryResizeColumnOrRowArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandCategoryResizeColumnOrRowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategoryResizeColumnOrRowArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_row_sizes_.Clear();
  _impl_.category_row_sizes_for_undo_.Clear();
  _impl_.category_label_row_sizes_.Clear();
  _impl_.category_label_row_sizes_for_undo_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.category_column_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.category_column_size_for_undo_) -
        reinterpret_cast<char*>(&_impl_.category_column_size_)) + sizeof(_impl_.category_column_size_for_undo_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategoryResizeColumnOrRowArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float category_row_sizes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_category_row_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<21>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_category_row_sizes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float category_row_sizes_for_undo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_category_row_sizes_for_undo(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<29>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_category_row_sizes_for_undo(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float category_label_row_sizes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_category_label_row_sizes(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<37>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_category_label_row_sizes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float category_label_row_sizes_for_undo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_category_label_row_sizes_for_undo(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_category_label_row_sizes_for_undo(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double category_column_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_category_column_size(&has_bits);
          _impl_.category_column_size_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double category_column_size_for_undo = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_category_column_size_for_undo(&has_bits);
          _impl_.category_column_size_for_undo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandCategoryResizeColumnOrRowArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategoryResizeColumnOrRowArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated float category_row_sizes = 2;
  for (int i = 0, n = this->_internal_category_row_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_category_row_sizes(i), target);
  }

  // repeated float category_row_sizes_for_undo = 3;
  for (int i = 0, n = this->_internal_category_row_sizes_for_undo_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_category_row_sizes_for_undo(i), target);
  }

  // repeated float category_label_row_sizes = 4;
  for (int i = 0, n = this->_internal_category_label_row_sizes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_category_label_row_sizes(i), target);
  }

  // repeated float category_label_row_sizes_for_undo = 5;
  for (int i = 0, n = this->_internal_category_label_row_sizes_for_undo_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_category_label_row_sizes_for_undo(i), target);
  }

  // optional double category_column_size = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_category_column_size(), target);
  }

  // optional double category_column_size_for_undo = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_category_column_size_for_undo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategoryResizeColumnOrRowArchive)
  return target;
}

size_t CommandCategoryResizeColumnOrRowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategoryResizeColumnOrRowArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float category_row_sizes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_category_row_sizes_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_category_row_sizes_size());
    total_size += data_size;
  }

  // repeated float category_row_sizes_for_undo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_category_row_sizes_for_undo_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_category_row_sizes_for_undo_size());
    total_size += data_size;
  }

  // repeated float category_label_row_sizes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_category_label_row_sizes_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_category_label_row_sizes_size());
    total_size += data_size;
  }

  // repeated float category_label_row_sizes_for_undo = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_category_label_row_sizes_for_undo_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_category_label_row_sizes_for_undo_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional double category_column_size = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double category_column_size_for_undo = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategoryResizeColumnOrRowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandCategoryResizeColumnOrRowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategoryResizeColumnOrRowArchive::GetClassData() const { return &_class_data_; }


void CommandCategoryResizeColumnOrRowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandCategoryResizeColumnOrRowArchive*>(&to_msg);
  auto& from = static_cast<const CommandCategoryResizeColumnOrRowArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategoryResizeColumnOrRowArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.category_row_sizes_.MergeFrom(from._impl_.category_row_sizes_);
  _this->_impl_.category_row_sizes_for_undo_.MergeFrom(from._impl_.category_row_sizes_for_undo_);
  _this->_impl_.category_label_row_sizes_.MergeFrom(from._impl_.category_label_row_sizes_);
  _this->_impl_.category_label_row_sizes_for_undo_.MergeFrom(from._impl_.category_label_row_sizes_for_undo_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.category_column_size_ = from._impl_.category_column_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.category_column_size_for_undo_ = from._impl_.category_column_size_for_undo_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategoryResizeColumnOrRowArchive::CopyFrom(const CommandCategoryResizeColumnOrRowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategoryResizeColumnOrRowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategoryResizeColumnOrRowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategoryResizeColumnOrRowArchive::InternalSwap(CommandCategoryResizeColumnOrRowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.category_row_sizes_.InternalSwap(&other->_impl_.category_row_sizes_);
  _impl_.category_row_sizes_for_undo_.InternalSwap(&other->_impl_.category_row_sizes_for_undo_);
  _impl_.category_label_row_sizes_.InternalSwap(&other->_impl_.category_label_row_sizes_);
  _impl_.category_label_row_sizes_for_undo_.InternalSwap(&other->_impl_.category_label_row_sizes_for_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategoryResizeColumnOrRowArchive, _impl_.category_column_size_for_undo_)
      + sizeof(CommandCategoryResizeColumnOrRowArchive::_impl_.category_column_size_for_undo_)
      - PROTOBUF_FIELD_OFFSET(CommandCategoryResizeColumnOrRowArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategoryResizeColumnOrRowArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[20]);
}

// ===================================================================

class CommandHideShowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandHideShowArchive>()._impl_._has_bits_);
  static const ::TST::CommandRowColumnRangeArchive& super(const CommandHideShowArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hide_show_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hiding_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::CommandRowColumnRangeArchive&
CommandHideShowArchive::_Internal::super(const CommandHideShowArchive* msg) {
  return *msg->_impl_.super_;
}
CommandHideShowArchive::CommandHideShowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandHideShowArchive)
}
CommandHideShowArchive::CommandHideShowArchive(const CommandHideShowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandHideShowArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hide_show_action_for_undo_){from._impl_.hide_show_action_for_undo_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.hide_show_action_){}
    , decltype(_impl_.hiding_action_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandRowColumnRangeArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.hide_show_action_, &from._impl_.hide_show_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hiding_action_) -
    reinterpret_cast<char*>(&_impl_.hide_show_action_)) + sizeof(_impl_.hiding_action_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandHideShowArchive)
}

inline void CommandHideShowArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hide_show_action_for_undo_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.hide_show_action_){0}
    , decltype(_impl_.hiding_action_){0u}
  };
}

CommandHideShowArchive::~CommandHideShowArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandHideShowArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandHideShowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hide_show_action_for_undo_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandHideShowArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandHideShowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandHideShowArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.hide_show_action_for_undo_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.hide_show_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.hiding_action_) -
        reinterpret_cast<char*>(&_impl_.hide_show_action_)) + sizeof(_impl_.hiding_action_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandHideShowArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandRowColumnRangeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.HideShowActionArchive hide_show_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::HideShowActionArchive_IsValid(val))) {
            _internal_set_hide_show_action(static_cast<::TST::HideShowActionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required uint32 hiding_action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_hiding_action(&has_bits);
          _impl_.hiding_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.HideShowActionArchive hide_show_action_for_undo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TST::HideShowActionArchive_IsValid(val))) {
              _internal_add_hide_show_action_for_undo(static_cast<::TST::HideShowActionArchive>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_hide_show_action_for_undo(), ptr, ctx, ::TST::HideShowActionArchive_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandHideShowArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandHideShowArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandRowColumnRangeArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.HideShowActionArchive hide_show_action = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_hide_show_action(), target);
  }

  // required uint32 hiding_action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hiding_action(), target);
  }

  // repeated .TST.HideShowActionArchive hide_show_action_for_undo = 4;
  for (int i = 0, n = this->_internal_hide_show_action_for_undo_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_hide_show_action_for_undo(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandHideShowArchive)
  return target;
}

size_t CommandHideShowArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandHideShowArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandRowColumnRangeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_hide_show_action()) {
    // required .TST.HideShowActionArchive hide_show_action = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_hide_show_action());
  }

  if (_internal_has_hiding_action()) {
    // required uint32 hiding_action = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hiding_action());
  }

  return total_size;
}
size_t CommandHideShowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandHideShowArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.CommandRowColumnRangeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.HideShowActionArchive hide_show_action = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_hide_show_action());

    // required uint32 hiding_action = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hiding_action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.HideShowActionArchive hide_show_action_for_undo = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_hide_show_action_for_undo_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_hide_show_action_for_undo(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandHideShowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandHideShowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandHideShowArchive::GetClassData() const { return &_class_data_; }


void CommandHideShowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandHideShowArchive*>(&to_msg);
  auto& from = static_cast<const CommandHideShowArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandHideShowArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.hide_show_action_for_undo_.MergeFrom(from._impl_.hide_show_action_for_undo_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandRowColumnRangeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.hide_show_action_ = from._impl_.hide_show_action_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.hiding_action_ = from._impl_.hiding_action_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandHideShowArchive::CopyFrom(const CommandHideShowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandHideShowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandHideShowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandHideShowArchive::InternalSwap(CommandHideShowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.hide_show_action_for_undo_.InternalSwap(&other->_impl_.hide_show_action_for_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandHideShowArchive, _impl_.hiding_action_)
      + sizeof(CommandHideShowArchive::_impl_.hiding_action_)
      - PROTOBUF_FIELD_OFFSET(CommandHideShowArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandHideShowArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[21]);
}

// ===================================================================

class CommandTextPreflightInsertCellArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTextPreflightInsertCellArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& coalesced_textcommand(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_coalesced_textcommand(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& postflightcommand(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_postflightcommand(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_grouped_with_postflight(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TST::Cell& editing_cell(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_editing_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& editing_storage(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_editing_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_column_hit_by_tap(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUIDCoordArchive& cell_uid(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSK::SelectionPathArchive& archived_initial_selection_path(const CommandTextPreflightInsertCellArchive* msg);
  static void set_has_archived_initial_selection_path(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000039) ^ 0x00000039) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandTextPreflightInsertCellArchive::_Internal::super(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandTextPreflightInsertCellArchive::_Internal::coalesced_textcommand(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->_impl_.coalesced_textcommand_;
}
const ::TSP::Reference&
CommandTextPreflightInsertCellArchive::_Internal::postflightcommand(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->_impl_.postflightcommand_;
}
const ::TST::Cell&
CommandTextPreflightInsertCellArchive::_Internal::editing_cell(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->_impl_.editing_cell_;
}
const ::TSP::Reference&
CommandTextPreflightInsertCellArchive::_Internal::editing_storage(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->_impl_.editing_storage_;
}
const ::TSP::UUIDCoordArchive&
CommandTextPreflightInsertCellArchive::_Internal::cell_uid(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->_impl_.cell_uid_;
}
const ::TSK::SelectionPathArchive&
CommandTextPreflightInsertCellArchive::_Internal::archived_initial_selection_path(const CommandTextPreflightInsertCellArchive* msg) {
  return *msg->_impl_.archived_initial_selection_path_;
}
void CommandTextPreflightInsertCellArchive::clear_coalesced_textcommand() {
  if (_impl_.coalesced_textcommand_ != nullptr) _impl_.coalesced_textcommand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandTextPreflightInsertCellArchive::clear_postflightcommand() {
  if (_impl_.postflightcommand_ != nullptr) _impl_.postflightcommand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandTextPreflightInsertCellArchive::clear_editing_cell() {
  if (_impl_.editing_cell_ != nullptr) _impl_.editing_cell_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandTextPreflightInsertCellArchive::clear_editing_storage() {
  if (_impl_.editing_storage_ != nullptr) _impl_.editing_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandTextPreflightInsertCellArchive::clear_cell_uid() {
  if (_impl_.cell_uid_ != nullptr) _impl_.cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CommandTextPreflightInsertCellArchive::clear_archived_initial_selection_path() {
  if (_impl_.archived_initial_selection_path_ != nullptr) _impl_.archived_initial_selection_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
CommandTextPreflightInsertCellArchive::CommandTextPreflightInsertCellArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandTextPreflightInsertCellArchive)
}
CommandTextPreflightInsertCellArchive::CommandTextPreflightInsertCellArchive(const CommandTextPreflightInsertCellArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandTextPreflightInsertCellArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.coalesced_textcommand_){nullptr}
    , decltype(_impl_.postflightcommand_){nullptr}
    , decltype(_impl_.editing_cell_){nullptr}
    , decltype(_impl_.editing_storage_){nullptr}
    , decltype(_impl_.cell_uid_){nullptr}
    , decltype(_impl_.archived_initial_selection_path_){nullptr}
    , decltype(_impl_.grouped_with_postflight_){}
    , decltype(_impl_.last_column_hit_by_tap_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_coalesced_textcommand()) {
    _this->_impl_.coalesced_textcommand_ = new ::TSP::Reference(*from._impl_.coalesced_textcommand_);
  }
  if (from._internal_has_postflightcommand()) {
    _this->_impl_.postflightcommand_ = new ::TSP::Reference(*from._impl_.postflightcommand_);
  }
  if (from._internal_has_editing_cell()) {
    _this->_impl_.editing_cell_ = new ::TST::Cell(*from._impl_.editing_cell_);
  }
  if (from._internal_has_editing_storage()) {
    _this->_impl_.editing_storage_ = new ::TSP::Reference(*from._impl_.editing_storage_);
  }
  if (from._internal_has_cell_uid()) {
    _this->_impl_.cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.cell_uid_);
  }
  if (from._internal_has_archived_initial_selection_path()) {
    _this->_impl_.archived_initial_selection_path_ = new ::TSK::SelectionPathArchive(*from._impl_.archived_initial_selection_path_);
  }
  ::memcpy(&_impl_.grouped_with_postflight_, &from._impl_.grouped_with_postflight_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_column_hit_by_tap_) -
    reinterpret_cast<char*>(&_impl_.grouped_with_postflight_)) + sizeof(_impl_.last_column_hit_by_tap_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandTextPreflightInsertCellArchive)
}

inline void CommandTextPreflightInsertCellArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.coalesced_textcommand_){nullptr}
    , decltype(_impl_.postflightcommand_){nullptr}
    , decltype(_impl_.editing_cell_){nullptr}
    , decltype(_impl_.editing_storage_){nullptr}
    , decltype(_impl_.cell_uid_){nullptr}
    , decltype(_impl_.archived_initial_selection_path_){nullptr}
    , decltype(_impl_.grouped_with_postflight_){false}
    , decltype(_impl_.last_column_hit_by_tap_){0u}
  };
}

CommandTextPreflightInsertCellArchive::~CommandTextPreflightInsertCellArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandTextPreflightInsertCellArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandTextPreflightInsertCellArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.coalesced_textcommand_;
  if (this != internal_default_instance()) delete _impl_.postflightcommand_;
  if (this != internal_default_instance()) delete _impl_.editing_cell_;
  if (this != internal_default_instance()) delete _impl_.editing_storage_;
  if (this != internal_default_instance()) delete _impl_.cell_uid_;
  if (this != internal_default_instance()) delete _impl_.archived_initial_selection_path_;
}

void CommandTextPreflightInsertCellArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandTextPreflightInsertCellArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandTextPreflightInsertCellArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.coalesced_textcommand_ != nullptr);
      _impl_.coalesced_textcommand_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.postflightcommand_ != nullptr);
      _impl_.postflightcommand_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.editing_cell_ != nullptr);
      _impl_.editing_cell_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.editing_storage_ != nullptr);
      _impl_.editing_storage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.cell_uid_ != nullptr);
      _impl_.cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.archived_initial_selection_path_ != nullptr);
      _impl_.archived_initial_selection_path_->Clear();
    }
  }
  _impl_.grouped_with_postflight_ = false;
  _impl_.last_column_hit_by_tap_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTextPreflightInsertCellArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference coalesced_textcommand = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_coalesced_textcommand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference postflightcommand = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_postflightcommand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool grouped_with_postflight = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_grouped_with_postflight(&has_bits);
          _impl_.grouped_with_postflight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.Cell editing_cell = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_editing_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference editing_storage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_editing_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_column_hit_by_tap = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_last_column_hit_by_tap(&has_bits);
          _impl_.last_column_hit_by_tap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive cell_uid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSK.SelectionPathArchive archived_initial_selection_path = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_initial_selection_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandTextPreflightInsertCellArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandTextPreflightInsertCellArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference coalesced_textcommand = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::coalesced_textcommand(this),
        _Internal::coalesced_textcommand(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference postflightcommand = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::postflightcommand(this),
        _Internal::postflightcommand(this).GetCachedSize(), target, stream);
  }

  // optional bool grouped_with_postflight = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_grouped_with_postflight(), target);
  }

  // required .TST.Cell editing_cell = 10;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::editing_cell(this),
        _Internal::editing_cell(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference editing_storage = 11;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::editing_storage(this),
        _Internal::editing_storage(this).GetCachedSize(), target, stream);
  }

  // optional uint32 last_column_hit_by_tap = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_last_column_hit_by_tap(), target);
  }

  // required .TSP.UUIDCoordArchive cell_uid = 13;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::cell_uid(this),
        _Internal::cell_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSK.SelectionPathArchive archived_initial_selection_path = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::archived_initial_selection_path(this),
        _Internal::archived_initial_selection_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandTextPreflightInsertCellArchive)
  return target;
}

size_t CommandTextPreflightInsertCellArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandTextPreflightInsertCellArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_editing_cell()) {
    // required .TST.Cell editing_cell = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.editing_cell_);
  }

  if (_internal_has_editing_storage()) {
    // required .TSP.Reference editing_storage = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.editing_storage_);
  }

  if (_internal_has_cell_uid()) {
    // required .TSP.UUIDCoordArchive cell_uid = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uid_);
  }

  return total_size;
}
size_t CommandTextPreflightInsertCellArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandTextPreflightInsertCellArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000039) ^ 0x00000039) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.Cell editing_cell = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.editing_cell_);

    // required .TSP.Reference editing_storage = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.editing_storage_);

    // required .TSP.UUIDCoordArchive cell_uid = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference coalesced_textcommand = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.coalesced_textcommand_);
    }

    // optional .TSP.Reference postflightcommand = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.postflightcommand_);
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional .TSK.SelectionPathArchive archived_initial_selection_path = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.archived_initial_selection_path_);
    }

    // optional bool grouped_with_postflight = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 last_column_hit_by_tap = 12;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_column_hit_by_tap());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTextPreflightInsertCellArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandTextPreflightInsertCellArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTextPreflightInsertCellArchive::GetClassData() const { return &_class_data_; }


void CommandTextPreflightInsertCellArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandTextPreflightInsertCellArchive*>(&to_msg);
  auto& from = static_cast<const CommandTextPreflightInsertCellArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandTextPreflightInsertCellArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_coalesced_textcommand()->::TSP::Reference::MergeFrom(
          from._internal_coalesced_textcommand());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_postflightcommand()->::TSP::Reference::MergeFrom(
          from._internal_postflightcommand());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_editing_cell()->::TST::Cell::MergeFrom(
          from._internal_editing_cell());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_editing_storage()->::TSP::Reference::MergeFrom(
          from._internal_editing_storage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_cell_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_archived_initial_selection_path()->::TSK::SelectionPathArchive::MergeFrom(
          from._internal_archived_initial_selection_path());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.grouped_with_postflight_ = from._impl_.grouped_with_postflight_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_last_column_hit_by_tap(from._internal_last_column_hit_by_tap());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTextPreflightInsertCellArchive::CopyFrom(const CommandTextPreflightInsertCellArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandTextPreflightInsertCellArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTextPreflightInsertCellArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_coalesced_textcommand()) {
    if (!_impl_.coalesced_textcommand_->IsInitialized()) return false;
  }
  if (_internal_has_postflightcommand()) {
    if (!_impl_.postflightcommand_->IsInitialized()) return false;
  }
  if (_internal_has_editing_cell()) {
    if (!_impl_.editing_cell_->IsInitialized()) return false;
  }
  if (_internal_has_editing_storage()) {
    if (!_impl_.editing_storage_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid()) {
    if (!_impl_.cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_archived_initial_selection_path()) {
    if (!_impl_.archived_initial_selection_path_->IsInitialized()) return false;
  }
  return true;
}

void CommandTextPreflightInsertCellArchive::InternalSwap(CommandTextPreflightInsertCellArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, _impl_.last_column_hit_by_tap_)
      + sizeof(CommandTextPreflightInsertCellArchive::_impl_.last_column_hit_by_tap_)
      - PROTOBUF_FIELD_OFFSET(CommandTextPreflightInsertCellArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTextPreflightInsertCellArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[22]);
}

// ===================================================================

class CommandPostflightSetCellArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPostflightSetCellArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandPostflightSetCellArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& childcommandundo(const CommandPostflightSetCellArchive* msg);
  static void set_has_childcommandundo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::Cell& editing_cell(const CommandPostflightSetCellArchive* msg);
  static void set_has_editing_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::Cell& new_cell(const CommandPostflightSetCellArchive* msg);
  static void set_has_new_cell(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& editing_storage(const CommandPostflightSetCellArchive* msg);
  static void set_has_editing_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_column_hit_by_tap(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUIDCoordArchive& cell_uid(const CommandPostflightSetCellArchive* msg);
  static void set_has_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003d) ^ 0x0000003d) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandPostflightSetCellArchive::_Internal::super(const CommandPostflightSetCellArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandPostflightSetCellArchive::_Internal::childcommandundo(const CommandPostflightSetCellArchive* msg) {
  return *msg->_impl_.childcommandundo_;
}
const ::TST::Cell&
CommandPostflightSetCellArchive::_Internal::editing_cell(const CommandPostflightSetCellArchive* msg) {
  return *msg->_impl_.editing_cell_;
}
const ::TST::Cell&
CommandPostflightSetCellArchive::_Internal::new_cell(const CommandPostflightSetCellArchive* msg) {
  return *msg->_impl_.new_cell_;
}
const ::TSP::Reference&
CommandPostflightSetCellArchive::_Internal::editing_storage(const CommandPostflightSetCellArchive* msg) {
  return *msg->_impl_.editing_storage_;
}
const ::TSP::UUIDCoordArchive&
CommandPostflightSetCellArchive::_Internal::cell_uid(const CommandPostflightSetCellArchive* msg) {
  return *msg->_impl_.cell_uid_;
}
void CommandPostflightSetCellArchive::clear_childcommandundo() {
  if (_impl_.childcommandundo_ != nullptr) _impl_.childcommandundo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandPostflightSetCellArchive::clear_editing_cell() {
  if (_impl_.editing_cell_ != nullptr) _impl_.editing_cell_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandPostflightSetCellArchive::clear_new_cell() {
  if (_impl_.new_cell_ != nullptr) _impl_.new_cell_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandPostflightSetCellArchive::clear_editing_storage() {
  if (_impl_.editing_storage_ != nullptr) _impl_.editing_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandPostflightSetCellArchive::clear_cell_uid() {
  if (_impl_.cell_uid_ != nullptr) _impl_.cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CommandPostflightSetCellArchive::CommandPostflightSetCellArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandPostflightSetCellArchive)
}
CommandPostflightSetCellArchive::CommandPostflightSetCellArchive(const CommandPostflightSetCellArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandPostflightSetCellArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.childcommandundo_){nullptr}
    , decltype(_impl_.editing_cell_){nullptr}
    , decltype(_impl_.new_cell_){nullptr}
    , decltype(_impl_.editing_storage_){nullptr}
    , decltype(_impl_.cell_uid_){nullptr}
    , decltype(_impl_.last_column_hit_by_tap_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_childcommandundo()) {
    _this->_impl_.childcommandundo_ = new ::TSP::Reference(*from._impl_.childcommandundo_);
  }
  if (from._internal_has_editing_cell()) {
    _this->_impl_.editing_cell_ = new ::TST::Cell(*from._impl_.editing_cell_);
  }
  if (from._internal_has_new_cell()) {
    _this->_impl_.new_cell_ = new ::TST::Cell(*from._impl_.new_cell_);
  }
  if (from._internal_has_editing_storage()) {
    _this->_impl_.editing_storage_ = new ::TSP::Reference(*from._impl_.editing_storage_);
  }
  if (from._internal_has_cell_uid()) {
    _this->_impl_.cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.cell_uid_);
  }
  _this->_impl_.last_column_hit_by_tap_ = from._impl_.last_column_hit_by_tap_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandPostflightSetCellArchive)
}

inline void CommandPostflightSetCellArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.childcommandundo_){nullptr}
    , decltype(_impl_.editing_cell_){nullptr}
    , decltype(_impl_.new_cell_){nullptr}
    , decltype(_impl_.editing_storage_){nullptr}
    , decltype(_impl_.cell_uid_){nullptr}
    , decltype(_impl_.last_column_hit_by_tap_){0u}
  };
}

CommandPostflightSetCellArchive::~CommandPostflightSetCellArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandPostflightSetCellArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandPostflightSetCellArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.childcommandundo_;
  if (this != internal_default_instance()) delete _impl_.editing_cell_;
  if (this != internal_default_instance()) delete _impl_.new_cell_;
  if (this != internal_default_instance()) delete _impl_.editing_storage_;
  if (this != internal_default_instance()) delete _impl_.cell_uid_;
}

void CommandPostflightSetCellArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandPostflightSetCellArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandPostflightSetCellArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.childcommandundo_ != nullptr);
      _impl_.childcommandundo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.editing_cell_ != nullptr);
      _impl_.editing_cell_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.new_cell_ != nullptr);
      _impl_.new_cell_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.editing_storage_ != nullptr);
      _impl_.editing_storage_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.cell_uid_ != nullptr);
      _impl_.cell_uid_->Clear();
    }
  }
  _impl_.last_column_hit_by_tap_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPostflightSetCellArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference childcommandundo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_childcommandundo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.Cell editing_cell = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_editing_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.Cell new_cell = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference editing_storage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_editing_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 last_column_hit_by_tap = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_last_column_hit_by_tap(&has_bits);
          _impl_.last_column_hit_by_tap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive cell_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandPostflightSetCellArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandPostflightSetCellArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference childcommandundo = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::childcommandundo(this),
        _Internal::childcommandundo(this).GetCachedSize(), target, stream);
  }

  // required .TST.Cell editing_cell = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::editing_cell(this),
        _Internal::editing_cell(this).GetCachedSize(), target, stream);
  }

  // required .TST.Cell new_cell = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::new_cell(this),
        _Internal::new_cell(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference editing_storage = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::editing_storage(this),
        _Internal::editing_storage(this).GetCachedSize(), target, stream);
  }

  // optional uint32 last_column_hit_by_tap = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_last_column_hit_by_tap(), target);
  }

  // required .TSP.UUIDCoordArchive cell_uid = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::cell_uid(this),
        _Internal::cell_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandPostflightSetCellArchive)
  return target;
}

size_t CommandPostflightSetCellArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandPostflightSetCellArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_editing_cell()) {
    // required .TST.Cell editing_cell = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.editing_cell_);
  }

  if (_internal_has_new_cell()) {
    // required .TST.Cell new_cell = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_cell_);
  }

  if (_internal_has_editing_storage()) {
    // required .TSP.Reference editing_storage = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.editing_storage_);
  }

  if (_internal_has_cell_uid()) {
    // required .TSP.UUIDCoordArchive cell_uid = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uid_);
  }

  return total_size;
}
size_t CommandPostflightSetCellArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandPostflightSetCellArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000003d) ^ 0x0000003d) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.Cell editing_cell = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.editing_cell_);

    // required .TST.Cell new_cell = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_cell_);

    // required .TSP.Reference editing_storage = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.editing_storage_);

    // required .TSP.UUIDCoordArchive cell_uid = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference childcommandundo = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.childcommandundo_);
  }

  // optional uint32 last_column_hit_by_tap = 9;
  if (cached_has_bits & 0x00000040u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_column_hit_by_tap());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPostflightSetCellArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandPostflightSetCellArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPostflightSetCellArchive::GetClassData() const { return &_class_data_; }


void CommandPostflightSetCellArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandPostflightSetCellArchive*>(&to_msg);
  auto& from = static_cast<const CommandPostflightSetCellArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandPostflightSetCellArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_childcommandundo()->::TSP::Reference::MergeFrom(
          from._internal_childcommandundo());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_editing_cell()->::TST::Cell::MergeFrom(
          from._internal_editing_cell());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_new_cell()->::TST::Cell::MergeFrom(
          from._internal_new_cell());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_editing_storage()->::TSP::Reference::MergeFrom(
          from._internal_editing_storage());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_cell_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.last_column_hit_by_tap_ = from._impl_.last_column_hit_by_tap_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPostflightSetCellArchive::CopyFrom(const CommandPostflightSetCellArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandPostflightSetCellArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPostflightSetCellArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_childcommandundo()) {
    if (!_impl_.childcommandundo_->IsInitialized()) return false;
  }
  if (_internal_has_editing_cell()) {
    if (!_impl_.editing_cell_->IsInitialized()) return false;
  }
  if (_internal_has_new_cell()) {
    if (!_impl_.new_cell_->IsInitialized()) return false;
  }
  if (_internal_has_editing_storage()) {
    if (!_impl_.editing_storage_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid()) {
    if (!_impl_.cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandPostflightSetCellArchive::InternalSwap(CommandPostflightSetCellArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPostflightSetCellArchive, _impl_.last_column_hit_by_tap_)
      + sizeof(CommandPostflightSetCellArchive::_impl_.last_column_hit_by_tap_)
      - PROTOBUF_FIELD_OFFSET(CommandPostflightSetCellArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPostflightSetCellArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[23]);
}

// ===================================================================

class CommandChangeTableAreaForColumnOrRowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChangeTableAreaForColumnOrRowArchive>()._impl_._has_bits_);
  static const ::TST::CommandRowColumnRangeArchive& super(const CommandChangeTableAreaForColumnOrRowArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_table_area_transition(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandChangeTableAreaForColumnOrRowArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_cell_diff_map(const CommandChangeTableAreaForColumnOrRowArchive* msg);
  static void set_has_undo_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& undo_commands(const CommandChangeTableAreaForColumnOrRowArchive* msg);
  static void set_has_undo_commands(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_action_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000022) ^ 0x00000022) != 0;
  }
};

const ::TST::CommandRowColumnRangeArchive&
CommandChangeTableAreaForColumnOrRowArchive::_Internal::super(const CommandChangeTableAreaForColumnOrRowArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandChangeTableAreaForColumnOrRowArchive::_Internal::cell_diff_map(const CommandChangeTableAreaForColumnOrRowArchive* msg) {
  return *msg->_impl_.cell_diff_map_;
}
const ::TSP::Reference&
CommandChangeTableAreaForColumnOrRowArchive::_Internal::undo_cell_diff_map(const CommandChangeTableAreaForColumnOrRowArchive* msg) {
  return *msg->_impl_.undo_cell_diff_map_;
}
const ::TSP::Reference&
CommandChangeTableAreaForColumnOrRowArchive::_Internal::undo_commands(const CommandChangeTableAreaForColumnOrRowArchive* msg) {
  return *msg->_impl_.undo_commands_;
}
void CommandChangeTableAreaForColumnOrRowArchive::clear_cell_diff_map() {
  if (_impl_.cell_diff_map_ != nullptr) _impl_.cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandChangeTableAreaForColumnOrRowArchive::clear_undo_cell_diff_map() {
  if (_impl_.undo_cell_diff_map_ != nullptr) _impl_.undo_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandChangeTableAreaForColumnOrRowArchive::clear_undo_commands() {
  if (_impl_.undo_commands_ != nullptr) _impl_.undo_commands_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CommandChangeTableAreaForColumnOrRowArchive::CommandChangeTableAreaForColumnOrRowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandChangeTableAreaForColumnOrRowArchive)
}
CommandChangeTableAreaForColumnOrRowArchive::CommandChangeTableAreaForColumnOrRowArchive(const CommandChangeTableAreaForColumnOrRowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandChangeTableAreaForColumnOrRowArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_string_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.undo_cell_diff_map_){nullptr}
    , decltype(_impl_.undo_commands_){nullptr}
    , decltype(_impl_.table_area_transition_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action_string()) {
    _this->_impl_.action_string_.Set(from._internal_action_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandRowColumnRangeArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_diff_map()) {
    _this->_impl_.cell_diff_map_ = new ::TSP::Reference(*from._impl_.cell_diff_map_);
  }
  if (from._internal_has_undo_cell_diff_map()) {
    _this->_impl_.undo_cell_diff_map_ = new ::TSP::Reference(*from._impl_.undo_cell_diff_map_);
  }
  if (from._internal_has_undo_commands()) {
    _this->_impl_.undo_commands_ = new ::TSP::Reference(*from._impl_.undo_commands_);
  }
  _this->_impl_.table_area_transition_ = from._impl_.table_area_transition_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandChangeTableAreaForColumnOrRowArchive)
}

inline void CommandChangeTableAreaForColumnOrRowArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.action_string_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.undo_cell_diff_map_){nullptr}
    , decltype(_impl_.undo_commands_){nullptr}
    , decltype(_impl_.table_area_transition_){1}
  };
  _impl_.action_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.action_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandChangeTableAreaForColumnOrRowArchive::~CommandChangeTableAreaForColumnOrRowArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandChangeTableAreaForColumnOrRowArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandChangeTableAreaForColumnOrRowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.action_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.undo_cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.undo_commands_;
}

void CommandChangeTableAreaForColumnOrRowArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandChangeTableAreaForColumnOrRowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.action_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.cell_diff_map_ != nullptr);
      _impl_.cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.undo_cell_diff_map_ != nullptr);
      _impl_.undo_cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.undo_commands_ != nullptr);
      _impl_.undo_commands_->Clear();
    }
    _impl_.table_area_transition_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChangeTableAreaForColumnOrRowArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandRowColumnRangeArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableAreaTransition table_area_transition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableAreaTransition_IsValid(val))) {
            _internal_set_table_area_transition(static_cast<::TST::TableAreaTransition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_diff_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_commands = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_commands(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string action_string = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_action_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CommandChangeTableAreaForColumnOrRowArchive.action_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandChangeTableAreaForColumnOrRowArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandRowColumnRangeArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.TableAreaTransition table_area_transition = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_table_area_transition(), target);
  }

  // optional .TSP.Reference cell_diff_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cell_diff_map(this),
        _Internal::cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_cell_diff_map = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::undo_cell_diff_map(this),
        _Internal::undo_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_commands = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::undo_commands(this),
        _Internal::undo_commands(this).GetCachedSize(), target, stream);
  }

  // optional string action_string = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_action_string().data(), static_cast<int>(this->_internal_action_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandChangeTableAreaForColumnOrRowArchive.action_string");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_action_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandChangeTableAreaForColumnOrRowArchive)
  return target;
}

size_t CommandChangeTableAreaForColumnOrRowArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandRowColumnRangeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_table_area_transition()) {
    // required .TST.TableAreaTransition table_area_transition = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_table_area_transition());
  }

  return total_size;
}
size_t CommandChangeTableAreaForColumnOrRowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000022) ^ 0x00000022) == 0) {  // All required fields are present.
    // required .TST.CommandRowColumnRangeArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.TableAreaTransition table_area_transition = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_table_area_transition());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string action_string = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action_string());
  }

  if (cached_has_bits & 0x0000001cu) {
    // optional .TSP.Reference cell_diff_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_diff_map_);
    }

    // optional .TSP.Reference undo_cell_diff_map = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_cell_diff_map_);
    }

    // optional .TSP.Reference undo_commands = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_commands_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChangeTableAreaForColumnOrRowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandChangeTableAreaForColumnOrRowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChangeTableAreaForColumnOrRowArchive::GetClassData() const { return &_class_data_; }


void CommandChangeTableAreaForColumnOrRowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandChangeTableAreaForColumnOrRowArchive*>(&to_msg);
  auto& from = static_cast<const CommandChangeTableAreaForColumnOrRowArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_action_string(from._internal_action_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TST::CommandRowColumnRangeArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_undo_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_cell_diff_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_undo_commands()->::TSP::Reference::MergeFrom(
          from._internal_undo_commands());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.table_area_transition_ = from._impl_.table_area_transition_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChangeTableAreaForColumnOrRowArchive::CopyFrom(const CommandChangeTableAreaForColumnOrRowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandChangeTableAreaForColumnOrRowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChangeTableAreaForColumnOrRowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!_impl_.cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_diff_map()) {
    if (!_impl_.undo_cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_commands()) {
    if (!_impl_.undo_commands_->IsInitialized()) return false;
  }
  return true;
}

void CommandChangeTableAreaForColumnOrRowArchive::InternalSwap(CommandChangeTableAreaForColumnOrRowArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.action_string_, lhs_arena,
      &other->_impl_.action_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChangeTableAreaForColumnOrRowArchive, _impl_.undo_commands_)
      + sizeof(CommandChangeTableAreaForColumnOrRowArchive::_impl_.undo_commands_)
      - PROTOBUF_FIELD_OFFSET(CommandChangeTableAreaForColumnOrRowArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.table_area_transition_, other->_impl_.table_area_transition_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChangeTableAreaForColumnOrRowArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[24]);
}

// ===================================================================

class CommandSetPencilAnnotationsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetPencilAnnotationsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetPencilAnnotationsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rollback_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetPencilAnnotationsArchive::_Internal::super(const CommandSetPencilAnnotationsArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSetPencilAnnotationsArchive::clear_annotations() {
  _impl_.annotations_.Clear();
}
void CommandSetPencilAnnotationsArchive::clear_formulas() {
  _impl_.formulas_.Clear();
}
void CommandSetPencilAnnotationsArchive::clear_inverse_formulas() {
  _impl_.inverse_formulas_.Clear();
}
CommandSetPencilAnnotationsArchive::CommandSetPencilAnnotationsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetPencilAnnotationsArchive)
}
CommandSetPencilAnnotationsArchive::CommandSetPencilAnnotationsArchive(const CommandSetPencilAnnotationsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetPencilAnnotationsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){from._impl_.annotations_}
    , decltype(_impl_.formulas_){from._impl_.formulas_}
    , decltype(_impl_.formula_indexes_){from._impl_.formula_indexes_}
    , decltype(_impl_.inverse_formulas_){from._impl_.inverse_formulas_}
    , decltype(_impl_.inverse_formula_indexes_){from._impl_.inverse_formula_indexes_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rollback_index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  _this->_impl_.rollback_index_ = from._impl_.rollback_index_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetPencilAnnotationsArchive)
}

inline void CommandSetPencilAnnotationsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_){arena}
    , decltype(_impl_.formulas_){arena}
    , decltype(_impl_.formula_indexes_){arena}
    , decltype(_impl_.inverse_formulas_){arena}
    , decltype(_impl_.inverse_formula_indexes_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rollback_index_){uint64_t{0u}}
  };
}

CommandSetPencilAnnotationsArchive::~CommandSetPencilAnnotationsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetPencilAnnotationsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetPencilAnnotationsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotations_.~RepeatedPtrField();
  _impl_.formulas_.~RepeatedPtrField();
  _impl_.formula_indexes_.~RepeatedField();
  _impl_.inverse_formulas_.~RepeatedPtrField();
  _impl_.inverse_formula_indexes_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetPencilAnnotationsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetPencilAnnotationsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetPencilAnnotationsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotations_.Clear();
  _impl_.formulas_.Clear();
  _impl_.formula_indexes_.Clear();
  _impl_.inverse_formulas_.Clear();
  _impl_.inverse_formula_indexes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.rollback_index_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetPencilAnnotationsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference annotations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive formulas = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_formulas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 formula_indexes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_formula_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_formula_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSCE.FormulaArchive inverse_formulas = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_inverse_formulas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 inverse_formula_indexes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_inverse_formula_indexes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_inverse_formula_indexes(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 rollback_index = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_rollback_index(&has_bits);
          _impl_.rollback_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetPencilAnnotationsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetPencilAnnotationsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference annotations = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSCE.FormulaArchive formulas = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_formulas_size()); i < n; i++) {
    const auto& repfield = this->_internal_formulas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 formula_indexes = 4;
  for (int i = 0, n = this->_internal_formula_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_formula_indexes(i), target);
  }

  // repeated .TSCE.FormulaArchive inverse_formulas = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_inverse_formulas_size()); i < n; i++) {
    const auto& repfield = this->_internal_inverse_formulas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated uint64 inverse_formula_indexes = 6;
  for (int i = 0, n = this->_internal_inverse_formula_indexes_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_inverse_formula_indexes(i), target);
  }

  // optional uint64 rollback_index = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_rollback_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetPencilAnnotationsArchive)
  return target;
}

size_t CommandSetPencilAnnotationsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetPencilAnnotationsArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference annotations = 2;
  total_size += 1UL * this->_internal_annotations_size();
  for (const auto& msg : this->_impl_.annotations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSCE.FormulaArchive formulas = 3;
  total_size += 1UL * this->_internal_formulas_size();
  for (const auto& msg : this->_impl_.formulas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 formula_indexes = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.formula_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_formula_indexes_size());
    total_size += data_size;
  }

  // repeated .TSCE.FormulaArchive inverse_formulas = 5;
  total_size += 1UL * this->_internal_inverse_formulas_size();
  for (const auto& msg : this->_impl_.inverse_formulas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 inverse_formula_indexes = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.inverse_formula_indexes_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_inverse_formula_indexes_size());
    total_size += data_size;
  }

  // optional uint64 rollback_index = 7;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_rollback_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetPencilAnnotationsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetPencilAnnotationsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetPencilAnnotationsArchive::GetClassData() const { return &_class_data_; }


void CommandSetPencilAnnotationsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetPencilAnnotationsArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetPencilAnnotationsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetPencilAnnotationsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotations_.MergeFrom(from._impl_.annotations_);
  _this->_impl_.formulas_.MergeFrom(from._impl_.formulas_);
  _this->_impl_.formula_indexes_.MergeFrom(from._impl_.formula_indexes_);
  _this->_impl_.inverse_formulas_.MergeFrom(from._impl_.inverse_formulas_);
  _this->_impl_.inverse_formula_indexes_.MergeFrom(from._impl_.inverse_formula_indexes_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rollback_index_ = from._impl_.rollback_index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetPencilAnnotationsArchive::CopyFrom(const CommandSetPencilAnnotationsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetPencilAnnotationsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetPencilAnnotationsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.annotations_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.formulas_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.inverse_formulas_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetPencilAnnotationsArchive::InternalSwap(CommandSetPencilAnnotationsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.annotations_.InternalSwap(&other->_impl_.annotations_);
  _impl_.formulas_.InternalSwap(&other->_impl_.formulas_);
  _impl_.formula_indexes_.InternalSwap(&other->_impl_.formula_indexes_);
  _impl_.inverse_formulas_.InternalSwap(&other->_impl_.inverse_formulas_);
  _impl_.inverse_formula_indexes_.InternalSwap(&other->_impl_.inverse_formula_indexes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetPencilAnnotationsArchive, _impl_.rollback_index_)
      + sizeof(CommandSetPencilAnnotationsArchive::_impl_.rollback_index_)
      - PROTOBUF_FIELD_OFFSET(CommandSetPencilAnnotationsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetPencilAnnotationsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[25]);
}

// ===================================================================

class CommandSetTableNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTableNameArchive>()._impl_._has_bits_);
  static void set_has_newtablename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_oldtablename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& newstyle(const CommandSetTableNameArchive* msg);
  static void set_has_newstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& oldstyle(const CommandSetTableNameArchive* msg);
  static void set_has_oldstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::TableCommandArchive& super(const CommandSetTableNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& old_shape_style(const CommandSetTableNameArchive* msg);
  static void set_has_old_shape_style(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& new_shape_style(const CommandSetTableNameArchive* msg);
  static void set_has_new_shape_style(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_old_table_name_border_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_new_table_name_border_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000011) ^ 0x00000011) != 0;
  }
};

const ::TSP::Reference&
CommandSetTableNameArchive::_Internal::newstyle(const CommandSetTableNameArchive* msg) {
  return *msg->_impl_.newstyle_;
}
const ::TSP::Reference&
CommandSetTableNameArchive::_Internal::oldstyle(const CommandSetTableNameArchive* msg) {
  return *msg->_impl_.oldstyle_;
}
const ::TST::TableCommandArchive&
CommandSetTableNameArchive::_Internal::super(const CommandSetTableNameArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSetTableNameArchive::_Internal::old_shape_style(const CommandSetTableNameArchive* msg) {
  return *msg->_impl_.old_shape_style_;
}
const ::TSP::Reference&
CommandSetTableNameArchive::_Internal::new_shape_style(const CommandSetTableNameArchive* msg) {
  return *msg->_impl_.new_shape_style_;
}
void CommandSetTableNameArchive::clear_newstyle() {
  if (_impl_.newstyle_ != nullptr) _impl_.newstyle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSetTableNameArchive::clear_oldstyle() {
  if (_impl_.oldstyle_ != nullptr) _impl_.oldstyle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandSetTableNameArchive::clear_old_shape_style() {
  if (_impl_.old_shape_style_ != nullptr) _impl_.old_shape_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CommandSetTableNameArchive::clear_new_shape_style() {
  if (_impl_.new_shape_style_ != nullptr) _impl_.new_shape_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
CommandSetTableNameArchive::CommandSetTableNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTableNameArchive)
}
CommandSetTableNameArchive::CommandSetTableNameArchive(const CommandSetTableNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetTableNameArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newtablename_){}
    , decltype(_impl_.oldtablename_){}
    , decltype(_impl_.newstyle_){nullptr}
    , decltype(_impl_.oldstyle_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_shape_style_){nullptr}
    , decltype(_impl_.new_shape_style_){nullptr}
    , decltype(_impl_.old_table_name_border_enabled_){}
    , decltype(_impl_.new_table_name_border_enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.newtablename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newtablename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_newtablename()) {
    _this->_impl_.newtablename_.Set(from._internal_newtablename(), 
      _this->GetArenaForAllocation());
  }
  _impl_.oldtablename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldtablename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_oldtablename()) {
    _this->_impl_.oldtablename_.Set(from._internal_oldtablename(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_newstyle()) {
    _this->_impl_.newstyle_ = new ::TSP::Reference(*from._impl_.newstyle_);
  }
  if (from._internal_has_oldstyle()) {
    _this->_impl_.oldstyle_ = new ::TSP::Reference(*from._impl_.oldstyle_);
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_shape_style()) {
    _this->_impl_.old_shape_style_ = new ::TSP::Reference(*from._impl_.old_shape_style_);
  }
  if (from._internal_has_new_shape_style()) {
    _this->_impl_.new_shape_style_ = new ::TSP::Reference(*from._impl_.new_shape_style_);
  }
  ::memcpy(&_impl_.old_table_name_border_enabled_, &from._impl_.old_table_name_border_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_table_name_border_enabled_) -
    reinterpret_cast<char*>(&_impl_.old_table_name_border_enabled_)) + sizeof(_impl_.new_table_name_border_enabled_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTableNameArchive)
}

inline void CommandSetTableNameArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.newtablename_){}
    , decltype(_impl_.oldtablename_){}
    , decltype(_impl_.newstyle_){nullptr}
    , decltype(_impl_.oldstyle_){nullptr}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_shape_style_){nullptr}
    , decltype(_impl_.new_shape_style_){nullptr}
    , decltype(_impl_.old_table_name_border_enabled_){false}
    , decltype(_impl_.new_table_name_border_enabled_){false}
  };
  _impl_.newtablename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.newtablename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oldtablename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.oldtablename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSetTableNameArchive::~CommandSetTableNameArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTableNameArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetTableNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.newtablename_.Destroy();
  _impl_.oldtablename_.Destroy();
  if (this != internal_default_instance()) delete _impl_.newstyle_;
  if (this != internal_default_instance()) delete _impl_.oldstyle_;
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_shape_style_;
  if (this != internal_default_instance()) delete _impl_.new_shape_style_;
}

void CommandSetTableNameArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetTableNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTableNameArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.newtablename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.oldtablename_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.newstyle_ != nullptr);
      _impl_.newstyle_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.oldstyle_ != nullptr);
      _impl_.oldstyle_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.old_shape_style_ != nullptr);
      _impl_.old_shape_style_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.new_shape_style_ != nullptr);
      _impl_.new_shape_style_->Clear();
    }
  }
  _impl_.old_table_name_border_enabled_ = false;
  _impl_.new_table_name_border_enabled_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTableNameArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string newtablename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_newtablename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CommandSetTableNameArchive.newtablename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string oldtablename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_oldtablename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CommandSetTableNameArchive.oldtablename");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference newstyle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_newstyle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference oldstyle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oldstyle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableCommandArchive super = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_shape_style = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_shape_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_shape_style = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_shape_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool old_table_name_border_enabled = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_old_table_name_border_enabled(&has_bits);
          _impl_.old_table_name_border_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool new_table_name_border_enabled = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_new_table_name_border_enabled(&has_bits);
          _impl_.new_table_name_border_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetTableNameArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTableNameArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required string newtablename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_newtablename().data(), static_cast<int>(this->_internal_newtablename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetTableNameArchive.newtablename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_newtablename(), target);
  }

  // optional string oldtablename = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_oldtablename().data(), static_cast<int>(this->_internal_oldtablename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetTableNameArchive.oldtablename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_oldtablename(), target);
  }

  // optional .TSP.Reference newstyle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::newstyle(this),
        _Internal::newstyle(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference oldstyle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::oldstyle(this),
        _Internal::oldstyle(this).GetCachedSize(), target, stream);
  }

  // required .TST.TableCommandArchive super = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_shape_style = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::old_shape_style(this),
        _Internal::old_shape_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference new_shape_style = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::new_shape_style(this),
        _Internal::new_shape_style(this).GetCachedSize(), target, stream);
  }

  // optional bool old_table_name_border_enabled = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_old_table_name_border_enabled(), target);
  }

  // optional bool new_table_name_border_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_new_table_name_border_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTableNameArchive)
  return target;
}

size_t CommandSetTableNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTableNameArchive)
  size_t total_size = 0;

  if (_internal_has_newtablename()) {
    // required string newtablename = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newtablename());
  }

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t CommandSetTableNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTableNameArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required string newtablename = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_newtablename());

    // required .TST.TableCommandArchive super = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string oldtablename = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oldtablename());
    }

    // optional .TSP.Reference newstyle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.newstyle_);
    }

    // optional .TSP.Reference oldstyle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oldstyle_);
    }

  }
  if (cached_has_bits & 0x000000e0u) {
    // optional .TSP.Reference old_shape_style = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_shape_style_);
    }

    // optional .TSP.Reference new_shape_style = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_shape_style_);
    }

    // optional bool old_table_name_border_enabled = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional bool new_table_name_border_enabled = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTableNameArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetTableNameArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTableNameArchive::GetClassData() const { return &_class_data_; }


void CommandSetTableNameArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetTableNameArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetTableNameArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTableNameArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_newtablename(from._internal_newtablename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_oldtablename(from._internal_oldtablename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_newstyle()->::TSP::Reference::MergeFrom(
          from._internal_newstyle());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_oldstyle()->::TSP::Reference::MergeFrom(
          from._internal_oldstyle());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_old_shape_style()->::TSP::Reference::MergeFrom(
          from._internal_old_shape_style());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_new_shape_style()->::TSP::Reference::MergeFrom(
          from._internal_new_shape_style());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.old_table_name_border_enabled_ = from._impl_.old_table_name_border_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_new_table_name_border_enabled(from._internal_new_table_name_border_enabled());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTableNameArchive::CopyFrom(const CommandSetTableNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTableNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_newstyle()) {
    if (!_impl_.newstyle_->IsInitialized()) return false;
  }
  if (_internal_has_oldstyle()) {
    if (!_impl_.oldstyle_->IsInitialized()) return false;
  }
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_shape_style()) {
    if (!_impl_.old_shape_style_->IsInitialized()) return false;
  }
  if (_internal_has_new_shape_style()) {
    if (!_impl_.new_shape_style_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableNameArchive::InternalSwap(CommandSetTableNameArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.newtablename_, lhs_arena,
      &other->_impl_.newtablename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.oldtablename_, lhs_arena,
      &other->_impl_.oldtablename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTableNameArchive, _impl_.new_table_name_border_enabled_)
      + sizeof(CommandSetTableNameArchive::_impl_.new_table_name_border_enabled_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTableNameArchive, _impl_.newstyle_)>(
          reinterpret_cast<char*>(&_impl_.newstyle_),
          reinterpret_cast<char*>(&other->_impl_.newstyle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTableNameArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[26]);
}

// ===================================================================

class CommandSetTableNameEnabledArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTableNameEnabledArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTableNameEnabledArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_table_name_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prev_table_name_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTableNameEnabledArchive::_Internal::super(const CommandSetTableNameEnabledArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetTableNameEnabledArchive::CommandSetTableNameEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTableNameEnabledArchive)
}
CommandSetTableNameEnabledArchive::CommandSetTableNameEnabledArchive(const CommandSetTableNameEnabledArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetTableNameEnabledArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_name_enabled_){}
    , decltype(_impl_.prev_table_name_enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.table_name_enabled_, &from._impl_.table_name_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prev_table_name_enabled_) -
    reinterpret_cast<char*>(&_impl_.table_name_enabled_)) + sizeof(_impl_.prev_table_name_enabled_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTableNameEnabledArchive)
}

inline void CommandSetTableNameEnabledArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_name_enabled_){false}
    , decltype(_impl_.prev_table_name_enabled_){false}
  };
}

CommandSetTableNameEnabledArchive::~CommandSetTableNameEnabledArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTableNameEnabledArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetTableNameEnabledArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetTableNameEnabledArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetTableNameEnabledArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTableNameEnabledArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  ::memset(&_impl_.table_name_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prev_table_name_enabled_) -
      reinterpret_cast<char*>(&_impl_.table_name_enabled_)) + sizeof(_impl_.prev_table_name_enabled_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTableNameEnabledArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool table_name_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_table_name_enabled(&has_bits);
          _impl_.table_name_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool prev_table_name_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_prev_table_name_enabled(&has_bits);
          _impl_.prev_table_name_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetTableNameEnabledArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTableNameEnabledArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool table_name_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_table_name_enabled(), target);
  }

  // optional bool prev_table_name_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_prev_table_name_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTableNameEnabledArchive)
  return target;
}

size_t CommandSetTableNameEnabledArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTableNameEnabledArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_table_name_enabled()) {
    // required bool table_name_enabled = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetTableNameEnabledArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTableNameEnabledArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool table_name_enabled = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool prev_table_name_enabled = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTableNameEnabledArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetTableNameEnabledArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTableNameEnabledArchive::GetClassData() const { return &_class_data_; }


void CommandSetTableNameEnabledArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetTableNameEnabledArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetTableNameEnabledArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTableNameEnabledArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.table_name_enabled_ = from._impl_.table_name_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.prev_table_name_enabled_ = from._impl_.prev_table_name_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTableNameEnabledArchive::CopyFrom(const CommandSetTableNameEnabledArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTableNameEnabledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableNameEnabledArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableNameEnabledArchive::InternalSwap(CommandSetTableNameEnabledArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTableNameEnabledArchive, _impl_.prev_table_name_enabled_)
      + sizeof(CommandSetTableNameEnabledArchive::_impl_.prev_table_name_enabled_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTableNameEnabledArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTableNameEnabledArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[27]);
}

// ===================================================================

class CommandSetTableFontSizeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTableFontSizeArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTableFontSizeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_increase(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_font_size_diff(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandSetTableFontSizeArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandSetTableFontSizeArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_styles_container_refresh_done(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000039) ^ 0x00000039) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTableFontSizeArchive::_Internal::super(const CommandSetTableFontSizeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSetTableFontSizeArchive::_Internal::cell_diff_map(const CommandSetTableFontSizeArchive* msg) {
  return *msg->_impl_.cell_diff_map_;
}
const ::TSP::Reference&
CommandSetTableFontSizeArchive::_Internal::inverse_cell_diff_map(const CommandSetTableFontSizeArchive* msg) {
  return *msg->_impl_.inverse_cell_diff_map_;
}
void CommandSetTableFontSizeArchive::clear_cell_diff_map() {
  if (_impl_.cell_diff_map_ != nullptr) _impl_.cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetTableFontSizeArchive::clear_inverse_cell_diff_map() {
  if (_impl_.inverse_cell_diff_map_ != nullptr) _impl_.inverse_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSetTableFontSizeArchive::CommandSetTableFontSizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTableFontSizeArchive)
}
CommandSetTableFontSizeArchive::CommandSetTableFontSizeArchive(const CommandSetTableFontSizeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetTableFontSizeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.font_size_list_){from._impl_.font_size_list_}
    , decltype(_impl_.inverse_font_size_list_){from._impl_.inverse_font_size_list_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
    , decltype(_impl_.font_size_diff_){}
    , decltype(_impl_.is_increase_){}
    , decltype(_impl_.styles_container_refresh_done_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_diff_map()) {
    _this->_impl_.cell_diff_map_ = new ::TSP::Reference(*from._impl_.cell_diff_map_);
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    _this->_impl_.inverse_cell_diff_map_ = new ::TSP::Reference(*from._impl_.inverse_cell_diff_map_);
  }
  ::memcpy(&_impl_.font_size_diff_, &from._impl_.font_size_diff_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.styles_container_refresh_done_) -
    reinterpret_cast<char*>(&_impl_.font_size_diff_)) + sizeof(_impl_.styles_container_refresh_done_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTableFontSizeArchive)
}

inline void CommandSetTableFontSizeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.font_size_list_){arena}
    , decltype(_impl_.inverse_font_size_list_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
    , decltype(_impl_.font_size_diff_){0}
    , decltype(_impl_.is_increase_){false}
    , decltype(_impl_.styles_container_refresh_done_){false}
  };
}

CommandSetTableFontSizeArchive::~CommandSetTableFontSizeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTableFontSizeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetTableFontSizeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.font_size_list_.~RepeatedField();
  _impl_.inverse_font_size_list_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.inverse_cell_diff_map_;
}

void CommandSetTableFontSizeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetTableFontSizeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTableFontSizeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.font_size_list_.Clear();
  _impl_.inverse_font_size_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_diff_map_ != nullptr);
      _impl_.cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.inverse_cell_diff_map_ != nullptr);
      _impl_.inverse_cell_diff_map_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.font_size_diff_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.styles_container_refresh_done_) -
        reinterpret_cast<char*>(&_impl_.font_size_diff_)) + sizeof(_impl_.styles_container_refresh_done_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTableFontSizeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_increase = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_increase(&has_bits);
          _impl_.is_increase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 font_size_diff = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_font_size_diff(&has_bits);
          _impl_.font_size_diff_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double font_size_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_font_size_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<33>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_font_size_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double inverse_font_size_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_inverse_font_size_list(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<41>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_inverse_font_size_list(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool styles_container_refresh_done = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_styles_container_refresh_done(&has_bits);
          _impl_.styles_container_refresh_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetTableFontSizeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTableFontSizeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool is_increase = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_increase(), target);
  }

  // required int32 font_size_diff = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_font_size_diff(), target);
  }

  // repeated double font_size_list = 4;
  for (int i = 0, n = this->_internal_font_size_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_font_size_list(i), target);
  }

  // repeated double inverse_font_size_list = 5;
  for (int i = 0, n = this->_internal_inverse_font_size_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_inverse_font_size_list(i), target);
  }

  // optional .TSP.Reference cell_diff_map = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cell_diff_map(this),
        _Internal::cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::inverse_cell_diff_map(this),
        _Internal::inverse_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // required bool styles_container_refresh_done = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_styles_container_refresh_done(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTableFontSizeArchive)
  return target;
}

size_t CommandSetTableFontSizeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTableFontSizeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_font_size_diff()) {
    // required int32 font_size_diff = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_font_size_diff());
  }

  if (_internal_has_is_increase()) {
    // required bool is_increase = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_styles_container_refresh_done()) {
    // required bool styles_container_refresh_done = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetTableFontSizeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTableFontSizeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000039) ^ 0x00000039) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required int32 font_size_diff = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_font_size_diff());

    // required bool is_increase = 2;
    total_size += 1 + 1;

    // required bool styles_container_refresh_done = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double font_size_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_font_size_list_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_font_size_list_size());
    total_size += data_size;
  }

  // repeated double inverse_font_size_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_inverse_font_size_list_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_inverse_font_size_list_size());
    total_size += data_size;
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference cell_diff_map = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_diff_map_);
    }

    // optional .TSP.Reference inverse_cell_diff_map = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inverse_cell_diff_map_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTableFontSizeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetTableFontSizeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTableFontSizeArchive::GetClassData() const { return &_class_data_; }


void CommandSetTableFontSizeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetTableFontSizeArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetTableFontSizeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTableFontSizeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.font_size_list_.MergeFrom(from._impl_.font_size_list_);
  _this->_impl_.inverse_font_size_list_.MergeFrom(from._impl_.inverse_font_size_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_inverse_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.font_size_diff_ = from._impl_.font_size_diff_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_increase_ = from._impl_.is_increase_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.styles_container_refresh_done_ = from._impl_.styles_container_refresh_done_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTableFontSizeArchive::CopyFrom(const CommandSetTableFontSizeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTableFontSizeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableFontSizeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!_impl_.cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!_impl_.inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableFontSizeArchive::InternalSwap(CommandSetTableFontSizeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.font_size_list_.InternalSwap(&other->_impl_.font_size_list_);
  _impl_.inverse_font_size_list_.InternalSwap(&other->_impl_.inverse_font_size_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTableFontSizeArchive, _impl_.styles_container_refresh_done_)
      + sizeof(CommandSetTableFontSizeArchive::_impl_.styles_container_refresh_done_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTableFontSizeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTableFontSizeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[28]);
}

// ===================================================================

class CommandSetTableFontNameArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTableFontNameArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTableFontNameArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preserve_face(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_previous_font_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& previous_table_style(const CommandSetTableFontNameArchive* msg);
  static void set_has_previous_table_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandSetTableFontNameArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandSetTableFontNameArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000055) ^ 0x00000055) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTableFontNameArchive::_Internal::super(const CommandSetTableFontNameArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSetTableFontNameArchive::_Internal::previous_table_style(const CommandSetTableFontNameArchive* msg) {
  return *msg->_impl_.previous_table_style_;
}
const ::TSP::Reference&
CommandSetTableFontNameArchive::_Internal::cell_diff_map(const CommandSetTableFontNameArchive* msg) {
  return *msg->_impl_.cell_diff_map_;
}
const ::TSP::Reference&
CommandSetTableFontNameArchive::_Internal::inverse_cell_diff_map(const CommandSetTableFontNameArchive* msg) {
  return *msg->_impl_.inverse_cell_diff_map_;
}
void CommandSetTableFontNameArchive::clear_previous_table_style() {
  if (_impl_.previous_table_style_ != nullptr) _impl_.previous_table_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandSetTableFontNameArchive::clear_previous_text_styles() {
  _impl_.previous_text_styles_.Clear();
}
void CommandSetTableFontNameArchive::clear_cell_diff_map() {
  if (_impl_.cell_diff_map_ != nullptr) _impl_.cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandSetTableFontNameArchive::clear_inverse_cell_diff_map() {
  if (_impl_.inverse_cell_diff_map_ != nullptr) _impl_.inverse_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CommandSetTableFontNameArchive::CommandSetTableFontNameArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTableFontNameArchive)
}
CommandSetTableFontNameArchive::CommandSetTableFontNameArchive(const CommandSetTableFontNameArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetTableFontNameArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.previous_text_styles_){from._impl_.previous_text_styles_}
    , decltype(_impl_.font_name_){}
    , decltype(_impl_.previous_font_name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.previous_table_style_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
    , decltype(_impl_.preserve_face_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_font_name()) {
    _this->_impl_.font_name_.Set(from._internal_font_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.previous_font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_previous_font_name()) {
    _this->_impl_.previous_font_name_.Set(from._internal_previous_font_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_previous_table_style()) {
    _this->_impl_.previous_table_style_ = new ::TSP::Reference(*from._impl_.previous_table_style_);
  }
  if (from._internal_has_cell_diff_map()) {
    _this->_impl_.cell_diff_map_ = new ::TSP::Reference(*from._impl_.cell_diff_map_);
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    _this->_impl_.inverse_cell_diff_map_ = new ::TSP::Reference(*from._impl_.inverse_cell_diff_map_);
  }
  _this->_impl_.preserve_face_ = from._impl_.preserve_face_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTableFontNameArchive)
}

inline void CommandSetTableFontNameArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.previous_text_styles_){arena}
    , decltype(_impl_.font_name_){}
    , decltype(_impl_.previous_font_name_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.previous_table_style_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
    , decltype(_impl_.preserve_face_){false}
  };
  _impl_.font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.previous_font_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.previous_font_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSetTableFontNameArchive::~CommandSetTableFontNameArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTableFontNameArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetTableFontNameArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.previous_text_styles_.~RepeatedPtrField();
  _impl_.font_name_.Destroy();
  _impl_.previous_font_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.previous_table_style_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.inverse_cell_diff_map_;
}

void CommandSetTableFontNameArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetTableFontNameArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTableFontNameArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.previous_text_styles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.font_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.previous_font_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.previous_table_style_ != nullptr);
      _impl_.previous_table_style_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.cell_diff_map_ != nullptr);
      _impl_.cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.inverse_cell_diff_map_ != nullptr);
      _impl_.inverse_cell_diff_map_->Clear();
    }
  }
  _impl_.preserve_face_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTableFontNameArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string font_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_font_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CommandSetTableFontNameArchive.font_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required bool preserve_face = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_preserve_face(&has_bits);
          _impl_.preserve_face_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string previous_font_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_previous_font_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CommandSetTableFontNameArchive.previous_font_name");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference previous_table_style = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_previous_table_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.Reference previous_text_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_previous_text_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetTableFontNameArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTableFontNameArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required string font_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_font_name().data(), static_cast<int>(this->_internal_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetTableFontNameArchive.font_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_font_name(), target);
  }

  // required bool preserve_face = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_preserve_face(), target);
  }

  // optional string previous_font_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_previous_font_name().data(), static_cast<int>(this->_internal_previous_font_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetTableFontNameArchive.previous_font_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_previous_font_name(), target);
  }

  // optional .TSP.Reference previous_table_style = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::previous_table_style(this),
        _Internal::previous_table_style(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.Reference previous_text_styles = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_previous_text_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_previous_text_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::cell_diff_map(this),
        _Internal::cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::inverse_cell_diff_map(this),
        _Internal::inverse_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTableFontNameArchive)
  return target;
}

size_t CommandSetTableFontNameArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTableFontNameArchive)
  size_t total_size = 0;

  if (_internal_has_font_name()) {
    // required string font_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_name());
  }

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);
  }

  if (_internal_has_preserve_face()) {
    // required bool preserve_face = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetTableFontNameArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTableFontNameArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000055) ^ 0x00000055) == 0) {  // All required fields are present.
    // required string font_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_font_name());

    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference cell_diff_map = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);

    // required bool preserve_face = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.Reference previous_text_styles = 6;
  total_size += 1UL * this->_internal_previous_text_styles_size();
  for (const auto& msg : this->_impl_.previous_text_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string previous_font_name = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_previous_font_name());
  }

  // optional .TSP.Reference previous_table_style = 5;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.previous_table_style_);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 8;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inverse_cell_diff_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTableFontNameArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetTableFontNameArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTableFontNameArchive::GetClassData() const { return &_class_data_; }


void CommandSetTableFontNameArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetTableFontNameArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetTableFontNameArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTableFontNameArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.previous_text_styles_.MergeFrom(from._impl_.previous_text_styles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_font_name(from._internal_font_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_previous_font_name(from._internal_previous_font_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_previous_table_style()->::TSP::Reference::MergeFrom(
          from._internal_previous_table_style());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_inverse_cell_diff_map());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.preserve_face_ = from._impl_.preserve_face_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTableFontNameArchive::CopyFrom(const CommandSetTableFontNameArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTableFontNameArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableFontNameArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.previous_text_styles_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_previous_table_style()) {
    if (!_impl_.previous_table_style_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!_impl_.cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!_impl_.inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableFontNameArchive::InternalSwap(CommandSetTableFontNameArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.previous_text_styles_.InternalSwap(&other->_impl_.previous_text_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.font_name_, lhs_arena,
      &other->_impl_.font_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.previous_font_name_, lhs_arena,
      &other->_impl_.previous_font_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTableFontNameArchive, _impl_.preserve_face_)
      + sizeof(CommandSetTableFontNameArchive::_impl_.preserve_face_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTableFontNameArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTableFontNameArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[29]);
}

// ===================================================================

class CommandSetTableNameHeightArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTableNameHeightArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTableNameHeightArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_table_name_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_table_name_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTableNameHeightArchive::_Internal::super(const CommandSetTableNameHeightArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetTableNameHeightArchive::CommandSetTableNameHeightArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTableNameHeightArchive)
}
CommandSetTableNameHeightArchive::CommandSetTableNameHeightArchive(const CommandSetTableNameHeightArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetTableNameHeightArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_table_name_height_){}
    , decltype(_impl_.new_table_name_height_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.old_table_name_height_, &from._impl_.old_table_name_height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_table_name_height_) -
    reinterpret_cast<char*>(&_impl_.old_table_name_height_)) + sizeof(_impl_.new_table_name_height_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTableNameHeightArchive)
}

inline void CommandSetTableNameHeightArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_table_name_height_){0}
    , decltype(_impl_.new_table_name_height_){0}
  };
}

CommandSetTableNameHeightArchive::~CommandSetTableNameHeightArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTableNameHeightArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetTableNameHeightArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetTableNameHeightArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetTableNameHeightArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTableNameHeightArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.old_table_name_height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_table_name_height_) -
        reinterpret_cast<char*>(&_impl_.old_table_name_height_)) + sizeof(_impl_.new_table_name_height_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTableNameHeightArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required double old_table_name_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_old_table_name_height(&has_bits);
          _impl_.old_table_name_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double new_table_name_height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_new_table_name_height(&has_bits);
          _impl_.new_table_name_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetTableNameHeightArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTableNameHeightArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required double old_table_name_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_old_table_name_height(), target);
  }

  // required double new_table_name_height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_new_table_name_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTableNameHeightArchive)
  return target;
}

size_t CommandSetTableNameHeightArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTableNameHeightArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_old_table_name_height()) {
    // required double old_table_name_height = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_new_table_name_height()) {
    // required double new_table_name_height = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t CommandSetTableNameHeightArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTableNameHeightArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required double old_table_name_height = 2;
    total_size += 1 + 8;

    // required double new_table_name_height = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTableNameHeightArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetTableNameHeightArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTableNameHeightArchive::GetClassData() const { return &_class_data_; }


void CommandSetTableNameHeightArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetTableNameHeightArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetTableNameHeightArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTableNameHeightArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.old_table_name_height_ = from._impl_.old_table_name_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.new_table_name_height_ = from._impl_.new_table_name_height_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTableNameHeightArchive::CopyFrom(const CommandSetTableNameHeightArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTableNameHeightArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTableNameHeightArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTableNameHeightArchive::InternalSwap(CommandSetTableNameHeightArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTableNameHeightArchive, _impl_.new_table_name_height_)
      + sizeof(CommandSetTableNameHeightArchive::_impl_.new_table_name_height_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTableNameHeightArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTableNameHeightArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[30]);
}

// ===================================================================

class CommandSetNowArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetNowArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetNowArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetNowArchive::_Internal::super(const CommandSetNowArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetNowArchive::CommandSetNowArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetNowArchive)
}
CommandSetNowArchive::CommandSetNowArchive(const CommandSetNowArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetNowArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetNowArchive)
}

inline void CommandSetNowArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandSetNowArchive::~CommandSetNowArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetNowArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetNowArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetNowArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetNowArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetNowArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetNowArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetNowArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetNowArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetNowArchive)
  return target;
}

size_t CommandSetNowArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetNowArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetNowArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetNowArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetNowArchive::GetClassData() const { return &_class_data_; }


void CommandSetNowArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetNowArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetNowArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetNowArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetNowArchive::CopyFrom(const CommandSetNowArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetNowArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetNowArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetNowArchive::InternalSwap(CommandSetNowArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetNowArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[31]);
}

// ===================================================================

class CommandSetWasCutArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetWasCutArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetWasCutArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& from_table_uid(const CommandSetWasCutArchive* msg);
  static void set_has_from_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& prev_from_table_uid(const CommandSetWasCutArchive* msg);
  static void set_has_prev_from_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_was_cut(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_prev_was_cut(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::UUID& from_group_by_uid(const CommandSetWasCutArchive* msg);
  static void set_has_from_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& prev_from_group_by_uid(const CommandSetWasCutArchive* msg);
  static void set_has_prev_from_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetWasCutArchive::_Internal::super(const CommandSetWasCutArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandSetWasCutArchive::_Internal::from_table_uid(const CommandSetWasCutArchive* msg) {
  return *msg->_impl_.from_table_uid_;
}
const ::TSP::UUID&
CommandSetWasCutArchive::_Internal::prev_from_table_uid(const CommandSetWasCutArchive* msg) {
  return *msg->_impl_.prev_from_table_uid_;
}
const ::TSP::UUID&
CommandSetWasCutArchive::_Internal::from_group_by_uid(const CommandSetWasCutArchive* msg) {
  return *msg->_impl_.from_group_by_uid_;
}
const ::TSP::UUID&
CommandSetWasCutArchive::_Internal::prev_from_group_by_uid(const CommandSetWasCutArchive* msg) {
  return *msg->_impl_.prev_from_group_by_uid_;
}
void CommandSetWasCutArchive::clear_from_table_uid() {
  if (_impl_.from_table_uid_ != nullptr) _impl_.from_table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetWasCutArchive::clear_prev_from_table_uid() {
  if (_impl_.prev_from_table_uid_ != nullptr) _impl_.prev_from_table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSetWasCutArchive::clear_from_group_by_uid() {
  if (_impl_.from_group_by_uid_ != nullptr) _impl_.from_group_by_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandSetWasCutArchive::clear_prev_from_group_by_uid() {
  if (_impl_.prev_from_group_by_uid_ != nullptr) _impl_.prev_from_group_by_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CommandSetWasCutArchive::CommandSetWasCutArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetWasCutArchive)
}
CommandSetWasCutArchive::CommandSetWasCutArchive(const CommandSetWasCutArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetWasCutArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.from_table_uid_){nullptr}
    , decltype(_impl_.prev_from_table_uid_){nullptr}
    , decltype(_impl_.from_group_by_uid_){nullptr}
    , decltype(_impl_.prev_from_group_by_uid_){nullptr}
    , decltype(_impl_.was_cut_){}
    , decltype(_impl_.prev_was_cut_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_from_table_uid()) {
    _this->_impl_.from_table_uid_ = new ::TSP::UUID(*from._impl_.from_table_uid_);
  }
  if (from._internal_has_prev_from_table_uid()) {
    _this->_impl_.prev_from_table_uid_ = new ::TSP::UUID(*from._impl_.prev_from_table_uid_);
  }
  if (from._internal_has_from_group_by_uid()) {
    _this->_impl_.from_group_by_uid_ = new ::TSP::UUID(*from._impl_.from_group_by_uid_);
  }
  if (from._internal_has_prev_from_group_by_uid()) {
    _this->_impl_.prev_from_group_by_uid_ = new ::TSP::UUID(*from._impl_.prev_from_group_by_uid_);
  }
  ::memcpy(&_impl_.was_cut_, &from._impl_.was_cut_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prev_was_cut_) -
    reinterpret_cast<char*>(&_impl_.was_cut_)) + sizeof(_impl_.prev_was_cut_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetWasCutArchive)
}

inline void CommandSetWasCutArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.from_table_uid_){nullptr}
    , decltype(_impl_.prev_from_table_uid_){nullptr}
    , decltype(_impl_.from_group_by_uid_){nullptr}
    , decltype(_impl_.prev_from_group_by_uid_){nullptr}
    , decltype(_impl_.was_cut_){false}
    , decltype(_impl_.prev_was_cut_){false}
  };
}

CommandSetWasCutArchive::~CommandSetWasCutArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetWasCutArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetWasCutArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.from_table_uid_;
  if (this != internal_default_instance()) delete _impl_.prev_from_table_uid_;
  if (this != internal_default_instance()) delete _impl_.from_group_by_uid_;
  if (this != internal_default_instance()) delete _impl_.prev_from_group_by_uid_;
}

void CommandSetWasCutArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetWasCutArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetWasCutArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.from_table_uid_ != nullptr);
      _impl_.from_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.prev_from_table_uid_ != nullptr);
      _impl_.prev_from_table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.from_group_by_uid_ != nullptr);
      _impl_.from_group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.prev_from_group_by_uid_ != nullptr);
      _impl_.prev_from_group_by_uid_->Clear();
    }
  }
  ::memset(&_impl_.was_cut_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prev_was_cut_) -
      reinterpret_cast<char*>(&_impl_.was_cut_)) + sizeof(_impl_.prev_was_cut_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetWasCutArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID from_table_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID prev_from_table_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_from_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool was_cut = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_was_cut(&has_bits);
          _impl_.was_cut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool prev_was_cut = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_prev_was_cut(&has_bits);
          _impl_.prev_was_cut_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID from_group_by_uid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_from_group_by_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID prev_from_group_by_uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_prev_from_group_by_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetWasCutArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetWasCutArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID from_table_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from_table_uid(this),
        _Internal::from_table_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID prev_from_table_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::prev_from_table_uid(this),
        _Internal::prev_from_table_uid(this).GetCachedSize(), target, stream);
  }

  // required bool was_cut = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_was_cut(), target);
  }

  // required bool prev_was_cut = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_prev_was_cut(), target);
  }

  // required .TSP.UUID from_group_by_uid = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::from_group_by_uid(this),
        _Internal::from_group_by_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID prev_from_group_by_uid = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::prev_from_group_by_uid(this),
        _Internal::prev_from_group_by_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetWasCutArchive)
  return target;
}

size_t CommandSetWasCutArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetWasCutArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_from_table_uid()) {
    // required .TSP.UUID from_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_table_uid_);
  }

  if (_internal_has_prev_from_table_uid()) {
    // required .TSP.UUID prev_from_table_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prev_from_table_uid_);
  }

  if (_internal_has_from_group_by_uid()) {
    // required .TSP.UUID from_group_by_uid = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_group_by_uid_);
  }

  if (_internal_has_prev_from_group_by_uid()) {
    // required .TSP.UUID prev_from_group_by_uid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prev_from_group_by_uid_);
  }

  if (_internal_has_was_cut()) {
    // required bool was_cut = 4;
    total_size += 1 + 1;
  }

  if (_internal_has_prev_was_cut()) {
    // required bool prev_was_cut = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetWasCutArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetWasCutArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID from_table_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_table_uid_);

    // required .TSP.UUID prev_from_table_uid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prev_from_table_uid_);

    // required .TSP.UUID from_group_by_uid = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.from_group_by_uid_);

    // required .TSP.UUID prev_from_group_by_uid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.prev_from_group_by_uid_);

    // required bool was_cut = 4;
    total_size += 1 + 1;

    // required bool prev_was_cut = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetWasCutArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetWasCutArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetWasCutArchive::GetClassData() const { return &_class_data_; }


void CommandSetWasCutArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetWasCutArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetWasCutArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetWasCutArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_from_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_from_table_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_prev_from_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_prev_from_table_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_from_group_by_uid()->::TSP::UUID::MergeFrom(
          from._internal_from_group_by_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_prev_from_group_by_uid()->::TSP::UUID::MergeFrom(
          from._internal_prev_from_group_by_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.was_cut_ = from._impl_.was_cut_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.prev_was_cut_ = from._impl_.prev_was_cut_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetWasCutArchive::CopyFrom(const CommandSetWasCutArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetWasCutArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetWasCutArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_from_table_uid()) {
    if (!_impl_.from_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_prev_from_table_uid()) {
    if (!_impl_.prev_from_table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_from_group_by_uid()) {
    if (!_impl_.from_group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_prev_from_group_by_uid()) {
    if (!_impl_.prev_from_group_by_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetWasCutArchive::InternalSwap(CommandSetWasCutArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetWasCutArchive, _impl_.prev_was_cut_)
      + sizeof(CommandSetWasCutArchive::_impl_.prev_was_cut_)
      - PROTOBUF_FIELD_OFFSET(CommandSetWasCutArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetWasCutArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[32]);
}

// ===================================================================

class CommandStyleCellsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStyleCellsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandStyleCellsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::ReferenceDictionary& format_properties(const CommandStyleCellsArchive* msg);
  static void set_has_format_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::SelectionArchive& selection(const CommandStyleCellsArchive* msg);
  static void set_has_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_cell_map(const CommandStyleCellsArchive* msg);
  static void set_has_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& redo_cell_map(const CommandStyleCellsArchive* msg);
  static void set_has_redo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& text_undo(const CommandStyleCellsArchive* msg);
  static void set_has_text_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001d) ^ 0x0000001d) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandStyleCellsArchive::_Internal::super(const CommandStyleCellsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::ReferenceDictionary&
CommandStyleCellsArchive::_Internal::format_properties(const CommandStyleCellsArchive* msg) {
  return *msg->_impl_.format_properties_;
}
const ::TST::SelectionArchive&
CommandStyleCellsArchive::_Internal::selection(const CommandStyleCellsArchive* msg) {
  return *msg->_impl_.selection_;
}
const ::TSP::Reference&
CommandStyleCellsArchive::_Internal::undo_cell_map(const CommandStyleCellsArchive* msg) {
  return *msg->_impl_.undo_cell_map_;
}
const ::TSP::Reference&
CommandStyleCellsArchive::_Internal::redo_cell_map(const CommandStyleCellsArchive* msg) {
  return *msg->_impl_.redo_cell_map_;
}
const ::TSP::Reference&
CommandStyleCellsArchive::_Internal::text_undo(const CommandStyleCellsArchive* msg) {
  return *msg->_impl_.text_undo_;
}
void CommandStyleCellsArchive::clear_format_properties() {
  if (_impl_.format_properties_ != nullptr) _impl_.format_properties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandStyleCellsArchive::clear_selection() {
  if (_impl_.selection_ != nullptr) _impl_.selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandStyleCellsArchive::clear_undo_cell_map() {
  if (_impl_.undo_cell_map_ != nullptr) _impl_.undo_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandStyleCellsArchive::clear_redo_cell_map() {
  if (_impl_.redo_cell_map_ != nullptr) _impl_.redo_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandStyleCellsArchive::clear_text_undo() {
  if (_impl_.text_undo_ != nullptr) _impl_.text_undo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CommandStyleCellsArchive::CommandStyleCellsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandStyleCellsArchive)
}
CommandStyleCellsArchive::CommandStyleCellsArchive(const CommandStyleCellsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandStyleCellsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.format_properties_){nullptr}
    , decltype(_impl_.selection_){nullptr}
    , decltype(_impl_.undo_cell_map_){nullptr}
    , decltype(_impl_.redo_cell_map_){nullptr}
    , decltype(_impl_.text_undo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_format_properties()) {
    _this->_impl_.format_properties_ = new ::TSP::ReferenceDictionary(*from._impl_.format_properties_);
  }
  if (from._internal_has_selection()) {
    _this->_impl_.selection_ = new ::TST::SelectionArchive(*from._impl_.selection_);
  }
  if (from._internal_has_undo_cell_map()) {
    _this->_impl_.undo_cell_map_ = new ::TSP::Reference(*from._impl_.undo_cell_map_);
  }
  if (from._internal_has_redo_cell_map()) {
    _this->_impl_.redo_cell_map_ = new ::TSP::Reference(*from._impl_.redo_cell_map_);
  }
  if (from._internal_has_text_undo()) {
    _this->_impl_.text_undo_ = new ::TSP::Reference(*from._impl_.text_undo_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandStyleCellsArchive)
}

inline void CommandStyleCellsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.format_properties_){nullptr}
    , decltype(_impl_.selection_){nullptr}
    , decltype(_impl_.undo_cell_map_){nullptr}
    , decltype(_impl_.redo_cell_map_){nullptr}
    , decltype(_impl_.text_undo_){nullptr}
  };
}

CommandStyleCellsArchive::~CommandStyleCellsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandStyleCellsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandStyleCellsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.format_properties_;
  if (this != internal_default_instance()) delete _impl_.selection_;
  if (this != internal_default_instance()) delete _impl_.undo_cell_map_;
  if (this != internal_default_instance()) delete _impl_.redo_cell_map_;
  if (this != internal_default_instance()) delete _impl_.text_undo_;
}

void CommandStyleCellsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandStyleCellsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandStyleCellsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.format_properties_ != nullptr);
      _impl_.format_properties_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.selection_ != nullptr);
      _impl_.selection_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.undo_cell_map_ != nullptr);
      _impl_.undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.redo_cell_map_ != nullptr);
      _impl_.redo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.text_undo_ != nullptr);
      _impl_.text_undo_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStyleCellsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.ReferenceDictionary format_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.SelectionArchive selection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference undo_cell_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference redo_cell_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_redo_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference text_undo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_text_undo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandStyleCellsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandStyleCellsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.ReferenceDictionary format_properties = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::format_properties(this),
        _Internal::format_properties(this).GetCachedSize(), target, stream);
  }

  // required .TST.SelectionArchive selection = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::selection(this),
        _Internal::selection(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference undo_cell_map = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::undo_cell_map(this),
        _Internal::undo_cell_map(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference redo_cell_map = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::redo_cell_map(this),
        _Internal::redo_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference text_undo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::text_undo(this),
        _Internal::text_undo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandStyleCellsArchive)
  return target;
}

size_t CommandStyleCellsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandStyleCellsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_selection()) {
    // required .TST.SelectionArchive selection = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selection_);
  }

  if (_internal_has_undo_cell_map()) {
    // required .TSP.Reference undo_cell_map = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.undo_cell_map_);
  }

  if (_internal_has_redo_cell_map()) {
    // required .TSP.Reference redo_cell_map = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redo_cell_map_);
  }

  return total_size;
}
size_t CommandStyleCellsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandStyleCellsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001d) ^ 0x0000001d) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.SelectionArchive selection = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.selection_);

    // required .TSP.Reference undo_cell_map = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.undo_cell_map_);

    // required .TSP.Reference redo_cell_map = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.redo_cell_map_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.ReferenceDictionary format_properties = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.format_properties_);
  }

  // optional .TSP.Reference text_undo = 6;
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.text_undo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandStyleCellsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandStyleCellsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandStyleCellsArchive::GetClassData() const { return &_class_data_; }


void CommandStyleCellsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandStyleCellsArchive*>(&to_msg);
  auto& from = static_cast<const CommandStyleCellsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandStyleCellsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_format_properties()->::TSP::ReferenceDictionary::MergeFrom(
          from._internal_format_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_selection()->::TST::SelectionArchive::MergeFrom(
          from._internal_selection());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_undo_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_cell_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_redo_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_redo_cell_map());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_text_undo()->::TSP::Reference::MergeFrom(
          from._internal_text_undo());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandStyleCellsArchive::CopyFrom(const CommandStyleCellsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandStyleCellsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStyleCellsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_format_properties()) {
    if (!_impl_.format_properties_->IsInitialized()) return false;
  }
  if (_internal_has_selection()) {
    if (!_impl_.selection_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_map()) {
    if (!_impl_.undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_redo_cell_map()) {
    if (!_impl_.redo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_text_undo()) {
    if (!_impl_.text_undo_->IsInitialized()) return false;
  }
  return true;
}

void CommandStyleCellsArchive::InternalSwap(CommandStyleCellsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandStyleCellsArchive, _impl_.text_undo_)
      + sizeof(CommandStyleCellsArchive::_impl_.text_undo_)
      - PROTOBUF_FIELD_OFFSET(CommandStyleCellsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStyleCellsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[33]);
}

// ===================================================================

class CommandStyleTableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandStyleTableArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandStyleTableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::ReferenceDictionary& format_properties(const CommandStyleTableArchive* msg);
  static void set_has_format_properties(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSTSOS::TableStylePropertyChangeSetArchive& old_style(const CommandStyleTableArchive* msg);
  static void set_has_old_style(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSTSOS::TableStylePropertyChangeSetArchive& new_style(const CommandStyleTableArchive* msg);
  static void set_has_new_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandStyleTableArchive::_Internal::super(const CommandStyleTableArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::ReferenceDictionary&
CommandStyleTableArchive::_Internal::format_properties(const CommandStyleTableArchive* msg) {
  return *msg->_impl_.format_properties_;
}
const ::TSTSOS::TableStylePropertyChangeSetArchive&
CommandStyleTableArchive::_Internal::old_style(const CommandStyleTableArchive* msg) {
  return *msg->_impl_.old_style_;
}
const ::TSTSOS::TableStylePropertyChangeSetArchive&
CommandStyleTableArchive::_Internal::new_style(const CommandStyleTableArchive* msg) {
  return *msg->_impl_.new_style_;
}
void CommandStyleTableArchive::clear_format_properties() {
  if (_impl_.format_properties_ != nullptr) _impl_.format_properties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandStyleTableArchive::clear_old_style() {
  if (_impl_.old_style_ != nullptr) _impl_.old_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandStyleTableArchive::clear_new_style() {
  if (_impl_.new_style_ != nullptr) _impl_.new_style_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandStyleTableArchive::CommandStyleTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandStyleTableArchive)
}
CommandStyleTableArchive::CommandStyleTableArchive(const CommandStyleTableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandStyleTableArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.format_properties_){nullptr}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.new_style_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_format_properties()) {
    _this->_impl_.format_properties_ = new ::TSP::ReferenceDictionary(*from._impl_.format_properties_);
  }
  if (from._internal_has_old_style()) {
    _this->_impl_.old_style_ = new ::TSTSOS::TableStylePropertyChangeSetArchive(*from._impl_.old_style_);
  }
  if (from._internal_has_new_style()) {
    _this->_impl_.new_style_ = new ::TSTSOS::TableStylePropertyChangeSetArchive(*from._impl_.new_style_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandStyleTableArchive)
}

inline void CommandStyleTableArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.format_properties_){nullptr}
    , decltype(_impl_.old_style_){nullptr}
    , decltype(_impl_.new_style_){nullptr}
  };
}

CommandStyleTableArchive::~CommandStyleTableArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandStyleTableArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandStyleTableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.format_properties_;
  if (this != internal_default_instance()) delete _impl_.old_style_;
  if (this != internal_default_instance()) delete _impl_.new_style_;
}

void CommandStyleTableArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandStyleTableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandStyleTableArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.format_properties_ != nullptr);
      _impl_.format_properties_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_style_ != nullptr);
      _impl_.old_style_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.new_style_ != nullptr);
      _impl_.new_style_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandStyleTableArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.ReferenceDictionary format_properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_format_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSTSOS.TableStylePropertyChangeSetArchive old_style = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSTSOS.TableStylePropertyChangeSetArchive new_style = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_style(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandStyleTableArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandStyleTableArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.ReferenceDictionary format_properties = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::format_properties(this),
        _Internal::format_properties(this).GetCachedSize(), target, stream);
  }

  // optional .TSTSOS.TableStylePropertyChangeSetArchive old_style = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_style(this),
        _Internal::old_style(this).GetCachedSize(), target, stream);
  }

  // optional .TSTSOS.TableStylePropertyChangeSetArchive new_style = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::new_style(this),
        _Internal::new_style(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandStyleTableArchive)
  return target;
}

size_t CommandStyleTableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandStyleTableArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.ReferenceDictionary format_properties = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.format_properties_);
    }

    // optional .TSTSOS.TableStylePropertyChangeSetArchive old_style = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_style_);
    }

    // optional .TSTSOS.TableStylePropertyChangeSetArchive new_style = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_style_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandStyleTableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandStyleTableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandStyleTableArchive::GetClassData() const { return &_class_data_; }


void CommandStyleTableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandStyleTableArchive*>(&to_msg);
  auto& from = static_cast<const CommandStyleTableArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandStyleTableArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_format_properties()->::TSP::ReferenceDictionary::MergeFrom(
          from._internal_format_properties());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_style()->::TSTSOS::TableStylePropertyChangeSetArchive::MergeFrom(
          from._internal_old_style());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_new_style()->::TSTSOS::TableStylePropertyChangeSetArchive::MergeFrom(
          from._internal_new_style());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandStyleTableArchive::CopyFrom(const CommandStyleTableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandStyleTableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandStyleTableArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_format_properties()) {
    if (!_impl_.format_properties_->IsInitialized()) return false;
  }
  if (_internal_has_old_style()) {
    if (!_impl_.old_style_->IsInitialized()) return false;
  }
  if (_internal_has_new_style()) {
    if (!_impl_.new_style_->IsInitialized()) return false;
  }
  return true;
}

void CommandStyleTableArchive::InternalSwap(CommandStyleTableArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandStyleTableArchive, _impl_.new_style_)
      + sizeof(CommandStyleTableArchive::_impl_.new_style_)
      - PROTOBUF_FIELD_OFFSET(CommandStyleTableArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandStyleTableArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[34]);
}

// ===================================================================

class CommandSetRepeatingHeaderEnabledArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetRepeatingHeaderEnabledArchive>()._impl_._has_bits_);
  static void set_has_repeating_header_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::TableCommandArchive& super(const CommandSetRepeatingHeaderEnabledArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_prev_repeating_header_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetRepeatingHeaderEnabledArchive::_Internal::super(const CommandSetRepeatingHeaderEnabledArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetRepeatingHeaderEnabledArchive::CommandSetRepeatingHeaderEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetRepeatingHeaderEnabledArchive)
}
CommandSetRepeatingHeaderEnabledArchive::CommandSetRepeatingHeaderEnabledArchive(const CommandSetRepeatingHeaderEnabledArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetRepeatingHeaderEnabledArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.repeating_header_enabled_){}
    , decltype(_impl_.prev_repeating_header_enabled_){}
    , decltype(_impl_.direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.repeating_header_enabled_, &from._impl_.repeating_header_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.repeating_header_enabled_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetRepeatingHeaderEnabledArchive)
}

inline void CommandSetRepeatingHeaderEnabledArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.repeating_header_enabled_){false}
    , decltype(_impl_.prev_repeating_header_enabled_){false}
    , decltype(_impl_.direction_){-1}
  };
}

CommandSetRepeatingHeaderEnabledArchive::~CommandSetRepeatingHeaderEnabledArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetRepeatingHeaderEnabledArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetRepeatingHeaderEnabledArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetRepeatingHeaderEnabledArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetRepeatingHeaderEnabledArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  ::memset(&_impl_.repeating_header_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prev_repeating_header_enabled_) -
      reinterpret_cast<char*>(&_impl_.repeating_header_enabled_)) + sizeof(_impl_.prev_repeating_header_enabled_));
  _impl_.direction_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetRepeatingHeaderEnabledArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool repeating_header_enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_repeating_header_enabled(&has_bits);
          _impl_.repeating_header_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableDimensionArchive direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_direction(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableCommandArchive super = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool prev_repeating_header_enabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_prev_repeating_header_enabled(&has_bits);
          _impl_.prev_repeating_header_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetRepeatingHeaderEnabledArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bool repeating_header_enabled = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_repeating_header_enabled(), target);
  }

  // required .TST.TableDimensionArchive direction = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // required .TST.TableCommandArchive super = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional bool prev_repeating_header_enabled = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_prev_repeating_header_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetRepeatingHeaderEnabledArchive)
  return target;
}

size_t CommandSetRepeatingHeaderEnabledArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_repeating_header_enabled()) {
    // required bool repeating_header_enabled = 1;
    total_size += 1 + 1;
  }

  if (_internal_has_direction()) {
    // required .TST.TableDimensionArchive direction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return total_size;
}
size_t CommandSetRepeatingHeaderEnabledArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool repeating_header_enabled = 1;
    total_size += 1 + 1;

    // required .TST.TableDimensionArchive direction = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool prev_repeating_header_enabled = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetRepeatingHeaderEnabledArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetRepeatingHeaderEnabledArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetRepeatingHeaderEnabledArchive::GetClassData() const { return &_class_data_; }


void CommandSetRepeatingHeaderEnabledArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetRepeatingHeaderEnabledArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetRepeatingHeaderEnabledArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.repeating_header_enabled_ = from._impl_.repeating_header_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.prev_repeating_header_enabled_ = from._impl_.prev_repeating_header_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetRepeatingHeaderEnabledArchive::CopyFrom(const CommandSetRepeatingHeaderEnabledArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetRepeatingHeaderEnabledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetRepeatingHeaderEnabledArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetRepeatingHeaderEnabledArchive::InternalSwap(CommandSetRepeatingHeaderEnabledArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetRepeatingHeaderEnabledArchive, _impl_.prev_repeating_header_enabled_)
      + sizeof(CommandSetRepeatingHeaderEnabledArchive::_impl_.prev_repeating_header_enabled_)
      - PROTOBUF_FIELD_OFFSET(CommandSetRepeatingHeaderEnabledArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.direction_, other->_impl_.direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetRepeatingHeaderEnabledArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[35]);
}

// ===================================================================

class CommandSetFiltersEnabledArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFiltersEnabledArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetFiltersEnabledArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_filters_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_old_filters_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetFiltersEnabledArchive::_Internal::super(const CommandSetFiltersEnabledArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSetFiltersEnabledArchive::clear_rollback_uid_list() {
  _impl_.rollback_uid_list_.Clear();
}
CommandSetFiltersEnabledArchive::CommandSetFiltersEnabledArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetFiltersEnabledArchive)
}
CommandSetFiltersEnabledArchive::CommandSetFiltersEnabledArchive(const CommandSetFiltersEnabledArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetFiltersEnabledArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollback_uid_list_){from._impl_.rollback_uid_list_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_filters_enabled_){}
    , decltype(_impl_.old_filters_enabled_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.new_filters_enabled_, &from._impl_.new_filters_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.old_filters_enabled_) -
    reinterpret_cast<char*>(&_impl_.new_filters_enabled_)) + sizeof(_impl_.old_filters_enabled_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetFiltersEnabledArchive)
}

inline void CommandSetFiltersEnabledArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollback_uid_list_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_filters_enabled_){false}
    , decltype(_impl_.old_filters_enabled_){false}
  };
}

CommandSetFiltersEnabledArchive::~CommandSetFiltersEnabledArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetFiltersEnabledArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetFiltersEnabledArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rollback_uid_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetFiltersEnabledArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetFiltersEnabledArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetFiltersEnabledArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rollback_uid_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  ::memset(&_impl_.new_filters_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.old_filters_enabled_) -
      reinterpret_cast<char*>(&_impl_.new_filters_enabled_)) + sizeof(_impl_.old_filters_enabled_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFiltersEnabledArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool new_filters_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_new_filters_enabled(&has_bits);
          _impl_.new_filters_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool old_filters_enabled = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_old_filters_enabled(&has_bits);
          _impl_.old_filters_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID rollback_uid_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollback_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetFiltersEnabledArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetFiltersEnabledArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool new_filters_enabled = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_new_filters_enabled(), target);
  }

  // optional bool old_filters_enabled = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_old_filters_enabled(), target);
  }

  // repeated .TSP.UUID rollback_uid_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rollback_uid_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_rollback_uid_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetFiltersEnabledArchive)
  return target;
}

size_t CommandSetFiltersEnabledArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetFiltersEnabledArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_new_filters_enabled()) {
    // required bool new_filters_enabled = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetFiltersEnabledArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetFiltersEnabledArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool new_filters_enabled = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID rollback_uid_list = 4;
  total_size += 1UL * this->_internal_rollback_uid_list_size();
  for (const auto& msg : this->_impl_.rollback_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional bool old_filters_enabled = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetFiltersEnabledArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetFiltersEnabledArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetFiltersEnabledArchive::GetClassData() const { return &_class_data_; }


void CommandSetFiltersEnabledArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetFiltersEnabledArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetFiltersEnabledArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetFiltersEnabledArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rollback_uid_list_.MergeFrom(from._impl_.rollback_uid_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.new_filters_enabled_ = from._impl_.new_filters_enabled_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.old_filters_enabled_ = from._impl_.old_filters_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetFiltersEnabledArchive::CopyFrom(const CommandSetFiltersEnabledArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetFiltersEnabledArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFiltersEnabledArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rollback_uid_list_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFiltersEnabledArchive::InternalSwap(CommandSetFiltersEnabledArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rollback_uid_list_.InternalSwap(&other->_impl_.rollback_uid_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFiltersEnabledArchive, _impl_.old_filters_enabled_)
      + sizeof(CommandSetFiltersEnabledArchive::_impl_.old_filters_enabled_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFiltersEnabledArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFiltersEnabledArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[36]);
}

// ===================================================================

class CommandAddTableStylePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandAddTableStylePresetArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandAddTableStylePresetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preset_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& table_styles(const CommandAddTableStylePresetArchive* msg);
  static void set_has_table_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_send_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandAddTableStylePresetArchive::_Internal::super(const CommandAddTableStylePresetArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandAddTableStylePresetArchive::_Internal::table_styles(const CommandAddTableStylePresetArchive* msg) {
  return *msg->_impl_.table_styles_;
}
void CommandAddTableStylePresetArchive::clear_table_styles() {
  if (_impl_.table_styles_ != nullptr) _impl_.table_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandAddTableStylePresetArchive::CommandAddTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandAddTableStylePresetArchive)
}
CommandAddTableStylePresetArchive::CommandAddTableStylePresetArchive(const CommandAddTableStylePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandAddTableStylePresetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_styles_){nullptr}
    , decltype(_impl_.preset_index_){}
    , decltype(_impl_.send_notification_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_table_styles()) {
    _this->_impl_.table_styles_ = new ::TSP::Reference(*from._impl_.table_styles_);
  }
  ::memcpy(&_impl_.preset_index_, &from._impl_.preset_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.send_notification_) -
    reinterpret_cast<char*>(&_impl_.preset_index_)) + sizeof(_impl_.send_notification_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandAddTableStylePresetArchive)
}

inline void CommandAddTableStylePresetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_styles_){nullptr}
    , decltype(_impl_.preset_index_){0}
    , decltype(_impl_.send_notification_){false}
  };
}

CommandAddTableStylePresetArchive::~CommandAddTableStylePresetArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandAddTableStylePresetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandAddTableStylePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.table_styles_;
}

void CommandAddTableStylePresetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandAddTableStylePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandAddTableStylePresetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.table_styles_ != nullptr);
      _impl_.table_styles_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.preset_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.send_notification_) -
        reinterpret_cast<char*>(&_impl_.preset_index_)) + sizeof(_impl_.send_notification_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandAddTableStylePresetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 preset_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_preset_index(&has_bits);
          _impl_.preset_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference table_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool send_notification = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_send_notification(&has_bits);
          _impl_.send_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandAddTableStylePresetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandAddTableStylePresetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required int32 preset_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_preset_index(), target);
  }

  // required .TSP.Reference table_styles = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table_styles(this),
        _Internal::table_styles(this).GetCachedSize(), target, stream);
  }

  // required bool send_notification = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_send_notification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandAddTableStylePresetArchive)
  return target;
}

size_t CommandAddTableStylePresetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandAddTableStylePresetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_table_styles()) {
    // required .TSP.Reference table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_styles_);
  }

  if (_internal_has_preset_index()) {
    // required int32 preset_index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_preset_index());
  }

  if (_internal_has_send_notification()) {
    // required bool send_notification = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandAddTableStylePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandAddTableStylePresetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_styles_);

    // required int32 preset_index = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_preset_index());

    // required bool send_notification = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandAddTableStylePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandAddTableStylePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandAddTableStylePresetArchive::GetClassData() const { return &_class_data_; }


void CommandAddTableStylePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandAddTableStylePresetArchive*>(&to_msg);
  auto& from = static_cast<const CommandAddTableStylePresetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandAddTableStylePresetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_table_styles()->::TSP::Reference::MergeFrom(
          from._internal_table_styles());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.preset_index_ = from._impl_.preset_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.send_notification_ = from._impl_.send_notification_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandAddTableStylePresetArchive::CopyFrom(const CommandAddTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandAddTableStylePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandAddTableStylePresetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_table_styles()) {
    if (!_impl_.table_styles_->IsInitialized()) return false;
  }
  return true;
}

void CommandAddTableStylePresetArchive::InternalSwap(CommandAddTableStylePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandAddTableStylePresetArchive, _impl_.send_notification_)
      + sizeof(CommandAddTableStylePresetArchive::_impl_.send_notification_)
      - PROTOBUF_FIELD_OFFSET(CommandAddTableStylePresetArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandAddTableStylePresetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[37]);
}

// ===================================================================

class CommandRemoveTableStylePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRemoveTableStylePresetArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandRemoveTableStylePresetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const CommandRemoveTableStylePresetArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& removed_table_styles(const CommandRemoveTableStylePresetArchive* msg);
  static void set_has_removed_table_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preset_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_preset_index_in_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandRemoveTableStylePresetArchive::_Internal::super(const CommandRemoveTableStylePresetArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandRemoveTableStylePresetArchive::_Internal::theme(const CommandRemoveTableStylePresetArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::Reference&
CommandRemoveTableStylePresetArchive::_Internal::removed_table_styles(const CommandRemoveTableStylePresetArchive* msg) {
  return *msg->_impl_.removed_table_styles_;
}
void CommandRemoveTableStylePresetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandRemoveTableStylePresetArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandRemoveTableStylePresetArchive::clear_removed_table_styles() {
  if (_impl_.removed_table_styles_ != nullptr) _impl_.removed_table_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandRemoveTableStylePresetArchive::CommandRemoveTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRemoveTableStylePresetArchive)
}
CommandRemoveTableStylePresetArchive::CommandRemoveTableStylePresetArchive(const CommandRemoveTableStylePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRemoveTableStylePresetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.removed_table_styles_){nullptr}
    , decltype(_impl_.preset_id_){}
    , decltype(_impl_.preset_index_in_theme_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_removed_table_styles()) {
    _this->_impl_.removed_table_styles_ = new ::TSP::Reference(*from._impl_.removed_table_styles_);
  }
  ::memcpy(&_impl_.preset_id_, &from._impl_.preset_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.preset_index_in_theme_) -
    reinterpret_cast<char*>(&_impl_.preset_id_)) + sizeof(_impl_.preset_index_in_theme_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandRemoveTableStylePresetArchive)
}

inline void CommandRemoveTableStylePresetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.removed_table_styles_){nullptr}
    , decltype(_impl_.preset_id_){0}
    , decltype(_impl_.preset_index_in_theme_){0}
  };
}

CommandRemoveTableStylePresetArchive::~CommandRemoveTableStylePresetArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRemoveTableStylePresetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRemoveTableStylePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.removed_table_styles_;
}

void CommandRemoveTableStylePresetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRemoveTableStylePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRemoveTableStylePresetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.removed_table_styles_ != nullptr);
      _impl_.removed_table_styles_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.preset_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.preset_index_in_theme_) -
        reinterpret_cast<char*>(&_impl_.preset_id_)) + sizeof(_impl_.preset_index_in_theme_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRemoveTableStylePresetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference removed_table_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_removed_table_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 preset_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_preset_id(&has_bits);
          _impl_.preset_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 preset_index_in_theme = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_preset_index_in_theme(&has_bits);
          _impl_.preset_index_in_theme_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRemoveTableStylePresetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRemoveTableStylePresetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference removed_table_styles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::removed_table_styles(this),
        _Internal::removed_table_styles(this).GetCachedSize(), target, stream);
  }

  // required int32 preset_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_preset_id(), target);
  }

  // required int32 preset_index_in_theme = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_preset_index_in_theme(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRemoveTableStylePresetArchive)
  return target;
}

size_t CommandRemoveTableStylePresetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRemoveTableStylePresetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_removed_table_styles()) {
    // required .TSP.Reference removed_table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removed_table_styles_);
  }

  if (_internal_has_preset_id()) {
    // required int32 preset_id = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_preset_id());
  }

  if (_internal_has_preset_index_in_theme()) {
    // required int32 preset_index_in_theme = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_preset_index_in_theme());
  }

  return total_size;
}
size_t CommandRemoveTableStylePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRemoveTableStylePresetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .TSP.Reference removed_table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.removed_table_styles_);

    // required int32 preset_id = 4;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_preset_id());

    // required int32 preset_index_in_theme = 5;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_preset_index_in_theme());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRemoveTableStylePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRemoveTableStylePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRemoveTableStylePresetArchive::GetClassData() const { return &_class_data_; }


void CommandRemoveTableStylePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRemoveTableStylePresetArchive*>(&to_msg);
  auto& from = static_cast<const CommandRemoveTableStylePresetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRemoveTableStylePresetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_removed_table_styles()->::TSP::Reference::MergeFrom(
          from._internal_removed_table_styles());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.preset_id_ = from._impl_.preset_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.preset_index_in_theme_ = from._impl_.preset_index_in_theme_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRemoveTableStylePresetArchive::CopyFrom(const CommandRemoveTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRemoveTableStylePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRemoveTableStylePresetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_removed_table_styles()) {
    if (!_impl_.removed_table_styles_->IsInitialized()) return false;
  }
  return true;
}

void CommandRemoveTableStylePresetArchive::InternalSwap(CommandRemoveTableStylePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRemoveTableStylePresetArchive, _impl_.preset_index_in_theme_)
      + sizeof(CommandRemoveTableStylePresetArchive::_impl_.preset_index_in_theme_)
      - PROTOBUF_FIELD_OFFSET(CommandRemoveTableStylePresetArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRemoveTableStylePresetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[38]);
}

// ===================================================================

class CommandReplaceTableStylePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandReplaceTableStylePresetArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandReplaceTableStylePresetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& theme(const CommandReplaceTableStylePresetArchive* msg);
  static void set_has_theme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_table_styles(const CommandReplaceTableStylePresetArchive* msg);
  static void set_has_old_table_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& new_table_styles(const CommandReplaceTableStylePresetArchive* msg);
  static void set_has_new_table_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TSK::CommandArchive&
CommandReplaceTableStylePresetArchive::_Internal::super(const CommandReplaceTableStylePresetArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandReplaceTableStylePresetArchive::_Internal::theme(const CommandReplaceTableStylePresetArchive* msg) {
  return *msg->_impl_.theme_;
}
const ::TSP::Reference&
CommandReplaceTableStylePresetArchive::_Internal::old_table_styles(const CommandReplaceTableStylePresetArchive* msg) {
  return *msg->_impl_.old_table_styles_;
}
const ::TSP::Reference&
CommandReplaceTableStylePresetArchive::_Internal::new_table_styles(const CommandReplaceTableStylePresetArchive* msg) {
  return *msg->_impl_.new_table_styles_;
}
void CommandReplaceTableStylePresetArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandReplaceTableStylePresetArchive::clear_theme() {
  if (_impl_.theme_ != nullptr) _impl_.theme_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandReplaceTableStylePresetArchive::clear_old_table_styles() {
  if (_impl_.old_table_styles_ != nullptr) _impl_.old_table_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandReplaceTableStylePresetArchive::clear_new_table_styles() {
  if (_impl_.new_table_styles_ != nullptr) _impl_.new_table_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandReplaceTableStylePresetArchive::CommandReplaceTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandReplaceTableStylePresetArchive)
}
CommandReplaceTableStylePresetArchive::CommandReplaceTableStylePresetArchive(const CommandReplaceTableStylePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandReplaceTableStylePresetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.old_table_styles_){nullptr}
    , decltype(_impl_.new_table_styles_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_theme()) {
    _this->_impl_.theme_ = new ::TSP::Reference(*from._impl_.theme_);
  }
  if (from._internal_has_old_table_styles()) {
    _this->_impl_.old_table_styles_ = new ::TSP::Reference(*from._impl_.old_table_styles_);
  }
  if (from._internal_has_new_table_styles()) {
    _this->_impl_.new_table_styles_ = new ::TSP::Reference(*from._impl_.new_table_styles_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandReplaceTableStylePresetArchive)
}

inline void CommandReplaceTableStylePresetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.theme_){nullptr}
    , decltype(_impl_.old_table_styles_){nullptr}
    , decltype(_impl_.new_table_styles_){nullptr}
  };
}

CommandReplaceTableStylePresetArchive::~CommandReplaceTableStylePresetArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandReplaceTableStylePresetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandReplaceTableStylePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.theme_;
  if (this != internal_default_instance()) delete _impl_.old_table_styles_;
  if (this != internal_default_instance()) delete _impl_.new_table_styles_;
}

void CommandReplaceTableStylePresetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandReplaceTableStylePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandReplaceTableStylePresetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.theme_ != nullptr);
      _impl_.theme_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_table_styles_ != nullptr);
      _impl_.old_table_styles_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.new_table_styles_ != nullptr);
      _impl_.new_table_styles_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandReplaceTableStylePresetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference theme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_theme(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference old_table_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_table_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference new_table_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_table_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandReplaceTableStylePresetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandReplaceTableStylePresetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference theme = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::theme(this),
        _Internal::theme(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference old_table_styles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_table_styles(this),
        _Internal::old_table_styles(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference new_table_styles = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::new_table_styles(this),
        _Internal::new_table_styles(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandReplaceTableStylePresetArchive)
  return target;
}

size_t CommandReplaceTableStylePresetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandReplaceTableStylePresetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_theme()) {
    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);
  }

  if (_internal_has_old_table_styles()) {
    // required .TSP.Reference old_table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_table_styles_);
  }

  if (_internal_has_new_table_styles()) {
    // required .TSP.Reference new_table_styles = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_table_styles_);
  }

  return total_size;
}
size_t CommandReplaceTableStylePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandReplaceTableStylePresetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference theme = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.theme_);

    // required .TSP.Reference old_table_styles = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_table_styles_);

    // required .TSP.Reference new_table_styles = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_table_styles_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandReplaceTableStylePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandReplaceTableStylePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandReplaceTableStylePresetArchive::GetClassData() const { return &_class_data_; }


void CommandReplaceTableStylePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandReplaceTableStylePresetArchive*>(&to_msg);
  auto& from = static_cast<const CommandReplaceTableStylePresetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandReplaceTableStylePresetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_theme()->::TSP::Reference::MergeFrom(
          from._internal_theme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_table_styles()->::TSP::Reference::MergeFrom(
          from._internal_old_table_styles());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_new_table_styles()->::TSP::Reference::MergeFrom(
          from._internal_new_table_styles());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandReplaceTableStylePresetArchive::CopyFrom(const CommandReplaceTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandReplaceTableStylePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandReplaceTableStylePresetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_theme()) {
    if (!_impl_.theme_->IsInitialized()) return false;
  }
  if (_internal_has_old_table_styles()) {
    if (!_impl_.old_table_styles_->IsInitialized()) return false;
  }
  if (_internal_has_new_table_styles()) {
    if (!_impl_.new_table_styles_->IsInitialized()) return false;
  }
  return true;
}

void CommandReplaceTableStylePresetArchive::InternalSwap(CommandReplaceTableStylePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandReplaceTableStylePresetArchive, _impl_.new_table_styles_)
      + sizeof(CommandReplaceTableStylePresetArchive::_impl_.new_table_styles_)
      - PROTOBUF_FIELD_OFFSET(CommandReplaceTableStylePresetArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandReplaceTableStylePresetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[39]);
}

// ===================================================================

class CommandApplyTableStylePresetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyTableStylePresetArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& preset(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& styles(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_preset(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_undo_preset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& undo_styles(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_undo_styles(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& undo_cell_diff_map(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_undo_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_apply_preset_option(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_table_clears_all_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_undo_table_clears_all_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& change_prop_map_wrapper(const CommandApplyTableStylePresetArchive* msg);
  static void set_has_change_prop_map_wrapper(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000701) ^ 0x00000701) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyTableStylePresetArchive::_Internal::super(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::preset(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->_impl_.preset_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::styles(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->_impl_.styles_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::undo_preset(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->_impl_.undo_preset_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::undo_styles(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->_impl_.undo_styles_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::cell_diff_map(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->_impl_.cell_diff_map_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::undo_cell_diff_map(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->_impl_.undo_cell_diff_map_;
}
const ::TSP::Reference&
CommandApplyTableStylePresetArchive::_Internal::change_prop_map_wrapper(const CommandApplyTableStylePresetArchive* msg) {
  return *msg->_impl_.change_prop_map_wrapper_;
}
void CommandApplyTableStylePresetArchive::clear_preset() {
  if (_impl_.preset_ != nullptr) _impl_.preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandApplyTableStylePresetArchive::clear_styles() {
  if (_impl_.styles_ != nullptr) _impl_.styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandApplyTableStylePresetArchive::clear_undo_preset() {
  if (_impl_.undo_preset_ != nullptr) _impl_.undo_preset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandApplyTableStylePresetArchive::clear_undo_styles() {
  if (_impl_.undo_styles_ != nullptr) _impl_.undo_styles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandApplyTableStylePresetArchive::clear_cell_diff_map() {
  if (_impl_.cell_diff_map_ != nullptr) _impl_.cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CommandApplyTableStylePresetArchive::clear_undo_cell_diff_map() {
  if (_impl_.undo_cell_diff_map_ != nullptr) _impl_.undo_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void CommandApplyTableStylePresetArchive::clear_change_prop_map_wrapper() {
  if (_impl_.change_prop_map_wrapper_ != nullptr) _impl_.change_prop_map_wrapper_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
CommandApplyTableStylePresetArchive::CommandApplyTableStylePresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyTableStylePresetArchive)
}
CommandApplyTableStylePresetArchive::CommandApplyTableStylePresetArchive(const CommandApplyTableStylePresetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandApplyTableStylePresetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_col_styles_){from._impl_.row_col_styles_}
    , decltype(_impl_.undo_row_col_styles_){from._impl_.undo_row_col_styles_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.styles_){nullptr}
    , decltype(_impl_.undo_preset_){nullptr}
    , decltype(_impl_.undo_styles_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.undo_cell_diff_map_){nullptr}
    , decltype(_impl_.change_prop_map_wrapper_){nullptr}
    , decltype(_impl_.apply_preset_option_){}
    , decltype(_impl_.table_clears_all_flag_){}
    , decltype(_impl_.undo_table_clears_all_flag_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_preset()) {
    _this->_impl_.preset_ = new ::TSP::Reference(*from._impl_.preset_);
  }
  if (from._internal_has_styles()) {
    _this->_impl_.styles_ = new ::TSP::Reference(*from._impl_.styles_);
  }
  if (from._internal_has_undo_preset()) {
    _this->_impl_.undo_preset_ = new ::TSP::Reference(*from._impl_.undo_preset_);
  }
  if (from._internal_has_undo_styles()) {
    _this->_impl_.undo_styles_ = new ::TSP::Reference(*from._impl_.undo_styles_);
  }
  if (from._internal_has_cell_diff_map()) {
    _this->_impl_.cell_diff_map_ = new ::TSP::Reference(*from._impl_.cell_diff_map_);
  }
  if (from._internal_has_undo_cell_diff_map()) {
    _this->_impl_.undo_cell_diff_map_ = new ::TSP::Reference(*from._impl_.undo_cell_diff_map_);
  }
  if (from._internal_has_change_prop_map_wrapper()) {
    _this->_impl_.change_prop_map_wrapper_ = new ::TSP::Reference(*from._impl_.change_prop_map_wrapper_);
  }
  ::memcpy(&_impl_.apply_preset_option_, &from._impl_.apply_preset_option_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.undo_table_clears_all_flag_) -
    reinterpret_cast<char*>(&_impl_.apply_preset_option_)) + sizeof(_impl_.undo_table_clears_all_flag_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyTableStylePresetArchive)
}

inline void CommandApplyTableStylePresetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_col_styles_){arena}
    , decltype(_impl_.undo_row_col_styles_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.preset_){nullptr}
    , decltype(_impl_.styles_){nullptr}
    , decltype(_impl_.undo_preset_){nullptr}
    , decltype(_impl_.undo_styles_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.undo_cell_diff_map_){nullptr}
    , decltype(_impl_.change_prop_map_wrapper_){nullptr}
    , decltype(_impl_.apply_preset_option_){0}
    , decltype(_impl_.table_clears_all_flag_){false}
    , decltype(_impl_.undo_table_clears_all_flag_){false}
  };
}

CommandApplyTableStylePresetArchive::~CommandApplyTableStylePresetArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyTableStylePresetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandApplyTableStylePresetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_col_styles_.~RepeatedPtrField();
  _impl_.undo_row_col_styles_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.preset_;
  if (this != internal_default_instance()) delete _impl_.styles_;
  if (this != internal_default_instance()) delete _impl_.undo_preset_;
  if (this != internal_default_instance()) delete _impl_.undo_styles_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.undo_cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.change_prop_map_wrapper_;
}

void CommandApplyTableStylePresetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandApplyTableStylePresetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyTableStylePresetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_col_styles_.Clear();
  _impl_.undo_row_col_styles_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.preset_ != nullptr);
      _impl_.preset_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.styles_ != nullptr);
      _impl_.styles_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.undo_preset_ != nullptr);
      _impl_.undo_preset_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.undo_styles_ != nullptr);
      _impl_.undo_styles_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.cell_diff_map_ != nullptr);
      _impl_.cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.undo_cell_diff_map_ != nullptr);
      _impl_.undo_cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.change_prop_map_wrapper_ != nullptr);
      _impl_.change_prop_map_wrapper_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.apply_preset_option_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.undo_table_clears_all_flag_) -
        reinterpret_cast<char*>(&_impl_.apply_preset_option_)) + sizeof(_impl_.undo_table_clears_all_flag_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyTableStylePresetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference preset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_preset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_preset(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_styles(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_diff_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 apply_preset_option = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_apply_preset_option(&has_bits);
          _impl_.apply_preset_option_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool table_clears_all_flag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_table_clears_all_flag(&has_bits);
          _impl_.table_clears_all_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool undo_table_clears_all_flag = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_undo_table_clears_all_flag(&has_bits);
          _impl_.undo_table_clears_all_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowMetadataArchive row_col_styles = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_col_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowMetadataArchive undo_row_col_styles = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_row_col_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference change_prop_map_wrapper = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_change_prop_map_wrapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandApplyTableStylePresetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyTableStylePresetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference preset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::preset(this),
        _Internal::preset(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference styles = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::styles(this),
        _Internal::styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_preset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::undo_preset(this),
        _Internal::undo_preset(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_styles = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::undo_styles(this),
        _Internal::undo_styles(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference cell_diff_map = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cell_diff_map(this),
        _Internal::cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_cell_diff_map = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::undo_cell_diff_map(this),
        _Internal::undo_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // required int32 apply_preset_option = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_apply_preset_option(), target);
  }

  // required bool table_clears_all_flag = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_table_clears_all_flag(), target);
  }

  // required bool undo_table_clears_all_flag = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_undo_table_clears_all_flag(), target);
  }

  // repeated .TST.ColumnRowMetadataArchive row_col_styles = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_col_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_col_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TST.ColumnRowMetadataArchive undo_row_col_styles = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_undo_row_col_styles_size()); i < n; i++) {
    const auto& repfield = this->_internal_undo_row_col_styles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference change_prop_map_wrapper = 15;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::change_prop_map_wrapper(this),
        _Internal::change_prop_map_wrapper(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyTableStylePresetArchive)
  return target;
}

size_t CommandApplyTableStylePresetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyTableStylePresetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_apply_preset_option()) {
    // required int32 apply_preset_option = 8;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_apply_preset_option());
  }

  if (_internal_has_table_clears_all_flag()) {
    // required bool table_clears_all_flag = 11;
    total_size += 1 + 1;
  }

  if (_internal_has_undo_table_clears_all_flag()) {
    // required bool undo_table_clears_all_flag = 12;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandApplyTableStylePresetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyTableStylePresetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000701) ^ 0x00000701) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required int32 apply_preset_option = 8;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_apply_preset_option());

    // required bool table_clears_all_flag = 11;
    total_size += 1 + 1;

    // required bool undo_table_clears_all_flag = 12;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.ColumnRowMetadataArchive row_col_styles = 13;
  total_size += 1UL * this->_internal_row_col_styles_size();
  for (const auto& msg : this->_impl_.row_col_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnRowMetadataArchive undo_row_col_styles = 14;
  total_size += 1UL * this->_internal_undo_row_col_styles_size();
  for (const auto& msg : this->_impl_.undo_row_col_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSP.Reference preset = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.preset_);
    }

    // optional .TSP.Reference styles = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.styles_);
    }

    // optional .TSP.Reference undo_preset = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_preset_);
    }

    // optional .TSP.Reference undo_styles = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_styles_);
    }

    // optional .TSP.Reference cell_diff_map = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_diff_map_);
    }

    // optional .TSP.Reference undo_cell_diff_map = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_cell_diff_map_);
    }

    // optional .TSP.Reference change_prop_map_wrapper = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.change_prop_map_wrapper_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyTableStylePresetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandApplyTableStylePresetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyTableStylePresetArchive::GetClassData() const { return &_class_data_; }


void CommandApplyTableStylePresetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandApplyTableStylePresetArchive*>(&to_msg);
  auto& from = static_cast<const CommandApplyTableStylePresetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyTableStylePresetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_col_styles_.MergeFrom(from._impl_.row_col_styles_);
  _this->_impl_.undo_row_col_styles_.MergeFrom(from._impl_.undo_row_col_styles_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_preset()->::TSP::Reference::MergeFrom(
          from._internal_preset());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_styles()->::TSP::Reference::MergeFrom(
          from._internal_styles());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_undo_preset()->::TSP::Reference::MergeFrom(
          from._internal_undo_preset());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_undo_styles()->::TSP::Reference::MergeFrom(
          from._internal_undo_styles());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_undo_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_cell_diff_map());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_change_prop_map_wrapper()->::TSP::Reference::MergeFrom(
          from._internal_change_prop_map_wrapper());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.apply_preset_option_ = from._impl_.apply_preset_option_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.table_clears_all_flag_ = from._impl_.table_clears_all_flag_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.undo_table_clears_all_flag_ = from._impl_.undo_table_clears_all_flag_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyTableStylePresetArchive::CopyFrom(const CommandApplyTableStylePresetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyTableStylePresetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyTableStylePresetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_col_styles_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.undo_row_col_styles_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_preset()) {
    if (!_impl_.preset_->IsInitialized()) return false;
  }
  if (_internal_has_styles()) {
    if (!_impl_.styles_->IsInitialized()) return false;
  }
  if (_internal_has_undo_preset()) {
    if (!_impl_.undo_preset_->IsInitialized()) return false;
  }
  if (_internal_has_undo_styles()) {
    if (!_impl_.undo_styles_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!_impl_.cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_diff_map()) {
    if (!_impl_.undo_cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_change_prop_map_wrapper()) {
    if (!_impl_.change_prop_map_wrapper_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyTableStylePresetArchive::InternalSwap(CommandApplyTableStylePresetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.row_col_styles_.InternalSwap(&other->_impl_.row_col_styles_);
  _impl_.undo_row_col_styles_.InternalSwap(&other->_impl_.undo_row_col_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyTableStylePresetArchive, _impl_.undo_table_clears_all_flag_)
      + sizeof(CommandApplyTableStylePresetArchive::_impl_.undo_table_clears_all_flag_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyTableStylePresetArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyTableStylePresetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[40]);
}

// ===================================================================

class CommandSetBaseArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetBaseArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetBaseArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetBaseArchive::_Internal::super(const CommandSetBaseArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetBaseArchive::CommandSetBaseArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetBaseArchive)
}
CommandSetBaseArchive::CommandSetBaseArchive(const CommandSetBaseArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetBaseArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.base_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  _this->_impl_.base_ = from._impl_.base_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetBaseArchive)
}

inline void CommandSetBaseArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.base_){0u}
  };
}

CommandSetBaseArchive::~CommandSetBaseArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetBaseArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetBaseArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetBaseArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetBaseArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetBaseArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.base_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetBaseArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_base(&has_bits);
          _impl_.base_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetBaseArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetBaseArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 base = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_base(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetBaseArchive)
  return target;
}

size_t CommandSetBaseArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetBaseArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_base()) {
    // required uint32 base = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base());
  }

  return total_size;
}
size_t CommandSetBaseArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetBaseArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 base = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetBaseArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetBaseArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetBaseArchive::GetClassData() const { return &_class_data_; }


void CommandSetBaseArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetBaseArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetBaseArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetBaseArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.base_ = from._impl_.base_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetBaseArchive::CopyFrom(const CommandSetBaseArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetBaseArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetBaseArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetBaseArchive::InternalSwap(CommandSetBaseArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetBaseArchive, _impl_.base_)
      + sizeof(CommandSetBaseArchive::_impl_.base_)
      - PROTOBUF_FIELD_OFFSET(CommandSetBaseArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetBaseArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[41]);
}

// ===================================================================

class CommandSetBasePlacesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetBasePlacesArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetBasePlacesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_places(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetBasePlacesArchive::_Internal::super(const CommandSetBasePlacesArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetBasePlacesArchive::CommandSetBasePlacesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetBasePlacesArchive)
}
CommandSetBasePlacesArchive::CommandSetBasePlacesArchive(const CommandSetBasePlacesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetBasePlacesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.base_places_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  _this->_impl_.base_places_ = from._impl_.base_places_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetBasePlacesArchive)
}

inline void CommandSetBasePlacesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.base_places_){0u}
  };
}

CommandSetBasePlacesArchive::~CommandSetBasePlacesArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetBasePlacesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetBasePlacesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetBasePlacesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetBasePlacesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetBasePlacesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.base_places_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetBasePlacesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 base_places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_base_places(&has_bits);
          _impl_.base_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetBasePlacesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetBasePlacesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 base_places = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_base_places(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetBasePlacesArchive)
  return target;
}

size_t CommandSetBasePlacesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetBasePlacesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_base_places()) {
    // required uint32 base_places = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_places());
  }

  return total_size;
}
size_t CommandSetBasePlacesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetBasePlacesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 base_places = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_base_places());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetBasePlacesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetBasePlacesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetBasePlacesArchive::GetClassData() const { return &_class_data_; }


void CommandSetBasePlacesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetBasePlacesArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetBasePlacesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetBasePlacesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.base_places_ = from._impl_.base_places_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetBasePlacesArchive::CopyFrom(const CommandSetBasePlacesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetBasePlacesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetBasePlacesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetBasePlacesArchive::InternalSwap(CommandSetBasePlacesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetBasePlacesArchive, _impl_.base_places_)
      + sizeof(CommandSetBasePlacesArchive::_impl_.base_places_)
      - PROTOBUF_FIELD_OFFSET(CommandSetBasePlacesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetBasePlacesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[42]);
}

// ===================================================================

class CommandSetBaseUseMinusSignArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetBaseUseMinusSignArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetBaseUseMinusSignArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_use_minus_sign(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetBaseUseMinusSignArchive::_Internal::super(const CommandSetBaseUseMinusSignArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetBaseUseMinusSignArchive::CommandSetBaseUseMinusSignArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetBaseUseMinusSignArchive)
}
CommandSetBaseUseMinusSignArchive::CommandSetBaseUseMinusSignArchive(const CommandSetBaseUseMinusSignArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetBaseUseMinusSignArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.base_use_minus_sign_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  _this->_impl_.base_use_minus_sign_ = from._impl_.base_use_minus_sign_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetBaseUseMinusSignArchive)
}

inline void CommandSetBaseUseMinusSignArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.base_use_minus_sign_){false}
  };
}

CommandSetBaseUseMinusSignArchive::~CommandSetBaseUseMinusSignArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetBaseUseMinusSignArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetBaseUseMinusSignArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetBaseUseMinusSignArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetBaseUseMinusSignArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetBaseUseMinusSignArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.base_use_minus_sign_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetBaseUseMinusSignArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool base_use_minus_sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_base_use_minus_sign(&has_bits);
          _impl_.base_use_minus_sign_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetBaseUseMinusSignArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetBaseUseMinusSignArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool base_use_minus_sign = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_base_use_minus_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetBaseUseMinusSignArchive)
  return target;
}

size_t CommandSetBaseUseMinusSignArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetBaseUseMinusSignArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_base_use_minus_sign()) {
    // required bool base_use_minus_sign = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetBaseUseMinusSignArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetBaseUseMinusSignArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool base_use_minus_sign = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetBaseUseMinusSignArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetBaseUseMinusSignArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetBaseUseMinusSignArchive::GetClassData() const { return &_class_data_; }


void CommandSetBaseUseMinusSignArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetBaseUseMinusSignArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetBaseUseMinusSignArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetBaseUseMinusSignArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.base_use_minus_sign_ = from._impl_.base_use_minus_sign_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetBaseUseMinusSignArchive::CopyFrom(const CommandSetBaseUseMinusSignArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetBaseUseMinusSignArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetBaseUseMinusSignArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetBaseUseMinusSignArchive::InternalSwap(CommandSetBaseUseMinusSignArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetBaseUseMinusSignArchive, _impl_.base_use_minus_sign_)
      + sizeof(CommandSetBaseUseMinusSignArchive::_impl_.base_use_minus_sign_)
      - PROTOBUF_FIELD_OFFSET(CommandSetBaseUseMinusSignArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetBaseUseMinusSignArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[43]);
}

// ===================================================================

class CommandSetCurrencyCodeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetCurrencyCodeArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetCurrencyCodeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_currency_code(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetCurrencyCodeArchive::_Internal::super(const CommandSetCurrencyCodeArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetCurrencyCodeArchive::CommandSetCurrencyCodeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetCurrencyCodeArchive)
}
CommandSetCurrencyCodeArchive::CommandSetCurrencyCodeArchive(const CommandSetCurrencyCodeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetCurrencyCodeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_currency_code()) {
    _this->_impl_.currency_code_.Set(from._internal_currency_code(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetCurrencyCodeArchive)
}

inline void CommandSetCurrencyCodeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.currency_code_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.currency_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.currency_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSetCurrencyCodeArchive::~CommandSetCurrencyCodeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetCurrencyCodeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetCurrencyCodeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.currency_code_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetCurrencyCodeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetCurrencyCodeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetCurrencyCodeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.currency_code_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetCurrencyCodeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string currency_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_currency_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CommandSetCurrencyCodeArchive.currency_code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetCurrencyCodeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetCurrencyCodeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required string currency_code = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_currency_code().data(), static_cast<int>(this->_internal_currency_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetCurrencyCodeArchive.currency_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_currency_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetCurrencyCodeArchive)
  return target;
}

size_t CommandSetCurrencyCodeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetCurrencyCodeArchive)
  size_t total_size = 0;

  if (_internal_has_currency_code()) {
    // required string currency_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency_code());
  }

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  return total_size;
}
size_t CommandSetCurrencyCodeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetCurrencyCodeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string currency_code = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_currency_code());

    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetCurrencyCodeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetCurrencyCodeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetCurrencyCodeArchive::GetClassData() const { return &_class_data_; }


void CommandSetCurrencyCodeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetCurrencyCodeArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetCurrencyCodeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetCurrencyCodeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_currency_code(from._internal_currency_code());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetCurrencyCodeArchive::CopyFrom(const CommandSetCurrencyCodeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetCurrencyCodeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetCurrencyCodeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetCurrencyCodeArchive::InternalSwap(CommandSetCurrencyCodeArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.currency_code_, lhs_arena,
      &other->_impl_.currency_code_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetCurrencyCodeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[44]);
}

// ===================================================================

class CommandSetFractionAccuracyArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFractionAccuracyArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetFractionAccuracyArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_fraction_accuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetFractionAccuracyArchive::_Internal::super(const CommandSetFractionAccuracyArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetFractionAccuracyArchive::CommandSetFractionAccuracyArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetFractionAccuracyArchive)
}
CommandSetFractionAccuracyArchive::CommandSetFractionAccuracyArchive(const CommandSetFractionAccuracyArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetFractionAccuracyArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.fraction_accuracy_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  _this->_impl_.fraction_accuracy_ = from._impl_.fraction_accuracy_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetFractionAccuracyArchive)
}

inline void CommandSetFractionAccuracyArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.fraction_accuracy_){0u}
  };
}

CommandSetFractionAccuracyArchive::~CommandSetFractionAccuracyArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetFractionAccuracyArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetFractionAccuracyArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetFractionAccuracyArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetFractionAccuracyArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetFractionAccuracyArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.fraction_accuracy_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFractionAccuracyArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 fraction_accuracy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_fraction_accuracy(&has_bits);
          _impl_.fraction_accuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetFractionAccuracyArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetFractionAccuracyArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 fraction_accuracy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_fraction_accuracy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetFractionAccuracyArchive)
  return target;
}

size_t CommandSetFractionAccuracyArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetFractionAccuracyArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_fraction_accuracy()) {
    // required uint32 fraction_accuracy = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fraction_accuracy());
  }

  return total_size;
}
size_t CommandSetFractionAccuracyArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetFractionAccuracyArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 fraction_accuracy = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_fraction_accuracy());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetFractionAccuracyArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetFractionAccuracyArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetFractionAccuracyArchive::GetClassData() const { return &_class_data_; }


void CommandSetFractionAccuracyArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetFractionAccuracyArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetFractionAccuracyArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetFractionAccuracyArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.fraction_accuracy_ = from._impl_.fraction_accuracy_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetFractionAccuracyArchive::CopyFrom(const CommandSetFractionAccuracyArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetFractionAccuracyArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFractionAccuracyArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFractionAccuracyArchive::InternalSwap(CommandSetFractionAccuracyArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFractionAccuracyArchive, _impl_.fraction_accuracy_)
      + sizeof(CommandSetFractionAccuracyArchive::_impl_.fraction_accuracy_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFractionAccuracyArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFractionAccuracyArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[45]);
}

// ===================================================================

class CommandSetNegativeNumberStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetNegativeNumberStyleArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetNegativeNumberStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negative_number_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetNegativeNumberStyleArchive::_Internal::super(const CommandSetNegativeNumberStyleArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetNegativeNumberStyleArchive::CommandSetNegativeNumberStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetNegativeNumberStyleArchive)
}
CommandSetNegativeNumberStyleArchive::CommandSetNegativeNumberStyleArchive(const CommandSetNegativeNumberStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetNegativeNumberStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.negative_number_style_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  _this->_impl_.negative_number_style_ = from._impl_.negative_number_style_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetNegativeNumberStyleArchive)
}

inline void CommandSetNegativeNumberStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.negative_number_style_){0u}
  };
}

CommandSetNegativeNumberStyleArchive::~CommandSetNegativeNumberStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetNegativeNumberStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetNegativeNumberStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetNegativeNumberStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetNegativeNumberStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetNegativeNumberStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.negative_number_style_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetNegativeNumberStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 negative_number_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_negative_number_style(&has_bits);
          _impl_.negative_number_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetNegativeNumberStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetNegativeNumberStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 negative_number_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_negative_number_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetNegativeNumberStyleArchive)
  return target;
}

size_t CommandSetNegativeNumberStyleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetNegativeNumberStyleArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_negative_number_style()) {
    // required uint32 negative_number_style = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_negative_number_style());
  }

  return total_size;
}
size_t CommandSetNegativeNumberStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetNegativeNumberStyleArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 negative_number_style = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_negative_number_style());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetNegativeNumberStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetNegativeNumberStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetNegativeNumberStyleArchive::GetClassData() const { return &_class_data_; }


void CommandSetNegativeNumberStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetNegativeNumberStyleArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetNegativeNumberStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetNegativeNumberStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.negative_number_style_ = from._impl_.negative_number_style_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetNegativeNumberStyleArchive::CopyFrom(const CommandSetNegativeNumberStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetNegativeNumberStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetNegativeNumberStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetNegativeNumberStyleArchive::InternalSwap(CommandSetNegativeNumberStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetNegativeNumberStyleArchive, _impl_.negative_number_style_)
      + sizeof(CommandSetNegativeNumberStyleArchive::_impl_.negative_number_style_)
      - PROTOBUF_FIELD_OFFSET(CommandSetNegativeNumberStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetNegativeNumberStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[46]);
}

// ===================================================================

class CommandSetNumberOfDecimalPlacesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetNumberOfDecimalPlacesArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetNumberOfDecimalPlacesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_decimal_places(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetNumberOfDecimalPlacesArchive::_Internal::super(const CommandSetNumberOfDecimalPlacesArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetNumberOfDecimalPlacesArchive::CommandSetNumberOfDecimalPlacesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetNumberOfDecimalPlacesArchive)
}
CommandSetNumberOfDecimalPlacesArchive::CommandSetNumberOfDecimalPlacesArchive(const CommandSetNumberOfDecimalPlacesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetNumberOfDecimalPlacesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.decimal_places_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  _this->_impl_.decimal_places_ = from._impl_.decimal_places_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetNumberOfDecimalPlacesArchive)
}

inline void CommandSetNumberOfDecimalPlacesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.decimal_places_){0u}
  };
}

CommandSetNumberOfDecimalPlacesArchive::~CommandSetNumberOfDecimalPlacesArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetNumberOfDecimalPlacesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetNumberOfDecimalPlacesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetNumberOfDecimalPlacesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetNumberOfDecimalPlacesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.decimal_places_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetNumberOfDecimalPlacesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 decimal_places = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_decimal_places(&has_bits);
          _impl_.decimal_places_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetNumberOfDecimalPlacesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 decimal_places = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_decimal_places(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetNumberOfDecimalPlacesArchive)
  return target;
}

size_t CommandSetNumberOfDecimalPlacesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_decimal_places()) {
    // required uint32 decimal_places = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_decimal_places());
  }

  return total_size;
}
size_t CommandSetNumberOfDecimalPlacesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 decimal_places = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_decimal_places());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetNumberOfDecimalPlacesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetNumberOfDecimalPlacesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetNumberOfDecimalPlacesArchive::GetClassData() const { return &_class_data_; }


void CommandSetNumberOfDecimalPlacesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetNumberOfDecimalPlacesArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetNumberOfDecimalPlacesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.decimal_places_ = from._impl_.decimal_places_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetNumberOfDecimalPlacesArchive::CopyFrom(const CommandSetNumberOfDecimalPlacesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetNumberOfDecimalPlacesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetNumberOfDecimalPlacesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetNumberOfDecimalPlacesArchive::InternalSwap(CommandSetNumberOfDecimalPlacesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetNumberOfDecimalPlacesArchive, _impl_.decimal_places_)
      + sizeof(CommandSetNumberOfDecimalPlacesArchive::_impl_.decimal_places_)
      - PROTOBUF_FIELD_OFFSET(CommandSetNumberOfDecimalPlacesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetNumberOfDecimalPlacesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[47]);
}

// ===================================================================

class CommandSetDateTimeFormatArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetDateTimeFormatArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetDateTimeFormatArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_date_format_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_format_string(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetDateTimeFormatArchive::_Internal::super(const CommandSetDateTimeFormatArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetDateTimeFormatArchive::CommandSetDateTimeFormatArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetDateTimeFormatArchive)
}
CommandSetDateTimeFormatArchive::CommandSetDateTimeFormatArchive(const CommandSetDateTimeFormatArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetDateTimeFormatArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_format_string_){}
    , decltype(_impl_.time_format_string_){}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.date_format_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_format_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_date_format_string()) {
    _this->_impl_.date_format_string_.Set(from._internal_date_format_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.time_format_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_format_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_time_format_string()) {
    _this->_impl_.time_format_string_.Set(from._internal_time_format_string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetDateTimeFormatArchive)
}

inline void CommandSetDateTimeFormatArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.date_format_string_){}
    , decltype(_impl_.time_format_string_){}
    , decltype(_impl_.super_){nullptr}
  };
  _impl_.date_format_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.date_format_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.time_format_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_format_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSetDateTimeFormatArchive::~CommandSetDateTimeFormatArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetDateTimeFormatArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetDateTimeFormatArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.date_format_string_.Destroy();
  _impl_.time_format_string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetDateTimeFormatArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetDateTimeFormatArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetDateTimeFormatArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.date_format_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.time_format_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetDateTimeFormatArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string date_format_string = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_date_format_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CommandSetDateTimeFormatArchive.date_format_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string time_format_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_time_format_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CommandSetDateTimeFormatArchive.time_format_string");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetDateTimeFormatArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetDateTimeFormatArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional string date_format_string = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_date_format_string().data(), static_cast<int>(this->_internal_date_format_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetDateTimeFormatArchive.date_format_string");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_date_format_string(), target);
  }

  // optional string time_format_string = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_time_format_string().data(), static_cast<int>(this->_internal_time_format_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetDateTimeFormatArchive.time_format_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time_format_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetDateTimeFormatArchive)
  return target;
}

size_t CommandSetDateTimeFormatArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetDateTimeFormatArchive)
  size_t total_size = 0;

  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string date_format_string = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_date_format_string());
    }

    // optional string time_format_string = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_time_format_string());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetDateTimeFormatArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetDateTimeFormatArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetDateTimeFormatArchive::GetClassData() const { return &_class_data_; }


void CommandSetDateTimeFormatArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetDateTimeFormatArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetDateTimeFormatArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetDateTimeFormatArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_date_format_string(from._internal_date_format_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_time_format_string(from._internal_time_format_string());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetDateTimeFormatArchive::CopyFrom(const CommandSetDateTimeFormatArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetDateTimeFormatArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetDateTimeFormatArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetDateTimeFormatArchive::InternalSwap(CommandSetDateTimeFormatArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.date_format_string_, lhs_arena,
      &other->_impl_.date_format_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_format_string_, lhs_arena,
      &other->_impl_.time_format_string_, rhs_arena
  );
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetDateTimeFormatArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[48]);
}

// ===================================================================

class CommandSetShowThousandsSeparatorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetShowThousandsSeparatorArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetShowThousandsSeparatorArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_show_thousands_separator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetShowThousandsSeparatorArchive::_Internal::super(const CommandSetShowThousandsSeparatorArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetShowThousandsSeparatorArchive::CommandSetShowThousandsSeparatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetShowThousandsSeparatorArchive)
}
CommandSetShowThousandsSeparatorArchive::CommandSetShowThousandsSeparatorArchive(const CommandSetShowThousandsSeparatorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetShowThousandsSeparatorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_thousands_separator_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  _this->_impl_.show_thousands_separator_ = from._impl_.show_thousands_separator_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetShowThousandsSeparatorArchive)
}

inline void CommandSetShowThousandsSeparatorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.show_thousands_separator_){false}
  };
}

CommandSetShowThousandsSeparatorArchive::~CommandSetShowThousandsSeparatorArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetShowThousandsSeparatorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetShowThousandsSeparatorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetShowThousandsSeparatorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetShowThousandsSeparatorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetShowThousandsSeparatorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.show_thousands_separator_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetShowThousandsSeparatorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool show_thousands_separator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_show_thousands_separator(&has_bits);
          _impl_.show_thousands_separator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetShowThousandsSeparatorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetShowThousandsSeparatorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool show_thousands_separator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_show_thousands_separator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetShowThousandsSeparatorArchive)
  return target;
}

size_t CommandSetShowThousandsSeparatorArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetShowThousandsSeparatorArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_show_thousands_separator()) {
    // required bool show_thousands_separator = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetShowThousandsSeparatorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetShowThousandsSeparatorArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool show_thousands_separator = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetShowThousandsSeparatorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetShowThousandsSeparatorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetShowThousandsSeparatorArchive::GetClassData() const { return &_class_data_; }


void CommandSetShowThousandsSeparatorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetShowThousandsSeparatorArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetShowThousandsSeparatorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetShowThousandsSeparatorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.show_thousands_separator_ = from._impl_.show_thousands_separator_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetShowThousandsSeparatorArchive::CopyFrom(const CommandSetShowThousandsSeparatorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetShowThousandsSeparatorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetShowThousandsSeparatorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetShowThousandsSeparatorArchive::InternalSwap(CommandSetShowThousandsSeparatorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetShowThousandsSeparatorArchive, _impl_.show_thousands_separator_)
      + sizeof(CommandSetShowThousandsSeparatorArchive::_impl_.show_thousands_separator_)
      - PROTOBUF_FIELD_OFFSET(CommandSetShowThousandsSeparatorArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetShowThousandsSeparatorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[49]);
}

// ===================================================================

class CommandSetUseAccountingStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetUseAccountingStyleArchive>()._impl_._has_bits_);
  static const ::TST::CommandMutateCellFormatArchive& super(const CommandSetUseAccountingStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_use_accounting_style(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandMutateCellFormatArchive&
CommandSetUseAccountingStyleArchive::_Internal::super(const CommandSetUseAccountingStyleArchive* msg) {
  return *msg->_impl_.super_;
}
CommandSetUseAccountingStyleArchive::CommandSetUseAccountingStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetUseAccountingStyleArchive)
}
CommandSetUseAccountingStyleArchive::CommandSetUseAccountingStyleArchive(const CommandSetUseAccountingStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetUseAccountingStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.use_accounting_style_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandMutateCellFormatArchive(*from._impl_.super_);
  }
  _this->_impl_.use_accounting_style_ = from._impl_.use_accounting_style_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetUseAccountingStyleArchive)
}

inline void CommandSetUseAccountingStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.use_accounting_style_){false}
  };
}

CommandSetUseAccountingStyleArchive::~CommandSetUseAccountingStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetUseAccountingStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetUseAccountingStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetUseAccountingStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetUseAccountingStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetUseAccountingStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.use_accounting_style_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetUseAccountingStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandMutateCellFormatArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool use_accounting_style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_use_accounting_style(&has_bits);
          _impl_.use_accounting_style_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetUseAccountingStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetUseAccountingStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandMutateCellFormatArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool use_accounting_style = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_use_accounting_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetUseAccountingStyleArchive)
  return target;
}

size_t CommandSetUseAccountingStyleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetUseAccountingStyleArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_use_accounting_style()) {
    // required bool use_accounting_style = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetUseAccountingStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetUseAccountingStyleArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandMutateCellFormatArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool use_accounting_style = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetUseAccountingStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetUseAccountingStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetUseAccountingStyleArchive::GetClassData() const { return &_class_data_; }


void CommandSetUseAccountingStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetUseAccountingStyleArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetUseAccountingStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetUseAccountingStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandMutateCellFormatArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.use_accounting_style_ = from._impl_.use_accounting_style_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetUseAccountingStyleArchive::CopyFrom(const CommandSetUseAccountingStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetUseAccountingStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetUseAccountingStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetUseAccountingStyleArchive::InternalSwap(CommandSetUseAccountingStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetUseAccountingStyleArchive, _impl_.use_accounting_style_)
      + sizeof(CommandSetUseAccountingStyleArchive::_impl_.use_accounting_style_)
      - PROTOBUF_FIELD_OFFSET(CommandSetUseAccountingStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetUseAccountingStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[50]);
}

// ===================================================================

class CommandSetRangeControlMinMaxIncArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetRangeControlMinMaxIncArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetRangeControlMinMaxIncArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minimum(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_maximum(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_increment(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandSetRangeControlMinMaxIncArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::CellUIDListArchive& cell_uid_list(const CommandSetRangeControlMinMaxIncArchive* msg);
  static void set_has_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandSetRangeControlMinMaxIncArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_first_commit(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000081) ^ 0x00000081) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetRangeControlMinMaxIncArchive::_Internal::super(const CommandSetRangeControlMinMaxIncArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSetRangeControlMinMaxIncArchive::_Internal::cell_diff_map(const CommandSetRangeControlMinMaxIncArchive* msg) {
  return *msg->_impl_.cell_diff_map_;
}
const ::TST::CellUIDListArchive&
CommandSetRangeControlMinMaxIncArchive::_Internal::cell_uid_list(const CommandSetRangeControlMinMaxIncArchive* msg) {
  return *msg->_impl_.cell_uid_list_;
}
const ::TSP::Reference&
CommandSetRangeControlMinMaxIncArchive::_Internal::inverse_cell_diff_map(const CommandSetRangeControlMinMaxIncArchive* msg) {
  return *msg->_impl_.inverse_cell_diff_map_;
}
void CommandSetRangeControlMinMaxIncArchive::clear_cell_diff_map() {
  if (_impl_.cell_diff_map_ != nullptr) _impl_.cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetRangeControlMinMaxIncArchive::clear_cell_uid_list() {
  if (_impl_.cell_uid_list_ != nullptr) _impl_.cell_uid_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSetRangeControlMinMaxIncArchive::clear_inverse_cell_diff_map() {
  if (_impl_.inverse_cell_diff_map_ != nullptr) _impl_.inverse_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSetRangeControlMinMaxIncArchive::CommandSetRangeControlMinMaxIncArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetRangeControlMinMaxIncArchive)
}
CommandSetRangeControlMinMaxIncArchive::CommandSetRangeControlMinMaxIncArchive(const CommandSetRangeControlMinMaxIncArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetRangeControlMinMaxIncArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
    , decltype(_impl_.minimum_){}
    , decltype(_impl_.maximum_){}
    , decltype(_impl_.increment_){}
    , decltype(_impl_.is_first_commit_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_diff_map()) {
    _this->_impl_.cell_diff_map_ = new ::TSP::Reference(*from._impl_.cell_diff_map_);
  }
  if (from._internal_has_cell_uid_list()) {
    _this->_impl_.cell_uid_list_ = new ::TST::CellUIDListArchive(*from._impl_.cell_uid_list_);
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    _this->_impl_.inverse_cell_diff_map_ = new ::TSP::Reference(*from._impl_.inverse_cell_diff_map_);
  }
  ::memcpy(&_impl_.minimum_, &from._impl_.minimum_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_first_commit_) -
    reinterpret_cast<char*>(&_impl_.minimum_)) + sizeof(_impl_.is_first_commit_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetRangeControlMinMaxIncArchive)
}

inline void CommandSetRangeControlMinMaxIncArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
    , decltype(_impl_.minimum_){0}
    , decltype(_impl_.maximum_){0}
    , decltype(_impl_.increment_){0}
    , decltype(_impl_.is_first_commit_){false}
  };
}

CommandSetRangeControlMinMaxIncArchive::~CommandSetRangeControlMinMaxIncArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetRangeControlMinMaxIncArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetRangeControlMinMaxIncArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.cell_uid_list_;
  if (this != internal_default_instance()) delete _impl_.inverse_cell_diff_map_;
}

void CommandSetRangeControlMinMaxIncArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetRangeControlMinMaxIncArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetRangeControlMinMaxIncArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_diff_map_ != nullptr);
      _impl_.cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.cell_uid_list_ != nullptr);
      _impl_.cell_uid_list_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.inverse_cell_diff_map_ != nullptr);
      _impl_.inverse_cell_diff_map_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.minimum_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_first_commit_) -
        reinterpret_cast<char*>(&_impl_.minimum_)) + sizeof(_impl_.is_first_commit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetRangeControlMinMaxIncArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double minimum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_minimum(&has_bits);
          _impl_.minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double maximum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_maximum(&has_bits);
          _impl_.maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double increment = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_increment(&has_bits);
          _impl_.increment_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uid_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_first_commit = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_is_first_commit(&has_bits);
          _impl_.is_first_commit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetRangeControlMinMaxIncArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetRangeControlMinMaxIncArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional double minimum = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_minimum(), target);
  }

  // optional double maximum = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_maximum(), target);
  }

  // optional double increment = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_increment(), target);
  }

  // optional .TSP.Reference cell_diff_map = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cell_diff_map(this),
        _Internal::cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellUIDListArchive cell_uid_list = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::cell_uid_list(this),
        _Internal::cell_uid_list(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::inverse_cell_diff_map(this),
        _Internal::inverse_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // required bool is_first_commit = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_first_commit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetRangeControlMinMaxIncArchive)
  return target;
}

size_t CommandSetRangeControlMinMaxIncArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetRangeControlMinMaxIncArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_is_first_commit()) {
    // required bool is_first_commit = 8;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetRangeControlMinMaxIncArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetRangeControlMinMaxIncArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000081) ^ 0x00000081) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool is_first_commit = 8;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional .TSP.Reference cell_diff_map = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_diff_map_);
    }

    // optional .TST.CellUIDListArchive cell_uid_list = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_uid_list_);
    }

    // optional .TSP.Reference inverse_cell_diff_map = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.inverse_cell_diff_map_);
    }

    // optional double minimum = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double maximum = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double increment = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetRangeControlMinMaxIncArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetRangeControlMinMaxIncArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetRangeControlMinMaxIncArchive::GetClassData() const { return &_class_data_; }


void CommandSetRangeControlMinMaxIncArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetRangeControlMinMaxIncArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetRangeControlMinMaxIncArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetRangeControlMinMaxIncArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_cell_uid_list());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_inverse_cell_diff_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.minimum_ = from._impl_.minimum_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.maximum_ = from._impl_.maximum_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.increment_ = from._impl_.increment_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.is_first_commit_ = from._impl_.is_first_commit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetRangeControlMinMaxIncArchive::CopyFrom(const CommandSetRangeControlMinMaxIncArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetRangeControlMinMaxIncArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetRangeControlMinMaxIncArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!_impl_.cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_list()) {
    if (!_impl_.cell_uid_list_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!_impl_.inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetRangeControlMinMaxIncArchive::InternalSwap(CommandSetRangeControlMinMaxIncArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetRangeControlMinMaxIncArchive, _impl_.is_first_commit_)
      + sizeof(CommandSetRangeControlMinMaxIncArchive::_impl_.is_first_commit_)
      - PROTOBUF_FIELD_OFFSET(CommandSetRangeControlMinMaxIncArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetRangeControlMinMaxIncArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[51]);
}

// ===================================================================

class CommandMoveColumnsOrRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMoveColumnsOrRowsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandMoveColumnsOrRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& dest_uid(const CommandMoveColumnsOrRowsArchive* msg);
  static void set_has_dest_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_before(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::UUID& undo_dest_uid(const CommandMoveColumnsOrRowsArchive* msg);
  static void set_has_undo_dest_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undo_before(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& formula_rewrite_command(const CommandMoveColumnsOrRowsArchive* msg);
  static void set_has_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000077) ^ 0x00000077) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandMoveColumnsOrRowsArchive::_Internal::super(const CommandMoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandMoveColumnsOrRowsArchive::_Internal::dest_uid(const CommandMoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.dest_uid_;
}
const ::TSP::UUID&
CommandMoveColumnsOrRowsArchive::_Internal::undo_dest_uid(const CommandMoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.undo_dest_uid_;
}
const ::TSP::Reference&
CommandMoveColumnsOrRowsArchive::_Internal::formula_rewrite_command(const CommandMoveColumnsOrRowsArchive* msg) {
  return *msg->_impl_.formula_rewrite_command_;
}
void CommandMoveColumnsOrRowsArchive::clear_dest_uid() {
  if (_impl_.dest_uid_ != nullptr) _impl_.dest_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandMoveColumnsOrRowsArchive::clear_undo_dest_uid() {
  if (_impl_.undo_dest_uid_ != nullptr) _impl_.undo_dest_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandMoveColumnsOrRowsArchive::clear_uids() {
  _impl_.uids_.Clear();
}
void CommandMoveColumnsOrRowsArchive::clear_formula_rewrite_command() {
  if (_impl_.formula_rewrite_command_ != nullptr) _impl_.formula_rewrite_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandMoveColumnsOrRowsArchive::CommandMoveColumnsOrRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandMoveColumnsOrRowsArchive)
}
CommandMoveColumnsOrRowsArchive::CommandMoveColumnsOrRowsArchive(const CommandMoveColumnsOrRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMoveColumnsOrRowsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uids_){from._impl_.uids_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.dest_uid_){nullptr}
    , decltype(_impl_.undo_dest_uid_){nullptr}
    , decltype(_impl_.formula_rewrite_command_){nullptr}
    , decltype(_impl_.before_){}
    , decltype(_impl_.undo_before_){}
    , decltype(_impl_.direction_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_dest_uid()) {
    _this->_impl_.dest_uid_ = new ::TSP::UUID(*from._impl_.dest_uid_);
  }
  if (from._internal_has_undo_dest_uid()) {
    _this->_impl_.undo_dest_uid_ = new ::TSP::UUID(*from._impl_.undo_dest_uid_);
  }
  if (from._internal_has_formula_rewrite_command()) {
    _this->_impl_.formula_rewrite_command_ = new ::TSP::Reference(*from._impl_.formula_rewrite_command_);
  }
  ::memcpy(&_impl_.before_, &from._impl_.before_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_) -
    reinterpret_cast<char*>(&_impl_.before_)) + sizeof(_impl_.direction_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandMoveColumnsOrRowsArchive)
}

inline void CommandMoveColumnsOrRowsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.uids_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.dest_uid_){nullptr}
    , decltype(_impl_.undo_dest_uid_){nullptr}
    , decltype(_impl_.formula_rewrite_command_){nullptr}
    , decltype(_impl_.before_){false}
    , decltype(_impl_.undo_before_){false}
    , decltype(_impl_.direction_){-1}
  };
}

CommandMoveColumnsOrRowsArchive::~CommandMoveColumnsOrRowsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandMoveColumnsOrRowsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMoveColumnsOrRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.dest_uid_;
  if (this != internal_default_instance()) delete _impl_.undo_dest_uid_;
  if (this != internal_default_instance()) delete _impl_.formula_rewrite_command_;
}

void CommandMoveColumnsOrRowsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMoveColumnsOrRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandMoveColumnsOrRowsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.dest_uid_ != nullptr);
      _impl_.dest_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.undo_dest_uid_ != nullptr);
      _impl_.undo_dest_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.formula_rewrite_command_ != nullptr);
      _impl_.formula_rewrite_command_->Clear();
    }
  }
  ::memset(&_impl_.before_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.undo_before_) -
      reinterpret_cast<char*>(&_impl_.before_)) + sizeof(_impl_.undo_before_));
  _impl_.direction_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMoveColumnsOrRowsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID dest_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dest_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool before = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_before(&has_bits);
          _impl_.before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID undo_dest_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_dest_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool undo_before = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_undo_before(&has_bits);
          _impl_.undo_before_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID uids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TST.TableDimensionArchive direction = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_direction(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMoveColumnsOrRowsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandMoveColumnsOrRowsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID dest_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dest_uid(this),
        _Internal::dest_uid(this).GetCachedSize(), target, stream);
  }

  // required bool before = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_before(), target);
  }

  // required .TSP.UUID undo_dest_uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::undo_dest_uid(this),
        _Internal::undo_dest_uid(this).GetCachedSize(), target, stream);
  }

  // required bool undo_before = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_undo_before(), target);
  }

  // repeated .TSP.UUID uids = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TST.TableDimensionArchive direction = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_direction(), target);
  }

  // optional .TSP.Reference formula_rewrite_command = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::formula_rewrite_command(this),
        _Internal::formula_rewrite_command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandMoveColumnsOrRowsArchive)
  return target;
}

size_t CommandMoveColumnsOrRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandMoveColumnsOrRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_dest_uid()) {
    // required .TSP.UUID dest_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dest_uid_);
  }

  if (_internal_has_undo_dest_uid()) {
    // required .TSP.UUID undo_dest_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.undo_dest_uid_);
  }

  if (_internal_has_before()) {
    // required bool before = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_undo_before()) {
    // required bool undo_before = 5;
    total_size += 1 + 1;
  }

  if (_internal_has_direction()) {
    // required .TST.TableDimensionArchive direction = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
  }

  return total_size;
}
size_t CommandMoveColumnsOrRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandMoveColumnsOrRowsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000077) ^ 0x00000077) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID dest_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.dest_uid_);

    // required .TSP.UUID undo_dest_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.undo_dest_uid_);

    // required bool before = 3;
    total_size += 1 + 1;

    // required bool undo_before = 5;
    total_size += 1 + 1;

    // required .TST.TableDimensionArchive direction = 7;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uids = 6;
  total_size += 1UL * this->_internal_uids_size();
  for (const auto& msg : this->_impl_.uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference formula_rewrite_command = 8;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_rewrite_command_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMoveColumnsOrRowsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMoveColumnsOrRowsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMoveColumnsOrRowsArchive::GetClassData() const { return &_class_data_; }


void CommandMoveColumnsOrRowsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMoveColumnsOrRowsArchive*>(&to_msg);
  auto& from = static_cast<const CommandMoveColumnsOrRowsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandMoveColumnsOrRowsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uids_.MergeFrom(from._impl_.uids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dest_uid()->::TSP::UUID::MergeFrom(
          from._internal_dest_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_undo_dest_uid()->::TSP::UUID::MergeFrom(
          from._internal_undo_dest_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_formula_rewrite_command()->::TSP::Reference::MergeFrom(
          from._internal_formula_rewrite_command());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.before_ = from._impl_.before_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.undo_before_ = from._impl_.undo_before_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.direction_ = from._impl_.direction_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMoveColumnsOrRowsArchive::CopyFrom(const CommandMoveColumnsOrRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandMoveColumnsOrRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMoveColumnsOrRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uids_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_dest_uid()) {
    if (!_impl_.dest_uid_->IsInitialized()) return false;
  }
  if (_internal_has_undo_dest_uid()) {
    if (!_impl_.undo_dest_uid_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command()) {
    if (!_impl_.formula_rewrite_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandMoveColumnsOrRowsArchive::InternalSwap(CommandMoveColumnsOrRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.uids_.InternalSwap(&other->_impl_.uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMoveColumnsOrRowsArchive, _impl_.undo_before_)
      + sizeof(CommandMoveColumnsOrRowsArchive::_impl_.undo_before_)
      - PROTOBUF_FIELD_OFFSET(CommandMoveColumnsOrRowsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.direction_, other->_impl_.direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMoveColumnsOrRowsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[52]);
}

// ===================================================================

class CommandSortArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSortArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSortArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& formula_rewrite_command(const CommandSortArchive* msg);
  static void set_has_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSortArchive::_Internal::super(const CommandSortArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSortArchive::_Internal::formula_rewrite_command(const CommandSortArchive* msg) {
  return *msg->_impl_.formula_rewrite_command_;
}
void CommandSortArchive::clear_from_row_uids() {
  _impl_.from_row_uids_.Clear();
}
void CommandSortArchive::clear_to_row_uids() {
  _impl_.to_row_uids_.Clear();
}
void CommandSortArchive::clear_formula_rewrite_command() {
  if (_impl_.formula_rewrite_command_ != nullptr) _impl_.formula_rewrite_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandSortArchive::CommandSortArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSortArchive)
}
CommandSortArchive::CommandSortArchive(const CommandSortArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSortArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_row_uids_){from._impl_.from_row_uids_}
    , decltype(_impl_.to_row_uids_){from._impl_.to_row_uids_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.formula_rewrite_command_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_formula_rewrite_command()) {
    _this->_impl_.formula_rewrite_command_ = new ::TSP::Reference(*from._impl_.formula_rewrite_command_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSortArchive)
}

inline void CommandSortArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.from_row_uids_){arena}
    , decltype(_impl_.to_row_uids_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.formula_rewrite_command_){nullptr}
  };
}

CommandSortArchive::~CommandSortArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSortArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSortArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.from_row_uids_.~RepeatedPtrField();
  _impl_.to_row_uids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.formula_rewrite_command_;
}

void CommandSortArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSortArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSortArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.from_row_uids_.Clear();
  _impl_.to_row_uids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.formula_rewrite_command_ != nullptr);
      _impl_.formula_rewrite_command_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSortArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID from_row_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_from_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID to_row_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_to_row_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSortArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSortArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID from_row_uids = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_from_row_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_from_row_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID to_row_uids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_to_row_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_to_row_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference formula_rewrite_command = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::formula_rewrite_command(this),
        _Internal::formula_rewrite_command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSortArchive)
  return target;
}

size_t CommandSortArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSortArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID from_row_uids = 2;
  total_size += 1UL * this->_internal_from_row_uids_size();
  for (const auto& msg : this->_impl_.from_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID to_row_uids = 3;
  total_size += 1UL * this->_internal_to_row_uids_size();
  for (const auto& msg : this->_impl_.to_row_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference formula_rewrite_command = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_rewrite_command_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSortArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSortArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSortArchive::GetClassData() const { return &_class_data_; }


void CommandSortArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSortArchive*>(&to_msg);
  auto& from = static_cast<const CommandSortArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSortArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.from_row_uids_.MergeFrom(from._impl_.from_row_uids_);
  _this->_impl_.to_row_uids_.MergeFrom(from._impl_.to_row_uids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_formula_rewrite_command()->::TSP::Reference::MergeFrom(
          from._internal_formula_rewrite_command());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSortArchive::CopyFrom(const CommandSortArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSortArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSortArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.from_row_uids_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.to_row_uids_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command()) {
    if (!_impl_.formula_rewrite_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandSortArchive::InternalSwap(CommandSortArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.from_row_uids_.InternalSwap(&other->_impl_.from_row_uids_);
  _impl_.to_row_uids_.InternalSwap(&other->_impl_.to_row_uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSortArchive, _impl_.formula_rewrite_command_)
      + sizeof(CommandSortArchive::_impl_.formula_rewrite_command_)
      - PROTOBUF_FIELD_OFFSET(CommandSortArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSortArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[53]);
}

// ===================================================================

class FormulaRewriteSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaRewriteSpecArchive>()._impl_._has_bits_);
  static void set_has_rewrite_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TSP::UUID& table_uid(const FormulaRewriteSpecArchive* msg);
  static void set_has_table_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& cond_style_owner_uid(const FormulaRewriteSpecArchive* msg);
  static void set_has_cond_style_owner_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& group_by_uid(const FormulaRewriteSpecArchive* msg);
  static void set_has_group_by_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_is_inverse(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TSCE::ColumnOrRowUuidsInfoArchive& column_or_row_uuids_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_column_or_row_uuids_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::ColumnOrRowUuidsInfoArchive& aux_column_or_row_uuids_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_aux_column_or_row_uuids_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSCE::RegionMovedInfoArchive& region_moved_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_region_moved_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSCE::RegionInfoArchive& region_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_region_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSCE::RewriteTableUIDInfoArchive& rewrite_table_id_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_rewrite_table_id_info(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSCE::TableTransposeInfoArchive& transposed_table_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_transposed_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSCE::MergeOriginMovedArchive& merge_origin_moved_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_merge_origin_moved_info(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSCE::MergeSourceArchive& merge_source(const FormulaRewriteSpecArchive* msg);
  static void set_has_merge_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSCE::RewriteGroupNodeUIDInfoArchive& group_node_info(const FormulaRewriteSpecArchive* msg);
  static void set_has_group_node_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::TSCE::GroupByChangeArchive& groupby_change(const FormulaRewriteSpecArchive* msg);
  static void set_has_groupby_change(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00002000) ^ 0x00002000) != 0;
  }
};

const ::TSP::UUID&
FormulaRewriteSpecArchive::_Internal::table_uid(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.table_uid_;
}
const ::TSP::UUID&
FormulaRewriteSpecArchive::_Internal::cond_style_owner_uid(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.cond_style_owner_uid_;
}
const ::TSP::UUID&
FormulaRewriteSpecArchive::_Internal::group_by_uid(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.group_by_uid_;
}
const ::TSCE::ColumnOrRowUuidsInfoArchive&
FormulaRewriteSpecArchive::_Internal::column_or_row_uuids_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.column_or_row_uuids_info_;
}
const ::TSCE::ColumnOrRowUuidsInfoArchive&
FormulaRewriteSpecArchive::_Internal::aux_column_or_row_uuids_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.aux_column_or_row_uuids_info_;
}
const ::TSCE::RegionMovedInfoArchive&
FormulaRewriteSpecArchive::_Internal::region_moved_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.region_moved_info_;
}
const ::TSCE::RegionInfoArchive&
FormulaRewriteSpecArchive::_Internal::region_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.region_info_;
}
const ::TSCE::RewriteTableUIDInfoArchive&
FormulaRewriteSpecArchive::_Internal::rewrite_table_id_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.rewrite_table_id_info_;
}
const ::TSCE::TableTransposeInfoArchive&
FormulaRewriteSpecArchive::_Internal::transposed_table_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.transposed_table_info_;
}
const ::TSCE::MergeOriginMovedArchive&
FormulaRewriteSpecArchive::_Internal::merge_origin_moved_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.merge_origin_moved_info_;
}
const ::TSCE::MergeSourceArchive&
FormulaRewriteSpecArchive::_Internal::merge_source(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.merge_source_;
}
const ::TSCE::RewriteGroupNodeUIDInfoArchive&
FormulaRewriteSpecArchive::_Internal::group_node_info(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.group_node_info_;
}
const ::TSCE::GroupByChangeArchive&
FormulaRewriteSpecArchive::_Internal::groupby_change(const FormulaRewriteSpecArchive* msg) {
  return *msg->_impl_.groupby_change_;
}
void FormulaRewriteSpecArchive::clear_table_uid() {
  if (_impl_.table_uid_ != nullptr) _impl_.table_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void FormulaRewriteSpecArchive::clear_cond_style_owner_uid() {
  if (_impl_.cond_style_owner_uid_ != nullptr) _impl_.cond_style_owner_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void FormulaRewriteSpecArchive::clear_group_by_uid() {
  if (_impl_.group_by_uid_ != nullptr) _impl_.group_by_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void FormulaRewriteSpecArchive::clear_column_or_row_uuids_info() {
  if (_impl_.column_or_row_uuids_info_ != nullptr) _impl_.column_or_row_uuids_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void FormulaRewriteSpecArchive::clear_aux_column_or_row_uuids_info() {
  if (_impl_.aux_column_or_row_uuids_info_ != nullptr) _impl_.aux_column_or_row_uuids_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void FormulaRewriteSpecArchive::clear_region_moved_info() {
  if (_impl_.region_moved_info_ != nullptr) _impl_.region_moved_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void FormulaRewriteSpecArchive::clear_region_info() {
  if (_impl_.region_info_ != nullptr) _impl_.region_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void FormulaRewriteSpecArchive::clear_rewrite_table_id_info() {
  if (_impl_.rewrite_table_id_info_ != nullptr) _impl_.rewrite_table_id_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void FormulaRewriteSpecArchive::clear_transposed_table_info() {
  if (_impl_.transposed_table_info_ != nullptr) _impl_.transposed_table_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void FormulaRewriteSpecArchive::clear_merge_origin_moved_info() {
  if (_impl_.merge_origin_moved_info_ != nullptr) _impl_.merge_origin_moved_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void FormulaRewriteSpecArchive::clear_merge_source() {
  if (_impl_.merge_source_ != nullptr) _impl_.merge_source_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void FormulaRewriteSpecArchive::clear_group_node_info() {
  if (_impl_.group_node_info_ != nullptr) _impl_.group_node_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void FormulaRewriteSpecArchive::clear_groupby_change() {
  if (_impl_.groupby_change_ != nullptr) _impl_.groupby_change_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
FormulaRewriteSpecArchive::FormulaRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaRewriteSpecArchive)
}
FormulaRewriteSpecArchive::FormulaRewriteSpecArchive(const FormulaRewriteSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaRewriteSpecArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.cond_style_owner_uid_){nullptr}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.column_or_row_uuids_info_){nullptr}
    , decltype(_impl_.aux_column_or_row_uuids_info_){nullptr}
    , decltype(_impl_.region_moved_info_){nullptr}
    , decltype(_impl_.region_info_){nullptr}
    , decltype(_impl_.rewrite_table_id_info_){nullptr}
    , decltype(_impl_.transposed_table_info_){nullptr}
    , decltype(_impl_.merge_origin_moved_info_){nullptr}
    , decltype(_impl_.merge_source_){nullptr}
    , decltype(_impl_.group_node_info_){nullptr}
    , decltype(_impl_.groupby_change_){nullptr}
    , decltype(_impl_.rewrite_type_){}
    , decltype(_impl_.is_inverse_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_uid()) {
    _this->_impl_.table_uid_ = new ::TSP::UUID(*from._impl_.table_uid_);
  }
  if (from._internal_has_cond_style_owner_uid()) {
    _this->_impl_.cond_style_owner_uid_ = new ::TSP::UUID(*from._impl_.cond_style_owner_uid_);
  }
  if (from._internal_has_group_by_uid()) {
    _this->_impl_.group_by_uid_ = new ::TSP::UUID(*from._impl_.group_by_uid_);
  }
  if (from._internal_has_column_or_row_uuids_info()) {
    _this->_impl_.column_or_row_uuids_info_ = new ::TSCE::ColumnOrRowUuidsInfoArchive(*from._impl_.column_or_row_uuids_info_);
  }
  if (from._internal_has_aux_column_or_row_uuids_info()) {
    _this->_impl_.aux_column_or_row_uuids_info_ = new ::TSCE::ColumnOrRowUuidsInfoArchive(*from._impl_.aux_column_or_row_uuids_info_);
  }
  if (from._internal_has_region_moved_info()) {
    _this->_impl_.region_moved_info_ = new ::TSCE::RegionMovedInfoArchive(*from._impl_.region_moved_info_);
  }
  if (from._internal_has_region_info()) {
    _this->_impl_.region_info_ = new ::TSCE::RegionInfoArchive(*from._impl_.region_info_);
  }
  if (from._internal_has_rewrite_table_id_info()) {
    _this->_impl_.rewrite_table_id_info_ = new ::TSCE::RewriteTableUIDInfoArchive(*from._impl_.rewrite_table_id_info_);
  }
  if (from._internal_has_transposed_table_info()) {
    _this->_impl_.transposed_table_info_ = new ::TSCE::TableTransposeInfoArchive(*from._impl_.transposed_table_info_);
  }
  if (from._internal_has_merge_origin_moved_info()) {
    _this->_impl_.merge_origin_moved_info_ = new ::TSCE::MergeOriginMovedArchive(*from._impl_.merge_origin_moved_info_);
  }
  if (from._internal_has_merge_source()) {
    _this->_impl_.merge_source_ = new ::TSCE::MergeSourceArchive(*from._impl_.merge_source_);
  }
  if (from._internal_has_group_node_info()) {
    _this->_impl_.group_node_info_ = new ::TSCE::RewriteGroupNodeUIDInfoArchive(*from._impl_.group_node_info_);
  }
  if (from._internal_has_groupby_change()) {
    _this->_impl_.groupby_change_ = new ::TSCE::GroupByChangeArchive(*from._impl_.groupby_change_);
  }
  ::memcpy(&_impl_.rewrite_type_, &from._impl_.rewrite_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_inverse_) -
    reinterpret_cast<char*>(&_impl_.rewrite_type_)) + sizeof(_impl_.is_inverse_));
  // @@protoc_insertion_point(copy_constructor:TST.FormulaRewriteSpecArchive)
}

inline void FormulaRewriteSpecArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_uid_){nullptr}
    , decltype(_impl_.cond_style_owner_uid_){nullptr}
    , decltype(_impl_.group_by_uid_){nullptr}
    , decltype(_impl_.column_or_row_uuids_info_){nullptr}
    , decltype(_impl_.aux_column_or_row_uuids_info_){nullptr}
    , decltype(_impl_.region_moved_info_){nullptr}
    , decltype(_impl_.region_info_){nullptr}
    , decltype(_impl_.rewrite_table_id_info_){nullptr}
    , decltype(_impl_.transposed_table_info_){nullptr}
    , decltype(_impl_.merge_origin_moved_info_){nullptr}
    , decltype(_impl_.merge_source_){nullptr}
    , decltype(_impl_.group_node_info_){nullptr}
    , decltype(_impl_.groupby_change_){nullptr}
    , decltype(_impl_.rewrite_type_){0u}
    , decltype(_impl_.is_inverse_){false}
  };
}

FormulaRewriteSpecArchive::~FormulaRewriteSpecArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaRewriteSpecArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaRewriteSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_uid_;
  if (this != internal_default_instance()) delete _impl_.cond_style_owner_uid_;
  if (this != internal_default_instance()) delete _impl_.group_by_uid_;
  if (this != internal_default_instance()) delete _impl_.column_or_row_uuids_info_;
  if (this != internal_default_instance()) delete _impl_.aux_column_or_row_uuids_info_;
  if (this != internal_default_instance()) delete _impl_.region_moved_info_;
  if (this != internal_default_instance()) delete _impl_.region_info_;
  if (this != internal_default_instance()) delete _impl_.rewrite_table_id_info_;
  if (this != internal_default_instance()) delete _impl_.transposed_table_info_;
  if (this != internal_default_instance()) delete _impl_.merge_origin_moved_info_;
  if (this != internal_default_instance()) delete _impl_.merge_source_;
  if (this != internal_default_instance()) delete _impl_.group_node_info_;
  if (this != internal_default_instance()) delete _impl_.groupby_change_;
}

void FormulaRewriteSpecArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaRewriteSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.table_uid_ != nullptr);
      _impl_.table_uid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cond_style_owner_uid_ != nullptr);
      _impl_.cond_style_owner_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.group_by_uid_ != nullptr);
      _impl_.group_by_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.column_or_row_uuids_info_ != nullptr);
      _impl_.column_or_row_uuids_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.aux_column_or_row_uuids_info_ != nullptr);
      _impl_.aux_column_or_row_uuids_info_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.region_moved_info_ != nullptr);
      _impl_.region_moved_info_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.region_info_ != nullptr);
      _impl_.region_info_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.rewrite_table_id_info_ != nullptr);
      _impl_.rewrite_table_id_info_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.transposed_table_info_ != nullptr);
      _impl_.transposed_table_info_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.merge_origin_moved_info_ != nullptr);
      _impl_.merge_origin_moved_info_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.merge_source_ != nullptr);
      _impl_.merge_source_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.group_node_info_ != nullptr);
      _impl_.group_node_info_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.groupby_change_ != nullptr);
      _impl_.groupby_change_->Clear();
    }
  }
  if (cached_has_bits & 0x00006000u) {
    ::memset(&_impl_.rewrite_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_inverse_) -
        reinterpret_cast<char*>(&_impl_.rewrite_type_)) + sizeof(_impl_.is_inverse_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaRewriteSpecArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 rewrite_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_rewrite_type(&has_bits);
          _impl_.rewrite_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID table_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID cond_style_owner_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cond_style_owner_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID group_by_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_inverse = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_inverse(&has_bits);
          _impl_.is_inverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ColumnOrRowUuidsInfoArchive column_or_row_uuids_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_or_row_uuids_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ColumnOrRowUuidsInfoArchive aux_column_or_row_uuids_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_aux_column_or_row_uuids_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RegionMovedInfoArchive region_moved_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_moved_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RegionInfoArchive region_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_region_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RewriteTableUIDInfoArchive rewrite_table_id_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_table_id_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.TableTransposeInfoArchive transposed_table_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_transposed_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.MergeOriginMovedArchive merge_origin_moved_info = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_origin_moved_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.MergeSourceArchive merge_source = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RewriteGroupNodeUIDInfoArchive group_node_info = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.GroupByChangeArchive groupby_change = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_groupby_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaRewriteSpecArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint32 rewrite_type = 1;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rewrite_type(), target);
  }

  // optional .TSP.UUID table_uid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table_uid(this),
        _Internal::table_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID cond_style_owner_uid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cond_style_owner_uid(this),
        _Internal::cond_style_owner_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID group_by_uid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::group_by_uid(this),
        _Internal::group_by_uid(this).GetCachedSize(), target, stream);
  }

  // optional bool is_inverse = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_inverse(), target);
  }

  // optional .TSCE.ColumnOrRowUuidsInfoArchive column_or_row_uuids_info = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::column_or_row_uuids_info(this),
        _Internal::column_or_row_uuids_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ColumnOrRowUuidsInfoArchive aux_column_or_row_uuids_info = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::aux_column_or_row_uuids_info(this),
        _Internal::aux_column_or_row_uuids_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RegionMovedInfoArchive region_moved_info = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::region_moved_info(this),
        _Internal::region_moved_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RegionInfoArchive region_info = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::region_info(this),
        _Internal::region_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RewriteTableUIDInfoArchive rewrite_table_id_info = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::rewrite_table_id_info(this),
        _Internal::rewrite_table_id_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.TableTransposeInfoArchive transposed_table_info = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::transposed_table_info(this),
        _Internal::transposed_table_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.MergeOriginMovedArchive merge_origin_moved_info = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::merge_origin_moved_info(this),
        _Internal::merge_origin_moved_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.MergeSourceArchive merge_source = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::merge_source(this),
        _Internal::merge_source(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RewriteGroupNodeUIDInfoArchive group_node_info = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::group_node_info(this),
        _Internal::group_node_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.GroupByChangeArchive groupby_change = 15;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::groupby_change(this),
        _Internal::groupby_change(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaRewriteSpecArchive)
  return target;
}

size_t FormulaRewriteSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaRewriteSpecArchive)
  size_t total_size = 0;

  // required uint32 rewrite_type = 1;
  if (_internal_has_rewrite_type()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_rewrite_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TSP.UUID table_uid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_uid_);
    }

    // optional .TSP.UUID cond_style_owner_uid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cond_style_owner_uid_);
    }

    // optional .TSP.UUID group_by_uid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.group_by_uid_);
    }

    // optional .TSCE.ColumnOrRowUuidsInfoArchive column_or_row_uuids_info = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.column_or_row_uuids_info_);
    }

    // optional .TSCE.ColumnOrRowUuidsInfoArchive aux_column_or_row_uuids_info = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.aux_column_or_row_uuids_info_);
    }

    // optional .TSCE.RegionMovedInfoArchive region_moved_info = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.region_moved_info_);
    }

    // optional .TSCE.RegionInfoArchive region_info = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.region_info_);
    }

    // optional .TSCE.RewriteTableUIDInfoArchive rewrite_table_id_info = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rewrite_table_id_info_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .TSCE.TableTransposeInfoArchive transposed_table_info = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transposed_table_info_);
    }

    // optional .TSCE.MergeOriginMovedArchive merge_origin_moved_info = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.merge_origin_moved_info_);
    }

    // optional .TSCE.MergeSourceArchive merge_source = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.merge_source_);
    }

    // optional .TSCE.RewriteGroupNodeUIDInfoArchive group_node_info = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.group_node_info_);
    }

    // optional .TSCE.GroupByChangeArchive groupby_change = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.groupby_change_);
    }

  }
  // optional bool is_inverse = 5;
  if (cached_has_bits & 0x00004000u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaRewriteSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaRewriteSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaRewriteSpecArchive::GetClassData() const { return &_class_data_; }


void FormulaRewriteSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaRewriteSpecArchive*>(&to_msg);
  auto& from = static_cast<const FormulaRewriteSpecArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_table_uid()->::TSP::UUID::MergeFrom(
          from._internal_table_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cond_style_owner_uid()->::TSP::UUID::MergeFrom(
          from._internal_cond_style_owner_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_group_by_uid()->::TSP::UUID::MergeFrom(
          from._internal_group_by_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_column_or_row_uuids_info()->::TSCE::ColumnOrRowUuidsInfoArchive::MergeFrom(
          from._internal_column_or_row_uuids_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_aux_column_or_row_uuids_info()->::TSCE::ColumnOrRowUuidsInfoArchive::MergeFrom(
          from._internal_aux_column_or_row_uuids_info());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_region_moved_info()->::TSCE::RegionMovedInfoArchive::MergeFrom(
          from._internal_region_moved_info());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_region_info()->::TSCE::RegionInfoArchive::MergeFrom(
          from._internal_region_info());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_rewrite_table_id_info()->::TSCE::RewriteTableUIDInfoArchive::MergeFrom(
          from._internal_rewrite_table_id_info());
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_transposed_table_info()->::TSCE::TableTransposeInfoArchive::MergeFrom(
          from._internal_transposed_table_info());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_merge_origin_moved_info()->::TSCE::MergeOriginMovedArchive::MergeFrom(
          from._internal_merge_origin_moved_info());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_merge_source()->::TSCE::MergeSourceArchive::MergeFrom(
          from._internal_merge_source());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_group_node_info()->::TSCE::RewriteGroupNodeUIDInfoArchive::MergeFrom(
          from._internal_group_node_info());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_groupby_change()->::TSCE::GroupByChangeArchive::MergeFrom(
          from._internal_groupby_change());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.rewrite_type_ = from._impl_.rewrite_type_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.is_inverse_ = from._impl_.is_inverse_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaRewriteSpecArchive::CopyFrom(const FormulaRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaRewriteSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_table_uid()) {
    if (!_impl_.table_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cond_style_owner_uid()) {
    if (!_impl_.cond_style_owner_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_by_uid()) {
    if (!_impl_.group_by_uid_->IsInitialized()) return false;
  }
  if (_internal_has_column_or_row_uuids_info()) {
    if (!_impl_.column_or_row_uuids_info_->IsInitialized()) return false;
  }
  if (_internal_has_aux_column_or_row_uuids_info()) {
    if (!_impl_.aux_column_or_row_uuids_info_->IsInitialized()) return false;
  }
  if (_internal_has_region_moved_info()) {
    if (!_impl_.region_moved_info_->IsInitialized()) return false;
  }
  if (_internal_has_region_info()) {
    if (!_impl_.region_info_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_table_id_info()) {
    if (!_impl_.rewrite_table_id_info_->IsInitialized()) return false;
  }
  if (_internal_has_transposed_table_info()) {
    if (!_impl_.transposed_table_info_->IsInitialized()) return false;
  }
  if (_internal_has_merge_source()) {
    if (!_impl_.merge_source_->IsInitialized()) return false;
  }
  if (_internal_has_group_node_info()) {
    if (!_impl_.group_node_info_->IsInitialized()) return false;
  }
  if (_internal_has_groupby_change()) {
    if (!_impl_.groupby_change_->IsInitialized()) return false;
  }
  return true;
}

void FormulaRewriteSpecArchive::InternalSwap(FormulaRewriteSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaRewriteSpecArchive, _impl_.is_inverse_)
      + sizeof(FormulaRewriteSpecArchive::_impl_.is_inverse_)
      - PROTOBUF_FIELD_OFFSET(FormulaRewriteSpecArchive, _impl_.table_uid_)>(
          reinterpret_cast<char*>(&_impl_.table_uid_),
          reinterpret_cast<char*>(&other->_impl_.table_uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaRewriteSpecArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[54]);
}

// ===================================================================

class CommandRewriteFormulasForTransposeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteFormulasForTransposeArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteFormulasForTransposeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteFormulasForTransposeArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewriteFormulasForTransposeArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::ImportWarningSetByCellRefArchive& warningset_map(const CommandRewriteFormulasForTransposeArchive* msg);
  static void set_has_warningset_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteFormulasForTransposeArchive::_Internal::super(const CommandRewriteFormulasForTransposeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::FormulaRewriteSpecArchive&
CommandRewriteFormulasForTransposeArchive::_Internal::rewrite_spec(const CommandRewriteFormulasForTransposeArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewriteFormulasForTransposeArchive::_Internal::formulas_to_rewrite(const CommandRewriteFormulasForTransposeArchive* msg) {
  return *msg->_impl_.formulas_to_rewrite_;
}
const ::TST::ImportWarningSetByCellRefArchive&
CommandRewriteFormulasForTransposeArchive::_Internal::warningset_map(const CommandRewriteFormulasForTransposeArchive* msg) {
  return *msg->_impl_.warningset_map_;
}
void CommandRewriteFormulasForTransposeArchive::clear_formulas_to_rewrite() {
  if (_impl_.formulas_to_rewrite_ != nullptr) _impl_.formulas_to_rewrite_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandRewriteFormulasForTransposeArchive::clear_warningset_map() {
  if (_impl_.warningset_map_ != nullptr) _impl_.warningset_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandRewriteFormulasForTransposeArchive::CommandRewriteFormulasForTransposeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteFormulasForTransposeArchive)
}
CommandRewriteFormulasForTransposeArchive::CommandRewriteFormulasForTransposeArchive(const CommandRewriteFormulasForTransposeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewriteFormulasForTransposeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}
    , decltype(_impl_.warningset_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TST::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  if (from._internal_has_formulas_to_rewrite()) {
    _this->_impl_.formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from._impl_.formulas_to_rewrite_);
  }
  if (from._internal_has_warningset_map()) {
    _this->_impl_.warningset_map_ = new ::TST::ImportWarningSetByCellRefArchive(*from._impl_.warningset_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteFormulasForTransposeArchive)
}

inline void CommandRewriteFormulasForTransposeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}
    , decltype(_impl_.warningset_map_){nullptr}
  };
}

CommandRewriteFormulasForTransposeArchive::~CommandRewriteFormulasForTransposeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteFormulasForTransposeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewriteFormulasForTransposeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
  if (this != internal_default_instance()) delete _impl_.formulas_to_rewrite_;
  if (this != internal_default_instance()) delete _impl_.warningset_map_;
}

void CommandRewriteFormulasForTransposeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewriteFormulasForTransposeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteFormulasForTransposeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.formulas_to_rewrite_ != nullptr);
      _impl_.formulas_to_rewrite_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.warningset_map_ != nullptr);
      _impl_.warningset_map_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteFormulasForTransposeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ImportWarningSetByCellRefArchive warningset_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_warningset_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewriteFormulasForTransposeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteFormulasForTransposeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::formulas_to_rewrite(this),
        _Internal::formulas_to_rewrite(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ImportWarningSetByCellRefArchive warningset_map = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::warningset_map(this),
        _Internal::warningset_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteFormulasForTransposeArchive)
  return target;
}

size_t CommandRewriteFormulasForTransposeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteFormulasForTransposeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);
  }

  if (_internal_has_formulas_to_rewrite()) {
    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);
  }

  return total_size;
}
size_t CommandRewriteFormulasForTransposeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteFormulasForTransposeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);

    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.ImportWarningSetByCellRefArchive warningset_map = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.warningset_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteFormulasForTransposeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewriteFormulasForTransposeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteFormulasForTransposeArchive::GetClassData() const { return &_class_data_; }


void CommandRewriteFormulasForTransposeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewriteFormulasForTransposeArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewriteFormulasForTransposeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteFormulasForTransposeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rewrite_spec()->::TST::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(
          from._internal_formulas_to_rewrite());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_warningset_map()->::TST::ImportWarningSetByCellRefArchive::MergeFrom(
          from._internal_warningset_map());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteFormulasForTransposeArchive::CopyFrom(const CommandRewriteFormulasForTransposeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteFormulasForTransposeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFormulasForTransposeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!_impl_.formulas_to_rewrite_->IsInitialized()) return false;
  }
  if (_internal_has_warningset_map()) {
    if (!_impl_.warningset_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFormulasForTransposeArchive::InternalSwap(CommandRewriteFormulasForTransposeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteFormulasForTransposeArchive, _impl_.warningset_map_)
      + sizeof(CommandRewriteFormulasForTransposeArchive::_impl_.warningset_map_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteFormulasForTransposeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteFormulasForTransposeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[55]);
}

// ===================================================================

class CommandRewriteTableFormulasForRewriteSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteTableFormulasForRewriteSpecArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteTableFormulasForRewriteSpecArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteTableFormulasForRewriteSpecArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewriteTableFormulasForRewriteSpecArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteTableFormulasForRewriteSpecArchive::_Internal::super(const CommandRewriteTableFormulasForRewriteSpecArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::FormulaRewriteSpecArchive&
CommandRewriteTableFormulasForRewriteSpecArchive::_Internal::rewrite_spec(const CommandRewriteTableFormulasForRewriteSpecArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewriteTableFormulasForRewriteSpecArchive::_Internal::formulas_to_rewrite(const CommandRewriteTableFormulasForRewriteSpecArchive* msg) {
  return *msg->_impl_.formulas_to_rewrite_;
}
void CommandRewriteTableFormulasForRewriteSpecArchive::clear_formulas_to_rewrite() {
  if (_impl_.formulas_to_rewrite_ != nullptr) _impl_.formulas_to_rewrite_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandRewriteTableFormulasForRewriteSpecArchive::CommandRewriteTableFormulasForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
}
CommandRewriteTableFormulasForRewriteSpecArchive::CommandRewriteTableFormulasForRewriteSpecArchive(const CommandRewriteTableFormulasForRewriteSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewriteTableFormulasForRewriteSpecArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TST::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  if (from._internal_has_formulas_to_rewrite()) {
    _this->_impl_.formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from._impl_.formulas_to_rewrite_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
}

inline void CommandRewriteTableFormulasForRewriteSpecArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}
  };
}

CommandRewriteTableFormulasForRewriteSpecArchive::~CommandRewriteTableFormulasForRewriteSpecArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewriteTableFormulasForRewriteSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
  if (this != internal_default_instance()) delete _impl_.formulas_to_rewrite_;
}

void CommandRewriteTableFormulasForRewriteSpecArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewriteTableFormulasForRewriteSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.formulas_to_rewrite_ != nullptr);
      _impl_.formulas_to_rewrite_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteTableFormulasForRewriteSpecArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewriteTableFormulasForRewriteSpecArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::formulas_to_rewrite(this),
        _Internal::formulas_to_rewrite(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  return target;
}

size_t CommandRewriteTableFormulasForRewriteSpecArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);
  }

  if (_internal_has_formulas_to_rewrite()) {
    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);
  }

  return total_size;
}
size_t CommandRewriteTableFormulasForRewriteSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);

    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteTableFormulasForRewriteSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewriteTableFormulasForRewriteSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteTableFormulasForRewriteSpecArchive::GetClassData() const { return &_class_data_; }


void CommandRewriteTableFormulasForRewriteSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewriteTableFormulasForRewriteSpecArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewriteTableFormulasForRewriteSpecArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rewrite_spec()->::TST::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(
          from._internal_formulas_to_rewrite());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteTableFormulasForRewriteSpecArchive::CopyFrom(const CommandRewriteTableFormulasForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteTableFormulasForRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteTableFormulasForRewriteSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!_impl_.formulas_to_rewrite_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteTableFormulasForRewriteSpecArchive::InternalSwap(CommandRewriteTableFormulasForRewriteSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteTableFormulasForRewriteSpecArchive, _impl_.formulas_to_rewrite_)
      + sizeof(CommandRewriteTableFormulasForRewriteSpecArchive::_impl_.formulas_to_rewrite_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteTableFormulasForRewriteSpecArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteTableFormulasForRewriteSpecArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[56]);
}

// ===================================================================

class CommandRewriteMergeFormulasArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteMergeFormulasArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteMergeFormulasArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteMergeFormulasArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewriteMergeFormulasArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteMergeFormulasArchive::_Internal::super(const CommandRewriteMergeFormulasArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::FormulaRewriteSpecArchive&
CommandRewriteMergeFormulasArchive::_Internal::rewrite_spec(const CommandRewriteMergeFormulasArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewriteMergeFormulasArchive::_Internal::formulas_to_rewrite(const CommandRewriteMergeFormulasArchive* msg) {
  return *msg->_impl_.formulas_to_rewrite_;
}
void CommandRewriteMergeFormulasArchive::clear_formulas_to_rewrite() {
  if (_impl_.formulas_to_rewrite_ != nullptr) _impl_.formulas_to_rewrite_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandRewriteMergeFormulasArchive::CommandRewriteMergeFormulasArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteMergeFormulasArchive)
}
CommandRewriteMergeFormulasArchive::CommandRewriteMergeFormulasArchive(const CommandRewriteMergeFormulasArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewriteMergeFormulasArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TST::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  if (from._internal_has_formulas_to_rewrite()) {
    _this->_impl_.formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from._impl_.formulas_to_rewrite_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteMergeFormulasArchive)
}

inline void CommandRewriteMergeFormulasArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}
  };
}

CommandRewriteMergeFormulasArchive::~CommandRewriteMergeFormulasArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteMergeFormulasArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewriteMergeFormulasArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
  if (this != internal_default_instance()) delete _impl_.formulas_to_rewrite_;
}

void CommandRewriteMergeFormulasArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewriteMergeFormulasArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteMergeFormulasArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.formulas_to_rewrite_ != nullptr);
      _impl_.formulas_to_rewrite_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteMergeFormulasArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewriteMergeFormulasArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteMergeFormulasArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::formulas_to_rewrite(this),
        _Internal::formulas_to_rewrite(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteMergeFormulasArchive)
  return target;
}

size_t CommandRewriteMergeFormulasArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteMergeFormulasArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);
  }

  if (_internal_has_formulas_to_rewrite()) {
    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);
  }

  return total_size;
}
size_t CommandRewriteMergeFormulasArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteMergeFormulasArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);

    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteMergeFormulasArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewriteMergeFormulasArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteMergeFormulasArchive::GetClassData() const { return &_class_data_; }


void CommandRewriteMergeFormulasArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewriteMergeFormulasArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewriteMergeFormulasArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteMergeFormulasArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rewrite_spec()->::TST::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(
          from._internal_formulas_to_rewrite());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteMergeFormulasArchive::CopyFrom(const CommandRewriteMergeFormulasArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteMergeFormulasArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteMergeFormulasArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!_impl_.formulas_to_rewrite_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteMergeFormulasArchive::InternalSwap(CommandRewriteMergeFormulasArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteMergeFormulasArchive, _impl_.formulas_to_rewrite_)
      + sizeof(CommandRewriteMergeFormulasArchive::_impl_.formulas_to_rewrite_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteMergeFormulasArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteMergeFormulasArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[57]);
}

// ===================================================================

class CommandRewriteCategoryFormulasArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteCategoryFormulasArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteCategoryFormulasArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteCategoryFormulasArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewriteCategoryFormulasArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteCategoryFormulasArchive::_Internal::super(const CommandRewriteCategoryFormulasArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::FormulaRewriteSpecArchive&
CommandRewriteCategoryFormulasArchive::_Internal::rewrite_spec(const CommandRewriteCategoryFormulasArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewriteCategoryFormulasArchive::_Internal::formulas_to_rewrite(const CommandRewriteCategoryFormulasArchive* msg) {
  return *msg->_impl_.formulas_to_rewrite_;
}
void CommandRewriteCategoryFormulasArchive::clear_formulas_to_rewrite() {
  if (_impl_.formulas_to_rewrite_ != nullptr) _impl_.formulas_to_rewrite_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandRewriteCategoryFormulasArchive::CommandRewriteCategoryFormulasArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteCategoryFormulasArchive)
}
CommandRewriteCategoryFormulasArchive::CommandRewriteCategoryFormulasArchive(const CommandRewriteCategoryFormulasArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewriteCategoryFormulasArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TST::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  if (from._internal_has_formulas_to_rewrite()) {
    _this->_impl_.formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from._impl_.formulas_to_rewrite_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteCategoryFormulasArchive)
}

inline void CommandRewriteCategoryFormulasArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}
  };
}

CommandRewriteCategoryFormulasArchive::~CommandRewriteCategoryFormulasArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteCategoryFormulasArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewriteCategoryFormulasArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
  if (this != internal_default_instance()) delete _impl_.formulas_to_rewrite_;
}

void CommandRewriteCategoryFormulasArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewriteCategoryFormulasArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteCategoryFormulasArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.formulas_to_rewrite_ != nullptr);
      _impl_.formulas_to_rewrite_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteCategoryFormulasArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewriteCategoryFormulasArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteCategoryFormulasArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::formulas_to_rewrite(this),
        _Internal::formulas_to_rewrite(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteCategoryFormulasArchive)
  return target;
}

size_t CommandRewriteCategoryFormulasArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteCategoryFormulasArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);
  }

  if (_internal_has_formulas_to_rewrite()) {
    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);
  }

  return total_size;
}
size_t CommandRewriteCategoryFormulasArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteCategoryFormulasArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);

    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteCategoryFormulasArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewriteCategoryFormulasArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteCategoryFormulasArchive::GetClassData() const { return &_class_data_; }


void CommandRewriteCategoryFormulasArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewriteCategoryFormulasArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewriteCategoryFormulasArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteCategoryFormulasArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rewrite_spec()->::TST::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(
          from._internal_formulas_to_rewrite());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteCategoryFormulasArchive::CopyFrom(const CommandRewriteCategoryFormulasArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteCategoryFormulasArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteCategoryFormulasArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!_impl_.formulas_to_rewrite_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteCategoryFormulasArchive::InternalSwap(CommandRewriteCategoryFormulasArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteCategoryFormulasArchive, _impl_.formulas_to_rewrite_)
      + sizeof(CommandRewriteCategoryFormulasArchive::_impl_.formulas_to_rewrite_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteCategoryFormulasArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteCategoryFormulasArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[58]);
}

// ===================================================================

class CommandRewriteFilterFormulasForTableResizeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteFilterFormulasForTableResizeArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteFilterFormulasForTableResizeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteFilterFormulasForTableResizeArchive::_Internal::super(const CommandRewriteFilterFormulasForTableResizeArchive* msg) {
  return *msg->_impl_.super_;
}
CommandRewriteFilterFormulasForTableResizeArchive::CommandRewriteFilterFormulasForTableResizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteFilterFormulasForTableResizeArchive)
}
CommandRewriteFilterFormulasForTableResizeArchive::CommandRewriteFilterFormulasForTableResizeArchive(const CommandRewriteFilterFormulasForTableResizeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewriteFilterFormulasForTableResizeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteFilterFormulasForTableResizeArchive)
}

inline void CommandRewriteFilterFormulasForTableResizeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

CommandRewriteFilterFormulasForTableResizeArchive::~CommandRewriteFilterFormulasForTableResizeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewriteFilterFormulasForTableResizeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandRewriteFilterFormulasForTableResizeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewriteFilterFormulasForTableResizeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteFilterFormulasForTableResizeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewriteFilterFormulasForTableResizeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  return target;
}

size_t CommandRewriteFilterFormulasForTableResizeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteFilterFormulasForTableResizeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewriteFilterFormulasForTableResizeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteFilterFormulasForTableResizeArchive::GetClassData() const { return &_class_data_; }


void CommandRewriteFilterFormulasForTableResizeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewriteFilterFormulasForTableResizeArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewriteFilterFormulasForTableResizeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteFilterFormulasForTableResizeArchive::CopyFrom(const CommandRewriteFilterFormulasForTableResizeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteFilterFormulasForTableResizeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFilterFormulasForTableResizeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFilterFormulasForTableResizeArchive::InternalSwap(CommandRewriteFilterFormulasForTableResizeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteFilterFormulasForTableResizeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[59]);
}

// ===================================================================

class CommandRewriteFilterFormulasForRewriteSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteFilterFormulasForRewriteSpecArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& filter_set(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg);
  static void set_has_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteFilterFormulasForRewriteSpecArchive::_Internal::super(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandRewriteFilterFormulasForRewriteSpecArchive::_Internal::filter_set(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg) {
  return *msg->_impl_.filter_set_;
}
const ::TST::FormulaRewriteSpecArchive&
CommandRewriteFilterFormulasForRewriteSpecArchive::_Internal::rewrite_spec(const CommandRewriteFilterFormulasForRewriteSpecArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
void CommandRewriteFilterFormulasForRewriteSpecArchive::clear_filter_set() {
  if (_impl_.filter_set_ != nullptr) _impl_.filter_set_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandRewriteFilterFormulasForRewriteSpecArchive::CommandRewriteFilterFormulasForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
}
CommandRewriteFilterFormulasForRewriteSpecArchive::CommandRewriteFilterFormulasForRewriteSpecArchive(const CommandRewriteFilterFormulasForRewriteSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewriteFilterFormulasForRewriteSpecArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.filter_set_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_filter_set()) {
    _this->_impl_.filter_set_ = new ::TSP::Reference(*from._impl_.filter_set_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TST::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
}

inline void CommandRewriteFilterFormulasForRewriteSpecArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.filter_set_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
  };
}

CommandRewriteFilterFormulasForRewriteSpecArchive::~CommandRewriteFilterFormulasForRewriteSpecArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewriteFilterFormulasForRewriteSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.filter_set_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
}

void CommandRewriteFilterFormulasForRewriteSpecArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewriteFilterFormulasForRewriteSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.filter_set_ != nullptr);
      _impl_.filter_set_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteFilterFormulasForRewriteSpecArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference filter_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.FormulaRewriteSpecArchive rewrite_spec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewriteFilterFormulasForRewriteSpecArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference filter_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::filter_set(this),
        _Internal::filter_set(this).GetCachedSize(), target, stream);
  }

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  return target;
}

size_t CommandRewriteFilterFormulasForRewriteSpecArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_filter_set()) {
    // required .TSP.Reference filter_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_set_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);
  }

  return total_size;
}
size_t CommandRewriteFilterFormulasForRewriteSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference filter_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_set_);

    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteFilterFormulasForRewriteSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewriteFilterFormulasForRewriteSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteFilterFormulasForRewriteSpecArchive::GetClassData() const { return &_class_data_; }


void CommandRewriteFilterFormulasForRewriteSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewriteFilterFormulasForRewriteSpecArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewriteFilterFormulasForRewriteSpecArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_filter_set()->::TSP::Reference::MergeFrom(
          from._internal_filter_set());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_rewrite_spec()->::TST::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteFilterFormulasForRewriteSpecArchive::CopyFrom(const CommandRewriteFilterFormulasForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteFilterFormulasForRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteFilterFormulasForRewriteSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_filter_set()) {
    if (!_impl_.filter_set_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteFilterFormulasForRewriteSpecArchive::InternalSwap(CommandRewriteFilterFormulasForRewriteSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteFilterFormulasForRewriteSpecArchive, _impl_.rewrite_spec_)
      + sizeof(CommandRewriteFilterFormulasForRewriteSpecArchive::_impl_.rewrite_spec_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteFilterFormulasForRewriteSpecArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteFilterFormulasForRewriteSpecArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[60]);
}

// ===================================================================

class CommandRewriteConditionalStylesForRewriteSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteConditionalStylesForRewriteSpecArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::ExpandedCellRefObjectMapArchive& conditional_style_sets(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg);
  static void set_has_conditional_style_sets(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteConditionalStylesForRewriteSpecArchive::_Internal::super(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::FormulaRewriteSpecArchive&
CommandRewriteConditionalStylesForRewriteSpecArchive::_Internal::rewrite_spec(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewriteConditionalStylesForRewriteSpecArchive::_Internal::formulas_to_rewrite(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg) {
  return *msg->_impl_.formulas_to_rewrite_;
}
const ::TSCE::ExpandedCellRefObjectMapArchive&
CommandRewriteConditionalStylesForRewriteSpecArchive::_Internal::conditional_style_sets(const CommandRewriteConditionalStylesForRewriteSpecArchive* msg) {
  return *msg->_impl_.conditional_style_sets_;
}
void CommandRewriteConditionalStylesForRewriteSpecArchive::clear_formulas_to_rewrite() {
  if (_impl_.formulas_to_rewrite_ != nullptr) _impl_.formulas_to_rewrite_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandRewriteConditionalStylesForRewriteSpecArchive::clear_conditional_style_sets() {
  if (_impl_.conditional_style_sets_ != nullptr) _impl_.conditional_style_sets_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandRewriteConditionalStylesForRewriteSpecArchive::CommandRewriteConditionalStylesForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
}
CommandRewriteConditionalStylesForRewriteSpecArchive::CommandRewriteConditionalStylesForRewriteSpecArchive(const CommandRewriteConditionalStylesForRewriteSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewriteConditionalStylesForRewriteSpecArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}
    , decltype(_impl_.conditional_style_sets_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TST::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  if (from._internal_has_formulas_to_rewrite()) {
    _this->_impl_.formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from._impl_.formulas_to_rewrite_);
  }
  if (from._internal_has_conditional_style_sets()) {
    _this->_impl_.conditional_style_sets_ = new ::TSCE::ExpandedCellRefObjectMapArchive(*from._impl_.conditional_style_sets_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
}

inline void CommandRewriteConditionalStylesForRewriteSpecArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}
    , decltype(_impl_.conditional_style_sets_){nullptr}
  };
}

CommandRewriteConditionalStylesForRewriteSpecArchive::~CommandRewriteConditionalStylesForRewriteSpecArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewriteConditionalStylesForRewriteSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
  if (this != internal_default_instance()) delete _impl_.formulas_to_rewrite_;
  if (this != internal_default_instance()) delete _impl_.conditional_style_sets_;
}

void CommandRewriteConditionalStylesForRewriteSpecArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewriteConditionalStylesForRewriteSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.formulas_to_rewrite_ != nullptr);
      _impl_.formulas_to_rewrite_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.conditional_style_sets_ != nullptr);
      _impl_.conditional_style_sets_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteConditionalStylesForRewriteSpecArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.ExpandedCellRefObjectMapArchive conditional_style_sets = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_conditional_style_sets(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewriteConditionalStylesForRewriteSpecArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::formulas_to_rewrite(this),
        _Internal::formulas_to_rewrite(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.ExpandedCellRefObjectMapArchive conditional_style_sets = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::conditional_style_sets(this),
        _Internal::conditional_style_sets(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  return target;
}

size_t CommandRewriteConditionalStylesForRewriteSpecArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);
  }

  return total_size;
}
size_t CommandRewriteConditionalStylesForRewriteSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formulas_to_rewrite_);
    }

    // optional .TSCE.ExpandedCellRefObjectMapArchive conditional_style_sets = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.conditional_style_sets_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteConditionalStylesForRewriteSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewriteConditionalStylesForRewriteSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteConditionalStylesForRewriteSpecArchive::GetClassData() const { return &_class_data_; }


void CommandRewriteConditionalStylesForRewriteSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewriteConditionalStylesForRewriteSpecArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewriteConditionalStylesForRewriteSpecArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rewrite_spec()->::TST::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(
          from._internal_formulas_to_rewrite());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_conditional_style_sets()->::TSCE::ExpandedCellRefObjectMapArchive::MergeFrom(
          from._internal_conditional_style_sets());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteConditionalStylesForRewriteSpecArchive::CopyFrom(const CommandRewriteConditionalStylesForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteConditionalStylesForRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteConditionalStylesForRewriteSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!_impl_.formulas_to_rewrite_->IsInitialized()) return false;
  }
  if (_internal_has_conditional_style_sets()) {
    if (!_impl_.conditional_style_sets_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteConditionalStylesForRewriteSpecArchive::InternalSwap(CommandRewriteConditionalStylesForRewriteSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteConditionalStylesForRewriteSpecArchive, _impl_.conditional_style_sets_)
      + sizeof(CommandRewriteConditionalStylesForRewriteSpecArchive::_impl_.conditional_style_sets_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteConditionalStylesForRewriteSpecArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteConditionalStylesForRewriteSpecArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[61]);
}

// ===================================================================

class CommandRewritePivotOwnerFormulasArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewritePivotOwnerFormulasArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewritePivotOwnerFormulasArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewritePivotOwnerFormulasArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewritePivotOwnerFormulasArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewritePivotOwnerFormulasArchive::_Internal::super(const CommandRewritePivotOwnerFormulasArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::FormulaRewriteSpecArchive&
CommandRewritePivotOwnerFormulasArchive::_Internal::rewrite_spec(const CommandRewritePivotOwnerFormulasArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewritePivotOwnerFormulasArchive::_Internal::formulas_to_rewrite(const CommandRewritePivotOwnerFormulasArchive* msg) {
  return *msg->_impl_.formulas_to_rewrite_;
}
void CommandRewritePivotOwnerFormulasArchive::clear_formulas_to_rewrite() {
  if (_impl_.formulas_to_rewrite_ != nullptr) _impl_.formulas_to_rewrite_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandRewritePivotOwnerFormulasArchive::CommandRewritePivotOwnerFormulasArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewritePivotOwnerFormulasArchive)
}
CommandRewritePivotOwnerFormulasArchive::CommandRewritePivotOwnerFormulasArchive(const CommandRewritePivotOwnerFormulasArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewritePivotOwnerFormulasArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TST::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  if (from._internal_has_formulas_to_rewrite()) {
    _this->_impl_.formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from._impl_.formulas_to_rewrite_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewritePivotOwnerFormulasArchive)
}

inline void CommandRewritePivotOwnerFormulasArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}
  };
}

CommandRewritePivotOwnerFormulasArchive::~CommandRewritePivotOwnerFormulasArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewritePivotOwnerFormulasArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewritePivotOwnerFormulasArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
  if (this != internal_default_instance()) delete _impl_.formulas_to_rewrite_;
}

void CommandRewritePivotOwnerFormulasArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewritePivotOwnerFormulasArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewritePivotOwnerFormulasArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.formulas_to_rewrite_ != nullptr);
      _impl_.formulas_to_rewrite_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewritePivotOwnerFormulasArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewritePivotOwnerFormulasArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewritePivotOwnerFormulasArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::formulas_to_rewrite(this),
        _Internal::formulas_to_rewrite(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewritePivotOwnerFormulasArchive)
  return target;
}

size_t CommandRewritePivotOwnerFormulasArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewritePivotOwnerFormulasArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);
  }

  if (_internal_has_formulas_to_rewrite()) {
    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);
  }

  return total_size;
}
size_t CommandRewritePivotOwnerFormulasArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewritePivotOwnerFormulasArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);

    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewritePivotOwnerFormulasArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewritePivotOwnerFormulasArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewritePivotOwnerFormulasArchive::GetClassData() const { return &_class_data_; }


void CommandRewritePivotOwnerFormulasArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewritePivotOwnerFormulasArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewritePivotOwnerFormulasArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewritePivotOwnerFormulasArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rewrite_spec()->::TST::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(
          from._internal_formulas_to_rewrite());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewritePivotOwnerFormulasArchive::CopyFrom(const CommandRewritePivotOwnerFormulasArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewritePivotOwnerFormulasArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewritePivotOwnerFormulasArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!_impl_.formulas_to_rewrite_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewritePivotOwnerFormulasArchive::InternalSwap(CommandRewritePivotOwnerFormulasArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewritePivotOwnerFormulasArchive, _impl_.formulas_to_rewrite_)
      + sizeof(CommandRewritePivotOwnerFormulasArchive::_impl_.formulas_to_rewrite_)
      - PROTOBUF_FIELD_OFFSET(CommandRewritePivotOwnerFormulasArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewritePivotOwnerFormulasArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[62]);
}

// ===================================================================

class CommandMergeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandMergeArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandMergeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uid_list(const CommandMergeArchive* msg);
  static void set_has_cell_uid_list(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_cell_map(const CommandMergeArchive* msg);
  static void set_has_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& undo_formula_rewrite_command(const CommandMergeArchive* msg);
  static void set_has_undo_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_merge_owner_rollback(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::Reference& commit_cell_map(const CommandMergeArchive* msg);
  static void set_has_commit_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandMergeArchive::_Internal::super(const CommandMergeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::CellUIDListArchive&
CommandMergeArchive::_Internal::cell_uid_list(const CommandMergeArchive* msg) {
  return *msg->_impl_.cell_uid_list_;
}
const ::TSP::Reference&
CommandMergeArchive::_Internal::undo_cell_map(const CommandMergeArchive* msg) {
  return *msg->_impl_.undo_cell_map_;
}
const ::TSP::Reference&
CommandMergeArchive::_Internal::undo_formula_rewrite_command(const CommandMergeArchive* msg) {
  return *msg->_impl_.undo_formula_rewrite_command_;
}
const ::TSP::Reference&
CommandMergeArchive::_Internal::commit_cell_map(const CommandMergeArchive* msg) {
  return *msg->_impl_.commit_cell_map_;
}
void CommandMergeArchive::clear_cell_uid_list() {
  if (_impl_.cell_uid_list_ != nullptr) _impl_.cell_uid_list_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandMergeArchive::clear_undo_cell_map() {
  if (_impl_.undo_cell_map_ != nullptr) _impl_.undo_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandMergeArchive::clear_undo_formula_rewrite_command() {
  if (_impl_.undo_formula_rewrite_command_ != nullptr) _impl_.undo_formula_rewrite_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandMergeArchive::clear_commit_cell_map() {
  if (_impl_.commit_cell_map_ != nullptr) _impl_.commit_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CommandMergeArchive::CommandMergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandMergeArchive)
}
CommandMergeArchive::CommandMergeArchive(const CommandMergeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandMergeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.undo_cell_map_){nullptr}
    , decltype(_impl_.undo_formula_rewrite_command_){nullptr}
    , decltype(_impl_.commit_cell_map_){nullptr}
    , decltype(_impl_.merge_owner_rollback_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_uid_list()) {
    _this->_impl_.cell_uid_list_ = new ::TST::CellUIDListArchive(*from._impl_.cell_uid_list_);
  }
  if (from._internal_has_undo_cell_map()) {
    _this->_impl_.undo_cell_map_ = new ::TSP::Reference(*from._impl_.undo_cell_map_);
  }
  if (from._internal_has_undo_formula_rewrite_command()) {
    _this->_impl_.undo_formula_rewrite_command_ = new ::TSP::Reference(*from._impl_.undo_formula_rewrite_command_);
  }
  if (from._internal_has_commit_cell_map()) {
    _this->_impl_.commit_cell_map_ = new ::TSP::Reference(*from._impl_.commit_cell_map_);
  }
  _this->_impl_.merge_owner_rollback_ = from._impl_.merge_owner_rollback_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandMergeArchive)
}

inline void CommandMergeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uid_list_){nullptr}
    , decltype(_impl_.undo_cell_map_){nullptr}
    , decltype(_impl_.undo_formula_rewrite_command_){nullptr}
    , decltype(_impl_.commit_cell_map_){nullptr}
    , decltype(_impl_.merge_owner_rollback_){0u}
  };
}

CommandMergeArchive::~CommandMergeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandMergeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandMergeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_uid_list_;
  if (this != internal_default_instance()) delete _impl_.undo_cell_map_;
  if (this != internal_default_instance()) delete _impl_.undo_formula_rewrite_command_;
  if (this != internal_default_instance()) delete _impl_.commit_cell_map_;
}

void CommandMergeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandMergeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandMergeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_uid_list_ != nullptr);
      _impl_.cell_uid_list_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.undo_cell_map_ != nullptr);
      _impl_.undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.undo_formula_rewrite_command_ != nullptr);
      _impl_.undo_formula_rewrite_command_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.commit_cell_map_ != nullptr);
      _impl_.commit_cell_map_->Clear();
    }
  }
  _impl_.merge_owner_rollback_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMergeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.CellUIDListArchive cell_uid_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_formula_rewrite_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 merge_owner_rollback = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_merge_owner_rollback(&has_bits);
          _impl_.merge_owner_rollback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference commit_cell_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandMergeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandMergeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.CellUIDListArchive cell_uid_list = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_uid_list(this),
        _Internal::cell_uid_list(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_cell_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::undo_cell_map(this),
        _Internal::undo_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::undo_formula_rewrite_command(this),
        _Internal::undo_formula_rewrite_command(this).GetCachedSize(), target, stream);
  }

  // optional uint32 merge_owner_rollback = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_merge_owner_rollback(), target);
  }

  // optional .TSP.Reference commit_cell_map = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::commit_cell_map(this),
        _Internal::commit_cell_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandMergeArchive)
  return target;
}

size_t CommandMergeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandMergeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_cell_uid_list()) {
    // required .TST.CellUIDListArchive cell_uid_list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uid_list_);
  }

  return total_size;
}
size_t CommandMergeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandMergeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.CellUIDListArchive cell_uid_list = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uid_list_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSP.Reference undo_cell_map = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_cell_map_);
    }

    // optional .TSP.Reference undo_formula_rewrite_command = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_formula_rewrite_command_);
    }

    // optional .TSP.Reference commit_cell_map = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.commit_cell_map_);
    }

    // optional uint32 merge_owner_rollback = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_merge_owner_rollback());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandMergeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandMergeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandMergeArchive::GetClassData() const { return &_class_data_; }


void CommandMergeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandMergeArchive*>(&to_msg);
  auto& from = static_cast<const CommandMergeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandMergeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_uid_list()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_cell_uid_list());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_undo_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_cell_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_undo_formula_rewrite_command()->::TSP::Reference::MergeFrom(
          from._internal_undo_formula_rewrite_command());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_commit_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_commit_cell_map());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.merge_owner_rollback_ = from._impl_.merge_owner_rollback_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandMergeArchive::CopyFrom(const CommandMergeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandMergeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMergeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid_list()) {
    if (!_impl_.cell_uid_list_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_map()) {
    if (!_impl_.undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_formula_rewrite_command()) {
    if (!_impl_.undo_formula_rewrite_command_->IsInitialized()) return false;
  }
  if (_internal_has_commit_cell_map()) {
    if (!_impl_.commit_cell_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandMergeArchive::InternalSwap(CommandMergeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMergeArchive, _impl_.merge_owner_rollback_)
      + sizeof(CommandMergeArchive::_impl_.merge_owner_rollback_)
      - PROTOBUF_FIELD_OFFSET(CommandMergeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMergeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[63]);
}

// ===================================================================

class CommandInverseMergeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandInverseMergeArchive>()._impl_._has_bits_);
  static const ::TST::CommandApplyCellMapArchive& super(const CommandInverseMergeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDCoordArchive& merge_source_cell_uid(const CommandInverseMergeArchive* msg);
  static void set_has_merge_source_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::CommandApplyCellMapArchive&
CommandInverseMergeArchive::_Internal::super(const CommandInverseMergeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDCoordArchive&
CommandInverseMergeArchive::_Internal::merge_source_cell_uid(const CommandInverseMergeArchive* msg) {
  return *msg->_impl_.merge_source_cell_uid_;
}
void CommandInverseMergeArchive::clear_merge_source_cell_uid() {
  if (_impl_.merge_source_cell_uid_ != nullptr) _impl_.merge_source_cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandInverseMergeArchive::CommandInverseMergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandInverseMergeArchive)
}
CommandInverseMergeArchive::CommandInverseMergeArchive(const CommandInverseMergeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandInverseMergeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.merge_source_cell_uid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::CommandApplyCellMapArchive(*from._impl_.super_);
  }
  if (from._internal_has_merge_source_cell_uid()) {
    _this->_impl_.merge_source_cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.merge_source_cell_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandInverseMergeArchive)
}

inline void CommandInverseMergeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.merge_source_cell_uid_){nullptr}
  };
}

CommandInverseMergeArchive::~CommandInverseMergeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandInverseMergeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandInverseMergeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.merge_source_cell_uid_;
}

void CommandInverseMergeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandInverseMergeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandInverseMergeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.merge_source_cell_uid_ != nullptr);
      _impl_.merge_source_cell_uid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandInverseMergeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.CommandApplyCellMapArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive merge_source_cell_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_merge_source_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandInverseMergeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandInverseMergeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.CommandApplyCellMapArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDCoordArchive merge_source_cell_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::merge_source_cell_uid(this),
        _Internal::merge_source_cell_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandInverseMergeArchive)
  return target;
}

size_t CommandInverseMergeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandInverseMergeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.CommandApplyCellMapArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_merge_source_cell_uid()) {
    // required .TSP.UUIDCoordArchive merge_source_cell_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.merge_source_cell_uid_);
  }

  return total_size;
}
size_t CommandInverseMergeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandInverseMergeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.CommandApplyCellMapArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDCoordArchive merge_source_cell_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.merge_source_cell_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandInverseMergeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandInverseMergeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandInverseMergeArchive::GetClassData() const { return &_class_data_; }


void CommandInverseMergeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandInverseMergeArchive*>(&to_msg);
  auto& from = static_cast<const CommandInverseMergeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandInverseMergeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::CommandApplyCellMapArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_merge_source_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_merge_source_cell_uid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandInverseMergeArchive::CopyFrom(const CommandInverseMergeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandInverseMergeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandInverseMergeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_merge_source_cell_uid()) {
    if (!_impl_.merge_source_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandInverseMergeArchive::InternalSwap(CommandInverseMergeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandInverseMergeArchive, _impl_.merge_source_cell_uid_)
      + sizeof(CommandInverseMergeArchive::_impl_.merge_source_cell_uid_)
      - PROTOBUF_FIELD_OFFSET(CommandInverseMergeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandInverseMergeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[64]);
}

// ===================================================================

class CommandUnmergeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandUnmergeArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandUnmergeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& undo_cell_map(const CommandUnmergeArchive* msg);
  static void set_has_undo_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_formula_rewrite_command(const CommandUnmergeArchive* msg);
  static void set_has_undo_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandUnmergeArchive::_Internal::super(const CommandUnmergeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandUnmergeArchive::_Internal::undo_cell_map(const CommandUnmergeArchive* msg) {
  return *msg->_impl_.undo_cell_map_;
}
const ::TSP::Reference&
CommandUnmergeArchive::_Internal::undo_formula_rewrite_command(const CommandUnmergeArchive* msg) {
  return *msg->_impl_.undo_formula_rewrite_command_;
}
void CommandUnmergeArchive::clear_unmerge_uid_ranges() {
  _impl_.unmerge_uid_ranges_.Clear();
}
void CommandUnmergeArchive::clear_undo_cell_map() {
  if (_impl_.undo_cell_map_ != nullptr) _impl_.undo_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandUnmergeArchive::clear_undo_formula_rewrite_command() {
  if (_impl_.undo_formula_rewrite_command_ != nullptr) _impl_.undo_formula_rewrite_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandUnmergeArchive::CommandUnmergeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandUnmergeArchive)
}
CommandUnmergeArchive::CommandUnmergeArchive(const CommandUnmergeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandUnmergeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unmerge_uid_ranges_){from._impl_.unmerge_uid_ranges_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.undo_cell_map_){nullptr}
    , decltype(_impl_.undo_formula_rewrite_command_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_undo_cell_map()) {
    _this->_impl_.undo_cell_map_ = new ::TSP::Reference(*from._impl_.undo_cell_map_);
  }
  if (from._internal_has_undo_formula_rewrite_command()) {
    _this->_impl_.undo_formula_rewrite_command_ = new ::TSP::Reference(*from._impl_.undo_formula_rewrite_command_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandUnmergeArchive)
}

inline void CommandUnmergeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unmerge_uid_ranges_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.undo_cell_map_){nullptr}
    , decltype(_impl_.undo_formula_rewrite_command_){nullptr}
  };
}

CommandUnmergeArchive::~CommandUnmergeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandUnmergeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandUnmergeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unmerge_uid_ranges_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.undo_cell_map_;
  if (this != internal_default_instance()) delete _impl_.undo_formula_rewrite_command_;
}

void CommandUnmergeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandUnmergeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandUnmergeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unmerge_uid_ranges_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.undo_cell_map_ != nullptr);
      _impl_.undo_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.undo_formula_rewrite_command_ != nullptr);
      _impl_.undo_formula_rewrite_command_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandUnmergeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unmerge_uid_ranges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_formula_rewrite_command = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandUnmergeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandUnmergeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_unmerge_uid_ranges_size()); i < n; i++) {
    const auto& repfield = this->_internal_unmerge_uid_ranges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_cell_map = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::undo_cell_map(this),
        _Internal::undo_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::undo_formula_rewrite_command(this),
        _Internal::undo_formula_rewrite_command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandUnmergeArchive)
  return target;
}

size_t CommandUnmergeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandUnmergeArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUIDRectArchive unmerge_uid_ranges = 2;
  total_size += 1UL * this->_internal_unmerge_uid_ranges_size();
  for (const auto& msg : this->_impl_.unmerge_uid_ranges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TSP.Reference undo_cell_map = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_cell_map_);
    }

    // optional .TSP.Reference undo_formula_rewrite_command = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_formula_rewrite_command_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandUnmergeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandUnmergeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandUnmergeArchive::GetClassData() const { return &_class_data_; }


void CommandUnmergeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandUnmergeArchive*>(&to_msg);
  auto& from = static_cast<const CommandUnmergeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandUnmergeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.unmerge_uid_ranges_.MergeFrom(from._impl_.unmerge_uid_ranges_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_undo_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_cell_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_undo_formula_rewrite_command()->::TSP::Reference::MergeFrom(
          from._internal_undo_formula_rewrite_command());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandUnmergeArchive::CopyFrom(const CommandUnmergeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandUnmergeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandUnmergeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.unmerge_uid_ranges_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_map()) {
    if (!_impl_.undo_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_formula_rewrite_command()) {
    if (!_impl_.undo_formula_rewrite_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandUnmergeArchive::InternalSwap(CommandUnmergeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.unmerge_uid_ranges_.InternalSwap(&other->_impl_.unmerge_uid_ranges_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandUnmergeArchive, _impl_.undo_formula_rewrite_command_)
      + sizeof(CommandUnmergeArchive::_impl_.undo_formula_rewrite_command_)
      - PROTOBUF_FIELD_OFFSET(CommandUnmergeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandUnmergeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[65]);
}

// ===================================================================

class CommandChooseTableIdRemapperArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandChooseTableIdRemapperArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandChooseTableIdRemapperArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::MultiTableRemapperArchive& table_id_mapper(const CommandChooseTableIdRemapperArchive* msg);
  static void set_has_table_id_mapper(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& formula_rewrite_command_for_undo(const CommandChooseTableIdRemapperArchive* msg);
  static void set_has_formula_rewrite_command_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_apply_and_clear(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000b) ^ 0x0000000b) != 0;
  }
};

const ::TSK::CommandArchive&
CommandChooseTableIdRemapperArchive::_Internal::super(const CommandChooseTableIdRemapperArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::MultiTableRemapperArchive&
CommandChooseTableIdRemapperArchive::_Internal::table_id_mapper(const CommandChooseTableIdRemapperArchive* msg) {
  return *msg->_impl_.table_id_mapper_;
}
const ::TSP::Reference&
CommandChooseTableIdRemapperArchive::_Internal::formula_rewrite_command_for_undo(const CommandChooseTableIdRemapperArchive* msg) {
  return *msg->_impl_.formula_rewrite_command_for_undo_;
}
void CommandChooseTableIdRemapperArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandChooseTableIdRemapperArchive::clear_table_id_mapper() {
  if (_impl_.table_id_mapper_ != nullptr) _impl_.table_id_mapper_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandChooseTableIdRemapperArchive::clear_formula_rewrite_command_for_undo() {
  if (_impl_.formula_rewrite_command_for_undo_ != nullptr) _impl_.formula_rewrite_command_for_undo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandChooseTableIdRemapperArchive::CommandChooseTableIdRemapperArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandChooseTableIdRemapperArchive)
}
CommandChooseTableIdRemapperArchive::CommandChooseTableIdRemapperArchive(const CommandChooseTableIdRemapperArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandChooseTableIdRemapperArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_id_mapper_){nullptr}
    , decltype(_impl_.formula_rewrite_command_for_undo_){nullptr}
    , decltype(_impl_.apply_and_clear_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_table_id_mapper()) {
    _this->_impl_.table_id_mapper_ = new ::TST::MultiTableRemapperArchive(*from._impl_.table_id_mapper_);
  }
  if (from._internal_has_formula_rewrite_command_for_undo()) {
    _this->_impl_.formula_rewrite_command_for_undo_ = new ::TSP::Reference(*from._impl_.formula_rewrite_command_for_undo_);
  }
  _this->_impl_.apply_and_clear_ = from._impl_.apply_and_clear_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandChooseTableIdRemapperArchive)
}

inline void CommandChooseTableIdRemapperArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_id_mapper_){nullptr}
    , decltype(_impl_.formula_rewrite_command_for_undo_){nullptr}
    , decltype(_impl_.apply_and_clear_){false}
  };
}

CommandChooseTableIdRemapperArchive::~CommandChooseTableIdRemapperArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandChooseTableIdRemapperArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandChooseTableIdRemapperArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.table_id_mapper_;
  if (this != internal_default_instance()) delete _impl_.formula_rewrite_command_for_undo_;
}

void CommandChooseTableIdRemapperArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandChooseTableIdRemapperArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandChooseTableIdRemapperArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.table_id_mapper_ != nullptr);
      _impl_.table_id_mapper_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.formula_rewrite_command_for_undo_ != nullptr);
      _impl_.formula_rewrite_command_for_undo_->Clear();
    }
  }
  _impl_.apply_and_clear_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandChooseTableIdRemapperArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.MultiTableRemapperArchive table_id_mapper = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_id_mapper(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command_for_undo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command_for_undo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool apply_and_clear = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_apply_and_clear(&has_bits);
          _impl_.apply_and_clear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandChooseTableIdRemapperArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandChooseTableIdRemapperArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.MultiTableRemapperArchive table_id_mapper = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table_id_mapper(this),
        _Internal::table_id_mapper(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::formula_rewrite_command_for_undo(this),
        _Internal::formula_rewrite_command_for_undo(this).GetCachedSize(), target, stream);
  }

  // required bool apply_and_clear = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_apply_and_clear(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandChooseTableIdRemapperArchive)
  return target;
}

size_t CommandChooseTableIdRemapperArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandChooseTableIdRemapperArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_table_id_mapper()) {
    // required .TST.MultiTableRemapperArchive table_id_mapper = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_mapper_);
  }

  if (_internal_has_apply_and_clear()) {
    // required bool apply_and_clear = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandChooseTableIdRemapperArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandChooseTableIdRemapperArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.MultiTableRemapperArchive table_id_mapper = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_id_mapper_);

    // required bool apply_and_clear = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference formula_rewrite_command_for_undo = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formula_rewrite_command_for_undo_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandChooseTableIdRemapperArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandChooseTableIdRemapperArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandChooseTableIdRemapperArchive::GetClassData() const { return &_class_data_; }


void CommandChooseTableIdRemapperArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandChooseTableIdRemapperArchive*>(&to_msg);
  auto& from = static_cast<const CommandChooseTableIdRemapperArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandChooseTableIdRemapperArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_table_id_mapper()->::TST::MultiTableRemapperArchive::MergeFrom(
          from._internal_table_id_mapper());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_formula_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(
          from._internal_formula_rewrite_command_for_undo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.apply_and_clear_ = from._impl_.apply_and_clear_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandChooseTableIdRemapperArchive::CopyFrom(const CommandChooseTableIdRemapperArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandChooseTableIdRemapperArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandChooseTableIdRemapperArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_table_id_mapper()) {
    if (!_impl_.table_id_mapper_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command_for_undo()) {
    if (!_impl_.formula_rewrite_command_for_undo_->IsInitialized()) return false;
  }
  return true;
}

void CommandChooseTableIdRemapperArchive::InternalSwap(CommandChooseTableIdRemapperArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandChooseTableIdRemapperArchive, _impl_.apply_and_clear_)
      + sizeof(CommandChooseTableIdRemapperArchive::_impl_.apply_and_clear_)
      - PROTOBUF_FIELD_OFFSET(CommandChooseTableIdRemapperArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandChooseTableIdRemapperArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[66]);
}

// ===================================================================

class CommandCategorySetGroupingColumnsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategorySetGroupingColumnsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_new_enabled_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_old_enabled_changing(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TST::GroupColumnListArchive& new_grouping_columns(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_new_grouping_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::GroupColumnListArchive& old_grouping_columns(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_old_grouping_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_restore_base_order(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_undo_restore_base_order(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_restore_view_order(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_undo_restore_view_order(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TST::SummaryModelGroupByChangeStateArchive& summary_change_state(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_summary_change_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::SummaryModelGroupByChangeStateArchive& undo_summary_change_state(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_undo_summary_change_state(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::ColumnAggregateListArchive& new_column_aggregates(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_new_column_aggregates(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TST::ColumnAggregateListArchive& old_column_aggregates(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_old_column_aggregates(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TSP::Reference& undo_set_enabled_rewrite_command(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_undo_set_enabled_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TSP::Reference& undo_set_columns_rewrite_command(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_undo_set_columns_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_force_restore_all_states(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::Reference& undo_cell_diff_map(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_undo_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::Reference& undo_set_group_sort_order_command(const CommandCategorySetGroupingColumnsArchive* msg);
  static void set_has_undo_set_group_sort_order_command(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0007f003) ^ 0x0007f003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::super(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::GroupColumnListArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::new_grouping_columns(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.new_grouping_columns_;
}
const ::TST::GroupColumnListArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::old_grouping_columns(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.old_grouping_columns_;
}
const ::TST::SummaryModelGroupByChangeStateArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::summary_change_state(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.summary_change_state_;
}
const ::TST::SummaryModelGroupByChangeStateArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::undo_summary_change_state(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.undo_summary_change_state_;
}
const ::TST::ColumnAggregateListArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::new_column_aggregates(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.new_column_aggregates_;
}
const ::TST::ColumnAggregateListArchive&
CommandCategorySetGroupingColumnsArchive::_Internal::old_column_aggregates(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.old_column_aggregates_;
}
const ::TSP::Reference&
CommandCategorySetGroupingColumnsArchive::_Internal::undo_set_enabled_rewrite_command(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.undo_set_enabled_rewrite_command_;
}
const ::TSP::Reference&
CommandCategorySetGroupingColumnsArchive::_Internal::undo_set_columns_rewrite_command(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.undo_set_columns_rewrite_command_;
}
const ::TSP::Reference&
CommandCategorySetGroupingColumnsArchive::_Internal::cell_diff_map(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.cell_diff_map_;
}
const ::TSP::Reference&
CommandCategorySetGroupingColumnsArchive::_Internal::undo_cell_diff_map(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.undo_cell_diff_map_;
}
const ::TSP::Reference&
CommandCategorySetGroupingColumnsArchive::_Internal::undo_set_group_sort_order_command(const CommandCategorySetGroupingColumnsArchive* msg) {
  return *msg->_impl_.undo_set_group_sort_order_command_;
}
void CommandCategorySetGroupingColumnsArchive::clear_new_grouping_columns() {
  if (_impl_.new_grouping_columns_ != nullptr) _impl_.new_grouping_columns_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandCategorySetGroupingColumnsArchive::clear_old_grouping_columns() {
  if (_impl_.old_grouping_columns_ != nullptr) _impl_.old_grouping_columns_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandCategorySetGroupingColumnsArchive::clear_base_row_order() {
  _impl_.base_row_order_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_base_row_order() {
  _impl_.undo_base_row_order_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_view_row_order() {
  _impl_.view_row_order_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_view_row_order() {
  _impl_.undo_view_row_order_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_collapse_state() {
  _impl_.collapse_state_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_collapse_state() {
  _impl_.undo_collapse_state_.Clear();
}
void CommandCategorySetGroupingColumnsArchive::clear_summary_change_state() {
  if (_impl_.summary_change_state_ != nullptr) _impl_.summary_change_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_summary_change_state() {
  if (_impl_.undo_summary_change_state_ != nullptr) _impl_.undo_summary_change_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandCategorySetGroupingColumnsArchive::clear_new_column_aggregates() {
  if (_impl_.new_column_aggregates_ != nullptr) _impl_.new_column_aggregates_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CommandCategorySetGroupingColumnsArchive::clear_old_column_aggregates() {
  if (_impl_.old_column_aggregates_ != nullptr) _impl_.old_column_aggregates_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_set_enabled_rewrite_command() {
  if (_impl_.undo_set_enabled_rewrite_command_ != nullptr) _impl_.undo_set_enabled_rewrite_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_set_columns_rewrite_command() {
  if (_impl_.undo_set_columns_rewrite_command_ != nullptr) _impl_.undo_set_columns_rewrite_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void CommandCategorySetGroupingColumnsArchive::clear_cell_diff_map() {
  if (_impl_.cell_diff_map_ != nullptr) _impl_.cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_cell_diff_map() {
  if (_impl_.undo_cell_diff_map_ != nullptr) _impl_.undo_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void CommandCategorySetGroupingColumnsArchive::clear_undo_set_group_sort_order_command() {
  if (_impl_.undo_set_group_sort_order_command_ != nullptr) _impl_.undo_set_group_sort_order_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
CommandCategorySetGroupingColumnsArchive::CommandCategorySetGroupingColumnsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategorySetGroupingColumnsArchive)
}
CommandCategorySetGroupingColumnsArchive::CommandCategorySetGroupingColumnsArchive(const CommandCategorySetGroupingColumnsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandCategorySetGroupingColumnsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_row_order_){from._impl_.base_row_order_}
    , decltype(_impl_.undo_base_row_order_){from._impl_.undo_base_row_order_}
    , decltype(_impl_.view_row_order_){from._impl_.view_row_order_}
    , decltype(_impl_.undo_view_row_order_){from._impl_.undo_view_row_order_}
    , decltype(_impl_.collapse_state_){from._impl_.collapse_state_}
    , decltype(_impl_.undo_collapse_state_){from._impl_.undo_collapse_state_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_grouping_columns_){nullptr}
    , decltype(_impl_.old_grouping_columns_){nullptr}
    , decltype(_impl_.summary_change_state_){nullptr}
    , decltype(_impl_.undo_summary_change_state_){nullptr}
    , decltype(_impl_.new_column_aggregates_){nullptr}
    , decltype(_impl_.old_column_aggregates_){nullptr}
    , decltype(_impl_.undo_set_enabled_rewrite_command_){nullptr}
    , decltype(_impl_.undo_set_columns_rewrite_command_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.undo_cell_diff_map_){nullptr}
    , decltype(_impl_.undo_set_group_sort_order_command_){nullptr}
    , decltype(_impl_.new_enabled_changing_){}
    , decltype(_impl_.old_enabled_changing_){}
    , decltype(_impl_.restore_base_order_){}
    , decltype(_impl_.undo_restore_base_order_){}
    , decltype(_impl_.restore_view_order_){}
    , decltype(_impl_.undo_restore_view_order_){}
    , decltype(_impl_.force_restore_all_states_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_new_grouping_columns()) {
    _this->_impl_.new_grouping_columns_ = new ::TST::GroupColumnListArchive(*from._impl_.new_grouping_columns_);
  }
  if (from._internal_has_old_grouping_columns()) {
    _this->_impl_.old_grouping_columns_ = new ::TST::GroupColumnListArchive(*from._impl_.old_grouping_columns_);
  }
  if (from._internal_has_summary_change_state()) {
    _this->_impl_.summary_change_state_ = new ::TST::SummaryModelGroupByChangeStateArchive(*from._impl_.summary_change_state_);
  }
  if (from._internal_has_undo_summary_change_state()) {
    _this->_impl_.undo_summary_change_state_ = new ::TST::SummaryModelGroupByChangeStateArchive(*from._impl_.undo_summary_change_state_);
  }
  if (from._internal_has_new_column_aggregates()) {
    _this->_impl_.new_column_aggregates_ = new ::TST::ColumnAggregateListArchive(*from._impl_.new_column_aggregates_);
  }
  if (from._internal_has_old_column_aggregates()) {
    _this->_impl_.old_column_aggregates_ = new ::TST::ColumnAggregateListArchive(*from._impl_.old_column_aggregates_);
  }
  if (from._internal_has_undo_set_enabled_rewrite_command()) {
    _this->_impl_.undo_set_enabled_rewrite_command_ = new ::TSP::Reference(*from._impl_.undo_set_enabled_rewrite_command_);
  }
  if (from._internal_has_undo_set_columns_rewrite_command()) {
    _this->_impl_.undo_set_columns_rewrite_command_ = new ::TSP::Reference(*from._impl_.undo_set_columns_rewrite_command_);
  }
  if (from._internal_has_cell_diff_map()) {
    _this->_impl_.cell_diff_map_ = new ::TSP::Reference(*from._impl_.cell_diff_map_);
  }
  if (from._internal_has_undo_cell_diff_map()) {
    _this->_impl_.undo_cell_diff_map_ = new ::TSP::Reference(*from._impl_.undo_cell_diff_map_);
  }
  if (from._internal_has_undo_set_group_sort_order_command()) {
    _this->_impl_.undo_set_group_sort_order_command_ = new ::TSP::Reference(*from._impl_.undo_set_group_sort_order_command_);
  }
  ::memcpy(&_impl_.new_enabled_changing_, &from._impl_.new_enabled_changing_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.force_restore_all_states_) -
    reinterpret_cast<char*>(&_impl_.new_enabled_changing_)) + sizeof(_impl_.force_restore_all_states_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategorySetGroupingColumnsArchive)
}

inline void CommandCategorySetGroupingColumnsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.base_row_order_){arena}
    , decltype(_impl_.undo_base_row_order_){arena}
    , decltype(_impl_.view_row_order_){arena}
    , decltype(_impl_.undo_view_row_order_){arena}
    , decltype(_impl_.collapse_state_){arena}
    , decltype(_impl_.undo_collapse_state_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_grouping_columns_){nullptr}
    , decltype(_impl_.old_grouping_columns_){nullptr}
    , decltype(_impl_.summary_change_state_){nullptr}
    , decltype(_impl_.undo_summary_change_state_){nullptr}
    , decltype(_impl_.new_column_aggregates_){nullptr}
    , decltype(_impl_.old_column_aggregates_){nullptr}
    , decltype(_impl_.undo_set_enabled_rewrite_command_){nullptr}
    , decltype(_impl_.undo_set_columns_rewrite_command_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.undo_cell_diff_map_){nullptr}
    , decltype(_impl_.undo_set_group_sort_order_command_){nullptr}
    , decltype(_impl_.new_enabled_changing_){0}
    , decltype(_impl_.old_enabled_changing_){0}
    , decltype(_impl_.restore_base_order_){false}
    , decltype(_impl_.undo_restore_base_order_){false}
    , decltype(_impl_.restore_view_order_){false}
    , decltype(_impl_.undo_restore_view_order_){false}
    , decltype(_impl_.force_restore_all_states_){false}
  };
}

CommandCategorySetGroupingColumnsArchive::~CommandCategorySetGroupingColumnsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandCategorySetGroupingColumnsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandCategorySetGroupingColumnsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.base_row_order_.~RepeatedPtrField();
  _impl_.undo_base_row_order_.~RepeatedPtrField();
  _impl_.view_row_order_.~RepeatedPtrField();
  _impl_.undo_view_row_order_.~RepeatedPtrField();
  _impl_.collapse_state_.~RepeatedPtrField();
  _impl_.undo_collapse_state_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.new_grouping_columns_;
  if (this != internal_default_instance()) delete _impl_.old_grouping_columns_;
  if (this != internal_default_instance()) delete _impl_.summary_change_state_;
  if (this != internal_default_instance()) delete _impl_.undo_summary_change_state_;
  if (this != internal_default_instance()) delete _impl_.new_column_aggregates_;
  if (this != internal_default_instance()) delete _impl_.old_column_aggregates_;
  if (this != internal_default_instance()) delete _impl_.undo_set_enabled_rewrite_command_;
  if (this != internal_default_instance()) delete _impl_.undo_set_columns_rewrite_command_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.undo_cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.undo_set_group_sort_order_command_;
}

void CommandCategorySetGroupingColumnsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandCategorySetGroupingColumnsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategorySetGroupingColumnsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.base_row_order_.Clear();
  _impl_.undo_base_row_order_.Clear();
  _impl_.view_row_order_.Clear();
  _impl_.undo_view_row_order_.Clear();
  _impl_.collapse_state_.Clear();
  _impl_.undo_collapse_state_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_grouping_columns_ != nullptr);
      _impl_.new_grouping_columns_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_grouping_columns_ != nullptr);
      _impl_.old_grouping_columns_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.summary_change_state_ != nullptr);
      _impl_.summary_change_state_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.undo_summary_change_state_ != nullptr);
      _impl_.undo_summary_change_state_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.new_column_aggregates_ != nullptr);
      _impl_.new_column_aggregates_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.old_column_aggregates_ != nullptr);
      _impl_.old_column_aggregates_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.undo_set_enabled_rewrite_command_ != nullptr);
      _impl_.undo_set_enabled_rewrite_command_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.undo_set_columns_rewrite_command_ != nullptr);
      _impl_.undo_set_columns_rewrite_command_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.cell_diff_map_ != nullptr);
      _impl_.cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.undo_cell_diff_map_ != nullptr);
      _impl_.undo_cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.undo_set_group_sort_order_command_ != nullptr);
      _impl_.undo_set_group_sort_order_command_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&_impl_.new_enabled_changing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.undo_restore_base_order_) -
        reinterpret_cast<char*>(&_impl_.new_enabled_changing_)) + sizeof(_impl_.undo_restore_base_order_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&_impl_.restore_view_order_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.force_restore_all_states_) -
        reinterpret_cast<char*>(&_impl_.restore_view_order_)) + sizeof(_impl_.force_restore_all_states_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategorySetGroupingColumnsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 new_enabled_changing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_new_enabled_changing(&has_bits);
          _impl_.new_enabled_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 old_enabled_changing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_old_enabled_changing(&has_bits);
          _impl_.old_enabled_changing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.GroupColumnListArchive new_grouping_columns = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_grouping_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.GroupColumnListArchive old_grouping_columns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_grouping_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool restore_base_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_restore_base_order(&has_bits);
          _impl_.restore_base_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID base_row_order = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_base_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool undo_restore_base_order = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_undo_restore_base_order(&has_bits);
          _impl_.undo_restore_base_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_base_row_order = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_base_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool restore_view_order = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_restore_view_order(&has_bits);
          _impl_.restore_view_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID view_row_order = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_view_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required bool undo_restore_view_order = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_undo_restore_view_order(&has_bits);
          _impl_.undo_restore_view_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_view_row_order = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_view_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID collapse_state = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collapse_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_collapse_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_collapse_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TST.SummaryModelGroupByChangeStateArchive summary_change_state = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary_change_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.SummaryModelGroupByChangeStateArchive undo_summary_change_state = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_summary_change_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ColumnAggregateListArchive new_column_aggregates = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_column_aggregates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ColumnAggregateListArchive old_column_aggregates = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_column_aggregates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_set_enabled_rewrite_command = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_set_enabled_rewrite_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_set_columns_rewrite_command = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_set_columns_rewrite_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool force_restore_all_states = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _Internal::set_has_force_restore_all_states(&has_bits);
          _impl_.force_restore_all_states_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference cell_diff_map = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_diff_map = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_set_group_sort_order_command = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_set_group_sort_order_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandCategorySetGroupingColumnsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategorySetGroupingColumnsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required int32 new_enabled_changing = 2;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_new_enabled_changing(), target);
  }

  // required int32 old_enabled_changing = 3;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_old_enabled_changing(), target);
  }

  // required .TST.GroupColumnListArchive new_grouping_columns = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::new_grouping_columns(this),
        _Internal::new_grouping_columns(this).GetCachedSize(), target, stream);
  }

  // optional .TST.GroupColumnListArchive old_grouping_columns = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::old_grouping_columns(this),
        _Internal::old_grouping_columns(this).GetCachedSize(), target, stream);
  }

  // required bool restore_base_order = 6;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_restore_base_order(), target);
  }

  // repeated .TSP.UUID base_row_order = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_base_row_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_base_row_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool undo_restore_base_order = 8;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_undo_restore_base_order(), target);
  }

  // repeated .TSP.UUID undo_base_row_order = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_undo_base_row_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_undo_base_row_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool restore_view_order = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_restore_view_order(), target);
  }

  // repeated .TSP.UUID view_row_order = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_view_row_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_view_row_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required bool undo_restore_view_order = 12;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_undo_restore_view_order(), target);
  }

  // repeated .TSP.UUID undo_view_row_order = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_undo_view_row_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_undo_view_row_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID collapse_state = 14;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_collapse_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_collapse_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(14, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID undo_collapse_state = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_undo_collapse_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_undo_collapse_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TST.SummaryModelGroupByChangeStateArchive summary_change_state = 16;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::summary_change_state(this),
        _Internal::summary_change_state(this).GetCachedSize(), target, stream);
  }

  // optional .TST.SummaryModelGroupByChangeStateArchive undo_summary_change_state = 17;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::undo_summary_change_state(this),
        _Internal::undo_summary_change_state(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ColumnAggregateListArchive new_column_aggregates = 18;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::new_column_aggregates(this),
        _Internal::new_column_aggregates(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ColumnAggregateListArchive old_column_aggregates = 19;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::old_column_aggregates(this),
        _Internal::old_column_aggregates(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_set_enabled_rewrite_command = 20;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::undo_set_enabled_rewrite_command(this),
        _Internal::undo_set_enabled_rewrite_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_set_columns_rewrite_command = 21;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::undo_set_columns_rewrite_command(this),
        _Internal::undo_set_columns_rewrite_command(this).GetCachedSize(), target, stream);
  }

  // required bool force_restore_all_states = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(22, this->_internal_force_restore_all_states(), target);
  }

  // optional .TSP.Reference cell_diff_map = 23;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::cell_diff_map(this),
        _Internal::cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_cell_diff_map = 24;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::undo_cell_diff_map(this),
        _Internal::undo_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_set_group_sort_order_command = 25;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::undo_set_group_sort_order_command(this),
        _Internal::undo_set_group_sort_order_command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategorySetGroupingColumnsArchive)
  return target;
}

size_t CommandCategorySetGroupingColumnsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategorySetGroupingColumnsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_new_grouping_columns()) {
    // required .TST.GroupColumnListArchive new_grouping_columns = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_grouping_columns_);
  }

  if (_internal_has_new_enabled_changing()) {
    // required int32 new_enabled_changing = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_enabled_changing());
  }

  if (_internal_has_old_enabled_changing()) {
    // required int32 old_enabled_changing = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_old_enabled_changing());
  }

  if (_internal_has_restore_base_order()) {
    // required bool restore_base_order = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_undo_restore_base_order()) {
    // required bool undo_restore_base_order = 8;
    total_size += 1 + 1;
  }

  if (_internal_has_restore_view_order()) {
    // required bool restore_view_order = 10;
    total_size += 1 + 1;
  }

  if (_internal_has_undo_restore_view_order()) {
    // required bool undo_restore_view_order = 12;
    total_size += 1 + 1;
  }

  if (_internal_has_force_restore_all_states()) {
    // required bool force_restore_all_states = 22;
    total_size += 2 + 1;
  }

  return total_size;
}
size_t CommandCategorySetGroupingColumnsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategorySetGroupingColumnsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0007f003) ^ 0x0007f003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.GroupColumnListArchive new_grouping_columns = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_grouping_columns_);

    // required int32 new_enabled_changing = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_new_enabled_changing());

    // required int32 old_enabled_changing = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_old_enabled_changing());

    // required bool restore_base_order = 6;
    total_size += 1 + 1;

    // required bool undo_restore_base_order = 8;
    total_size += 1 + 1;

    // required bool restore_view_order = 10;
    total_size += 1 + 1;

    // required bool undo_restore_view_order = 12;
    total_size += 1 + 1;

    // required bool force_restore_all_states = 22;
    total_size += 2 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID base_row_order = 7;
  total_size += 1UL * this->_internal_base_row_order_size();
  for (const auto& msg : this->_impl_.base_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_base_row_order = 9;
  total_size += 1UL * this->_internal_undo_base_row_order_size();
  for (const auto& msg : this->_impl_.undo_base_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID view_row_order = 11;
  total_size += 1UL * this->_internal_view_row_order_size();
  for (const auto& msg : this->_impl_.view_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_view_row_order = 13;
  total_size += 1UL * this->_internal_undo_view_row_order_size();
  for (const auto& msg : this->_impl_.undo_view_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID collapse_state = 14;
  total_size += 1UL * this->_internal_collapse_state_size();
  for (const auto& msg : this->_impl_.collapse_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_collapse_state = 15;
  total_size += 1UL * this->_internal_undo_collapse_state_size();
  for (const auto& msg : this->_impl_.undo_collapse_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000fcu) {
    // optional .TST.GroupColumnListArchive old_grouping_columns = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_grouping_columns_);
    }

    // optional .TST.SummaryModelGroupByChangeStateArchive summary_change_state = 16;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.summary_change_state_);
    }

    // optional .TST.SummaryModelGroupByChangeStateArchive undo_summary_change_state = 17;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_summary_change_state_);
    }

    // optional .TST.ColumnAggregateListArchive new_column_aggregates = 18;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_column_aggregates_);
    }

    // optional .TST.ColumnAggregateListArchive old_column_aggregates = 19;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_column_aggregates_);
    }

    // optional .TSP.Reference undo_set_enabled_rewrite_command = 20;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_set_enabled_rewrite_command_);
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional .TSP.Reference undo_set_columns_rewrite_command = 21;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_set_columns_rewrite_command_);
    }

    // optional .TSP.Reference cell_diff_map = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_diff_map_);
    }

    // optional .TSP.Reference undo_cell_diff_map = 24;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_cell_diff_map_);
    }

    // optional .TSP.Reference undo_set_group_sort_order_command = 25;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_set_group_sort_order_command_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategorySetGroupingColumnsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandCategorySetGroupingColumnsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategorySetGroupingColumnsArchive::GetClassData() const { return &_class_data_; }


void CommandCategorySetGroupingColumnsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandCategorySetGroupingColumnsArchive*>(&to_msg);
  auto& from = static_cast<const CommandCategorySetGroupingColumnsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategorySetGroupingColumnsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.base_row_order_.MergeFrom(from._impl_.base_row_order_);
  _this->_impl_.undo_base_row_order_.MergeFrom(from._impl_.undo_base_row_order_);
  _this->_impl_.view_row_order_.MergeFrom(from._impl_.view_row_order_);
  _this->_impl_.undo_view_row_order_.MergeFrom(from._impl_.undo_view_row_order_);
  _this->_impl_.collapse_state_.MergeFrom(from._impl_.collapse_state_);
  _this->_impl_.undo_collapse_state_.MergeFrom(from._impl_.undo_collapse_state_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_grouping_columns()->::TST::GroupColumnListArchive::MergeFrom(
          from._internal_new_grouping_columns());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_grouping_columns()->::TST::GroupColumnListArchive::MergeFrom(
          from._internal_old_grouping_columns());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_summary_change_state()->::TST::SummaryModelGroupByChangeStateArchive::MergeFrom(
          from._internal_summary_change_state());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_undo_summary_change_state()->::TST::SummaryModelGroupByChangeStateArchive::MergeFrom(
          from._internal_undo_summary_change_state());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_new_column_aggregates()->::TST::ColumnAggregateListArchive::MergeFrom(
          from._internal_new_column_aggregates());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_old_column_aggregates()->::TST::ColumnAggregateListArchive::MergeFrom(
          from._internal_old_column_aggregates());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_undo_set_enabled_rewrite_command()->::TSP::Reference::MergeFrom(
          from._internal_undo_set_enabled_rewrite_command());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_undo_set_columns_rewrite_command()->::TSP::Reference::MergeFrom(
          from._internal_undo_set_columns_rewrite_command());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_undo_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_cell_diff_map());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_undo_set_group_sort_order_command()->::TSP::Reference::MergeFrom(
          from._internal_undo_set_group_sort_order_command());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.new_enabled_changing_ = from._impl_.new_enabled_changing_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.old_enabled_changing_ = from._impl_.old_enabled_changing_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.restore_base_order_ = from._impl_.restore_base_order_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.undo_restore_base_order_ = from._impl_.undo_restore_base_order_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.restore_view_order_ = from._impl_.restore_view_order_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.undo_restore_view_order_ = from._impl_.undo_restore_view_order_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.force_restore_all_states_ = from._impl_.force_restore_all_states_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategorySetGroupingColumnsArchive::CopyFrom(const CommandCategorySetGroupingColumnsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategorySetGroupingColumnsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategorySetGroupingColumnsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.base_row_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.undo_base_row_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.view_row_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.undo_view_row_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.collapse_state_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.undo_collapse_state_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_new_grouping_columns()) {
    if (!_impl_.new_grouping_columns_->IsInitialized()) return false;
  }
  if (_internal_has_old_grouping_columns()) {
    if (!_impl_.old_grouping_columns_->IsInitialized()) return false;
  }
  if (_internal_has_summary_change_state()) {
    if (!_impl_.summary_change_state_->IsInitialized()) return false;
  }
  if (_internal_has_undo_summary_change_state()) {
    if (!_impl_.undo_summary_change_state_->IsInitialized()) return false;
  }
  if (_internal_has_new_column_aggregates()) {
    if (!_impl_.new_column_aggregates_->IsInitialized()) return false;
  }
  if (_internal_has_old_column_aggregates()) {
    if (!_impl_.old_column_aggregates_->IsInitialized()) return false;
  }
  if (_internal_has_undo_set_enabled_rewrite_command()) {
    if (!_impl_.undo_set_enabled_rewrite_command_->IsInitialized()) return false;
  }
  if (_internal_has_undo_set_columns_rewrite_command()) {
    if (!_impl_.undo_set_columns_rewrite_command_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!_impl_.cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_diff_map()) {
    if (!_impl_.undo_cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_set_group_sort_order_command()) {
    if (!_impl_.undo_set_group_sort_order_command_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategorySetGroupingColumnsArchive::InternalSwap(CommandCategorySetGroupingColumnsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.base_row_order_.InternalSwap(&other->_impl_.base_row_order_);
  _impl_.undo_base_row_order_.InternalSwap(&other->_impl_.undo_base_row_order_);
  _impl_.view_row_order_.InternalSwap(&other->_impl_.view_row_order_);
  _impl_.undo_view_row_order_.InternalSwap(&other->_impl_.undo_view_row_order_);
  _impl_.collapse_state_.InternalSwap(&other->_impl_.collapse_state_);
  _impl_.undo_collapse_state_.InternalSwap(&other->_impl_.undo_collapse_state_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategorySetGroupingColumnsArchive, _impl_.force_restore_all_states_)
      + sizeof(CommandCategorySetGroupingColumnsArchive::_impl_.force_restore_all_states_)
      - PROTOBUF_FIELD_OFFSET(CommandCategorySetGroupingColumnsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategorySetGroupingColumnsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[67]);
}

// ===================================================================

class FormulaEditingCommandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaEditingCommandGroupArchive>()._impl_._has_bits_);
  static const ::TSK::ProgressiveCommandGroupArchive& super(const FormulaEditingCommandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_undoselectionvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_undoselectionstart(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_undoselectionlength(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undoactivetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_redoselectionvalid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_redoselectionstart(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_redoselectionlength(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_redoactivetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

const ::TSK::ProgressiveCommandGroupArchive&
FormulaEditingCommandGroupArchive::_Internal::super(const FormulaEditingCommandGroupArchive* msg) {
  return *msg->_impl_.super_;
}
void FormulaEditingCommandGroupArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FormulaEditingCommandGroupArchive::FormulaEditingCommandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaEditingCommandGroupArchive)
}
FormulaEditingCommandGroupArchive::FormulaEditingCommandGroupArchive(const FormulaEditingCommandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaEditingCommandGroupArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.undoselectionstart_){}
    , decltype(_impl_.undoselectionlength_){}
    , decltype(_impl_.undoselectionvalid_){}
    , decltype(_impl_.redoselectionvalid_){}
    , decltype(_impl_.undoactivetoken_){}
    , decltype(_impl_.redoselectionstart_){}
    , decltype(_impl_.redoselectionlength_){}
    , decltype(_impl_.redoactivetoken_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::ProgressiveCommandGroupArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.undoselectionstart_, &from._impl_.undoselectionstart_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.redoactivetoken_) -
    reinterpret_cast<char*>(&_impl_.undoselectionstart_)) + sizeof(_impl_.redoactivetoken_));
  // @@protoc_insertion_point(copy_constructor:TST.FormulaEditingCommandGroupArchive)
}

inline void FormulaEditingCommandGroupArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.undoselectionstart_){0u}
    , decltype(_impl_.undoselectionlength_){0u}
    , decltype(_impl_.undoselectionvalid_){false}
    , decltype(_impl_.redoselectionvalid_){false}
    , decltype(_impl_.undoactivetoken_){0u}
    , decltype(_impl_.redoselectionstart_){0u}
    , decltype(_impl_.redoselectionlength_){0u}
    , decltype(_impl_.redoactivetoken_){0u}
  };
}

FormulaEditingCommandGroupArchive::~FormulaEditingCommandGroupArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaEditingCommandGroupArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaEditingCommandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void FormulaEditingCommandGroupArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaEditingCommandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaEditingCommandGroupArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&_impl_.undoselectionstart_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.redoselectionlength_) -
        reinterpret_cast<char*>(&_impl_.undoselectionstart_)) + sizeof(_impl_.redoselectionlength_));
  }
  _impl_.redoactivetoken_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaEditingCommandGroupArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.ProgressiveCommandGroupArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool undoSelectionValid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_undoselectionvalid(&has_bits);
          _impl_.undoselectionvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 undoSelectionStart = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_undoselectionstart(&has_bits);
          _impl_.undoselectionstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 undoSelectionLength = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_undoselectionlength(&has_bits);
          _impl_.undoselectionlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 undoActiveToken = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_undoactivetoken(&has_bits);
          _impl_.undoactivetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool redoSelectionValid = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_redoselectionvalid(&has_bits);
          _impl_.redoselectionvalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 redoSelectionStart = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_redoselectionstart(&has_bits);
          _impl_.redoselectionstart_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 redoSelectionLength = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_redoselectionlength(&has_bits);
          _impl_.redoselectionlength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 redoActiveToken = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_redoactivetoken(&has_bits);
          _impl_.redoactivetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaEditingCommandGroupArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaEditingCommandGroupArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.ProgressiveCommandGroupArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool undoSelectionValid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_undoselectionvalid(), target);
  }

  // required uint32 undoSelectionStart = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_undoselectionstart(), target);
  }

  // required uint32 undoSelectionLength = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_undoselectionlength(), target);
  }

  // required uint32 undoActiveToken = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_undoactivetoken(), target);
  }

  // required bool redoSelectionValid = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_redoselectionvalid(), target);
  }

  // required uint32 redoSelectionStart = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_redoselectionstart(), target);
  }

  // required uint32 redoSelectionLength = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_redoselectionlength(), target);
  }

  // required uint32 redoActiveToken = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(9, this->_internal_redoactivetoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaEditingCommandGroupArchive)
  return target;
}

size_t FormulaEditingCommandGroupArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.FormulaEditingCommandGroupArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.ProgressiveCommandGroupArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_undoselectionstart()) {
    // required uint32 undoSelectionStart = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undoselectionstart());
  }

  if (_internal_has_undoselectionlength()) {
    // required uint32 undoSelectionLength = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undoselectionlength());
  }

  if (_internal_has_undoselectionvalid()) {
    // required bool undoSelectionValid = 2;
    total_size += 1 + 1;
  }

  if (_internal_has_redoselectionvalid()) {
    // required bool redoSelectionValid = 6;
    total_size += 1 + 1;
  }

  if (_internal_has_undoactivetoken()) {
    // required uint32 undoActiveToken = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undoactivetoken());
  }

  if (_internal_has_redoselectionstart()) {
    // required uint32 redoSelectionStart = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redoselectionstart());
  }

  if (_internal_has_redoselectionlength()) {
    // required uint32 redoSelectionLength = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redoselectionlength());
  }

  if (_internal_has_redoactivetoken()) {
    // required uint32 redoActiveToken = 9;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redoactivetoken());
  }

  return total_size;
}
size_t FormulaEditingCommandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaEditingCommandGroupArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required .TSK.ProgressiveCommandGroupArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 undoSelectionStart = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undoselectionstart());

    // required uint32 undoSelectionLength = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undoselectionlength());

    // required bool undoSelectionValid = 2;
    total_size += 1 + 1;

    // required bool redoSelectionValid = 6;
    total_size += 1 + 1;

    // required uint32 undoActiveToken = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undoactivetoken());

    // required uint32 redoSelectionStart = 7;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redoselectionstart());

    // required uint32 redoSelectionLength = 8;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redoselectionlength());

    // required uint32 redoActiveToken = 9;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redoactivetoken());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaEditingCommandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaEditingCommandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaEditingCommandGroupArchive::GetClassData() const { return &_class_data_; }


void FormulaEditingCommandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaEditingCommandGroupArchive*>(&to_msg);
  auto& from = static_cast<const FormulaEditingCommandGroupArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaEditingCommandGroupArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::ProgressiveCommandGroupArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.undoselectionstart_ = from._impl_.undoselectionstart_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.undoselectionlength_ = from._impl_.undoselectionlength_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.undoselectionvalid_ = from._impl_.undoselectionvalid_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.redoselectionvalid_ = from._impl_.redoselectionvalid_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.undoactivetoken_ = from._impl_.undoactivetoken_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.redoselectionstart_ = from._impl_.redoselectionstart_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.redoselectionlength_ = from._impl_.redoselectionlength_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_redoactivetoken(from._internal_redoactivetoken());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaEditingCommandGroupArchive::CopyFrom(const FormulaEditingCommandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaEditingCommandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaEditingCommandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void FormulaEditingCommandGroupArchive::InternalSwap(FormulaEditingCommandGroupArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaEditingCommandGroupArchive, _impl_.redoactivetoken_)
      + sizeof(FormulaEditingCommandGroupArchive::_impl_.redoactivetoken_)
      - PROTOBUF_FIELD_OFFSET(FormulaEditingCommandGroupArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaEditingCommandGroupArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[68]);
}

// ===================================================================

class FormulaEditingCommandSelectionBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<FormulaEditingCommandSelectionBehaviorArchive>()._impl_._has_bits_);
  static const ::TSK::CommandSelectionBehaviorArchive& super(const FormulaEditingCommandSelectionBehaviorArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_undoactivetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_redoactivetoken(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandSelectionBehaviorArchive&
FormulaEditingCommandSelectionBehaviorArchive::_Internal::super(const FormulaEditingCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.super_;
}
void FormulaEditingCommandSelectionBehaviorArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
FormulaEditingCommandSelectionBehaviorArchive::FormulaEditingCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.FormulaEditingCommandSelectionBehaviorArchive)
}
FormulaEditingCommandSelectionBehaviorArchive::FormulaEditingCommandSelectionBehaviorArchive(const FormulaEditingCommandSelectionBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FormulaEditingCommandSelectionBehaviorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.undoactivetoken_){}
    , decltype(_impl_.redoactivetoken_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandSelectionBehaviorArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.undoactivetoken_, &from._impl_.undoactivetoken_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.redoactivetoken_) -
    reinterpret_cast<char*>(&_impl_.undoactivetoken_)) + sizeof(_impl_.redoactivetoken_));
  // @@protoc_insertion_point(copy_constructor:TST.FormulaEditingCommandSelectionBehaviorArchive)
}

inline void FormulaEditingCommandSelectionBehaviorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.undoactivetoken_){0u}
    , decltype(_impl_.redoactivetoken_){0u}
  };
}

FormulaEditingCommandSelectionBehaviorArchive::~FormulaEditingCommandSelectionBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TST.FormulaEditingCommandSelectionBehaviorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FormulaEditingCommandSelectionBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void FormulaEditingCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FormulaEditingCommandSelectionBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.FormulaEditingCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.undoactivetoken_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.redoactivetoken_) -
        reinterpret_cast<char*>(&_impl_.undoactivetoken_)) + sizeof(_impl_.redoactivetoken_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FormulaEditingCommandSelectionBehaviorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandSelectionBehaviorArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 undoActiveToken = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_undoactivetoken(&has_bits);
          _impl_.undoactivetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 redoActiveToken = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_redoactivetoken(&has_bits);
          _impl_.redoactivetoken_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FormulaEditingCommandSelectionBehaviorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.FormulaEditingCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional uint32 undoActiveToken = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_undoactivetoken(), target);
  }

  // optional uint32 redoActiveToken = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_redoactivetoken(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.FormulaEditingCommandSelectionBehaviorArchive)
  return target;
}

size_t FormulaEditingCommandSelectionBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.FormulaEditingCommandSelectionBehaviorArchive)
  size_t total_size = 0;

  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 undoActiveToken = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undoactivetoken());
    }

    // optional uint32 redoActiveToken = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_redoactivetoken());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FormulaEditingCommandSelectionBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FormulaEditingCommandSelectionBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FormulaEditingCommandSelectionBehaviorArchive::GetClassData() const { return &_class_data_; }


void FormulaEditingCommandSelectionBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FormulaEditingCommandSelectionBehaviorArchive*>(&to_msg);
  auto& from = static_cast<const FormulaEditingCommandSelectionBehaviorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.FormulaEditingCommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandSelectionBehaviorArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.undoactivetoken_ = from._impl_.undoactivetoken_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.redoactivetoken_ = from._impl_.redoactivetoken_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FormulaEditingCommandSelectionBehaviorArchive::CopyFrom(const FormulaEditingCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.FormulaEditingCommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormulaEditingCommandSelectionBehaviorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void FormulaEditingCommandSelectionBehaviorArchive::InternalSwap(FormulaEditingCommandSelectionBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, _impl_.redoactivetoken_)
      + sizeof(FormulaEditingCommandSelectionBehaviorArchive::_impl_.redoactivetoken_)
      - PROTOBUF_FIELD_OFFSET(FormulaEditingCommandSelectionBehaviorArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FormulaEditingCommandSelectionBehaviorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[69]);
}

// ===================================================================

class TableCommandSelectionBehaviorArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableCommandSelectionBehaviorArchive>()._impl_._has_bits_);
  static const ::TSK::CommandSelectionBehaviorArchive& super(const TableCommandSelectionBehaviorArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& table_info(const TableCommandSelectionBehaviorArchive* msg);
  static void set_has_table_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& last_column_uid_hit_by_tap(const TableCommandSelectionBehaviorArchive* msg);
  static void set_has_last_column_uid_hit_by_tap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_invalidate_comments(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandSelectionBehaviorArchive&
TableCommandSelectionBehaviorArchive::_Internal::super(const TableCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
TableCommandSelectionBehaviorArchive::_Internal::table_info(const TableCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.table_info_;
}
const ::TSP::UUID&
TableCommandSelectionBehaviorArchive::_Internal::last_column_uid_hit_by_tap(const TableCommandSelectionBehaviorArchive* msg) {
  return *msg->_impl_.last_column_uid_hit_by_tap_;
}
void TableCommandSelectionBehaviorArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TableCommandSelectionBehaviorArchive::clear_table_info() {
  if (_impl_.table_info_ != nullptr) _impl_.table_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TableCommandSelectionBehaviorArchive::clear_last_column_uid_hit_by_tap() {
  if (_impl_.last_column_uid_hit_by_tap_ != nullptr) _impl_.last_column_uid_hit_by_tap_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TableCommandSelectionBehaviorArchive::TableCommandSelectionBehaviorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableCommandSelectionBehaviorArchive)
}
TableCommandSelectionBehaviorArchive::TableCommandSelectionBehaviorArchive(const TableCommandSelectionBehaviorArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableCommandSelectionBehaviorArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.last_column_uid_hit_by_tap_){nullptr}
    , decltype(_impl_.invalidate_comments_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandSelectionBehaviorArchive(*from._impl_.super_);
  }
  if (from._internal_has_table_info()) {
    _this->_impl_.table_info_ = new ::TSP::Reference(*from._impl_.table_info_);
  }
  if (from._internal_has_last_column_uid_hit_by_tap()) {
    _this->_impl_.last_column_uid_hit_by_tap_ = new ::TSP::UUID(*from._impl_.last_column_uid_hit_by_tap_);
  }
  _this->_impl_.invalidate_comments_ = from._impl_.invalidate_comments_;
  // @@protoc_insertion_point(copy_constructor:TST.TableCommandSelectionBehaviorArchive)
}

inline void TableCommandSelectionBehaviorArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.table_info_){nullptr}
    , decltype(_impl_.last_column_uid_hit_by_tap_){nullptr}
    , decltype(_impl_.invalidate_comments_){0u}
  };
}

TableCommandSelectionBehaviorArchive::~TableCommandSelectionBehaviorArchive() {
  // @@protoc_insertion_point(destructor:TST.TableCommandSelectionBehaviorArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableCommandSelectionBehaviorArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.table_info_;
  if (this != internal_default_instance()) delete _impl_.last_column_uid_hit_by_tap_;
}

void TableCommandSelectionBehaviorArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableCommandSelectionBehaviorArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.table_info_ != nullptr);
      _impl_.table_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.last_column_uid_hit_by_tap_ != nullptr);
      _impl_.last_column_uid_hit_by_tap_->Clear();
    }
  }
  _impl_.invalidate_comments_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableCommandSelectionBehaviorArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandSelectionBehaviorArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference table_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID last_column_uid_hit_by_tap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_column_uid_hit_by_tap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 invalidate_comments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_invalidate_comments(&has_bits);
          _impl_.invalidate_comments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableCommandSelectionBehaviorArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableCommandSelectionBehaviorArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference table_info = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::table_info(this),
        _Internal::table_info(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID last_column_uid_hit_by_tap = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last_column_uid_hit_by_tap(this),
        _Internal::last_column_uid_hit_by_tap(this).GetCachedSize(), target, stream);
  }

  // optional uint32 invalidate_comments = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_invalidate_comments(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableCommandSelectionBehaviorArchive)
  return target;
}

size_t TableCommandSelectionBehaviorArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableCommandSelectionBehaviorArchive)
  size_t total_size = 0;

  // required .TSK.CommandSelectionBehaviorArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .TSP.Reference table_info = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.table_info_);
    }

    // optional .TSP.UUID last_column_uid_hit_by_tap = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.last_column_uid_hit_by_tap_);
    }

    // optional uint32 invalidate_comments = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_invalidate_comments());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableCommandSelectionBehaviorArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableCommandSelectionBehaviorArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableCommandSelectionBehaviorArchive::GetClassData() const { return &_class_data_; }


void TableCommandSelectionBehaviorArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableCommandSelectionBehaviorArchive*>(&to_msg);
  auto& from = static_cast<const TableCommandSelectionBehaviorArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableCommandSelectionBehaviorArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandSelectionBehaviorArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_table_info()->::TSP::Reference::MergeFrom(
          from._internal_table_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_last_column_uid_hit_by_tap()->::TSP::UUID::MergeFrom(
          from._internal_last_column_uid_hit_by_tap());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.invalidate_comments_ = from._impl_.invalidate_comments_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableCommandSelectionBehaviorArchive::CopyFrom(const TableCommandSelectionBehaviorArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableCommandSelectionBehaviorArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableCommandSelectionBehaviorArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_table_info()) {
    if (!_impl_.table_info_->IsInitialized()) return false;
  }
  if (_internal_has_last_column_uid_hit_by_tap()) {
    if (!_impl_.last_column_uid_hit_by_tap_->IsInitialized()) return false;
  }
  return true;
}

void TableCommandSelectionBehaviorArchive::InternalSwap(TableCommandSelectionBehaviorArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TableCommandSelectionBehaviorArchive, _impl_.invalidate_comments_)
      + sizeof(TableCommandSelectionBehaviorArchive::_impl_.invalidate_comments_)
      - PROTOBUF_FIELD_OFFSET(TableCommandSelectionBehaviorArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TableCommandSelectionBehaviorArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[70]);
}

// ===================================================================

class CommandApplyCellCommentArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandApplyCellCommentArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandApplyCellCommentArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUIDCoordArchive& cell_uid(const CommandApplyCellCommentArchive* msg);
  static void set_has_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_comment_storage(const CommandApplyCellCommentArchive* msg);
  static void set_has_old_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::Reference& new_comment_storage(const CommandApplyCellCommentArchive* msg);
  static void set_has_new_comment_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_forward_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_inverse_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandApplyCellCommentArchive::_Internal::super(const CommandApplyCellCommentArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUIDCoordArchive&
CommandApplyCellCommentArchive::_Internal::cell_uid(const CommandApplyCellCommentArchive* msg) {
  return *msg->_impl_.cell_uid_;
}
const ::TSP::Reference&
CommandApplyCellCommentArchive::_Internal::old_comment_storage(const CommandApplyCellCommentArchive* msg) {
  return *msg->_impl_.old_comment_storage_;
}
const ::TSP::Reference&
CommandApplyCellCommentArchive::_Internal::new_comment_storage(const CommandApplyCellCommentArchive* msg) {
  return *msg->_impl_.new_comment_storage_;
}
void CommandApplyCellCommentArchive::clear_cell_uid() {
  if (_impl_.cell_uid_ != nullptr) _impl_.cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandApplyCellCommentArchive::clear_old_comment_storage() {
  if (_impl_.old_comment_storage_ != nullptr) _impl_.old_comment_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandApplyCellCommentArchive::clear_new_comment_storage() {
  if (_impl_.new_comment_storage_ != nullptr) _impl_.new_comment_storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandApplyCellCommentArchive::CommandApplyCellCommentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandApplyCellCommentArchive)
}
CommandApplyCellCommentArchive::CommandApplyCellCommentArchive(const CommandApplyCellCommentArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandApplyCellCommentArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uid_){nullptr}
    , decltype(_impl_.old_comment_storage_){nullptr}
    , decltype(_impl_.new_comment_storage_){nullptr}
    , decltype(_impl_.forward_variant_){}
    , decltype(_impl_.inverse_variant_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_uid()) {
    _this->_impl_.cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.cell_uid_);
  }
  if (from._internal_has_old_comment_storage()) {
    _this->_impl_.old_comment_storage_ = new ::TSP::Reference(*from._impl_.old_comment_storage_);
  }
  if (from._internal_has_new_comment_storage()) {
    _this->_impl_.new_comment_storage_ = new ::TSP::Reference(*from._impl_.new_comment_storage_);
  }
  ::memcpy(&_impl_.forward_variant_, &from._impl_.forward_variant_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inverse_variant_) -
    reinterpret_cast<char*>(&_impl_.forward_variant_)) + sizeof(_impl_.inverse_variant_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandApplyCellCommentArchive)
}

inline void CommandApplyCellCommentArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uid_){nullptr}
    , decltype(_impl_.old_comment_storage_){nullptr}
    , decltype(_impl_.new_comment_storage_){nullptr}
    , decltype(_impl_.forward_variant_){0}
    , decltype(_impl_.inverse_variant_){0}
  };
}

CommandApplyCellCommentArchive::~CommandApplyCellCommentArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandApplyCellCommentArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandApplyCellCommentArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_uid_;
  if (this != internal_default_instance()) delete _impl_.old_comment_storage_;
  if (this != internal_default_instance()) delete _impl_.new_comment_storage_;
}

void CommandApplyCellCommentArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandApplyCellCommentArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandApplyCellCommentArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_uid_ != nullptr);
      _impl_.cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_comment_storage_ != nullptr);
      _impl_.old_comment_storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.new_comment_storage_ != nullptr);
      _impl_.new_comment_storage_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.forward_variant_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.inverse_variant_) -
        reinterpret_cast<char*>(&_impl_.forward_variant_)) + sizeof(_impl_.inverse_variant_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandApplyCellCommentArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive cell_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_comment_storage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_comment_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_comment_storage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_comment_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.CommentCommandVariant forward_variant = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CommentCommandVariant_IsValid(val))) {
            _internal_set_forward_variant(static_cast<::TSD::CommentCommandVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSD.CommentCommandVariant inverse_variant = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TSD::CommentCommandVariant_IsValid(val))) {
            _internal_set_inverse_variant(static_cast<::TSD::CommentCommandVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandApplyCellCommentArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandApplyCellCommentArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDCoordArchive cell_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_uid(this),
        _Internal::cell_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_comment_storage = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_comment_storage(this),
        _Internal::old_comment_storage(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference new_comment_storage = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::new_comment_storage(this),
        _Internal::new_comment_storage(this).GetCachedSize(), target, stream);
  }

  // optional .TSD.CommentCommandVariant forward_variant = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_forward_variant(), target);
  }

  // optional .TSD.CommentCommandVariant inverse_variant = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_inverse_variant(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandApplyCellCommentArchive)
  return target;
}

size_t CommandApplyCellCommentArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandApplyCellCommentArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_cell_uid()) {
    // required .TSP.UUIDCoordArchive cell_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uid_);
  }

  return total_size;
}
size_t CommandApplyCellCommentArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandApplyCellCommentArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDCoordArchive cell_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSP.Reference old_comment_storage = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_comment_storage_);
    }

    // optional .TSP.Reference new_comment_storage = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_comment_storage_);
    }

    // optional .TSD.CommentCommandVariant forward_variant = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_forward_variant());
    }

    // optional .TSD.CommentCommandVariant inverse_variant = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_inverse_variant());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandApplyCellCommentArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandApplyCellCommentArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandApplyCellCommentArchive::GetClassData() const { return &_class_data_; }


void CommandApplyCellCommentArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandApplyCellCommentArchive*>(&to_msg);
  auto& from = static_cast<const CommandApplyCellCommentArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandApplyCellCommentArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_cell_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_comment_storage()->::TSP::Reference::MergeFrom(
          from._internal_old_comment_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_new_comment_storage()->::TSP::Reference::MergeFrom(
          from._internal_new_comment_storage());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.forward_variant_ = from._impl_.forward_variant_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.inverse_variant_ = from._impl_.inverse_variant_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandApplyCellCommentArchive::CopyFrom(const CommandApplyCellCommentArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandApplyCellCommentArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandApplyCellCommentArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uid()) {
    if (!_impl_.cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_old_comment_storage()) {
    if (!_impl_.old_comment_storage_->IsInitialized()) return false;
  }
  if (_internal_has_new_comment_storage()) {
    if (!_impl_.new_comment_storage_->IsInitialized()) return false;
  }
  return true;
}

void CommandApplyCellCommentArchive::InternalSwap(CommandApplyCellCommentArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandApplyCellCommentArchive, _impl_.inverse_variant_)
      + sizeof(CommandApplyCellCommentArchive::_impl_.inverse_variant_)
      - PROTOBUF_FIELD_OFFSET(CommandApplyCellCommentArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandApplyCellCommentArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[71]);
}

// ===================================================================

class CommandSetFormulaTokenizationArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFormulaTokenizationArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSetFormulaTokenizationArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tokenization(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSetFormulaTokenizationArchive::_Internal::super(const CommandSetFormulaTokenizationArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSetFormulaTokenizationArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandSetFormulaTokenizationArchive::CommandSetFormulaTokenizationArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetFormulaTokenizationArchive)
}
CommandSetFormulaTokenizationArchive::CommandSetFormulaTokenizationArchive(const CommandSetFormulaTokenizationArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetFormulaTokenizationArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tokenization_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  _this->_impl_.tokenization_ = from._impl_.tokenization_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetFormulaTokenizationArchive)
}

inline void CommandSetFormulaTokenizationArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.tokenization_){false}
  };
}

CommandSetFormulaTokenizationArchive::~CommandSetFormulaTokenizationArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetFormulaTokenizationArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetFormulaTokenizationArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetFormulaTokenizationArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetFormulaTokenizationArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetFormulaTokenizationArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.tokenization_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFormulaTokenizationArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool tokenization = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_tokenization(&has_bits);
          _impl_.tokenization_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetFormulaTokenizationArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetFormulaTokenizationArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool tokenization = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_tokenization(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetFormulaTokenizationArchive)
  return target;
}

size_t CommandSetFormulaTokenizationArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetFormulaTokenizationArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_tokenization()) {
    // required bool tokenization = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandSetFormulaTokenizationArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetFormulaTokenizationArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required bool tokenization = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetFormulaTokenizationArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetFormulaTokenizationArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetFormulaTokenizationArchive::GetClassData() const { return &_class_data_; }


void CommandSetFormulaTokenizationArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetFormulaTokenizationArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetFormulaTokenizationArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetFormulaTokenizationArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.tokenization_ = from._impl_.tokenization_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetFormulaTokenizationArchive::CopyFrom(const CommandSetFormulaTokenizationArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetFormulaTokenizationArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFormulaTokenizationArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFormulaTokenizationArchive::InternalSwap(CommandSetFormulaTokenizationArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFormulaTokenizationArchive, _impl_.tokenization_)
      + sizeof(CommandSetFormulaTokenizationArchive::_impl_.tokenization_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFormulaTokenizationArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFormulaTokenizationArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[72]);
}

// ===================================================================

class CommandSetFilterSetTypeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFilterSetTypeArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetFilterSetTypeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_old_filter_set_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_new_filter_set_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000005) ^ 0x00000005) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetFilterSetTypeArchive::_Internal::super(const CommandSetFilterSetTypeArchive* msg) {
  return *msg->_impl_.super_;
}
void CommandSetFilterSetTypeArchive::clear_rollback_uid_list() {
  _impl_.rollback_uid_list_.Clear();
}
CommandSetFilterSetTypeArchive::CommandSetFilterSetTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetFilterSetTypeArchive)
}
CommandSetFilterSetTypeArchive::CommandSetFilterSetTypeArchive(const CommandSetFilterSetTypeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetFilterSetTypeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollback_uid_list_){from._impl_.rollback_uid_list_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_filter_set_type_){}
    , decltype(_impl_.new_filter_set_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.old_filter_set_type_, &from._impl_.old_filter_set_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.new_filter_set_type_) -
    reinterpret_cast<char*>(&_impl_.old_filter_set_type_)) + sizeof(_impl_.new_filter_set_type_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetFilterSetTypeArchive)
}

inline void CommandSetFilterSetTypeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollback_uid_list_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_filter_set_type_){0}
    , decltype(_impl_.new_filter_set_type_){0}
  };
}

CommandSetFilterSetTypeArchive::~CommandSetFilterSetTypeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetFilterSetTypeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetFilterSetTypeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rollback_uid_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandSetFilterSetTypeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetFilterSetTypeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetFilterSetTypeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rollback_uid_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.old_filter_set_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.new_filter_set_type_) -
        reinterpret_cast<char*>(&_impl_.old_filter_set_type_)) + sizeof(_impl_.new_filter_set_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFilterSetTypeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::FilterSetArchive_FilterSetType_IsValid(val))) {
            _internal_set_old_filter_set_type(static_cast<::TST::FilterSetArchive_FilterSetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::FilterSetArchive_FilterSetType_IsValid(val))) {
            _internal_set_new_filter_set_type(static_cast<::TST::FilterSetArchive_FilterSetType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID rollback_uid_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollback_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetFilterSetTypeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetFilterSetTypeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_old_filter_set_type(), target);
  }

  // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_new_filter_set_type(), target);
  }

  // repeated .TSP.UUID rollback_uid_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rollback_uid_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_rollback_uid_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetFilterSetTypeArchive)
  return target;
}

size_t CommandSetFilterSetTypeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetFilterSetTypeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_new_filter_set_type()) {
    // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_filter_set_type());
  }

  return total_size;
}
size_t CommandSetFilterSetTypeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetFilterSetTypeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.FilterSetArchive.FilterSetType new_filter_set_type = 3;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_new_filter_set_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID rollback_uid_list = 4;
  total_size += 1UL * this->_internal_rollback_uid_list_size();
  for (const auto& msg : this->_impl_.rollback_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TST.FilterSetArchive.FilterSetType old_filter_set_type = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_old_filter_set_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetFilterSetTypeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetFilterSetTypeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetFilterSetTypeArchive::GetClassData() const { return &_class_data_; }


void CommandSetFilterSetTypeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetFilterSetTypeArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetFilterSetTypeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetFilterSetTypeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rollback_uid_list_.MergeFrom(from._impl_.rollback_uid_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.old_filter_set_type_ = from._impl_.old_filter_set_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.new_filter_set_type_ = from._impl_.new_filter_set_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetFilterSetTypeArchive::CopyFrom(const CommandSetFilterSetTypeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetFilterSetTypeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFilterSetTypeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rollback_uid_list_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFilterSetTypeArchive::InternalSwap(CommandSetFilterSetTypeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rollback_uid_list_.InternalSwap(&other->_impl_.rollback_uid_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFilterSetTypeArchive, _impl_.new_filter_set_type_)
      + sizeof(CommandSetFilterSetTypeArchive::_impl_.new_filter_set_type_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFilterSetTypeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFilterSetTypeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[73]);
}

// ===================================================================

class CommandSetTextStyleArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTextStyleArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTextStyleArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandSetTextStyleArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandSetTextStyleArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTextStyleArchive::_Internal::super(const CommandSetTextStyleArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSetTextStyleArchive::_Internal::cell_diff_map(const CommandSetTextStyleArchive* msg) {
  return *msg->_impl_.cell_diff_map_;
}
const ::TSP::Reference&
CommandSetTextStyleArchive::_Internal::inverse_cell_diff_map(const CommandSetTextStyleArchive* msg) {
  return *msg->_impl_.inverse_cell_diff_map_;
}
void CommandSetTextStyleArchive::clear_cell_diff_map() {
  if (_impl_.cell_diff_map_ != nullptr) _impl_.cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetTextStyleArchive::clear_inverse_cell_diff_map() {
  if (_impl_.inverse_cell_diff_map_ != nullptr) _impl_.inverse_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSetTextStyleArchive::CommandSetTextStyleArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTextStyleArchive)
}
CommandSetTextStyleArchive::CommandSetTextStyleArchive(const CommandSetTextStyleArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetTextStyleArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_diff_map()) {
    _this->_impl_.cell_diff_map_ = new ::TSP::Reference(*from._impl_.cell_diff_map_);
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    _this->_impl_.inverse_cell_diff_map_ = new ::TSP::Reference(*from._impl_.inverse_cell_diff_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTextStyleArchive)
}

inline void CommandSetTextStyleArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
  };
}

CommandSetTextStyleArchive::~CommandSetTextStyleArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTextStyleArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetTextStyleArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.inverse_cell_diff_map_;
}

void CommandSetTextStyleArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetTextStyleArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTextStyleArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_diff_map_ != nullptr);
      _impl_.cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.inverse_cell_diff_map_ != nullptr);
      _impl_.inverse_cell_diff_map_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTextStyleArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetTextStyleArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTextStyleArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_diff_map(this),
        _Internal::cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::inverse_cell_diff_map(this),
        _Internal::inverse_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTextStyleArchive)
  return target;
}

size_t CommandSetTextStyleArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTextStyleArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);
  }

  return total_size;
}
size_t CommandSetTextStyleArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTextStyleArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.Reference inverse_cell_diff_map = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inverse_cell_diff_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTextStyleArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetTextStyleArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTextStyleArchive::GetClassData() const { return &_class_data_; }


void CommandSetTextStyleArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetTextStyleArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetTextStyleArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTextStyleArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_inverse_cell_diff_map());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTextStyleArchive::CopyFrom(const CommandSetTextStyleArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTextStyleArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTextStyleArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!_impl_.cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!_impl_.inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTextStyleArchive::InternalSwap(CommandSetTextStyleArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTextStyleArchive, _impl_.inverse_cell_diff_map_)
      + sizeof(CommandSetTextStyleArchive::_impl_.inverse_cell_diff_map_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTextStyleArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTextStyleArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[74]);
}

// ===================================================================

class CommandSetTextStylePropertiesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetTextStylePropertiesArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetTextStylePropertiesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandSetTextStylePropertiesArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& inverse_cell_diff_map(const CommandSetTextStylePropertiesArchive* msg);
  static void set_has_inverse_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetTextStylePropertiesArchive::_Internal::super(const CommandSetTextStylePropertiesArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSetTextStylePropertiesArchive::_Internal::cell_diff_map(const CommandSetTextStylePropertiesArchive* msg) {
  return *msg->_impl_.cell_diff_map_;
}
const ::TSP::Reference&
CommandSetTextStylePropertiesArchive::_Internal::inverse_cell_diff_map(const CommandSetTextStylePropertiesArchive* msg) {
  return *msg->_impl_.inverse_cell_diff_map_;
}
void CommandSetTextStylePropertiesArchive::clear_cell_diff_map() {
  if (_impl_.cell_diff_map_ != nullptr) _impl_.cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetTextStylePropertiesArchive::clear_inverse_cell_diff_map() {
  if (_impl_.inverse_cell_diff_map_ != nullptr) _impl_.inverse_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSetTextStylePropertiesArchive::CommandSetTextStylePropertiesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetTextStylePropertiesArchive)
}
CommandSetTextStylePropertiesArchive::CommandSetTextStylePropertiesArchive(const CommandSetTextStylePropertiesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetTextStylePropertiesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_was_rich_text_){from._impl_.cell_was_rich_text_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_diff_map()) {
    _this->_impl_.cell_diff_map_ = new ::TSP::Reference(*from._impl_.cell_diff_map_);
  }
  if (from._internal_has_inverse_cell_diff_map()) {
    _this->_impl_.inverse_cell_diff_map_ = new ::TSP::Reference(*from._impl_.inverse_cell_diff_map_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetTextStylePropertiesArchive)
}

inline void CommandSetTextStylePropertiesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cell_was_rich_text_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.inverse_cell_diff_map_){nullptr}
  };
}

CommandSetTextStylePropertiesArchive::~CommandSetTextStylePropertiesArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetTextStylePropertiesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetTextStylePropertiesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cell_was_rich_text_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.inverse_cell_diff_map_;
}

void CommandSetTextStylePropertiesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetTextStylePropertiesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetTextStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cell_was_rich_text_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_diff_map_ != nullptr);
      _impl_.cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.inverse_cell_diff_map_ != nullptr);
      _impl_.inverse_cell_diff_map_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetTextStylePropertiesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bool cell_was_rich_text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cell_was_rich_text(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_cell_was_rich_text(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference inverse_cell_diff_map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_inverse_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetTextStylePropertiesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetTextStylePropertiesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_diff_map(this),
        _Internal::cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // repeated bool cell_was_rich_text = 3;
  for (int i = 0, n = this->_internal_cell_was_rich_text_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_cell_was_rich_text(i), target);
  }

  // optional .TSP.Reference inverse_cell_diff_map = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::inverse_cell_diff_map(this),
        _Internal::inverse_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetTextStylePropertiesArchive)
  return target;
}

size_t CommandSetTextStylePropertiesArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetTextStylePropertiesArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);
  }

  return total_size;
}
size_t CommandSetTextStylePropertiesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetTextStylePropertiesArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference cell_diff_map = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool cell_was_rich_text = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_cell_was_rich_text_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_cell_was_rich_text_size());
    total_size += data_size;
  }

  // optional .TSP.Reference inverse_cell_diff_map = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inverse_cell_diff_map_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetTextStylePropertiesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetTextStylePropertiesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetTextStylePropertiesArchive::GetClassData() const { return &_class_data_; }


void CommandSetTextStylePropertiesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetTextStylePropertiesArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetTextStylePropertiesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetTextStylePropertiesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cell_was_rich_text_.MergeFrom(from._impl_.cell_was_rich_text_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_inverse_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_inverse_cell_diff_map());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetTextStylePropertiesArchive::CopyFrom(const CommandSetTextStylePropertiesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetTextStylePropertiesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetTextStylePropertiesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!_impl_.cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_inverse_cell_diff_map()) {
    if (!_impl_.inverse_cell_diff_map_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetTextStylePropertiesArchive::InternalSwap(CommandSetTextStylePropertiesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.cell_was_rich_text_.InternalSwap(&other->_impl_.cell_was_rich_text_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetTextStylePropertiesArchive, _impl_.inverse_cell_diff_map_)
      + sizeof(CommandSetTextStylePropertiesArchive::_impl_.inverse_cell_diff_map_)
      - PROTOBUF_FIELD_OFFSET(CommandSetTextStylePropertiesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetTextStylePropertiesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[75]);
}

// ===================================================================

class CommandJustForNotifyingArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandJustForNotifyingArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandJustForNotifyingArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_change_descriptor_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandJustForNotifyingArchive::_Internal::super(const CommandJustForNotifyingArchive* msg) {
  return *msg->_impl_.super_;
}
CommandJustForNotifyingArchive::CommandJustForNotifyingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandJustForNotifyingArchive)
}
CommandJustForNotifyingArchive::CommandJustForNotifyingArchive(const CommandJustForNotifyingArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandJustForNotifyingArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.change_descriptor_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  _this->_impl_.change_descriptor_type_ = from._impl_.change_descriptor_type_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandJustForNotifyingArchive)
}

inline void CommandJustForNotifyingArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.change_descriptor_type_){0u}
  };
}

CommandJustForNotifyingArchive::~CommandJustForNotifyingArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandJustForNotifyingArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandJustForNotifyingArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandJustForNotifyingArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandJustForNotifyingArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandJustForNotifyingArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.change_descriptor_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandJustForNotifyingArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 change_descriptor_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_change_descriptor_type(&has_bits);
          _impl_.change_descriptor_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandJustForNotifyingArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandJustForNotifyingArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 change_descriptor_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_change_descriptor_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandJustForNotifyingArchive)
  return target;
}

size_t CommandJustForNotifyingArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandJustForNotifyingArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_change_descriptor_type()) {
    // required uint32 change_descriptor_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_change_descriptor_type());
  }

  return total_size;
}
size_t CommandJustForNotifyingArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandJustForNotifyingArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 change_descriptor_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_change_descriptor_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandJustForNotifyingArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandJustForNotifyingArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandJustForNotifyingArchive::GetClassData() const { return &_class_data_; }


void CommandJustForNotifyingArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandJustForNotifyingArchive*>(&to_msg);
  auto& from = static_cast<const CommandJustForNotifyingArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandJustForNotifyingArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.change_descriptor_type_ = from._impl_.change_descriptor_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandJustForNotifyingArchive::CopyFrom(const CommandJustForNotifyingArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandJustForNotifyingArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandJustForNotifyingArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandJustForNotifyingArchive::InternalSwap(CommandJustForNotifyingArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandJustForNotifyingArchive, _impl_.change_descriptor_type_)
      + sizeof(CommandJustForNotifyingArchive::_impl_.change_descriptor_type_)
      - PROTOBUF_FIELD_OFFSET(CommandJustForNotifyingArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandJustForNotifyingArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[76]);
}

// ===================================================================

class CommandSetStorageLanguageArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetStorageLanguageArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandSetStorageLanguageArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& storage(const CommandSetStorageLanguageArchive* msg);
  static void set_has_storage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_language(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_range_location(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_range_length(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSWP::UndoTransaction& undo_transaction(const CommandSetStorageLanguageArchive* msg);
  static void set_has_undo_transaction(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000037) ^ 0x00000037) != 0;
  }
};

const ::TSK::CommandArchive&
CommandSetStorageLanguageArchive::_Internal::super(const CommandSetStorageLanguageArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSetStorageLanguageArchive::_Internal::storage(const CommandSetStorageLanguageArchive* msg) {
  return *msg->_impl_.storage_;
}
const ::TSWP::UndoTransaction&
CommandSetStorageLanguageArchive::_Internal::undo_transaction(const CommandSetStorageLanguageArchive* msg) {
  return *msg->_impl_.undo_transaction_;
}
void CommandSetStorageLanguageArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetStorageLanguageArchive::clear_storage() {
  if (_impl_.storage_ != nullptr) _impl_.storage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSetStorageLanguageArchive::clear_undo_transaction() {
  if (_impl_.undo_transaction_ != nullptr) _impl_.undo_transaction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandSetStorageLanguageArchive::CommandSetStorageLanguageArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetStorageLanguageArchive)
}
CommandSetStorageLanguageArchive::CommandSetStorageLanguageArchive(const CommandSetStorageLanguageArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetStorageLanguageArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.language_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.storage_){nullptr}
    , decltype(_impl_.undo_transaction_){nullptr}
    , decltype(_impl_.range_location_){}
    , decltype(_impl_.range_length_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_language()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_storage()) {
    _this->_impl_.storage_ = new ::TSP::Reference(*from._impl_.storage_);
  }
  if (from._internal_has_undo_transaction()) {
    _this->_impl_.undo_transaction_ = new ::TSWP::UndoTransaction(*from._impl_.undo_transaction_);
  }
  ::memcpy(&_impl_.range_location_, &from._impl_.range_location_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.range_length_) -
    reinterpret_cast<char*>(&_impl_.range_location_)) + sizeof(_impl_.range_length_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetStorageLanguageArchive)
}

inline void CommandSetStorageLanguageArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.language_){}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.storage_){nullptr}
    , decltype(_impl_.undo_transaction_){nullptr}
    , decltype(_impl_.range_location_){0u}
    , decltype(_impl_.range_length_){0u}
  };
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CommandSetStorageLanguageArchive::~CommandSetStorageLanguageArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetStorageLanguageArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetStorageLanguageArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.language_.Destroy();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.storage_;
  if (this != internal_default_instance()) delete _impl_.undo_transaction_;
}

void CommandSetStorageLanguageArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetStorageLanguageArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetStorageLanguageArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.storage_ != nullptr);
      _impl_.storage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.undo_transaction_ != nullptr);
      _impl_.undo_transaction_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.range_location_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.range_length_) -
        reinterpret_cast<char*>(&_impl_.range_location_)) + sizeof(_impl_.range_length_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetStorageLanguageArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference storage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_storage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string language = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TST.CommandSetStorageLanguageArchive.language");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required uint32 range_location = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_range_location(&has_bits);
          _impl_.range_location_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 range_length = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_range_length(&has_bits);
          _impl_.range_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSWP.UndoTransaction undo_transaction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetStorageLanguageArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetStorageLanguageArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference storage = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::storage(this),
        _Internal::storage(this).GetCachedSize(), target, stream);
  }

  // required string language = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TST.CommandSetStorageLanguageArchive.language");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_language(), target);
  }

  // required uint32 range_location = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_range_location(), target);
  }

  // required uint32 range_length = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_range_length(), target);
  }

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::undo_transaction(this),
        _Internal::undo_transaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetStorageLanguageArchive)
  return target;
}

size_t CommandSetStorageLanguageArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetStorageLanguageArchive)
  size_t total_size = 0;

  if (_internal_has_language()) {
    // required string language = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_storage()) {
    // required .TSP.Reference storage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storage_);
  }

  if (_internal_has_range_location()) {
    // required uint32 range_location = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range_location());
  }

  if (_internal_has_range_length()) {
    // required uint32 range_length = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range_length());
  }

  return total_size;
}
size_t CommandSetStorageLanguageArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetStorageLanguageArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000037) ^ 0x00000037) == 0) {  // All required fields are present.
    // required string language = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());

    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference storage = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.storage_);

    // required uint32 range_location = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range_location());

    // required uint32 range_length = 5;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_range_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSWP.UndoTransaction undo_transaction = 6;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.undo_transaction_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetStorageLanguageArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetStorageLanguageArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetStorageLanguageArchive::GetClassData() const { return &_class_data_; }


void CommandSetStorageLanguageArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetStorageLanguageArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetStorageLanguageArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetStorageLanguageArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_language(from._internal_language());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_storage()->::TSP::Reference::MergeFrom(
          from._internal_storage());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_undo_transaction()->::TSWP::UndoTransaction::MergeFrom(
          from._internal_undo_transaction());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.range_location_ = from._impl_.range_location_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.range_length_ = from._impl_.range_length_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetStorageLanguageArchive::CopyFrom(const CommandSetStorageLanguageArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetStorageLanguageArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetStorageLanguageArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_storage()) {
    if (!_impl_.storage_->IsInitialized()) return false;
  }
  if (_internal_has_undo_transaction()) {
    if (!_impl_.undo_transaction_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetStorageLanguageArchive::InternalSwap(CommandSetStorageLanguageArchive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetStorageLanguageArchive, _impl_.range_length_)
      + sizeof(CommandSetStorageLanguageArchive::_impl_.range_length_)
      - PROTOBUF_FIELD_OFFSET(CommandSetStorageLanguageArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetStorageLanguageArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[77]);
}

// ===================================================================

class CommandSetSortOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetSortOrderArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetSortOrderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::TableSortOrderArchive& old_sort_order(const CommandSetSortOrderArchive* msg);
  static void set_has_old_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TableSortOrderArchive& new_sort_order(const CommandSetSortOrderArchive* msg);
  static void set_has_new_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetSortOrderArchive::_Internal::super(const CommandSetSortOrderArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::TableSortOrderArchive&
CommandSetSortOrderArchive::_Internal::old_sort_order(const CommandSetSortOrderArchive* msg) {
  return *msg->_impl_.old_sort_order_;
}
const ::TST::TableSortOrderArchive&
CommandSetSortOrderArchive::_Internal::new_sort_order(const CommandSetSortOrderArchive* msg) {
  return *msg->_impl_.new_sort_order_;
}
void CommandSetSortOrderArchive::clear_old_sort_order() {
  if (_impl_.old_sort_order_ != nullptr) _impl_.old_sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetSortOrderArchive::clear_new_sort_order() {
  if (_impl_.new_sort_order_ != nullptr) _impl_.new_sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSetSortOrderArchive::CommandSetSortOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetSortOrderArchive)
}
CommandSetSortOrderArchive::CommandSetSortOrderArchive(const CommandSetSortOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetSortOrderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_sort_order_){nullptr}
    , decltype(_impl_.new_sort_order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_sort_order()) {
    _this->_impl_.old_sort_order_ = new ::TST::TableSortOrderArchive(*from._impl_.old_sort_order_);
  }
  if (from._internal_has_new_sort_order()) {
    _this->_impl_.new_sort_order_ = new ::TST::TableSortOrderArchive(*from._impl_.new_sort_order_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetSortOrderArchive)
}

inline void CommandSetSortOrderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_sort_order_){nullptr}
    , decltype(_impl_.new_sort_order_){nullptr}
  };
}

CommandSetSortOrderArchive::~CommandSetSortOrderArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetSortOrderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetSortOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_sort_order_;
  if (this != internal_default_instance()) delete _impl_.new_sort_order_;
}

void CommandSetSortOrderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetSortOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetSortOrderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_sort_order_ != nullptr);
      _impl_.old_sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_sort_order_ != nullptr);
      _impl_.new_sort_order_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetSortOrderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive old_sort_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive new_sort_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetSortOrderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetSortOrderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_sort_order(this),
        _Internal::old_sort_order(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_sort_order(this),
        _Internal::new_sort_order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetSortOrderArchive)
  return target;
}

size_t CommandSetSortOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetSortOrderArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.TableSortOrderArchive old_sort_order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_sort_order_);
    }

    // optional .TST.TableSortOrderArchive new_sort_order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_sort_order_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetSortOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetSortOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetSortOrderArchive::GetClassData() const { return &_class_data_; }


void CommandSetSortOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetSortOrderArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetSortOrderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetSortOrderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_sort_order()->::TST::TableSortOrderArchive::MergeFrom(
          from._internal_old_sort_order());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_sort_order()->::TST::TableSortOrderArchive::MergeFrom(
          from._internal_new_sort_order());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetSortOrderArchive::CopyFrom(const CommandSetSortOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetSortOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetSortOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_sort_order()) {
    if (!_impl_.old_sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_new_sort_order()) {
    if (!_impl_.new_sort_order_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetSortOrderArchive::InternalSwap(CommandSetSortOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetSortOrderArchive, _impl_.new_sort_order_)
      + sizeof(CommandSetSortOrderArchive::_impl_.new_sort_order_)
      - PROTOBUF_FIELD_OFFSET(CommandSetSortOrderArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetSortOrderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[78]);
}

// ===================================================================

class CommandSetGroupSortOrderArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetGroupSortOrderArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetGroupSortOrderArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::TableGroupSortOrderUIDArchive& old_group_sort_order(const CommandSetGroupSortOrderArchive* msg);
  static void set_has_old_group_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TableGroupSortOrderUIDArchive& new_group_sort_order(const CommandSetGroupSortOrderArchive* msg);
  static void set_has_new_group_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetGroupSortOrderArchive::_Internal::super(const CommandSetGroupSortOrderArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::TableGroupSortOrderUIDArchive&
CommandSetGroupSortOrderArchive::_Internal::old_group_sort_order(const CommandSetGroupSortOrderArchive* msg) {
  return *msg->_impl_.old_group_sort_order_;
}
const ::TST::TableGroupSortOrderUIDArchive&
CommandSetGroupSortOrderArchive::_Internal::new_group_sort_order(const CommandSetGroupSortOrderArchive* msg) {
  return *msg->_impl_.new_group_sort_order_;
}
void CommandSetGroupSortOrderArchive::clear_old_group_sort_order() {
  if (_impl_.old_group_sort_order_ != nullptr) _impl_.old_group_sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetGroupSortOrderArchive::clear_new_group_sort_order() {
  if (_impl_.new_group_sort_order_ != nullptr) _impl_.new_group_sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSetGroupSortOrderArchive::CommandSetGroupSortOrderArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetGroupSortOrderArchive)
}
CommandSetGroupSortOrderArchive::CommandSetGroupSortOrderArchive(const CommandSetGroupSortOrderArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetGroupSortOrderArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_group_sort_order_){nullptr}
    , decltype(_impl_.new_group_sort_order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_group_sort_order()) {
    _this->_impl_.old_group_sort_order_ = new ::TST::TableGroupSortOrderUIDArchive(*from._impl_.old_group_sort_order_);
  }
  if (from._internal_has_new_group_sort_order()) {
    _this->_impl_.new_group_sort_order_ = new ::TST::TableGroupSortOrderUIDArchive(*from._impl_.new_group_sort_order_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetGroupSortOrderArchive)
}

inline void CommandSetGroupSortOrderArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_group_sort_order_){nullptr}
    , decltype(_impl_.new_group_sort_order_){nullptr}
  };
}

CommandSetGroupSortOrderArchive::~CommandSetGroupSortOrderArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetGroupSortOrderArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetGroupSortOrderArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_group_sort_order_;
  if (this != internal_default_instance()) delete _impl_.new_group_sort_order_;
}

void CommandSetGroupSortOrderArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetGroupSortOrderArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetGroupSortOrderArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_group_sort_order_ != nullptr);
      _impl_.old_group_sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_group_sort_order_ != nullptr);
      _impl_.new_group_sort_order_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetGroupSortOrderArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableGroupSortOrderUIDArchive old_group_sort_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_group_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableGroupSortOrderUIDArchive new_group_sort_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_group_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetGroupSortOrderArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetGroupSortOrderArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableGroupSortOrderUIDArchive old_group_sort_order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_group_sort_order(this),
        _Internal::old_group_sort_order(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableGroupSortOrderUIDArchive new_group_sort_order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_group_sort_order(this),
        _Internal::new_group_sort_order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetGroupSortOrderArchive)
  return target;
}

size_t CommandSetGroupSortOrderArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetGroupSortOrderArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.TableGroupSortOrderUIDArchive old_group_sort_order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_group_sort_order_);
    }

    // optional .TST.TableGroupSortOrderUIDArchive new_group_sort_order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_group_sort_order_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetGroupSortOrderArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetGroupSortOrderArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetGroupSortOrderArchive::GetClassData() const { return &_class_data_; }


void CommandSetGroupSortOrderArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetGroupSortOrderArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetGroupSortOrderArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetGroupSortOrderArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_group_sort_order()->::TST::TableGroupSortOrderUIDArchive::MergeFrom(
          from._internal_old_group_sort_order());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_group_sort_order()->::TST::TableGroupSortOrderUIDArchive::MergeFrom(
          from._internal_new_group_sort_order());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetGroupSortOrderArchive::CopyFrom(const CommandSetGroupSortOrderArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetGroupSortOrderArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetGroupSortOrderArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_group_sort_order()) {
    if (!_impl_.old_group_sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_new_group_sort_order()) {
    if (!_impl_.new_group_sort_order_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetGroupSortOrderArchive::InternalSwap(CommandSetGroupSortOrderArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetGroupSortOrderArchive, _impl_.new_group_sort_order_)
      + sizeof(CommandSetGroupSortOrderArchive::_impl_.new_group_sort_order_)
      - PROTOBUF_FIELD_OFFSET(CommandSetGroupSortOrderArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetGroupSortOrderArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[79]);
}

// ===================================================================

class CommandRewriteSortOrderForTableResizeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteSortOrderForTableResizeArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteSortOrderForTableResizeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::TableSortOrderArchive& old_sort_order(const CommandRewriteSortOrderForTableResizeArchive* msg);
  static void set_has_old_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TableSortOrderArchive& new_sort_order(const CommandRewriteSortOrderForTableResizeArchive* msg);
  static void set_has_new_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteSortOrderForTableResizeArchive::_Internal::super(const CommandRewriteSortOrderForTableResizeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::TableSortOrderArchive&
CommandRewriteSortOrderForTableResizeArchive::_Internal::old_sort_order(const CommandRewriteSortOrderForTableResizeArchive* msg) {
  return *msg->_impl_.old_sort_order_;
}
const ::TST::TableSortOrderArchive&
CommandRewriteSortOrderForTableResizeArchive::_Internal::new_sort_order(const CommandRewriteSortOrderForTableResizeArchive* msg) {
  return *msg->_impl_.new_sort_order_;
}
void CommandRewriteSortOrderForTableResizeArchive::clear_old_sort_order() {
  if (_impl_.old_sort_order_ != nullptr) _impl_.old_sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandRewriteSortOrderForTableResizeArchive::clear_new_sort_order() {
  if (_impl_.new_sort_order_ != nullptr) _impl_.new_sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandRewriteSortOrderForTableResizeArchive::CommandRewriteSortOrderForTableResizeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteSortOrderForTableResizeArchive)
}
CommandRewriteSortOrderForTableResizeArchive::CommandRewriteSortOrderForTableResizeArchive(const CommandRewriteSortOrderForTableResizeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewriteSortOrderForTableResizeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_sort_order_){nullptr}
    , decltype(_impl_.new_sort_order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_old_sort_order()) {
    _this->_impl_.old_sort_order_ = new ::TST::TableSortOrderArchive(*from._impl_.old_sort_order_);
  }
  if (from._internal_has_new_sort_order()) {
    _this->_impl_.new_sort_order_ = new ::TST::TableSortOrderArchive(*from._impl_.new_sort_order_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteSortOrderForTableResizeArchive)
}

inline void CommandRewriteSortOrderForTableResizeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.old_sort_order_){nullptr}
    , decltype(_impl_.new_sort_order_){nullptr}
  };
}

CommandRewriteSortOrderForTableResizeArchive::~CommandRewriteSortOrderForTableResizeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteSortOrderForTableResizeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewriteSortOrderForTableResizeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.old_sort_order_;
  if (this != internal_default_instance()) delete _impl_.new_sort_order_;
}

void CommandRewriteSortOrderForTableResizeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewriteSortOrderForTableResizeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteSortOrderForTableResizeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.old_sort_order_ != nullptr);
      _impl_.old_sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_sort_order_ != nullptr);
      _impl_.new_sort_order_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteSortOrderForTableResizeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive old_sort_order = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive new_sort_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewriteSortOrderForTableResizeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteSortOrderForTableResizeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::old_sort_order(this),
        _Internal::old_sort_order(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_sort_order(this),
        _Internal::new_sort_order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteSortOrderForTableResizeArchive)
  return target;
}

size_t CommandRewriteSortOrderForTableResizeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteSortOrderForTableResizeArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.TableSortOrderArchive old_sort_order = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_sort_order_);
    }

    // optional .TST.TableSortOrderArchive new_sort_order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_sort_order_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteSortOrderForTableResizeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewriteSortOrderForTableResizeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteSortOrderForTableResizeArchive::GetClassData() const { return &_class_data_; }


void CommandRewriteSortOrderForTableResizeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewriteSortOrderForTableResizeArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewriteSortOrderForTableResizeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteSortOrderForTableResizeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_old_sort_order()->::TST::TableSortOrderArchive::MergeFrom(
          from._internal_old_sort_order());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_sort_order()->::TST::TableSortOrderArchive::MergeFrom(
          from._internal_new_sort_order());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteSortOrderForTableResizeArchive::CopyFrom(const CommandRewriteSortOrderForTableResizeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteSortOrderForTableResizeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteSortOrderForTableResizeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_old_sort_order()) {
    if (!_impl_.old_sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_new_sort_order()) {
    if (!_impl_.new_sort_order_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteSortOrderForTableResizeArchive::InternalSwap(CommandRewriteSortOrderForTableResizeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteSortOrderForTableResizeArchive, _impl_.new_sort_order_)
      + sizeof(CommandRewriteSortOrderForTableResizeArchive::_impl_.new_sort_order_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteSortOrderForTableResizeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteSortOrderForTableResizeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[80]);
}

// ===================================================================

class CommandRewriteSortOrderForRewriteSpecArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteSortOrderForRewriteSpecArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteSortOrderForRewriteSpecArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteSortOrderForRewriteSpecArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::TableSortOrderArchive& old_sort_order(const CommandRewriteSortOrderForRewriteSpecArchive* msg);
  static void set_has_old_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::TableSortOrderArchive& new_sort_order(const CommandRewriteSortOrderForRewriteSpecArchive* msg);
  static void set_has_new_sort_order(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteSortOrderForRewriteSpecArchive::_Internal::super(const CommandRewriteSortOrderForRewriteSpecArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::FormulaRewriteSpecArchive&
CommandRewriteSortOrderForRewriteSpecArchive::_Internal::rewrite_spec(const CommandRewriteSortOrderForRewriteSpecArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
const ::TST::TableSortOrderArchive&
CommandRewriteSortOrderForRewriteSpecArchive::_Internal::old_sort_order(const CommandRewriteSortOrderForRewriteSpecArchive* msg) {
  return *msg->_impl_.old_sort_order_;
}
const ::TST::TableSortOrderArchive&
CommandRewriteSortOrderForRewriteSpecArchive::_Internal::new_sort_order(const CommandRewriteSortOrderForRewriteSpecArchive* msg) {
  return *msg->_impl_.new_sort_order_;
}
void CommandRewriteSortOrderForRewriteSpecArchive::clear_old_sort_order() {
  if (_impl_.old_sort_order_ != nullptr) _impl_.old_sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandRewriteSortOrderForRewriteSpecArchive::clear_new_sort_order() {
  if (_impl_.new_sort_order_ != nullptr) _impl_.new_sort_order_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandRewriteSortOrderForRewriteSpecArchive::CommandRewriteSortOrderForRewriteSpecArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteSortOrderForRewriteSpecArchive)
}
CommandRewriteSortOrderForRewriteSpecArchive::CommandRewriteSortOrderForRewriteSpecArchive(const CommandRewriteSortOrderForRewriteSpecArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewriteSortOrderForRewriteSpecArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.old_sort_order_){nullptr}
    , decltype(_impl_.new_sort_order_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TST::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  if (from._internal_has_old_sort_order()) {
    _this->_impl_.old_sort_order_ = new ::TST::TableSortOrderArchive(*from._impl_.old_sort_order_);
  }
  if (from._internal_has_new_sort_order()) {
    _this->_impl_.new_sort_order_ = new ::TST::TableSortOrderArchive(*from._impl_.new_sort_order_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteSortOrderForRewriteSpecArchive)
}

inline void CommandRewriteSortOrderForRewriteSpecArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.old_sort_order_){nullptr}
    , decltype(_impl_.new_sort_order_){nullptr}
  };
}

CommandRewriteSortOrderForRewriteSpecArchive::~CommandRewriteSortOrderForRewriteSpecArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewriteSortOrderForRewriteSpecArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
  if (this != internal_default_instance()) delete _impl_.old_sort_order_;
  if (this != internal_default_instance()) delete _impl_.new_sort_order_;
}

void CommandRewriteSortOrderForRewriteSpecArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewriteSortOrderForRewriteSpecArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_sort_order_ != nullptr);
      _impl_.old_sort_order_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.new_sort_order_ != nullptr);
      _impl_.new_sort_order_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteSortOrderForRewriteSpecArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive old_sort_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableSortOrderArchive new_sort_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_sort_order(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewriteSortOrderForRewriteSpecArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableSortOrderArchive old_sort_order = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_sort_order(this),
        _Internal::old_sort_order(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableSortOrderArchive new_sort_order = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::new_sort_order(this),
        _Internal::new_sort_order(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  return target;
}

size_t CommandRewriteSortOrderForRewriteSpecArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);
  }

  return total_size;
}
size_t CommandRewriteSortOrderForRewriteSpecArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TST.TableSortOrderArchive old_sort_order = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_sort_order_);
    }

    // optional .TST.TableSortOrderArchive new_sort_order = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_sort_order_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteSortOrderForRewriteSpecArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewriteSortOrderForRewriteSpecArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteSortOrderForRewriteSpecArchive::GetClassData() const { return &_class_data_; }


void CommandRewriteSortOrderForRewriteSpecArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewriteSortOrderForRewriteSpecArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewriteSortOrderForRewriteSpecArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rewrite_spec()->::TST::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_sort_order()->::TST::TableSortOrderArchive::MergeFrom(
          from._internal_old_sort_order());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_new_sort_order()->::TST::TableSortOrderArchive::MergeFrom(
          from._internal_new_sort_order());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteSortOrderForRewriteSpecArchive::CopyFrom(const CommandRewriteSortOrderForRewriteSpecArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteSortOrderForRewriteSpecArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteSortOrderForRewriteSpecArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_old_sort_order()) {
    if (!_impl_.old_sort_order_->IsInitialized()) return false;
  }
  if (_internal_has_new_sort_order()) {
    if (!_impl_.new_sort_order_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteSortOrderForRewriteSpecArchive::InternalSwap(CommandRewriteSortOrderForRewriteSpecArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteSortOrderForRewriteSpecArchive, _impl_.new_sort_order_)
      + sizeof(CommandRewriteSortOrderForRewriteSpecArchive::_impl_.new_sort_order_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteSortOrderForRewriteSpecArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteSortOrderForRewriteSpecArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[81]);
}

// ===================================================================

class CommandSetFilterSetArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetFilterSetArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetFilterSetArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& new_filter_set(const CommandSetFilterSetArchive* msg);
  static void set_has_new_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& old_filter_set(const CommandSetFilterSetArchive* msg);
  static void set_has_old_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetFilterSetArchive::_Internal::super(const CommandSetFilterSetArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandSetFilterSetArchive::_Internal::new_filter_set(const CommandSetFilterSetArchive* msg) {
  return *msg->_impl_.new_filter_set_;
}
const ::TSP::Reference&
CommandSetFilterSetArchive::_Internal::old_filter_set(const CommandSetFilterSetArchive* msg) {
  return *msg->_impl_.old_filter_set_;
}
void CommandSetFilterSetArchive::clear_new_filter_set() {
  if (_impl_.new_filter_set_ != nullptr) _impl_.new_filter_set_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetFilterSetArchive::clear_old_filter_set() {
  if (_impl_.old_filter_set_ != nullptr) _impl_.old_filter_set_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandSetFilterSetArchive::clear_rollback_uid_list() {
  _impl_.rollback_uid_list_.Clear();
}
CommandSetFilterSetArchive::CommandSetFilterSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetFilterSetArchive)
}
CommandSetFilterSetArchive::CommandSetFilterSetArchive(const CommandSetFilterSetArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetFilterSetArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollback_uid_list_){from._impl_.rollback_uid_list_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_filter_set_){nullptr}
    , decltype(_impl_.old_filter_set_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_new_filter_set()) {
    _this->_impl_.new_filter_set_ = new ::TSP::Reference(*from._impl_.new_filter_set_);
  }
  if (from._internal_has_old_filter_set()) {
    _this->_impl_.old_filter_set_ = new ::TSP::Reference(*from._impl_.old_filter_set_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetFilterSetArchive)
}

inline void CommandSetFilterSetArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rollback_uid_list_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_filter_set_){nullptr}
    , decltype(_impl_.old_filter_set_){nullptr}
  };
}

CommandSetFilterSetArchive::~CommandSetFilterSetArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetFilterSetArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetFilterSetArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rollback_uid_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.new_filter_set_;
  if (this != internal_default_instance()) delete _impl_.old_filter_set_;
}

void CommandSetFilterSetArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetFilterSetArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetFilterSetArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rollback_uid_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_filter_set_ != nullptr);
      _impl_.new_filter_set_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_filter_set_ != nullptr);
      _impl_.old_filter_set_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetFilterSetArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference new_filter_set = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_filter_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_filter_set = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_filter_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID rollback_uid_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rollback_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetFilterSetArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetFilterSetArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference new_filter_set = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_filter_set(this),
        _Internal::new_filter_set(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_filter_set = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_filter_set(this),
        _Internal::old_filter_set(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID rollback_uid_list = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rollback_uid_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_rollback_uid_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetFilterSetArchive)
  return target;
}

size_t CommandSetFilterSetArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandSetFilterSetArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_new_filter_set()) {
    // required .TSP.Reference new_filter_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_filter_set_);
  }

  return total_size;
}
size_t CommandSetFilterSetArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetFilterSetArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference new_filter_set = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_filter_set_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID rollback_uid_list = 4;
  total_size += 1UL * this->_internal_rollback_uid_list_size();
  for (const auto& msg : this->_impl_.rollback_uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .TSP.Reference old_filter_set = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.old_filter_set_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetFilterSetArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetFilterSetArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetFilterSetArchive::GetClassData() const { return &_class_data_; }


void CommandSetFilterSetArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetFilterSetArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetFilterSetArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetFilterSetArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rollback_uid_list_.MergeFrom(from._impl_.rollback_uid_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_filter_set()->::TSP::Reference::MergeFrom(
          from._internal_new_filter_set());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_filter_set()->::TSP::Reference::MergeFrom(
          from._internal_old_filter_set());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetFilterSetArchive::CopyFrom(const CommandSetFilterSetArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetFilterSetArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetFilterSetArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rollback_uid_list_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_new_filter_set()) {
    if (!_impl_.new_filter_set_->IsInitialized()) return false;
  }
  if (_internal_has_old_filter_set()) {
    if (!_impl_.old_filter_set_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetFilterSetArchive::InternalSwap(CommandSetFilterSetArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rollback_uid_list_.InternalSwap(&other->_impl_.rollback_uid_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetFilterSetArchive, _impl_.old_filter_set_)
      + sizeof(CommandSetFilterSetArchive::_impl_.old_filter_set_)
      - PROTOBUF_FIELD_OFFSET(CommandSetFilterSetArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetFilterSetArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[82]);
}

// ===================================================================

class ColumnRowRestoreDataArchive::_Internal {
 public:
};

void ColumnRowRestoreDataArchive::clear_uid_list() {
  _impl_.uid_list_.Clear();
}
ColumnRowRestoreDataArchive::ColumnRowRestoreDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ColumnRowRestoreDataArchive)
}
ColumnRowRestoreDataArchive::ColumnRowRestoreDataArchive(const ColumnRowRestoreDataArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ColumnRowRestoreDataArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_list_){from._impl_.uid_list_}
    , decltype(_impl_.metadatas_){from._impl_.metadatas_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TST.ColumnRowRestoreDataArchive)
}

inline void ColumnRowRestoreDataArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uid_list_){arena}
    , decltype(_impl_.metadatas_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ColumnRowRestoreDataArchive::~ColumnRowRestoreDataArchive() {
  // @@protoc_insertion_point(destructor:TST.ColumnRowRestoreDataArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColumnRowRestoreDataArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uid_list_.~RepeatedPtrField();
  _impl_.metadatas_.~RepeatedPtrField();
}

void ColumnRowRestoreDataArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ColumnRowRestoreDataArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ColumnRowRestoreDataArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_list_.Clear();
  _impl_.metadatas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColumnRowRestoreDataArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .TSP.UUID uid_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_uid_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.ColumnRowMetadataArchive metadatas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metadatas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColumnRowRestoreDataArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ColumnRowRestoreDataArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .TSP.UUID uid_list = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_uid_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_uid_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TST.ColumnRowMetadataArchive metadatas = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metadatas_size()); i < n; i++) {
    const auto& repfield = this->_internal_metadatas(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ColumnRowRestoreDataArchive)
  return target;
}

size_t ColumnRowRestoreDataArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ColumnRowRestoreDataArchive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID uid_list = 1;
  total_size += 1UL * this->_internal_uid_list_size();
  for (const auto& msg : this->_impl_.uid_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TST.ColumnRowMetadataArchive metadatas = 2;
  total_size += 1UL * this->_internal_metadatas_size();
  for (const auto& msg : this->_impl_.metadatas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColumnRowRestoreDataArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ColumnRowRestoreDataArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColumnRowRestoreDataArchive::GetClassData() const { return &_class_data_; }


void ColumnRowRestoreDataArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ColumnRowRestoreDataArchive*>(&to_msg);
  auto& from = static_cast<const ColumnRowRestoreDataArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ColumnRowRestoreDataArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uid_list_.MergeFrom(from._impl_.uid_list_);
  _this->_impl_.metadatas_.MergeFrom(from._impl_.metadatas_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColumnRowRestoreDataArchive::CopyFrom(const ColumnRowRestoreDataArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ColumnRowRestoreDataArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnRowRestoreDataArchive::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.uid_list_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.metadatas_))
    return false;
  return true;
}

void ColumnRowRestoreDataArchive::InternalSwap(ColumnRowRestoreDataArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uid_list_.InternalSwap(&other->_impl_.uid_list_);
  _impl_.metadatas_.InternalSwap(&other->_impl_.metadatas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ColumnRowRestoreDataArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[83]);
}

// ===================================================================

class CommandTransposeTableArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandTransposeTableArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandTransposeTableArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::ExpandedCellRange& original_table_range(const CommandTransposeTableArchive* msg);
  static void set_has_original_table_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& original_cell_map(const CommandTransposeTableArchive* msg);
  static void set_has_original_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_original_footer_row_count(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& transposed_cell_map(const CommandTransposeTableArchive* msg);
  static void set_has_transposed_cell_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::Reference& undo_formula_rewrite_command(const CommandTransposeTableArchive* msg);
  static void set_has_undo_formula_rewrite_command(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& rich_text_subcommands(const CommandTransposeTableArchive* msg);
  static void set_has_rich_text_subcommands(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TST::ColumnRowRestoreDataArchive& column_restore_data(const CommandTransposeTableArchive* msg);
  static void set_has_column_restore_data(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TST::ColumnRowRestoreDataArchive& row_restore_data(const CommandTransposeTableArchive* msg);
  static void set_has_row_restore_data(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000010f) ^ 0x0000010f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandTransposeTableArchive::_Internal::super(const CommandTransposeTableArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::ExpandedCellRange&
CommandTransposeTableArchive::_Internal::original_table_range(const CommandTransposeTableArchive* msg) {
  return *msg->_impl_.original_table_range_;
}
const ::TSP::Reference&
CommandTransposeTableArchive::_Internal::original_cell_map(const CommandTransposeTableArchive* msg) {
  return *msg->_impl_.original_cell_map_;
}
const ::TSP::Reference&
CommandTransposeTableArchive::_Internal::transposed_cell_map(const CommandTransposeTableArchive* msg) {
  return *msg->_impl_.transposed_cell_map_;
}
const ::TSP::Reference&
CommandTransposeTableArchive::_Internal::undo_formula_rewrite_command(const CommandTransposeTableArchive* msg) {
  return *msg->_impl_.undo_formula_rewrite_command_;
}
const ::TSP::Reference&
CommandTransposeTableArchive::_Internal::rich_text_subcommands(const CommandTransposeTableArchive* msg) {
  return *msg->_impl_.rich_text_subcommands_;
}
const ::TST::ColumnRowRestoreDataArchive&
CommandTransposeTableArchive::_Internal::column_restore_data(const CommandTransposeTableArchive* msg) {
  return *msg->_impl_.column_restore_data_;
}
const ::TST::ColumnRowRestoreDataArchive&
CommandTransposeTableArchive::_Internal::row_restore_data(const CommandTransposeTableArchive* msg) {
  return *msg->_impl_.row_restore_data_;
}
void CommandTransposeTableArchive::clear_original_table_range() {
  if (_impl_.original_table_range_ != nullptr) _impl_.original_table_range_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandTransposeTableArchive::clear_original_cell_map() {
  if (_impl_.original_cell_map_ != nullptr) _impl_.original_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandTransposeTableArchive::clear_ineligible_merge_list() {
  _impl_.ineligible_merge_list_.Clear();
}
void CommandTransposeTableArchive::clear_transposed_cell_map() {
  if (_impl_.transposed_cell_map_ != nullptr) _impl_.transposed_cell_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandTransposeTableArchive::clear_undo_formula_rewrite_command() {
  if (_impl_.undo_formula_rewrite_command_ != nullptr) _impl_.undo_formula_rewrite_command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandTransposeTableArchive::clear_rich_text_subcommands() {
  if (_impl_.rich_text_subcommands_ != nullptr) _impl_.rich_text_subcommands_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CommandTransposeTableArchive::CommandTransposeTableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandTransposeTableArchive)
}
CommandTransposeTableArchive::CommandTransposeTableArchive(const CommandTransposeTableArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandTransposeTableArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.original_column_widths_){from._impl_.original_column_widths_}
    , decltype(_impl_.original_row_heights_){from._impl_.original_row_heights_}
    , decltype(_impl_.ineligible_merge_list_){from._impl_.ineligible_merge_list_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.original_table_range_){nullptr}
    , decltype(_impl_.original_cell_map_){nullptr}
    , decltype(_impl_.transposed_cell_map_){nullptr}
    , decltype(_impl_.undo_formula_rewrite_command_){nullptr}
    , decltype(_impl_.rich_text_subcommands_){nullptr}
    , decltype(_impl_.column_restore_data_){nullptr}
    , decltype(_impl_.row_restore_data_){nullptr}
    , decltype(_impl_.original_footer_row_count_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_original_table_range()) {
    _this->_impl_.original_table_range_ = new ::TST::ExpandedCellRange(*from._impl_.original_table_range_);
  }
  if (from._internal_has_original_cell_map()) {
    _this->_impl_.original_cell_map_ = new ::TSP::Reference(*from._impl_.original_cell_map_);
  }
  if (from._internal_has_transposed_cell_map()) {
    _this->_impl_.transposed_cell_map_ = new ::TSP::Reference(*from._impl_.transposed_cell_map_);
  }
  if (from._internal_has_undo_formula_rewrite_command()) {
    _this->_impl_.undo_formula_rewrite_command_ = new ::TSP::Reference(*from._impl_.undo_formula_rewrite_command_);
  }
  if (from._internal_has_rich_text_subcommands()) {
    _this->_impl_.rich_text_subcommands_ = new ::TSP::Reference(*from._impl_.rich_text_subcommands_);
  }
  if (from._internal_has_column_restore_data()) {
    _this->_impl_.column_restore_data_ = new ::TST::ColumnRowRestoreDataArchive(*from._impl_.column_restore_data_);
  }
  if (from._internal_has_row_restore_data()) {
    _this->_impl_.row_restore_data_ = new ::TST::ColumnRowRestoreDataArchive(*from._impl_.row_restore_data_);
  }
  _this->_impl_.original_footer_row_count_ = from._impl_.original_footer_row_count_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandTransposeTableArchive)
}

inline void CommandTransposeTableArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.original_column_widths_){arena}
    , decltype(_impl_.original_row_heights_){arena}
    , decltype(_impl_.ineligible_merge_list_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.original_table_range_){nullptr}
    , decltype(_impl_.original_cell_map_){nullptr}
    , decltype(_impl_.transposed_cell_map_){nullptr}
    , decltype(_impl_.undo_formula_rewrite_command_){nullptr}
    , decltype(_impl_.rich_text_subcommands_){nullptr}
    , decltype(_impl_.column_restore_data_){nullptr}
    , decltype(_impl_.row_restore_data_){nullptr}
    , decltype(_impl_.original_footer_row_count_){0u}
  };
}

CommandTransposeTableArchive::~CommandTransposeTableArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandTransposeTableArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandTransposeTableArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.original_column_widths_.~RepeatedField();
  _impl_.original_row_heights_.~RepeatedField();
  _impl_.ineligible_merge_list_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.original_table_range_;
  if (this != internal_default_instance()) delete _impl_.original_cell_map_;
  if (this != internal_default_instance()) delete _impl_.transposed_cell_map_;
  if (this != internal_default_instance()) delete _impl_.undo_formula_rewrite_command_;
  if (this != internal_default_instance()) delete _impl_.rich_text_subcommands_;
  if (this != internal_default_instance()) delete _impl_.column_restore_data_;
  if (this != internal_default_instance()) delete _impl_.row_restore_data_;
}

void CommandTransposeTableArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandTransposeTableArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandTransposeTableArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.original_column_widths_.Clear();
  _impl_.original_row_heights_.Clear();
  _impl_.ineligible_merge_list_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.original_table_range_ != nullptr);
      _impl_.original_table_range_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.original_cell_map_ != nullptr);
      _impl_.original_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.transposed_cell_map_ != nullptr);
      _impl_.transposed_cell_map_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.undo_formula_rewrite_command_ != nullptr);
      _impl_.undo_formula_rewrite_command_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.rich_text_subcommands_ != nullptr);
      _impl_.rich_text_subcommands_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.column_restore_data_ != nullptr);
      _impl_.column_restore_data_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.row_restore_data_ != nullptr);
      _impl_.row_restore_data_->Clear();
    }
  }
  _impl_.original_footer_row_count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandTransposeTableArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.ExpandedCellRange original_table_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_table_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference original_cell_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_original_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 original_footer_row_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_original_footer_row_count(&has_bits);
          _impl_.original_footer_row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float original_column_widths = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_original_column_widths(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<45>(ptr));
        } else if (static_cast<uint8_t>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_original_column_widths(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float original_row_heights = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_original_row_heights(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<53>(ptr));
        } else if (static_cast<uint8_t>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_original_row_heights(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.CellRange ineligible_merge_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ineligible_merge_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference transposed_cell_map = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_transposed_cell_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_formula_rewrite_command = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_formula_rewrite_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference rich_text_subcommands = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rich_text_subcommands(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ColumnRowRestoreDataArchive column_restore_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_restore_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ColumnRowRestoreDataArchive row_restore_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_row_restore_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandTransposeTableArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandTransposeTableArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.ExpandedCellRange original_table_range = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::original_table_range(this),
        _Internal::original_table_range(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference original_cell_map = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::original_cell_map(this),
        _Internal::original_cell_map(this).GetCachedSize(), target, stream);
  }

  // required uint32 original_footer_row_count = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_original_footer_row_count(), target);
  }

  // repeated float original_column_widths = 5;
  for (int i = 0, n = this->_internal_original_column_widths_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_original_column_widths(i), target);
  }

  // repeated float original_row_heights = 6;
  for (int i = 0, n = this->_internal_original_row_heights_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_original_row_heights(i), target);
  }

  // repeated .TST.CellRange ineligible_merge_list = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ineligible_merge_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_ineligible_merge_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.Reference transposed_cell_map = 8;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::transposed_cell_map(this),
        _Internal::transposed_cell_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_formula_rewrite_command = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::undo_formula_rewrite_command(this),
        _Internal::undo_formula_rewrite_command(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference rich_text_subcommands = 10;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::rich_text_subcommands(this),
        _Internal::rich_text_subcommands(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ColumnRowRestoreDataArchive column_restore_data = 11;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::column_restore_data(this),
        _Internal::column_restore_data(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ColumnRowRestoreDataArchive row_restore_data = 12;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::row_restore_data(this),
        _Internal::row_restore_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandTransposeTableArchive)
  return target;
}

size_t CommandTransposeTableArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandTransposeTableArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_original_table_range()) {
    // required .TST.ExpandedCellRange original_table_range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.original_table_range_);
  }

  if (_internal_has_original_cell_map()) {
    // required .TSP.Reference original_cell_map = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.original_cell_map_);
  }

  if (_internal_has_transposed_cell_map()) {
    // required .TSP.Reference transposed_cell_map = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transposed_cell_map_);
  }

  if (_internal_has_original_footer_row_count()) {
    // required uint32 original_footer_row_count = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_original_footer_row_count());
  }

  return total_size;
}
size_t CommandTransposeTableArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandTransposeTableArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000010f) ^ 0x0000010f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.ExpandedCellRange original_table_range = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.original_table_range_);

    // required .TSP.Reference original_cell_map = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.original_cell_map_);

    // required .TSP.Reference transposed_cell_map = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.transposed_cell_map_);

    // required uint32 original_footer_row_count = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_original_footer_row_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float original_column_widths = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_original_column_widths_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_original_column_widths_size());
    total_size += data_size;
  }

  // repeated float original_row_heights = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_original_row_heights_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_original_row_heights_size());
    total_size += data_size;
  }

  // repeated .TST.CellRange ineligible_merge_list = 7;
  total_size += 1UL * this->_internal_ineligible_merge_list_size();
  for (const auto& msg : this->_impl_.ineligible_merge_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional .TSP.Reference undo_formula_rewrite_command = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_formula_rewrite_command_);
    }

    // optional .TSP.Reference rich_text_subcommands = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rich_text_subcommands_);
    }

    // optional .TST.ColumnRowRestoreDataArchive column_restore_data = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.column_restore_data_);
    }

    // optional .TST.ColumnRowRestoreDataArchive row_restore_data = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.row_restore_data_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandTransposeTableArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandTransposeTableArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandTransposeTableArchive::GetClassData() const { return &_class_data_; }


void CommandTransposeTableArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandTransposeTableArchive*>(&to_msg);
  auto& from = static_cast<const CommandTransposeTableArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandTransposeTableArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.original_column_widths_.MergeFrom(from._impl_.original_column_widths_);
  _this->_impl_.original_row_heights_.MergeFrom(from._impl_.original_row_heights_);
  _this->_impl_.ineligible_merge_list_.MergeFrom(from._impl_.ineligible_merge_list_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_original_table_range()->::TST::ExpandedCellRange::MergeFrom(
          from._internal_original_table_range());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_original_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_original_cell_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_transposed_cell_map()->::TSP::Reference::MergeFrom(
          from._internal_transposed_cell_map());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_undo_formula_rewrite_command()->::TSP::Reference::MergeFrom(
          from._internal_undo_formula_rewrite_command());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_rich_text_subcommands()->::TSP::Reference::MergeFrom(
          from._internal_rich_text_subcommands());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_column_restore_data()->::TST::ColumnRowRestoreDataArchive::MergeFrom(
          from._internal_column_restore_data());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_row_restore_data()->::TST::ColumnRowRestoreDataArchive::MergeFrom(
          from._internal_row_restore_data());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_original_footer_row_count(from._internal_original_footer_row_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandTransposeTableArchive::CopyFrom(const CommandTransposeTableArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandTransposeTableArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandTransposeTableArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.ineligible_merge_list_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_original_table_range()) {
    if (!_impl_.original_table_range_->IsInitialized()) return false;
  }
  if (_internal_has_original_cell_map()) {
    if (!_impl_.original_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_transposed_cell_map()) {
    if (!_impl_.transposed_cell_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_formula_rewrite_command()) {
    if (!_impl_.undo_formula_rewrite_command_->IsInitialized()) return false;
  }
  if (_internal_has_rich_text_subcommands()) {
    if (!_impl_.rich_text_subcommands_->IsInitialized()) return false;
  }
  if (_internal_has_column_restore_data()) {
    if (!_impl_.column_restore_data_->IsInitialized()) return false;
  }
  if (_internal_has_row_restore_data()) {
    if (!_impl_.row_restore_data_->IsInitialized()) return false;
  }
  return true;
}

void CommandTransposeTableArchive::InternalSwap(CommandTransposeTableArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.original_column_widths_.InternalSwap(&other->_impl_.original_column_widths_);
  _impl_.original_row_heights_.InternalSwap(&other->_impl_.original_row_heights_);
  _impl_.ineligible_merge_list_.InternalSwap(&other->_impl_.ineligible_merge_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandTransposeTableArchive, _impl_.original_footer_row_count_)
      + sizeof(CommandTransposeTableArchive::_impl_.original_footer_row_count_)
      - PROTOBUF_FIELD_OFFSET(CommandTransposeTableArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandTransposeTableArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[84]);
}

// ===================================================================

class CommandSetStructuredTextImportRecordArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandSetStructuredTextImportRecordArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandSetStructuredTextImportRecordArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::StructuredTextImportRecord& new_import_record(const CommandSetStructuredTextImportRecordArchive* msg);
  static void set_has_new_import_record(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::StructuredTextImportRecord& old_import_record(const CommandSetStructuredTextImportRecordArchive* msg);
  static void set_has_old_import_record(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandSetStructuredTextImportRecordArchive::_Internal::super(const CommandSetStructuredTextImportRecordArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::StructuredTextImportRecord&
CommandSetStructuredTextImportRecordArchive::_Internal::new_import_record(const CommandSetStructuredTextImportRecordArchive* msg) {
  return *msg->_impl_.new_import_record_;
}
const ::TST::StructuredTextImportRecord&
CommandSetStructuredTextImportRecordArchive::_Internal::old_import_record(const CommandSetStructuredTextImportRecordArchive* msg) {
  return *msg->_impl_.old_import_record_;
}
void CommandSetStructuredTextImportRecordArchive::clear_new_import_record() {
  if (_impl_.new_import_record_ != nullptr) _impl_.new_import_record_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandSetStructuredTextImportRecordArchive::clear_old_import_record() {
  if (_impl_.old_import_record_ != nullptr) _impl_.old_import_record_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandSetStructuredTextImportRecordArchive::CommandSetStructuredTextImportRecordArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandSetStructuredTextImportRecordArchive)
}
CommandSetStructuredTextImportRecordArchive::CommandSetStructuredTextImportRecordArchive(const CommandSetStructuredTextImportRecordArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandSetStructuredTextImportRecordArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_import_record_){nullptr}
    , decltype(_impl_.old_import_record_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_new_import_record()) {
    _this->_impl_.new_import_record_ = new ::TST::StructuredTextImportRecord(*from._impl_.new_import_record_);
  }
  if (from._internal_has_old_import_record()) {
    _this->_impl_.old_import_record_ = new ::TST::StructuredTextImportRecord(*from._impl_.old_import_record_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandSetStructuredTextImportRecordArchive)
}

inline void CommandSetStructuredTextImportRecordArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_import_record_){nullptr}
    , decltype(_impl_.old_import_record_){nullptr}
  };
}

CommandSetStructuredTextImportRecordArchive::~CommandSetStructuredTextImportRecordArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandSetStructuredTextImportRecordArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandSetStructuredTextImportRecordArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.new_import_record_;
  if (this != internal_default_instance()) delete _impl_.old_import_record_;
}

void CommandSetStructuredTextImportRecordArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandSetStructuredTextImportRecordArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandSetStructuredTextImportRecordArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_import_record_ != nullptr);
      _impl_.new_import_record_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.old_import_record_ != nullptr);
      _impl_.old_import_record_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandSetStructuredTextImportRecordArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.StructuredTextImportRecord new_import_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_import_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.StructuredTextImportRecord old_import_record = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_import_record(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandSetStructuredTextImportRecordArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandSetStructuredTextImportRecordArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.StructuredTextImportRecord new_import_record = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_import_record(this),
        _Internal::new_import_record(this).GetCachedSize(), target, stream);
  }

  // optional .TST.StructuredTextImportRecord old_import_record = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::old_import_record(this),
        _Internal::old_import_record(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandSetStructuredTextImportRecordArchive)
  return target;
}

size_t CommandSetStructuredTextImportRecordArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandSetStructuredTextImportRecordArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.StructuredTextImportRecord new_import_record = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_import_record_);
    }

    // optional .TST.StructuredTextImportRecord old_import_record = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_import_record_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandSetStructuredTextImportRecordArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandSetStructuredTextImportRecordArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandSetStructuredTextImportRecordArchive::GetClassData() const { return &_class_data_; }


void CommandSetStructuredTextImportRecordArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandSetStructuredTextImportRecordArchive*>(&to_msg);
  auto& from = static_cast<const CommandSetStructuredTextImportRecordArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandSetStructuredTextImportRecordArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_import_record()->::TST::StructuredTextImportRecord::MergeFrom(
          from._internal_new_import_record());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_old_import_record()->::TST::StructuredTextImportRecord::MergeFrom(
          from._internal_old_import_record());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandSetStructuredTextImportRecordArchive::CopyFrom(const CommandSetStructuredTextImportRecordArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandSetStructuredTextImportRecordArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandSetStructuredTextImportRecordArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_new_import_record()) {
    if (!_impl_.new_import_record_->IsInitialized()) return false;
  }
  if (_internal_has_old_import_record()) {
    if (!_impl_.old_import_record_->IsInitialized()) return false;
  }
  return true;
}

void CommandSetStructuredTextImportRecordArchive::InternalSwap(CommandSetStructuredTextImportRecordArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandSetStructuredTextImportRecordArchive, _impl_.old_import_record_)
      + sizeof(CommandSetStructuredTextImportRecordArchive::_impl_.old_import_record_)
      - PROTOBUF_FIELD_OFFSET(CommandSetStructuredTextImportRecordArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandSetStructuredTextImportRecordArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[85]);
}

// ===================================================================

class CommandCategoryCollapseExpandGroupArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategoryCollapseExpandGroupArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategoryCollapseExpandGroupArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_collapsing(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::GroupColumnListArchive& grouping_columns(const CommandCategoryCollapseExpandGroupArchive* msg);
  static void set_has_grouping_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::ExpandCollapseStateArchive& collapse_state(const CommandCategoryCollapseExpandGroupArchive* msg);
  static void set_has_collapse_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::ExpandCollapseStateArchive& undo_collapse_state(const CommandCategoryCollapseExpandGroupArchive* msg);
  static void set_has_undo_collapse_state(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000017) ^ 0x00000017) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategoryCollapseExpandGroupArchive::_Internal::super(const CommandCategoryCollapseExpandGroupArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::GroupColumnListArchive&
CommandCategoryCollapseExpandGroupArchive::_Internal::grouping_columns(const CommandCategoryCollapseExpandGroupArchive* msg) {
  return *msg->_impl_.grouping_columns_;
}
const ::TST::ExpandCollapseStateArchive&
CommandCategoryCollapseExpandGroupArchive::_Internal::collapse_state(const CommandCategoryCollapseExpandGroupArchive* msg) {
  return *msg->_impl_.collapse_state_;
}
const ::TST::ExpandCollapseStateArchive&
CommandCategoryCollapseExpandGroupArchive::_Internal::undo_collapse_state(const CommandCategoryCollapseExpandGroupArchive* msg) {
  return *msg->_impl_.undo_collapse_state_;
}
void CommandCategoryCollapseExpandGroupArchive::clear_grouping_columns() {
  if (_impl_.grouping_columns_ != nullptr) _impl_.grouping_columns_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandCategoryCollapseExpandGroupArchive::clear_collapse_state() {
  if (_impl_.collapse_state_ != nullptr) _impl_.collapse_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandCategoryCollapseExpandGroupArchive::clear_undo_collapse_state() {
  if (_impl_.undo_collapse_state_ != nullptr) _impl_.undo_collapse_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandCategoryCollapseExpandGroupArchive::CommandCategoryCollapseExpandGroupArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategoryCollapseExpandGroupArchive)
}
CommandCategoryCollapseExpandGroupArchive::CommandCategoryCollapseExpandGroupArchive(const CommandCategoryCollapseExpandGroupArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandCategoryCollapseExpandGroupArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.grouping_columns_){nullptr}
    , decltype(_impl_.collapse_state_){nullptr}
    , decltype(_impl_.undo_collapse_state_){nullptr}
    , decltype(_impl_.is_collapsing_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_grouping_columns()) {
    _this->_impl_.grouping_columns_ = new ::TST::GroupColumnListArchive(*from._impl_.grouping_columns_);
  }
  if (from._internal_has_collapse_state()) {
    _this->_impl_.collapse_state_ = new ::TST::ExpandCollapseStateArchive(*from._impl_.collapse_state_);
  }
  if (from._internal_has_undo_collapse_state()) {
    _this->_impl_.undo_collapse_state_ = new ::TST::ExpandCollapseStateArchive(*from._impl_.undo_collapse_state_);
  }
  _this->_impl_.is_collapsing_ = from._impl_.is_collapsing_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategoryCollapseExpandGroupArchive)
}

inline void CommandCategoryCollapseExpandGroupArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.grouping_columns_){nullptr}
    , decltype(_impl_.collapse_state_){nullptr}
    , decltype(_impl_.undo_collapse_state_){nullptr}
    , decltype(_impl_.is_collapsing_){false}
  };
}

CommandCategoryCollapseExpandGroupArchive::~CommandCategoryCollapseExpandGroupArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandCategoryCollapseExpandGroupArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandCategoryCollapseExpandGroupArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.grouping_columns_;
  if (this != internal_default_instance()) delete _impl_.collapse_state_;
  if (this != internal_default_instance()) delete _impl_.undo_collapse_state_;
}

void CommandCategoryCollapseExpandGroupArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandCategoryCollapseExpandGroupArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategoryCollapseExpandGroupArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.grouping_columns_ != nullptr);
      _impl_.grouping_columns_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.collapse_state_ != nullptr);
      _impl_.collapse_state_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.undo_collapse_state_ != nullptr);
      _impl_.undo_collapse_state_->Clear();
    }
  }
  _impl_.is_collapsing_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategoryCollapseExpandGroupArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_collapsing = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_is_collapsing(&has_bits);
          _impl_.is_collapsing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.GroupColumnListArchive grouping_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.ExpandCollapseStateArchive collapse_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_collapse_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ExpandCollapseStateArchive undo_collapse_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_collapse_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandCategoryCollapseExpandGroupArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategoryCollapseExpandGroupArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required bool is_collapsing = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_collapsing(), target);
  }

  // required .TST.GroupColumnListArchive grouping_columns = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::grouping_columns(this),
        _Internal::grouping_columns(this).GetCachedSize(), target, stream);
  }

  // required .TST.ExpandCollapseStateArchive collapse_state = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::collapse_state(this),
        _Internal::collapse_state(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ExpandCollapseStateArchive undo_collapse_state = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::undo_collapse_state(this),
        _Internal::undo_collapse_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategoryCollapseExpandGroupArchive)
  return target;
}

size_t CommandCategoryCollapseExpandGroupArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategoryCollapseExpandGroupArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_grouping_columns()) {
    // required .TST.GroupColumnListArchive grouping_columns = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grouping_columns_);
  }

  if (_internal_has_collapse_state()) {
    // required .TST.ExpandCollapseStateArchive collapse_state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collapse_state_);
  }

  if (_internal_has_is_collapsing()) {
    // required bool is_collapsing = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandCategoryCollapseExpandGroupArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategoryCollapseExpandGroupArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.GroupColumnListArchive grouping_columns = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.grouping_columns_);

    // required .TST.ExpandCollapseStateArchive collapse_state = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collapse_state_);

    // required bool is_collapsing = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.ExpandCollapseStateArchive undo_collapse_state = 5;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.undo_collapse_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategoryCollapseExpandGroupArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandCategoryCollapseExpandGroupArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategoryCollapseExpandGroupArchive::GetClassData() const { return &_class_data_; }


void CommandCategoryCollapseExpandGroupArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandCategoryCollapseExpandGroupArchive*>(&to_msg);
  auto& from = static_cast<const CommandCategoryCollapseExpandGroupArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategoryCollapseExpandGroupArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_grouping_columns()->::TST::GroupColumnListArchive::MergeFrom(
          from._internal_grouping_columns());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_collapse_state()->::TST::ExpandCollapseStateArchive::MergeFrom(
          from._internal_collapse_state());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_undo_collapse_state()->::TST::ExpandCollapseStateArchive::MergeFrom(
          from._internal_undo_collapse_state());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.is_collapsing_ = from._impl_.is_collapsing_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategoryCollapseExpandGroupArchive::CopyFrom(const CommandCategoryCollapseExpandGroupArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategoryCollapseExpandGroupArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategoryCollapseExpandGroupArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_columns()) {
    if (!_impl_.grouping_columns_->IsInitialized()) return false;
  }
  if (_internal_has_collapse_state()) {
    if (!_impl_.collapse_state_->IsInitialized()) return false;
  }
  if (_internal_has_undo_collapse_state()) {
    if (!_impl_.undo_collapse_state_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategoryCollapseExpandGroupArchive::InternalSwap(CommandCategoryCollapseExpandGroupArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategoryCollapseExpandGroupArchive, _impl_.is_collapsing_)
      + sizeof(CommandCategoryCollapseExpandGroupArchive::_impl_.is_collapsing_)
      - PROTOBUF_FIELD_OFFSET(CommandCategoryCollapseExpandGroupArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategoryCollapseExpandGroupArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[86]);
}

// ===================================================================

class CommandCategoryChangeSummaryAggregateType::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategoryChangeSummaryAggregateType>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategoryChangeSummaryAggregateType* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_aggregate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undo_aggregate_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& column_uid(const CommandCategoryChangeSummaryAggregateType* msg);
  static void set_has_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_level(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategoryChangeSummaryAggregateType::_Internal::super(const CommandCategoryChangeSummaryAggregateType* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandCategoryChangeSummaryAggregateType::_Internal::column_uid(const CommandCategoryChangeSummaryAggregateType* msg) {
  return *msg->_impl_.column_uid_;
}
void CommandCategoryChangeSummaryAggregateType::clear_column_uid() {
  if (_impl_.column_uid_ != nullptr) _impl_.column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandCategoryChangeSummaryAggregateType::CommandCategoryChangeSummaryAggregateType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategoryChangeSummaryAggregateType)
}
CommandCategoryChangeSummaryAggregateType::CommandCategoryChangeSummaryAggregateType(const CommandCategoryChangeSummaryAggregateType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandCategoryChangeSummaryAggregateType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.aggregate_type_){}
    , decltype(_impl_.undo_aggregate_type_){}
    , decltype(_impl_.group_level_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_column_uid()) {
    _this->_impl_.column_uid_ = new ::TSP::UUID(*from._impl_.column_uid_);
  }
  ::memcpy(&_impl_.aggregate_type_, &from._impl_.aggregate_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.group_level_) -
    reinterpret_cast<char*>(&_impl_.aggregate_type_)) + sizeof(_impl_.group_level_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategoryChangeSummaryAggregateType)
}

inline void CommandCategoryChangeSummaryAggregateType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.column_uid_){nullptr}
    , decltype(_impl_.aggregate_type_){0u}
    , decltype(_impl_.undo_aggregate_type_){0u}
    , decltype(_impl_.group_level_){0}
  };
}

CommandCategoryChangeSummaryAggregateType::~CommandCategoryChangeSummaryAggregateType() {
  // @@protoc_insertion_point(destructor:TST.CommandCategoryChangeSummaryAggregateType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandCategoryChangeSummaryAggregateType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.column_uid_;
}

void CommandCategoryChangeSummaryAggregateType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandCategoryChangeSummaryAggregateType::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategoryChangeSummaryAggregateType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.column_uid_ != nullptr);
      _impl_.column_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.aggregate_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.group_level_) -
        reinterpret_cast<char*>(&_impl_.aggregate_type_)) + sizeof(_impl_.group_level_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategoryChangeSummaryAggregateType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 aggregate_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_aggregate_type(&has_bits);
          _impl_.aggregate_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 undo_aggregate_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_undo_aggregate_type(&has_bits);
          _impl_.undo_aggregate_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID column_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required sint32 group_level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_group_level(&has_bits);
          _impl_.group_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandCategoryChangeSummaryAggregateType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategoryChangeSummaryAggregateType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 aggregate_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_aggregate_type(), target);
  }

  // required uint32 undo_aggregate_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_undo_aggregate_type(), target);
  }

  // required .TSP.UUID column_uid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::column_uid(this),
        _Internal::column_uid(this).GetCachedSize(), target, stream);
  }

  // required sint32 group_level = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(5, this->_internal_group_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategoryChangeSummaryAggregateType)
  return target;
}

size_t CommandCategoryChangeSummaryAggregateType::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategoryChangeSummaryAggregateType)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_column_uid()) {
    // required .TSP.UUID column_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);
  }

  if (_internal_has_aggregate_type()) {
    // required uint32 aggregate_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aggregate_type());
  }

  if (_internal_has_undo_aggregate_type()) {
    // required uint32 undo_aggregate_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undo_aggregate_type());
  }

  if (_internal_has_group_level()) {
    // required sint32 group_level = 5;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_group_level());
  }

  return total_size;
}
size_t CommandCategoryChangeSummaryAggregateType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategoryChangeSummaryAggregateType)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID column_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.column_uid_);

    // required uint32 aggregate_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_aggregate_type());

    // required uint32 undo_aggregate_type = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undo_aggregate_type());

    // required sint32 group_level = 5;
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_group_level());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategoryChangeSummaryAggregateType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandCategoryChangeSummaryAggregateType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategoryChangeSummaryAggregateType::GetClassData() const { return &_class_data_; }


void CommandCategoryChangeSummaryAggregateType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandCategoryChangeSummaryAggregateType*>(&to_msg);
  auto& from = static_cast<const CommandCategoryChangeSummaryAggregateType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategoryChangeSummaryAggregateType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_column_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.aggregate_type_ = from._impl_.aggregate_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.undo_aggregate_type_ = from._impl_.undo_aggregate_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.group_level_ = from._impl_.group_level_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategoryChangeSummaryAggregateType::CopyFrom(const CommandCategoryChangeSummaryAggregateType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategoryChangeSummaryAggregateType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategoryChangeSummaryAggregateType::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_column_uid()) {
    if (!_impl_.column_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategoryChangeSummaryAggregateType::InternalSwap(CommandCategoryChangeSummaryAggregateType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategoryChangeSummaryAggregateType, _impl_.group_level_)
      + sizeof(CommandCategoryChangeSummaryAggregateType::_impl_.group_level_)
      - PROTOBUF_FIELD_OFFSET(CommandCategoryChangeSummaryAggregateType, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategoryChangeSummaryAggregateType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[87]);
}

// ===================================================================

class CommandCategorySetLabelRowVisibility::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategorySetLabelRowVisibility>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategorySetLabelRowVisibility* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_level(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_label_row_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_undo_label_row_visibility(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategorySetLabelRowVisibility::_Internal::super(const CommandCategorySetLabelRowVisibility* msg) {
  return *msg->_impl_.super_;
}
CommandCategorySetLabelRowVisibility::CommandCategorySetLabelRowVisibility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategorySetLabelRowVisibility)
}
CommandCategorySetLabelRowVisibility::CommandCategorySetLabelRowVisibility(const CommandCategorySetLabelRowVisibility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandCategorySetLabelRowVisibility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.group_level_){}
    , decltype(_impl_.label_row_visibility_){}
    , decltype(_impl_.undo_label_row_visibility_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.group_level_, &from._impl_.group_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.undo_label_row_visibility_) -
    reinterpret_cast<char*>(&_impl_.group_level_)) + sizeof(_impl_.undo_label_row_visibility_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategorySetLabelRowVisibility)
}

inline void CommandCategorySetLabelRowVisibility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.group_level_){0u}
    , decltype(_impl_.label_row_visibility_){0u}
    , decltype(_impl_.undo_label_row_visibility_){0u}
  };
}

CommandCategorySetLabelRowVisibility::~CommandCategorySetLabelRowVisibility() {
  // @@protoc_insertion_point(destructor:TST.CommandCategorySetLabelRowVisibility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandCategorySetLabelRowVisibility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandCategorySetLabelRowVisibility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandCategorySetLabelRowVisibility::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategorySetLabelRowVisibility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.group_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.undo_label_row_visibility_) -
        reinterpret_cast<char*>(&_impl_.group_level_)) + sizeof(_impl_.undo_label_row_visibility_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategorySetLabelRowVisibility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 group_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_group_level(&has_bits);
          _impl_.group_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 label_row_visibility = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_label_row_visibility(&has_bits);
          _impl_.label_row_visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 undo_label_row_visibility = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_undo_label_row_visibility(&has_bits);
          _impl_.undo_label_row_visibility_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandCategorySetLabelRowVisibility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategorySetLabelRowVisibility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 group_level = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_group_level(), target);
  }

  // required uint32 label_row_visibility = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_label_row_visibility(), target);
  }

  // required uint32 undo_label_row_visibility = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_undo_label_row_visibility(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategorySetLabelRowVisibility)
  return target;
}

size_t CommandCategorySetLabelRowVisibility::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategorySetLabelRowVisibility)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_group_level()) {
    // required uint32 group_level = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_level());
  }

  if (_internal_has_label_row_visibility()) {
    // required uint32 label_row_visibility = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_label_row_visibility());
  }

  if (_internal_has_undo_label_row_visibility()) {
    // required uint32 undo_label_row_visibility = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undo_label_row_visibility());
  }

  return total_size;
}
size_t CommandCategorySetLabelRowVisibility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategorySetLabelRowVisibility)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required uint32 group_level = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_level());

    // required uint32 label_row_visibility = 3;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_label_row_visibility());

    // required uint32 undo_label_row_visibility = 4;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undo_label_row_visibility());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategorySetLabelRowVisibility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandCategorySetLabelRowVisibility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategorySetLabelRowVisibility::GetClassData() const { return &_class_data_; }


void CommandCategorySetLabelRowVisibility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandCategorySetLabelRowVisibility*>(&to_msg);
  auto& from = static_cast<const CommandCategorySetLabelRowVisibility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategorySetLabelRowVisibility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.group_level_ = from._impl_.group_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.label_row_visibility_ = from._impl_.label_row_visibility_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.undo_label_row_visibility_ = from._impl_.undo_label_row_visibility_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategorySetLabelRowVisibility::CopyFrom(const CommandCategorySetLabelRowVisibility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategorySetLabelRowVisibility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategorySetLabelRowVisibility::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategorySetLabelRowVisibility::InternalSwap(CommandCategorySetLabelRowVisibility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategorySetLabelRowVisibility, _impl_.undo_label_row_visibility_)
      + sizeof(CommandCategorySetLabelRowVisibility::_impl_.undo_label_row_visibility_)
      - PROTOBUF_FIELD_OFFSET(CommandCategorySetLabelRowVisibility, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategorySetLabelRowVisibility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[88]);
}

// ===================================================================

class CommandCategoryWillChangeGroupValue::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategoryWillChangeGroupValue>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& group_node_uid(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_group_node_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& undo_group_node_uid(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_undo_group_node_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellValueArchive& group_value(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_group_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSCE::CellValueArchive& undo_group_value(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_undo_group_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& rewrite_command_for_undo(const CommandCategoryWillChangeGroupValue* msg);
  static void set_has_rewrite_command_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategoryWillChangeGroupValue::_Internal::super(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandCategoryWillChangeGroupValue::_Internal::group_node_uid(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->_impl_.group_node_uid_;
}
const ::TSP::UUID&
CommandCategoryWillChangeGroupValue::_Internal::undo_group_node_uid(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->_impl_.undo_group_node_uid_;
}
const ::TSCE::CellValueArchive&
CommandCategoryWillChangeGroupValue::_Internal::group_value(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->_impl_.group_value_;
}
const ::TSCE::CellValueArchive&
CommandCategoryWillChangeGroupValue::_Internal::undo_group_value(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->_impl_.undo_group_value_;
}
const ::TSP::Reference&
CommandCategoryWillChangeGroupValue::_Internal::rewrite_command_for_undo(const CommandCategoryWillChangeGroupValue* msg) {
  return *msg->_impl_.rewrite_command_for_undo_;
}
void CommandCategoryWillChangeGroupValue::clear_group_node_uid() {
  if (_impl_.group_node_uid_ != nullptr) _impl_.group_node_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandCategoryWillChangeGroupValue::clear_undo_group_node_uid() {
  if (_impl_.undo_group_node_uid_ != nullptr) _impl_.undo_group_node_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandCategoryWillChangeGroupValue::clear_group_value() {
  if (_impl_.group_value_ != nullptr) _impl_.group_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandCategoryWillChangeGroupValue::clear_undo_group_value() {
  if (_impl_.undo_group_value_ != nullptr) _impl_.undo_group_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandCategoryWillChangeGroupValue::clear_rewrite_command_for_undo() {
  if (_impl_.rewrite_command_for_undo_ != nullptr) _impl_.rewrite_command_for_undo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CommandCategoryWillChangeGroupValue::CommandCategoryWillChangeGroupValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategoryWillChangeGroupValue)
}
CommandCategoryWillChangeGroupValue::CommandCategoryWillChangeGroupValue(const CommandCategoryWillChangeGroupValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandCategoryWillChangeGroupValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.group_node_uid_){nullptr}
    , decltype(_impl_.undo_group_node_uid_){nullptr}
    , decltype(_impl_.group_value_){nullptr}
    , decltype(_impl_.undo_group_value_){nullptr}
    , decltype(_impl_.rewrite_command_for_undo_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_group_node_uid()) {
    _this->_impl_.group_node_uid_ = new ::TSP::UUID(*from._impl_.group_node_uid_);
  }
  if (from._internal_has_undo_group_node_uid()) {
    _this->_impl_.undo_group_node_uid_ = new ::TSP::UUID(*from._impl_.undo_group_node_uid_);
  }
  if (from._internal_has_group_value()) {
    _this->_impl_.group_value_ = new ::TSCE::CellValueArchive(*from._impl_.group_value_);
  }
  if (from._internal_has_undo_group_value()) {
    _this->_impl_.undo_group_value_ = new ::TSCE::CellValueArchive(*from._impl_.undo_group_value_);
  }
  if (from._internal_has_rewrite_command_for_undo()) {
    _this->_impl_.rewrite_command_for_undo_ = new ::TSP::Reference(*from._impl_.rewrite_command_for_undo_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategoryWillChangeGroupValue)
}

inline void CommandCategoryWillChangeGroupValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.group_node_uid_){nullptr}
    , decltype(_impl_.undo_group_node_uid_){nullptr}
    , decltype(_impl_.group_value_){nullptr}
    , decltype(_impl_.undo_group_value_){nullptr}
    , decltype(_impl_.rewrite_command_for_undo_){nullptr}
  };
}

CommandCategoryWillChangeGroupValue::~CommandCategoryWillChangeGroupValue() {
  // @@protoc_insertion_point(destructor:TST.CommandCategoryWillChangeGroupValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandCategoryWillChangeGroupValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.group_node_uid_;
  if (this != internal_default_instance()) delete _impl_.undo_group_node_uid_;
  if (this != internal_default_instance()) delete _impl_.group_value_;
  if (this != internal_default_instance()) delete _impl_.undo_group_value_;
  if (this != internal_default_instance()) delete _impl_.rewrite_command_for_undo_;
}

void CommandCategoryWillChangeGroupValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandCategoryWillChangeGroupValue::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategoryWillChangeGroupValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.group_node_uid_ != nullptr);
      _impl_.group_node_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.undo_group_node_uid_ != nullptr);
      _impl_.undo_group_node_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.group_value_ != nullptr);
      _impl_.group_value_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.undo_group_value_ != nullptr);
      _impl_.undo_group_value_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.rewrite_command_for_undo_ != nullptr);
      _impl_.rewrite_command_for_undo_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategoryWillChangeGroupValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID group_node_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_node_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_group_node_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_group_node_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellValueArchive group_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.CellValueArchive undo_group_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_group_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference rewrite_command_for_undo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_command_for_undo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandCategoryWillChangeGroupValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategoryWillChangeGroupValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID group_node_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::group_node_uid(this),
        _Internal::group_node_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID undo_group_node_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::undo_group_node_uid(this),
        _Internal::undo_group_node_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellValueArchive group_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::group_value(this),
        _Internal::group_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.CellValueArchive undo_group_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::undo_group_value(this),
        _Internal::undo_group_value(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference rewrite_command_for_undo = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::rewrite_command_for_undo(this),
        _Internal::rewrite_command_for_undo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategoryWillChangeGroupValue)
  return target;
}

size_t CommandCategoryWillChangeGroupValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategoryWillChangeGroupValue)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_group_node_uid()) {
    // required .TSP.UUID group_node_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_node_uid_);
  }

  return total_size;
}
size_t CommandCategoryWillChangeGroupValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategoryWillChangeGroupValue)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID group_node_uid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_node_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional .TSP.UUID undo_group_node_uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_group_node_uid_);
    }

    // optional .TSCE.CellValueArchive group_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.group_value_);
    }

    // optional .TSCE.CellValueArchive undo_group_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_group_value_);
    }

    // optional .TSP.Reference rewrite_command_for_undo = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rewrite_command_for_undo_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategoryWillChangeGroupValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandCategoryWillChangeGroupValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategoryWillChangeGroupValue::GetClassData() const { return &_class_data_; }


void CommandCategoryWillChangeGroupValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandCategoryWillChangeGroupValue*>(&to_msg);
  auto& from = static_cast<const CommandCategoryWillChangeGroupValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategoryWillChangeGroupValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_group_node_uid()->::TSP::UUID::MergeFrom(
          from._internal_group_node_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_undo_group_node_uid()->::TSP::UUID::MergeFrom(
          from._internal_undo_group_node_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_group_value()->::TSCE::CellValueArchive::MergeFrom(
          from._internal_group_value());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_undo_group_value()->::TSCE::CellValueArchive::MergeFrom(
          from._internal_undo_group_value());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(
          from._internal_rewrite_command_for_undo());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategoryWillChangeGroupValue::CopyFrom(const CommandCategoryWillChangeGroupValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategoryWillChangeGroupValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategoryWillChangeGroupValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_group_node_uid()) {
    if (!_impl_.group_node_uid_->IsInitialized()) return false;
  }
  if (_internal_has_undo_group_node_uid()) {
    if (!_impl_.undo_group_node_uid_->IsInitialized()) return false;
  }
  if (_internal_has_group_value()) {
    if (!_impl_.group_value_->IsInitialized()) return false;
  }
  if (_internal_has_undo_group_value()) {
    if (!_impl_.undo_group_value_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_command_for_undo()) {
    if (!_impl_.rewrite_command_for_undo_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategoryWillChangeGroupValue::InternalSwap(CommandCategoryWillChangeGroupValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategoryWillChangeGroupValue, _impl_.rewrite_command_for_undo_)
      + sizeof(CommandCategoryWillChangeGroupValue::_impl_.rewrite_command_for_undo_)
      - PROTOBUF_FIELD_OFFSET(CommandCategoryWillChangeGroupValue, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategoryWillChangeGroupValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[89]);
}

// ===================================================================

class IdempotentSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<IdempotentSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TSP::Reference& archived_selection(const IdempotentSelectionTransformerArchive* msg);
  static void set_has_archived_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::Reference&
IdempotentSelectionTransformerArchive::_Internal::archived_selection(const IdempotentSelectionTransformerArchive* msg) {
  return *msg->_impl_.archived_selection_;
}
void IdempotentSelectionTransformerArchive::clear_archived_selection() {
  if (_impl_.archived_selection_ != nullptr) _impl_.archived_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
IdempotentSelectionTransformerArchive::IdempotentSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.IdempotentSelectionTransformerArchive)
}
IdempotentSelectionTransformerArchive::IdempotentSelectionTransformerArchive(const IdempotentSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IdempotentSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.archived_selection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_archived_selection()) {
    _this->_impl_.archived_selection_ = new ::TSP::Reference(*from._impl_.archived_selection_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.IdempotentSelectionTransformerArchive)
}

inline void IdempotentSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.archived_selection_){nullptr}
  };
}

IdempotentSelectionTransformerArchive::~IdempotentSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.IdempotentSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IdempotentSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.archived_selection_;
}

void IdempotentSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IdempotentSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.IdempotentSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.archived_selection_ != nullptr);
    _impl_.archived_selection_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IdempotentSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.Reference archived_selection = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IdempotentSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.IdempotentSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.Reference archived_selection = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::archived_selection(this),
        _Internal::archived_selection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.IdempotentSelectionTransformerArchive)
  return target;
}

size_t IdempotentSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.IdempotentSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TSP.Reference archived_selection = 1;
  if (_internal_has_archived_selection()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.archived_selection_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IdempotentSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IdempotentSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IdempotentSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void IdempotentSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IdempotentSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const IdempotentSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.IdempotentSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_archived_selection()) {
    _this->_internal_mutable_archived_selection()->::TSP::Reference::MergeFrom(
        from._internal_archived_selection());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IdempotentSelectionTransformerArchive::CopyFrom(const IdempotentSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.IdempotentSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdempotentSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_archived_selection()) {
    if (!_impl_.archived_selection_->IsInitialized()) return false;
  }
  return true;
}

void IdempotentSelectionTransformerArchive::InternalSwap(IdempotentSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.archived_selection_, other->_impl_.archived_selection_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdempotentSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[90]);
}

// ===================================================================

class WPSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<WPSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const WPSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& archived_selection(const WPSelectionTransformerArchive* msg);
  static void set_has_archived_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDCoordArchive& origin_cell_uid(const WPSelectionTransformerArchive* msg);
  static void set_has_origin_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
WPSelectionTransformerArchive::_Internal::super(const WPSelectionTransformerArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
WPSelectionTransformerArchive::_Internal::archived_selection(const WPSelectionTransformerArchive* msg) {
  return *msg->_impl_.archived_selection_;
}
const ::TSP::UUIDCoordArchive&
WPSelectionTransformerArchive::_Internal::origin_cell_uid(const WPSelectionTransformerArchive* msg) {
  return *msg->_impl_.origin_cell_uid_;
}
void WPSelectionTransformerArchive::clear_archived_selection() {
  if (_impl_.archived_selection_ != nullptr) _impl_.archived_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void WPSelectionTransformerArchive::clear_origin_cell_uid() {
  if (_impl_.origin_cell_uid_ != nullptr) _impl_.origin_cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
WPSelectionTransformerArchive::WPSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.WPSelectionTransformerArchive)
}
WPSelectionTransformerArchive::WPSelectionTransformerArchive(const WPSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WPSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.archived_selection_){nullptr}
    , decltype(_impl_.origin_cell_uid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from._impl_.super_);
  }
  if (from._internal_has_archived_selection()) {
    _this->_impl_.archived_selection_ = new ::TSP::Reference(*from._impl_.archived_selection_);
  }
  if (from._internal_has_origin_cell_uid()) {
    _this->_impl_.origin_cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.origin_cell_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.WPSelectionTransformerArchive)
}

inline void WPSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.archived_selection_){nullptr}
    , decltype(_impl_.origin_cell_uid_){nullptr}
  };
}

WPSelectionTransformerArchive::~WPSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.WPSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WPSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.archived_selection_;
  if (this != internal_default_instance()) delete _impl_.origin_cell_uid_;
}

void WPSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WPSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.WPSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.archived_selection_ != nullptr);
      _impl_.archived_selection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.origin_cell_uid_ != nullptr);
      _impl_.origin_cell_uid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WPSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference archived_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WPSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.WPSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference archived_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::archived_selection(this),
        _Internal::archived_selection(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::origin_cell_uid(this),
        _Internal::origin_cell_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.WPSelectionTransformerArchive)
  return target;
}

size_t WPSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.WPSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_archived_selection()) {
    // required .TSP.Reference archived_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.archived_selection_);
  }

  return total_size;
}
size_t WPSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.WPSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference archived_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.archived_selection_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_cell_uid_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WPSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WPSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WPSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void WPSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WPSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const WPSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.WPSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_archived_selection()->::TSP::Reference::MergeFrom(
          from._internal_archived_selection());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_origin_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_origin_cell_uid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WPSelectionTransformerArchive::CopyFrom(const WPSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.WPSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_archived_selection()) {
    if (!_impl_.archived_selection_->IsInitialized()) return false;
  }
  if (_internal_has_origin_cell_uid()) {
    if (!_impl_.origin_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void WPSelectionTransformerArchive::InternalSwap(WPSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WPSelectionTransformerArchive, _impl_.origin_cell_uid_)
      + sizeof(WPSelectionTransformerArchive::_impl_.origin_cell_uid_)
      - PROTOBUF_FIELD_OFFSET(WPSelectionTransformerArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WPSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[91]);
}

// ===================================================================

class TableSubSelectionTransformerBaseArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableSubSelectionTransformerBaseArchive>()._impl_._has_bits_);
  static const ::TSP::UUIDPath& table_info_id_path(const TableSubSelectionTransformerBaseArchive* msg);
  static void set_has_table_info_id_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSP::UUIDPath&
TableSubSelectionTransformerBaseArchive::_Internal::table_info_id_path(const TableSubSelectionTransformerBaseArchive* msg) {
  return *msg->_impl_.table_info_id_path_;
}
void TableSubSelectionTransformerBaseArchive::clear_table_info_id_path() {
  if (_impl_.table_info_id_path_ != nullptr) _impl_.table_info_id_path_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TableSubSelectionTransformerBaseArchive::TableSubSelectionTransformerBaseArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableSubSelectionTransformerBaseArchive)
}
TableSubSelectionTransformerBaseArchive::TableSubSelectionTransformerBaseArchive(const TableSubSelectionTransformerBaseArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableSubSelectionTransformerBaseArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_info_id_path_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table_info_id_path()) {
    _this->_impl_.table_info_id_path_ = new ::TSP::UUIDPath(*from._impl_.table_info_id_path_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.TableSubSelectionTransformerBaseArchive)
}

inline void TableSubSelectionTransformerBaseArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.table_info_id_path_){nullptr}
  };
}

TableSubSelectionTransformerBaseArchive::~TableSubSelectionTransformerBaseArchive() {
  // @@protoc_insertion_point(destructor:TST.TableSubSelectionTransformerBaseArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableSubSelectionTransformerBaseArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_info_id_path_;
}

void TableSubSelectionTransformerBaseArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableSubSelectionTransformerBaseArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableSubSelectionTransformerBaseArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.table_info_id_path_ != nullptr);
    _impl_.table_info_id_path_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableSubSelectionTransformerBaseArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSP.UUIDPath table_info_id_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_info_id_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableSubSelectionTransformerBaseArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableSubSelectionTransformerBaseArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSP.UUIDPath table_info_id_path = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table_info_id_path(this),
        _Internal::table_info_id_path(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableSubSelectionTransformerBaseArchive)
  return target;
}

size_t TableSubSelectionTransformerBaseArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableSubSelectionTransformerBaseArchive)
  size_t total_size = 0;

  // required .TSP.UUIDPath table_info_id_path = 1;
  if (_internal_has_table_info_id_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_info_id_path_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableSubSelectionTransformerBaseArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableSubSelectionTransformerBaseArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableSubSelectionTransformerBaseArchive::GetClassData() const { return &_class_data_; }


void TableSubSelectionTransformerBaseArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableSubSelectionTransformerBaseArchive*>(&to_msg);
  auto& from = static_cast<const TableSubSelectionTransformerBaseArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableSubSelectionTransformerBaseArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_table_info_id_path()) {
    _this->_internal_mutable_table_info_id_path()->::TSP::UUIDPath::MergeFrom(
        from._internal_table_info_id_path());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableSubSelectionTransformerBaseArchive::CopyFrom(const TableSubSelectionTransformerBaseArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableSubSelectionTransformerBaseArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableSubSelectionTransformerBaseArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_table_info_id_path()) {
    if (!_impl_.table_info_id_path_->IsInitialized()) return false;
  }
  return true;
}

void TableSubSelectionTransformerBaseArchive::InternalSwap(TableSubSelectionTransformerBaseArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.table_info_id_path_, other->_impl_.table_info_id_path_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableSubSelectionTransformerBaseArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[92]);
}

// ===================================================================

class TableNameSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<TableNameSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const TableNameSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
TableNameSelectionTransformerArchive::_Internal::super(const TableNameSelectionTransformerArchive* msg) {
  return *msg->_impl_.super_;
}
TableNameSelectionTransformerArchive::TableNameSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.TableNameSelectionTransformerArchive)
}
TableNameSelectionTransformerArchive::TableNameSelectionTransformerArchive(const TableNameSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TableNameSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from._impl_.super_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.TableNameSelectionTransformerArchive)
}

inline void TableNameSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
  };
}

TableNameSelectionTransformerArchive::~TableNameSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.TableNameSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TableNameSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void TableNameSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TableNameSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.TableNameSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TableNameSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TableNameSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.TableNameSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.TableNameSelectionTransformerArchive)
  return target;
}

size_t TableNameSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.TableNameSelectionTransformerArchive)
  size_t total_size = 0;

  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TableNameSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TableNameSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TableNameSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void TableNameSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TableNameSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const TableNameSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.TableNameSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_super()) {
    _this->_internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(
        from._internal_super());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TableNameSelectionTransformerArchive::CopyFrom(const TableNameSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.TableNameSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableNameSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void TableNameSelectionTransformerArchive::InternalSwap(TableNameSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.super_, other->_impl_.super_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TableNameSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[93]);
}

// ===================================================================

class ControlCellSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<ControlCellSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const ControlCellSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uids(const ControlCellSelectionTransformerArchive* msg);
  static void set_has_cell_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDCoordArchive& origin_cell_uid(const ControlCellSelectionTransformerArchive* msg);
  static void set_has_origin_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellCoordinateArchive& origin_cell_id(const ControlCellSelectionTransformerArchive* msg);
  static void set_has_origin_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
ControlCellSelectionTransformerArchive::_Internal::super(const ControlCellSelectionTransformerArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::CellUIDListArchive&
ControlCellSelectionTransformerArchive::_Internal::cell_uids(const ControlCellSelectionTransformerArchive* msg) {
  return *msg->_impl_.cell_uids_;
}
const ::TSP::UUIDCoordArchive&
ControlCellSelectionTransformerArchive::_Internal::origin_cell_uid(const ControlCellSelectionTransformerArchive* msg) {
  return *msg->_impl_.origin_cell_uid_;
}
const ::TSCE::CellCoordinateArchive&
ControlCellSelectionTransformerArchive::_Internal::origin_cell_id(const ControlCellSelectionTransformerArchive* msg) {
  return *msg->_impl_.origin_cell_id_;
}
void ControlCellSelectionTransformerArchive::clear_cell_uids() {
  if (_impl_.cell_uids_ != nullptr) _impl_.cell_uids_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void ControlCellSelectionTransformerArchive::clear_origin_cell_uid() {
  if (_impl_.origin_cell_uid_ != nullptr) _impl_.origin_cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void ControlCellSelectionTransformerArchive::clear_origin_cell_id() {
  if (_impl_.origin_cell_id_ != nullptr) _impl_.origin_cell_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
ControlCellSelectionTransformerArchive::ControlCellSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.ControlCellSelectionTransformerArchive)
}
ControlCellSelectionTransformerArchive::ControlCellSelectionTransformerArchive(const ControlCellSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlCellSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uids_){nullptr}
    , decltype(_impl_.origin_cell_uid_){nullptr}
    , decltype(_impl_.origin_cell_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_uids()) {
    _this->_impl_.cell_uids_ = new ::TST::CellUIDListArchive(*from._impl_.cell_uids_);
  }
  if (from._internal_has_origin_cell_uid()) {
    _this->_impl_.origin_cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.origin_cell_uid_);
  }
  if (from._internal_has_origin_cell_id()) {
    _this->_impl_.origin_cell_id_ = new ::TSCE::CellCoordinateArchive(*from._impl_.origin_cell_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.ControlCellSelectionTransformerArchive)
}

inline void ControlCellSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uids_){nullptr}
    , decltype(_impl_.origin_cell_uid_){nullptr}
    , decltype(_impl_.origin_cell_id_){nullptr}
  };
}

ControlCellSelectionTransformerArchive::~ControlCellSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.ControlCellSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlCellSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_uids_;
  if (this != internal_default_instance()) delete _impl_.origin_cell_uid_;
  if (this != internal_default_instance()) delete _impl_.origin_cell_id_;
}

void ControlCellSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlCellSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.ControlCellSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_uids_ != nullptr);
      _impl_.cell_uids_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.origin_cell_uid_ != nullptr);
      _impl_.origin_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.origin_cell_id_ != nullptr);
      _impl_.origin_cell_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlCellSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlCellSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.ControlCellSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellUIDListArchive cell_uids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_uids(this),
        _Internal::cell_uids(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::origin_cell_uid(this),
        _Internal::origin_cell_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::origin_cell_id(this),
        _Internal::origin_cell_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.ControlCellSelectionTransformerArchive)
  return target;
}

size_t ControlCellSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.ControlCellSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_origin_cell_id()) {
    // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_cell_id_);
  }

  return total_size;
}
size_t ControlCellSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.ControlCellSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_cell_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.CellUIDListArchive cell_uids = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_uids_);
    }

    // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.origin_cell_uid_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlCellSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlCellSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlCellSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void ControlCellSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlCellSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const ControlCellSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.ControlCellSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_uids()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_cell_uids());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_origin_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_origin_cell_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_origin_cell_id()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_origin_cell_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlCellSelectionTransformerArchive::CopyFrom(const ControlCellSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.ControlCellSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlCellSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uids()) {
    if (!_impl_.cell_uids_->IsInitialized()) return false;
  }
  if (_internal_has_origin_cell_uid()) {
    if (!_impl_.origin_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void ControlCellSelectionTransformerArchive::InternalSwap(ControlCellSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlCellSelectionTransformerArchive, _impl_.origin_cell_id_)
      + sizeof(ControlCellSelectionTransformerArchive::_impl_.origin_cell_id_)
      - PROTOBUF_FIELD_OFFSET(ControlCellSelectionTransformerArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlCellSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[94]);
}

// ===================================================================

class StockCellSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StockCellSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const StockCellSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uids(const StockCellSelectionTransformerArchive* msg);
  static void set_has_cell_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDCoordArchive& origin_cell_uid(const StockCellSelectionTransformerArchive* msg);
  static void set_has_origin_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSCE::CellCoordinateArchive& origin_cell_id(const StockCellSelectionTransformerArchive* msg);
  static void set_has_origin_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
StockCellSelectionTransformerArchive::_Internal::super(const StockCellSelectionTransformerArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::CellUIDListArchive&
StockCellSelectionTransformerArchive::_Internal::cell_uids(const StockCellSelectionTransformerArchive* msg) {
  return *msg->_impl_.cell_uids_;
}
const ::TSP::UUIDCoordArchive&
StockCellSelectionTransformerArchive::_Internal::origin_cell_uid(const StockCellSelectionTransformerArchive* msg) {
  return *msg->_impl_.origin_cell_uid_;
}
const ::TSCE::CellCoordinateArchive&
StockCellSelectionTransformerArchive::_Internal::origin_cell_id(const StockCellSelectionTransformerArchive* msg) {
  return *msg->_impl_.origin_cell_id_;
}
void StockCellSelectionTransformerArchive::clear_cell_uids() {
  if (_impl_.cell_uids_ != nullptr) _impl_.cell_uids_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void StockCellSelectionTransformerArchive::clear_origin_cell_uid() {
  if (_impl_.origin_cell_uid_ != nullptr) _impl_.origin_cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void StockCellSelectionTransformerArchive::clear_origin_cell_id() {
  if (_impl_.origin_cell_id_ != nullptr) _impl_.origin_cell_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
StockCellSelectionTransformerArchive::StockCellSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StockCellSelectionTransformerArchive)
}
StockCellSelectionTransformerArchive::StockCellSelectionTransformerArchive(const StockCellSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StockCellSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uids_){nullptr}
    , decltype(_impl_.origin_cell_uid_){nullptr}
    , decltype(_impl_.origin_cell_id_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_uids()) {
    _this->_impl_.cell_uids_ = new ::TST::CellUIDListArchive(*from._impl_.cell_uids_);
  }
  if (from._internal_has_origin_cell_uid()) {
    _this->_impl_.origin_cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.origin_cell_uid_);
  }
  if (from._internal_has_origin_cell_id()) {
    _this->_impl_.origin_cell_id_ = new ::TSCE::CellCoordinateArchive(*from._impl_.origin_cell_id_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.StockCellSelectionTransformerArchive)
}

inline void StockCellSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uids_){nullptr}
    , decltype(_impl_.origin_cell_uid_){nullptr}
    , decltype(_impl_.origin_cell_id_){nullptr}
  };
}

StockCellSelectionTransformerArchive::~StockCellSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.StockCellSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StockCellSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_uids_;
  if (this != internal_default_instance()) delete _impl_.origin_cell_uid_;
  if (this != internal_default_instance()) delete _impl_.origin_cell_id_;
}

void StockCellSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StockCellSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StockCellSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_uids_ != nullptr);
      _impl_.cell_uids_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.origin_cell_uid_ != nullptr);
      _impl_.origin_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.origin_cell_id_ != nullptr);
      _impl_.origin_cell_id_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StockCellSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StockCellSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StockCellSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellUIDListArchive cell_uids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_uids(this),
        _Internal::cell_uids(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::origin_cell_uid(this),
        _Internal::origin_cell_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::origin_cell_id(this),
        _Internal::origin_cell_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StockCellSelectionTransformerArchive)
  return target;
}

size_t StockCellSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.StockCellSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_origin_cell_id()) {
    // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_cell_id_);
  }

  return total_size;
}
size_t StockCellSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StockCellSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSCE.CellCoordinateArchive origin_cell_id = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.origin_cell_id_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.CellUIDListArchive cell_uids = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_uids_);
    }

    // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.origin_cell_uid_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StockCellSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StockCellSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StockCellSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void StockCellSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StockCellSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const StockCellSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StockCellSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_uids()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_cell_uids());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_origin_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_origin_cell_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_origin_cell_id()->::TSCE::CellCoordinateArchive::MergeFrom(
          from._internal_origin_cell_id());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StockCellSelectionTransformerArchive::CopyFrom(const StockCellSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StockCellSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StockCellSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uids()) {
    if (!_impl_.cell_uids_->IsInitialized()) return false;
  }
  if (_internal_has_origin_cell_uid()) {
    if (!_impl_.origin_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void StockCellSelectionTransformerArchive::InternalSwap(StockCellSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StockCellSelectionTransformerArchive, _impl_.origin_cell_id_)
      + sizeof(StockCellSelectionTransformerArchive::_impl_.origin_cell_id_)
      - PROTOBUF_FIELD_OFFSET(StockCellSelectionTransformerArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StockCellSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[95]);
}

// ===================================================================

class RegionSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RegionSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const RegionSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::CellUIDListArchive& cell_uids(const RegionSelectionTransformerArchive* msg);
  static void set_has_cell_uids(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUIDCoordArchive& origin_cell_uid(const RegionSelectionTransformerArchive* msg);
  static void set_has_origin_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUIDCoordArchive& anchor_cell_uid(const RegionSelectionTransformerArchive* msg);
  static void set_has_anchor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUIDCoordArchive& cursor_cell_uid(const RegionSelectionTransformerArchive* msg);
  static void set_has_cursor_cell_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000019) ^ 0x00000019) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
RegionSelectionTransformerArchive::_Internal::super(const RegionSelectionTransformerArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::CellUIDListArchive&
RegionSelectionTransformerArchive::_Internal::cell_uids(const RegionSelectionTransformerArchive* msg) {
  return *msg->_impl_.cell_uids_;
}
const ::TSP::UUIDCoordArchive&
RegionSelectionTransformerArchive::_Internal::origin_cell_uid(const RegionSelectionTransformerArchive* msg) {
  return *msg->_impl_.origin_cell_uid_;
}
const ::TSP::UUIDCoordArchive&
RegionSelectionTransformerArchive::_Internal::anchor_cell_uid(const RegionSelectionTransformerArchive* msg) {
  return *msg->_impl_.anchor_cell_uid_;
}
const ::TSP::UUIDCoordArchive&
RegionSelectionTransformerArchive::_Internal::cursor_cell_uid(const RegionSelectionTransformerArchive* msg) {
  return *msg->_impl_.cursor_cell_uid_;
}
void RegionSelectionTransformerArchive::clear_cell_uids() {
  if (_impl_.cell_uids_ != nullptr) _impl_.cell_uids_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void RegionSelectionTransformerArchive::clear_origin_cell_uid() {
  if (_impl_.origin_cell_uid_ != nullptr) _impl_.origin_cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void RegionSelectionTransformerArchive::clear_anchor_cell_uid() {
  if (_impl_.anchor_cell_uid_ != nullptr) _impl_.anchor_cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void RegionSelectionTransformerArchive::clear_cursor_cell_uid() {
  if (_impl_.cursor_cell_uid_ != nullptr) _impl_.cursor_cell_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
RegionSelectionTransformerArchive::RegionSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.RegionSelectionTransformerArchive)
}
RegionSelectionTransformerArchive::RegionSelectionTransformerArchive(const RegionSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegionSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uids_){nullptr}
    , decltype(_impl_.origin_cell_uid_){nullptr}
    , decltype(_impl_.anchor_cell_uid_){nullptr}
    , decltype(_impl_.cursor_cell_uid_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_uids()) {
    _this->_impl_.cell_uids_ = new ::TST::CellUIDListArchive(*from._impl_.cell_uids_);
  }
  if (from._internal_has_origin_cell_uid()) {
    _this->_impl_.origin_cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.origin_cell_uid_);
  }
  if (from._internal_has_anchor_cell_uid()) {
    _this->_impl_.anchor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.anchor_cell_uid_);
  }
  if (from._internal_has_cursor_cell_uid()) {
    _this->_impl_.cursor_cell_uid_ = new ::TSP::UUIDCoordArchive(*from._impl_.cursor_cell_uid_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.RegionSelectionTransformerArchive)
}

inline void RegionSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_uids_){nullptr}
    , decltype(_impl_.origin_cell_uid_){nullptr}
    , decltype(_impl_.anchor_cell_uid_){nullptr}
    , decltype(_impl_.cursor_cell_uid_){nullptr}
  };
}

RegionSelectionTransformerArchive::~RegionSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.RegionSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegionSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_uids_;
  if (this != internal_default_instance()) delete _impl_.origin_cell_uid_;
  if (this != internal_default_instance()) delete _impl_.anchor_cell_uid_;
  if (this != internal_default_instance()) delete _impl_.cursor_cell_uid_;
}

void RegionSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegionSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.RegionSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_uids_ != nullptr);
      _impl_.cell_uids_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.origin_cell_uid_ != nullptr);
      _impl_.origin_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.anchor_cell_uid_ != nullptr);
      _impl_.anchor_cell_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.cursor_cell_uid_ != nullptr);
      _impl_.cursor_cell_uid_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegionSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.CellUIDListArchive cell_uids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_uids(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive anchor_cell_uid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_anchor_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUIDCoordArchive cursor_cell_uid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cursor_cell_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegionSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.RegionSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.CellUIDListArchive cell_uids = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cell_uids(this),
        _Internal::cell_uids(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::origin_cell_uid(this),
        _Internal::origin_cell_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDCoordArchive anchor_cell_uid = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::anchor_cell_uid(this),
        _Internal::anchor_cell_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUIDCoordArchive cursor_cell_uid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cursor_cell_uid(this),
        _Internal::cursor_cell_uid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.RegionSelectionTransformerArchive)
  return target;
}

size_t RegionSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.RegionSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_anchor_cell_uid()) {
    // required .TSP.UUIDCoordArchive anchor_cell_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.anchor_cell_uid_);
  }

  if (_internal_has_cursor_cell_uid()) {
    // required .TSP.UUIDCoordArchive cursor_cell_uid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cursor_cell_uid_);
  }

  return total_size;
}
size_t RegionSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.RegionSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000019) ^ 0x00000019) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUIDCoordArchive anchor_cell_uid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.anchor_cell_uid_);

    // required .TSP.UUIDCoordArchive cursor_cell_uid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cursor_cell_uid_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .TST.CellUIDListArchive cell_uids = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cell_uids_);
    }

    // optional .TSP.UUIDCoordArchive origin_cell_uid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.origin_cell_uid_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegionSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegionSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegionSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void RegionSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegionSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const RegionSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.RegionSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_uids()->::TST::CellUIDListArchive::MergeFrom(
          from._internal_cell_uids());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_origin_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_origin_cell_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_anchor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_anchor_cell_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_cursor_cell_uid()->::TSP::UUIDCoordArchive::MergeFrom(
          from._internal_cursor_cell_uid());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegionSelectionTransformerArchive::CopyFrom(const RegionSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.RegionSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegionSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_uids()) {
    if (!_impl_.cell_uids_->IsInitialized()) return false;
  }
  if (_internal_has_origin_cell_uid()) {
    if (!_impl_.origin_cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_anchor_cell_uid()) {
    if (!_impl_.anchor_cell_uid_->IsInitialized()) return false;
  }
  if (_internal_has_cursor_cell_uid()) {
    if (!_impl_.cursor_cell_uid_->IsInitialized()) return false;
  }
  return true;
}

void RegionSelectionTransformerArchive::InternalSwap(RegionSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegionSelectionTransformerArchive, _impl_.cursor_cell_uid_)
      + sizeof(RegionSelectionTransformerArchive::_impl_.cursor_cell_uid_)
      - PROTOBUF_FIELD_OFFSET(RegionSelectionTransformerArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegionSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[96]);
}

// ===================================================================

class StrokeSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<StrokeSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const StrokeSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::Reference& archived_selection(const StrokeSelectionTransformerArchive* msg);
  static void set_has_archived_selection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
StrokeSelectionTransformerArchive::_Internal::super(const StrokeSelectionTransformerArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
StrokeSelectionTransformerArchive::_Internal::archived_selection(const StrokeSelectionTransformerArchive* msg) {
  return *msg->_impl_.archived_selection_;
}
void StrokeSelectionTransformerArchive::clear_archived_selection() {
  if (_impl_.archived_selection_ != nullptr) _impl_.archived_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
StrokeSelectionTransformerArchive::StrokeSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.StrokeSelectionTransformerArchive)
}
StrokeSelectionTransformerArchive::StrokeSelectionTransformerArchive(const StrokeSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StrokeSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.archived_selection_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from._impl_.super_);
  }
  if (from._internal_has_archived_selection()) {
    _this->_impl_.archived_selection_ = new ::TSP::Reference(*from._impl_.archived_selection_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.StrokeSelectionTransformerArchive)
}

inline void StrokeSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.archived_selection_){nullptr}
  };
}

StrokeSelectionTransformerArchive::~StrokeSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.StrokeSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StrokeSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.archived_selection_;
}

void StrokeSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StrokeSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.StrokeSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.archived_selection_ != nullptr);
      _impl_.archived_selection_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StrokeSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference archived_selection = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_archived_selection(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StrokeSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.StrokeSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSP.Reference archived_selection = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::archived_selection(this),
        _Internal::archived_selection(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.StrokeSelectionTransformerArchive)
  return target;
}

size_t StrokeSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.StrokeSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_archived_selection()) {
    // required .TSP.Reference archived_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.archived_selection_);
  }

  return total_size;
}
size_t StrokeSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.StrokeSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference archived_selection = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.archived_selection_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StrokeSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StrokeSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StrokeSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void StrokeSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StrokeSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const StrokeSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.StrokeSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_archived_selection()->::TSP::Reference::MergeFrom(
          from._internal_archived_selection());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StrokeSelectionTransformerArchive::CopyFrom(const StrokeSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.StrokeSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StrokeSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_archived_selection()) {
    if (!_impl_.archived_selection_->IsInitialized()) return false;
  }
  return true;
}

void StrokeSelectionTransformerArchive::InternalSwap(StrokeSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StrokeSelectionTransformerArchive, _impl_.archived_selection_)
      + sizeof(StrokeSelectionTransformerArchive::_impl_.archived_selection_)
      - PROTOBUF_FIELD_OFFSET(StrokeSelectionTransformerArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StrokeSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[97]);
}

// ===================================================================

class RowColumnSelectionTransformerArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<RowColumnSelectionTransformerArchive>()._impl_._has_bits_);
  static const ::TST::TableSubSelectionTransformerBaseArchive& super(const RowColumnSelectionTransformerArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_selection_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableSubSelectionTransformerBaseArchive&
RowColumnSelectionTransformerArchive::_Internal::super(const RowColumnSelectionTransformerArchive* msg) {
  return *msg->_impl_.super_;
}
void RowColumnSelectionTransformerArchive::clear_row_col_uids() {
  _impl_.row_col_uids_.Clear();
}
RowColumnSelectionTransformerArchive::RowColumnSelectionTransformerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.RowColumnSelectionTransformerArchive)
}
RowColumnSelectionTransformerArchive::RowColumnSelectionTransformerArchive(const RowColumnSelectionTransformerArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RowColumnSelectionTransformerArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_col_uids_){from._impl_.row_col_uids_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.selection_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableSubSelectionTransformerBaseArchive(*from._impl_.super_);
  }
  _this->_impl_.selection_type_ = from._impl_.selection_type_;
  // @@protoc_insertion_point(copy_constructor:TST.RowColumnSelectionTransformerArchive)
}

inline void RowColumnSelectionTransformerArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.row_col_uids_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.selection_type_){0}
  };
}

RowColumnSelectionTransformerArchive::~RowColumnSelectionTransformerArchive() {
  // @@protoc_insertion_point(destructor:TST.RowColumnSelectionTransformerArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RowColumnSelectionTransformerArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.row_col_uids_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
}

void RowColumnSelectionTransformerArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RowColumnSelectionTransformerArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.RowColumnSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.row_col_uids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  _impl_.selection_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RowColumnSelectionTransformerArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.SelectionTypeArchive selection_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::SelectionTypeArchive_IsValid(val))) {
            _internal_set_selection_type(static_cast<::TST::SelectionTypeArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_col_uids = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_col_uids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RowColumnSelectionTransformerArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.RowColumnSelectionTransformerArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.SelectionTypeArchive selection_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_selection_type(), target);
  }

  // repeated .TSP.UUID row_col_uids = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_col_uids_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_col_uids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.RowColumnSelectionTransformerArchive)
  return target;
}

size_t RowColumnSelectionTransformerArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.RowColumnSelectionTransformerArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_selection_type()) {
    // required .TST.SelectionTypeArchive selection_type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_selection_type());
  }

  return total_size;
}
size_t RowColumnSelectionTransformerArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.RowColumnSelectionTransformerArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableSubSelectionTransformerBaseArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.SelectionTypeArchive selection_type = 2;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_selection_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID row_col_uids = 3;
  total_size += 1UL * this->_internal_row_col_uids_size();
  for (const auto& msg : this->_impl_.row_col_uids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RowColumnSelectionTransformerArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RowColumnSelectionTransformerArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RowColumnSelectionTransformerArchive::GetClassData() const { return &_class_data_; }


void RowColumnSelectionTransformerArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RowColumnSelectionTransformerArchive*>(&to_msg);
  auto& from = static_cast<const RowColumnSelectionTransformerArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.RowColumnSelectionTransformerArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.row_col_uids_.MergeFrom(from._impl_.row_col_uids_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableSubSelectionTransformerBaseArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.selection_type_ = from._impl_.selection_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RowColumnSelectionTransformerArchive::CopyFrom(const RowColumnSelectionTransformerArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.RowColumnSelectionTransformerArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RowColumnSelectionTransformerArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_col_uids_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void RowColumnSelectionTransformerArchive::InternalSwap(RowColumnSelectionTransformerArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.row_col_uids_.InternalSwap(&other->_impl_.row_col_uids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RowColumnSelectionTransformerArchive, _impl_.selection_type_)
      + sizeof(RowColumnSelectionTransformerArchive::_impl_.selection_type_)
      - PROTOBUF_FIELD_OFFSET(RowColumnSelectionTransformerArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RowColumnSelectionTransformerArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[98]);
}

// ===================================================================

class CommandCategoryMoveRowsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandCategoryMoveRowsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandCategoryMoveRowsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TSP::Reference& cell_diff_map(const CommandCategoryMoveRowsArchive* msg);
  static void set_has_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& undo_cell_diff_map(const CommandCategoryMoveRowsArchive* msg);
  static void set_has_undo_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::GroupColumnListArchive& grouping_columns(const CommandCategoryMoveRowsArchive* msg);
  static void set_has_grouping_columns(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandCategoryMoveRowsArchive::_Internal::super(const CommandCategoryMoveRowsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::Reference&
CommandCategoryMoveRowsArchive::_Internal::cell_diff_map(const CommandCategoryMoveRowsArchive* msg) {
  return *msg->_impl_.cell_diff_map_;
}
const ::TSP::Reference&
CommandCategoryMoveRowsArchive::_Internal::undo_cell_diff_map(const CommandCategoryMoveRowsArchive* msg) {
  return *msg->_impl_.undo_cell_diff_map_;
}
const ::TST::GroupColumnListArchive&
CommandCategoryMoveRowsArchive::_Internal::grouping_columns(const CommandCategoryMoveRowsArchive* msg) {
  return *msg->_impl_.grouping_columns_;
}
void CommandCategoryMoveRowsArchive::clear_category_row_order() {
  _impl_.category_row_order_.Clear();
}
void CommandCategoryMoveRowsArchive::clear_undo_category_row_order() {
  _impl_.undo_category_row_order_.Clear();
}
void CommandCategoryMoveRowsArchive::clear_cell_diff_map() {
  if (_impl_.cell_diff_map_ != nullptr) _impl_.cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandCategoryMoveRowsArchive::clear_undo_cell_diff_map() {
  if (_impl_.undo_cell_diff_map_ != nullptr) _impl_.undo_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandCategoryMoveRowsArchive::clear_grouping_columns() {
  if (_impl_.grouping_columns_ != nullptr) _impl_.grouping_columns_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CommandCategoryMoveRowsArchive::CommandCategoryMoveRowsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandCategoryMoveRowsArchive)
}
CommandCategoryMoveRowsArchive::CommandCategoryMoveRowsArchive(const CommandCategoryMoveRowsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandCategoryMoveRowsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_row_order_){from._impl_.category_row_order_}
    , decltype(_impl_.undo_category_row_order_){from._impl_.undo_category_row_order_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.undo_cell_diff_map_){nullptr}
    , decltype(_impl_.grouping_columns_){nullptr}
    , decltype(_impl_.action_type_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_cell_diff_map()) {
    _this->_impl_.cell_diff_map_ = new ::TSP::Reference(*from._impl_.cell_diff_map_);
  }
  if (from._internal_has_undo_cell_diff_map()) {
    _this->_impl_.undo_cell_diff_map_ = new ::TSP::Reference(*from._impl_.undo_cell_diff_map_);
  }
  if (from._internal_has_grouping_columns()) {
    _this->_impl_.grouping_columns_ = new ::TST::GroupColumnListArchive(*from._impl_.grouping_columns_);
  }
  _this->_impl_.action_type_ = from._impl_.action_type_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandCategoryMoveRowsArchive)
}

inline void CommandCategoryMoveRowsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.category_row_order_){arena}
    , decltype(_impl_.undo_category_row_order_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.cell_diff_map_){nullptr}
    , decltype(_impl_.undo_cell_diff_map_){nullptr}
    , decltype(_impl_.grouping_columns_){nullptr}
    , decltype(_impl_.action_type_){0u}
  };
}

CommandCategoryMoveRowsArchive::~CommandCategoryMoveRowsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandCategoryMoveRowsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandCategoryMoveRowsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.category_row_order_.~RepeatedPtrField();
  _impl_.undo_category_row_order_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.undo_cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.grouping_columns_;
}

void CommandCategoryMoveRowsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandCategoryMoveRowsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandCategoryMoveRowsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.category_row_order_.Clear();
  _impl_.undo_category_row_order_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.cell_diff_map_ != nullptr);
      _impl_.cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.undo_cell_diff_map_ != nullptr);
      _impl_.undo_cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.grouping_columns_ != nullptr);
      _impl_.grouping_columns_->Clear();
    }
  }
  _impl_.action_type_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandCategoryMoveRowsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 action_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_action_type(&has_bits);
          _impl_.action_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID category_row_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_category_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_category_row_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_category_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference cell_diff_map = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference undo_cell_diff_map = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.GroupColumnListArchive grouping_columns = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_columns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandCategoryMoveRowsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandCategoryMoveRowsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required uint32 action_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_action_type(), target);
  }

  // repeated .TSP.UUID category_row_order = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_category_row_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_category_row_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID undo_category_row_order = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_undo_category_row_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_undo_category_row_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.Reference cell_diff_map = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cell_diff_map(this),
        _Internal::cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference undo_cell_diff_map = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::undo_cell_diff_map(this),
        _Internal::undo_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TST.GroupColumnListArchive grouping_columns = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::grouping_columns(this),
        _Internal::grouping_columns(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandCategoryMoveRowsArchive)
  return target;
}

size_t CommandCategoryMoveRowsArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandCategoryMoveRowsArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_cell_diff_map()) {
    // required .TSP.Reference cell_diff_map = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);
  }

  if (_internal_has_action_type()) {
    // required uint32 action_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_action_type());
  }

  return total_size;
}
size_t CommandCategoryMoveRowsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandCategoryMoveRowsArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.Reference cell_diff_map = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cell_diff_map_);

    // required uint32 action_type = 2;
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_action_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID category_row_order = 3;
  total_size += 1UL * this->_internal_category_row_order_size();
  for (const auto& msg : this->_impl_.category_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_category_row_order = 4;
  total_size += 1UL * this->_internal_undo_category_row_order_size();
  for (const auto& msg : this->_impl_.undo_category_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .TSP.Reference undo_cell_diff_map = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_cell_diff_map_);
    }

    // optional .TST.GroupColumnListArchive grouping_columns = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grouping_columns_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandCategoryMoveRowsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandCategoryMoveRowsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandCategoryMoveRowsArchive::GetClassData() const { return &_class_data_; }


void CommandCategoryMoveRowsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandCategoryMoveRowsArchive*>(&to_msg);
  auto& from = static_cast<const CommandCategoryMoveRowsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandCategoryMoveRowsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.category_row_order_.MergeFrom(from._impl_.category_row_order_);
  _this->_impl_.undo_category_row_order_.MergeFrom(from._impl_.undo_category_row_order_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_cell_diff_map());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_undo_cell_diff_map()->::TSP::Reference::MergeFrom(
          from._internal_undo_cell_diff_map());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_grouping_columns()->::TST::GroupColumnListArchive::MergeFrom(
          from._internal_grouping_columns());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.action_type_ = from._impl_.action_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandCategoryMoveRowsArchive::CopyFrom(const CommandCategoryMoveRowsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandCategoryMoveRowsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandCategoryMoveRowsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.category_row_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.undo_category_row_order_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_cell_diff_map()) {
    if (!_impl_.cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_undo_cell_diff_map()) {
    if (!_impl_.undo_cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_columns()) {
    if (!_impl_.grouping_columns_->IsInitialized()) return false;
  }
  return true;
}

void CommandCategoryMoveRowsArchive::InternalSwap(CommandCategoryMoveRowsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.category_row_order_.InternalSwap(&other->_impl_.category_row_order_);
  _impl_.undo_category_row_order_.InternalSwap(&other->_impl_.undo_category_row_order_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandCategoryMoveRowsArchive, _impl_.action_type_)
      + sizeof(CommandCategoryMoveRowsArchive::_impl_.action_type_)
      - PROTOBUF_FIELD_OFFSET(CommandCategoryMoveRowsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandCategoryMoveRowsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[99]);
}

// ===================================================================

class CommandRewriteHiddenStatesForGroupByChangeArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteHiddenStatesForGroupByChangeArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSCE::GroupByChangeArchive& group_by_change(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg);
  static void set_has_group_by_change(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::ExpandCollapseStateArchive& collapsed_state(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg);
  static void set_has_collapsed_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewriteHiddenStatesForGroupByChangeArchive::_Internal::super(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSCE::GroupByChangeArchive&
CommandRewriteHiddenStatesForGroupByChangeArchive::_Internal::group_by_change(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg) {
  return *msg->_impl_.group_by_change_;
}
const ::TST::ExpandCollapseStateArchive&
CommandRewriteHiddenStatesForGroupByChangeArchive::_Internal::collapsed_state(const CommandRewriteHiddenStatesForGroupByChangeArchive* msg) {
  return *msg->_impl_.collapsed_state_;
}
void CommandRewriteHiddenStatesForGroupByChangeArchive::clear_group_by_change() {
  if (_impl_.group_by_change_ != nullptr) _impl_.group_by_change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandRewriteHiddenStatesForGroupByChangeArchive::clear_collapsed_state() {
  if (_impl_.collapsed_state_ != nullptr) _impl_.collapsed_state_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandRewriteHiddenStatesForGroupByChangeArchive::CommandRewriteHiddenStatesForGroupByChangeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
}
CommandRewriteHiddenStatesForGroupByChangeArchive::CommandRewriteHiddenStatesForGroupByChangeArchive(const CommandRewriteHiddenStatesForGroupByChangeArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewriteHiddenStatesForGroupByChangeArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.group_by_change_){nullptr}
    , decltype(_impl_.collapsed_state_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_group_by_change()) {
    _this->_impl_.group_by_change_ = new ::TSCE::GroupByChangeArchive(*from._impl_.group_by_change_);
  }
  if (from._internal_has_collapsed_state()) {
    _this->_impl_.collapsed_state_ = new ::TST::ExpandCollapseStateArchive(*from._impl_.collapsed_state_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
}

inline void CommandRewriteHiddenStatesForGroupByChangeArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.group_by_change_){nullptr}
    , decltype(_impl_.collapsed_state_){nullptr}
  };
}

CommandRewriteHiddenStatesForGroupByChangeArchive::~CommandRewriteHiddenStatesForGroupByChangeArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewriteHiddenStatesForGroupByChangeArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.group_by_change_;
  if (this != internal_default_instance()) delete _impl_.collapsed_state_;
}

void CommandRewriteHiddenStatesForGroupByChangeArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewriteHiddenStatesForGroupByChangeArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.group_by_change_ != nullptr);
      _impl_.group_by_change_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.collapsed_state_ != nullptr);
      _impl_.collapsed_state_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteHiddenStatesForGroupByChangeArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.GroupByChangeArchive group_by_change = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_group_by_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ExpandCollapseStateArchive collapsed_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_collapsed_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewriteHiddenStatesForGroupByChangeArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.GroupByChangeArchive group_by_change = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::group_by_change(this),
        _Internal::group_by_change(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ExpandCollapseStateArchive collapsed_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::collapsed_state(this),
        _Internal::collapsed_state(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  return target;
}

size_t CommandRewriteHiddenStatesForGroupByChangeArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_group_by_change()) {
    // required .TSCE.GroupByChangeArchive group_by_change = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_change_);
  }

  return total_size;
}
size_t CommandRewriteHiddenStatesForGroupByChangeArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSCE.GroupByChangeArchive group_by_change = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.group_by_change_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.ExpandCollapseStateArchive collapsed_state = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collapsed_state_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteHiddenStatesForGroupByChangeArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewriteHiddenStatesForGroupByChangeArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteHiddenStatesForGroupByChangeArchive::GetClassData() const { return &_class_data_; }


void CommandRewriteHiddenStatesForGroupByChangeArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewriteHiddenStatesForGroupByChangeArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewriteHiddenStatesForGroupByChangeArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_group_by_change()->::TSCE::GroupByChangeArchive::MergeFrom(
          from._internal_group_by_change());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_collapsed_state()->::TST::ExpandCollapseStateArchive::MergeFrom(
          from._internal_collapsed_state());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteHiddenStatesForGroupByChangeArchive::CopyFrom(const CommandRewriteHiddenStatesForGroupByChangeArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteHiddenStatesForGroupByChangeArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteHiddenStatesForGroupByChangeArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_group_by_change()) {
    if (!_impl_.group_by_change_->IsInitialized()) return false;
  }
  if (_internal_has_collapsed_state()) {
    if (!_impl_.collapsed_state_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteHiddenStatesForGroupByChangeArchive::InternalSwap(CommandRewriteHiddenStatesForGroupByChangeArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteHiddenStatesForGroupByChangeArchive, _impl_.collapsed_state_)
      + sizeof(CommandRewriteHiddenStatesForGroupByChangeArchive::_impl_.collapsed_state_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteHiddenStatesForGroupByChangeArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteHiddenStatesForGroupByChangeArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[100]);
}

// ===================================================================

class CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewritePencilAnnotationFormulasArchive_AnnotationPair>()._impl_._has_bits_);
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::Reference& annotation(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* msg);
  static void set_has_annotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSP::Reference&
CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_Internal::annotation(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* msg) {
  return *msg->_impl_.annotation_;
}
void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::clear_annotation() {
  if (_impl_.annotation_ != nullptr) _impl_.annotation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
}
CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.index_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_annotation()) {
    _this->_impl_.annotation_ = new ::TSP::Reference(*from._impl_.annotation_);
  }
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
}

inline void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotation_){nullptr}
    , decltype(_impl_.index_){uint64_t{0u}}
  };
}

CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::~CommandRewritePencilAnnotationFormulasArchive_AnnotationPair() {
  // @@protoc_insertion_point(destructor:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.annotation_;
}

void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.annotation_ != nullptr);
    _impl_.annotation_->Clear();
  }
  _impl_.index_ = uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_index(&has_bits);
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.Reference annotation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_annotation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required uint64 index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_index(), target);
  }

  // required .TSP.Reference annotation = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::annotation(this),
        _Internal::annotation(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  return target;
}

size_t CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  size_t total_size = 0;

  if (_internal_has_annotation()) {
    // required .TSP.Reference annotation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotation_);
  }

  if (_internal_has_index()) {
    // required uint64 index = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  return total_size;
}
size_t CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSP.Reference annotation = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.annotation_);

    // required uint64 index = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::GetClassData() const { return &_class_data_; }


void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewritePencilAnnotationFormulasArchive_AnnotationPair*>(&to_msg);
  auto& from = static_cast<const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_annotation()->::TSP::Reference::MergeFrom(
          from._internal_annotation());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::CopyFrom(const CommandRewritePencilAnnotationFormulasArchive_AnnotationPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_annotation()) {
    if (!_impl_.annotation_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::InternalSwap(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, _impl_.index_)
      + sizeof(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(CommandRewritePencilAnnotationFormulasArchive_AnnotationPair, _impl_.annotation_)>(
          reinterpret_cast<char*>(&_impl_.annotation_),
          reinterpret_cast<char*>(&other->_impl_.annotation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewritePencilAnnotationFormulasArchive_AnnotationPair::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[101]);
}

// ===================================================================

class CommandRewritePencilAnnotationFormulasArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewritePencilAnnotationFormulasArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandRewritePencilAnnotationFormulasArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewritePencilAnnotationFormulasArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::FormulasForUndoArchive& formulas_to_rewrite(const CommandRewritePencilAnnotationFormulasArchive* msg);
  static void set_has_formulas_to_rewrite(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandRewritePencilAnnotationFormulasArchive::_Internal::super(const CommandRewritePencilAnnotationFormulasArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::FormulaRewriteSpecArchive&
CommandRewritePencilAnnotationFormulasArchive::_Internal::rewrite_spec(const CommandRewritePencilAnnotationFormulasArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
const ::TSCE::FormulasForUndoArchive&
CommandRewritePencilAnnotationFormulasArchive::_Internal::formulas_to_rewrite(const CommandRewritePencilAnnotationFormulasArchive* msg) {
  return *msg->_impl_.formulas_to_rewrite_;
}
void CommandRewritePencilAnnotationFormulasArchive::clear_formulas_to_rewrite() {
  if (_impl_.formulas_to_rewrite_ != nullptr) _impl_.formulas_to_rewrite_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandRewritePencilAnnotationFormulasArchive::CommandRewritePencilAnnotationFormulasArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewritePencilAnnotationFormulasArchive)
}
CommandRewritePencilAnnotationFormulasArchive::CommandRewritePencilAnnotationFormulasArchive(const CommandRewritePencilAnnotationFormulasArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewritePencilAnnotationFormulasArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_for_undo_){from._impl_.annotations_for_undo_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TST::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  if (from._internal_has_formulas_to_rewrite()) {
    _this->_impl_.formulas_to_rewrite_ = new ::TSCE::FormulasForUndoArchive(*from._impl_.formulas_to_rewrite_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewritePencilAnnotationFormulasArchive)
}

inline void CommandRewritePencilAnnotationFormulasArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.annotations_for_undo_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.formulas_to_rewrite_){nullptr}
  };
}

CommandRewritePencilAnnotationFormulasArchive::~CommandRewritePencilAnnotationFormulasArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewritePencilAnnotationFormulasArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewritePencilAnnotationFormulasArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.annotations_for_undo_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
  if (this != internal_default_instance()) delete _impl_.formulas_to_rewrite_;
}

void CommandRewritePencilAnnotationFormulasArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewritePencilAnnotationFormulasArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.annotations_for_undo_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.formulas_to_rewrite_ != nullptr);
      _impl_.formulas_to_rewrite_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewritePencilAnnotationFormulasArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_formulas_to_rewrite(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair annotations_for_undo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_annotations_for_undo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewritePencilAnnotationFormulasArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::formulas_to_rewrite(this),
        _Internal::formulas_to_rewrite(this).GetCachedSize(), target, stream);
  }

  // repeated .TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair annotations_for_undo = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_annotations_for_undo_size()); i < n; i++) {
    const auto& repfield = this->_internal_annotations_for_undo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewritePencilAnnotationFormulasArchive)
  return target;
}

size_t CommandRewritePencilAnnotationFormulasArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);
  }

  if (_internal_has_formulas_to_rewrite()) {
    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);
  }

  return total_size;
}
size_t CommandRewritePencilAnnotationFormulasArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);

    // required .TSCE.FormulasForUndoArchive formulas_to_rewrite = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.formulas_to_rewrite_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TST.CommandRewritePencilAnnotationFormulasArchive.AnnotationPair annotations_for_undo = 4;
  total_size += 1UL * this->_internal_annotations_for_undo_size();
  for (const auto& msg : this->_impl_.annotations_for_undo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewritePencilAnnotationFormulasArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewritePencilAnnotationFormulasArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewritePencilAnnotationFormulasArchive::GetClassData() const { return &_class_data_; }


void CommandRewritePencilAnnotationFormulasArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewritePencilAnnotationFormulasArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewritePencilAnnotationFormulasArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.annotations_for_undo_.MergeFrom(from._impl_.annotations_for_undo_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rewrite_spec()->::TST::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_formulas_to_rewrite()->::TSCE::FormulasForUndoArchive::MergeFrom(
          from._internal_formulas_to_rewrite());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewritePencilAnnotationFormulasArchive::CopyFrom(const CommandRewritePencilAnnotationFormulasArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewritePencilAnnotationFormulasArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewritePencilAnnotationFormulasArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.annotations_for_undo_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_formulas_to_rewrite()) {
    if (!_impl_.formulas_to_rewrite_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewritePencilAnnotationFormulasArchive::InternalSwap(CommandRewritePencilAnnotationFormulasArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.annotations_for_undo_.InternalSwap(&other->_impl_.annotations_for_undo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewritePencilAnnotationFormulasArchive, _impl_.formulas_to_rewrite_)
      + sizeof(CommandRewritePencilAnnotationFormulasArchive::_impl_.formulas_to_rewrite_)
      - PROTOBUF_FIELD_OFFSET(CommandRewritePencilAnnotationFormulasArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewritePencilAnnotationFormulasArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[102]);
}

// ===================================================================

class CommandPivotSetPivotRulesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPivotSetPivotRulesArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& new_target_pivot_refresh_uid(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_target_pivot_refresh_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TST::GroupColumnListArchive& new_row_groupings(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_row_groupings(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TST::GroupColumnListArchive& old_row_groupings(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_row_groupings(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TST::GroupColumnListArchive& new_column_groupings(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_column_groupings(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::TST::GroupColumnListArchive& old_column_groupings(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_column_groupings(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TST::ColumnAggregateListArchive& new_aggregates(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_aggregates(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::TST::ColumnAggregateListArchive& old_aggregates(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_aggregates(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_new_flattening_dimension(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_old_flattening_dimension(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::TSP::Reference& new_pivot_data_model(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_pivot_data_model(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::Reference& old_pivot_data_model(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_pivot_data_model(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::TSP::UUID& new_pivot_refresh_uid(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_pivot_refresh_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::UUID& old_pivot_refresh_uid(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_pivot_refresh_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_new_pivot_refresh_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_old_pivot_refresh_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::TSP::Reference& new_options_map(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_options_map(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TSP::Reference& old_options_map(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_options_map(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TST::HierarchicalCellDiffMapArchive& new_hierarchical_cell_diff_map(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_hierarchical_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::TST::HierarchicalCellDiffMapArchive& old_hierarchical_cell_diff_map(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_hierarchical_cell_diff_map(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::TSP::Reference& formula_rewrite_command_for_undo(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_formula_rewrite_command_for_undo(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::TSP::UUIDRectArchive& new_body_uid_tract(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_body_uid_tract(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::TSP::UUIDRectArchive& old_body_uid_tract(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_body_uid_tract(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::TSP::UUID& old_target_pivot_refresh_uid(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_target_pivot_refresh_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::TSP::UUID& new_target_pivot_row_column_rule_change_uid(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_target_pivot_row_column_rule_change_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::TSP::UUID& old_target_pivot_row_column_rule_change_uid(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_target_pivot_row_column_rule_change_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::TSP::UUID& new_target_pivot_aggregate_rule_change_uid(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_target_pivot_aggregate_rule_change_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::TSP::UUID& old_target_pivot_aggregate_rule_change_uid(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_target_pivot_aggregate_rule_change_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_is_order_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::TSP::Reference& new_filter_set(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_new_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::TSP::Reference& old_filter_set(const CommandPivotSetPivotRulesArchive* msg);
  static void set_has_old_filter_set(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_use_small_table_limits(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_setting_filters_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_undo_setting_filters_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandPivotSetPivotRulesArchive::_Internal::super(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandPivotSetPivotRulesArchive::_Internal::new_target_pivot_refresh_uid(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_target_pivot_refresh_uid_;
}
const ::TST::GroupColumnListArchive&
CommandPivotSetPivotRulesArchive::_Internal::new_row_groupings(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_row_groupings_;
}
const ::TST::GroupColumnListArchive&
CommandPivotSetPivotRulesArchive::_Internal::old_row_groupings(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_row_groupings_;
}
const ::TST::GroupColumnListArchive&
CommandPivotSetPivotRulesArchive::_Internal::new_column_groupings(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_column_groupings_;
}
const ::TST::GroupColumnListArchive&
CommandPivotSetPivotRulesArchive::_Internal::old_column_groupings(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_column_groupings_;
}
const ::TST::ColumnAggregateListArchive&
CommandPivotSetPivotRulesArchive::_Internal::new_aggregates(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_aggregates_;
}
const ::TST::ColumnAggregateListArchive&
CommandPivotSetPivotRulesArchive::_Internal::old_aggregates(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_aggregates_;
}
const ::TSP::Reference&
CommandPivotSetPivotRulesArchive::_Internal::new_pivot_data_model(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_pivot_data_model_;
}
const ::TSP::Reference&
CommandPivotSetPivotRulesArchive::_Internal::old_pivot_data_model(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_pivot_data_model_;
}
const ::TSP::UUID&
CommandPivotSetPivotRulesArchive::_Internal::new_pivot_refresh_uid(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_pivot_refresh_uid_;
}
const ::TSP::UUID&
CommandPivotSetPivotRulesArchive::_Internal::old_pivot_refresh_uid(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_pivot_refresh_uid_;
}
const ::TSP::Reference&
CommandPivotSetPivotRulesArchive::_Internal::new_options_map(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_options_map_;
}
const ::TSP::Reference&
CommandPivotSetPivotRulesArchive::_Internal::old_options_map(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_options_map_;
}
const ::TST::HierarchicalCellDiffMapArchive&
CommandPivotSetPivotRulesArchive::_Internal::new_hierarchical_cell_diff_map(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_hierarchical_cell_diff_map_;
}
const ::TST::HierarchicalCellDiffMapArchive&
CommandPivotSetPivotRulesArchive::_Internal::old_hierarchical_cell_diff_map(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_hierarchical_cell_diff_map_;
}
const ::TSP::Reference&
CommandPivotSetPivotRulesArchive::_Internal::formula_rewrite_command_for_undo(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.formula_rewrite_command_for_undo_;
}
const ::TSP::UUIDRectArchive&
CommandPivotSetPivotRulesArchive::_Internal::new_body_uid_tract(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_body_uid_tract_;
}
const ::TSP::UUIDRectArchive&
CommandPivotSetPivotRulesArchive::_Internal::old_body_uid_tract(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_body_uid_tract_;
}
const ::TSP::UUID&
CommandPivotSetPivotRulesArchive::_Internal::old_target_pivot_refresh_uid(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_target_pivot_refresh_uid_;
}
const ::TSP::UUID&
CommandPivotSetPivotRulesArchive::_Internal::new_target_pivot_row_column_rule_change_uid(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_target_pivot_row_column_rule_change_uid_;
}
const ::TSP::UUID&
CommandPivotSetPivotRulesArchive::_Internal::old_target_pivot_row_column_rule_change_uid(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_target_pivot_row_column_rule_change_uid_;
}
const ::TSP::UUID&
CommandPivotSetPivotRulesArchive::_Internal::new_target_pivot_aggregate_rule_change_uid(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_target_pivot_aggregate_rule_change_uid_;
}
const ::TSP::UUID&
CommandPivotSetPivotRulesArchive::_Internal::old_target_pivot_aggregate_rule_change_uid(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_target_pivot_aggregate_rule_change_uid_;
}
const ::TSP::Reference&
CommandPivotSetPivotRulesArchive::_Internal::new_filter_set(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.new_filter_set_;
}
const ::TSP::Reference&
CommandPivotSetPivotRulesArchive::_Internal::old_filter_set(const CommandPivotSetPivotRulesArchive* msg) {
  return *msg->_impl_.old_filter_set_;
}
void CommandPivotSetPivotRulesArchive::clear_new_target_pivot_refresh_uid() {
  if (_impl_.new_target_pivot_refresh_uid_ != nullptr) _impl_.new_target_pivot_refresh_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandPivotSetPivotRulesArchive::clear_new_row_groupings() {
  if (_impl_.new_row_groupings_ != nullptr) _impl_.new_row_groupings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandPivotSetPivotRulesArchive::clear_old_row_groupings() {
  if (_impl_.old_row_groupings_ != nullptr) _impl_.old_row_groupings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandPivotSetPivotRulesArchive::clear_new_column_groupings() {
  if (_impl_.new_column_groupings_ != nullptr) _impl_.new_column_groupings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandPivotSetPivotRulesArchive::clear_old_column_groupings() {
  if (_impl_.old_column_groupings_ != nullptr) _impl_.old_column_groupings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CommandPivotSetPivotRulesArchive::clear_new_aggregates() {
  if (_impl_.new_aggregates_ != nullptr) _impl_.new_aggregates_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void CommandPivotSetPivotRulesArchive::clear_old_aggregates() {
  if (_impl_.old_aggregates_ != nullptr) _impl_.old_aggregates_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void CommandPivotSetPivotRulesArchive::clear_new_pivot_data_model() {
  if (_impl_.new_pivot_data_model_ != nullptr) _impl_.new_pivot_data_model_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void CommandPivotSetPivotRulesArchive::clear_old_pivot_data_model() {
  if (_impl_.old_pivot_data_model_ != nullptr) _impl_.old_pivot_data_model_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void CommandPivotSetPivotRulesArchive::clear_new_pivot_refresh_uid() {
  if (_impl_.new_pivot_refresh_uid_ != nullptr) _impl_.new_pivot_refresh_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void CommandPivotSetPivotRulesArchive::clear_old_pivot_refresh_uid() {
  if (_impl_.old_pivot_refresh_uid_ != nullptr) _impl_.old_pivot_refresh_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void CommandPivotSetPivotRulesArchive::clear_new_options_map() {
  if (_impl_.new_options_map_ != nullptr) _impl_.new_options_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void CommandPivotSetPivotRulesArchive::clear_old_options_map() {
  if (_impl_.old_options_map_ != nullptr) _impl_.old_options_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void CommandPivotSetPivotRulesArchive::clear_new_view_row_order() {
  _impl_.new_view_row_order_.Clear();
}
void CommandPivotSetPivotRulesArchive::clear_old_view_row_order() {
  _impl_.old_view_row_order_.Clear();
}
void CommandPivotSetPivotRulesArchive::clear_new_view_column_order() {
  _impl_.new_view_column_order_.Clear();
}
void CommandPivotSetPivotRulesArchive::clear_old_view_column_order() {
  _impl_.old_view_column_order_.Clear();
}
void CommandPivotSetPivotRulesArchive::clear_new_collapsed_row_groups() {
  _impl_.new_collapsed_row_groups_.Clear();
}
void CommandPivotSetPivotRulesArchive::clear_old_collapsed_row_groups() {
  _impl_.old_collapsed_row_groups_.Clear();
}
void CommandPivotSetPivotRulesArchive::clear_new_collapsed_column_groups() {
  _impl_.new_collapsed_column_groups_.Clear();
}
void CommandPivotSetPivotRulesArchive::clear_old_collapsed_column_groups() {
  _impl_.old_collapsed_column_groups_.Clear();
}
void CommandPivotSetPivotRulesArchive::clear_new_hierarchical_cell_diff_map() {
  if (_impl_.new_hierarchical_cell_diff_map_ != nullptr) _impl_.new_hierarchical_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void CommandPivotSetPivotRulesArchive::clear_old_hierarchical_cell_diff_map() {
  if (_impl_.old_hierarchical_cell_diff_map_ != nullptr) _impl_.old_hierarchical_cell_diff_map_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void CommandPivotSetPivotRulesArchive::clear_formula_rewrite_command_for_undo() {
  if (_impl_.formula_rewrite_command_for_undo_ != nullptr) _impl_.formula_rewrite_command_for_undo_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void CommandPivotSetPivotRulesArchive::clear_new_body_uid_tract() {
  if (_impl_.new_body_uid_tract_ != nullptr) _impl_.new_body_uid_tract_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void CommandPivotSetPivotRulesArchive::clear_old_body_uid_tract() {
  if (_impl_.old_body_uid_tract_ != nullptr) _impl_.old_body_uid_tract_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void CommandPivotSetPivotRulesArchive::clear_old_target_pivot_refresh_uid() {
  if (_impl_.old_target_pivot_refresh_uid_ != nullptr) _impl_.old_target_pivot_refresh_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
void CommandPivotSetPivotRulesArchive::clear_new_target_pivot_row_column_rule_change_uid() {
  if (_impl_.new_target_pivot_row_column_rule_change_uid_ != nullptr) _impl_.new_target_pivot_row_column_rule_change_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
void CommandPivotSetPivotRulesArchive::clear_old_target_pivot_row_column_rule_change_uid() {
  if (_impl_.old_target_pivot_row_column_rule_change_uid_ != nullptr) _impl_.old_target_pivot_row_column_rule_change_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
void CommandPivotSetPivotRulesArchive::clear_new_target_pivot_aggregate_rule_change_uid() {
  if (_impl_.new_target_pivot_aggregate_rule_change_uid_ != nullptr) _impl_.new_target_pivot_aggregate_rule_change_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
void CommandPivotSetPivotRulesArchive::clear_old_target_pivot_aggregate_rule_change_uid() {
  if (_impl_.old_target_pivot_aggregate_rule_change_uid_ != nullptr) _impl_.old_target_pivot_aggregate_rule_change_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
void CommandPivotSetPivotRulesArchive::clear_new_filter_set() {
  if (_impl_.new_filter_set_ != nullptr) _impl_.new_filter_set_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
void CommandPivotSetPivotRulesArchive::clear_old_filter_set() {
  if (_impl_.old_filter_set_ != nullptr) _impl_.old_filter_set_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
CommandPivotSetPivotRulesArchive::CommandPivotSetPivotRulesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandPivotSetPivotRulesArchive)
}
CommandPivotSetPivotRulesArchive::CommandPivotSetPivotRulesArchive(const CommandPivotSetPivotRulesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandPivotSetPivotRulesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_view_row_order_){from._impl_.new_view_row_order_}
    , decltype(_impl_.old_view_row_order_){from._impl_.old_view_row_order_}
    , decltype(_impl_.new_view_column_order_){from._impl_.new_view_column_order_}
    , decltype(_impl_.old_view_column_order_){from._impl_.old_view_column_order_}
    , decltype(_impl_.new_collapsed_row_groups_){from._impl_.new_collapsed_row_groups_}
    , decltype(_impl_.old_collapsed_row_groups_){from._impl_.old_collapsed_row_groups_}
    , decltype(_impl_.new_collapsed_column_groups_){from._impl_.new_collapsed_column_groups_}
    , decltype(_impl_.old_collapsed_column_groups_){from._impl_.old_collapsed_column_groups_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_target_pivot_refresh_uid_){nullptr}
    , decltype(_impl_.new_row_groupings_){nullptr}
    , decltype(_impl_.old_row_groupings_){nullptr}
    , decltype(_impl_.new_column_groupings_){nullptr}
    , decltype(_impl_.old_column_groupings_){nullptr}
    , decltype(_impl_.new_aggregates_){nullptr}
    , decltype(_impl_.old_aggregates_){nullptr}
    , decltype(_impl_.new_pivot_data_model_){nullptr}
    , decltype(_impl_.old_pivot_data_model_){nullptr}
    , decltype(_impl_.new_pivot_refresh_uid_){nullptr}
    , decltype(_impl_.old_pivot_refresh_uid_){nullptr}
    , decltype(_impl_.new_options_map_){nullptr}
    , decltype(_impl_.old_options_map_){nullptr}
    , decltype(_impl_.new_hierarchical_cell_diff_map_){nullptr}
    , decltype(_impl_.old_hierarchical_cell_diff_map_){nullptr}
    , decltype(_impl_.formula_rewrite_command_for_undo_){nullptr}
    , decltype(_impl_.new_body_uid_tract_){nullptr}
    , decltype(_impl_.old_body_uid_tract_){nullptr}
    , decltype(_impl_.old_target_pivot_refresh_uid_){nullptr}
    , decltype(_impl_.new_target_pivot_row_column_rule_change_uid_){nullptr}
    , decltype(_impl_.old_target_pivot_row_column_rule_change_uid_){nullptr}
    , decltype(_impl_.new_target_pivot_aggregate_rule_change_uid_){nullptr}
    , decltype(_impl_.old_target_pivot_aggregate_rule_change_uid_){nullptr}
    , decltype(_impl_.new_filter_set_){nullptr}
    , decltype(_impl_.old_filter_set_){nullptr}
    , decltype(_impl_.new_pivot_refresh_timestamp_){}
    , decltype(_impl_.old_pivot_refresh_timestamp_){}
    , decltype(_impl_.is_order_finalized_){}
    , decltype(_impl_.use_small_table_limits_){}
    , decltype(_impl_.setting_filters_enabled_){}
    , decltype(_impl_.undo_setting_filters_enabled_){}
    , decltype(_impl_.new_flattening_dimension_){}
    , decltype(_impl_.old_flattening_dimension_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_new_target_pivot_refresh_uid()) {
    _this->_impl_.new_target_pivot_refresh_uid_ = new ::TSP::UUID(*from._impl_.new_target_pivot_refresh_uid_);
  }
  if (from._internal_has_new_row_groupings()) {
    _this->_impl_.new_row_groupings_ = new ::TST::GroupColumnListArchive(*from._impl_.new_row_groupings_);
  }
  if (from._internal_has_old_row_groupings()) {
    _this->_impl_.old_row_groupings_ = new ::TST::GroupColumnListArchive(*from._impl_.old_row_groupings_);
  }
  if (from._internal_has_new_column_groupings()) {
    _this->_impl_.new_column_groupings_ = new ::TST::GroupColumnListArchive(*from._impl_.new_column_groupings_);
  }
  if (from._internal_has_old_column_groupings()) {
    _this->_impl_.old_column_groupings_ = new ::TST::GroupColumnListArchive(*from._impl_.old_column_groupings_);
  }
  if (from._internal_has_new_aggregates()) {
    _this->_impl_.new_aggregates_ = new ::TST::ColumnAggregateListArchive(*from._impl_.new_aggregates_);
  }
  if (from._internal_has_old_aggregates()) {
    _this->_impl_.old_aggregates_ = new ::TST::ColumnAggregateListArchive(*from._impl_.old_aggregates_);
  }
  if (from._internal_has_new_pivot_data_model()) {
    _this->_impl_.new_pivot_data_model_ = new ::TSP::Reference(*from._impl_.new_pivot_data_model_);
  }
  if (from._internal_has_old_pivot_data_model()) {
    _this->_impl_.old_pivot_data_model_ = new ::TSP::Reference(*from._impl_.old_pivot_data_model_);
  }
  if (from._internal_has_new_pivot_refresh_uid()) {
    _this->_impl_.new_pivot_refresh_uid_ = new ::TSP::UUID(*from._impl_.new_pivot_refresh_uid_);
  }
  if (from._internal_has_old_pivot_refresh_uid()) {
    _this->_impl_.old_pivot_refresh_uid_ = new ::TSP::UUID(*from._impl_.old_pivot_refresh_uid_);
  }
  if (from._internal_has_new_options_map()) {
    _this->_impl_.new_options_map_ = new ::TSP::Reference(*from._impl_.new_options_map_);
  }
  if (from._internal_has_old_options_map()) {
    _this->_impl_.old_options_map_ = new ::TSP::Reference(*from._impl_.old_options_map_);
  }
  if (from._internal_has_new_hierarchical_cell_diff_map()) {
    _this->_impl_.new_hierarchical_cell_diff_map_ = new ::TST::HierarchicalCellDiffMapArchive(*from._impl_.new_hierarchical_cell_diff_map_);
  }
  if (from._internal_has_old_hierarchical_cell_diff_map()) {
    _this->_impl_.old_hierarchical_cell_diff_map_ = new ::TST::HierarchicalCellDiffMapArchive(*from._impl_.old_hierarchical_cell_diff_map_);
  }
  if (from._internal_has_formula_rewrite_command_for_undo()) {
    _this->_impl_.formula_rewrite_command_for_undo_ = new ::TSP::Reference(*from._impl_.formula_rewrite_command_for_undo_);
  }
  if (from._internal_has_new_body_uid_tract()) {
    _this->_impl_.new_body_uid_tract_ = new ::TSP::UUIDRectArchive(*from._impl_.new_body_uid_tract_);
  }
  if (from._internal_has_old_body_uid_tract()) {
    _this->_impl_.old_body_uid_tract_ = new ::TSP::UUIDRectArchive(*from._impl_.old_body_uid_tract_);
  }
  if (from._internal_has_old_target_pivot_refresh_uid()) {
    _this->_impl_.old_target_pivot_refresh_uid_ = new ::TSP::UUID(*from._impl_.old_target_pivot_refresh_uid_);
  }
  if (from._internal_has_new_target_pivot_row_column_rule_change_uid()) {
    _this->_impl_.new_target_pivot_row_column_rule_change_uid_ = new ::TSP::UUID(*from._impl_.new_target_pivot_row_column_rule_change_uid_);
  }
  if (from._internal_has_old_target_pivot_row_column_rule_change_uid()) {
    _this->_impl_.old_target_pivot_row_column_rule_change_uid_ = new ::TSP::UUID(*from._impl_.old_target_pivot_row_column_rule_change_uid_);
  }
  if (from._internal_has_new_target_pivot_aggregate_rule_change_uid()) {
    _this->_impl_.new_target_pivot_aggregate_rule_change_uid_ = new ::TSP::UUID(*from._impl_.new_target_pivot_aggregate_rule_change_uid_);
  }
  if (from._internal_has_old_target_pivot_aggregate_rule_change_uid()) {
    _this->_impl_.old_target_pivot_aggregate_rule_change_uid_ = new ::TSP::UUID(*from._impl_.old_target_pivot_aggregate_rule_change_uid_);
  }
  if (from._internal_has_new_filter_set()) {
    _this->_impl_.new_filter_set_ = new ::TSP::Reference(*from._impl_.new_filter_set_);
  }
  if (from._internal_has_old_filter_set()) {
    _this->_impl_.old_filter_set_ = new ::TSP::Reference(*from._impl_.old_filter_set_);
  }
  ::memcpy(&_impl_.new_pivot_refresh_timestamp_, &from._impl_.new_pivot_refresh_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.old_flattening_dimension_) -
    reinterpret_cast<char*>(&_impl_.new_pivot_refresh_timestamp_)) + sizeof(_impl_.old_flattening_dimension_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandPivotSetPivotRulesArchive)
}

inline void CommandPivotSetPivotRulesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.new_view_row_order_){arena}
    , decltype(_impl_.old_view_row_order_){arena}
    , decltype(_impl_.new_view_column_order_){arena}
    , decltype(_impl_.old_view_column_order_){arena}
    , decltype(_impl_.new_collapsed_row_groups_){arena}
    , decltype(_impl_.old_collapsed_row_groups_){arena}
    , decltype(_impl_.new_collapsed_column_groups_){arena}
    , decltype(_impl_.old_collapsed_column_groups_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.new_target_pivot_refresh_uid_){nullptr}
    , decltype(_impl_.new_row_groupings_){nullptr}
    , decltype(_impl_.old_row_groupings_){nullptr}
    , decltype(_impl_.new_column_groupings_){nullptr}
    , decltype(_impl_.old_column_groupings_){nullptr}
    , decltype(_impl_.new_aggregates_){nullptr}
    , decltype(_impl_.old_aggregates_){nullptr}
    , decltype(_impl_.new_pivot_data_model_){nullptr}
    , decltype(_impl_.old_pivot_data_model_){nullptr}
    , decltype(_impl_.new_pivot_refresh_uid_){nullptr}
    , decltype(_impl_.old_pivot_refresh_uid_){nullptr}
    , decltype(_impl_.new_options_map_){nullptr}
    , decltype(_impl_.old_options_map_){nullptr}
    , decltype(_impl_.new_hierarchical_cell_diff_map_){nullptr}
    , decltype(_impl_.old_hierarchical_cell_diff_map_){nullptr}
    , decltype(_impl_.formula_rewrite_command_for_undo_){nullptr}
    , decltype(_impl_.new_body_uid_tract_){nullptr}
    , decltype(_impl_.old_body_uid_tract_){nullptr}
    , decltype(_impl_.old_target_pivot_refresh_uid_){nullptr}
    , decltype(_impl_.new_target_pivot_row_column_rule_change_uid_){nullptr}
    , decltype(_impl_.old_target_pivot_row_column_rule_change_uid_){nullptr}
    , decltype(_impl_.new_target_pivot_aggregate_rule_change_uid_){nullptr}
    , decltype(_impl_.old_target_pivot_aggregate_rule_change_uid_){nullptr}
    , decltype(_impl_.new_filter_set_){nullptr}
    , decltype(_impl_.old_filter_set_){nullptr}
    , decltype(_impl_.new_pivot_refresh_timestamp_){0}
    , decltype(_impl_.old_pivot_refresh_timestamp_){0}
    , decltype(_impl_.is_order_finalized_){false}
    , decltype(_impl_.use_small_table_limits_){false}
    , decltype(_impl_.setting_filters_enabled_){0}
    , decltype(_impl_.undo_setting_filters_enabled_){0}
    , decltype(_impl_.new_flattening_dimension_){-1}
    , decltype(_impl_.old_flattening_dimension_){-1}
  };
}

CommandPivotSetPivotRulesArchive::~CommandPivotSetPivotRulesArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandPivotSetPivotRulesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandPivotSetPivotRulesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.new_view_row_order_.~RepeatedPtrField();
  _impl_.old_view_row_order_.~RepeatedPtrField();
  _impl_.new_view_column_order_.~RepeatedPtrField();
  _impl_.old_view_column_order_.~RepeatedPtrField();
  _impl_.new_collapsed_row_groups_.~RepeatedPtrField();
  _impl_.old_collapsed_row_groups_.~RepeatedPtrField();
  _impl_.new_collapsed_column_groups_.~RepeatedPtrField();
  _impl_.old_collapsed_column_groups_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.new_target_pivot_refresh_uid_;
  if (this != internal_default_instance()) delete _impl_.new_row_groupings_;
  if (this != internal_default_instance()) delete _impl_.old_row_groupings_;
  if (this != internal_default_instance()) delete _impl_.new_column_groupings_;
  if (this != internal_default_instance()) delete _impl_.old_column_groupings_;
  if (this != internal_default_instance()) delete _impl_.new_aggregates_;
  if (this != internal_default_instance()) delete _impl_.old_aggregates_;
  if (this != internal_default_instance()) delete _impl_.new_pivot_data_model_;
  if (this != internal_default_instance()) delete _impl_.old_pivot_data_model_;
  if (this != internal_default_instance()) delete _impl_.new_pivot_refresh_uid_;
  if (this != internal_default_instance()) delete _impl_.old_pivot_refresh_uid_;
  if (this != internal_default_instance()) delete _impl_.new_options_map_;
  if (this != internal_default_instance()) delete _impl_.old_options_map_;
  if (this != internal_default_instance()) delete _impl_.new_hierarchical_cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.old_hierarchical_cell_diff_map_;
  if (this != internal_default_instance()) delete _impl_.formula_rewrite_command_for_undo_;
  if (this != internal_default_instance()) delete _impl_.new_body_uid_tract_;
  if (this != internal_default_instance()) delete _impl_.old_body_uid_tract_;
  if (this != internal_default_instance()) delete _impl_.old_target_pivot_refresh_uid_;
  if (this != internal_default_instance()) delete _impl_.new_target_pivot_row_column_rule_change_uid_;
  if (this != internal_default_instance()) delete _impl_.old_target_pivot_row_column_rule_change_uid_;
  if (this != internal_default_instance()) delete _impl_.new_target_pivot_aggregate_rule_change_uid_;
  if (this != internal_default_instance()) delete _impl_.old_target_pivot_aggregate_rule_change_uid_;
  if (this != internal_default_instance()) delete _impl_.new_filter_set_;
  if (this != internal_default_instance()) delete _impl_.old_filter_set_;
}

void CommandPivotSetPivotRulesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandPivotSetPivotRulesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandPivotSetPivotRulesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_view_row_order_.Clear();
  _impl_.old_view_row_order_.Clear();
  _impl_.new_view_column_order_.Clear();
  _impl_.old_view_column_order_.Clear();
  _impl_.new_collapsed_row_groups_.Clear();
  _impl_.old_collapsed_row_groups_.Clear();
  _impl_.new_collapsed_column_groups_.Clear();
  _impl_.old_collapsed_column_groups_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.new_target_pivot_refresh_uid_ != nullptr);
      _impl_.new_target_pivot_refresh_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.new_row_groupings_ != nullptr);
      _impl_.new_row_groupings_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.old_row_groupings_ != nullptr);
      _impl_.old_row_groupings_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.new_column_groupings_ != nullptr);
      _impl_.new_column_groupings_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.old_column_groupings_ != nullptr);
      _impl_.old_column_groupings_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.new_aggregates_ != nullptr);
      _impl_.new_aggregates_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.old_aggregates_ != nullptr);
      _impl_.old_aggregates_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.new_pivot_data_model_ != nullptr);
      _impl_.new_pivot_data_model_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.old_pivot_data_model_ != nullptr);
      _impl_.old_pivot_data_model_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.new_pivot_refresh_uid_ != nullptr);
      _impl_.new_pivot_refresh_uid_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(_impl_.old_pivot_refresh_uid_ != nullptr);
      _impl_.old_pivot_refresh_uid_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(_impl_.new_options_map_ != nullptr);
      _impl_.new_options_map_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(_impl_.old_options_map_ != nullptr);
      _impl_.old_options_map_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(_impl_.new_hierarchical_cell_diff_map_ != nullptr);
      _impl_.new_hierarchical_cell_diff_map_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(_impl_.old_hierarchical_cell_diff_map_ != nullptr);
      _impl_.old_hierarchical_cell_diff_map_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      GOOGLE_DCHECK(_impl_.formula_rewrite_command_for_undo_ != nullptr);
      _impl_.formula_rewrite_command_for_undo_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      GOOGLE_DCHECK(_impl_.new_body_uid_tract_ != nullptr);
      _impl_.new_body_uid_tract_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      GOOGLE_DCHECK(_impl_.old_body_uid_tract_ != nullptr);
      _impl_.old_body_uid_tract_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      GOOGLE_DCHECK(_impl_.old_target_pivot_refresh_uid_ != nullptr);
      _impl_.old_target_pivot_refresh_uid_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      GOOGLE_DCHECK(_impl_.new_target_pivot_row_column_rule_change_uid_ != nullptr);
      _impl_.new_target_pivot_row_column_rule_change_uid_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      GOOGLE_DCHECK(_impl_.old_target_pivot_row_column_rule_change_uid_ != nullptr);
      _impl_.old_target_pivot_row_column_rule_change_uid_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      GOOGLE_DCHECK(_impl_.new_target_pivot_aggregate_rule_change_uid_ != nullptr);
      _impl_.new_target_pivot_aggregate_rule_change_uid_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      GOOGLE_DCHECK(_impl_.old_target_pivot_aggregate_rule_change_uid_ != nullptr);
      _impl_.old_target_pivot_aggregate_rule_change_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      GOOGLE_DCHECK(_impl_.new_filter_set_ != nullptr);
      _impl_.new_filter_set_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      GOOGLE_DCHECK(_impl_.old_filter_set_ != nullptr);
      _impl_.old_filter_set_->Clear();
    }
  }
  if (cached_has_bits & 0xfc000000u) {
    ::memset(&_impl_.new_pivot_refresh_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.undo_setting_filters_enabled_) -
        reinterpret_cast<char*>(&_impl_.new_pivot_refresh_timestamp_)) + sizeof(_impl_.undo_setting_filters_enabled_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    _impl_.new_flattening_dimension_ = -1;
    _impl_.old_flattening_dimension_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPivotSetPivotRulesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID new_target_pivot_refresh_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_target_pivot_refresh_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.GroupColumnListArchive new_row_groupings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_row_groupings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.GroupColumnListArchive old_row_groupings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_row_groupings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.GroupColumnListArchive new_column_groupings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_column_groupings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.GroupColumnListArchive old_column_groupings = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_column_groupings(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ColumnAggregateListArchive new_aggregates = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_aggregates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.ColumnAggregateListArchive old_aggregates = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_aggregates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableDimensionArchive new_flattening_dimension = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_new_flattening_dimension(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(9, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableDimensionArchive old_flattening_dimension = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_old_flattening_dimension(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_pivot_data_model = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_pivot_data_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_pivot_data_model = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_pivot_data_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID new_pivot_refresh_uid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_pivot_refresh_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID old_pivot_refresh_uid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_pivot_refresh_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double new_pivot_refresh_timestamp = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 121)) {
          _Internal::set_has_new_pivot_refresh_timestamp(&_impl_._has_bits_);
          _impl_.new_pivot_refresh_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double old_pivot_refresh_timestamp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 129)) {
          _Internal::set_has_old_pivot_refresh_timestamp(&_impl_._has_bits_);
          _impl_.old_pivot_refresh_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_options_map = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_options_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_options_map = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_options_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID new_view_row_order = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_new_view_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID old_view_row_order = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_old_view_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID new_view_column_order = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_new_view_column_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID old_view_column_order = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_old_view_column_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID new_collapsed_row_groups = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_new_collapsed_row_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID old_collapsed_row_groups = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_old_collapsed_row_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID new_collapsed_column_groups = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_new_collapsed_column_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID old_collapsed_column_groups = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_old_collapsed_column_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .TST.HierarchicalCellDiffMapArchive new_hierarchical_cell_diff_map = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_hierarchical_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.HierarchicalCellDiffMapArchive old_hierarchical_cell_diff_map = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_hierarchical_cell_diff_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference formula_rewrite_command_for_undo = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_formula_rewrite_command_for_undo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDRectArchive new_body_uid_tract = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_body_uid_tract(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUIDRectArchive old_body_uid_tract = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_body_uid_tract(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID old_target_pivot_refresh_uid = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_target_pivot_refresh_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID new_target_pivot_row_column_rule_change_uid = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_target_pivot_row_column_rule_change_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID old_target_pivot_row_column_rule_change_uid = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_target_pivot_row_column_rule_change_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID new_target_pivot_aggregate_rule_change_uid = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_target_pivot_aggregate_rule_change_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID old_target_pivot_aggregate_rule_change_uid = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_target_pivot_aggregate_rule_change_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_order_finalized = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_is_order_finalized(&_impl_._has_bits_);
          _impl_.is_order_finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference new_filter_set = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_filter_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.Reference old_filter_set = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_old_filter_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool use_small_table_limits = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_use_small_table_limits(&_impl_._has_bits_);
          _impl_.use_small_table_limits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 setting_filters_enabled = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_setting_filters_enabled(&_impl_._has_bits_);
          _impl_.setting_filters_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 undo_setting_filters_enabled = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_undo_setting_filters_enabled(&_impl_._has_bits_);
          _impl_.undo_setting_filters_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandPivotSetPivotRulesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandPivotSetPivotRulesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID new_target_pivot_refresh_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_target_pivot_refresh_uid(this),
        _Internal::new_target_pivot_refresh_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TST.GroupColumnListArchive new_row_groupings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::new_row_groupings(this),
        _Internal::new_row_groupings(this).GetCachedSize(), target, stream);
  }

  // optional .TST.GroupColumnListArchive old_row_groupings = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::old_row_groupings(this),
        _Internal::old_row_groupings(this).GetCachedSize(), target, stream);
  }

  // optional .TST.GroupColumnListArchive new_column_groupings = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::new_column_groupings(this),
        _Internal::new_column_groupings(this).GetCachedSize(), target, stream);
  }

  // optional .TST.GroupColumnListArchive old_column_groupings = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::old_column_groupings(this),
        _Internal::old_column_groupings(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ColumnAggregateListArchive new_aggregates = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::new_aggregates(this),
        _Internal::new_aggregates(this).GetCachedSize(), target, stream);
  }

  // optional .TST.ColumnAggregateListArchive old_aggregates = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::old_aggregates(this),
        _Internal::old_aggregates(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TST.TableDimensionArchive new_flattening_dimension = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_new_flattening_dimension(), target);
  }

  // optional .TST.TableDimensionArchive old_flattening_dimension = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_old_flattening_dimension(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TSP.Reference new_pivot_data_model = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::new_pivot_data_model(this),
        _Internal::new_pivot_data_model(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_pivot_data_model = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::old_pivot_data_model(this),
        _Internal::old_pivot_data_model(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID new_pivot_refresh_uid = 13;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::new_pivot_refresh_uid(this),
        _Internal::new_pivot_refresh_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID old_pivot_refresh_uid = 14;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::old_pivot_refresh_uid(this),
        _Internal::old_pivot_refresh_uid(this).GetCachedSize(), target, stream);
  }

  // optional double new_pivot_refresh_timestamp = 15;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(15, this->_internal_new_pivot_refresh_timestamp(), target);
  }

  // optional double old_pivot_refresh_timestamp = 16;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(16, this->_internal_old_pivot_refresh_timestamp(), target);
  }

  // optional .TSP.Reference new_options_map = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::new_options_map(this),
        _Internal::new_options_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_options_map = 18;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::old_options_map(this),
        _Internal::old_options_map(this).GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID new_view_row_order = 19;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_view_row_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_view_row_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(19, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID old_view_row_order = 20;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_view_row_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_view_row_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(20, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID new_view_column_order = 21;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_view_column_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_view_column_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(21, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID old_view_column_order = 22;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_view_column_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_view_column_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(22, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID new_collapsed_row_groups = 23;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_collapsed_row_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_collapsed_row_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(23, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID old_collapsed_row_groups = 24;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_collapsed_row_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_collapsed_row_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(24, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID new_collapsed_column_groups = 25;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_new_collapsed_column_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_new_collapsed_column_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(25, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID old_collapsed_column_groups = 26;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_old_collapsed_column_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_old_collapsed_column_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(26, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .TST.HierarchicalCellDiffMapArchive new_hierarchical_cell_diff_map = 27;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::new_hierarchical_cell_diff_map(this),
        _Internal::new_hierarchical_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TST.HierarchicalCellDiffMapArchive old_hierarchical_cell_diff_map = 28;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::old_hierarchical_cell_diff_map(this),
        _Internal::old_hierarchical_cell_diff_map(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference formula_rewrite_command_for_undo = 29;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::formula_rewrite_command_for_undo(this),
        _Internal::formula_rewrite_command_for_undo(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDRectArchive new_body_uid_tract = 30;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::new_body_uid_tract(this),
        _Internal::new_body_uid_tract(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUIDRectArchive old_body_uid_tract = 31;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::old_body_uid_tract(this),
        _Internal::old_body_uid_tract(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID old_target_pivot_refresh_uid = 32;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::old_target_pivot_refresh_uid(this),
        _Internal::old_target_pivot_refresh_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID new_target_pivot_row_column_rule_change_uid = 33;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::new_target_pivot_row_column_rule_change_uid(this),
        _Internal::new_target_pivot_row_column_rule_change_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID old_target_pivot_row_column_rule_change_uid = 34;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::old_target_pivot_row_column_rule_change_uid(this),
        _Internal::old_target_pivot_row_column_rule_change_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID new_target_pivot_aggregate_rule_change_uid = 35;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::new_target_pivot_aggregate_rule_change_uid(this),
        _Internal::new_target_pivot_aggregate_rule_change_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID old_target_pivot_aggregate_rule_change_uid = 36;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::old_target_pivot_aggregate_rule_change_uid(this),
        _Internal::old_target_pivot_aggregate_rule_change_uid(this).GetCachedSize(), target, stream);
  }

  // optional bool is_order_finalized = 37;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(37, this->_internal_is_order_finalized(), target);
  }

  // optional .TSP.Reference new_filter_set = 39;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::new_filter_set(this),
        _Internal::new_filter_set(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.Reference old_filter_set = 40;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::old_filter_set(this),
        _Internal::old_filter_set(this).GetCachedSize(), target, stream);
  }

  // optional bool use_small_table_limits = 41;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(41, this->_internal_use_small_table_limits(), target);
  }

  // optional int32 setting_filters_enabled = 42;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(42, this->_internal_setting_filters_enabled(), target);
  }

  // optional int32 undo_setting_filters_enabled = 43;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(43, this->_internal_undo_setting_filters_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandPivotSetPivotRulesArchive)
  return target;
}

size_t CommandPivotSetPivotRulesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandPivotSetPivotRulesArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID new_view_row_order = 19;
  total_size += 2UL * this->_internal_new_view_row_order_size();
  for (const auto& msg : this->_impl_.new_view_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID old_view_row_order = 20;
  total_size += 2UL * this->_internal_old_view_row_order_size();
  for (const auto& msg : this->_impl_.old_view_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID new_view_column_order = 21;
  total_size += 2UL * this->_internal_new_view_column_order_size();
  for (const auto& msg : this->_impl_.new_view_column_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID old_view_column_order = 22;
  total_size += 2UL * this->_internal_old_view_column_order_size();
  for (const auto& msg : this->_impl_.old_view_column_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID new_collapsed_row_groups = 23;
  total_size += 2UL * this->_internal_new_collapsed_row_groups_size();
  for (const auto& msg : this->_impl_.new_collapsed_row_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID old_collapsed_row_groups = 24;
  total_size += 2UL * this->_internal_old_collapsed_row_groups_size();
  for (const auto& msg : this->_impl_.old_collapsed_row_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID new_collapsed_column_groups = 25;
  total_size += 2UL * this->_internal_new_collapsed_column_groups_size();
  for (const auto& msg : this->_impl_.new_collapsed_column_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID old_collapsed_column_groups = 26;
  total_size += 2UL * this->_internal_old_collapsed_column_groups_size();
  for (const auto& msg : this->_impl_.old_collapsed_column_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000feu) {
    // optional .TSP.UUID new_target_pivot_refresh_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_target_pivot_refresh_uid_);
    }

    // optional .TST.GroupColumnListArchive new_row_groupings = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_row_groupings_);
    }

    // optional .TST.GroupColumnListArchive old_row_groupings = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_row_groupings_);
    }

    // optional .TST.GroupColumnListArchive new_column_groupings = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_column_groupings_);
    }

    // optional .TST.GroupColumnListArchive old_column_groupings = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_column_groupings_);
    }

    // optional .TST.ColumnAggregateListArchive new_aggregates = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_aggregates_);
    }

    // optional .TST.ColumnAggregateListArchive old_aggregates = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_aggregates_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TSP.Reference new_pivot_data_model = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_pivot_data_model_);
    }

    // optional .TSP.Reference old_pivot_data_model = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_pivot_data_model_);
    }

    // optional .TSP.UUID new_pivot_refresh_uid = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_pivot_refresh_uid_);
    }

    // optional .TSP.UUID old_pivot_refresh_uid = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_pivot_refresh_uid_);
    }

    // optional .TSP.Reference new_options_map = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_options_map_);
    }

    // optional .TSP.Reference old_options_map = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_options_map_);
    }

    // optional .TST.HierarchicalCellDiffMapArchive new_hierarchical_cell_diff_map = 27;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_hierarchical_cell_diff_map_);
    }

    // optional .TST.HierarchicalCellDiffMapArchive old_hierarchical_cell_diff_map = 28;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_hierarchical_cell_diff_map_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TSP.Reference formula_rewrite_command_for_undo = 29;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.formula_rewrite_command_for_undo_);
    }

    // optional .TSP.UUIDRectArchive new_body_uid_tract = 30;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_body_uid_tract_);
    }

    // optional .TSP.UUIDRectArchive old_body_uid_tract = 31;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_body_uid_tract_);
    }

    // optional .TSP.UUID old_target_pivot_refresh_uid = 32;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_target_pivot_refresh_uid_);
    }

    // optional .TSP.UUID new_target_pivot_row_column_rule_change_uid = 33;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_target_pivot_row_column_rule_change_uid_);
    }

    // optional .TSP.UUID old_target_pivot_row_column_rule_change_uid = 34;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_target_pivot_row_column_rule_change_uid_);
    }

    // optional .TSP.UUID new_target_pivot_aggregate_rule_change_uid = 35;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_target_pivot_aggregate_rule_change_uid_);
    }

    // optional .TSP.UUID old_target_pivot_aggregate_rule_change_uid = 36;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_target_pivot_aggregate_rule_change_uid_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TSP.Reference new_filter_set = 39;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.new_filter_set_);
    }

    // optional .TSP.Reference old_filter_set = 40;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.old_filter_set_);
    }

    // optional double new_pivot_refresh_timestamp = 15;
    if (cached_has_bits & 0x04000000u) {
      total_size += 1 + 8;
    }

    // optional double old_pivot_refresh_timestamp = 16;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 8;
    }

    // optional bool is_order_finalized = 37;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 + 1;
    }

    // optional bool use_small_table_limits = 41;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 + 1;
    }

    // optional int32 setting_filters_enabled = 42;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_setting_filters_enabled());
    }

    // optional int32 undo_setting_filters_enabled = 43;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int32Size(
          this->_internal_undo_setting_filters_enabled());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    // optional .TST.TableDimensionArchive new_flattening_dimension = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_new_flattening_dimension());
    }

    // optional .TST.TableDimensionArchive old_flattening_dimension = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_old_flattening_dimension());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPivotSetPivotRulesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandPivotSetPivotRulesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPivotSetPivotRulesArchive::GetClassData() const { return &_class_data_; }


void CommandPivotSetPivotRulesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandPivotSetPivotRulesArchive*>(&to_msg);
  auto& from = static_cast<const CommandPivotSetPivotRulesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandPivotSetPivotRulesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.new_view_row_order_.MergeFrom(from._impl_.new_view_row_order_);
  _this->_impl_.old_view_row_order_.MergeFrom(from._impl_.old_view_row_order_);
  _this->_impl_.new_view_column_order_.MergeFrom(from._impl_.new_view_column_order_);
  _this->_impl_.old_view_column_order_.MergeFrom(from._impl_.old_view_column_order_);
  _this->_impl_.new_collapsed_row_groups_.MergeFrom(from._impl_.new_collapsed_row_groups_);
  _this->_impl_.old_collapsed_row_groups_.MergeFrom(from._impl_.old_collapsed_row_groups_);
  _this->_impl_.new_collapsed_column_groups_.MergeFrom(from._impl_.new_collapsed_column_groups_);
  _this->_impl_.old_collapsed_column_groups_.MergeFrom(from._impl_.old_collapsed_column_groups_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_new_target_pivot_refresh_uid()->::TSP::UUID::MergeFrom(
          from._internal_new_target_pivot_refresh_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_new_row_groupings()->::TST::GroupColumnListArchive::MergeFrom(
          from._internal_new_row_groupings());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_old_row_groupings()->::TST::GroupColumnListArchive::MergeFrom(
          from._internal_old_row_groupings());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_new_column_groupings()->::TST::GroupColumnListArchive::MergeFrom(
          from._internal_new_column_groupings());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_old_column_groupings()->::TST::GroupColumnListArchive::MergeFrom(
          from._internal_old_column_groupings());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_new_aggregates()->::TST::ColumnAggregateListArchive::MergeFrom(
          from._internal_new_aggregates());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_old_aggregates()->::TST::ColumnAggregateListArchive::MergeFrom(
          from._internal_old_aggregates());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_new_pivot_data_model()->::TSP::Reference::MergeFrom(
          from._internal_new_pivot_data_model());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_old_pivot_data_model()->::TSP::Reference::MergeFrom(
          from._internal_old_pivot_data_model());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_new_pivot_refresh_uid()->::TSP::UUID::MergeFrom(
          from._internal_new_pivot_refresh_uid());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_old_pivot_refresh_uid()->::TSP::UUID::MergeFrom(
          from._internal_old_pivot_refresh_uid());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_new_options_map()->::TSP::Reference::MergeFrom(
          from._internal_new_options_map());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_old_options_map()->::TSP::Reference::MergeFrom(
          from._internal_old_options_map());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_new_hierarchical_cell_diff_map()->::TST::HierarchicalCellDiffMapArchive::MergeFrom(
          from._internal_new_hierarchical_cell_diff_map());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_old_hierarchical_cell_diff_map()->::TST::HierarchicalCellDiffMapArchive::MergeFrom(
          from._internal_old_hierarchical_cell_diff_map());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_formula_rewrite_command_for_undo()->::TSP::Reference::MergeFrom(
          from._internal_formula_rewrite_command_for_undo());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_new_body_uid_tract()->::TSP::UUIDRectArchive::MergeFrom(
          from._internal_new_body_uid_tract());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_old_body_uid_tract()->::TSP::UUIDRectArchive::MergeFrom(
          from._internal_old_body_uid_tract());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_old_target_pivot_refresh_uid()->::TSP::UUID::MergeFrom(
          from._internal_old_target_pivot_refresh_uid());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_new_target_pivot_row_column_rule_change_uid()->::TSP::UUID::MergeFrom(
          from._internal_new_target_pivot_row_column_rule_change_uid());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_old_target_pivot_row_column_rule_change_uid()->::TSP::UUID::MergeFrom(
          from._internal_old_target_pivot_row_column_rule_change_uid());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_new_target_pivot_aggregate_rule_change_uid()->::TSP::UUID::MergeFrom(
          from._internal_new_target_pivot_aggregate_rule_change_uid());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_old_target_pivot_aggregate_rule_change_uid()->::TSP::UUID::MergeFrom(
          from._internal_old_target_pivot_aggregate_rule_change_uid());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_new_filter_set()->::TSP::Reference::MergeFrom(
          from._internal_new_filter_set());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_old_filter_set()->::TSP::Reference::MergeFrom(
          from._internal_old_filter_set());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.new_pivot_refresh_timestamp_ = from._impl_.new_pivot_refresh_timestamp_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.old_pivot_refresh_timestamp_ = from._impl_.old_pivot_refresh_timestamp_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.is_order_finalized_ = from._impl_.is_order_finalized_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.use_small_table_limits_ = from._impl_.use_small_table_limits_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.setting_filters_enabled_ = from._impl_.setting_filters_enabled_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.undo_setting_filters_enabled_ = from._impl_.undo_setting_filters_enabled_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.new_flattening_dimension_ = from._impl_.new_flattening_dimension_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.old_flattening_dimension_ = from._impl_.old_flattening_dimension_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPivotSetPivotRulesArchive::CopyFrom(const CommandPivotSetPivotRulesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandPivotSetPivotRulesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPivotSetPivotRulesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.new_view_row_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_view_row_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.new_view_column_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_view_column_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.new_collapsed_row_groups_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_collapsed_row_groups_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.new_collapsed_column_groups_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.old_collapsed_column_groups_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_new_target_pivot_refresh_uid()) {
    if (!_impl_.new_target_pivot_refresh_uid_->IsInitialized()) return false;
  }
  if (_internal_has_new_row_groupings()) {
    if (!_impl_.new_row_groupings_->IsInitialized()) return false;
  }
  if (_internal_has_old_row_groupings()) {
    if (!_impl_.old_row_groupings_->IsInitialized()) return false;
  }
  if (_internal_has_new_column_groupings()) {
    if (!_impl_.new_column_groupings_->IsInitialized()) return false;
  }
  if (_internal_has_old_column_groupings()) {
    if (!_impl_.old_column_groupings_->IsInitialized()) return false;
  }
  if (_internal_has_new_aggregates()) {
    if (!_impl_.new_aggregates_->IsInitialized()) return false;
  }
  if (_internal_has_old_aggregates()) {
    if (!_impl_.old_aggregates_->IsInitialized()) return false;
  }
  if (_internal_has_new_pivot_data_model()) {
    if (!_impl_.new_pivot_data_model_->IsInitialized()) return false;
  }
  if (_internal_has_old_pivot_data_model()) {
    if (!_impl_.old_pivot_data_model_->IsInitialized()) return false;
  }
  if (_internal_has_new_pivot_refresh_uid()) {
    if (!_impl_.new_pivot_refresh_uid_->IsInitialized()) return false;
  }
  if (_internal_has_old_pivot_refresh_uid()) {
    if (!_impl_.old_pivot_refresh_uid_->IsInitialized()) return false;
  }
  if (_internal_has_new_options_map()) {
    if (!_impl_.new_options_map_->IsInitialized()) return false;
  }
  if (_internal_has_old_options_map()) {
    if (!_impl_.old_options_map_->IsInitialized()) return false;
  }
  if (_internal_has_new_hierarchical_cell_diff_map()) {
    if (!_impl_.new_hierarchical_cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_old_hierarchical_cell_diff_map()) {
    if (!_impl_.old_hierarchical_cell_diff_map_->IsInitialized()) return false;
  }
  if (_internal_has_formula_rewrite_command_for_undo()) {
    if (!_impl_.formula_rewrite_command_for_undo_->IsInitialized()) return false;
  }
  if (_internal_has_new_body_uid_tract()) {
    if (!_impl_.new_body_uid_tract_->IsInitialized()) return false;
  }
  if (_internal_has_old_body_uid_tract()) {
    if (!_impl_.old_body_uid_tract_->IsInitialized()) return false;
  }
  if (_internal_has_old_target_pivot_refresh_uid()) {
    if (!_impl_.old_target_pivot_refresh_uid_->IsInitialized()) return false;
  }
  if (_internal_has_new_target_pivot_row_column_rule_change_uid()) {
    if (!_impl_.new_target_pivot_row_column_rule_change_uid_->IsInitialized()) return false;
  }
  if (_internal_has_old_target_pivot_row_column_rule_change_uid()) {
    if (!_impl_.old_target_pivot_row_column_rule_change_uid_->IsInitialized()) return false;
  }
  if (_internal_has_new_target_pivot_aggregate_rule_change_uid()) {
    if (!_impl_.new_target_pivot_aggregate_rule_change_uid_->IsInitialized()) return false;
  }
  if (_internal_has_old_target_pivot_aggregate_rule_change_uid()) {
    if (!_impl_.old_target_pivot_aggregate_rule_change_uid_->IsInitialized()) return false;
  }
  if (_internal_has_new_filter_set()) {
    if (!_impl_.new_filter_set_->IsInitialized()) return false;
  }
  if (_internal_has_old_filter_set()) {
    if (!_impl_.old_filter_set_->IsInitialized()) return false;
  }
  return true;
}

void CommandPivotSetPivotRulesArchive::InternalSwap(CommandPivotSetPivotRulesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  _impl_.new_view_row_order_.InternalSwap(&other->_impl_.new_view_row_order_);
  _impl_.old_view_row_order_.InternalSwap(&other->_impl_.old_view_row_order_);
  _impl_.new_view_column_order_.InternalSwap(&other->_impl_.new_view_column_order_);
  _impl_.old_view_column_order_.InternalSwap(&other->_impl_.old_view_column_order_);
  _impl_.new_collapsed_row_groups_.InternalSwap(&other->_impl_.new_collapsed_row_groups_);
  _impl_.old_collapsed_row_groups_.InternalSwap(&other->_impl_.old_collapsed_row_groups_);
  _impl_.new_collapsed_column_groups_.InternalSwap(&other->_impl_.new_collapsed_column_groups_);
  _impl_.old_collapsed_column_groups_.InternalSwap(&other->_impl_.old_collapsed_column_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPivotSetPivotRulesArchive, _impl_.undo_setting_filters_enabled_)
      + sizeof(CommandPivotSetPivotRulesArchive::_impl_.undo_setting_filters_enabled_)
      - PROTOBUF_FIELD_OFFSET(CommandPivotSetPivotRulesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.new_flattening_dimension_, other->_impl_.new_flattening_dimension_);
  swap(_impl_.old_flattening_dimension_, other->_impl_.old_flattening_dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPivotSetPivotRulesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[103]);
}

// ===================================================================

class CommandPivotSetGroupingColumnOptionsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPivotSetGroupingColumnOptionsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandPivotSetGroupingColumnOptionsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TSP::UUID& grouping_column_uid(const CommandPivotSetGroupingColumnOptionsArchive* msg);
  static void set_has_grouping_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_non_sorting_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_undo_bool_value(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandPivotSetGroupingColumnOptionsArchive::_Internal::super(const CommandPivotSetGroupingColumnOptionsArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandPivotSetGroupingColumnOptionsArchive::_Internal::grouping_column_uid(const CommandPivotSetGroupingColumnOptionsArchive* msg) {
  return *msg->_impl_.grouping_column_uid_;
}
void CommandPivotSetGroupingColumnOptionsArchive::clear_grouping_column_uid() {
  if (_impl_.grouping_column_uid_ != nullptr) _impl_.grouping_column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CommandPivotSetGroupingColumnOptionsArchive::CommandPivotSetGroupingColumnOptionsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandPivotSetGroupingColumnOptionsArchive)
}
CommandPivotSetGroupingColumnOptionsArchive::CommandPivotSetGroupingColumnOptionsArchive(const CommandPivotSetGroupingColumnOptionsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandPivotSetGroupingColumnOptionsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.grouping_column_uid_){nullptr}
    , decltype(_impl_.non_sorting_flag_){}
    , decltype(_impl_.bool_value_){}
    , decltype(_impl_.undo_bool_value_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_grouping_column_uid()) {
    _this->_impl_.grouping_column_uid_ = new ::TSP::UUID(*from._impl_.grouping_column_uid_);
  }
  ::memcpy(&_impl_.non_sorting_flag_, &from._impl_.non_sorting_flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.undo_bool_value_) -
    reinterpret_cast<char*>(&_impl_.non_sorting_flag_)) + sizeof(_impl_.undo_bool_value_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandPivotSetGroupingColumnOptionsArchive)
}

inline void CommandPivotSetGroupingColumnOptionsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.grouping_column_uid_){nullptr}
    , decltype(_impl_.non_sorting_flag_){0u}
    , decltype(_impl_.bool_value_){false}
    , decltype(_impl_.undo_bool_value_){false}
  };
}

CommandPivotSetGroupingColumnOptionsArchive::~CommandPivotSetGroupingColumnOptionsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandPivotSetGroupingColumnOptionsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandPivotSetGroupingColumnOptionsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.grouping_column_uid_;
}

void CommandPivotSetGroupingColumnOptionsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandPivotSetGroupingColumnOptionsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandPivotSetGroupingColumnOptionsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.grouping_column_uid_ != nullptr);
      _impl_.grouping_column_uid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.non_sorting_flag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.undo_bool_value_) -
        reinterpret_cast<char*>(&_impl_.non_sorting_flag_)) + sizeof(_impl_.undo_bool_value_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPivotSetGroupingColumnOptionsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID grouping_column_uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 non_sorting_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_non_sorting_flag(&has_bits);
          _impl_.non_sorting_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool bool_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_bool_value(&has_bits);
          _impl_.bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool undo_bool_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_undo_bool_value(&has_bits);
          _impl_.undo_bool_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandPivotSetGroupingColumnOptionsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandPivotSetGroupingColumnOptionsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID grouping_column_uid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::grouping_column_uid(this),
        _Internal::grouping_column_uid(this).GetCachedSize(), target, stream);
  }

  // optional uint32 non_sorting_flag = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_non_sorting_flag(), target);
  }

  // optional bool bool_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_bool_value(), target);
  }

  // optional bool undo_bool_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_undo_bool_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandPivotSetGroupingColumnOptionsArchive)
  return target;
}

size_t CommandPivotSetGroupingColumnOptionsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandPivotSetGroupingColumnOptionsArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .TSP.UUID grouping_column_uid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grouping_column_uid_);
    }

    // optional uint32 non_sorting_flag = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_non_sorting_flag());
    }

    // optional bool bool_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool undo_bool_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPivotSetGroupingColumnOptionsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandPivotSetGroupingColumnOptionsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPivotSetGroupingColumnOptionsArchive::GetClassData() const { return &_class_data_; }


void CommandPivotSetGroupingColumnOptionsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandPivotSetGroupingColumnOptionsArchive*>(&to_msg);
  auto& from = static_cast<const CommandPivotSetGroupingColumnOptionsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandPivotSetGroupingColumnOptionsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_grouping_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_grouping_column_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.non_sorting_flag_ = from._impl_.non_sorting_flag_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bool_value_ = from._impl_.bool_value_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.undo_bool_value_ = from._impl_.undo_bool_value_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPivotSetGroupingColumnOptionsArchive::CopyFrom(const CommandPivotSetGroupingColumnOptionsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandPivotSetGroupingColumnOptionsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPivotSetGroupingColumnOptionsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_column_uid()) {
    if (!_impl_.grouping_column_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandPivotSetGroupingColumnOptionsArchive::InternalSwap(CommandPivotSetGroupingColumnOptionsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPivotSetGroupingColumnOptionsArchive, _impl_.undo_bool_value_)
      + sizeof(CommandPivotSetGroupingColumnOptionsArchive::_impl_.undo_bool_value_)
      - PROTOBUF_FIELD_OFFSET(CommandPivotSetGroupingColumnOptionsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPivotSetGroupingColumnOptionsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[104]);
}

// ===================================================================

class CommandPivotHideShowGrandTotalsArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPivotHideShowGrandTotalsArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandPivotHideShowGrandTotalsArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_is_hiding(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_undo_is_hiding(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandPivotHideShowGrandTotalsArchive::_Internal::super(const CommandPivotHideShowGrandTotalsArchive* msg) {
  return *msg->_impl_.super_;
}
CommandPivotHideShowGrandTotalsArchive::CommandPivotHideShowGrandTotalsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandPivotHideShowGrandTotalsArchive)
}
CommandPivotHideShowGrandTotalsArchive::CommandPivotHideShowGrandTotalsArchive(const CommandPivotHideShowGrandTotalsArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandPivotHideShowGrandTotalsArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.is_hiding_){}
    , decltype(_impl_.undo_is_hiding_){}
    , decltype(_impl_.dimension_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  ::memcpy(&_impl_.is_hiding_, &from._impl_.is_hiding_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dimension_) -
    reinterpret_cast<char*>(&_impl_.is_hiding_)) + sizeof(_impl_.dimension_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandPivotHideShowGrandTotalsArchive)
}

inline void CommandPivotHideShowGrandTotalsArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.is_hiding_){false}
    , decltype(_impl_.undo_is_hiding_){false}
    , decltype(_impl_.dimension_){-1}
  };
}

CommandPivotHideShowGrandTotalsArchive::~CommandPivotHideShowGrandTotalsArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandPivotHideShowGrandTotalsArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandPivotHideShowGrandTotalsArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
}

void CommandPivotHideShowGrandTotalsArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandPivotHideShowGrandTotalsArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandPivotHideShowGrandTotalsArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.super_ != nullptr);
    _impl_.super_->Clear();
  }
  ::memset(&_impl_.is_hiding_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.undo_is_hiding_) -
      reinterpret_cast<char*>(&_impl_.is_hiding_)) + sizeof(_impl_.undo_is_hiding_));
  _impl_.dimension_ = -1;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPivotHideShowGrandTotalsArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableDimensionArchive dimension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_dimension(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool is_hiding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_is_hiding(&has_bits);
          _impl_.is_hiding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool undo_is_hiding = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_undo_is_hiding(&has_bits);
          _impl_.undo_is_hiding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandPivotHideShowGrandTotalsArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandPivotHideShowGrandTotalsArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableDimensionArchive dimension = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dimension(), target);
  }

  // optional bool is_hiding = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_hiding(), target);
  }

  // optional bool undo_is_hiding = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_undo_is_hiding(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandPivotHideShowGrandTotalsArchive)
  return target;
}

size_t CommandPivotHideShowGrandTotalsArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandPivotHideShowGrandTotalsArchive)
  size_t total_size = 0;

  // required .TST.TableCommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional bool is_hiding = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool undo_is_hiding = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional .TST.TableDimensionArchive dimension = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_dimension());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPivotHideShowGrandTotalsArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandPivotHideShowGrandTotalsArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPivotHideShowGrandTotalsArchive::GetClassData() const { return &_class_data_; }


void CommandPivotHideShowGrandTotalsArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandPivotHideShowGrandTotalsArchive*>(&to_msg);
  auto& from = static_cast<const CommandPivotHideShowGrandTotalsArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandPivotHideShowGrandTotalsArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.is_hiding_ = from._impl_.is_hiding_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.undo_is_hiding_ = from._impl_.undo_is_hiding_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.dimension_ = from._impl_.dimension_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPivotHideShowGrandTotalsArchive::CopyFrom(const CommandPivotHideShowGrandTotalsArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandPivotHideShowGrandTotalsArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPivotHideShowGrandTotalsArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  return true;
}

void CommandPivotHideShowGrandTotalsArchive::InternalSwap(CommandPivotHideShowGrandTotalsArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPivotHideShowGrandTotalsArchive, _impl_.undo_is_hiding_)
      + sizeof(CommandPivotHideShowGrandTotalsArchive::_impl_.undo_is_hiding_)
      - PROTOBUF_FIELD_OFFSET(CommandPivotHideShowGrandTotalsArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.dimension_, other->_impl_.dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPivotHideShowGrandTotalsArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[105]);
}

// ===================================================================

class CommandPivotSortArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandPivotSortArchive>()._impl_._has_bits_);
  static const ::TST::TableCommandArchive& super(const CommandPivotSortArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dimension(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::TSP::UUID& target_pivot_row_column_rule_change_uid(const CommandPivotSortArchive* msg);
  static void set_has_target_pivot_row_column_rule_change_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSP::UUID& target_pivot_aggregate_rule_change_uid(const CommandPivotSortArchive* msg);
  static void set_has_target_pivot_aggregate_rule_change_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TSP::UUID& target_pivot_data_refresh_uid(const CommandPivotSortArchive* msg);
  static void set_has_target_pivot_data_refresh_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TSP::UUID& grouping_column_uid(const CommandPivotSortArchive* msg);
  static void set_has_grouping_column_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sorting_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_undo_sorting_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::TSP::UUID& sorting_aggregate_rule_uid(const CommandPivotSortArchive* msg);
  static void set_has_sorting_aggregate_rule_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TSP::UUID& undo_sorting_aggregate_rule_uid(const CommandPivotSortArchive* msg);
  static void set_has_undo_sorting_aggregate_rule_uid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_is_order_finalized(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000020f) ^ 0x0000020f) != 0;
  }
};

const ::TST::TableCommandArchive&
CommandPivotSortArchive::_Internal::super(const CommandPivotSortArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TSP::UUID&
CommandPivotSortArchive::_Internal::target_pivot_row_column_rule_change_uid(const CommandPivotSortArchive* msg) {
  return *msg->_impl_.target_pivot_row_column_rule_change_uid_;
}
const ::TSP::UUID&
CommandPivotSortArchive::_Internal::target_pivot_aggregate_rule_change_uid(const CommandPivotSortArchive* msg) {
  return *msg->_impl_.target_pivot_aggregate_rule_change_uid_;
}
const ::TSP::UUID&
CommandPivotSortArchive::_Internal::target_pivot_data_refresh_uid(const CommandPivotSortArchive* msg) {
  return *msg->_impl_.target_pivot_data_refresh_uid_;
}
const ::TSP::UUID&
CommandPivotSortArchive::_Internal::grouping_column_uid(const CommandPivotSortArchive* msg) {
  return *msg->_impl_.grouping_column_uid_;
}
const ::TSP::UUID&
CommandPivotSortArchive::_Internal::sorting_aggregate_rule_uid(const CommandPivotSortArchive* msg) {
  return *msg->_impl_.sorting_aggregate_rule_uid_;
}
const ::TSP::UUID&
CommandPivotSortArchive::_Internal::undo_sorting_aggregate_rule_uid(const CommandPivotSortArchive* msg) {
  return *msg->_impl_.undo_sorting_aggregate_rule_uid_;
}
void CommandPivotSortArchive::clear_column_order() {
  _impl_.column_order_.Clear();
}
void CommandPivotSortArchive::clear_undo_column_order() {
  _impl_.undo_column_order_.Clear();
}
void CommandPivotSortArchive::clear_row_order() {
  _impl_.row_order_.Clear();
}
void CommandPivotSortArchive::clear_undo_row_order() {
  _impl_.undo_row_order_.Clear();
}
void CommandPivotSortArchive::clear_target_pivot_row_column_rule_change_uid() {
  if (_impl_.target_pivot_row_column_rule_change_uid_ != nullptr) _impl_.target_pivot_row_column_rule_change_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CommandPivotSortArchive::clear_target_pivot_aggregate_rule_change_uid() {
  if (_impl_.target_pivot_aggregate_rule_change_uid_ != nullptr) _impl_.target_pivot_aggregate_rule_change_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CommandPivotSortArchive::clear_target_pivot_data_refresh_uid() {
  if (_impl_.target_pivot_data_refresh_uid_ != nullptr) _impl_.target_pivot_data_refresh_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CommandPivotSortArchive::clear_grouping_column_uid() {
  if (_impl_.grouping_column_uid_ != nullptr) _impl_.grouping_column_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CommandPivotSortArchive::clear_sorting_aggregate_rule_uid() {
  if (_impl_.sorting_aggregate_rule_uid_ != nullptr) _impl_.sorting_aggregate_rule_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CommandPivotSortArchive::clear_undo_sorting_aggregate_rule_uid() {
  if (_impl_.undo_sorting_aggregate_rule_uid_ != nullptr) _impl_.undo_sorting_aggregate_rule_uid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
CommandPivotSortArchive::CommandPivotSortArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandPivotSortArchive)
}
CommandPivotSortArchive::CommandPivotSortArchive(const CommandPivotSortArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandPivotSortArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_order_){from._impl_.column_order_}
    , decltype(_impl_.undo_column_order_){from._impl_.undo_column_order_}
    , decltype(_impl_.row_order_){from._impl_.row_order_}
    , decltype(_impl_.undo_row_order_){from._impl_.undo_row_order_}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.target_pivot_row_column_rule_change_uid_){nullptr}
    , decltype(_impl_.target_pivot_aggregate_rule_change_uid_){nullptr}
    , decltype(_impl_.target_pivot_data_refresh_uid_){nullptr}
    , decltype(_impl_.grouping_column_uid_){nullptr}
    , decltype(_impl_.sorting_aggregate_rule_uid_){nullptr}
    , decltype(_impl_.undo_sorting_aggregate_rule_uid_){nullptr}
    , decltype(_impl_.sorting_flags_){}
    , decltype(_impl_.undo_sorting_flags_){}
    , decltype(_impl_.is_order_finalized_){}
    , decltype(_impl_.dimension_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TST::TableCommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_target_pivot_row_column_rule_change_uid()) {
    _this->_impl_.target_pivot_row_column_rule_change_uid_ = new ::TSP::UUID(*from._impl_.target_pivot_row_column_rule_change_uid_);
  }
  if (from._internal_has_target_pivot_aggregate_rule_change_uid()) {
    _this->_impl_.target_pivot_aggregate_rule_change_uid_ = new ::TSP::UUID(*from._impl_.target_pivot_aggregate_rule_change_uid_);
  }
  if (from._internal_has_target_pivot_data_refresh_uid()) {
    _this->_impl_.target_pivot_data_refresh_uid_ = new ::TSP::UUID(*from._impl_.target_pivot_data_refresh_uid_);
  }
  if (from._internal_has_grouping_column_uid()) {
    _this->_impl_.grouping_column_uid_ = new ::TSP::UUID(*from._impl_.grouping_column_uid_);
  }
  if (from._internal_has_sorting_aggregate_rule_uid()) {
    _this->_impl_.sorting_aggregate_rule_uid_ = new ::TSP::UUID(*from._impl_.sorting_aggregate_rule_uid_);
  }
  if (from._internal_has_undo_sorting_aggregate_rule_uid()) {
    _this->_impl_.undo_sorting_aggregate_rule_uid_ = new ::TSP::UUID(*from._impl_.undo_sorting_aggregate_rule_uid_);
  }
  ::memcpy(&_impl_.sorting_flags_, &from._impl_.sorting_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dimension_) -
    reinterpret_cast<char*>(&_impl_.sorting_flags_)) + sizeof(_impl_.dimension_));
  // @@protoc_insertion_point(copy_constructor:TST.CommandPivotSortArchive)
}

inline void CommandPivotSortArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.column_order_){arena}
    , decltype(_impl_.undo_column_order_){arena}
    , decltype(_impl_.row_order_){arena}
    , decltype(_impl_.undo_row_order_){arena}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.target_pivot_row_column_rule_change_uid_){nullptr}
    , decltype(_impl_.target_pivot_aggregate_rule_change_uid_){nullptr}
    , decltype(_impl_.target_pivot_data_refresh_uid_){nullptr}
    , decltype(_impl_.grouping_column_uid_){nullptr}
    , decltype(_impl_.sorting_aggregate_rule_uid_){nullptr}
    , decltype(_impl_.undo_sorting_aggregate_rule_uid_){nullptr}
    , decltype(_impl_.sorting_flags_){0u}
    , decltype(_impl_.undo_sorting_flags_){0u}
    , decltype(_impl_.is_order_finalized_){false}
    , decltype(_impl_.dimension_){-1}
  };
}

CommandPivotSortArchive::~CommandPivotSortArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandPivotSortArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandPivotSortArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.column_order_.~RepeatedPtrField();
  _impl_.undo_column_order_.~RepeatedPtrField();
  _impl_.row_order_.~RepeatedPtrField();
  _impl_.undo_row_order_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.target_pivot_row_column_rule_change_uid_;
  if (this != internal_default_instance()) delete _impl_.target_pivot_aggregate_rule_change_uid_;
  if (this != internal_default_instance()) delete _impl_.target_pivot_data_refresh_uid_;
  if (this != internal_default_instance()) delete _impl_.grouping_column_uid_;
  if (this != internal_default_instance()) delete _impl_.sorting_aggregate_rule_uid_;
  if (this != internal_default_instance()) delete _impl_.undo_sorting_aggregate_rule_uid_;
}

void CommandPivotSortArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandPivotSortArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandPivotSortArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.column_order_.Clear();
  _impl_.undo_column_order_.Clear();
  _impl_.row_order_.Clear();
  _impl_.undo_row_order_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.target_pivot_row_column_rule_change_uid_ != nullptr);
      _impl_.target_pivot_row_column_rule_change_uid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.target_pivot_aggregate_rule_change_uid_ != nullptr);
      _impl_.target_pivot_aggregate_rule_change_uid_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.target_pivot_data_refresh_uid_ != nullptr);
      _impl_.target_pivot_data_refresh_uid_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.grouping_column_uid_ != nullptr);
      _impl_.grouping_column_uid_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(_impl_.sorting_aggregate_rule_uid_ != nullptr);
      _impl_.sorting_aggregate_rule_uid_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.undo_sorting_aggregate_rule_uid_ != nullptr);
      _impl_.undo_sorting_aggregate_rule_uid_->Clear();
    }
  }
  _impl_.sorting_flags_ = 0u;
  if (cached_has_bits & 0x00000700u) {
    ::memset(&_impl_.undo_sorting_flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.is_order_finalized_) -
        reinterpret_cast<char*>(&_impl_.undo_sorting_flags_)) + sizeof(_impl_.is_order_finalized_));
    _impl_.dimension_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandPivotSortArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TST.TableCommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.TableDimensionArchive dimension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TST::TableDimensionArchive_IsValid(val))) {
            _internal_set_dimension(static_cast<::TST::TableDimensionArchive>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID column_order = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_column_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_column_order = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_column_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID row_order = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .TSP.UUID undo_row_order = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_undo_row_order(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID target_pivot_row_column_rule_change_uid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_pivot_row_column_rule_change_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID target_pivot_aggregate_rule_change_uid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_pivot_aggregate_rule_change_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TSP.UUID target_pivot_data_refresh_uid = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_pivot_data_refresh_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID grouping_column_uid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_grouping_column_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 sorting_flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_sorting_flags(&has_bits);
          _impl_.sorting_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 undo_sorting_flags = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_undo_sorting_flags(&has_bits);
          _impl_.undo_sorting_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID sorting_aggregate_rule_uid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sorting_aggregate_rule_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSP.UUID undo_sorting_aggregate_rule_uid = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_undo_sorting_aggregate_rule_uid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bool is_order_finalized = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_order_finalized(&has_bits);
          _impl_.is_order_finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandPivotSortArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandPivotSortArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TST.TableCommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.TableDimensionArchive dimension = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dimension(), target);
  }

  // repeated .TSP.UUID column_order = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_column_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_column_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID undo_column_order = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_undo_column_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_undo_column_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID row_order = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_row_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_row_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .TSP.UUID undo_row_order = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_undo_row_order_size()); i < n; i++) {
    const auto& repfield = this->_internal_undo_row_order(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // required .TSP.UUID target_pivot_row_column_rule_change_uid = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::target_pivot_row_column_rule_change_uid(this),
        _Internal::target_pivot_row_column_rule_change_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID target_pivot_aggregate_rule_change_uid = 8;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::target_pivot_aggregate_rule_change_uid(this),
        _Internal::target_pivot_aggregate_rule_change_uid(this).GetCachedSize(), target, stream);
  }

  // required .TSP.UUID target_pivot_data_refresh_uid = 9;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::target_pivot_data_refresh_uid(this),
        _Internal::target_pivot_data_refresh_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID grouping_column_uid = 10;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::grouping_column_uid(this),
        _Internal::grouping_column_uid(this).GetCachedSize(), target, stream);
  }

  // optional uint32 sorting_flags = 11;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(11, this->_internal_sorting_flags(), target);
  }

  // optional uint32 undo_sorting_flags = 12;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_undo_sorting_flags(), target);
  }

  // optional .TSP.UUID sorting_aggregate_rule_uid = 13;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::sorting_aggregate_rule_uid(this),
        _Internal::sorting_aggregate_rule_uid(this).GetCachedSize(), target, stream);
  }

  // optional .TSP.UUID undo_sorting_aggregate_rule_uid = 14;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::undo_sorting_aggregate_rule_uid(this),
        _Internal::undo_sorting_aggregate_rule_uid(this).GetCachedSize(), target, stream);
  }

  // required bool is_order_finalized = 15;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_is_order_finalized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandPivotSortArchive)
  return target;
}

size_t CommandPivotSortArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandPivotSortArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_target_pivot_row_column_rule_change_uid()) {
    // required .TSP.UUID target_pivot_row_column_rule_change_uid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_pivot_row_column_rule_change_uid_);
  }

  if (_internal_has_target_pivot_aggregate_rule_change_uid()) {
    // required .TSP.UUID target_pivot_aggregate_rule_change_uid = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_pivot_aggregate_rule_change_uid_);
  }

  if (_internal_has_target_pivot_data_refresh_uid()) {
    // required .TSP.UUID target_pivot_data_refresh_uid = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_pivot_data_refresh_uid_);
  }

  if (_internal_has_is_order_finalized()) {
    // required bool is_order_finalized = 15;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CommandPivotSortArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandPivotSortArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000020f) ^ 0x0000020f) == 0) {  // All required fields are present.
    // required .TST.TableCommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TSP.UUID target_pivot_row_column_rule_change_uid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_pivot_row_column_rule_change_uid_);

    // required .TSP.UUID target_pivot_aggregate_rule_change_uid = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_pivot_aggregate_rule_change_uid_);

    // required .TSP.UUID target_pivot_data_refresh_uid = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_pivot_data_refresh_uid_);

    // required bool is_order_finalized = 15;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TSP.UUID column_order = 3;
  total_size += 1UL * this->_internal_column_order_size();
  for (const auto& msg : this->_impl_.column_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_column_order = 4;
  total_size += 1UL * this->_internal_undo_column_order_size();
  for (const auto& msg : this->_impl_.undo_column_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID row_order = 5;
  total_size += 1UL * this->_internal_row_order_size();
  for (const auto& msg : this->_impl_.row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .TSP.UUID undo_row_order = 6;
  total_size += 1UL * this->_internal_undo_row_order_size();
  for (const auto& msg : this->_impl_.undo_row_order_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000f0u) {
    // optional .TSP.UUID grouping_column_uid = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.grouping_column_uid_);
    }

    // optional .TSP.UUID sorting_aggregate_rule_uid = 13;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.sorting_aggregate_rule_uid_);
    }

    // optional .TSP.UUID undo_sorting_aggregate_rule_uid = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.undo_sorting_aggregate_rule_uid_);
    }

    // optional uint32 sorting_flags = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sorting_flags());
    }

  }
  // optional uint32 undo_sorting_flags = 12;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_undo_sorting_flags());
  }

  // optional .TST.TableDimensionArchive dimension = 2;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dimension());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandPivotSortArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandPivotSortArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandPivotSortArchive::GetClassData() const { return &_class_data_; }


void CommandPivotSortArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandPivotSortArchive*>(&to_msg);
  auto& from = static_cast<const CommandPivotSortArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandPivotSortArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.column_order_.MergeFrom(from._impl_.column_order_);
  _this->_impl_.undo_column_order_.MergeFrom(from._impl_.undo_column_order_);
  _this->_impl_.row_order_.MergeFrom(from._impl_.row_order_);
  _this->_impl_.undo_row_order_.MergeFrom(from._impl_.undo_row_order_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TST::TableCommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_target_pivot_row_column_rule_change_uid()->::TSP::UUID::MergeFrom(
          from._internal_target_pivot_row_column_rule_change_uid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_target_pivot_aggregate_rule_change_uid()->::TSP::UUID::MergeFrom(
          from._internal_target_pivot_aggregate_rule_change_uid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_target_pivot_data_refresh_uid()->::TSP::UUID::MergeFrom(
          from._internal_target_pivot_data_refresh_uid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_grouping_column_uid()->::TSP::UUID::MergeFrom(
          from._internal_grouping_column_uid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_sorting_aggregate_rule_uid()->::TSP::UUID::MergeFrom(
          from._internal_sorting_aggregate_rule_uid());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_undo_sorting_aggregate_rule_uid()->::TSP::UUID::MergeFrom(
          from._internal_undo_sorting_aggregate_rule_uid());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.sorting_flags_ = from._impl_.sorting_flags_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.undo_sorting_flags_ = from._impl_.undo_sorting_flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.is_order_finalized_ = from._impl_.is_order_finalized_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.dimension_ = from._impl_.dimension_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandPivotSortArchive::CopyFrom(const CommandPivotSortArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandPivotSortArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandPivotSortArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.column_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.undo_column_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.row_order_))
    return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.undo_row_order_))
    return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_target_pivot_row_column_rule_change_uid()) {
    if (!_impl_.target_pivot_row_column_rule_change_uid_->IsInitialized()) return false;
  }
  if (_internal_has_target_pivot_aggregate_rule_change_uid()) {
    if (!_impl_.target_pivot_aggregate_rule_change_uid_->IsInitialized()) return false;
  }
  if (_internal_has_target_pivot_data_refresh_uid()) {
    if (!_impl_.target_pivot_data_refresh_uid_->IsInitialized()) return false;
  }
  if (_internal_has_grouping_column_uid()) {
    if (!_impl_.grouping_column_uid_->IsInitialized()) return false;
  }
  if (_internal_has_sorting_aggregate_rule_uid()) {
    if (!_impl_.sorting_aggregate_rule_uid_->IsInitialized()) return false;
  }
  if (_internal_has_undo_sorting_aggregate_rule_uid()) {
    if (!_impl_.undo_sorting_aggregate_rule_uid_->IsInitialized()) return false;
  }
  return true;
}

void CommandPivotSortArchive::InternalSwap(CommandPivotSortArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.column_order_.InternalSwap(&other->_impl_.column_order_);
  _impl_.undo_column_order_.InternalSwap(&other->_impl_.undo_column_order_);
  _impl_.row_order_.InternalSwap(&other->_impl_.row_order_);
  _impl_.undo_row_order_.InternalSwap(&other->_impl_.undo_row_order_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandPivotSortArchive, _impl_.is_order_finalized_)
      + sizeof(CommandPivotSortArchive::_impl_.is_order_finalized_)
      - PROTOBUF_FIELD_OFFSET(CommandPivotSortArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
  swap(_impl_.dimension_, other->_impl_.dimension_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandPivotSortArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[106]);
}

// ===================================================================

class CommandRewriteTrackedReferencesArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandRewriteTrackedReferencesArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandRewriteTrackedReferencesArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaRewriteSpecArchive& rewrite_spec(const CommandRewriteTrackedReferencesArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::TSK::CommandArchive&
CommandRewriteTrackedReferencesArchive::_Internal::super(const CommandRewriteTrackedReferencesArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::FormulaRewriteSpecArchive&
CommandRewriteTrackedReferencesArchive::_Internal::rewrite_spec(const CommandRewriteTrackedReferencesArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
void CommandRewriteTrackedReferencesArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CommandRewriteTrackedReferencesArchive::CommandRewriteTrackedReferencesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandRewriteTrackedReferencesArchive)
}
CommandRewriteTrackedReferencesArchive::CommandRewriteTrackedReferencesArchive(const CommandRewriteTrackedReferencesArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandRewriteTrackedReferencesArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TST::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandRewriteTrackedReferencesArchive)
}

inline void CommandRewriteTrackedReferencesArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
  };
}

CommandRewriteTrackedReferencesArchive::~CommandRewriteTrackedReferencesArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandRewriteTrackedReferencesArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandRewriteTrackedReferencesArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
}

void CommandRewriteTrackedReferencesArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandRewriteTrackedReferencesArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandRewriteTrackedReferencesArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRewriteTrackedReferencesArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandRewriteTrackedReferencesArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandRewriteTrackedReferencesArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // optional .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandRewriteTrackedReferencesArchive)
  return target;
}

size_t CommandRewriteTrackedReferencesArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandRewriteTrackedReferencesArchive)
  size_t total_size = 0;

  // required .TSK.CommandArchive super = 1;
  if (_internal_has_super()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandRewriteTrackedReferencesArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandRewriteTrackedReferencesArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandRewriteTrackedReferencesArchive::GetClassData() const { return &_class_data_; }


void CommandRewriteTrackedReferencesArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandRewriteTrackedReferencesArchive*>(&to_msg);
  auto& from = static_cast<const CommandRewriteTrackedReferencesArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandRewriteTrackedReferencesArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rewrite_spec()->::TST::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandRewriteTrackedReferencesArchive::CopyFrom(const CommandRewriteTrackedReferencesArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandRewriteTrackedReferencesArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRewriteTrackedReferencesArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  return true;
}

void CommandRewriteTrackedReferencesArchive::InternalSwap(CommandRewriteTrackedReferencesArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRewriteTrackedReferencesArchive, _impl_.rewrite_spec_)
      + sizeof(CommandRewriteTrackedReferencesArchive::_impl_.rewrite_spec_)
      - PROTOBUF_FIELD_OFFSET(CommandRewriteTrackedReferencesArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRewriteTrackedReferencesArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[107]);
}

// ===================================================================

class CommandExtendTableIDHistoryArchive::_Internal {
 public:
  using HasBits = decltype(std::declval<CommandExtendTableIDHistoryArchive>()._impl_._has_bits_);
  static const ::TSK::CommandArchive& super(const CommandExtendTableIDHistoryArchive* msg);
  static void set_has_super(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TST::FormulaRewriteSpecArchive& rewrite_spec(const CommandExtendTableIDHistoryArchive* msg);
  static void set_has_rewrite_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TSCE::RewriteTableUIDInfoArchive& table_uid_history_rollback(const CommandExtendTableIDHistoryArchive* msg);
  static void set_has_table_uid_history_rollback(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::TSK::CommandArchive&
CommandExtendTableIDHistoryArchive::_Internal::super(const CommandExtendTableIDHistoryArchive* msg) {
  return *msg->_impl_.super_;
}
const ::TST::FormulaRewriteSpecArchive&
CommandExtendTableIDHistoryArchive::_Internal::rewrite_spec(const CommandExtendTableIDHistoryArchive* msg) {
  return *msg->_impl_.rewrite_spec_;
}
const ::TSCE::RewriteTableUIDInfoArchive&
CommandExtendTableIDHistoryArchive::_Internal::table_uid_history_rollback(const CommandExtendTableIDHistoryArchive* msg) {
  return *msg->_impl_.table_uid_history_rollback_;
}
void CommandExtendTableIDHistoryArchive::clear_super() {
  if (_impl_.super_ != nullptr) _impl_.super_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CommandExtendTableIDHistoryArchive::clear_table_uid_history_rollback() {
  if (_impl_.table_uid_history_rollback_ != nullptr) _impl_.table_uid_history_rollback_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CommandExtendTableIDHistoryArchive::CommandExtendTableIDHistoryArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TST.CommandExtendTableIDHistoryArchive)
}
CommandExtendTableIDHistoryArchive::CommandExtendTableIDHistoryArchive(const CommandExtendTableIDHistoryArchive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommandExtendTableIDHistoryArchive* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.table_uid_history_rollback_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_super()) {
    _this->_impl_.super_ = new ::TSK::CommandArchive(*from._impl_.super_);
  }
  if (from._internal_has_rewrite_spec()) {
    _this->_impl_.rewrite_spec_ = new ::TST::FormulaRewriteSpecArchive(*from._impl_.rewrite_spec_);
  }
  if (from._internal_has_table_uid_history_rollback()) {
    _this->_impl_.table_uid_history_rollback_ = new ::TSCE::RewriteTableUIDInfoArchive(*from._impl_.table_uid_history_rollback_);
  }
  // @@protoc_insertion_point(copy_constructor:TST.CommandExtendTableIDHistoryArchive)
}

inline void CommandExtendTableIDHistoryArchive::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.super_){nullptr}
    , decltype(_impl_.rewrite_spec_){nullptr}
    , decltype(_impl_.table_uid_history_rollback_){nullptr}
  };
}

CommandExtendTableIDHistoryArchive::~CommandExtendTableIDHistoryArchive() {
  // @@protoc_insertion_point(destructor:TST.CommandExtendTableIDHistoryArchive)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommandExtendTableIDHistoryArchive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.super_;
  if (this != internal_default_instance()) delete _impl_.rewrite_spec_;
  if (this != internal_default_instance()) delete _impl_.table_uid_history_rollback_;
}

void CommandExtendTableIDHistoryArchive::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommandExtendTableIDHistoryArchive::Clear() {
// @@protoc_insertion_point(message_clear_start:TST.CommandExtendTableIDHistoryArchive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.super_ != nullptr);
      _impl_.super_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rewrite_spec_ != nullptr);
      _impl_.rewrite_spec_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.table_uid_history_rollback_ != nullptr);
      _impl_.table_uid_history_rollback_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandExtendTableIDHistoryArchive::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TSK.CommandArchive super = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_super(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rewrite_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history_rollback = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_table_uid_history_rollback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommandExtendTableIDHistoryArchive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TST.CommandExtendTableIDHistoryArchive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TSK.CommandArchive super = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::super(this),
        _Internal::super(this).GetCachedSize(), target, stream);
  }

  // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rewrite_spec(this),
        _Internal::rewrite_spec(this).GetCachedSize(), target, stream);
  }

  // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history_rollback = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::table_uid_history_rollback(this),
        _Internal::table_uid_history_rollback(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TST.CommandExtendTableIDHistoryArchive)
  return target;
}

size_t CommandExtendTableIDHistoryArchive::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:TST.CommandExtendTableIDHistoryArchive)
  size_t total_size = 0;

  if (_internal_has_super()) {
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);
  }

  if (_internal_has_rewrite_spec()) {
    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);
  }

  return total_size;
}
size_t CommandExtendTableIDHistoryArchive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TST.CommandExtendTableIDHistoryArchive)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .TSK.CommandArchive super = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.super_);

    // required .TST.FormulaRewriteSpecArchive rewrite_spec = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rewrite_spec_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TSCE.RewriteTableUIDInfoArchive table_uid_history_rollback = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_uid_history_rollback_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommandExtendTableIDHistoryArchive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommandExtendTableIDHistoryArchive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommandExtendTableIDHistoryArchive::GetClassData() const { return &_class_data_; }


void CommandExtendTableIDHistoryArchive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommandExtendTableIDHistoryArchive*>(&to_msg);
  auto& from = static_cast<const CommandExtendTableIDHistoryArchive&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TST.CommandExtendTableIDHistoryArchive)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_super()->::TSK::CommandArchive::MergeFrom(
          from._internal_super());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rewrite_spec()->::TST::FormulaRewriteSpecArchive::MergeFrom(
          from._internal_rewrite_spec());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_table_uid_history_rollback()->::TSCE::RewriteTableUIDInfoArchive::MergeFrom(
          from._internal_table_uid_history_rollback());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommandExtendTableIDHistoryArchive::CopyFrom(const CommandExtendTableIDHistoryArchive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TST.CommandExtendTableIDHistoryArchive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandExtendTableIDHistoryArchive::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_super()) {
    if (!_impl_.super_->IsInitialized()) return false;
  }
  if (_internal_has_rewrite_spec()) {
    if (!_impl_.rewrite_spec_->IsInitialized()) return false;
  }
  if (_internal_has_table_uid_history_rollback()) {
    if (!_impl_.table_uid_history_rollback_->IsInitialized()) return false;
  }
  return true;
}

void CommandExtendTableIDHistoryArchive::InternalSwap(CommandExtendTableIDHistoryArchive* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandExtendTableIDHistoryArchive, _impl_.table_uid_history_rollback_)
      + sizeof(CommandExtendTableIDHistoryArchive::_impl_.table_uid_history_rollback_)
      - PROTOBUF_FIELD_OFFSET(CommandExtendTableIDHistoryArchive, _impl_.super_)>(
          reinterpret_cast<char*>(&_impl_.super_),
          reinterpret_cast<char*>(&other->_impl_.super_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandExtendTableIDHistoryArchive::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_TSTCommandArchives_2eproto_getter, &descriptor_table_TSTCommandArchives_2eproto_once,
      file_level_metadata_TSTCommandArchives_2eproto[108]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace TST
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TST::TableCommandArchive*
Arena::CreateMaybeMessage< ::TST::TableCommandArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableCommandArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyCellContentsArchive*
Arena::CreateMaybeMessage< ::TST::CommandApplyCellContentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyCellContentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyCellDiffMapArchive*
Arena::CreateMaybeMessage< ::TST::CommandApplyCellDiffMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyCellDiffMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyCellMapArchive*
Arena::CreateMaybeMessage< ::TST::CommandApplyCellMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyCellMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyConcurrentCellMapArchive*
Arena::CreateMaybeMessage< ::TST::CommandApplyConcurrentCellMapArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyConcurrentCellMapArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandChangeFreezeHeaderStateArchive*
Arena::CreateMaybeMessage< ::TST::CommandChangeFreezeHeaderStateArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandChangeFreezeHeaderStateArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandDeleteCellsArchive*
Arena::CreateMaybeMessage< ::TST::CommandDeleteCellsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandDeleteCellsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandDeleteCellContentsArchive*
Arena::CreateMaybeMessage< ::TST::CommandDeleteCellContentsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandDeleteCellContentsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandMutateCellFormatArchive*
Arena::CreateMaybeMessage< ::TST::CommandMutateCellFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandMutateCellFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetAutomaticDurationUnitsArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetAutomaticDurationUnitsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetAutomaticDurationUnitsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetDurationStyleArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetDurationStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetDurationStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetDurationUnitSmallestLargestArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetDurationUnitSmallestLargestArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetDurationUnitSmallestLargestArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandReplaceCustomFormatArchive*
Arena::CreateMaybeMessage< ::TST::CommandReplaceCustomFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandReplaceCustomFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandMoveCellsArchive*
Arena::CreateMaybeMessage< ::TST::CommandMoveCellsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandMoveCellsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnRowMetadataArchive*
Arena::CreateMaybeMessage< ::TST::ColumnRowMetadataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnRowMetadataArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandInsertColumnsOrRowsArchive*
Arena::CreateMaybeMessage< ::TST::CommandInsertColumnsOrRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandInsertColumnsOrRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnRowBundleArchive*
Arena::CreateMaybeMessage< ::TST::ColumnRowBundleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnRowBundleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRemoveColumnsOrRowsArchive*
Arena::CreateMaybeMessage< ::TST::CommandRemoveColumnsOrRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRemoveColumnsOrRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRowColumnRangeArchive*
Arena::CreateMaybeMessage< ::TST::CommandRowColumnRangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRowColumnRangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandResizeColumnOrRowArchive*
Arena::CreateMaybeMessage< ::TST::CommandResizeColumnOrRowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandResizeColumnOrRowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategoryResizeColumnOrRowArchive*
Arena::CreateMaybeMessage< ::TST::CommandCategoryResizeColumnOrRowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategoryResizeColumnOrRowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandHideShowArchive*
Arena::CreateMaybeMessage< ::TST::CommandHideShowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandHideShowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandTextPreflightInsertCellArchive*
Arena::CreateMaybeMessage< ::TST::CommandTextPreflightInsertCellArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandTextPreflightInsertCellArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandPostflightSetCellArchive*
Arena::CreateMaybeMessage< ::TST::CommandPostflightSetCellArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandPostflightSetCellArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandChangeTableAreaForColumnOrRowArchive*
Arena::CreateMaybeMessage< ::TST::CommandChangeTableAreaForColumnOrRowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandChangeTableAreaForColumnOrRowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetPencilAnnotationsArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetPencilAnnotationsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetPencilAnnotationsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTableNameArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetTableNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTableNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTableNameEnabledArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetTableNameEnabledArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTableNameEnabledArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTableFontSizeArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetTableFontSizeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTableFontSizeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTableFontNameArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetTableFontNameArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTableFontNameArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTableNameHeightArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetTableNameHeightArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTableNameHeightArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetNowArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetNowArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetNowArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetWasCutArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetWasCutArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetWasCutArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandStyleCellsArchive*
Arena::CreateMaybeMessage< ::TST::CommandStyleCellsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandStyleCellsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandStyleTableArchive*
Arena::CreateMaybeMessage< ::TST::CommandStyleTableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandStyleTableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetRepeatingHeaderEnabledArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetRepeatingHeaderEnabledArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetRepeatingHeaderEnabledArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetFiltersEnabledArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetFiltersEnabledArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetFiltersEnabledArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandAddTableStylePresetArchive*
Arena::CreateMaybeMessage< ::TST::CommandAddTableStylePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandAddTableStylePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRemoveTableStylePresetArchive*
Arena::CreateMaybeMessage< ::TST::CommandRemoveTableStylePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRemoveTableStylePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandReplaceTableStylePresetArchive*
Arena::CreateMaybeMessage< ::TST::CommandReplaceTableStylePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandReplaceTableStylePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyTableStylePresetArchive*
Arena::CreateMaybeMessage< ::TST::CommandApplyTableStylePresetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyTableStylePresetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetBaseArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetBaseArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetBaseArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetBasePlacesArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetBasePlacesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetBasePlacesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetBaseUseMinusSignArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetBaseUseMinusSignArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetBaseUseMinusSignArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetCurrencyCodeArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetCurrencyCodeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetCurrencyCodeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetFractionAccuracyArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetFractionAccuracyArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetFractionAccuracyArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetNegativeNumberStyleArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetNegativeNumberStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetNegativeNumberStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetNumberOfDecimalPlacesArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetNumberOfDecimalPlacesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetNumberOfDecimalPlacesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetDateTimeFormatArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetDateTimeFormatArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetDateTimeFormatArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetShowThousandsSeparatorArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetShowThousandsSeparatorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetShowThousandsSeparatorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetUseAccountingStyleArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetUseAccountingStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetUseAccountingStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetRangeControlMinMaxIncArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetRangeControlMinMaxIncArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetRangeControlMinMaxIncArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandMoveColumnsOrRowsArchive*
Arena::CreateMaybeMessage< ::TST::CommandMoveColumnsOrRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandMoveColumnsOrRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSortArchive*
Arena::CreateMaybeMessage< ::TST::CommandSortArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSortArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaRewriteSpecArchive*
Arena::CreateMaybeMessage< ::TST::FormulaRewriteSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaRewriteSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteFormulasForTransposeArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewriteFormulasForTransposeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteFormulasForTransposeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteTableFormulasForRewriteSpecArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewriteTableFormulasForRewriteSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteTableFormulasForRewriteSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteMergeFormulasArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewriteMergeFormulasArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteMergeFormulasArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteCategoryFormulasArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewriteCategoryFormulasArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteCategoryFormulasArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteFilterFormulasForTableResizeArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewriteFilterFormulasForTableResizeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteFilterFormulasForTableResizeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteFilterFormulasForRewriteSpecArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewriteFilterFormulasForRewriteSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteFilterFormulasForRewriteSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteConditionalStylesForRewriteSpecArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewriteConditionalStylesForRewriteSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteConditionalStylesForRewriteSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewritePivotOwnerFormulasArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewritePivotOwnerFormulasArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewritePivotOwnerFormulasArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandMergeArchive*
Arena::CreateMaybeMessage< ::TST::CommandMergeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandMergeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandInverseMergeArchive*
Arena::CreateMaybeMessage< ::TST::CommandInverseMergeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandInverseMergeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandUnmergeArchive*
Arena::CreateMaybeMessage< ::TST::CommandUnmergeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandUnmergeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandChooseTableIdRemapperArchive*
Arena::CreateMaybeMessage< ::TST::CommandChooseTableIdRemapperArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandChooseTableIdRemapperArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategorySetGroupingColumnsArchive*
Arena::CreateMaybeMessage< ::TST::CommandCategorySetGroupingColumnsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategorySetGroupingColumnsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaEditingCommandGroupArchive*
Arena::CreateMaybeMessage< ::TST::FormulaEditingCommandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaEditingCommandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::FormulaEditingCommandSelectionBehaviorArchive*
Arena::CreateMaybeMessage< ::TST::FormulaEditingCommandSelectionBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::FormulaEditingCommandSelectionBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableCommandSelectionBehaviorArchive*
Arena::CreateMaybeMessage< ::TST::TableCommandSelectionBehaviorArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableCommandSelectionBehaviorArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandApplyCellCommentArchive*
Arena::CreateMaybeMessage< ::TST::CommandApplyCellCommentArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandApplyCellCommentArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetFormulaTokenizationArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetFormulaTokenizationArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetFormulaTokenizationArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetFilterSetTypeArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetFilterSetTypeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetFilterSetTypeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTextStyleArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetTextStyleArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTextStyleArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetTextStylePropertiesArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetTextStylePropertiesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetTextStylePropertiesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandJustForNotifyingArchive*
Arena::CreateMaybeMessage< ::TST::CommandJustForNotifyingArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandJustForNotifyingArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetStorageLanguageArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetStorageLanguageArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetStorageLanguageArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetSortOrderArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetSortOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetSortOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetGroupSortOrderArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetGroupSortOrderArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetGroupSortOrderArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteSortOrderForTableResizeArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewriteSortOrderForTableResizeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteSortOrderForTableResizeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteSortOrderForRewriteSpecArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewriteSortOrderForRewriteSpecArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteSortOrderForRewriteSpecArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetFilterSetArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetFilterSetArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetFilterSetArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ColumnRowRestoreDataArchive*
Arena::CreateMaybeMessage< ::TST::ColumnRowRestoreDataArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ColumnRowRestoreDataArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandTransposeTableArchive*
Arena::CreateMaybeMessage< ::TST::CommandTransposeTableArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandTransposeTableArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandSetStructuredTextImportRecordArchive*
Arena::CreateMaybeMessage< ::TST::CommandSetStructuredTextImportRecordArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandSetStructuredTextImportRecordArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategoryCollapseExpandGroupArchive*
Arena::CreateMaybeMessage< ::TST::CommandCategoryCollapseExpandGroupArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategoryCollapseExpandGroupArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategoryChangeSummaryAggregateType*
Arena::CreateMaybeMessage< ::TST::CommandCategoryChangeSummaryAggregateType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategoryChangeSummaryAggregateType >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategorySetLabelRowVisibility*
Arena::CreateMaybeMessage< ::TST::CommandCategorySetLabelRowVisibility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategorySetLabelRowVisibility >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategoryWillChangeGroupValue*
Arena::CreateMaybeMessage< ::TST::CommandCategoryWillChangeGroupValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategoryWillChangeGroupValue >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::IdempotentSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TST::IdempotentSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::IdempotentSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::WPSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TST::WPSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::WPSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableSubSelectionTransformerBaseArchive*
Arena::CreateMaybeMessage< ::TST::TableSubSelectionTransformerBaseArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableSubSelectionTransformerBaseArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::TableNameSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TST::TableNameSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::TableNameSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::ControlCellSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TST::ControlCellSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::ControlCellSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StockCellSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TST::StockCellSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StockCellSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::RegionSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TST::RegionSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::RegionSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::StrokeSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TST::StrokeSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::StrokeSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::RowColumnSelectionTransformerArchive*
Arena::CreateMaybeMessage< ::TST::RowColumnSelectionTransformerArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::RowColumnSelectionTransformerArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandCategoryMoveRowsArchive*
Arena::CreateMaybeMessage< ::TST::CommandCategoryMoveRowsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandCategoryMoveRowsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteHiddenStatesForGroupByChangeArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewriteHiddenStatesForGroupByChangeArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteHiddenStatesForGroupByChangeArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair*
Arena::CreateMaybeMessage< ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewritePencilAnnotationFormulasArchive_AnnotationPair >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewritePencilAnnotationFormulasArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewritePencilAnnotationFormulasArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewritePencilAnnotationFormulasArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandPivotSetPivotRulesArchive*
Arena::CreateMaybeMessage< ::TST::CommandPivotSetPivotRulesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandPivotSetPivotRulesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandPivotSetGroupingColumnOptionsArchive*
Arena::CreateMaybeMessage< ::TST::CommandPivotSetGroupingColumnOptionsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandPivotSetGroupingColumnOptionsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandPivotHideShowGrandTotalsArchive*
Arena::CreateMaybeMessage< ::TST::CommandPivotHideShowGrandTotalsArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandPivotHideShowGrandTotalsArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandPivotSortArchive*
Arena::CreateMaybeMessage< ::TST::CommandPivotSortArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandPivotSortArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandRewriteTrackedReferencesArchive*
Arena::CreateMaybeMessage< ::TST::CommandRewriteTrackedReferencesArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandRewriteTrackedReferencesArchive >(arena);
}
template<> PROTOBUF_NOINLINE ::TST::CommandExtendTableIDHistoryArchive*
Arena::CreateMaybeMessage< ::TST::CommandExtendTableIDHistoryArchive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TST::CommandExtendTableIDHistoryArchive >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
