// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TSCHArchives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "TSPMessages.pb.h"
#include "TSKArchives.pb.h"
#include "TSDArchives.pb.h"
#include "TSSArchives.pb.h"
#include "TSCHArchives.Common.pb.h"
#include "TSCHArchives.GEN.pb.h"
#include "TSCH3DArchives.pb.h"
#include "TSCHPreUFFArchives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TSCHArchives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TSCHArchives_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TSCHArchives_2eproto;
namespace TSCH {
class ChartArchive;
struct ChartArchiveDefaultTypeInternal;
extern ChartArchiveDefaultTypeInternal _ChartArchive_default_instance_;
class ChartAxisIDArchive;
struct ChartAxisIDArchiveDefaultTypeInternal;
extern ChartAxisIDArchiveDefaultTypeInternal _ChartAxisIDArchive_default_instance_;
class ChartAxisReferenceLineNonStylesArchive;
struct ChartAxisReferenceLineNonStylesArchiveDefaultTypeInternal;
extern ChartAxisReferenceLineNonStylesArchiveDefaultTypeInternal _ChartAxisReferenceLineNonStylesArchive_default_instance_;
class ChartAxisReferenceLineSparseNonStylesArchive;
struct ChartAxisReferenceLineSparseNonStylesArchiveDefaultTypeInternal;
extern ChartAxisReferenceLineSparseNonStylesArchiveDefaultTypeInternal _ChartAxisReferenceLineSparseNonStylesArchive_default_instance_;
class ChartAxisReferenceLineStylesArchive;
struct ChartAxisReferenceLineStylesArchiveDefaultTypeInternal;
extern ChartAxisReferenceLineStylesArchiveDefaultTypeInternal _ChartAxisReferenceLineStylesArchive_default_instance_;
class ChartCDESelectionArchive;
struct ChartCDESelectionArchiveDefaultTypeInternal;
extern ChartCDESelectionArchiveDefaultTypeInternal _ChartCDESelectionArchive_default_instance_;
class ChartDrawableArchive;
struct ChartDrawableArchiveDefaultTypeInternal;
extern ChartDrawableArchiveDefaultTypeInternal _ChartDrawableArchive_default_instance_;
class ChartFillSetArchive;
struct ChartFillSetArchiveDefaultTypeInternal;
extern ChartFillSetArchiveDefaultTypeInternal _ChartFillSetArchive_default_instance_;
class ChartFormatStructExtensions;
struct ChartFormatStructExtensionsDefaultTypeInternal;
extern ChartFormatStructExtensionsDefaultTypeInternal _ChartFormatStructExtensions_default_instance_;
class ChartGarlicLabelFormatUpgrade;
struct ChartGarlicLabelFormatUpgradeDefaultTypeInternal;
extern ChartGarlicLabelFormatUpgradeDefaultTypeInternal _ChartGarlicLabelFormatUpgrade_default_instance_;
class ChartGarlicMinMaxUpgrade;
struct ChartGarlicMinMaxUpgradeDefaultTypeInternal;
extern ChartGarlicMinMaxUpgradeDefaultTypeInternal _ChartGarlicMinMaxUpgrade_default_instance_;
class ChartGridArchive;
struct ChartGridArchiveDefaultTypeInternal;
extern ChartGridArchiveDefaultTypeInternal _ChartGridArchive_default_instance_;
class ChartGridArchive_ChartGridRowColumnIdMap;
struct ChartGridArchive_ChartGridRowColumnIdMapDefaultTypeInternal;
extern ChartGridArchive_ChartGridRowColumnIdMapDefaultTypeInternal _ChartGridArchive_ChartGridRowColumnIdMap_default_instance_;
class ChartGridArchive_ChartGridRowColumnIdMap_Entry;
struct ChartGridArchive_ChartGridRowColumnIdMap_EntryDefaultTypeInternal;
extern ChartGridArchive_ChartGridRowColumnIdMap_EntryDefaultTypeInternal _ChartGridArchive_ChartGridRowColumnIdMap_Entry_default_instance_;
class ChartMediatorArchive;
struct ChartMediatorArchiveDefaultTypeInternal;
extern ChartMediatorArchiveDefaultTypeInternal _ChartMediatorArchive_default_instance_;
class ChartMultiDataIndexUpgrade;
struct ChartMultiDataIndexUpgradeDefaultTypeInternal;
extern ChartMultiDataIndexUpgradeDefaultTypeInternal _ChartMultiDataIndexUpgrade_default_instance_;
class ChartPasteboardAdditionsArchive;
struct ChartPasteboardAdditionsArchiveDefaultTypeInternal;
extern ChartPasteboardAdditionsArchiveDefaultTypeInternal _ChartPasteboardAdditionsArchive_default_instance_;
class ChartPreserveAppearanceForPresetArchive;
struct ChartPreserveAppearanceForPresetArchiveDefaultTypeInternal;
extern ChartPreserveAppearanceForPresetArchiveDefaultTypeInternal _ChartPreserveAppearanceForPresetArchive_default_instance_;
class ChartPresetReferenceLineStylesArchive;
struct ChartPresetReferenceLineStylesArchiveDefaultTypeInternal;
extern ChartPresetReferenceLineStylesArchiveDefaultTypeInternal _ChartPresetReferenceLineStylesArchive_default_instance_;
class ChartPresetsArchive;
struct ChartPresetsArchiveDefaultTypeInternal;
extern ChartPresetsArchiveDefaultTypeInternal _ChartPresetsArchive_default_instance_;
class ChartReferenceLineNonStyleItem;
struct ChartReferenceLineNonStyleItemDefaultTypeInternal;
extern ChartReferenceLineNonStyleItemDefaultTypeInternal _ChartReferenceLineNonStyleItem_default_instance_;
class ChartReferenceLinesArchive;
struct ChartReferenceLinesArchiveDefaultTypeInternal;
extern ChartReferenceLinesArchiveDefaultTypeInternal _ChartReferenceLinesArchive_default_instance_;
class ChartSelectionArchive;
struct ChartSelectionArchiveDefaultTypeInternal;
extern ChartSelectionArchiveDefaultTypeInternal _ChartSelectionArchive_default_instance_;
class ChartSelectionPathArchive;
struct ChartSelectionPathArchiveDefaultTypeInternal;
extern ChartSelectionPathArchiveDefaultTypeInternal _ChartSelectionPathArchive_default_instance_;
class ChartSelectionPathArgumentArchive;
struct ChartSelectionPathArgumentArchiveDefaultTypeInternal;
extern ChartSelectionPathArgumentArchiveDefaultTypeInternal _ChartSelectionPathArgumentArchive_default_instance_;
class ChartSelectionPathTypeArchive;
struct ChartSelectionPathTypeArchiveDefaultTypeInternal;
extern ChartSelectionPathTypeArchiveDefaultTypeInternal _ChartSelectionPathTypeArchive_default_instance_;
class ChartStylePreset;
struct ChartStylePresetDefaultTypeInternal;
extern ChartStylePresetDefaultTypeInternal _ChartStylePreset_default_instance_;
class ChartSupportsProportionalBendedCalloutLinesArchive;
struct ChartSupportsProportionalBendedCalloutLinesArchiveDefaultTypeInternal;
extern ChartSupportsProportionalBendedCalloutLinesArchiveDefaultTypeInternal _ChartSupportsProportionalBendedCalloutLinesArchive_default_instance_;
class ChartSupportsRoundedCornersArchive;
struct ChartSupportsRoundedCornersArchiveDefaultTypeInternal;
extern ChartSupportsRoundedCornersArchiveDefaultTypeInternal _ChartSupportsRoundedCornersArchive_default_instance_;
class ChartSupportsSeriesPropertySpacingArchive;
struct ChartSupportsSeriesPropertySpacingArchiveDefaultTypeInternal;
extern ChartSupportsSeriesPropertySpacingArchiveDefaultTypeInternal _ChartSupportsSeriesPropertySpacingArchive_default_instance_;
class ChartUIState;
struct ChartUIStateDefaultTypeInternal;
extern ChartUIStateDefaultTypeInternal _ChartUIState_default_instance_;
class ChartUIStateMultiDataIndexUpgrade;
struct ChartUIStateMultiDataIndexUpgradeDefaultTypeInternal;
extern ChartUIStateMultiDataIndexUpgradeDefaultTypeInternal _ChartUIStateMultiDataIndexUpgrade_default_instance_;
class CollaboratorCDECursorSubselectionArchive;
struct CollaboratorCDECursorSubselectionArchiveDefaultTypeInternal;
extern CollaboratorCDECursorSubselectionArchiveDefaultTypeInternal _CollaboratorCDECursorSubselectionArchive_default_instance_;
class CollaboratorChartTitleCursorSubselectionArchive;
struct CollaboratorChartTitleCursorSubselectionArchiveDefaultTypeInternal;
extern CollaboratorChartTitleCursorSubselectionArchiveDefaultTypeInternal _CollaboratorChartTitleCursorSubselectionArchive_default_instance_;
class PropertyValueStorageContainerArchive;
struct PropertyValueStorageContainerArchiveDefaultTypeInternal;
extern PropertyValueStorageContainerArchiveDefaultTypeInternal _PropertyValueStorageContainerArchive_default_instance_;
class PropertyValueStorageContainerReferenceLinesArchive;
struct PropertyValueStorageContainerReferenceLinesArchiveDefaultTypeInternal;
extern PropertyValueStorageContainerReferenceLinesArchiveDefaultTypeInternal _PropertyValueStorageContainerReferenceLinesArchive_default_instance_;
class StylePasteboardDataArchive;
struct StylePasteboardDataArchiveDefaultTypeInternal;
extern StylePasteboardDataArchiveDefaultTypeInternal _StylePasteboardDataArchive_default_instance_;
}  // namespace TSCH
PROTOBUF_NAMESPACE_OPEN
template<> ::TSCH::ChartArchive* Arena::CreateMaybeMessage<::TSCH::ChartArchive>(Arena*);
template<> ::TSCH::ChartAxisIDArchive* Arena::CreateMaybeMessage<::TSCH::ChartAxisIDArchive>(Arena*);
template<> ::TSCH::ChartAxisReferenceLineNonStylesArchive* Arena::CreateMaybeMessage<::TSCH::ChartAxisReferenceLineNonStylesArchive>(Arena*);
template<> ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive* Arena::CreateMaybeMessage<::TSCH::ChartAxisReferenceLineSparseNonStylesArchive>(Arena*);
template<> ::TSCH::ChartAxisReferenceLineStylesArchive* Arena::CreateMaybeMessage<::TSCH::ChartAxisReferenceLineStylesArchive>(Arena*);
template<> ::TSCH::ChartCDESelectionArchive* Arena::CreateMaybeMessage<::TSCH::ChartCDESelectionArchive>(Arena*);
template<> ::TSCH::ChartDrawableArchive* Arena::CreateMaybeMessage<::TSCH::ChartDrawableArchive>(Arena*);
template<> ::TSCH::ChartFillSetArchive* Arena::CreateMaybeMessage<::TSCH::ChartFillSetArchive>(Arena*);
template<> ::TSCH::ChartFormatStructExtensions* Arena::CreateMaybeMessage<::TSCH::ChartFormatStructExtensions>(Arena*);
template<> ::TSCH::ChartGarlicLabelFormatUpgrade* Arena::CreateMaybeMessage<::TSCH::ChartGarlicLabelFormatUpgrade>(Arena*);
template<> ::TSCH::ChartGarlicMinMaxUpgrade* Arena::CreateMaybeMessage<::TSCH::ChartGarlicMinMaxUpgrade>(Arena*);
template<> ::TSCH::ChartGridArchive* Arena::CreateMaybeMessage<::TSCH::ChartGridArchive>(Arena*);
template<> ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* Arena::CreateMaybeMessage<::TSCH::ChartGridArchive_ChartGridRowColumnIdMap>(Arena*);
template<> ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* Arena::CreateMaybeMessage<::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry>(Arena*);
template<> ::TSCH::ChartMediatorArchive* Arena::CreateMaybeMessage<::TSCH::ChartMediatorArchive>(Arena*);
template<> ::TSCH::ChartMultiDataIndexUpgrade* Arena::CreateMaybeMessage<::TSCH::ChartMultiDataIndexUpgrade>(Arena*);
template<> ::TSCH::ChartPasteboardAdditionsArchive* Arena::CreateMaybeMessage<::TSCH::ChartPasteboardAdditionsArchive>(Arena*);
template<> ::TSCH::ChartPreserveAppearanceForPresetArchive* Arena::CreateMaybeMessage<::TSCH::ChartPreserveAppearanceForPresetArchive>(Arena*);
template<> ::TSCH::ChartPresetReferenceLineStylesArchive* Arena::CreateMaybeMessage<::TSCH::ChartPresetReferenceLineStylesArchive>(Arena*);
template<> ::TSCH::ChartPresetsArchive* Arena::CreateMaybeMessage<::TSCH::ChartPresetsArchive>(Arena*);
template<> ::TSCH::ChartReferenceLineNonStyleItem* Arena::CreateMaybeMessage<::TSCH::ChartReferenceLineNonStyleItem>(Arena*);
template<> ::TSCH::ChartReferenceLinesArchive* Arena::CreateMaybeMessage<::TSCH::ChartReferenceLinesArchive>(Arena*);
template<> ::TSCH::ChartSelectionArchive* Arena::CreateMaybeMessage<::TSCH::ChartSelectionArchive>(Arena*);
template<> ::TSCH::ChartSelectionPathArchive* Arena::CreateMaybeMessage<::TSCH::ChartSelectionPathArchive>(Arena*);
template<> ::TSCH::ChartSelectionPathArgumentArchive* Arena::CreateMaybeMessage<::TSCH::ChartSelectionPathArgumentArchive>(Arena*);
template<> ::TSCH::ChartSelectionPathTypeArchive* Arena::CreateMaybeMessage<::TSCH::ChartSelectionPathTypeArchive>(Arena*);
template<> ::TSCH::ChartStylePreset* Arena::CreateMaybeMessage<::TSCH::ChartStylePreset>(Arena*);
template<> ::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive* Arena::CreateMaybeMessage<::TSCH::ChartSupportsProportionalBendedCalloutLinesArchive>(Arena*);
template<> ::TSCH::ChartSupportsRoundedCornersArchive* Arena::CreateMaybeMessage<::TSCH::ChartSupportsRoundedCornersArchive>(Arena*);
template<> ::TSCH::ChartSupportsSeriesPropertySpacingArchive* Arena::CreateMaybeMessage<::TSCH::ChartSupportsSeriesPropertySpacingArchive>(Arena*);
template<> ::TSCH::ChartUIState* Arena::CreateMaybeMessage<::TSCH::ChartUIState>(Arena*);
template<> ::TSCH::ChartUIStateMultiDataIndexUpgrade* Arena::CreateMaybeMessage<::TSCH::ChartUIStateMultiDataIndexUpgrade>(Arena*);
template<> ::TSCH::CollaboratorCDECursorSubselectionArchive* Arena::CreateMaybeMessage<::TSCH::CollaboratorCDECursorSubselectionArchive>(Arena*);
template<> ::TSCH::CollaboratorChartTitleCursorSubselectionArchive* Arena::CreateMaybeMessage<::TSCH::CollaboratorChartTitleCursorSubselectionArchive>(Arena*);
template<> ::TSCH::PropertyValueStorageContainerArchive* Arena::CreateMaybeMessage<::TSCH::PropertyValueStorageContainerArchive>(Arena*);
template<> ::TSCH::PropertyValueStorageContainerReferenceLinesArchive* Arena::CreateMaybeMessage<::TSCH::PropertyValueStorageContainerReferenceLinesArchive>(Arena*);
template<> ::TSCH::StylePasteboardDataArchive* Arena::CreateMaybeMessage<::TSCH::StylePasteboardDataArchive>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace TSCH {

// ===================================================================

class ChartDrawableArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartDrawableArchive) */ {
 public:
  inline ChartDrawableArchive() : ChartDrawableArchive(nullptr) {}
  ~ChartDrawableArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartDrawableArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartDrawableArchive(const ChartDrawableArchive& from);
  ChartDrawableArchive(ChartDrawableArchive&& from) noexcept
    : ChartDrawableArchive() {
    *this = ::std::move(from);
  }

  inline ChartDrawableArchive& operator=(const ChartDrawableArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartDrawableArchive& operator=(ChartDrawableArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartDrawableArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartDrawableArchive* internal_default_instance() {
    return reinterpret_cast<const ChartDrawableArchive*>(
               &_ChartDrawableArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChartDrawableArchive& a, ChartDrawableArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartDrawableArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartDrawableArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartDrawableArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartDrawableArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartDrawableArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartDrawableArchive& from) {
    ChartDrawableArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartDrawableArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartDrawableArchive";
  }
  protected:
  explicit ChartDrawableArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
  };
  // optional .TSD.DrawableArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableArchive& super() const;
  PROTOBUF_NODISCARD ::TSD::DrawableArchive* release_super();
  ::TSD::DrawableArchive* mutable_super();
  void set_allocated_super(::TSD::DrawableArchive* super);
  private:
  const ::TSD::DrawableArchive& _internal_super() const;
  ::TSD::DrawableArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableArchive* super);
  ::TSD::DrawableArchive* unsafe_arena_release_super();


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartDrawableArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  // @@protoc_insertion_point(class_scope:TSCH.ChartDrawableArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSD::DrawableArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartArchive) */ {
 public:
  inline ChartArchive() : ChartArchive(nullptr) {}
  ~ChartArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartArchive(const ChartArchive& from);
  ChartArchive(ChartArchive&& from) noexcept
    : ChartArchive() {
    *this = ::std::move(from);
  }

  inline ChartArchive& operator=(const ChartArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartArchive& operator=(ChartArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartArchive* internal_default_instance() {
    return reinterpret_cast<const ChartArchive*>(
               &_ChartArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChartArchive& a, ChartArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartArchive& from) {
    ChartArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartArchive";
  }
  protected:
  explicit ChartArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueAxisStylesFieldNumber = 13,
    kValueAxisNonstylesFieldNumber = 14,
    kCategoryAxisStylesFieldNumber = 15,
    kCategoryAxisNonstylesFieldNumber = 16,
    kSeriesThemeStylesFieldNumber = 17,
    kParagraphStylesFieldNumber = 20,
    kLegendFrameFieldNumber = 3,
    kPresetFieldNumber = 4,
    kGridFieldNumber = 7,
    kMediatorFieldNumber = 8,
    kChartStyleFieldNumber = 9,
    kChartNonStyleFieldNumber = 10,
    kLegendStyleFieldNumber = 11,
    kLegendNonStyleFieldNumber = 12,
    kSeriesPrivateStylesFieldNumber = 18,
    kSeriesNonStylesFieldNumber = 19,
    kOwnedPresetFieldNumber = 23,
    kChartTypeFieldNumber = 1,
    kScatterFormatFieldNumber = 2,
    kSeriesDirectionFieldNumber = 5,
    kContainsDefaultDataFieldNumber = 6,
    kNeedsCalcEngineDeferredImportActionFieldNumber = 22,
    kIsDirtyFieldNumber = 24,
    kMultidatasetIndexFieldNumber = 21,
  };
  // repeated .TSP.Reference value_axis_styles = 13;
  int value_axis_styles_size() const;
  private:
  int _internal_value_axis_styles_size() const;
  public:
  void clear_value_axis_styles();
  ::TSP::Reference* mutable_value_axis_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_value_axis_styles();
  private:
  const ::TSP::Reference& _internal_value_axis_styles(int index) const;
  ::TSP::Reference* _internal_add_value_axis_styles();
  public:
  const ::TSP::Reference& value_axis_styles(int index) const;
  ::TSP::Reference* add_value_axis_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      value_axis_styles() const;

  // repeated .TSP.Reference value_axis_nonstyles = 14;
  int value_axis_nonstyles_size() const;
  private:
  int _internal_value_axis_nonstyles_size() const;
  public:
  void clear_value_axis_nonstyles();
  ::TSP::Reference* mutable_value_axis_nonstyles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_value_axis_nonstyles();
  private:
  const ::TSP::Reference& _internal_value_axis_nonstyles(int index) const;
  ::TSP::Reference* _internal_add_value_axis_nonstyles();
  public:
  const ::TSP::Reference& value_axis_nonstyles(int index) const;
  ::TSP::Reference* add_value_axis_nonstyles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      value_axis_nonstyles() const;

  // repeated .TSP.Reference category_axis_styles = 15;
  int category_axis_styles_size() const;
  private:
  int _internal_category_axis_styles_size() const;
  public:
  void clear_category_axis_styles();
  ::TSP::Reference* mutable_category_axis_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_category_axis_styles();
  private:
  const ::TSP::Reference& _internal_category_axis_styles(int index) const;
  ::TSP::Reference* _internal_add_category_axis_styles();
  public:
  const ::TSP::Reference& category_axis_styles(int index) const;
  ::TSP::Reference* add_category_axis_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      category_axis_styles() const;

  // repeated .TSP.Reference category_axis_nonstyles = 16;
  int category_axis_nonstyles_size() const;
  private:
  int _internal_category_axis_nonstyles_size() const;
  public:
  void clear_category_axis_nonstyles();
  ::TSP::Reference* mutable_category_axis_nonstyles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_category_axis_nonstyles();
  private:
  const ::TSP::Reference& _internal_category_axis_nonstyles(int index) const;
  ::TSP::Reference* _internal_add_category_axis_nonstyles();
  public:
  const ::TSP::Reference& category_axis_nonstyles(int index) const;
  ::TSP::Reference* add_category_axis_nonstyles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      category_axis_nonstyles() const;

  // repeated .TSP.Reference series_theme_styles = 17;
  int series_theme_styles_size() const;
  private:
  int _internal_series_theme_styles_size() const;
  public:
  void clear_series_theme_styles();
  ::TSP::Reference* mutable_series_theme_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_series_theme_styles();
  private:
  const ::TSP::Reference& _internal_series_theme_styles(int index) const;
  ::TSP::Reference* _internal_add_series_theme_styles();
  public:
  const ::TSP::Reference& series_theme_styles(int index) const;
  ::TSP::Reference* add_series_theme_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      series_theme_styles() const;

  // repeated .TSP.Reference paragraph_styles = 20;
  int paragraph_styles_size() const;
  private:
  int _internal_paragraph_styles_size() const;
  public:
  void clear_paragraph_styles();
  ::TSP::Reference* mutable_paragraph_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_paragraph_styles();
  private:
  const ::TSP::Reference& _internal_paragraph_styles(int index) const;
  ::TSP::Reference* _internal_add_paragraph_styles();
  public:
  const ::TSP::Reference& paragraph_styles(int index) const;
  ::TSP::Reference* add_paragraph_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      paragraph_styles() const;

  // optional .TSCH.RectArchive legend_frame = 3;
  bool has_legend_frame() const;
  private:
  bool _internal_has_legend_frame() const;
  public:
  void clear_legend_frame();
  const ::TSCH::RectArchive& legend_frame() const;
  PROTOBUF_NODISCARD ::TSCH::RectArchive* release_legend_frame();
  ::TSCH::RectArchive* mutable_legend_frame();
  void set_allocated_legend_frame(::TSCH::RectArchive* legend_frame);
  private:
  const ::TSCH::RectArchive& _internal_legend_frame() const;
  ::TSCH::RectArchive* _internal_mutable_legend_frame();
  public:
  void unsafe_arena_set_allocated_legend_frame(
      ::TSCH::RectArchive* legend_frame);
  ::TSCH::RectArchive* unsafe_arena_release_legend_frame();

  // optional .TSP.Reference preset = 4;
  bool has_preset() const;
  private:
  bool _internal_has_preset() const;
  public:
  void clear_preset();
  const ::TSP::Reference& preset() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_preset();
  ::TSP::Reference* mutable_preset();
  void set_allocated_preset(::TSP::Reference* preset);
  private:
  const ::TSP::Reference& _internal_preset() const;
  ::TSP::Reference* _internal_mutable_preset();
  public:
  void unsafe_arena_set_allocated_preset(
      ::TSP::Reference* preset);
  ::TSP::Reference* unsafe_arena_release_preset();

  // optional .TSCH.ChartGridArchive grid = 7;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::TSCH::ChartGridArchive& grid() const;
  PROTOBUF_NODISCARD ::TSCH::ChartGridArchive* release_grid();
  ::TSCH::ChartGridArchive* mutable_grid();
  void set_allocated_grid(::TSCH::ChartGridArchive* grid);
  private:
  const ::TSCH::ChartGridArchive& _internal_grid() const;
  ::TSCH::ChartGridArchive* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::TSCH::ChartGridArchive* grid);
  ::TSCH::ChartGridArchive* unsafe_arena_release_grid();

  // optional .TSP.Reference mediator = 8;
  bool has_mediator() const;
  private:
  bool _internal_has_mediator() const;
  public:
  void clear_mediator();
  const ::TSP::Reference& mediator() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_mediator();
  ::TSP::Reference* mutable_mediator();
  void set_allocated_mediator(::TSP::Reference* mediator);
  private:
  const ::TSP::Reference& _internal_mediator() const;
  ::TSP::Reference* _internal_mutable_mediator();
  public:
  void unsafe_arena_set_allocated_mediator(
      ::TSP::Reference* mediator);
  ::TSP::Reference* unsafe_arena_release_mediator();

  // optional .TSP.Reference chart_style = 9;
  bool has_chart_style() const;
  private:
  bool _internal_has_chart_style() const;
  public:
  void clear_chart_style();
  const ::TSP::Reference& chart_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_style();
  ::TSP::Reference* mutable_chart_style();
  void set_allocated_chart_style(::TSP::Reference* chart_style);
  private:
  const ::TSP::Reference& _internal_chart_style() const;
  ::TSP::Reference* _internal_mutable_chart_style();
  public:
  void unsafe_arena_set_allocated_chart_style(
      ::TSP::Reference* chart_style);
  ::TSP::Reference* unsafe_arena_release_chart_style();

  // optional .TSP.Reference chart_non_style = 10;
  bool has_chart_non_style() const;
  private:
  bool _internal_has_chart_non_style() const;
  public:
  void clear_chart_non_style();
  const ::TSP::Reference& chart_non_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_non_style();
  ::TSP::Reference* mutable_chart_non_style();
  void set_allocated_chart_non_style(::TSP::Reference* chart_non_style);
  private:
  const ::TSP::Reference& _internal_chart_non_style() const;
  ::TSP::Reference* _internal_mutable_chart_non_style();
  public:
  void unsafe_arena_set_allocated_chart_non_style(
      ::TSP::Reference* chart_non_style);
  ::TSP::Reference* unsafe_arena_release_chart_non_style();

  // optional .TSP.Reference legend_style = 11;
  bool has_legend_style() const;
  private:
  bool _internal_has_legend_style() const;
  public:
  void clear_legend_style();
  const ::TSP::Reference& legend_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_legend_style();
  ::TSP::Reference* mutable_legend_style();
  void set_allocated_legend_style(::TSP::Reference* legend_style);
  private:
  const ::TSP::Reference& _internal_legend_style() const;
  ::TSP::Reference* _internal_mutable_legend_style();
  public:
  void unsafe_arena_set_allocated_legend_style(
      ::TSP::Reference* legend_style);
  ::TSP::Reference* unsafe_arena_release_legend_style();

  // optional .TSP.Reference legend_non_style = 12;
  bool has_legend_non_style() const;
  private:
  bool _internal_has_legend_non_style() const;
  public:
  void clear_legend_non_style();
  const ::TSP::Reference& legend_non_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_legend_non_style();
  ::TSP::Reference* mutable_legend_non_style();
  void set_allocated_legend_non_style(::TSP::Reference* legend_non_style);
  private:
  const ::TSP::Reference& _internal_legend_non_style() const;
  ::TSP::Reference* _internal_mutable_legend_non_style();
  public:
  void unsafe_arena_set_allocated_legend_non_style(
      ::TSP::Reference* legend_non_style);
  ::TSP::Reference* unsafe_arena_release_legend_non_style();

  // optional .TSP.SparseReferenceArray series_private_styles = 18;
  bool has_series_private_styles() const;
  private:
  bool _internal_has_series_private_styles() const;
  public:
  void clear_series_private_styles();
  const ::TSP::SparseReferenceArray& series_private_styles() const;
  PROTOBUF_NODISCARD ::TSP::SparseReferenceArray* release_series_private_styles();
  ::TSP::SparseReferenceArray* mutable_series_private_styles();
  void set_allocated_series_private_styles(::TSP::SparseReferenceArray* series_private_styles);
  private:
  const ::TSP::SparseReferenceArray& _internal_series_private_styles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_series_private_styles();
  public:
  void unsafe_arena_set_allocated_series_private_styles(
      ::TSP::SparseReferenceArray* series_private_styles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_series_private_styles();

  // optional .TSP.SparseReferenceArray series_non_styles = 19;
  bool has_series_non_styles() const;
  private:
  bool _internal_has_series_non_styles() const;
  public:
  void clear_series_non_styles();
  const ::TSP::SparseReferenceArray& series_non_styles() const;
  PROTOBUF_NODISCARD ::TSP::SparseReferenceArray* release_series_non_styles();
  ::TSP::SparseReferenceArray* mutable_series_non_styles();
  void set_allocated_series_non_styles(::TSP::SparseReferenceArray* series_non_styles);
  private:
  const ::TSP::SparseReferenceArray& _internal_series_non_styles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_series_non_styles();
  public:
  void unsafe_arena_set_allocated_series_non_styles(
      ::TSP::SparseReferenceArray* series_non_styles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_series_non_styles();

  // optional .TSP.Reference owned_preset = 23;
  bool has_owned_preset() const;
  private:
  bool _internal_has_owned_preset() const;
  public:
  void clear_owned_preset();
  const ::TSP::Reference& owned_preset() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_owned_preset();
  ::TSP::Reference* mutable_owned_preset();
  void set_allocated_owned_preset(::TSP::Reference* owned_preset);
  private:
  const ::TSP::Reference& _internal_owned_preset() const;
  ::TSP::Reference* _internal_mutable_owned_preset();
  public:
  void unsafe_arena_set_allocated_owned_preset(
      ::TSP::Reference* owned_preset);
  ::TSP::Reference* unsafe_arena_release_owned_preset();

  // optional .TSCH.ChartType chart_type = 1;
  bool has_chart_type() const;
  private:
  bool _internal_has_chart_type() const;
  public:
  void clear_chart_type();
  ::TSCH::ChartType chart_type() const;
  void set_chart_type(::TSCH::ChartType value);
  private:
  ::TSCH::ChartType _internal_chart_type() const;
  void _internal_set_chart_type(::TSCH::ChartType value);
  public:

  // optional .TSCH.ScatterFormat scatter_format = 2;
  bool has_scatter_format() const;
  private:
  bool _internal_has_scatter_format() const;
  public:
  void clear_scatter_format();
  ::TSCH::ScatterFormat scatter_format() const;
  void set_scatter_format(::TSCH::ScatterFormat value);
  private:
  ::TSCH::ScatterFormat _internal_scatter_format() const;
  void _internal_set_scatter_format(::TSCH::ScatterFormat value);
  public:

  // optional .TSCH.SeriesDirection series_direction = 5;
  bool has_series_direction() const;
  private:
  bool _internal_has_series_direction() const;
  public:
  void clear_series_direction();
  ::TSCH::SeriesDirection series_direction() const;
  void set_series_direction(::TSCH::SeriesDirection value);
  private:
  ::TSCH::SeriesDirection _internal_series_direction() const;
  void _internal_set_series_direction(::TSCH::SeriesDirection value);
  public:

  // optional bool contains_default_data = 6;
  bool has_contains_default_data() const;
  private:
  bool _internal_has_contains_default_data() const;
  public:
  void clear_contains_default_data();
  bool contains_default_data() const;
  void set_contains_default_data(bool value);
  private:
  bool _internal_contains_default_data() const;
  void _internal_set_contains_default_data(bool value);
  public:

  // optional bool needs_calc_engine_deferred_import_action = 22;
  bool has_needs_calc_engine_deferred_import_action() const;
  private:
  bool _internal_has_needs_calc_engine_deferred_import_action() const;
  public:
  void clear_needs_calc_engine_deferred_import_action();
  bool needs_calc_engine_deferred_import_action() const;
  void set_needs_calc_engine_deferred_import_action(bool value);
  private:
  bool _internal_needs_calc_engine_deferred_import_action() const;
  void _internal_set_needs_calc_engine_deferred_import_action(bool value);
  public:

  // optional bool is_dirty = 24;
  bool has_is_dirty() const;
  private:
  bool _internal_has_is_dirty() const;
  public:
  void clear_is_dirty();
  bool is_dirty() const;
  void set_is_dirty(bool value);
  private:
  bool _internal_is_dirty() const;
  void _internal_set_is_dirty(bool value);
  public:

  // optional uint32 multidataset_index = 21;
  bool has_multidataset_index() const;
  private:
  bool _internal_has_multidataset_index() const;
  public:
  void clear_multidataset_index();
  uint32_t multidataset_index() const;
  void set_multidataset_index(uint32_t value);
  private:
  uint32_t _internal_multidataset_index() const;
  void _internal_set_multidataset_index(uint32_t value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  static const int kUnityFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartDrawableArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartArchive >, 11, false >
    unity;
  // @@protoc_insertion_point(class_scope:TSCH.ChartArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > value_axis_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > value_axis_nonstyles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > category_axis_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > category_axis_nonstyles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > series_theme_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > paragraph_styles_;
    ::TSCH::RectArchive* legend_frame_;
    ::TSP::Reference* preset_;
    ::TSCH::ChartGridArchive* grid_;
    ::TSP::Reference* mediator_;
    ::TSP::Reference* chart_style_;
    ::TSP::Reference* chart_non_style_;
    ::TSP::Reference* legend_style_;
    ::TSP::Reference* legend_non_style_;
    ::TSP::SparseReferenceArray* series_private_styles_;
    ::TSP::SparseReferenceArray* series_non_styles_;
    ::TSP::Reference* owned_preset_;
    int chart_type_;
    int scatter_format_;
    int series_direction_;
    bool contains_default_data_;
    bool needs_calc_engine_deferred_import_action_;
    bool is_dirty_;
    uint32_t multidataset_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartMultiDataIndexUpgrade final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TSCH.ChartMultiDataIndexUpgrade) */ {
 public:
  inline ChartMultiDataIndexUpgrade() : ChartMultiDataIndexUpgrade(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ChartMultiDataIndexUpgrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartMultiDataIndexUpgrade(const ChartMultiDataIndexUpgrade& from);
  ChartMultiDataIndexUpgrade(ChartMultiDataIndexUpgrade&& from) noexcept
    : ChartMultiDataIndexUpgrade() {
    *this = ::std::move(from);
  }

  inline ChartMultiDataIndexUpgrade& operator=(const ChartMultiDataIndexUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartMultiDataIndexUpgrade& operator=(ChartMultiDataIndexUpgrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartMultiDataIndexUpgrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartMultiDataIndexUpgrade* internal_default_instance() {
    return reinterpret_cast<const ChartMultiDataIndexUpgrade*>(
               &_ChartMultiDataIndexUpgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChartMultiDataIndexUpgrade& a, ChartMultiDataIndexUpgrade& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartMultiDataIndexUpgrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartMultiDataIndexUpgrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartMultiDataIndexUpgrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartMultiDataIndexUpgrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChartMultiDataIndexUpgrade& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChartMultiDataIndexUpgrade& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartMultiDataIndexUpgrade";
  }
  protected:
  explicit ChartMultiDataIndexUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kUpgradedToUiStateFieldNumber = 10021;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    upgraded_to_ui_state;
  // @@protoc_insertion_point(class_scope:TSCH.ChartMultiDataIndexUpgrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartGarlicMinMaxUpgrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartGarlicMinMaxUpgrade) */ {
 public:
  inline ChartGarlicMinMaxUpgrade() : ChartGarlicMinMaxUpgrade(nullptr) {}
  ~ChartGarlicMinMaxUpgrade() override;
  explicit PROTOBUF_CONSTEXPR ChartGarlicMinMaxUpgrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartGarlicMinMaxUpgrade(const ChartGarlicMinMaxUpgrade& from);
  ChartGarlicMinMaxUpgrade(ChartGarlicMinMaxUpgrade&& from) noexcept
    : ChartGarlicMinMaxUpgrade() {
    *this = ::std::move(from);
  }

  inline ChartGarlicMinMaxUpgrade& operator=(const ChartGarlicMinMaxUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartGarlicMinMaxUpgrade& operator=(ChartGarlicMinMaxUpgrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartGarlicMinMaxUpgrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartGarlicMinMaxUpgrade* internal_default_instance() {
    return reinterpret_cast<const ChartGarlicMinMaxUpgrade*>(
               &_ChartGarlicMinMaxUpgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChartGarlicMinMaxUpgrade& a, ChartGarlicMinMaxUpgrade& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartGarlicMinMaxUpgrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartGarlicMinMaxUpgrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartGarlicMinMaxUpgrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartGarlicMinMaxUpgrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartGarlicMinMaxUpgrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartGarlicMinMaxUpgrade& from) {
    ChartGarlicMinMaxUpgrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartGarlicMinMaxUpgrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartGarlicMinMaxUpgrade";
  }
  protected:
  explicit ChartGarlicMinMaxUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHorizontalMinFieldNumber = 1,
    kHorizontalMaxFieldNumber = 2,
    kValueMinFieldNumber = 3,
    kValueMaxFieldNumber = 4,
  };
  // optional double horizontal_min = 1;
  bool has_horizontal_min() const;
  private:
  bool _internal_has_horizontal_min() const;
  public:
  void clear_horizontal_min();
  double horizontal_min() const;
  void set_horizontal_min(double value);
  private:
  double _internal_horizontal_min() const;
  void _internal_set_horizontal_min(double value);
  public:

  // optional double horizontal_max = 2;
  bool has_horizontal_max() const;
  private:
  bool _internal_has_horizontal_max() const;
  public:
  void clear_horizontal_max();
  double horizontal_max() const;
  void set_horizontal_max(double value);
  private:
  double _internal_horizontal_max() const;
  void _internal_set_horizontal_max(double value);
  public:

  // optional double value_min = 3;
  bool has_value_min() const;
  private:
  bool _internal_has_value_min() const;
  public:
  void clear_value_min();
  double value_min() const;
  void set_value_min(double value);
  private:
  double _internal_value_min() const;
  void _internal_set_value_min(double value);
  public:

  // optional double value_max = 4;
  bool has_value_max() const;
  private:
  bool _internal_has_value_max() const;
  public:
  void clear_value_max();
  double value_max() const;
  void set_value_max(double value);
  private:
  double _internal_value_max() const;
  void _internal_set_value_max(double value);
  public:

  static const int kGarlicMinMaxUpgradeFieldNumber = 10010;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartGarlicMinMaxUpgrade >, 11, false >
    garlic_min_max_upgrade;
  // @@protoc_insertion_point(class_scope:TSCH.ChartGarlicMinMaxUpgrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    double horizontal_min_;
    double horizontal_max_;
    double value_min_;
    double value_max_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartGarlicLabelFormatUpgrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartGarlicLabelFormatUpgrade) */ {
 public:
  inline ChartGarlicLabelFormatUpgrade() : ChartGarlicLabelFormatUpgrade(nullptr) {}
  ~ChartGarlicLabelFormatUpgrade() override;
  explicit PROTOBUF_CONSTEXPR ChartGarlicLabelFormatUpgrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartGarlicLabelFormatUpgrade(const ChartGarlicLabelFormatUpgrade& from);
  ChartGarlicLabelFormatUpgrade(ChartGarlicLabelFormatUpgrade&& from) noexcept
    : ChartGarlicLabelFormatUpgrade() {
    *this = ::std::move(from);
  }

  inline ChartGarlicLabelFormatUpgrade& operator=(const ChartGarlicLabelFormatUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartGarlicLabelFormatUpgrade& operator=(ChartGarlicLabelFormatUpgrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartGarlicLabelFormatUpgrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartGarlicLabelFormatUpgrade* internal_default_instance() {
    return reinterpret_cast<const ChartGarlicLabelFormatUpgrade*>(
               &_ChartGarlicLabelFormatUpgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChartGarlicLabelFormatUpgrade& a, ChartGarlicLabelFormatUpgrade& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartGarlicLabelFormatUpgrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartGarlicLabelFormatUpgrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartGarlicLabelFormatUpgrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartGarlicLabelFormatUpgrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartGarlicLabelFormatUpgrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartGarlicLabelFormatUpgrade& from) {
    ChartGarlicLabelFormatUpgrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartGarlicLabelFormatUpgrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartGarlicLabelFormatUpgrade";
  }
  protected:
  explicit ChartGarlicLabelFormatUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuePrefixFieldNumber = 1,
    kValueSuffixFieldNumber = 2,
    kHorizontalPrefixFieldNumber = 4,
    kHorizontalSuffixFieldNumber = 5,
    kValueUseSeparatorFieldNumber = 3,
    kHorizontalUseSeparatorFieldNumber = 6,
  };
  // optional string value_prefix = 1;
  bool has_value_prefix() const;
  private:
  bool _internal_has_value_prefix() const;
  public:
  void clear_value_prefix();
  const std::string& value_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_prefix();
  PROTOBUF_NODISCARD std::string* release_value_prefix();
  void set_allocated_value_prefix(std::string* value_prefix);
  private:
  const std::string& _internal_value_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_prefix(const std::string& value);
  std::string* _internal_mutable_value_prefix();
  public:

  // optional string value_suffix = 2;
  bool has_value_suffix() const;
  private:
  bool _internal_has_value_suffix() const;
  public:
  void clear_value_suffix();
  const std::string& value_suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_suffix();
  PROTOBUF_NODISCARD std::string* release_value_suffix();
  void set_allocated_value_suffix(std::string* value_suffix);
  private:
  const std::string& _internal_value_suffix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_suffix(const std::string& value);
  std::string* _internal_mutable_value_suffix();
  public:

  // optional string horizontal_prefix = 4;
  bool has_horizontal_prefix() const;
  private:
  bool _internal_has_horizontal_prefix() const;
  public:
  void clear_horizontal_prefix();
  const std::string& horizontal_prefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_horizontal_prefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_horizontal_prefix();
  PROTOBUF_NODISCARD std::string* release_horizontal_prefix();
  void set_allocated_horizontal_prefix(std::string* horizontal_prefix);
  private:
  const std::string& _internal_horizontal_prefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_horizontal_prefix(const std::string& value);
  std::string* _internal_mutable_horizontal_prefix();
  public:

  // optional string horizontal_suffix = 5;
  bool has_horizontal_suffix() const;
  private:
  bool _internal_has_horizontal_suffix() const;
  public:
  void clear_horizontal_suffix();
  const std::string& horizontal_suffix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_horizontal_suffix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_horizontal_suffix();
  PROTOBUF_NODISCARD std::string* release_horizontal_suffix();
  void set_allocated_horizontal_suffix(std::string* horizontal_suffix);
  private:
  const std::string& _internal_horizontal_suffix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_horizontal_suffix(const std::string& value);
  std::string* _internal_mutable_horizontal_suffix();
  public:

  // optional bool value_use_separator = 3;
  bool has_value_use_separator() const;
  private:
  bool _internal_has_value_use_separator() const;
  public:
  void clear_value_use_separator();
  bool value_use_separator() const;
  void set_value_use_separator(bool value);
  private:
  bool _internal_value_use_separator() const;
  void _internal_set_value_use_separator(bool value);
  public:

  // optional bool horizontal_use_separator = 6;
  bool has_horizontal_use_separator() const;
  private:
  bool _internal_has_horizontal_use_separator() const;
  public:
  void clear_horizontal_use_separator();
  bool horizontal_use_separator() const;
  void set_horizontal_use_separator(bool value);
  private:
  bool _internal_horizontal_use_separator() const;
  void _internal_set_horizontal_use_separator(bool value);
  public:

  static const int kGarlicLabelFormatUpgradeFieldNumber = 10011;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartGarlicLabelFormatUpgrade >, 11, false >
    garlic_label_format_upgrade;
  // @@protoc_insertion_point(class_scope:TSCH.ChartGarlicLabelFormatUpgrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_suffix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr horizontal_prefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr horizontal_suffix_;
    bool value_use_separator_;
    bool horizontal_use_separator_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartPasteboardAdditionsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TSCH.ChartPasteboardAdditionsArchive) */ {
 public:
  inline ChartPasteboardAdditionsArchive() : ChartPasteboardAdditionsArchive(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ChartPasteboardAdditionsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartPasteboardAdditionsArchive(const ChartPasteboardAdditionsArchive& from);
  ChartPasteboardAdditionsArchive(ChartPasteboardAdditionsArchive&& from) noexcept
    : ChartPasteboardAdditionsArchive() {
    *this = ::std::move(from);
  }

  inline ChartPasteboardAdditionsArchive& operator=(const ChartPasteboardAdditionsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartPasteboardAdditionsArchive& operator=(ChartPasteboardAdditionsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartPasteboardAdditionsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartPasteboardAdditionsArchive* internal_default_instance() {
    return reinterpret_cast<const ChartPasteboardAdditionsArchive*>(
               &_ChartPasteboardAdditionsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ChartPasteboardAdditionsArchive& a, ChartPasteboardAdditionsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartPasteboardAdditionsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartPasteboardAdditionsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartPasteboardAdditionsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartPasteboardAdditionsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChartPasteboardAdditionsArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChartPasteboardAdditionsArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartPasteboardAdditionsArchive";
  }
  protected:
  explicit ChartPasteboardAdditionsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kPresetIndexForPasteboardFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< uint32_t >, 13, false >
    preset_index_for_pasteboard;
  static const int kPresetUuidForPasteboardFieldNumber = 10001;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 12, false >
    preset_uuid_for_pasteboard;
  static const int kCustomFormatListForPasteboardFieldNumber = 10003;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSP::Reference >, 11, false >
    custom_format_list_for_pasteboard;
  // @@protoc_insertion_point(class_scope:TSCH.ChartPasteboardAdditionsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartPreserveAppearanceForPresetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TSCH.ChartPreserveAppearanceForPresetArchive) */ {
 public:
  inline ChartPreserveAppearanceForPresetArchive() : ChartPreserveAppearanceForPresetArchive(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ChartPreserveAppearanceForPresetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartPreserveAppearanceForPresetArchive(const ChartPreserveAppearanceForPresetArchive& from);
  ChartPreserveAppearanceForPresetArchive(ChartPreserveAppearanceForPresetArchive&& from) noexcept
    : ChartPreserveAppearanceForPresetArchive() {
    *this = ::std::move(from);
  }

  inline ChartPreserveAppearanceForPresetArchive& operator=(const ChartPreserveAppearanceForPresetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartPreserveAppearanceForPresetArchive& operator=(ChartPreserveAppearanceForPresetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartPreserveAppearanceForPresetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartPreserveAppearanceForPresetArchive* internal_default_instance() {
    return reinterpret_cast<const ChartPreserveAppearanceForPresetArchive*>(
               &_ChartPreserveAppearanceForPresetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ChartPreserveAppearanceForPresetArchive& a, ChartPreserveAppearanceForPresetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartPreserveAppearanceForPresetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartPreserveAppearanceForPresetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartPreserveAppearanceForPresetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartPreserveAppearanceForPresetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChartPreserveAppearanceForPresetArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChartPreserveAppearanceForPresetArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartPreserveAppearanceForPresetArchive";
  }
  protected:
  explicit ChartPreserveAppearanceForPresetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kAppearancePreservedForPresetFieldNumber = 10023;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    appearance_preserved_for_preset;
  // @@protoc_insertion_point(class_scope:TSCH.ChartPreserveAppearanceForPresetArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSupportsProportionalBendedCalloutLinesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive) */ {
 public:
  inline ChartSupportsProportionalBendedCalloutLinesArchive() : ChartSupportsProportionalBendedCalloutLinesArchive(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ChartSupportsProportionalBendedCalloutLinesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSupportsProportionalBendedCalloutLinesArchive(const ChartSupportsProportionalBendedCalloutLinesArchive& from);
  ChartSupportsProportionalBendedCalloutLinesArchive(ChartSupportsProportionalBendedCalloutLinesArchive&& from) noexcept
    : ChartSupportsProportionalBendedCalloutLinesArchive() {
    *this = ::std::move(from);
  }

  inline ChartSupportsProportionalBendedCalloutLinesArchive& operator=(const ChartSupportsProportionalBendedCalloutLinesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSupportsProportionalBendedCalloutLinesArchive& operator=(ChartSupportsProportionalBendedCalloutLinesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSupportsProportionalBendedCalloutLinesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSupportsProportionalBendedCalloutLinesArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSupportsProportionalBendedCalloutLinesArchive*>(
               &_ChartSupportsProportionalBendedCalloutLinesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ChartSupportsProportionalBendedCalloutLinesArchive& a, ChartSupportsProportionalBendedCalloutLinesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSupportsProportionalBendedCalloutLinesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSupportsProportionalBendedCalloutLinesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSupportsProportionalBendedCalloutLinesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSupportsProportionalBendedCalloutLinesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChartSupportsProportionalBendedCalloutLinesArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChartSupportsProportionalBendedCalloutLinesArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSupportsProportionalBendedCalloutLinesArchive";
  }
  protected:
  explicit ChartSupportsProportionalBendedCalloutLinesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kSupportsProportionalBendedCalloutLinesFieldNumber = 10024;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    supports_proportional_bended_callout_lines;
  // @@protoc_insertion_point(class_scope:TSCH.ChartSupportsProportionalBendedCalloutLinesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSupportsRoundedCornersArchive final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TSCH.ChartSupportsRoundedCornersArchive) */ {
 public:
  inline ChartSupportsRoundedCornersArchive() : ChartSupportsRoundedCornersArchive(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ChartSupportsRoundedCornersArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSupportsRoundedCornersArchive(const ChartSupportsRoundedCornersArchive& from);
  ChartSupportsRoundedCornersArchive(ChartSupportsRoundedCornersArchive&& from) noexcept
    : ChartSupportsRoundedCornersArchive() {
    *this = ::std::move(from);
  }

  inline ChartSupportsRoundedCornersArchive& operator=(const ChartSupportsRoundedCornersArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSupportsRoundedCornersArchive& operator=(ChartSupportsRoundedCornersArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSupportsRoundedCornersArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSupportsRoundedCornersArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSupportsRoundedCornersArchive*>(
               &_ChartSupportsRoundedCornersArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ChartSupportsRoundedCornersArchive& a, ChartSupportsRoundedCornersArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSupportsRoundedCornersArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSupportsRoundedCornersArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSupportsRoundedCornersArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSupportsRoundedCornersArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChartSupportsRoundedCornersArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChartSupportsRoundedCornersArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSupportsRoundedCornersArchive";
  }
  protected:
  explicit ChartSupportsRoundedCornersArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kDeprecatedSupportsRoundedCornersFieldNumber = 10025;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    deprecated_supports_rounded_corners;
  static const int kSupportsRoundedCornersFieldNumber = 10026;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    supports_rounded_corners;
  // @@protoc_insertion_point(class_scope:TSCH.ChartSupportsRoundedCornersArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSupportsSeriesPropertySpacingArchive final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TSCH.ChartSupportsSeriesPropertySpacingArchive) */ {
 public:
  inline ChartSupportsSeriesPropertySpacingArchive() : ChartSupportsSeriesPropertySpacingArchive(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ChartSupportsSeriesPropertySpacingArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSupportsSeriesPropertySpacingArchive(const ChartSupportsSeriesPropertySpacingArchive& from);
  ChartSupportsSeriesPropertySpacingArchive(ChartSupportsSeriesPropertySpacingArchive&& from) noexcept
    : ChartSupportsSeriesPropertySpacingArchive() {
    *this = ::std::move(from);
  }

  inline ChartSupportsSeriesPropertySpacingArchive& operator=(const ChartSupportsSeriesPropertySpacingArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSupportsSeriesPropertySpacingArchive& operator=(ChartSupportsSeriesPropertySpacingArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSupportsSeriesPropertySpacingArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSupportsSeriesPropertySpacingArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSupportsSeriesPropertySpacingArchive*>(
               &_ChartSupportsSeriesPropertySpacingArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ChartSupportsSeriesPropertySpacingArchive& a, ChartSupportsSeriesPropertySpacingArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSupportsSeriesPropertySpacingArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSupportsSeriesPropertySpacingArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSupportsSeriesPropertySpacingArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSupportsSeriesPropertySpacingArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChartSupportsSeriesPropertySpacingArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChartSupportsSeriesPropertySpacingArchive& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSupportsSeriesPropertySpacingArchive";
  }
  protected:
  explicit ChartSupportsSeriesPropertySpacingArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kSupportsSeriesValueLabelSpacingFieldNumber = 10027;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    supports_series_value_label_spacing;
  static const int kSupportsSeriesErrorBarSpacingFieldNumber = 10028;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    supports_series_error_bar_spacing;
  // @@protoc_insertion_point(class_scope:TSCH.ChartSupportsSeriesPropertySpacingArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartGridArchive_ChartGridRowColumnIdMap_Entry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry) */ {
 public:
  inline ChartGridArchive_ChartGridRowColumnIdMap_Entry() : ChartGridArchive_ChartGridRowColumnIdMap_Entry(nullptr) {}
  ~ChartGridArchive_ChartGridRowColumnIdMap_Entry() override;
  explicit PROTOBUF_CONSTEXPR ChartGridArchive_ChartGridRowColumnIdMap_Entry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartGridArchive_ChartGridRowColumnIdMap_Entry(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from);
  ChartGridArchive_ChartGridRowColumnIdMap_Entry(ChartGridArchive_ChartGridRowColumnIdMap_Entry&& from) noexcept
    : ChartGridArchive_ChartGridRowColumnIdMap_Entry() {
    *this = ::std::move(from);
  }

  inline ChartGridArchive_ChartGridRowColumnIdMap_Entry& operator=(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartGridArchive_ChartGridRowColumnIdMap_Entry& operator=(ChartGridArchive_ChartGridRowColumnIdMap_Entry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartGridArchive_ChartGridRowColumnIdMap_Entry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartGridArchive_ChartGridRowColumnIdMap_Entry* internal_default_instance() {
    return reinterpret_cast<const ChartGridArchive_ChartGridRowColumnIdMap_Entry*>(
               &_ChartGridArchive_ChartGridRowColumnIdMap_Entry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChartGridArchive_ChartGridRowColumnIdMap_Entry& a, ChartGridArchive_ChartGridRowColumnIdMap_Entry& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartGridArchive_ChartGridRowColumnIdMap_Entry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartGridArchive_ChartGridRowColumnIdMap_Entry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartGridArchive_ChartGridRowColumnIdMap_Entry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartGridArchive_ChartGridRowColumnIdMap_Entry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartGridArchive_ChartGridRowColumnIdMap_Entry& from) {
    ChartGridArchive_ChartGridRowColumnIdMap_Entry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartGridArchive_ChartGridRowColumnIdMap_Entry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry";
  }
  protected:
  explicit ChartGridArchive_ChartGridRowColumnIdMap_Entry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // required string uniqueId = 1;
  bool has_uniqueid() const;
  private:
  bool _internal_has_uniqueid() const;
  public:
  void clear_uniqueid();
  const std::string& uniqueid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uniqueid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uniqueid();
  PROTOBUF_NODISCARD std::string* release_uniqueid();
  void set_allocated_uniqueid(std::string* uniqueid);
  private:
  const std::string& _internal_uniqueid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uniqueid(const std::string& value);
  std::string* _internal_mutable_uniqueid();
  public:

  // required uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uniqueid_;
    uint32_t index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartGridArchive_ChartGridRowColumnIdMap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartGridArchive.ChartGridRowColumnIdMap) */ {
 public:
  inline ChartGridArchive_ChartGridRowColumnIdMap() : ChartGridArchive_ChartGridRowColumnIdMap(nullptr) {}
  ~ChartGridArchive_ChartGridRowColumnIdMap() override;
  explicit PROTOBUF_CONSTEXPR ChartGridArchive_ChartGridRowColumnIdMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartGridArchive_ChartGridRowColumnIdMap(const ChartGridArchive_ChartGridRowColumnIdMap& from);
  ChartGridArchive_ChartGridRowColumnIdMap(ChartGridArchive_ChartGridRowColumnIdMap&& from) noexcept
    : ChartGridArchive_ChartGridRowColumnIdMap() {
    *this = ::std::move(from);
  }

  inline ChartGridArchive_ChartGridRowColumnIdMap& operator=(const ChartGridArchive_ChartGridRowColumnIdMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartGridArchive_ChartGridRowColumnIdMap& operator=(ChartGridArchive_ChartGridRowColumnIdMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartGridArchive_ChartGridRowColumnIdMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartGridArchive_ChartGridRowColumnIdMap* internal_default_instance() {
    return reinterpret_cast<const ChartGridArchive_ChartGridRowColumnIdMap*>(
               &_ChartGridArchive_ChartGridRowColumnIdMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChartGridArchive_ChartGridRowColumnIdMap& a, ChartGridArchive_ChartGridRowColumnIdMap& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartGridArchive_ChartGridRowColumnIdMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartGridArchive_ChartGridRowColumnIdMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartGridArchive_ChartGridRowColumnIdMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartGridArchive_ChartGridRowColumnIdMap>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartGridArchive_ChartGridRowColumnIdMap& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartGridArchive_ChartGridRowColumnIdMap& from) {
    ChartGridArchive_ChartGridRowColumnIdMap::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartGridArchive_ChartGridRowColumnIdMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartGridArchive.ChartGridRowColumnIdMap";
  }
  protected:
  explicit ChartGridArchive_ChartGridRowColumnIdMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChartGridArchive_ChartGridRowColumnIdMap_Entry Entry;

  // accessors -------------------------------------------------------

  enum : int {
    kRowIdMapFieldNumber = 1,
    kColumnIdMapFieldNumber = 2,
  };
  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
  int row_id_map_size() const;
  private:
  int _internal_row_id_map_size() const;
  public:
  void clear_row_id_map();
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* mutable_row_id_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >*
      mutable_row_id_map();
  private:
  const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& _internal_row_id_map(int index) const;
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* _internal_add_row_id_map();
  public:
  const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& row_id_map(int index) const;
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* add_row_id_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >&
      row_id_map() const;

  // repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
  int column_id_map_size() const;
  private:
  int _internal_column_id_map_size() const;
  public:
  void clear_column_id_map();
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* mutable_column_id_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >*
      mutable_column_id_map();
  private:
  const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& _internal_column_id_map(int index) const;
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* _internal_add_column_id_map();
  public:
  const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& column_id_map(int index) const;
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* add_column_id_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >&
      column_id_map() const;

  // @@protoc_insertion_point(class_scope:TSCH.ChartGridArchive.ChartGridRowColumnIdMap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry > row_id_map_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry > column_id_map_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartGridArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartGridArchive) */ {
 public:
  inline ChartGridArchive() : ChartGridArchive(nullptr) {}
  ~ChartGridArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartGridArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartGridArchive(const ChartGridArchive& from);
  ChartGridArchive(ChartGridArchive&& from) noexcept
    : ChartGridArchive() {
    *this = ::std::move(from);
  }

  inline ChartGridArchive& operator=(const ChartGridArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartGridArchive& operator=(ChartGridArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartGridArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartGridArchive* internal_default_instance() {
    return reinterpret_cast<const ChartGridArchive*>(
               &_ChartGridArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ChartGridArchive& a, ChartGridArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartGridArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartGridArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartGridArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartGridArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartGridArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartGridArchive& from) {
    ChartGridArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartGridArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartGridArchive";
  }
  protected:
  explicit ChartGridArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChartGridArchive_ChartGridRowColumnIdMap ChartGridRowColumnIdMap;

  // accessors -------------------------------------------------------

  enum : int {
    kRowNameFieldNumber = 1,
    kColumnNameFieldNumber = 2,
    kGridRowFieldNumber = 3,
    kIdMapFieldNumber = 4,
  };
  // repeated string row_name = 1;
  int row_name_size() const;
  private:
  int _internal_row_name_size() const;
  public:
  void clear_row_name();
  const std::string& row_name(int index) const;
  std::string* mutable_row_name(int index);
  void set_row_name(int index, const std::string& value);
  void set_row_name(int index, std::string&& value);
  void set_row_name(int index, const char* value);
  void set_row_name(int index, const char* value, size_t size);
  std::string* add_row_name();
  void add_row_name(const std::string& value);
  void add_row_name(std::string&& value);
  void add_row_name(const char* value);
  void add_row_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& row_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_row_name();
  private:
  const std::string& _internal_row_name(int index) const;
  std::string* _internal_add_row_name();
  public:

  // repeated string column_name = 2;
  int column_name_size() const;
  private:
  int _internal_column_name_size() const;
  public:
  void clear_column_name();
  const std::string& column_name(int index) const;
  std::string* mutable_column_name(int index);
  void set_column_name(int index, const std::string& value);
  void set_column_name(int index, std::string&& value);
  void set_column_name(int index, const char* value);
  void set_column_name(int index, const char* value, size_t size);
  std::string* add_column_name();
  void add_column_name(const std::string& value);
  void add_column_name(std::string&& value);
  void add_column_name(const char* value);
  void add_column_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& column_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_column_name();
  private:
  const std::string& _internal_column_name(int index) const;
  std::string* _internal_add_column_name();
  public:

  // repeated .TSCH.GridRow grid_row = 3;
  int grid_row_size() const;
  private:
  int _internal_grid_row_size() const;
  public:
  void clear_grid_row();
  ::TSCH::GridRow* mutable_grid_row(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >*
      mutable_grid_row();
  private:
  const ::TSCH::GridRow& _internal_grid_row(int index) const;
  ::TSCH::GridRow* _internal_add_grid_row();
  public:
  const ::TSCH::GridRow& grid_row(int index) const;
  ::TSCH::GridRow* add_grid_row();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >&
      grid_row() const;

  // optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
  bool has_idmap() const;
  private:
  bool _internal_has_idmap() const;
  public:
  void clear_idmap();
  const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap& idmap() const;
  PROTOBUF_NODISCARD ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* release_idmap();
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* mutable_idmap();
  void set_allocated_idmap(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* idmap);
  private:
  const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap& _internal_idmap() const;
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* _internal_mutable_idmap();
  public:
  void unsafe_arena_set_allocated_idmap(
      ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* idmap);
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* unsafe_arena_release_idmap();

  // @@protoc_insertion_point(class_scope:TSCH.ChartGridArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> row_name_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> column_name_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow > grid_row_;
    ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* idmap_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartMediatorArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartMediatorArchive) */ {
 public:
  inline ChartMediatorArchive() : ChartMediatorArchive(nullptr) {}
  ~ChartMediatorArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartMediatorArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartMediatorArchive(const ChartMediatorArchive& from);
  ChartMediatorArchive(ChartMediatorArchive&& from) noexcept
    : ChartMediatorArchive() {
    *this = ::std::move(from);
  }

  inline ChartMediatorArchive& operator=(const ChartMediatorArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartMediatorArchive& operator=(ChartMediatorArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartMediatorArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartMediatorArchive* internal_default_instance() {
    return reinterpret_cast<const ChartMediatorArchive*>(
               &_ChartMediatorArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ChartMediatorArchive& a, ChartMediatorArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartMediatorArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartMediatorArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartMediatorArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartMediatorArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartMediatorArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartMediatorArchive& from) {
    ChartMediatorArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartMediatorArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartMediatorArchive";
  }
  protected:
  explicit ChartMediatorArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalSeriesIndexesFieldNumber = 2,
    kRemoteSeriesIndexesFieldNumber = 3,
    kInfoFieldNumber = 1,
  };
  // repeated uint32 local_series_indexes = 2;
  int local_series_indexes_size() const;
  private:
  int _internal_local_series_indexes_size() const;
  public:
  void clear_local_series_indexes();
  private:
  uint32_t _internal_local_series_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_local_series_indexes() const;
  void _internal_add_local_series_indexes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_local_series_indexes();
  public:
  uint32_t local_series_indexes(int index) const;
  void set_local_series_indexes(int index, uint32_t value);
  void add_local_series_indexes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      local_series_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_local_series_indexes();

  // repeated uint32 remote_series_indexes = 3;
  int remote_series_indexes_size() const;
  private:
  int _internal_remote_series_indexes_size() const;
  public:
  void clear_remote_series_indexes();
  private:
  uint32_t _internal_remote_series_indexes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_remote_series_indexes() const;
  void _internal_add_remote_series_indexes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_remote_series_indexes();
  public:
  uint32_t remote_series_indexes(int index) const;
  void set_remote_series_indexes(int index, uint32_t value);
  void add_remote_series_indexes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      remote_series_indexes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_remote_series_indexes();

  // optional .TSP.Reference info = 1;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::TSP::Reference& info() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_info();
  ::TSP::Reference* mutable_info();
  void set_allocated_info(::TSP::Reference* info);
  private:
  const ::TSP::Reference& _internal_info() const;
  ::TSP::Reference* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::TSP::Reference* info);
  ::TSP::Reference* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:TSCH.ChartMediatorArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > local_series_indexes_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > remote_series_indexes_;
    ::TSP::Reference* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartFillSetArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartFillSetArchive) */ {
 public:
  inline ChartFillSetArchive() : ChartFillSetArchive(nullptr) {}
  ~ChartFillSetArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartFillSetArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartFillSetArchive(const ChartFillSetArchive& from);
  ChartFillSetArchive(ChartFillSetArchive&& from) noexcept
    : ChartFillSetArchive() {
    *this = ::std::move(from);
  }

  inline ChartFillSetArchive& operator=(const ChartFillSetArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartFillSetArchive& operator=(ChartFillSetArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartFillSetArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartFillSetArchive* internal_default_instance() {
    return reinterpret_cast<const ChartFillSetArchive*>(
               &_ChartFillSetArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ChartFillSetArchive& a, ChartFillSetArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartFillSetArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartFillSetArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartFillSetArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartFillSetArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartFillSetArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartFillSetArchive& from) {
    ChartFillSetArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartFillSetArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartFillSetArchive";
  }
  protected:
  explicit ChartFillSetArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSeriesStylesFieldNumber = 4,
    kIdentifierFieldNumber = 1,
    kLookupStringFieldNumber = 2,
    kNumberOfThemeSeriesStylesFieldNumber = 3,
  };
  // repeated .TSP.Reference series_styles = 4;
  int series_styles_size() const;
  private:
  int _internal_series_styles_size() const;
  public:
  void clear_series_styles();
  ::TSP::Reference* mutable_series_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_series_styles();
  private:
  const ::TSP::Reference& _internal_series_styles(int index) const;
  ::TSP::Reference* _internal_add_series_styles();
  public:
  const ::TSP::Reference& series_styles(int index) const;
  ::TSP::Reference* add_series_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      series_styles() const;

  // required string identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // required string lookup_string = 2;
  bool has_lookup_string() const;
  private:
  bool _internal_has_lookup_string() const;
  public:
  void clear_lookup_string();
  const std::string& lookup_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lookup_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lookup_string();
  PROTOBUF_NODISCARD std::string* release_lookup_string();
  void set_allocated_lookup_string(std::string* lookup_string);
  private:
  const std::string& _internal_lookup_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lookup_string(const std::string& value);
  std::string* _internal_mutable_lookup_string();
  public:

  // optional uint32 number_of_theme_series_styles = 3;
  bool has_number_of_theme_series_styles() const;
  private:
  bool _internal_has_number_of_theme_series_styles() const;
  public:
  void clear_number_of_theme_series_styles();
  uint32_t number_of_theme_series_styles() const;
  void set_number_of_theme_series_styles(uint32_t value);
  private:
  uint32_t _internal_number_of_theme_series_styles() const;
  void _internal_set_number_of_theme_series_styles(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartFillSetArchive)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > series_styles_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lookup_string_;
    uint32_t number_of_theme_series_styles_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartStylePreset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartStylePreset) */ {
 public:
  inline ChartStylePreset() : ChartStylePreset(nullptr) {}
  ~ChartStylePreset() override;
  explicit PROTOBUF_CONSTEXPR ChartStylePreset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartStylePreset(const ChartStylePreset& from);
  ChartStylePreset(ChartStylePreset&& from) noexcept
    : ChartStylePreset() {
    *this = ::std::move(from);
  }

  inline ChartStylePreset& operator=(const ChartStylePreset& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartStylePreset& operator=(ChartStylePreset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartStylePreset& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartStylePreset* internal_default_instance() {
    return reinterpret_cast<const ChartStylePreset*>(
               &_ChartStylePreset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ChartStylePreset& a, ChartStylePreset& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartStylePreset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartStylePreset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartStylePreset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartStylePreset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartStylePreset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartStylePreset& from) {
    ChartStylePreset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartStylePreset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartStylePreset";
  }
  protected:
  explicit ChartStylePreset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueAxisStylesFieldNumber = 3,
    kCategoryAxisStylesFieldNumber = 4,
    kSeriesStylesFieldNumber = 5,
    kParagraphStylesFieldNumber = 6,
    kUuidFieldNumber = 7,
    kChartStyleFieldNumber = 1,
    kLegendStyleFieldNumber = 2,
  };
  // repeated .TSP.Reference value_axis_styles = 3;
  int value_axis_styles_size() const;
  private:
  int _internal_value_axis_styles_size() const;
  public:
  void clear_value_axis_styles();
  ::TSP::Reference* mutable_value_axis_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_value_axis_styles();
  private:
  const ::TSP::Reference& _internal_value_axis_styles(int index) const;
  ::TSP::Reference* _internal_add_value_axis_styles();
  public:
  const ::TSP::Reference& value_axis_styles(int index) const;
  ::TSP::Reference* add_value_axis_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      value_axis_styles() const;

  // repeated .TSP.Reference category_axis_styles = 4;
  int category_axis_styles_size() const;
  private:
  int _internal_category_axis_styles_size() const;
  public:
  void clear_category_axis_styles();
  ::TSP::Reference* mutable_category_axis_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_category_axis_styles();
  private:
  const ::TSP::Reference& _internal_category_axis_styles(int index) const;
  ::TSP::Reference* _internal_add_category_axis_styles();
  public:
  const ::TSP::Reference& category_axis_styles(int index) const;
  ::TSP::Reference* add_category_axis_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      category_axis_styles() const;

  // repeated .TSP.Reference series_styles = 5;
  int series_styles_size() const;
  private:
  int _internal_series_styles_size() const;
  public:
  void clear_series_styles();
  ::TSP::Reference* mutable_series_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_series_styles();
  private:
  const ::TSP::Reference& _internal_series_styles(int index) const;
  ::TSP::Reference* _internal_add_series_styles();
  public:
  const ::TSP::Reference& series_styles(int index) const;
  ::TSP::Reference* add_series_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      series_styles() const;

  // repeated .TSP.Reference paragraph_styles = 6;
  int paragraph_styles_size() const;
  private:
  int _internal_paragraph_styles_size() const;
  public:
  void clear_paragraph_styles();
  ::TSP::Reference* mutable_paragraph_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_paragraph_styles();
  private:
  const ::TSP::Reference& _internal_paragraph_styles(int index) const;
  ::TSP::Reference* _internal_add_paragraph_styles();
  public:
  const ::TSP::Reference& paragraph_styles(int index) const;
  ::TSP::Reference* add_paragraph_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      paragraph_styles() const;

  // optional bytes uuid = 7;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional .TSP.Reference chart_style = 1;
  bool has_chart_style() const;
  private:
  bool _internal_has_chart_style() const;
  public:
  void clear_chart_style();
  const ::TSP::Reference& chart_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_style();
  ::TSP::Reference* mutable_chart_style();
  void set_allocated_chart_style(::TSP::Reference* chart_style);
  private:
  const ::TSP::Reference& _internal_chart_style() const;
  ::TSP::Reference* _internal_mutable_chart_style();
  public:
  void unsafe_arena_set_allocated_chart_style(
      ::TSP::Reference* chart_style);
  ::TSP::Reference* unsafe_arena_release_chart_style();

  // optional .TSP.Reference legend_style = 2;
  bool has_legend_style() const;
  private:
  bool _internal_has_legend_style() const;
  public:
  void clear_legend_style();
  const ::TSP::Reference& legend_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_legend_style();
  ::TSP::Reference* mutable_legend_style();
  void set_allocated_legend_style(::TSP::Reference* legend_style);
  private:
  const ::TSP::Reference& _internal_legend_style() const;
  ::TSP::Reference* _internal_mutable_legend_style();
  public:
  void unsafe_arena_set_allocated_legend_style(
      ::TSP::Reference* legend_style);
  ::TSP::Reference* unsafe_arena_release_legend_style();


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartStylePreset, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  // @@protoc_insertion_point(class_scope:TSCH.ChartStylePreset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > value_axis_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > category_axis_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > series_styles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > paragraph_styles_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
    ::TSP::Reference* chart_style_;
    ::TSP::Reference* legend_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartPresetsArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartPresetsArchive) */ {
 public:
  inline ChartPresetsArchive() : ChartPresetsArchive(nullptr) {}
  ~ChartPresetsArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartPresetsArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartPresetsArchive(const ChartPresetsArchive& from);
  ChartPresetsArchive(ChartPresetsArchive&& from) noexcept
    : ChartPresetsArchive() {
    *this = ::std::move(from);
  }

  inline ChartPresetsArchive& operator=(const ChartPresetsArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartPresetsArchive& operator=(ChartPresetsArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartPresetsArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartPresetsArchive* internal_default_instance() {
    return reinterpret_cast<const ChartPresetsArchive*>(
               &_ChartPresetsArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ChartPresetsArchive& a, ChartPresetsArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartPresetsArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartPresetsArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartPresetsArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartPresetsArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartPresetsArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartPresetsArchive& from) {
    ChartPresetsArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartPresetsArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartPresetsArchive";
  }
  protected:
  explicit ChartPresetsArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartPresetsFieldNumber = 1,
  };
  // repeated .TSP.Reference chart_presets = 1;
  int chart_presets_size() const;
  private:
  int _internal_chart_presets_size() const;
  public:
  void clear_chart_presets();
  ::TSP::Reference* mutable_chart_presets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_chart_presets();
  private:
  const ::TSP::Reference& _internal_chart_presets(int index) const;
  ::TSP::Reference* _internal_add_chart_presets();
  public:
  const ::TSP::Reference& chart_presets(int index) const;
  ::TSP::Reference* add_chart_presets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      chart_presets() const;

  static const int kExtensionFieldNumber = 120;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSS::ThemeArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartPresetsArchive >, 11, false >
    extension;
  // @@protoc_insertion_point(class_scope:TSCH.ChartPresetsArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > chart_presets_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class PropertyValueStorageContainerArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PropertyValueStorageContainerArchive) */ {
 public:
  inline PropertyValueStorageContainerArchive() : PropertyValueStorageContainerArchive(nullptr) {}
  ~PropertyValueStorageContainerArchive() override;
  explicit PROTOBUF_CONSTEXPR PropertyValueStorageContainerArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyValueStorageContainerArchive(const PropertyValueStorageContainerArchive& from);
  PropertyValueStorageContainerArchive(PropertyValueStorageContainerArchive&& from) noexcept
    : PropertyValueStorageContainerArchive() {
    *this = ::std::move(from);
  }

  inline PropertyValueStorageContainerArchive& operator=(const PropertyValueStorageContainerArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyValueStorageContainerArchive& operator=(PropertyValueStorageContainerArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyValueStorageContainerArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyValueStorageContainerArchive* internal_default_instance() {
    return reinterpret_cast<const PropertyValueStorageContainerArchive*>(
               &_PropertyValueStorageContainerArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PropertyValueStorageContainerArchive& a, PropertyValueStorageContainerArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyValueStorageContainerArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyValueStorageContainerArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyValueStorageContainerArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyValueStorageContainerArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyValueStorageContainerArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyValueStorageContainerArchive& from) {
    PropertyValueStorageContainerArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyValueStorageContainerArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PropertyValueStorageContainerArchive";
  }
  protected:
  explicit PropertyValueStorageContainerArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartStyleFieldNumber = 1,
    kChartNonstyleFieldNumber = 2,
    kLegendStyleFieldNumber = 3,
    kLegendNonstyleFieldNumber = 4,
    kValueAxisStylesFieldNumber = 5,
    kValueAxisNonstylesFieldNumber = 6,
    kCategoryAxisStylesFieldNumber = 7,
    kCategoryAxisNonstylesFieldNumber = 8,
    kSeriesThemeStylesFieldNumber = 9,
    kSeriesPrivateStylesFieldNumber = 10,
    kSeriesNonstylesFieldNumber = 11,
    kParagraphStylesFieldNumber = 12,
  };
  // optional .TSP.Reference chart_style = 1;
  bool has_chart_style() const;
  private:
  bool _internal_has_chart_style() const;
  public:
  void clear_chart_style();
  const ::TSP::Reference& chart_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_style();
  ::TSP::Reference* mutable_chart_style();
  void set_allocated_chart_style(::TSP::Reference* chart_style);
  private:
  const ::TSP::Reference& _internal_chart_style() const;
  ::TSP::Reference* _internal_mutable_chart_style();
  public:
  void unsafe_arena_set_allocated_chart_style(
      ::TSP::Reference* chart_style);
  ::TSP::Reference* unsafe_arena_release_chart_style();

  // optional .TSP.Reference chart_nonstyle = 2;
  bool has_chart_nonstyle() const;
  private:
  bool _internal_has_chart_nonstyle() const;
  public:
  void clear_chart_nonstyle();
  const ::TSP::Reference& chart_nonstyle() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart_nonstyle();
  ::TSP::Reference* mutable_chart_nonstyle();
  void set_allocated_chart_nonstyle(::TSP::Reference* chart_nonstyle);
  private:
  const ::TSP::Reference& _internal_chart_nonstyle() const;
  ::TSP::Reference* _internal_mutable_chart_nonstyle();
  public:
  void unsafe_arena_set_allocated_chart_nonstyle(
      ::TSP::Reference* chart_nonstyle);
  ::TSP::Reference* unsafe_arena_release_chart_nonstyle();

  // optional .TSP.Reference legend_style = 3;
  bool has_legend_style() const;
  private:
  bool _internal_has_legend_style() const;
  public:
  void clear_legend_style();
  const ::TSP::Reference& legend_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_legend_style();
  ::TSP::Reference* mutable_legend_style();
  void set_allocated_legend_style(::TSP::Reference* legend_style);
  private:
  const ::TSP::Reference& _internal_legend_style() const;
  ::TSP::Reference* _internal_mutable_legend_style();
  public:
  void unsafe_arena_set_allocated_legend_style(
      ::TSP::Reference* legend_style);
  ::TSP::Reference* unsafe_arena_release_legend_style();

  // optional .TSP.Reference legend_nonstyle = 4;
  bool has_legend_nonstyle() const;
  private:
  bool _internal_has_legend_nonstyle() const;
  public:
  void clear_legend_nonstyle();
  const ::TSP::Reference& legend_nonstyle() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_legend_nonstyle();
  ::TSP::Reference* mutable_legend_nonstyle();
  void set_allocated_legend_nonstyle(::TSP::Reference* legend_nonstyle);
  private:
  const ::TSP::Reference& _internal_legend_nonstyle() const;
  ::TSP::Reference* _internal_mutable_legend_nonstyle();
  public:
  void unsafe_arena_set_allocated_legend_nonstyle(
      ::TSP::Reference* legend_nonstyle);
  ::TSP::Reference* unsafe_arena_release_legend_nonstyle();

  // optional .TSP.SparseReferenceArray value_axis_styles = 5;
  bool has_value_axis_styles() const;
  private:
  bool _internal_has_value_axis_styles() const;
  public:
  void clear_value_axis_styles();
  const ::TSP::SparseReferenceArray& value_axis_styles() const;
  PROTOBUF_NODISCARD ::TSP::SparseReferenceArray* release_value_axis_styles();
  ::TSP::SparseReferenceArray* mutable_value_axis_styles();
  void set_allocated_value_axis_styles(::TSP::SparseReferenceArray* value_axis_styles);
  private:
  const ::TSP::SparseReferenceArray& _internal_value_axis_styles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_value_axis_styles();
  public:
  void unsafe_arena_set_allocated_value_axis_styles(
      ::TSP::SparseReferenceArray* value_axis_styles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_value_axis_styles();

  // optional .TSP.SparseReferenceArray value_axis_nonstyles = 6;
  bool has_value_axis_nonstyles() const;
  private:
  bool _internal_has_value_axis_nonstyles() const;
  public:
  void clear_value_axis_nonstyles();
  const ::TSP::SparseReferenceArray& value_axis_nonstyles() const;
  PROTOBUF_NODISCARD ::TSP::SparseReferenceArray* release_value_axis_nonstyles();
  ::TSP::SparseReferenceArray* mutable_value_axis_nonstyles();
  void set_allocated_value_axis_nonstyles(::TSP::SparseReferenceArray* value_axis_nonstyles);
  private:
  const ::TSP::SparseReferenceArray& _internal_value_axis_nonstyles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_value_axis_nonstyles();
  public:
  void unsafe_arena_set_allocated_value_axis_nonstyles(
      ::TSP::SparseReferenceArray* value_axis_nonstyles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_value_axis_nonstyles();

  // optional .TSP.SparseReferenceArray category_axis_styles = 7;
  bool has_category_axis_styles() const;
  private:
  bool _internal_has_category_axis_styles() const;
  public:
  void clear_category_axis_styles();
  const ::TSP::SparseReferenceArray& category_axis_styles() const;
  PROTOBUF_NODISCARD ::TSP::SparseReferenceArray* release_category_axis_styles();
  ::TSP::SparseReferenceArray* mutable_category_axis_styles();
  void set_allocated_category_axis_styles(::TSP::SparseReferenceArray* category_axis_styles);
  private:
  const ::TSP::SparseReferenceArray& _internal_category_axis_styles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_category_axis_styles();
  public:
  void unsafe_arena_set_allocated_category_axis_styles(
      ::TSP::SparseReferenceArray* category_axis_styles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_category_axis_styles();

  // optional .TSP.SparseReferenceArray category_axis_nonstyles = 8;
  bool has_category_axis_nonstyles() const;
  private:
  bool _internal_has_category_axis_nonstyles() const;
  public:
  void clear_category_axis_nonstyles();
  const ::TSP::SparseReferenceArray& category_axis_nonstyles() const;
  PROTOBUF_NODISCARD ::TSP::SparseReferenceArray* release_category_axis_nonstyles();
  ::TSP::SparseReferenceArray* mutable_category_axis_nonstyles();
  void set_allocated_category_axis_nonstyles(::TSP::SparseReferenceArray* category_axis_nonstyles);
  private:
  const ::TSP::SparseReferenceArray& _internal_category_axis_nonstyles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_category_axis_nonstyles();
  public:
  void unsafe_arena_set_allocated_category_axis_nonstyles(
      ::TSP::SparseReferenceArray* category_axis_nonstyles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_category_axis_nonstyles();

  // optional .TSP.SparseReferenceArray series_theme_styles = 9;
  bool has_series_theme_styles() const;
  private:
  bool _internal_has_series_theme_styles() const;
  public:
  void clear_series_theme_styles();
  const ::TSP::SparseReferenceArray& series_theme_styles() const;
  PROTOBUF_NODISCARD ::TSP::SparseReferenceArray* release_series_theme_styles();
  ::TSP::SparseReferenceArray* mutable_series_theme_styles();
  void set_allocated_series_theme_styles(::TSP::SparseReferenceArray* series_theme_styles);
  private:
  const ::TSP::SparseReferenceArray& _internal_series_theme_styles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_series_theme_styles();
  public:
  void unsafe_arena_set_allocated_series_theme_styles(
      ::TSP::SparseReferenceArray* series_theme_styles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_series_theme_styles();

  // optional .TSP.SparseReferenceArray series_private_styles = 10;
  bool has_series_private_styles() const;
  private:
  bool _internal_has_series_private_styles() const;
  public:
  void clear_series_private_styles();
  const ::TSP::SparseReferenceArray& series_private_styles() const;
  PROTOBUF_NODISCARD ::TSP::SparseReferenceArray* release_series_private_styles();
  ::TSP::SparseReferenceArray* mutable_series_private_styles();
  void set_allocated_series_private_styles(::TSP::SparseReferenceArray* series_private_styles);
  private:
  const ::TSP::SparseReferenceArray& _internal_series_private_styles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_series_private_styles();
  public:
  void unsafe_arena_set_allocated_series_private_styles(
      ::TSP::SparseReferenceArray* series_private_styles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_series_private_styles();

  // optional .TSP.SparseReferenceArray series_nonstyles = 11;
  bool has_series_nonstyles() const;
  private:
  bool _internal_has_series_nonstyles() const;
  public:
  void clear_series_nonstyles();
  const ::TSP::SparseReferenceArray& series_nonstyles() const;
  PROTOBUF_NODISCARD ::TSP::SparseReferenceArray* release_series_nonstyles();
  ::TSP::SparseReferenceArray* mutable_series_nonstyles();
  void set_allocated_series_nonstyles(::TSP::SparseReferenceArray* series_nonstyles);
  private:
  const ::TSP::SparseReferenceArray& _internal_series_nonstyles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_series_nonstyles();
  public:
  void unsafe_arena_set_allocated_series_nonstyles(
      ::TSP::SparseReferenceArray* series_nonstyles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_series_nonstyles();

  // optional .TSP.SparseReferenceArray paragraph_styles = 12;
  bool has_paragraph_styles() const;
  private:
  bool _internal_has_paragraph_styles() const;
  public:
  void clear_paragraph_styles();
  const ::TSP::SparseReferenceArray& paragraph_styles() const;
  PROTOBUF_NODISCARD ::TSP::SparseReferenceArray* release_paragraph_styles();
  ::TSP::SparseReferenceArray* mutable_paragraph_styles();
  void set_allocated_paragraph_styles(::TSP::SparseReferenceArray* paragraph_styles);
  private:
  const ::TSP::SparseReferenceArray& _internal_paragraph_styles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_paragraph_styles();
  public:
  void unsafe_arena_set_allocated_paragraph_styles(
      ::TSP::SparseReferenceArray* paragraph_styles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_paragraph_styles();


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          PropertyValueStorageContainerArchive, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  // @@protoc_insertion_point(class_scope:TSCH.PropertyValueStorageContainerArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* chart_style_;
    ::TSP::Reference* chart_nonstyle_;
    ::TSP::Reference* legend_style_;
    ::TSP::Reference* legend_nonstyle_;
    ::TSP::SparseReferenceArray* value_axis_styles_;
    ::TSP::SparseReferenceArray* value_axis_nonstyles_;
    ::TSP::SparseReferenceArray* category_axis_styles_;
    ::TSP::SparseReferenceArray* category_axis_nonstyles_;
    ::TSP::SparseReferenceArray* series_theme_styles_;
    ::TSP::SparseReferenceArray* series_private_styles_;
    ::TSP::SparseReferenceArray* series_nonstyles_;
    ::TSP::SparseReferenceArray* paragraph_styles_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class StylePasteboardDataArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.StylePasteboardDataArchive) */ {
 public:
  inline StylePasteboardDataArchive() : StylePasteboardDataArchive(nullptr) {}
  ~StylePasteboardDataArchive() override;
  explicit PROTOBUF_CONSTEXPR StylePasteboardDataArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StylePasteboardDataArchive(const StylePasteboardDataArchive& from);
  StylePasteboardDataArchive(StylePasteboardDataArchive&& from) noexcept
    : StylePasteboardDataArchive() {
    *this = ::std::move(from);
  }

  inline StylePasteboardDataArchive& operator=(const StylePasteboardDataArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline StylePasteboardDataArchive& operator=(StylePasteboardDataArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StylePasteboardDataArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const StylePasteboardDataArchive* internal_default_instance() {
    return reinterpret_cast<const StylePasteboardDataArchive*>(
               &_StylePasteboardDataArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(StylePasteboardDataArchive& a, StylePasteboardDataArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(StylePasteboardDataArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StylePasteboardDataArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StylePasteboardDataArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StylePasteboardDataArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StylePasteboardDataArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StylePasteboardDataArchive& from) {
    StylePasteboardDataArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StylePasteboardDataArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.StylePasteboardDataArchive";
  }
  protected:
  explicit StylePasteboardDataArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuperFieldNumber = 1,
    kStyleNetworkFieldNumber = 2,
    kCopiedFromEntireChartFieldNumber = 3,
  };
  // optional .TSS.StyleArchive super = 1;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSS::StyleArchive& super() const;
  PROTOBUF_NODISCARD ::TSS::StyleArchive* release_super();
  ::TSS::StyleArchive* mutable_super();
  void set_allocated_super(::TSS::StyleArchive* super);
  private:
  const ::TSS::StyleArchive& _internal_super() const;
  ::TSS::StyleArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSS::StyleArchive* super);
  ::TSS::StyleArchive* unsafe_arena_release_super();

  // optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
  bool has_style_network() const;
  private:
  bool _internal_has_style_network() const;
  public:
  void clear_style_network();
  const ::TSCH::PropertyValueStorageContainerArchive& style_network() const;
  PROTOBUF_NODISCARD ::TSCH::PropertyValueStorageContainerArchive* release_style_network();
  ::TSCH::PropertyValueStorageContainerArchive* mutable_style_network();
  void set_allocated_style_network(::TSCH::PropertyValueStorageContainerArchive* style_network);
  private:
  const ::TSCH::PropertyValueStorageContainerArchive& _internal_style_network() const;
  ::TSCH::PropertyValueStorageContainerArchive* _internal_mutable_style_network();
  public:
  void unsafe_arena_set_allocated_style_network(
      ::TSCH::PropertyValueStorageContainerArchive* style_network);
  ::TSCH::PropertyValueStorageContainerArchive* unsafe_arena_release_style_network();

  // optional bool copied_from_entire_chart = 3;
  bool has_copied_from_entire_chart() const;
  private:
  bool _internal_has_copied_from_entire_chart() const;
  public:
  void clear_copied_from_entire_chart();
  bool copied_from_entire_chart() const;
  void set_copied_from_entire_chart(bool value);
  private:
  bool _internal_copied_from_entire_chart() const;
  void _internal_set_copied_from_entire_chart(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.StylePasteboardDataArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSS::StyleArchive* super_;
    ::TSCH::PropertyValueStorageContainerArchive* style_network_;
    bool copied_from_entire_chart_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSelectionPathTypeArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartSelectionPathTypeArchive) */ {
 public:
  inline ChartSelectionPathTypeArchive() : ChartSelectionPathTypeArchive(nullptr) {}
  ~ChartSelectionPathTypeArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartSelectionPathTypeArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSelectionPathTypeArchive(const ChartSelectionPathTypeArchive& from);
  ChartSelectionPathTypeArchive(ChartSelectionPathTypeArchive&& from) noexcept
    : ChartSelectionPathTypeArchive() {
    *this = ::std::move(from);
  }

  inline ChartSelectionPathTypeArchive& operator=(const ChartSelectionPathTypeArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSelectionPathTypeArchive& operator=(ChartSelectionPathTypeArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSelectionPathTypeArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSelectionPathTypeArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSelectionPathTypeArchive*>(
               &_ChartSelectionPathTypeArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ChartSelectionPathTypeArchive& a, ChartSelectionPathTypeArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSelectionPathTypeArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSelectionPathTypeArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSelectionPathTypeArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSelectionPathTypeArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSelectionPathTypeArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartSelectionPathTypeArchive& from) {
    ChartSelectionPathTypeArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSelectionPathTypeArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSelectionPathTypeArchive";
  }
  protected:
  explicit ChartSelectionPathTypeArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathTypeFieldNumber = 1,
    kPathNameFieldNumber = 2,
  };
  // optional string path_type = 1;
  bool has_path_type() const;
  private:
  bool _internal_has_path_type() const;
  public:
  void clear_path_type();
  const std::string& path_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path_type();
  PROTOBUF_NODISCARD std::string* release_path_type();
  void set_allocated_path_type(std::string* path_type);
  private:
  const std::string& _internal_path_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path_type(const std::string& value);
  std::string* _internal_mutable_path_type();
  public:

  // optional string path_name = 2;
  bool has_path_name() const;
  private:
  bool _internal_has_path_name() const;
  public:
  void clear_path_name();
  const std::string& path_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path_name();
  PROTOBUF_NODISCARD std::string* release_path_name();
  void set_allocated_path_name(std::string* path_name);
  private:
  const std::string& _internal_path_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path_name(const std::string& value);
  std::string* _internal_mutable_path_name();
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionPathTypeArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisIDArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartAxisIDArchive) */ {
 public:
  inline ChartAxisIDArchive() : ChartAxisIDArchive(nullptr) {}
  ~ChartAxisIDArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartAxisIDArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisIDArchive(const ChartAxisIDArchive& from);
  ChartAxisIDArchive(ChartAxisIDArchive&& from) noexcept
    : ChartAxisIDArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisIDArchive& operator=(const ChartAxisIDArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisIDArchive& operator=(ChartAxisIDArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisIDArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisIDArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisIDArchive*>(
               &_ChartAxisIDArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ChartAxisIDArchive& a, ChartAxisIDArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisIDArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisIDArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartAxisIDArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartAxisIDArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartAxisIDArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartAxisIDArchive& from) {
    ChartAxisIDArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisIDArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartAxisIDArchive";
  }
  protected:
  explicit ChartAxisIDArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisTypeFieldNumber = 1,
    kOrdinalFieldNumber = 2,
  };
  // optional .TSCH.AxisType axis_type = 1;
  bool has_axis_type() const;
  private:
  bool _internal_has_axis_type() const;
  public:
  void clear_axis_type();
  ::TSCH::AxisType axis_type() const;
  void set_axis_type(::TSCH::AxisType value);
  private:
  ::TSCH::AxisType _internal_axis_type() const;
  void _internal_set_axis_type(::TSCH::AxisType value);
  public:

  // optional uint32 ordinal = 2;
  bool has_ordinal() const;
  private:
  bool _internal_has_ordinal() const;
  public:
  void clear_ordinal();
  uint32_t ordinal() const;
  void set_ordinal(uint32_t value);
  private:
  uint32_t _internal_ordinal() const;
  void _internal_set_ordinal(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartAxisIDArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int axis_type_;
    uint32_t ordinal_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSelectionPathArgumentArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartSelectionPathArgumentArchive) */ {
 public:
  inline ChartSelectionPathArgumentArchive() : ChartSelectionPathArgumentArchive(nullptr) {}
  ~ChartSelectionPathArgumentArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartSelectionPathArgumentArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSelectionPathArgumentArchive(const ChartSelectionPathArgumentArchive& from);
  ChartSelectionPathArgumentArchive(ChartSelectionPathArgumentArchive&& from) noexcept
    : ChartSelectionPathArgumentArchive() {
    *this = ::std::move(from);
  }

  inline ChartSelectionPathArgumentArchive& operator=(const ChartSelectionPathArgumentArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSelectionPathArgumentArchive& operator=(ChartSelectionPathArgumentArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSelectionPathArgumentArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSelectionPathArgumentArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSelectionPathArgumentArchive*>(
               &_ChartSelectionPathArgumentArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ChartSelectionPathArgumentArchive& a, ChartSelectionPathArgumentArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSelectionPathArgumentArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSelectionPathArgumentArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSelectionPathArgumentArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSelectionPathArgumentArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSelectionPathArgumentArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartSelectionPathArgumentArchive& from) {
    ChartSelectionPathArgumentArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSelectionPathArgumentArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSelectionPathArgumentArchive";
  }
  protected:
  explicit ChartSelectionPathArgumentArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisIdFieldNumber = 2,
    kNumberFieldNumber = 1,
  };
  // optional .TSCH.ChartAxisIDArchive axis_id = 2;
  bool has_axis_id() const;
  private:
  bool _internal_has_axis_id() const;
  public:
  void clear_axis_id();
  const ::TSCH::ChartAxisIDArchive& axis_id() const;
  PROTOBUF_NODISCARD ::TSCH::ChartAxisIDArchive* release_axis_id();
  ::TSCH::ChartAxisIDArchive* mutable_axis_id();
  void set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id);
  private:
  const ::TSCH::ChartAxisIDArchive& _internal_axis_id() const;
  ::TSCH::ChartAxisIDArchive* _internal_mutable_axis_id();
  public:
  void unsafe_arena_set_allocated_axis_id(
      ::TSCH::ChartAxisIDArchive* axis_id);
  ::TSCH::ChartAxisIDArchive* unsafe_arena_release_axis_id();

  // optional uint32 number = 1;
  bool has_number() const;
  private:
  bool _internal_has_number() const;
  public:
  void clear_number();
  uint32_t number() const;
  void set_number(uint32_t value);
  private:
  uint32_t _internal_number() const;
  void _internal_set_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionPathArgumentArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartAxisIDArchive* axis_id_;
    uint32_t number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSelectionPathArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartSelectionPathArchive) */ {
 public:
  inline ChartSelectionPathArchive() : ChartSelectionPathArchive(nullptr) {}
  ~ChartSelectionPathArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartSelectionPathArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSelectionPathArchive(const ChartSelectionPathArchive& from);
  ChartSelectionPathArchive(ChartSelectionPathArchive&& from) noexcept
    : ChartSelectionPathArchive() {
    *this = ::std::move(from);
  }

  inline ChartSelectionPathArchive& operator=(const ChartSelectionPathArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSelectionPathArchive& operator=(ChartSelectionPathArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSelectionPathArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSelectionPathArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSelectionPathArchive*>(
               &_ChartSelectionPathArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ChartSelectionPathArchive& a, ChartSelectionPathArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSelectionPathArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSelectionPathArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSelectionPathArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSelectionPathArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSelectionPathArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartSelectionPathArchive& from) {
    ChartSelectionPathArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSelectionPathArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSelectionPathArchive";
  }
  protected:
  explicit ChartSelectionPathArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgumentsFieldNumber = 3,
    kPathTypeFieldNumber = 1,
    kSubSelectionFieldNumber = 2,
  };
  // repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
  int arguments_size() const;
  private:
  int _internal_arguments_size() const;
  public:
  void clear_arguments();
  ::TSCH::ChartSelectionPathArgumentArchive* mutable_arguments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >*
      mutable_arguments();
  private:
  const ::TSCH::ChartSelectionPathArgumentArchive& _internal_arguments(int index) const;
  ::TSCH::ChartSelectionPathArgumentArchive* _internal_add_arguments();
  public:
  const ::TSCH::ChartSelectionPathArgumentArchive& arguments(int index) const;
  ::TSCH::ChartSelectionPathArgumentArchive* add_arguments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >&
      arguments() const;

  // optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
  bool has_path_type() const;
  private:
  bool _internal_has_path_type() const;
  public:
  void clear_path_type();
  const ::TSCH::ChartSelectionPathTypeArchive& path_type() const;
  PROTOBUF_NODISCARD ::TSCH::ChartSelectionPathTypeArchive* release_path_type();
  ::TSCH::ChartSelectionPathTypeArchive* mutable_path_type();
  void set_allocated_path_type(::TSCH::ChartSelectionPathTypeArchive* path_type);
  private:
  const ::TSCH::ChartSelectionPathTypeArchive& _internal_path_type() const;
  ::TSCH::ChartSelectionPathTypeArchive* _internal_mutable_path_type();
  public:
  void unsafe_arena_set_allocated_path_type(
      ::TSCH::ChartSelectionPathTypeArchive* path_type);
  ::TSCH::ChartSelectionPathTypeArchive* unsafe_arena_release_path_type();

  // optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
  bool has_sub_selection() const;
  private:
  bool _internal_has_sub_selection() const;
  public:
  void clear_sub_selection();
  const ::TSCH::ChartSelectionPathArchive& sub_selection() const;
  PROTOBUF_NODISCARD ::TSCH::ChartSelectionPathArchive* release_sub_selection();
  ::TSCH::ChartSelectionPathArchive* mutable_sub_selection();
  void set_allocated_sub_selection(::TSCH::ChartSelectionPathArchive* sub_selection);
  private:
  const ::TSCH::ChartSelectionPathArchive& _internal_sub_selection() const;
  ::TSCH::ChartSelectionPathArchive* _internal_mutable_sub_selection();
  public:
  void unsafe_arena_set_allocated_sub_selection(
      ::TSCH::ChartSelectionPathArchive* sub_selection);
  ::TSCH::ChartSelectionPathArchive* unsafe_arena_release_sub_selection();

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionPathArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive > arguments_;
    ::TSCH::ChartSelectionPathTypeArchive* path_type_;
    ::TSCH::ChartSelectionPathArchive* sub_selection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartSelectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartSelectionArchive) */ {
 public:
  inline ChartSelectionArchive() : ChartSelectionArchive(nullptr) {}
  ~ChartSelectionArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartSelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartSelectionArchive(const ChartSelectionArchive& from);
  ChartSelectionArchive(ChartSelectionArchive&& from) noexcept
    : ChartSelectionArchive() {
    *this = ::std::move(from);
  }

  inline ChartSelectionArchive& operator=(const ChartSelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartSelectionArchive& operator=(ChartSelectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartSelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartSelectionArchive* internal_default_instance() {
    return reinterpret_cast<const ChartSelectionArchive*>(
               &_ChartSelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ChartSelectionArchive& a, ChartSelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartSelectionArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartSelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartSelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartSelectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartSelectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartSelectionArchive& from) {
    ChartSelectionArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartSelectionArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartSelectionArchive";
  }
  protected:
  explicit ChartSelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 2,
    kChartFieldNumber = 1,
    kSuperFieldNumber = 3,
  };
  // repeated .TSCH.ChartSelectionPathArchive paths = 2;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::TSCH::ChartSelectionPathArchive* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >*
      mutable_paths();
  private:
  const ::TSCH::ChartSelectionPathArchive& _internal_paths(int index) const;
  ::TSCH::ChartSelectionPathArchive* _internal_add_paths();
  public:
  const ::TSCH::ChartSelectionPathArchive& paths(int index) const;
  ::TSCH::ChartSelectionPathArchive* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >&
      paths() const;

  // optional .TSP.Reference chart = 1;
  bool has_chart() const;
  private:
  bool _internal_has_chart() const;
  public:
  void clear_chart();
  const ::TSP::Reference& chart() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart();
  ::TSP::Reference* mutable_chart();
  void set_allocated_chart(::TSP::Reference* chart);
  private:
  const ::TSP::Reference& _internal_chart() const;
  ::TSP::Reference* _internal_mutable_chart();
  public:
  void unsafe_arena_set_allocated_chart(
      ::TSP::Reference* chart);
  ::TSP::Reference* unsafe_arena_release_chart();

  // optional .TSD.DrawableSelectionArchive super = 3;
  bool has_super() const;
  private:
  bool _internal_has_super() const;
  public:
  void clear_super();
  const ::TSD::DrawableSelectionArchive& super() const;
  PROTOBUF_NODISCARD ::TSD::DrawableSelectionArchive* release_super();
  ::TSD::DrawableSelectionArchive* mutable_super();
  void set_allocated_super(::TSD::DrawableSelectionArchive* super);
  private:
  const ::TSD::DrawableSelectionArchive& _internal_super() const;
  ::TSD::DrawableSelectionArchive* _internal_mutable_super();
  public:
  void unsafe_arena_set_allocated_super(
      ::TSD::DrawableSelectionArchive* super);
  ::TSD::DrawableSelectionArchive* unsafe_arena_release_super();

  // @@protoc_insertion_point(class_scope:TSCH.ChartSelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive > paths_;
    ::TSP::Reference* chart_;
    ::TSD::DrawableSelectionArchive* super_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartCDESelectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartCDESelectionArchive) */ {
 public:
  inline ChartCDESelectionArchive() : ChartCDESelectionArchive(nullptr) {}
  ~ChartCDESelectionArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartCDESelectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartCDESelectionArchive(const ChartCDESelectionArchive& from);
  ChartCDESelectionArchive(ChartCDESelectionArchive&& from) noexcept
    : ChartCDESelectionArchive() {
    *this = ::std::move(from);
  }

  inline ChartCDESelectionArchive& operator=(const ChartCDESelectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartCDESelectionArchive& operator=(ChartCDESelectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartCDESelectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartCDESelectionArchive* internal_default_instance() {
    return reinterpret_cast<const ChartCDESelectionArchive*>(
               &_ChartCDESelectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ChartCDESelectionArchive& a, ChartCDESelectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartCDESelectionArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartCDESelectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartCDESelectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartCDESelectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartCDESelectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartCDESelectionArchive& from) {
    ChartCDESelectionArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartCDESelectionArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartCDESelectionArchive";
  }
  protected:
  explicit ChartCDESelectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartFieldNumber = 1,
    kSelectionTypeFieldNumber = 2,
    kRowLocationFieldNumber = 3,
    kRowLengthFieldNumber = 4,
    kColumnLocationFieldNumber = 5,
    kColumnLengthFieldNumber = 6,
  };
  // optional .TSP.Reference chart = 1;
  bool has_chart() const;
  private:
  bool _internal_has_chart() const;
  public:
  void clear_chart();
  const ::TSP::Reference& chart() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart();
  ::TSP::Reference* mutable_chart();
  void set_allocated_chart(::TSP::Reference* chart);
  private:
  const ::TSP::Reference& _internal_chart() const;
  ::TSP::Reference* _internal_mutable_chart();
  public:
  void unsafe_arena_set_allocated_chart(
      ::TSP::Reference* chart);
  ::TSP::Reference* unsafe_arena_release_chart();

  // optional int32 selection_type = 2;
  bool has_selection_type() const;
  private:
  bool _internal_has_selection_type() const;
  public:
  void clear_selection_type();
  int32_t selection_type() const;
  void set_selection_type(int32_t value);
  private:
  int32_t _internal_selection_type() const;
  void _internal_set_selection_type(int32_t value);
  public:

  // optional uint32 row_location = 3;
  bool has_row_location() const;
  private:
  bool _internal_has_row_location() const;
  public:
  void clear_row_location();
  uint32_t row_location() const;
  void set_row_location(uint32_t value);
  private:
  uint32_t _internal_row_location() const;
  void _internal_set_row_location(uint32_t value);
  public:

  // optional uint32 row_length = 4;
  bool has_row_length() const;
  private:
  bool _internal_has_row_length() const;
  public:
  void clear_row_length();
  uint32_t row_length() const;
  void set_row_length(uint32_t value);
  private:
  uint32_t _internal_row_length() const;
  void _internal_set_row_length(uint32_t value);
  public:

  // optional uint32 column_location = 5;
  bool has_column_location() const;
  private:
  bool _internal_has_column_location() const;
  public:
  void clear_column_location();
  uint32_t column_location() const;
  void set_column_location(uint32_t value);
  private:
  uint32_t _internal_column_location() const;
  void _internal_set_column_location(uint32_t value);
  public:

  // optional uint32 column_length = 6;
  bool has_column_length() const;
  private:
  bool _internal_has_column_length() const;
  public:
  void clear_column_length();
  uint32_t column_length() const;
  void set_column_length(uint32_t value);
  private:
  uint32_t _internal_column_length() const;
  void _internal_set_column_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TSCH.ChartCDESelectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* chart_;
    int32_t selection_type_;
    uint32_t row_location_;
    uint32_t row_length_;
    uint32_t column_location_;
    uint32_t column_length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartUIState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartUIState) */ {
 public:
  inline ChartUIState() : ChartUIState(nullptr) {}
  ~ChartUIState() override;
  explicit PROTOBUF_CONSTEXPR ChartUIState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartUIState(const ChartUIState& from);
  ChartUIState(ChartUIState&& from) noexcept
    : ChartUIState() {
    *this = ::std::move(from);
  }

  inline ChartUIState& operator=(const ChartUIState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartUIState& operator=(ChartUIState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartUIState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartUIState* internal_default_instance() {
    return reinterpret_cast<const ChartUIState*>(
               &_ChartUIState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ChartUIState& a, ChartUIState& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartUIState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartUIState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartUIState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartUIState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartUIState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartUIState& from) {
    ChartUIState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartUIState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartUIState";
  }
  protected:
  explicit ChartUIState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartFieldNumber = 1,
    kCdeLastRowSelectedFieldNumber = 2,
    kCdeLastColSelectedFieldNumber = 3,
    kCdeLastRowCountFieldNumber = 4,
    kCdeLastColCountFieldNumber = 5,
    kMultiDataSetIndexFieldNumber = 7,
    kCdeUseFullKeyboardFieldNumber = 6,
    kIsValidMultiDataSetIndexFieldNumber = 8,
  };
  // optional .TSP.Reference chart = 1;
  bool has_chart() const;
  private:
  bool _internal_has_chart() const;
  public:
  void clear_chart();
  const ::TSP::Reference& chart() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_chart();
  ::TSP::Reference* mutable_chart();
  void set_allocated_chart(::TSP::Reference* chart);
  private:
  const ::TSP::Reference& _internal_chart() const;
  ::TSP::Reference* _internal_mutable_chart();
  public:
  void unsafe_arena_set_allocated_chart(
      ::TSP::Reference* chart);
  ::TSP::Reference* unsafe_arena_release_chart();

  // optional int32 cde_last_row_selected = 2;
  bool has_cde_last_row_selected() const;
  private:
  bool _internal_has_cde_last_row_selected() const;
  public:
  void clear_cde_last_row_selected();
  int32_t cde_last_row_selected() const;
  void set_cde_last_row_selected(int32_t value);
  private:
  int32_t _internal_cde_last_row_selected() const;
  void _internal_set_cde_last_row_selected(int32_t value);
  public:

  // optional int32 cde_last_col_selected = 3;
  bool has_cde_last_col_selected() const;
  private:
  bool _internal_has_cde_last_col_selected() const;
  public:
  void clear_cde_last_col_selected();
  int32_t cde_last_col_selected() const;
  void set_cde_last_col_selected(int32_t value);
  private:
  int32_t _internal_cde_last_col_selected() const;
  void _internal_set_cde_last_col_selected(int32_t value);
  public:

  // optional int32 cde_last_row_count = 4;
  bool has_cde_last_row_count() const;
  private:
  bool _internal_has_cde_last_row_count() const;
  public:
  void clear_cde_last_row_count();
  int32_t cde_last_row_count() const;
  void set_cde_last_row_count(int32_t value);
  private:
  int32_t _internal_cde_last_row_count() const;
  void _internal_set_cde_last_row_count(int32_t value);
  public:

  // optional int32 cde_last_col_count = 5;
  bool has_cde_last_col_count() const;
  private:
  bool _internal_has_cde_last_col_count() const;
  public:
  void clear_cde_last_col_count();
  int32_t cde_last_col_count() const;
  void set_cde_last_col_count(int32_t value);
  private:
  int32_t _internal_cde_last_col_count() const;
  void _internal_set_cde_last_col_count(int32_t value);
  public:

  // optional int32 multi_data_set_index = 7;
  bool has_multi_data_set_index() const;
  private:
  bool _internal_has_multi_data_set_index() const;
  public:
  void clear_multi_data_set_index();
  int32_t multi_data_set_index() const;
  void set_multi_data_set_index(int32_t value);
  private:
  int32_t _internal_multi_data_set_index() const;
  void _internal_set_multi_data_set_index(int32_t value);
  public:

  // optional bool cde_use_full_keyboard = 6;
  bool has_cde_use_full_keyboard() const;
  private:
  bool _internal_has_cde_use_full_keyboard() const;
  public:
  void clear_cde_use_full_keyboard();
  bool cde_use_full_keyboard() const;
  void set_cde_use_full_keyboard(bool value);
  private:
  bool _internal_cde_use_full_keyboard() const;
  void _internal_set_cde_use_full_keyboard(bool value);
  public:

  // optional bool is_valid_multi_data_set_index = 8;
  bool has_is_valid_multi_data_set_index() const;
  private:
  bool _internal_has_is_valid_multi_data_set_index() const;
  public:
  void clear_is_valid_multi_data_set_index();
  bool is_valid_multi_data_set_index() const;
  void set_is_valid_multi_data_set_index(bool value);
  private:
  bool _internal_is_valid_multi_data_set_index() const;
  void _internal_set_is_valid_multi_data_set_index(bool value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          ChartUIState, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  // @@protoc_insertion_point(class_scope:TSCH.ChartUIState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* chart_;
    int32_t cde_last_row_selected_;
    int32_t cde_last_col_selected_;
    int32_t cde_last_row_count_;
    int32_t cde_last_col_count_;
    int32_t multi_data_set_index_;
    bool cde_use_full_keyboard_;
    bool is_valid_multi_data_set_index_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartUIStateMultiDataIndexUpgrade final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TSCH.ChartUIStateMultiDataIndexUpgrade) */ {
 public:
  inline ChartUIStateMultiDataIndexUpgrade() : ChartUIStateMultiDataIndexUpgrade(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ChartUIStateMultiDataIndexUpgrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartUIStateMultiDataIndexUpgrade(const ChartUIStateMultiDataIndexUpgrade& from);
  ChartUIStateMultiDataIndexUpgrade(ChartUIStateMultiDataIndexUpgrade&& from) noexcept
    : ChartUIStateMultiDataIndexUpgrade() {
    *this = ::std::move(from);
  }

  inline ChartUIStateMultiDataIndexUpgrade& operator=(const ChartUIStateMultiDataIndexUpgrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartUIStateMultiDataIndexUpgrade& operator=(ChartUIStateMultiDataIndexUpgrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartUIStateMultiDataIndexUpgrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartUIStateMultiDataIndexUpgrade* internal_default_instance() {
    return reinterpret_cast<const ChartUIStateMultiDataIndexUpgrade*>(
               &_ChartUIStateMultiDataIndexUpgrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ChartUIStateMultiDataIndexUpgrade& a, ChartUIStateMultiDataIndexUpgrade& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartUIStateMultiDataIndexUpgrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartUIStateMultiDataIndexUpgrade* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartUIStateMultiDataIndexUpgrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartUIStateMultiDataIndexUpgrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChartUIStateMultiDataIndexUpgrade& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChartUIStateMultiDataIndexUpgrade& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartUIStateMultiDataIndexUpgrade";
  }
  protected:
  explicit ChartUIStateMultiDataIndexUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kUpgradedFromModelFieldNumber = 10022;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartUIState,
      ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
    upgraded_from_model;
  // @@protoc_insertion_point(class_scope:TSCH.ChartUIStateMultiDataIndexUpgrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartFormatStructExtensions final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:TSCH.ChartFormatStructExtensions) */ {
 public:
  inline ChartFormatStructExtensions() : ChartFormatStructExtensions(nullptr) {}
  explicit PROTOBUF_CONSTEXPR ChartFormatStructExtensions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartFormatStructExtensions(const ChartFormatStructExtensions& from);
  ChartFormatStructExtensions(ChartFormatStructExtensions&& from) noexcept
    : ChartFormatStructExtensions() {
    *this = ::std::move(from);
  }

  inline ChartFormatStructExtensions& operator=(const ChartFormatStructExtensions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartFormatStructExtensions& operator=(ChartFormatStructExtensions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartFormatStructExtensions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartFormatStructExtensions* internal_default_instance() {
    return reinterpret_cast<const ChartFormatStructExtensions*>(
               &_ChartFormatStructExtensions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ChartFormatStructExtensions& a, ChartFormatStructExtensions& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartFormatStructExtensions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartFormatStructExtensions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartFormatStructExtensions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartFormatStructExtensions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ChartFormatStructExtensions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ChartFormatStructExtensions& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartFormatStructExtensions";
  }
  protected:
  explicit ChartFormatStructExtensions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  static const int kPrefixFieldNumber = 10000;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    prefix;
  static const int kSuffixFieldNumber = 10001;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::FormatStructArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
    suffix;
  // @@protoc_insertion_point(class_scope:TSCH.ChartFormatStructExtensions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartReferenceLineNonStyleItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartReferenceLineNonStyleItem) */ {
 public:
  inline ChartReferenceLineNonStyleItem() : ChartReferenceLineNonStyleItem(nullptr) {}
  ~ChartReferenceLineNonStyleItem() override;
  explicit PROTOBUF_CONSTEXPR ChartReferenceLineNonStyleItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartReferenceLineNonStyleItem(const ChartReferenceLineNonStyleItem& from);
  ChartReferenceLineNonStyleItem(ChartReferenceLineNonStyleItem&& from) noexcept
    : ChartReferenceLineNonStyleItem() {
    *this = ::std::move(from);
  }

  inline ChartReferenceLineNonStyleItem& operator=(const ChartReferenceLineNonStyleItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartReferenceLineNonStyleItem& operator=(ChartReferenceLineNonStyleItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartReferenceLineNonStyleItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartReferenceLineNonStyleItem* internal_default_instance() {
    return reinterpret_cast<const ChartReferenceLineNonStyleItem*>(
               &_ChartReferenceLineNonStyleItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ChartReferenceLineNonStyleItem& a, ChartReferenceLineNonStyleItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartReferenceLineNonStyleItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartReferenceLineNonStyleItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartReferenceLineNonStyleItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartReferenceLineNonStyleItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartReferenceLineNonStyleItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartReferenceLineNonStyleItem& from) {
    ChartReferenceLineNonStyleItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartReferenceLineNonStyleItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartReferenceLineNonStyleItem";
  }
  protected:
  explicit ChartReferenceLineNonStyleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNonStyleFieldNumber = 1,
    kUuidFieldNumber = 2,
  };
  // required .TSP.Reference non_style = 1;
  bool has_non_style() const;
  private:
  bool _internal_has_non_style() const;
  public:
  void clear_non_style();
  const ::TSP::Reference& non_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_non_style();
  ::TSP::Reference* mutable_non_style();
  void set_allocated_non_style(::TSP::Reference* non_style);
  private:
  const ::TSP::Reference& _internal_non_style() const;
  ::TSP::Reference* _internal_mutable_non_style();
  public:
  void unsafe_arena_set_allocated_non_style(
      ::TSP::Reference* non_style);
  ::TSP::Reference* unsafe_arena_release_non_style();

  // required .TSP.UUID uuid = 2;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const ::TSP::UUID& uuid() const;
  PROTOBUF_NODISCARD ::TSP::UUID* release_uuid();
  ::TSP::UUID* mutable_uuid();
  void set_allocated_uuid(::TSP::UUID* uuid);
  private:
  const ::TSP::UUID& _internal_uuid() const;
  ::TSP::UUID* _internal_mutable_uuid();
  public:
  void unsafe_arena_set_allocated_uuid(
      ::TSP::UUID* uuid);
  ::TSP::UUID* unsafe_arena_release_uuid();

  // @@protoc_insertion_point(class_scope:TSCH.ChartReferenceLineNonStyleItem)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSP::Reference* non_style_;
    ::TSP::UUID* uuid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisReferenceLineNonStylesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartAxisReferenceLineNonStylesArchive) */ {
 public:
  inline ChartAxisReferenceLineNonStylesArchive() : ChartAxisReferenceLineNonStylesArchive(nullptr) {}
  ~ChartAxisReferenceLineNonStylesArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartAxisReferenceLineNonStylesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisReferenceLineNonStylesArchive(const ChartAxisReferenceLineNonStylesArchive& from);
  ChartAxisReferenceLineNonStylesArchive(ChartAxisReferenceLineNonStylesArchive&& from) noexcept
    : ChartAxisReferenceLineNonStylesArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisReferenceLineNonStylesArchive& operator=(const ChartAxisReferenceLineNonStylesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisReferenceLineNonStylesArchive& operator=(ChartAxisReferenceLineNonStylesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisReferenceLineNonStylesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisReferenceLineNonStylesArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisReferenceLineNonStylesArchive*>(
               &_ChartAxisReferenceLineNonStylesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ChartAxisReferenceLineNonStylesArchive& a, ChartAxisReferenceLineNonStylesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisReferenceLineNonStylesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisReferenceLineNonStylesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartAxisReferenceLineNonStylesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartAxisReferenceLineNonStylesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartAxisReferenceLineNonStylesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartAxisReferenceLineNonStylesArchive& from) {
    ChartAxisReferenceLineNonStylesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisReferenceLineNonStylesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartAxisReferenceLineNonStylesArchive";
  }
  protected:
  explicit ChartAxisReferenceLineNonStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceLineNonStyleItemsFieldNumber = 2,
    kAxisIdFieldNumber = 1,
  };
  // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
  int reference_line_non_style_items_size() const;
  private:
  int _internal_reference_line_non_style_items_size() const;
  public:
  void clear_reference_line_non_style_items();
  ::TSCH::ChartReferenceLineNonStyleItem* mutable_reference_line_non_style_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartReferenceLineNonStyleItem >*
      mutable_reference_line_non_style_items();
  private:
  const ::TSCH::ChartReferenceLineNonStyleItem& _internal_reference_line_non_style_items(int index) const;
  ::TSCH::ChartReferenceLineNonStyleItem* _internal_add_reference_line_non_style_items();
  public:
  const ::TSCH::ChartReferenceLineNonStyleItem& reference_line_non_style_items(int index) const;
  ::TSCH::ChartReferenceLineNonStyleItem* add_reference_line_non_style_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartReferenceLineNonStyleItem >&
      reference_line_non_style_items() const;

  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  bool has_axis_id() const;
  private:
  bool _internal_has_axis_id() const;
  public:
  void clear_axis_id();
  const ::TSCH::ChartAxisIDArchive& axis_id() const;
  PROTOBUF_NODISCARD ::TSCH::ChartAxisIDArchive* release_axis_id();
  ::TSCH::ChartAxisIDArchive* mutable_axis_id();
  void set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id);
  private:
  const ::TSCH::ChartAxisIDArchive& _internal_axis_id() const;
  ::TSCH::ChartAxisIDArchive* _internal_mutable_axis_id();
  public:
  void unsafe_arena_set_allocated_axis_id(
      ::TSCH::ChartAxisIDArchive* axis_id);
  ::TSCH::ChartAxisIDArchive* unsafe_arena_release_axis_id();

  // @@protoc_insertion_point(class_scope:TSCH.ChartAxisReferenceLineNonStylesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartReferenceLineNonStyleItem > reference_line_non_style_items_;
    ::TSCH::ChartAxisIDArchive* axis_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisReferenceLineStylesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartAxisReferenceLineStylesArchive) */ {
 public:
  inline ChartAxisReferenceLineStylesArchive() : ChartAxisReferenceLineStylesArchive(nullptr) {}
  ~ChartAxisReferenceLineStylesArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartAxisReferenceLineStylesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisReferenceLineStylesArchive(const ChartAxisReferenceLineStylesArchive& from);
  ChartAxisReferenceLineStylesArchive(ChartAxisReferenceLineStylesArchive&& from) noexcept
    : ChartAxisReferenceLineStylesArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisReferenceLineStylesArchive& operator=(const ChartAxisReferenceLineStylesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisReferenceLineStylesArchive& operator=(ChartAxisReferenceLineStylesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisReferenceLineStylesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisReferenceLineStylesArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisReferenceLineStylesArchive*>(
               &_ChartAxisReferenceLineStylesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ChartAxisReferenceLineStylesArchive& a, ChartAxisReferenceLineStylesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisReferenceLineStylesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisReferenceLineStylesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartAxisReferenceLineStylesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartAxisReferenceLineStylesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartAxisReferenceLineStylesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartAxisReferenceLineStylesArchive& from) {
    ChartAxisReferenceLineStylesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisReferenceLineStylesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartAxisReferenceLineStylesArchive";
  }
  protected:
  explicit ChartAxisReferenceLineStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxisIdFieldNumber = 1,
    kReferenceLineStylesFieldNumber = 2,
  };
  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  bool has_axis_id() const;
  private:
  bool _internal_has_axis_id() const;
  public:
  void clear_axis_id();
  const ::TSCH::ChartAxisIDArchive& axis_id() const;
  PROTOBUF_NODISCARD ::TSCH::ChartAxisIDArchive* release_axis_id();
  ::TSCH::ChartAxisIDArchive* mutable_axis_id();
  void set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id);
  private:
  const ::TSCH::ChartAxisIDArchive& _internal_axis_id() const;
  ::TSCH::ChartAxisIDArchive* _internal_mutable_axis_id();
  public:
  void unsafe_arena_set_allocated_axis_id(
      ::TSCH::ChartAxisIDArchive* axis_id);
  ::TSCH::ChartAxisIDArchive* unsafe_arena_release_axis_id();

  // optional .TSP.SparseReferenceArray reference_line_styles = 2;
  bool has_reference_line_styles() const;
  private:
  bool _internal_has_reference_line_styles() const;
  public:
  void clear_reference_line_styles();
  const ::TSP::SparseReferenceArray& reference_line_styles() const;
  PROTOBUF_NODISCARD ::TSP::SparseReferenceArray* release_reference_line_styles();
  ::TSP::SparseReferenceArray* mutable_reference_line_styles();
  void set_allocated_reference_line_styles(::TSP::SparseReferenceArray* reference_line_styles);
  private:
  const ::TSP::SparseReferenceArray& _internal_reference_line_styles() const;
  ::TSP::SparseReferenceArray* _internal_mutable_reference_line_styles();
  public:
  void unsafe_arena_set_allocated_reference_line_styles(
      ::TSP::SparseReferenceArray* reference_line_styles);
  ::TSP::SparseReferenceArray* unsafe_arena_release_reference_line_styles();

  // @@protoc_insertion_point(class_scope:TSCH.ChartAxisReferenceLineStylesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TSCH::ChartAxisIDArchive* axis_id_;
    ::TSP::SparseReferenceArray* reference_line_styles_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartReferenceLinesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartReferenceLinesArchive) */ {
 public:
  inline ChartReferenceLinesArchive() : ChartReferenceLinesArchive(nullptr) {}
  ~ChartReferenceLinesArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartReferenceLinesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartReferenceLinesArchive(const ChartReferenceLinesArchive& from);
  ChartReferenceLinesArchive(ChartReferenceLinesArchive&& from) noexcept
    : ChartReferenceLinesArchive() {
    *this = ::std::move(from);
  }

  inline ChartReferenceLinesArchive& operator=(const ChartReferenceLinesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartReferenceLinesArchive& operator=(ChartReferenceLinesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartReferenceLinesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartReferenceLinesArchive* internal_default_instance() {
    return reinterpret_cast<const ChartReferenceLinesArchive*>(
               &_ChartReferenceLinesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ChartReferenceLinesArchive& a, ChartReferenceLinesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartReferenceLinesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartReferenceLinesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartReferenceLinesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartReferenceLinesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartReferenceLinesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartReferenceLinesArchive& from) {
    ChartReferenceLinesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartReferenceLinesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartReferenceLinesArchive";
  }
  protected:
  explicit ChartReferenceLinesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceLineNonStylesMapFieldNumber = 1,
    kReferenceLineStylesMapFieldNumber = 2,
    kThemePresetReferenceLineStyleFieldNumber = 3,
  };
  // repeated .TSCH.ChartAxisReferenceLineNonStylesArchive reference_line_non_styles_map = 1;
  int reference_line_non_styles_map_size() const;
  private:
  int _internal_reference_line_non_styles_map_size() const;
  public:
  void clear_reference_line_non_styles_map();
  ::TSCH::ChartAxisReferenceLineNonStylesArchive* mutable_reference_line_non_styles_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineNonStylesArchive >*
      mutable_reference_line_non_styles_map();
  private:
  const ::TSCH::ChartAxisReferenceLineNonStylesArchive& _internal_reference_line_non_styles_map(int index) const;
  ::TSCH::ChartAxisReferenceLineNonStylesArchive* _internal_add_reference_line_non_styles_map();
  public:
  const ::TSCH::ChartAxisReferenceLineNonStylesArchive& reference_line_non_styles_map(int index) const;
  ::TSCH::ChartAxisReferenceLineNonStylesArchive* add_reference_line_non_styles_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineNonStylesArchive >&
      reference_line_non_styles_map() const;

  // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
  int reference_line_styles_map_size() const;
  private:
  int _internal_reference_line_styles_map_size() const;
  public:
  void clear_reference_line_styles_map();
  ::TSCH::ChartAxisReferenceLineStylesArchive* mutable_reference_line_styles_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineStylesArchive >*
      mutable_reference_line_styles_map();
  private:
  const ::TSCH::ChartAxisReferenceLineStylesArchive& _internal_reference_line_styles_map(int index) const;
  ::TSCH::ChartAxisReferenceLineStylesArchive* _internal_add_reference_line_styles_map();
  public:
  const ::TSCH::ChartAxisReferenceLineStylesArchive& reference_line_styles_map(int index) const;
  ::TSCH::ChartAxisReferenceLineStylesArchive* add_reference_line_styles_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineStylesArchive >&
      reference_line_styles_map() const;

  // optional .TSP.Reference theme_preset_reference_line_style = 3;
  bool has_theme_preset_reference_line_style() const;
  private:
  bool _internal_has_theme_preset_reference_line_style() const;
  public:
  void clear_theme_preset_reference_line_style();
  const ::TSP::Reference& theme_preset_reference_line_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme_preset_reference_line_style();
  ::TSP::Reference* mutable_theme_preset_reference_line_style();
  void set_allocated_theme_preset_reference_line_style(::TSP::Reference* theme_preset_reference_line_style);
  private:
  const ::TSP::Reference& _internal_theme_preset_reference_line_style() const;
  ::TSP::Reference* _internal_mutable_theme_preset_reference_line_style();
  public:
  void unsafe_arena_set_allocated_theme_preset_reference_line_style(
      ::TSP::Reference* theme_preset_reference_line_style);
  ::TSP::Reference* unsafe_arena_release_theme_preset_reference_line_style();

  // @@protoc_insertion_point(class_scope:TSCH.ChartReferenceLinesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineNonStylesArchive > reference_line_non_styles_map_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineStylesArchive > reference_line_styles_map_;
    ::TSP::Reference* theme_preset_reference_line_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartPresetReferenceLineStylesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartPresetReferenceLineStylesArchive) */ {
 public:
  inline ChartPresetReferenceLineStylesArchive() : ChartPresetReferenceLineStylesArchive(nullptr) {}
  ~ChartPresetReferenceLineStylesArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartPresetReferenceLineStylesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartPresetReferenceLineStylesArchive(const ChartPresetReferenceLineStylesArchive& from);
  ChartPresetReferenceLineStylesArchive(ChartPresetReferenceLineStylesArchive&& from) noexcept
    : ChartPresetReferenceLineStylesArchive() {
    *this = ::std::move(from);
  }

  inline ChartPresetReferenceLineStylesArchive& operator=(const ChartPresetReferenceLineStylesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartPresetReferenceLineStylesArchive& operator=(ChartPresetReferenceLineStylesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartPresetReferenceLineStylesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartPresetReferenceLineStylesArchive* internal_default_instance() {
    return reinterpret_cast<const ChartPresetReferenceLineStylesArchive*>(
               &_ChartPresetReferenceLineStylesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ChartPresetReferenceLineStylesArchive& a, ChartPresetReferenceLineStylesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartPresetReferenceLineStylesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartPresetReferenceLineStylesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartPresetReferenceLineStylesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartPresetReferenceLineStylesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartPresetReferenceLineStylesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartPresetReferenceLineStylesArchive& from) {
    ChartPresetReferenceLineStylesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartPresetReferenceLineStylesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartPresetReferenceLineStylesArchive";
  }
  protected:
  explicit ChartPresetReferenceLineStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceLineStylesFieldNumber = 1,
  };
  // repeated .TSP.Reference reference_line_styles = 1;
  int reference_line_styles_size() const;
  private:
  int _internal_reference_line_styles_size() const;
  public:
  void clear_reference_line_styles();
  ::TSP::Reference* mutable_reference_line_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
      mutable_reference_line_styles();
  private:
  const ::TSP::Reference& _internal_reference_line_styles(int index) const;
  ::TSP::Reference* _internal_add_reference_line_styles();
  public:
  const ::TSP::Reference& reference_line_styles(int index) const;
  ::TSP::Reference* add_reference_line_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
      reference_line_styles() const;

  // @@protoc_insertion_point(class_scope:TSCH.ChartPresetReferenceLineStylesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference > reference_line_styles_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class ChartAxisReferenceLineSparseNonStylesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.ChartAxisReferenceLineSparseNonStylesArchive) */ {
 public:
  inline ChartAxisReferenceLineSparseNonStylesArchive() : ChartAxisReferenceLineSparseNonStylesArchive(nullptr) {}
  ~ChartAxisReferenceLineSparseNonStylesArchive() override;
  explicit PROTOBUF_CONSTEXPR ChartAxisReferenceLineSparseNonStylesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChartAxisReferenceLineSparseNonStylesArchive(const ChartAxisReferenceLineSparseNonStylesArchive& from);
  ChartAxisReferenceLineSparseNonStylesArchive(ChartAxisReferenceLineSparseNonStylesArchive&& from) noexcept
    : ChartAxisReferenceLineSparseNonStylesArchive() {
    *this = ::std::move(from);
  }

  inline ChartAxisReferenceLineSparseNonStylesArchive& operator=(const ChartAxisReferenceLineSparseNonStylesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChartAxisReferenceLineSparseNonStylesArchive& operator=(ChartAxisReferenceLineSparseNonStylesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChartAxisReferenceLineSparseNonStylesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChartAxisReferenceLineSparseNonStylesArchive* internal_default_instance() {
    return reinterpret_cast<const ChartAxisReferenceLineSparseNonStylesArchive*>(
               &_ChartAxisReferenceLineSparseNonStylesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ChartAxisReferenceLineSparseNonStylesArchive& a, ChartAxisReferenceLineSparseNonStylesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(ChartAxisReferenceLineSparseNonStylesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChartAxisReferenceLineSparseNonStylesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChartAxisReferenceLineSparseNonStylesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChartAxisReferenceLineSparseNonStylesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChartAxisReferenceLineSparseNonStylesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ChartAxisReferenceLineSparseNonStylesArchive& from) {
    ChartAxisReferenceLineSparseNonStylesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartAxisReferenceLineSparseNonStylesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.ChartAxisReferenceLineSparseNonStylesArchive";
  }
  protected:
  explicit ChartAxisReferenceLineSparseNonStylesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceLineNonStyleItemsFieldNumber = 2,
    kAxisIdFieldNumber = 1,
  };
  // repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
  int reference_line_non_style_items_size() const;
  private:
  int _internal_reference_line_non_style_items_size() const;
  public:
  void clear_reference_line_non_style_items();
  ::TSCH::ChartReferenceLineNonStyleItem* mutable_reference_line_non_style_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartReferenceLineNonStyleItem >*
      mutable_reference_line_non_style_items();
  private:
  const ::TSCH::ChartReferenceLineNonStyleItem& _internal_reference_line_non_style_items(int index) const;
  ::TSCH::ChartReferenceLineNonStyleItem* _internal_add_reference_line_non_style_items();
  public:
  const ::TSCH::ChartReferenceLineNonStyleItem& reference_line_non_style_items(int index) const;
  ::TSCH::ChartReferenceLineNonStyleItem* add_reference_line_non_style_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartReferenceLineNonStyleItem >&
      reference_line_non_style_items() const;

  // required .TSCH.ChartAxisIDArchive axis_id = 1;
  bool has_axis_id() const;
  private:
  bool _internal_has_axis_id() const;
  public:
  void clear_axis_id();
  const ::TSCH::ChartAxisIDArchive& axis_id() const;
  PROTOBUF_NODISCARD ::TSCH::ChartAxisIDArchive* release_axis_id();
  ::TSCH::ChartAxisIDArchive* mutable_axis_id();
  void set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id);
  private:
  const ::TSCH::ChartAxisIDArchive& _internal_axis_id() const;
  ::TSCH::ChartAxisIDArchive* _internal_mutable_axis_id();
  public:
  void unsafe_arena_set_allocated_axis_id(
      ::TSCH::ChartAxisIDArchive* axis_id);
  ::TSCH::ChartAxisIDArchive* unsafe_arena_release_axis_id();

  // @@protoc_insertion_point(class_scope:TSCH.ChartAxisReferenceLineSparseNonStylesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartReferenceLineNonStyleItem > reference_line_non_style_items_;
    ::TSCH::ChartAxisIDArchive* axis_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class PropertyValueStorageContainerReferenceLinesArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.PropertyValueStorageContainerReferenceLinesArchive) */ {
 public:
  inline PropertyValueStorageContainerReferenceLinesArchive() : PropertyValueStorageContainerReferenceLinesArchive(nullptr) {}
  ~PropertyValueStorageContainerReferenceLinesArchive() override;
  explicit PROTOBUF_CONSTEXPR PropertyValueStorageContainerReferenceLinesArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyValueStorageContainerReferenceLinesArchive(const PropertyValueStorageContainerReferenceLinesArchive& from);
  PropertyValueStorageContainerReferenceLinesArchive(PropertyValueStorageContainerReferenceLinesArchive&& from) noexcept
    : PropertyValueStorageContainerReferenceLinesArchive() {
    *this = ::std::move(from);
  }

  inline PropertyValueStorageContainerReferenceLinesArchive& operator=(const PropertyValueStorageContainerReferenceLinesArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyValueStorageContainerReferenceLinesArchive& operator=(PropertyValueStorageContainerReferenceLinesArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyValueStorageContainerReferenceLinesArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyValueStorageContainerReferenceLinesArchive* internal_default_instance() {
    return reinterpret_cast<const PropertyValueStorageContainerReferenceLinesArchive*>(
               &_PropertyValueStorageContainerReferenceLinesArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(PropertyValueStorageContainerReferenceLinesArchive& a, PropertyValueStorageContainerReferenceLinesArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyValueStorageContainerReferenceLinesArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyValueStorageContainerReferenceLinesArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyValueStorageContainerReferenceLinesArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertyValueStorageContainerReferenceLinesArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertyValueStorageContainerReferenceLinesArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PropertyValueStorageContainerReferenceLinesArchive& from) {
    PropertyValueStorageContainerReferenceLinesArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyValueStorageContainerReferenceLinesArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.PropertyValueStorageContainerReferenceLinesArchive";
  }
  protected:
  explicit PropertyValueStorageContainerReferenceLinesArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceLineNonStylesMapFieldNumber = 1,
    kReferenceLineStylesMapFieldNumber = 2,
    kThemePresetReferenceLineStyleFieldNumber = 3,
  };
  // repeated .TSCH.ChartAxisReferenceLineSparseNonStylesArchive reference_line_non_styles_map = 1;
  int reference_line_non_styles_map_size() const;
  private:
  int _internal_reference_line_non_styles_map_size() const;
  public:
  void clear_reference_line_non_styles_map();
  ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive* mutable_reference_line_non_styles_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive >*
      mutable_reference_line_non_styles_map();
  private:
  const ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive& _internal_reference_line_non_styles_map(int index) const;
  ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive* _internal_add_reference_line_non_styles_map();
  public:
  const ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive& reference_line_non_styles_map(int index) const;
  ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive* add_reference_line_non_styles_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive >&
      reference_line_non_styles_map() const;

  // repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
  int reference_line_styles_map_size() const;
  private:
  int _internal_reference_line_styles_map_size() const;
  public:
  void clear_reference_line_styles_map();
  ::TSCH::ChartAxisReferenceLineStylesArchive* mutable_reference_line_styles_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineStylesArchive >*
      mutable_reference_line_styles_map();
  private:
  const ::TSCH::ChartAxisReferenceLineStylesArchive& _internal_reference_line_styles_map(int index) const;
  ::TSCH::ChartAxisReferenceLineStylesArchive* _internal_add_reference_line_styles_map();
  public:
  const ::TSCH::ChartAxisReferenceLineStylesArchive& reference_line_styles_map(int index) const;
  ::TSCH::ChartAxisReferenceLineStylesArchive* add_reference_line_styles_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineStylesArchive >&
      reference_line_styles_map() const;

  // optional .TSP.Reference theme_preset_reference_line_style = 3;
  bool has_theme_preset_reference_line_style() const;
  private:
  bool _internal_has_theme_preset_reference_line_style() const;
  public:
  void clear_theme_preset_reference_line_style();
  const ::TSP::Reference& theme_preset_reference_line_style() const;
  PROTOBUF_NODISCARD ::TSP::Reference* release_theme_preset_reference_line_style();
  ::TSP::Reference* mutable_theme_preset_reference_line_style();
  void set_allocated_theme_preset_reference_line_style(::TSP::Reference* theme_preset_reference_line_style);
  private:
  const ::TSP::Reference& _internal_theme_preset_reference_line_style() const;
  ::TSP::Reference* _internal_mutable_theme_preset_reference_line_style();
  public:
  void unsafe_arena_set_allocated_theme_preset_reference_line_style(
      ::TSP::Reference* theme_preset_reference_line_style);
  ::TSP::Reference* unsafe_arena_release_theme_preset_reference_line_style();

  // @@protoc_insertion_point(class_scope:TSCH.PropertyValueStorageContainerReferenceLinesArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive > reference_line_non_styles_map_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineStylesArchive > reference_line_styles_map_;
    ::TSP::Reference* theme_preset_reference_line_style_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaboratorCDECursorSubselectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CollaboratorCDECursorSubselectionArchive) */ {
 public:
  inline CollaboratorCDECursorSubselectionArchive() : CollaboratorCDECursorSubselectionArchive(nullptr) {}
  ~CollaboratorCDECursorSubselectionArchive() override;
  explicit PROTOBUF_CONSTEXPR CollaboratorCDECursorSubselectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaboratorCDECursorSubselectionArchive(const CollaboratorCDECursorSubselectionArchive& from);
  CollaboratorCDECursorSubselectionArchive(CollaboratorCDECursorSubselectionArchive&& from) noexcept
    : CollaboratorCDECursorSubselectionArchive() {
    *this = ::std::move(from);
  }

  inline CollaboratorCDECursorSubselectionArchive& operator=(const CollaboratorCDECursorSubselectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaboratorCDECursorSubselectionArchive& operator=(CollaboratorCDECursorSubselectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaboratorCDECursorSubselectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaboratorCDECursorSubselectionArchive* internal_default_instance() {
    return reinterpret_cast<const CollaboratorCDECursorSubselectionArchive*>(
               &_CollaboratorCDECursorSubselectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CollaboratorCDECursorSubselectionArchive& a, CollaboratorCDECursorSubselectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaboratorCDECursorSubselectionArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaboratorCDECursorSubselectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollaboratorCDECursorSubselectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollaboratorCDECursorSubselectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollaboratorCDECursorSubselectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollaboratorCDECursorSubselectionArchive& from) {
    CollaboratorCDECursorSubselectionArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaboratorCDECursorSubselectionArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CollaboratorCDECursorSubselectionArchive";
  }
  protected:
  explicit CollaboratorCDECursorSubselectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowLocationFieldNumber = 1,
    kRowLengthFieldNumber = 2,
    kColumnLocationFieldNumber = 3,
    kColumnLengthFieldNumber = 4,
  };
  // optional int32 row_location = 1;
  bool has_row_location() const;
  private:
  bool _internal_has_row_location() const;
  public:
  void clear_row_location();
  int32_t row_location() const;
  void set_row_location(int32_t value);
  private:
  int32_t _internal_row_location() const;
  void _internal_set_row_location(int32_t value);
  public:

  // optional int32 row_length = 2;
  bool has_row_length() const;
  private:
  bool _internal_has_row_length() const;
  public:
  void clear_row_length();
  int32_t row_length() const;
  void set_row_length(int32_t value);
  private:
  int32_t _internal_row_length() const;
  void _internal_set_row_length(int32_t value);
  public:

  // optional int32 column_location = 3;
  bool has_column_location() const;
  private:
  bool _internal_has_column_location() const;
  public:
  void clear_column_location();
  int32_t column_location() const;
  void set_column_location(int32_t value);
  private:
  int32_t _internal_column_location() const;
  void _internal_set_column_location(int32_t value);
  public:

  // optional int32 column_length = 4;
  bool has_column_length() const;
  private:
  bool _internal_has_column_length() const;
  public:
  void clear_column_length();
  int32_t column_length() const;
  void set_column_length(int32_t value);
  private:
  int32_t _internal_column_length() const;
  void _internal_set_column_length(int32_t value);
  public:

  static const int kCdeCursorSubselectionFieldNumber = 300;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::CollaboratorCursorArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::CollaboratorCDECursorSubselectionArchive >, 11, false >
    cde_cursor_subselection;
  // @@protoc_insertion_point(class_scope:TSCH.CollaboratorCDECursorSubselectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int32_t row_location_;
    int32_t row_length_;
    int32_t column_location_;
    int32_t column_length_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// -------------------------------------------------------------------

class CollaboratorChartTitleCursorSubselectionArchive final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TSCH.CollaboratorChartTitleCursorSubselectionArchive) */ {
 public:
  inline CollaboratorChartTitleCursorSubselectionArchive() : CollaboratorChartTitleCursorSubselectionArchive(nullptr) {}
  ~CollaboratorChartTitleCursorSubselectionArchive() override;
  explicit PROTOBUF_CONSTEXPR CollaboratorChartTitleCursorSubselectionArchive(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CollaboratorChartTitleCursorSubselectionArchive(const CollaboratorChartTitleCursorSubselectionArchive& from);
  CollaboratorChartTitleCursorSubselectionArchive(CollaboratorChartTitleCursorSubselectionArchive&& from) noexcept
    : CollaboratorChartTitleCursorSubselectionArchive() {
    *this = ::std::move(from);
  }

  inline CollaboratorChartTitleCursorSubselectionArchive& operator=(const CollaboratorChartTitleCursorSubselectionArchive& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollaboratorChartTitleCursorSubselectionArchive& operator=(CollaboratorChartTitleCursorSubselectionArchive&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CollaboratorChartTitleCursorSubselectionArchive& default_instance() {
    return *internal_default_instance();
  }
  static inline const CollaboratorChartTitleCursorSubselectionArchive* internal_default_instance() {
    return reinterpret_cast<const CollaboratorChartTitleCursorSubselectionArchive*>(
               &_CollaboratorChartTitleCursorSubselectionArchive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CollaboratorChartTitleCursorSubselectionArchive& a, CollaboratorChartTitleCursorSubselectionArchive& b) {
    a.Swap(&b);
  }
  inline void Swap(CollaboratorChartTitleCursorSubselectionArchive* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CollaboratorChartTitleCursorSubselectionArchive* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CollaboratorChartTitleCursorSubselectionArchive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CollaboratorChartTitleCursorSubselectionArchive>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CollaboratorChartTitleCursorSubselectionArchive& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CollaboratorChartTitleCursorSubselectionArchive& from) {
    CollaboratorChartTitleCursorSubselectionArchive::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollaboratorChartTitleCursorSubselectionArchive* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TSCH.CollaboratorChartTitleCursorSubselectionArchive";
  }
  protected:
  explicit CollaboratorChartTitleCursorSubselectionArchive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChartTitleSelectedFieldNumber = 1,
  };
  // optional bool chart_title_selected = 1;
  bool has_chart_title_selected() const;
  private:
  bool _internal_has_chart_title_selected() const;
  public:
  void clear_chart_title_selected();
  bool chart_title_selected() const;
  void set_chart_title_selected(bool value);
  private:
  bool _internal_chart_title_selected() const;
  void _internal_set_chart_title_selected(bool value);
  public:

  static const int kChartTitleCursorSubselectionFieldNumber = 301;
  static ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSK::CollaboratorCursorArchive,
      ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::CollaboratorChartTitleCursorSubselectionArchive >, 11, false >
    chart_title_cursor_subselection;
  // @@protoc_insertion_point(class_scope:TSCH.CollaboratorChartTitleCursorSubselectionArchive)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool chart_title_selected_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_TSCHArchives_2eproto;
};
// ===================================================================

static const int kScene3DSettingsConstantDepthFieldNumber = 10002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  scene3d_settings_constant_depth;
static const int kLastAppliedFillSetLookupStringFieldNumber = 10004;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  last_applied_fill_set_lookup_string;
static const int kSeriesSupportsDonutFieldNumber = 10001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_donut;
static const int kSeriesSupportsRadarFieldNumber = 10002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_radar;
static const int kSeriesSupportsCustomNumberFormatFieldNumber = 10001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_custom_number_format;
static const int kSeriesSupportsCustomDateFormatFieldNumber = 10002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_custom_date_format;
static const int kSeriesSupportsCalloutLinesFieldNumber = 10003;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartSeriesNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  series_supports_callout_lines;
static const int kAxisSupportsRadarFieldNumber = 10001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  axis_supports_radar;
static const int kAxisSupportsCustomNumberFormatFieldNumber = 10001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  axis_supports_custom_number_format;
static const int kAxisSupportsCustomDateFormatFieldNumber = 10002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartAxisNonStyleArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  axis_supports_custom_date_format;
static const int kReferenceLinesFieldNumber = 10005;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartReferenceLinesArchive >, 11, false >
  reference_lines;
static const int kPresetReferenceLineStylesFieldNumber = 10000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::ChartStylePreset,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::ChartPresetReferenceLineStylesArchive >, 11, false >
  preset_reference_line_styles;
static const int kPropertyValueStorageContainerReferenceLinesFieldNumber = 10000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TSCH::PropertyValueStorageContainerArchive,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TSCH::PropertyValueStorageContainerReferenceLinesArchive >, 11, false >
  property_value_storage_container_reference_lines;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChartDrawableArchive

// optional .TSD.DrawableArchive super = 1;
inline bool ChartDrawableArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ChartDrawableArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::DrawableArchive& ChartDrawableArchive::_internal_super() const {
  const ::TSD::DrawableArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableArchive&>(
      ::TSD::_DrawableArchive_default_instance_);
}
inline const ::TSD::DrawableArchive& ChartDrawableArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartDrawableArchive.super)
  return _internal_super();
}
inline void ChartDrawableArchive::unsafe_arena_set_allocated_super(
    ::TSD::DrawableArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartDrawableArchive.super)
}
inline ::TSD::DrawableArchive* ChartDrawableArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::DrawableArchive* ChartDrawableArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.ChartDrawableArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSD::DrawableArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableArchive* ChartDrawableArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSD::DrawableArchive* ChartDrawableArchive::mutable_super() {
  ::TSD::DrawableArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartDrawableArchive.super)
  return _msg;
}
inline void ChartDrawableArchive::set_allocated_super(::TSD::DrawableArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartDrawableArchive.super)
}

// -------------------------------------------------------------------

// ChartArchive

// optional .TSCH.ChartType chart_type = 1;
inline bool ChartArchive::_internal_has_chart_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ChartArchive::has_chart_type() const {
  return _internal_has_chart_type();
}
inline void ChartArchive::clear_chart_type() {
  _impl_.chart_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::TSCH::ChartType ChartArchive::_internal_chart_type() const {
  return static_cast< ::TSCH::ChartType >(_impl_.chart_type_);
}
inline ::TSCH::ChartType ChartArchive::chart_type() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.chart_type)
  return _internal_chart_type();
}
inline void ChartArchive::_internal_set_chart_type(::TSCH::ChartType value) {
  assert(::TSCH::ChartType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.chart_type_ = value;
}
inline void ChartArchive::set_chart_type(::TSCH::ChartType value) {
  _internal_set_chart_type(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.chart_type)
}

// optional .TSCH.ScatterFormat scatter_format = 2;
inline bool ChartArchive::_internal_has_scatter_format() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ChartArchive::has_scatter_format() const {
  return _internal_has_scatter_format();
}
inline void ChartArchive::clear_scatter_format() {
  _impl_.scatter_format_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::TSCH::ScatterFormat ChartArchive::_internal_scatter_format() const {
  return static_cast< ::TSCH::ScatterFormat >(_impl_.scatter_format_);
}
inline ::TSCH::ScatterFormat ChartArchive::scatter_format() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.scatter_format)
  return _internal_scatter_format();
}
inline void ChartArchive::_internal_set_scatter_format(::TSCH::ScatterFormat value) {
  assert(::TSCH::ScatterFormat_IsValid(value));
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.scatter_format_ = value;
}
inline void ChartArchive::set_scatter_format(::TSCH::ScatterFormat value) {
  _internal_set_scatter_format(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.scatter_format)
}

// optional .TSCH.RectArchive legend_frame = 3;
inline bool ChartArchive::_internal_has_legend_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_frame_ != nullptr);
  return value;
}
inline bool ChartArchive::has_legend_frame() const {
  return _internal_has_legend_frame();
}
inline const ::TSCH::RectArchive& ChartArchive::_internal_legend_frame() const {
  const ::TSCH::RectArchive* p = _impl_.legend_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::RectArchive&>(
      ::TSCH::_RectArchive_default_instance_);
}
inline const ::TSCH::RectArchive& ChartArchive::legend_frame() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.legend_frame)
  return _internal_legend_frame();
}
inline void ChartArchive::unsafe_arena_set_allocated_legend_frame(
    ::TSCH::RectArchive* legend_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_frame_);
  }
  _impl_.legend_frame_ = legend_frame;
  if (legend_frame) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.legend_frame)
}
inline ::TSCH::RectArchive* ChartArchive::release_legend_frame() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::RectArchive* temp = _impl_.legend_frame_;
  _impl_.legend_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::RectArchive* ChartArchive::unsafe_arena_release_legend_frame() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.legend_frame)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::RectArchive* temp = _impl_.legend_frame_;
  _impl_.legend_frame_ = nullptr;
  return temp;
}
inline ::TSCH::RectArchive* ChartArchive::_internal_mutable_legend_frame() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.legend_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::RectArchive>(GetArenaForAllocation());
    _impl_.legend_frame_ = p;
  }
  return _impl_.legend_frame_;
}
inline ::TSCH::RectArchive* ChartArchive::mutable_legend_frame() {
  ::TSCH::RectArchive* _msg = _internal_mutable_legend_frame();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.legend_frame)
  return _msg;
}
inline void ChartArchive::set_allocated_legend_frame(::TSCH::RectArchive* legend_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_frame_);
  }
  if (legend_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_frame));
    if (message_arena != submessage_arena) {
      legend_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_frame, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.legend_frame_ = legend_frame;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.legend_frame)
}

// optional .TSP.Reference preset = 4;
inline bool ChartArchive::_internal_has_preset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.preset_ != nullptr);
  return value;
}
inline bool ChartArchive::has_preset() const {
  return _internal_has_preset();
}
inline const ::TSP::Reference& ChartArchive::_internal_preset() const {
  const ::TSP::Reference* p = _impl_.preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::preset() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.preset)
  return _internal_preset();
}
inline void ChartArchive::unsafe_arena_set_allocated_preset(
    ::TSP::Reference* preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_);
  }
  _impl_.preset_ = preset;
  if (preset) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.preset)
}
inline ::TSP::Reference* ChartArchive::release_preset() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.preset_;
  _impl_.preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_preset() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.preset)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.preset_;
  _impl_.preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_preset() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.preset_ = p;
  }
  return _impl_.preset_;
}
inline ::TSP::Reference* ChartArchive::mutable_preset() {
  ::TSP::Reference* _msg = _internal_mutable_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.preset)
  return _msg;
}
inline void ChartArchive::set_allocated_preset(::TSP::Reference* preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.preset_);
  }
  if (preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(preset));
    if (message_arena != submessage_arena) {
      preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, preset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.preset_ = preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.preset)
}

// optional .TSCH.SeriesDirection series_direction = 5;
inline bool ChartArchive::_internal_has_series_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ChartArchive::has_series_direction() const {
  return _internal_has_series_direction();
}
inline void ChartArchive::clear_series_direction() {
  _impl_.series_direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::TSCH::SeriesDirection ChartArchive::_internal_series_direction() const {
  return static_cast< ::TSCH::SeriesDirection >(_impl_.series_direction_);
}
inline ::TSCH::SeriesDirection ChartArchive::series_direction() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.series_direction)
  return _internal_series_direction();
}
inline void ChartArchive::_internal_set_series_direction(::TSCH::SeriesDirection value) {
  assert(::TSCH::SeriesDirection_IsValid(value));
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.series_direction_ = value;
}
inline void ChartArchive::set_series_direction(::TSCH::SeriesDirection value) {
  _internal_set_series_direction(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.series_direction)
}

// optional bool contains_default_data = 6;
inline bool ChartArchive::_internal_has_contains_default_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ChartArchive::has_contains_default_data() const {
  return _internal_has_contains_default_data();
}
inline void ChartArchive::clear_contains_default_data() {
  _impl_.contains_default_data_ = false;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline bool ChartArchive::_internal_contains_default_data() const {
  return _impl_.contains_default_data_;
}
inline bool ChartArchive::contains_default_data() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.contains_default_data)
  return _internal_contains_default_data();
}
inline void ChartArchive::_internal_set_contains_default_data(bool value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.contains_default_data_ = value;
}
inline void ChartArchive::set_contains_default_data(bool value) {
  _internal_set_contains_default_data(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.contains_default_data)
}

// optional .TSCH.ChartGridArchive grid = 7;
inline bool ChartArchive::_internal_has_grid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.grid_ != nullptr);
  return value;
}
inline bool ChartArchive::has_grid() const {
  return _internal_has_grid();
}
inline void ChartArchive::clear_grid() {
  if (_impl_.grid_ != nullptr) _impl_.grid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TSCH::ChartGridArchive& ChartArchive::_internal_grid() const {
  const ::TSCH::ChartGridArchive* p = _impl_.grid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartGridArchive&>(
      ::TSCH::_ChartGridArchive_default_instance_);
}
inline const ::TSCH::ChartGridArchive& ChartArchive::grid() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.grid)
  return _internal_grid();
}
inline void ChartArchive::unsafe_arena_set_allocated_grid(
    ::TSCH::ChartGridArchive* grid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.grid_);
  }
  _impl_.grid_ = grid;
  if (grid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.grid)
}
inline ::TSCH::ChartGridArchive* ChartArchive::release_grid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartGridArchive* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartGridArchive* ChartArchive::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.grid)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSCH::ChartGridArchive* temp = _impl_.grid_;
  _impl_.grid_ = nullptr;
  return temp;
}
inline ::TSCH::ChartGridArchive* ChartArchive::_internal_mutable_grid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartGridArchive>(GetArenaForAllocation());
    _impl_.grid_ = p;
  }
  return _impl_.grid_;
}
inline ::TSCH::ChartGridArchive* ChartArchive::mutable_grid() {
  ::TSCH::ChartGridArchive* _msg = _internal_mutable_grid();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.grid)
  return _msg;
}
inline void ChartArchive::set_allocated_grid(::TSCH::ChartGridArchive* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.grid)
}

// optional .TSP.Reference mediator = 8;
inline bool ChartArchive::_internal_has_mediator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.mediator_ != nullptr);
  return value;
}
inline bool ChartArchive::has_mediator() const {
  return _internal_has_mediator();
}
inline const ::TSP::Reference& ChartArchive::_internal_mediator() const {
  const ::TSP::Reference* p = _impl_.mediator_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::mediator() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.mediator)
  return _internal_mediator();
}
inline void ChartArchive::unsafe_arena_set_allocated_mediator(
    ::TSP::Reference* mediator) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mediator_);
  }
  _impl_.mediator_ = mediator;
  if (mediator) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.mediator)
}
inline ::TSP::Reference* ChartArchive::release_mediator() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.mediator_;
  _impl_.mediator_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_mediator() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.mediator)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.mediator_;
  _impl_.mediator_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_mediator() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.mediator_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.mediator_ = p;
  }
  return _impl_.mediator_;
}
inline ::TSP::Reference* ChartArchive::mutable_mediator() {
  ::TSP::Reference* _msg = _internal_mutable_mediator();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.mediator)
  return _msg;
}
inline void ChartArchive::set_allocated_mediator(::TSP::Reference* mediator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mediator_);
  }
  if (mediator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mediator));
    if (message_arena != submessage_arena) {
      mediator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mediator, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.mediator_ = mediator;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.mediator)
}

// optional .TSP.Reference chart_style = 9;
inline bool ChartArchive::_internal_has_chart_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_style_ != nullptr);
  return value;
}
inline bool ChartArchive::has_chart_style() const {
  return _internal_has_chart_style();
}
inline const ::TSP::Reference& ChartArchive::_internal_chart_style() const {
  const ::TSP::Reference* p = _impl_.chart_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::chart_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.chart_style)
  return _internal_chart_style();
}
inline void ChartArchive::unsafe_arena_set_allocated_chart_style(
    ::TSP::Reference* chart_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  _impl_.chart_style_ = chart_style;
  if (chart_style) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.chart_style)
}
inline ::TSP::Reference* ChartArchive::release_chart_style() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_chart_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.chart_style)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_chart_style() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.chart_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_style_ = p;
  }
  return _impl_.chart_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_chart_style() {
  ::TSP::Reference* _msg = _internal_mutable_chart_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.chart_style)
  return _msg;
}
inline void ChartArchive::set_allocated_chart_style(::TSP::Reference* chart_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  if (chart_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style));
    if (message_arena != submessage_arena) {
      chart_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.chart_style_ = chart_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.chart_style)
}

// optional .TSP.Reference chart_non_style = 10;
inline bool ChartArchive::_internal_has_chart_non_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_non_style_ != nullptr);
  return value;
}
inline bool ChartArchive::has_chart_non_style() const {
  return _internal_has_chart_non_style();
}
inline const ::TSP::Reference& ChartArchive::_internal_chart_non_style() const {
  const ::TSP::Reference* p = _impl_.chart_non_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::chart_non_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.chart_non_style)
  return _internal_chart_non_style();
}
inline void ChartArchive::unsafe_arena_set_allocated_chart_non_style(
    ::TSP::Reference* chart_non_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_non_style_);
  }
  _impl_.chart_non_style_ = chart_non_style;
  if (chart_non_style) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.chart_non_style)
}
inline ::TSP::Reference* ChartArchive::release_chart_non_style() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.chart_non_style_;
  _impl_.chart_non_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_chart_non_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.chart_non_style)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::Reference* temp = _impl_.chart_non_style_;
  _impl_.chart_non_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_chart_non_style() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.chart_non_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_non_style_ = p;
  }
  return _impl_.chart_non_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_chart_non_style() {
  ::TSP::Reference* _msg = _internal_mutable_chart_non_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.chart_non_style)
  return _msg;
}
inline void ChartArchive::set_allocated_chart_non_style(::TSP::Reference* chart_non_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_non_style_);
  }
  if (chart_non_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_non_style));
    if (message_arena != submessage_arena) {
      chart_non_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_non_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.chart_non_style_ = chart_non_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.chart_non_style)
}

// optional .TSP.Reference legend_style = 11;
inline bool ChartArchive::_internal_has_legend_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_style_ != nullptr);
  return value;
}
inline bool ChartArchive::has_legend_style() const {
  return _internal_has_legend_style();
}
inline const ::TSP::Reference& ChartArchive::_internal_legend_style() const {
  const ::TSP::Reference* p = _impl_.legend_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::legend_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.legend_style)
  return _internal_legend_style();
}
inline void ChartArchive::unsafe_arena_set_allocated_legend_style(
    ::TSP::Reference* legend_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  _impl_.legend_style_ = legend_style;
  if (legend_style) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.legend_style)
}
inline ::TSP::Reference* ChartArchive::release_legend_style() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_legend_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.legend_style)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_legend_style() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.legend_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.legend_style_ = p;
  }
  return _impl_.legend_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_legend_style() {
  ::TSP::Reference* _msg = _internal_mutable_legend_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.legend_style)
  return _msg;
}
inline void ChartArchive::set_allocated_legend_style(::TSP::Reference* legend_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  if (legend_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_style));
    if (message_arena != submessage_arena) {
      legend_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.legend_style_ = legend_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.legend_style)
}

// optional .TSP.Reference legend_non_style = 12;
inline bool ChartArchive::_internal_has_legend_non_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_non_style_ != nullptr);
  return value;
}
inline bool ChartArchive::has_legend_non_style() const {
  return _internal_has_legend_non_style();
}
inline const ::TSP::Reference& ChartArchive::_internal_legend_non_style() const {
  const ::TSP::Reference* p = _impl_.legend_non_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::legend_non_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.legend_non_style)
  return _internal_legend_non_style();
}
inline void ChartArchive::unsafe_arena_set_allocated_legend_non_style(
    ::TSP::Reference* legend_non_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_non_style_);
  }
  _impl_.legend_non_style_ = legend_non_style;
  if (legend_non_style) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.legend_non_style)
}
inline ::TSP::Reference* ChartArchive::release_legend_non_style() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.legend_non_style_;
  _impl_.legend_non_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_legend_non_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.legend_non_style)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::Reference* temp = _impl_.legend_non_style_;
  _impl_.legend_non_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_legend_non_style() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.legend_non_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.legend_non_style_ = p;
  }
  return _impl_.legend_non_style_;
}
inline ::TSP::Reference* ChartArchive::mutable_legend_non_style() {
  ::TSP::Reference* _msg = _internal_mutable_legend_non_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.legend_non_style)
  return _msg;
}
inline void ChartArchive::set_allocated_legend_non_style(::TSP::Reference* legend_non_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_non_style_);
  }
  if (legend_non_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_non_style));
    if (message_arena != submessage_arena) {
      legend_non_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_non_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.legend_non_style_ = legend_non_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.legend_non_style)
}

// repeated .TSP.Reference value_axis_styles = 13;
inline int ChartArchive::_internal_value_axis_styles_size() const {
  return _impl_.value_axis_styles_.size();
}
inline int ChartArchive::value_axis_styles_size() const {
  return _internal_value_axis_styles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_value_axis_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.value_axis_styles)
  return _impl_.value_axis_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_value_axis_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.value_axis_styles)
  return &_impl_.value_axis_styles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_value_axis_styles(int index) const {
  return _impl_.value_axis_styles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::value_axis_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.value_axis_styles)
  return _internal_value_axis_styles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_value_axis_styles() {
  return _impl_.value_axis_styles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_value_axis_styles() {
  ::TSP::Reference* _add = _internal_add_value_axis_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.value_axis_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::value_axis_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.value_axis_styles)
  return _impl_.value_axis_styles_;
}

// repeated .TSP.Reference value_axis_nonstyles = 14;
inline int ChartArchive::_internal_value_axis_nonstyles_size() const {
  return _impl_.value_axis_nonstyles_.size();
}
inline int ChartArchive::value_axis_nonstyles_size() const {
  return _internal_value_axis_nonstyles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_value_axis_nonstyles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.value_axis_nonstyles)
  return _impl_.value_axis_nonstyles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_value_axis_nonstyles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.value_axis_nonstyles)
  return &_impl_.value_axis_nonstyles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_value_axis_nonstyles(int index) const {
  return _impl_.value_axis_nonstyles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::value_axis_nonstyles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.value_axis_nonstyles)
  return _internal_value_axis_nonstyles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_value_axis_nonstyles() {
  return _impl_.value_axis_nonstyles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_value_axis_nonstyles() {
  ::TSP::Reference* _add = _internal_add_value_axis_nonstyles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.value_axis_nonstyles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::value_axis_nonstyles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.value_axis_nonstyles)
  return _impl_.value_axis_nonstyles_;
}

// repeated .TSP.Reference category_axis_styles = 15;
inline int ChartArchive::_internal_category_axis_styles_size() const {
  return _impl_.category_axis_styles_.size();
}
inline int ChartArchive::category_axis_styles_size() const {
  return _internal_category_axis_styles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_category_axis_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.category_axis_styles)
  return _impl_.category_axis_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_category_axis_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.category_axis_styles)
  return &_impl_.category_axis_styles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_category_axis_styles(int index) const {
  return _impl_.category_axis_styles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::category_axis_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.category_axis_styles)
  return _internal_category_axis_styles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_category_axis_styles() {
  return _impl_.category_axis_styles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_category_axis_styles() {
  ::TSP::Reference* _add = _internal_add_category_axis_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.category_axis_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::category_axis_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.category_axis_styles)
  return _impl_.category_axis_styles_;
}

// repeated .TSP.Reference category_axis_nonstyles = 16;
inline int ChartArchive::_internal_category_axis_nonstyles_size() const {
  return _impl_.category_axis_nonstyles_.size();
}
inline int ChartArchive::category_axis_nonstyles_size() const {
  return _internal_category_axis_nonstyles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_category_axis_nonstyles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.category_axis_nonstyles)
  return _impl_.category_axis_nonstyles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_category_axis_nonstyles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.category_axis_nonstyles)
  return &_impl_.category_axis_nonstyles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_category_axis_nonstyles(int index) const {
  return _impl_.category_axis_nonstyles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::category_axis_nonstyles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.category_axis_nonstyles)
  return _internal_category_axis_nonstyles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_category_axis_nonstyles() {
  return _impl_.category_axis_nonstyles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_category_axis_nonstyles() {
  ::TSP::Reference* _add = _internal_add_category_axis_nonstyles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.category_axis_nonstyles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::category_axis_nonstyles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.category_axis_nonstyles)
  return _impl_.category_axis_nonstyles_;
}

// repeated .TSP.Reference series_theme_styles = 17;
inline int ChartArchive::_internal_series_theme_styles_size() const {
  return _impl_.series_theme_styles_.size();
}
inline int ChartArchive::series_theme_styles_size() const {
  return _internal_series_theme_styles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_series_theme_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.series_theme_styles)
  return _impl_.series_theme_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_series_theme_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.series_theme_styles)
  return &_impl_.series_theme_styles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_series_theme_styles(int index) const {
  return _impl_.series_theme_styles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::series_theme_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.series_theme_styles)
  return _internal_series_theme_styles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_series_theme_styles() {
  return _impl_.series_theme_styles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_series_theme_styles() {
  ::TSP::Reference* _add = _internal_add_series_theme_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.series_theme_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::series_theme_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.series_theme_styles)
  return _impl_.series_theme_styles_;
}

// optional .TSP.SparseReferenceArray series_private_styles = 18;
inline bool ChartArchive::_internal_has_series_private_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.series_private_styles_ != nullptr);
  return value;
}
inline bool ChartArchive::has_series_private_styles() const {
  return _internal_has_series_private_styles();
}
inline const ::TSP::SparseReferenceArray& ChartArchive::_internal_series_private_styles() const {
  const ::TSP::SparseReferenceArray* p = _impl_.series_private_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& ChartArchive::series_private_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.series_private_styles)
  return _internal_series_private_styles();
}
inline void ChartArchive::unsafe_arena_set_allocated_series_private_styles(
    ::TSP::SparseReferenceArray* series_private_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_private_styles_);
  }
  _impl_.series_private_styles_ = series_private_styles;
  if (series_private_styles) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.series_private_styles)
}
inline ::TSP::SparseReferenceArray* ChartArchive::release_series_private_styles() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::SparseReferenceArray* temp = _impl_.series_private_styles_;
  _impl_.series_private_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::SparseReferenceArray* ChartArchive::unsafe_arena_release_series_private_styles() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.series_private_styles)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::SparseReferenceArray* temp = _impl_.series_private_styles_;
  _impl_.series_private_styles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* ChartArchive::_internal_mutable_series_private_styles() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.series_private_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArenaForAllocation());
    _impl_.series_private_styles_ = p;
  }
  return _impl_.series_private_styles_;
}
inline ::TSP::SparseReferenceArray* ChartArchive::mutable_series_private_styles() {
  ::TSP::SparseReferenceArray* _msg = _internal_mutable_series_private_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.series_private_styles)
  return _msg;
}
inline void ChartArchive::set_allocated_series_private_styles(::TSP::SparseReferenceArray* series_private_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_private_styles_);
  }
  if (series_private_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_private_styles));
    if (message_arena != submessage_arena) {
      series_private_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_private_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.series_private_styles_ = series_private_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.series_private_styles)
}

// optional .TSP.SparseReferenceArray series_non_styles = 19;
inline bool ChartArchive::_internal_has_series_non_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.series_non_styles_ != nullptr);
  return value;
}
inline bool ChartArchive::has_series_non_styles() const {
  return _internal_has_series_non_styles();
}
inline const ::TSP::SparseReferenceArray& ChartArchive::_internal_series_non_styles() const {
  const ::TSP::SparseReferenceArray* p = _impl_.series_non_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& ChartArchive::series_non_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.series_non_styles)
  return _internal_series_non_styles();
}
inline void ChartArchive::unsafe_arena_set_allocated_series_non_styles(
    ::TSP::SparseReferenceArray* series_non_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_non_styles_);
  }
  _impl_.series_non_styles_ = series_non_styles;
  if (series_non_styles) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.series_non_styles)
}
inline ::TSP::SparseReferenceArray* ChartArchive::release_series_non_styles() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::SparseReferenceArray* temp = _impl_.series_non_styles_;
  _impl_.series_non_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::SparseReferenceArray* ChartArchive::unsafe_arena_release_series_non_styles() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.series_non_styles)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::SparseReferenceArray* temp = _impl_.series_non_styles_;
  _impl_.series_non_styles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* ChartArchive::_internal_mutable_series_non_styles() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.series_non_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArenaForAllocation());
    _impl_.series_non_styles_ = p;
  }
  return _impl_.series_non_styles_;
}
inline ::TSP::SparseReferenceArray* ChartArchive::mutable_series_non_styles() {
  ::TSP::SparseReferenceArray* _msg = _internal_mutable_series_non_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.series_non_styles)
  return _msg;
}
inline void ChartArchive::set_allocated_series_non_styles(::TSP::SparseReferenceArray* series_non_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_non_styles_);
  }
  if (series_non_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_non_styles));
    if (message_arena != submessage_arena) {
      series_non_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_non_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.series_non_styles_ = series_non_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.series_non_styles)
}

// repeated .TSP.Reference paragraph_styles = 20;
inline int ChartArchive::_internal_paragraph_styles_size() const {
  return _impl_.paragraph_styles_.size();
}
inline int ChartArchive::paragraph_styles_size() const {
  return _internal_paragraph_styles_size();
}
inline ::TSP::Reference* ChartArchive::mutable_paragraph_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.paragraph_styles)
  return _impl_.paragraph_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartArchive::mutable_paragraph_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartArchive.paragraph_styles)
  return &_impl_.paragraph_styles_;
}
inline const ::TSP::Reference& ChartArchive::_internal_paragraph_styles(int index) const {
  return _impl_.paragraph_styles_.Get(index);
}
inline const ::TSP::Reference& ChartArchive::paragraph_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.paragraph_styles)
  return _internal_paragraph_styles(index);
}
inline ::TSP::Reference* ChartArchive::_internal_add_paragraph_styles() {
  return _impl_.paragraph_styles_.Add();
}
inline ::TSP::Reference* ChartArchive::add_paragraph_styles() {
  ::TSP::Reference* _add = _internal_add_paragraph_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartArchive.paragraph_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartArchive::paragraph_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartArchive.paragraph_styles)
  return _impl_.paragraph_styles_;
}

// optional uint32 multidataset_index = 21;
inline bool ChartArchive::_internal_has_multidataset_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ChartArchive::has_multidataset_index() const {
  return _internal_has_multidataset_index();
}
inline void ChartArchive::clear_multidataset_index() {
  _impl_.multidataset_index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline uint32_t ChartArchive::_internal_multidataset_index() const {
  return _impl_.multidataset_index_;
}
inline uint32_t ChartArchive::multidataset_index() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.multidataset_index)
  return _internal_multidataset_index();
}
inline void ChartArchive::_internal_set_multidataset_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.multidataset_index_ = value;
}
inline void ChartArchive::set_multidataset_index(uint32_t value) {
  _internal_set_multidataset_index(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.multidataset_index)
}

// optional bool needs_calc_engine_deferred_import_action = 22;
inline bool ChartArchive::_internal_has_needs_calc_engine_deferred_import_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ChartArchive::has_needs_calc_engine_deferred_import_action() const {
  return _internal_has_needs_calc_engine_deferred_import_action();
}
inline void ChartArchive::clear_needs_calc_engine_deferred_import_action() {
  _impl_.needs_calc_engine_deferred_import_action_ = false;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline bool ChartArchive::_internal_needs_calc_engine_deferred_import_action() const {
  return _impl_.needs_calc_engine_deferred_import_action_;
}
inline bool ChartArchive::needs_calc_engine_deferred_import_action() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.needs_calc_engine_deferred_import_action)
  return _internal_needs_calc_engine_deferred_import_action();
}
inline void ChartArchive::_internal_set_needs_calc_engine_deferred_import_action(bool value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.needs_calc_engine_deferred_import_action_ = value;
}
inline void ChartArchive::set_needs_calc_engine_deferred_import_action(bool value) {
  _internal_set_needs_calc_engine_deferred_import_action(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.needs_calc_engine_deferred_import_action)
}

// optional .TSP.Reference owned_preset = 23;
inline bool ChartArchive::_internal_has_owned_preset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.owned_preset_ != nullptr);
  return value;
}
inline bool ChartArchive::has_owned_preset() const {
  return _internal_has_owned_preset();
}
inline const ::TSP::Reference& ChartArchive::_internal_owned_preset() const {
  const ::TSP::Reference* p = _impl_.owned_preset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartArchive::owned_preset() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.owned_preset)
  return _internal_owned_preset();
}
inline void ChartArchive::unsafe_arena_set_allocated_owned_preset(
    ::TSP::Reference* owned_preset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owned_preset_);
  }
  _impl_.owned_preset_ = owned_preset;
  if (owned_preset) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartArchive.owned_preset)
}
inline ::TSP::Reference* ChartArchive::release_owned_preset() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = _impl_.owned_preset_;
  _impl_.owned_preset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartArchive::unsafe_arena_release_owned_preset() {
  // @@protoc_insertion_point(field_release:TSCH.ChartArchive.owned_preset)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::Reference* temp = _impl_.owned_preset_;
  _impl_.owned_preset_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartArchive::_internal_mutable_owned_preset() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.owned_preset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.owned_preset_ = p;
  }
  return _impl_.owned_preset_;
}
inline ::TSP::Reference* ChartArchive::mutable_owned_preset() {
  ::TSP::Reference* _msg = _internal_mutable_owned_preset();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartArchive.owned_preset)
  return _msg;
}
inline void ChartArchive::set_allocated_owned_preset(::TSP::Reference* owned_preset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.owned_preset_);
  }
  if (owned_preset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(owned_preset));
    if (message_arena != submessage_arena) {
      owned_preset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, owned_preset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.owned_preset_ = owned_preset;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartArchive.owned_preset)
}

// optional bool is_dirty = 24;
inline bool ChartArchive::_internal_has_is_dirty() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ChartArchive::has_is_dirty() const {
  return _internal_has_is_dirty();
}
inline void ChartArchive::clear_is_dirty() {
  _impl_.is_dirty_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool ChartArchive::_internal_is_dirty() const {
  return _impl_.is_dirty_;
}
inline bool ChartArchive::is_dirty() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartArchive.is_dirty)
  return _internal_is_dirty();
}
inline void ChartArchive::_internal_set_is_dirty(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.is_dirty_ = value;
}
inline void ChartArchive::set_is_dirty(bool value) {
  _internal_set_is_dirty(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartArchive.is_dirty)
}

// -------------------------------------------------------------------

// ChartMultiDataIndexUpgrade

// -------------------------------------------------------------------

// ChartGarlicMinMaxUpgrade

// optional double horizontal_min = 1;
inline bool ChartGarlicMinMaxUpgrade::_internal_has_horizontal_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartGarlicMinMaxUpgrade::has_horizontal_min() const {
  return _internal_has_horizontal_min();
}
inline void ChartGarlicMinMaxUpgrade::clear_horizontal_min() {
  _impl_.horizontal_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double ChartGarlicMinMaxUpgrade::_internal_horizontal_min() const {
  return _impl_.horizontal_min_;
}
inline double ChartGarlicMinMaxUpgrade::horizontal_min() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGarlicMinMaxUpgrade.horizontal_min)
  return _internal_horizontal_min();
}
inline void ChartGarlicMinMaxUpgrade::_internal_set_horizontal_min(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.horizontal_min_ = value;
}
inline void ChartGarlicMinMaxUpgrade::set_horizontal_min(double value) {
  _internal_set_horizontal_min(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGarlicMinMaxUpgrade.horizontal_min)
}

// optional double horizontal_max = 2;
inline bool ChartGarlicMinMaxUpgrade::_internal_has_horizontal_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartGarlicMinMaxUpgrade::has_horizontal_max() const {
  return _internal_has_horizontal_max();
}
inline void ChartGarlicMinMaxUpgrade::clear_horizontal_max() {
  _impl_.horizontal_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double ChartGarlicMinMaxUpgrade::_internal_horizontal_max() const {
  return _impl_.horizontal_max_;
}
inline double ChartGarlicMinMaxUpgrade::horizontal_max() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGarlicMinMaxUpgrade.horizontal_max)
  return _internal_horizontal_max();
}
inline void ChartGarlicMinMaxUpgrade::_internal_set_horizontal_max(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.horizontal_max_ = value;
}
inline void ChartGarlicMinMaxUpgrade::set_horizontal_max(double value) {
  _internal_set_horizontal_max(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGarlicMinMaxUpgrade.horizontal_max)
}

// optional double value_min = 3;
inline bool ChartGarlicMinMaxUpgrade::_internal_has_value_min() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChartGarlicMinMaxUpgrade::has_value_min() const {
  return _internal_has_value_min();
}
inline void ChartGarlicMinMaxUpgrade::clear_value_min() {
  _impl_.value_min_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double ChartGarlicMinMaxUpgrade::_internal_value_min() const {
  return _impl_.value_min_;
}
inline double ChartGarlicMinMaxUpgrade::value_min() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGarlicMinMaxUpgrade.value_min)
  return _internal_value_min();
}
inline void ChartGarlicMinMaxUpgrade::_internal_set_value_min(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.value_min_ = value;
}
inline void ChartGarlicMinMaxUpgrade::set_value_min(double value) {
  _internal_set_value_min(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGarlicMinMaxUpgrade.value_min)
}

// optional double value_max = 4;
inline bool ChartGarlicMinMaxUpgrade::_internal_has_value_max() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChartGarlicMinMaxUpgrade::has_value_max() const {
  return _internal_has_value_max();
}
inline void ChartGarlicMinMaxUpgrade::clear_value_max() {
  _impl_.value_max_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double ChartGarlicMinMaxUpgrade::_internal_value_max() const {
  return _impl_.value_max_;
}
inline double ChartGarlicMinMaxUpgrade::value_max() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGarlicMinMaxUpgrade.value_max)
  return _internal_value_max();
}
inline void ChartGarlicMinMaxUpgrade::_internal_set_value_max(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.value_max_ = value;
}
inline void ChartGarlicMinMaxUpgrade::set_value_max(double value) {
  _internal_set_value_max(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGarlicMinMaxUpgrade.value_max)
}

// -------------------------------------------------------------------

// ChartGarlicLabelFormatUpgrade

// optional string value_prefix = 1;
inline bool ChartGarlicLabelFormatUpgrade::_internal_has_value_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartGarlicLabelFormatUpgrade::has_value_prefix() const {
  return _internal_has_value_prefix();
}
inline void ChartGarlicLabelFormatUpgrade::clear_value_prefix() {
  _impl_.value_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartGarlicLabelFormatUpgrade::value_prefix() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGarlicLabelFormatUpgrade.value_prefix)
  return _internal_value_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartGarlicLabelFormatUpgrade::set_value_prefix(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.value_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartGarlicLabelFormatUpgrade.value_prefix)
}
inline std::string* ChartGarlicLabelFormatUpgrade::mutable_value_prefix() {
  std::string* _s = _internal_mutable_value_prefix();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGarlicLabelFormatUpgrade.value_prefix)
  return _s;
}
inline const std::string& ChartGarlicLabelFormatUpgrade::_internal_value_prefix() const {
  return _impl_.value_prefix_.Get();
}
inline void ChartGarlicLabelFormatUpgrade::_internal_set_value_prefix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.value_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartGarlicLabelFormatUpgrade::_internal_mutable_value_prefix() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.value_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartGarlicLabelFormatUpgrade::release_value_prefix() {
  // @@protoc_insertion_point(field_release:TSCH.ChartGarlicLabelFormatUpgrade.value_prefix)
  if (!_internal_has_value_prefix()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.value_prefix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_prefix_.IsDefault()) {
    _impl_.value_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartGarlicLabelFormatUpgrade::set_allocated_value_prefix(std::string* value_prefix) {
  if (value_prefix != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.value_prefix_.SetAllocated(value_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_prefix_.IsDefault()) {
    _impl_.value_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartGarlicLabelFormatUpgrade.value_prefix)
}

// optional string value_suffix = 2;
inline bool ChartGarlicLabelFormatUpgrade::_internal_has_value_suffix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartGarlicLabelFormatUpgrade::has_value_suffix() const {
  return _internal_has_value_suffix();
}
inline void ChartGarlicLabelFormatUpgrade::clear_value_suffix() {
  _impl_.value_suffix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChartGarlicLabelFormatUpgrade::value_suffix() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGarlicLabelFormatUpgrade.value_suffix)
  return _internal_value_suffix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartGarlicLabelFormatUpgrade::set_value_suffix(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_suffix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartGarlicLabelFormatUpgrade.value_suffix)
}
inline std::string* ChartGarlicLabelFormatUpgrade::mutable_value_suffix() {
  std::string* _s = _internal_mutable_value_suffix();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGarlicLabelFormatUpgrade.value_suffix)
  return _s;
}
inline const std::string& ChartGarlicLabelFormatUpgrade::_internal_value_suffix() const {
  return _impl_.value_suffix_.Get();
}
inline void ChartGarlicLabelFormatUpgrade::_internal_set_value_suffix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_suffix_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartGarlicLabelFormatUpgrade::_internal_mutable_value_suffix() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_suffix_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartGarlicLabelFormatUpgrade::release_value_suffix() {
  // @@protoc_insertion_point(field_release:TSCH.ChartGarlicLabelFormatUpgrade.value_suffix)
  if (!_internal_has_value_suffix()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_suffix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_suffix_.IsDefault()) {
    _impl_.value_suffix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartGarlicLabelFormatUpgrade::set_allocated_value_suffix(std::string* value_suffix) {
  if (value_suffix != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_suffix_.SetAllocated(value_suffix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_suffix_.IsDefault()) {
    _impl_.value_suffix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartGarlicLabelFormatUpgrade.value_suffix)
}

// optional bool value_use_separator = 3;
inline bool ChartGarlicLabelFormatUpgrade::_internal_has_value_use_separator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChartGarlicLabelFormatUpgrade::has_value_use_separator() const {
  return _internal_has_value_use_separator();
}
inline void ChartGarlicLabelFormatUpgrade::clear_value_use_separator() {
  _impl_.value_use_separator_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool ChartGarlicLabelFormatUpgrade::_internal_value_use_separator() const {
  return _impl_.value_use_separator_;
}
inline bool ChartGarlicLabelFormatUpgrade::value_use_separator() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGarlicLabelFormatUpgrade.value_use_separator)
  return _internal_value_use_separator();
}
inline void ChartGarlicLabelFormatUpgrade::_internal_set_value_use_separator(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.value_use_separator_ = value;
}
inline void ChartGarlicLabelFormatUpgrade::set_value_use_separator(bool value) {
  _internal_set_value_use_separator(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGarlicLabelFormatUpgrade.value_use_separator)
}

// optional string horizontal_prefix = 4;
inline bool ChartGarlicLabelFormatUpgrade::_internal_has_horizontal_prefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChartGarlicLabelFormatUpgrade::has_horizontal_prefix() const {
  return _internal_has_horizontal_prefix();
}
inline void ChartGarlicLabelFormatUpgrade::clear_horizontal_prefix() {
  _impl_.horizontal_prefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ChartGarlicLabelFormatUpgrade::horizontal_prefix() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_prefix)
  return _internal_horizontal_prefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartGarlicLabelFormatUpgrade::set_horizontal_prefix(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000004u;
 _impl_.horizontal_prefix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_prefix)
}
inline std::string* ChartGarlicLabelFormatUpgrade::mutable_horizontal_prefix() {
  std::string* _s = _internal_mutable_horizontal_prefix();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_prefix)
  return _s;
}
inline const std::string& ChartGarlicLabelFormatUpgrade::_internal_horizontal_prefix() const {
  return _impl_.horizontal_prefix_.Get();
}
inline void ChartGarlicLabelFormatUpgrade::_internal_set_horizontal_prefix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.horizontal_prefix_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartGarlicLabelFormatUpgrade::_internal_mutable_horizontal_prefix() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.horizontal_prefix_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartGarlicLabelFormatUpgrade::release_horizontal_prefix() {
  // @@protoc_insertion_point(field_release:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_prefix)
  if (!_internal_has_horizontal_prefix()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* p = _impl_.horizontal_prefix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.horizontal_prefix_.IsDefault()) {
    _impl_.horizontal_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartGarlicLabelFormatUpgrade::set_allocated_horizontal_prefix(std::string* horizontal_prefix) {
  if (horizontal_prefix != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.horizontal_prefix_.SetAllocated(horizontal_prefix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.horizontal_prefix_.IsDefault()) {
    _impl_.horizontal_prefix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_prefix)
}

// optional string horizontal_suffix = 5;
inline bool ChartGarlicLabelFormatUpgrade::_internal_has_horizontal_suffix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChartGarlicLabelFormatUpgrade::has_horizontal_suffix() const {
  return _internal_has_horizontal_suffix();
}
inline void ChartGarlicLabelFormatUpgrade::clear_horizontal_suffix() {
  _impl_.horizontal_suffix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ChartGarlicLabelFormatUpgrade::horizontal_suffix() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_suffix)
  return _internal_horizontal_suffix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartGarlicLabelFormatUpgrade::set_horizontal_suffix(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000008u;
 _impl_.horizontal_suffix_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_suffix)
}
inline std::string* ChartGarlicLabelFormatUpgrade::mutable_horizontal_suffix() {
  std::string* _s = _internal_mutable_horizontal_suffix();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_suffix)
  return _s;
}
inline const std::string& ChartGarlicLabelFormatUpgrade::_internal_horizontal_suffix() const {
  return _impl_.horizontal_suffix_.Get();
}
inline void ChartGarlicLabelFormatUpgrade::_internal_set_horizontal_suffix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.horizontal_suffix_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartGarlicLabelFormatUpgrade::_internal_mutable_horizontal_suffix() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.horizontal_suffix_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartGarlicLabelFormatUpgrade::release_horizontal_suffix() {
  // @@protoc_insertion_point(field_release:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_suffix)
  if (!_internal_has_horizontal_suffix()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* p = _impl_.horizontal_suffix_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.horizontal_suffix_.IsDefault()) {
    _impl_.horizontal_suffix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartGarlicLabelFormatUpgrade::set_allocated_horizontal_suffix(std::string* horizontal_suffix) {
  if (horizontal_suffix != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.horizontal_suffix_.SetAllocated(horizontal_suffix, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.horizontal_suffix_.IsDefault()) {
    _impl_.horizontal_suffix_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_suffix)
}

// optional bool horizontal_use_separator = 6;
inline bool ChartGarlicLabelFormatUpgrade::_internal_has_horizontal_use_separator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChartGarlicLabelFormatUpgrade::has_horizontal_use_separator() const {
  return _internal_has_horizontal_use_separator();
}
inline void ChartGarlicLabelFormatUpgrade::clear_horizontal_use_separator() {
  _impl_.horizontal_use_separator_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool ChartGarlicLabelFormatUpgrade::_internal_horizontal_use_separator() const {
  return _impl_.horizontal_use_separator_;
}
inline bool ChartGarlicLabelFormatUpgrade::horizontal_use_separator() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_use_separator)
  return _internal_horizontal_use_separator();
}
inline void ChartGarlicLabelFormatUpgrade::_internal_set_horizontal_use_separator(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.horizontal_use_separator_ = value;
}
inline void ChartGarlicLabelFormatUpgrade::set_horizontal_use_separator(bool value) {
  _internal_set_horizontal_use_separator(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGarlicLabelFormatUpgrade.horizontal_use_separator)
}

// -------------------------------------------------------------------

// ChartPasteboardAdditionsArchive

// -------------------------------------------------------------------

// ChartPreserveAppearanceForPresetArchive

// -------------------------------------------------------------------

// ChartSupportsProportionalBendedCalloutLinesArchive

// -------------------------------------------------------------------

// ChartSupportsRoundedCornersArchive

// -------------------------------------------------------------------

// ChartSupportsSeriesPropertySpacingArchive

// -------------------------------------------------------------------

// ChartGridArchive_ChartGridRowColumnIdMap_Entry

// required string uniqueId = 1;
inline bool ChartGridArchive_ChartGridRowColumnIdMap_Entry::_internal_has_uniqueid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartGridArchive_ChartGridRowColumnIdMap_Entry::has_uniqueid() const {
  return _internal_has_uniqueid();
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::clear_uniqueid() {
  _impl_.uniqueid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartGridArchive_ChartGridRowColumnIdMap_Entry::uniqueid() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry.uniqueId)
  return _internal_uniqueid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartGridArchive_ChartGridRowColumnIdMap_Entry::set_uniqueid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uniqueid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry.uniqueId)
}
inline std::string* ChartGridArchive_ChartGridRowColumnIdMap_Entry::mutable_uniqueid() {
  std::string* _s = _internal_mutable_uniqueid();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry.uniqueId)
  return _s;
}
inline const std::string& ChartGridArchive_ChartGridRowColumnIdMap_Entry::_internal_uniqueid() const {
  return _impl_.uniqueid_.Get();
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::_internal_set_uniqueid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uniqueid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartGridArchive_ChartGridRowColumnIdMap_Entry::_internal_mutable_uniqueid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uniqueid_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartGridArchive_ChartGridRowColumnIdMap_Entry::release_uniqueid() {
  // @@protoc_insertion_point(field_release:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry.uniqueId)
  if (!_internal_has_uniqueid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uniqueid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uniqueid_.IsDefault()) {
    _impl_.uniqueid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::set_allocated_uniqueid(std::string* uniqueid) {
  if (uniqueid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uniqueid_.SetAllocated(uniqueid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uniqueid_.IsDefault()) {
    _impl_.uniqueid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry.uniqueId)
}

// required uint32 index = 2;
inline bool ChartGridArchive_ChartGridRowColumnIdMap_Entry::_internal_has_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartGridArchive_ChartGridRowColumnIdMap_Entry::has_index() const {
  return _internal_has_index();
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::clear_index() {
  _impl_.index_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ChartGridArchive_ChartGridRowColumnIdMap_Entry::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t ChartGridArchive_ChartGridRowColumnIdMap_Entry::index() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry.index)
  return _internal_index();
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::_internal_set_index(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.index_ = value;
}
inline void ChartGridArchive_ChartGridRowColumnIdMap_Entry::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry.index)
}

// -------------------------------------------------------------------

// ChartGridArchive_ChartGridRowColumnIdMap

// repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry row_id_map = 1;
inline int ChartGridArchive_ChartGridRowColumnIdMap::_internal_row_id_map_size() const {
  return _impl_.row_id_map_.size();
}
inline int ChartGridArchive_ChartGridRowColumnIdMap::row_id_map_size() const {
  return _internal_row_id_map_size();
}
inline void ChartGridArchive_ChartGridRowColumnIdMap::clear_row_id_map() {
  _impl_.row_id_map_.Clear();
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap::mutable_row_id_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.row_id_map)
  return _impl_.row_id_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >*
ChartGridArchive_ChartGridRowColumnIdMap::mutable_row_id_map() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.row_id_map)
  return &_impl_.row_id_map_;
}
inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& ChartGridArchive_ChartGridRowColumnIdMap::_internal_row_id_map(int index) const {
  return _impl_.row_id_map_.Get(index);
}
inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& ChartGridArchive_ChartGridRowColumnIdMap::row_id_map(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.row_id_map)
  return _internal_row_id_map(index);
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap::_internal_add_row_id_map() {
  return _impl_.row_id_map_.Add();
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap::add_row_id_map() {
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* _add = _internal_add_row_id_map();
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.row_id_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >&
ChartGridArchive_ChartGridRowColumnIdMap::row_id_map() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.row_id_map)
  return _impl_.row_id_map_;
}

// repeated .TSCH.ChartGridArchive.ChartGridRowColumnIdMap.Entry column_id_map = 2;
inline int ChartGridArchive_ChartGridRowColumnIdMap::_internal_column_id_map_size() const {
  return _impl_.column_id_map_.size();
}
inline int ChartGridArchive_ChartGridRowColumnIdMap::column_id_map_size() const {
  return _internal_column_id_map_size();
}
inline void ChartGridArchive_ChartGridRowColumnIdMap::clear_column_id_map() {
  _impl_.column_id_map_.Clear();
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap::mutable_column_id_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.column_id_map)
  return _impl_.column_id_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >*
ChartGridArchive_ChartGridRowColumnIdMap::mutable_column_id_map() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.column_id_map)
  return &_impl_.column_id_map_;
}
inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& ChartGridArchive_ChartGridRowColumnIdMap::_internal_column_id_map(int index) const {
  return _impl_.column_id_map_.Get(index);
}
inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry& ChartGridArchive_ChartGridRowColumnIdMap::column_id_map(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.column_id_map)
  return _internal_column_id_map(index);
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap::_internal_add_column_id_map() {
  return _impl_.column_id_map_.Add();
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* ChartGridArchive_ChartGridRowColumnIdMap::add_column_id_map() {
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry* _add = _internal_add_column_id_map();
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.column_id_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap_Entry >&
ChartGridArchive_ChartGridRowColumnIdMap::column_id_map() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartGridArchive.ChartGridRowColumnIdMap.column_id_map)
  return _impl_.column_id_map_;
}

// -------------------------------------------------------------------

// ChartGridArchive

// repeated string row_name = 1;
inline int ChartGridArchive::_internal_row_name_size() const {
  return _impl_.row_name_.size();
}
inline int ChartGridArchive::row_name_size() const {
  return _internal_row_name_size();
}
inline void ChartGridArchive::clear_row_name() {
  _impl_.row_name_.Clear();
}
inline std::string* ChartGridArchive::add_row_name() {
  std::string* _s = _internal_add_row_name();
  // @@protoc_insertion_point(field_add_mutable:TSCH.ChartGridArchive.row_name)
  return _s;
}
inline const std::string& ChartGridArchive::_internal_row_name(int index) const {
  return _impl_.row_name_.Get(index);
}
inline const std::string& ChartGridArchive::row_name(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.row_name)
  return _internal_row_name(index);
}
inline std::string* ChartGridArchive::mutable_row_name(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGridArchive.row_name)
  return _impl_.row_name_.Mutable(index);
}
inline void ChartGridArchive::set_row_name(int index, const std::string& value) {
  _impl_.row_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::set_row_name(int index, std::string&& value) {
  _impl_.row_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::set_row_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.row_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::set_row_name(int index, const char* value, size_t size) {
  _impl_.row_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.ChartGridArchive.row_name)
}
inline std::string* ChartGridArchive::_internal_add_row_name() {
  return _impl_.row_name_.Add();
}
inline void ChartGridArchive::add_row_name(const std::string& value) {
  _impl_.row_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::add_row_name(std::string&& value) {
  _impl_.row_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::add_row_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.row_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.ChartGridArchive.row_name)
}
inline void ChartGridArchive::add_row_name(const char* value, size_t size) {
  _impl_.row_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.ChartGridArchive.row_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChartGridArchive::row_name() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartGridArchive.row_name)
  return _impl_.row_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChartGridArchive::mutable_row_name() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartGridArchive.row_name)
  return &_impl_.row_name_;
}

// repeated string column_name = 2;
inline int ChartGridArchive::_internal_column_name_size() const {
  return _impl_.column_name_.size();
}
inline int ChartGridArchive::column_name_size() const {
  return _internal_column_name_size();
}
inline void ChartGridArchive::clear_column_name() {
  _impl_.column_name_.Clear();
}
inline std::string* ChartGridArchive::add_column_name() {
  std::string* _s = _internal_add_column_name();
  // @@protoc_insertion_point(field_add_mutable:TSCH.ChartGridArchive.column_name)
  return _s;
}
inline const std::string& ChartGridArchive::_internal_column_name(int index) const {
  return _impl_.column_name_.Get(index);
}
inline const std::string& ChartGridArchive::column_name(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.column_name)
  return _internal_column_name(index);
}
inline std::string* ChartGridArchive::mutable_column_name(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGridArchive.column_name)
  return _impl_.column_name_.Mutable(index);
}
inline void ChartGridArchive::set_column_name(int index, const std::string& value) {
  _impl_.column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::set_column_name(int index, std::string&& value) {
  _impl_.column_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::set_column_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.column_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::set_column_name(int index, const char* value, size_t size) {
  _impl_.column_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TSCH.ChartGridArchive.column_name)
}
inline std::string* ChartGridArchive::_internal_add_column_name() {
  return _impl_.column_name_.Add();
}
inline void ChartGridArchive::add_column_name(const std::string& value) {
  _impl_.column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::add_column_name(std::string&& value) {
  _impl_.column_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::add_column_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.column_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TSCH.ChartGridArchive.column_name)
}
inline void ChartGridArchive::add_column_name(const char* value, size_t size) {
  _impl_.column_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TSCH.ChartGridArchive.column_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChartGridArchive::column_name() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartGridArchive.column_name)
  return _impl_.column_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChartGridArchive::mutable_column_name() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartGridArchive.column_name)
  return &_impl_.column_name_;
}

// repeated .TSCH.GridRow grid_row = 3;
inline int ChartGridArchive::_internal_grid_row_size() const {
  return _impl_.grid_row_.size();
}
inline int ChartGridArchive::grid_row_size() const {
  return _internal_grid_row_size();
}
inline ::TSCH::GridRow* ChartGridArchive::mutable_grid_row(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGridArchive.grid_row)
  return _impl_.grid_row_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >*
ChartGridArchive::mutable_grid_row() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartGridArchive.grid_row)
  return &_impl_.grid_row_;
}
inline const ::TSCH::GridRow& ChartGridArchive::_internal_grid_row(int index) const {
  return _impl_.grid_row_.Get(index);
}
inline const ::TSCH::GridRow& ChartGridArchive::grid_row(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.grid_row)
  return _internal_grid_row(index);
}
inline ::TSCH::GridRow* ChartGridArchive::_internal_add_grid_row() {
  return _impl_.grid_row_.Add();
}
inline ::TSCH::GridRow* ChartGridArchive::add_grid_row() {
  ::TSCH::GridRow* _add = _internal_add_grid_row();
  // @@protoc_insertion_point(field_add:TSCH.ChartGridArchive.grid_row)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::GridRow >&
ChartGridArchive::grid_row() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartGridArchive.grid_row)
  return _impl_.grid_row_;
}

// optional .TSCH.ChartGridArchive.ChartGridRowColumnIdMap idMap = 4;
inline bool ChartGridArchive::_internal_has_idmap() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.idmap_ != nullptr);
  return value;
}
inline bool ChartGridArchive::has_idmap() const {
  return _internal_has_idmap();
}
inline void ChartGridArchive::clear_idmap() {
  if (_impl_.idmap_ != nullptr) _impl_.idmap_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap& ChartGridArchive::_internal_idmap() const {
  const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* p = _impl_.idmap_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap&>(
      ::TSCH::_ChartGridArchive_ChartGridRowColumnIdMap_default_instance_);
}
inline const ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap& ChartGridArchive::idmap() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartGridArchive.idMap)
  return _internal_idmap();
}
inline void ChartGridArchive::unsafe_arena_set_allocated_idmap(
    ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* idmap) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.idmap_);
  }
  _impl_.idmap_ = idmap;
  if (idmap) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartGridArchive.idMap)
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* ChartGridArchive::release_idmap() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* temp = _impl_.idmap_;
  _impl_.idmap_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* ChartGridArchive::unsafe_arena_release_idmap() {
  // @@protoc_insertion_point(field_release:TSCH.ChartGridArchive.idMap)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* temp = _impl_.idmap_;
  _impl_.idmap_ = nullptr;
  return temp;
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* ChartGridArchive::_internal_mutable_idmap() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.idmap_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartGridArchive_ChartGridRowColumnIdMap>(GetArenaForAllocation());
    _impl_.idmap_ = p;
  }
  return _impl_.idmap_;
}
inline ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* ChartGridArchive::mutable_idmap() {
  ::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* _msg = _internal_mutable_idmap();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartGridArchive.idMap)
  return _msg;
}
inline void ChartGridArchive::set_allocated_idmap(::TSCH::ChartGridArchive_ChartGridRowColumnIdMap* idmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.idmap_;
  }
  if (idmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(idmap);
    if (message_arena != submessage_arena) {
      idmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, idmap, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.idmap_ = idmap;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartGridArchive.idMap)
}

// -------------------------------------------------------------------

// ChartMediatorArchive

// optional .TSP.Reference info = 1;
inline bool ChartMediatorArchive::_internal_has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline bool ChartMediatorArchive::has_info() const {
  return _internal_has_info();
}
inline const ::TSP::Reference& ChartMediatorArchive::_internal_info() const {
  const ::TSP::Reference* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartMediatorArchive::info() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartMediatorArchive.info)
  return _internal_info();
}
inline void ChartMediatorArchive::unsafe_arena_set_allocated_info(
    ::TSP::Reference* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartMediatorArchive.info)
}
inline ::TSP::Reference* ChartMediatorArchive::release_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartMediatorArchive::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:TSCH.ChartMediatorArchive.info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartMediatorArchive::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::TSP::Reference* ChartMediatorArchive::mutable_info() {
  ::TSP::Reference* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartMediatorArchive.info)
  return _msg;
}
inline void ChartMediatorArchive::set_allocated_info(::TSP::Reference* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info));
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartMediatorArchive.info)
}

// repeated uint32 local_series_indexes = 2;
inline int ChartMediatorArchive::_internal_local_series_indexes_size() const {
  return _impl_.local_series_indexes_.size();
}
inline int ChartMediatorArchive::local_series_indexes_size() const {
  return _internal_local_series_indexes_size();
}
inline void ChartMediatorArchive::clear_local_series_indexes() {
  _impl_.local_series_indexes_.Clear();
}
inline uint32_t ChartMediatorArchive::_internal_local_series_indexes(int index) const {
  return _impl_.local_series_indexes_.Get(index);
}
inline uint32_t ChartMediatorArchive::local_series_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartMediatorArchive.local_series_indexes)
  return _internal_local_series_indexes(index);
}
inline void ChartMediatorArchive::set_local_series_indexes(int index, uint32_t value) {
  _impl_.local_series_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.ChartMediatorArchive.local_series_indexes)
}
inline void ChartMediatorArchive::_internal_add_local_series_indexes(uint32_t value) {
  _impl_.local_series_indexes_.Add(value);
}
inline void ChartMediatorArchive::add_local_series_indexes(uint32_t value) {
  _internal_add_local_series_indexes(value);
  // @@protoc_insertion_point(field_add:TSCH.ChartMediatorArchive.local_series_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChartMediatorArchive::_internal_local_series_indexes() const {
  return _impl_.local_series_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChartMediatorArchive::local_series_indexes() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartMediatorArchive.local_series_indexes)
  return _internal_local_series_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChartMediatorArchive::_internal_mutable_local_series_indexes() {
  return &_impl_.local_series_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChartMediatorArchive::mutable_local_series_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartMediatorArchive.local_series_indexes)
  return _internal_mutable_local_series_indexes();
}

// repeated uint32 remote_series_indexes = 3;
inline int ChartMediatorArchive::_internal_remote_series_indexes_size() const {
  return _impl_.remote_series_indexes_.size();
}
inline int ChartMediatorArchive::remote_series_indexes_size() const {
  return _internal_remote_series_indexes_size();
}
inline void ChartMediatorArchive::clear_remote_series_indexes() {
  _impl_.remote_series_indexes_.Clear();
}
inline uint32_t ChartMediatorArchive::_internal_remote_series_indexes(int index) const {
  return _impl_.remote_series_indexes_.Get(index);
}
inline uint32_t ChartMediatorArchive::remote_series_indexes(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartMediatorArchive.remote_series_indexes)
  return _internal_remote_series_indexes(index);
}
inline void ChartMediatorArchive::set_remote_series_indexes(int index, uint32_t value) {
  _impl_.remote_series_indexes_.Set(index, value);
  // @@protoc_insertion_point(field_set:TSCH.ChartMediatorArchive.remote_series_indexes)
}
inline void ChartMediatorArchive::_internal_add_remote_series_indexes(uint32_t value) {
  _impl_.remote_series_indexes_.Add(value);
}
inline void ChartMediatorArchive::add_remote_series_indexes(uint32_t value) {
  _internal_add_remote_series_indexes(value);
  // @@protoc_insertion_point(field_add:TSCH.ChartMediatorArchive.remote_series_indexes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChartMediatorArchive::_internal_remote_series_indexes() const {
  return _impl_.remote_series_indexes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ChartMediatorArchive::remote_series_indexes() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartMediatorArchive.remote_series_indexes)
  return _internal_remote_series_indexes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChartMediatorArchive::_internal_mutable_remote_series_indexes() {
  return &_impl_.remote_series_indexes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ChartMediatorArchive::mutable_remote_series_indexes() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartMediatorArchive.remote_series_indexes)
  return _internal_mutable_remote_series_indexes();
}

// -------------------------------------------------------------------

// ChartFillSetArchive

// required string identifier = 1;
inline bool ChartFillSetArchive::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartFillSetArchive::has_identifier() const {
  return _internal_has_identifier();
}
inline void ChartFillSetArchive::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartFillSetArchive::identifier() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartFillSetArchive.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartFillSetArchive::set_identifier(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartFillSetArchive.identifier)
}
inline std::string* ChartFillSetArchive::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartFillSetArchive.identifier)
  return _s;
}
inline const std::string& ChartFillSetArchive::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void ChartFillSetArchive::_internal_set_identifier(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartFillSetArchive::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartFillSetArchive::release_identifier() {
  // @@protoc_insertion_point(field_release:TSCH.ChartFillSetArchive.identifier)
  if (!_internal_has_identifier()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identifier_.IsDefault()) {
    _impl_.identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartFillSetArchive::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_.SetAllocated(identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identifier_.IsDefault()) {
    _impl_.identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartFillSetArchive.identifier)
}

// required string lookup_string = 2;
inline bool ChartFillSetArchive::_internal_has_lookup_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartFillSetArchive::has_lookup_string() const {
  return _internal_has_lookup_string();
}
inline void ChartFillSetArchive::clear_lookup_string() {
  _impl_.lookup_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChartFillSetArchive::lookup_string() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartFillSetArchive.lookup_string)
  return _internal_lookup_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartFillSetArchive::set_lookup_string(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.lookup_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartFillSetArchive.lookup_string)
}
inline std::string* ChartFillSetArchive::mutable_lookup_string() {
  std::string* _s = _internal_mutable_lookup_string();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartFillSetArchive.lookup_string)
  return _s;
}
inline const std::string& ChartFillSetArchive::_internal_lookup_string() const {
  return _impl_.lookup_string_.Get();
}
inline void ChartFillSetArchive::_internal_set_lookup_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lookup_string_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartFillSetArchive::_internal_mutable_lookup_string() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.lookup_string_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartFillSetArchive::release_lookup_string() {
  // @@protoc_insertion_point(field_release:TSCH.ChartFillSetArchive.lookup_string)
  if (!_internal_has_lookup_string()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.lookup_string_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lookup_string_.IsDefault()) {
    _impl_.lookup_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartFillSetArchive::set_allocated_lookup_string(std::string* lookup_string) {
  if (lookup_string != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.lookup_string_.SetAllocated(lookup_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lookup_string_.IsDefault()) {
    _impl_.lookup_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartFillSetArchive.lookup_string)
}

// optional uint32 number_of_theme_series_styles = 3;
inline bool ChartFillSetArchive::_internal_has_number_of_theme_series_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChartFillSetArchive::has_number_of_theme_series_styles() const {
  return _internal_has_number_of_theme_series_styles();
}
inline void ChartFillSetArchive::clear_number_of_theme_series_styles() {
  _impl_.number_of_theme_series_styles_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ChartFillSetArchive::_internal_number_of_theme_series_styles() const {
  return _impl_.number_of_theme_series_styles_;
}
inline uint32_t ChartFillSetArchive::number_of_theme_series_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartFillSetArchive.number_of_theme_series_styles)
  return _internal_number_of_theme_series_styles();
}
inline void ChartFillSetArchive::_internal_set_number_of_theme_series_styles(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.number_of_theme_series_styles_ = value;
}
inline void ChartFillSetArchive::set_number_of_theme_series_styles(uint32_t value) {
  _internal_set_number_of_theme_series_styles(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartFillSetArchive.number_of_theme_series_styles)
}

// repeated .TSP.Reference series_styles = 4;
inline int ChartFillSetArchive::_internal_series_styles_size() const {
  return _impl_.series_styles_.size();
}
inline int ChartFillSetArchive::series_styles_size() const {
  return _internal_series_styles_size();
}
inline ::TSP::Reference* ChartFillSetArchive::mutable_series_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartFillSetArchive.series_styles)
  return _impl_.series_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartFillSetArchive::mutable_series_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartFillSetArchive.series_styles)
  return &_impl_.series_styles_;
}
inline const ::TSP::Reference& ChartFillSetArchive::_internal_series_styles(int index) const {
  return _impl_.series_styles_.Get(index);
}
inline const ::TSP::Reference& ChartFillSetArchive::series_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartFillSetArchive.series_styles)
  return _internal_series_styles(index);
}
inline ::TSP::Reference* ChartFillSetArchive::_internal_add_series_styles() {
  return _impl_.series_styles_.Add();
}
inline ::TSP::Reference* ChartFillSetArchive::add_series_styles() {
  ::TSP::Reference* _add = _internal_add_series_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartFillSetArchive.series_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartFillSetArchive::series_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartFillSetArchive.series_styles)
  return _impl_.series_styles_;
}

// -------------------------------------------------------------------

// ChartStylePreset

// optional .TSP.Reference chart_style = 1;
inline bool ChartStylePreset::_internal_has_chart_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_style_ != nullptr);
  return value;
}
inline bool ChartStylePreset::has_chart_style() const {
  return _internal_has_chart_style();
}
inline const ::TSP::Reference& ChartStylePreset::_internal_chart_style() const {
  const ::TSP::Reference* p = _impl_.chart_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartStylePreset::chart_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.chart_style)
  return _internal_chart_style();
}
inline void ChartStylePreset::unsafe_arena_set_allocated_chart_style(
    ::TSP::Reference* chart_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  _impl_.chart_style_ = chart_style;
  if (chart_style) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartStylePreset.chart_style)
}
inline ::TSP::Reference* ChartStylePreset::release_chart_style() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartStylePreset::unsafe_arena_release_chart_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartStylePreset.chart_style)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartStylePreset::_internal_mutable_chart_style() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.chart_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_style_ = p;
  }
  return _impl_.chart_style_;
}
inline ::TSP::Reference* ChartStylePreset::mutable_chart_style() {
  ::TSP::Reference* _msg = _internal_mutable_chart_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.chart_style)
  return _msg;
}
inline void ChartStylePreset::set_allocated_chart_style(::TSP::Reference* chart_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  if (chart_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style));
    if (message_arena != submessage_arena) {
      chart_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.chart_style_ = chart_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartStylePreset.chart_style)
}

// optional .TSP.Reference legend_style = 2;
inline bool ChartStylePreset::_internal_has_legend_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_style_ != nullptr);
  return value;
}
inline bool ChartStylePreset::has_legend_style() const {
  return _internal_has_legend_style();
}
inline const ::TSP::Reference& ChartStylePreset::_internal_legend_style() const {
  const ::TSP::Reference* p = _impl_.legend_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartStylePreset::legend_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.legend_style)
  return _internal_legend_style();
}
inline void ChartStylePreset::unsafe_arena_set_allocated_legend_style(
    ::TSP::Reference* legend_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  _impl_.legend_style_ = legend_style;
  if (legend_style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartStylePreset.legend_style)
}
inline ::TSP::Reference* ChartStylePreset::release_legend_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartStylePreset::unsafe_arena_release_legend_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartStylePreset.legend_style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartStylePreset::_internal_mutable_legend_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.legend_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.legend_style_ = p;
  }
  return _impl_.legend_style_;
}
inline ::TSP::Reference* ChartStylePreset::mutable_legend_style() {
  ::TSP::Reference* _msg = _internal_mutable_legend_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.legend_style)
  return _msg;
}
inline void ChartStylePreset::set_allocated_legend_style(::TSP::Reference* legend_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  if (legend_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_style));
    if (message_arena != submessage_arena) {
      legend_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.legend_style_ = legend_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartStylePreset.legend_style)
}

// repeated .TSP.Reference value_axis_styles = 3;
inline int ChartStylePreset::_internal_value_axis_styles_size() const {
  return _impl_.value_axis_styles_.size();
}
inline int ChartStylePreset::value_axis_styles_size() const {
  return _internal_value_axis_styles_size();
}
inline ::TSP::Reference* ChartStylePreset::mutable_value_axis_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.value_axis_styles)
  return _impl_.value_axis_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_value_axis_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartStylePreset.value_axis_styles)
  return &_impl_.value_axis_styles_;
}
inline const ::TSP::Reference& ChartStylePreset::_internal_value_axis_styles(int index) const {
  return _impl_.value_axis_styles_.Get(index);
}
inline const ::TSP::Reference& ChartStylePreset::value_axis_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.value_axis_styles)
  return _internal_value_axis_styles(index);
}
inline ::TSP::Reference* ChartStylePreset::_internal_add_value_axis_styles() {
  return _impl_.value_axis_styles_.Add();
}
inline ::TSP::Reference* ChartStylePreset::add_value_axis_styles() {
  ::TSP::Reference* _add = _internal_add_value_axis_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartStylePreset.value_axis_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::value_axis_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartStylePreset.value_axis_styles)
  return _impl_.value_axis_styles_;
}

// repeated .TSP.Reference category_axis_styles = 4;
inline int ChartStylePreset::_internal_category_axis_styles_size() const {
  return _impl_.category_axis_styles_.size();
}
inline int ChartStylePreset::category_axis_styles_size() const {
  return _internal_category_axis_styles_size();
}
inline ::TSP::Reference* ChartStylePreset::mutable_category_axis_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.category_axis_styles)
  return _impl_.category_axis_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_category_axis_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartStylePreset.category_axis_styles)
  return &_impl_.category_axis_styles_;
}
inline const ::TSP::Reference& ChartStylePreset::_internal_category_axis_styles(int index) const {
  return _impl_.category_axis_styles_.Get(index);
}
inline const ::TSP::Reference& ChartStylePreset::category_axis_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.category_axis_styles)
  return _internal_category_axis_styles(index);
}
inline ::TSP::Reference* ChartStylePreset::_internal_add_category_axis_styles() {
  return _impl_.category_axis_styles_.Add();
}
inline ::TSP::Reference* ChartStylePreset::add_category_axis_styles() {
  ::TSP::Reference* _add = _internal_add_category_axis_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartStylePreset.category_axis_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::category_axis_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartStylePreset.category_axis_styles)
  return _impl_.category_axis_styles_;
}

// repeated .TSP.Reference series_styles = 5;
inline int ChartStylePreset::_internal_series_styles_size() const {
  return _impl_.series_styles_.size();
}
inline int ChartStylePreset::series_styles_size() const {
  return _internal_series_styles_size();
}
inline ::TSP::Reference* ChartStylePreset::mutable_series_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.series_styles)
  return _impl_.series_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_series_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartStylePreset.series_styles)
  return &_impl_.series_styles_;
}
inline const ::TSP::Reference& ChartStylePreset::_internal_series_styles(int index) const {
  return _impl_.series_styles_.Get(index);
}
inline const ::TSP::Reference& ChartStylePreset::series_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.series_styles)
  return _internal_series_styles(index);
}
inline ::TSP::Reference* ChartStylePreset::_internal_add_series_styles() {
  return _impl_.series_styles_.Add();
}
inline ::TSP::Reference* ChartStylePreset::add_series_styles() {
  ::TSP::Reference* _add = _internal_add_series_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartStylePreset.series_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::series_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartStylePreset.series_styles)
  return _impl_.series_styles_;
}

// repeated .TSP.Reference paragraph_styles = 6;
inline int ChartStylePreset::_internal_paragraph_styles_size() const {
  return _impl_.paragraph_styles_.size();
}
inline int ChartStylePreset::paragraph_styles_size() const {
  return _internal_paragraph_styles_size();
}
inline ::TSP::Reference* ChartStylePreset::mutable_paragraph_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.paragraph_styles)
  return _impl_.paragraph_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartStylePreset::mutable_paragraph_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartStylePreset.paragraph_styles)
  return &_impl_.paragraph_styles_;
}
inline const ::TSP::Reference& ChartStylePreset::_internal_paragraph_styles(int index) const {
  return _impl_.paragraph_styles_.Get(index);
}
inline const ::TSP::Reference& ChartStylePreset::paragraph_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.paragraph_styles)
  return _internal_paragraph_styles(index);
}
inline ::TSP::Reference* ChartStylePreset::_internal_add_paragraph_styles() {
  return _impl_.paragraph_styles_.Add();
}
inline ::TSP::Reference* ChartStylePreset::add_paragraph_styles() {
  ::TSP::Reference* _add = _internal_add_paragraph_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartStylePreset.paragraph_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartStylePreset::paragraph_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartStylePreset.paragraph_styles)
  return _impl_.paragraph_styles_;
}

// optional bytes uuid = 7;
inline bool ChartStylePreset::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartStylePreset::has_uuid() const {
  return _internal_has_uuid();
}
inline void ChartStylePreset::clear_uuid() {
  _impl_.uuid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartStylePreset::uuid() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartStylePreset.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartStylePreset::set_uuid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartStylePreset.uuid)
}
inline std::string* ChartStylePreset::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartStylePreset.uuid)
  return _s;
}
inline const std::string& ChartStylePreset::_internal_uuid() const {
  return _impl_.uuid_.Get();
}
inline void ChartStylePreset::_internal_set_uuid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartStylePreset::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartStylePreset::release_uuid() {
  // @@protoc_insertion_point(field_release:TSCH.ChartStylePreset.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartStylePreset::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uuid_.IsDefault()) {
    _impl_.uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartStylePreset.uuid)
}

// -------------------------------------------------------------------

// ChartPresetsArchive

// repeated .TSP.Reference chart_presets = 1;
inline int ChartPresetsArchive::_internal_chart_presets_size() const {
  return _impl_.chart_presets_.size();
}
inline int ChartPresetsArchive::chart_presets_size() const {
  return _internal_chart_presets_size();
}
inline ::TSP::Reference* ChartPresetsArchive::mutable_chart_presets(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartPresetsArchive.chart_presets)
  return _impl_.chart_presets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartPresetsArchive::mutable_chart_presets() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartPresetsArchive.chart_presets)
  return &_impl_.chart_presets_;
}
inline const ::TSP::Reference& ChartPresetsArchive::_internal_chart_presets(int index) const {
  return _impl_.chart_presets_.Get(index);
}
inline const ::TSP::Reference& ChartPresetsArchive::chart_presets(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartPresetsArchive.chart_presets)
  return _internal_chart_presets(index);
}
inline ::TSP::Reference* ChartPresetsArchive::_internal_add_chart_presets() {
  return _impl_.chart_presets_.Add();
}
inline ::TSP::Reference* ChartPresetsArchive::add_chart_presets() {
  ::TSP::Reference* _add = _internal_add_chart_presets();
  // @@protoc_insertion_point(field_add:TSCH.ChartPresetsArchive.chart_presets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartPresetsArchive::chart_presets() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartPresetsArchive.chart_presets)
  return _impl_.chart_presets_;
}

// -------------------------------------------------------------------

// PropertyValueStorageContainerArchive

// optional .TSP.Reference chart_style = 1;
inline bool PropertyValueStorageContainerArchive::_internal_has_chart_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_style_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_chart_style() const {
  return _internal_has_chart_style();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::_internal_chart_style() const {
  const ::TSP::Reference* p = _impl_.chart_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::chart_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.chart_style)
  return _internal_chart_style();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_chart_style(
    ::TSP::Reference* chart_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  _impl_.chart_style_ = chart_style;
  if (chart_style) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.chart_style)
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_chart_style() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::unsafe_arena_release_chart_style() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.chart_style)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_style_;
  _impl_.chart_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::_internal_mutable_chart_style() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chart_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_style_ = p;
  }
  return _impl_.chart_style_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_chart_style() {
  ::TSP::Reference* _msg = _internal_mutable_chart_style();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.chart_style)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_chart_style(::TSP::Reference* chart_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_style_);
  }
  if (chart_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_style));
    if (message_arena != submessage_arena) {
      chart_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chart_style_ = chart_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.chart_style)
}

// optional .TSP.Reference chart_nonstyle = 2;
inline bool PropertyValueStorageContainerArchive::_internal_has_chart_nonstyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_nonstyle_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_chart_nonstyle() const {
  return _internal_has_chart_nonstyle();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::_internal_chart_nonstyle() const {
  const ::TSP::Reference* p = _impl_.chart_nonstyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::chart_nonstyle() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.chart_nonstyle)
  return _internal_chart_nonstyle();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_chart_nonstyle(
    ::TSP::Reference* chart_nonstyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_nonstyle_);
  }
  _impl_.chart_nonstyle_ = chart_nonstyle;
  if (chart_nonstyle) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.chart_nonstyle)
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_chart_nonstyle() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.chart_nonstyle_;
  _impl_.chart_nonstyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::unsafe_arena_release_chart_nonstyle() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.chart_nonstyle)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::Reference* temp = _impl_.chart_nonstyle_;
  _impl_.chart_nonstyle_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::_internal_mutable_chart_nonstyle() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.chart_nonstyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_nonstyle_ = p;
  }
  return _impl_.chart_nonstyle_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_chart_nonstyle() {
  ::TSP::Reference* _msg = _internal_mutable_chart_nonstyle();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.chart_nonstyle)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_chart_nonstyle(::TSP::Reference* chart_nonstyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_nonstyle_);
  }
  if (chart_nonstyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart_nonstyle));
    if (message_arena != submessage_arena) {
      chart_nonstyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart_nonstyle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.chart_nonstyle_ = chart_nonstyle;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.chart_nonstyle)
}

// optional .TSP.Reference legend_style = 3;
inline bool PropertyValueStorageContainerArchive::_internal_has_legend_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_style_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_legend_style() const {
  return _internal_has_legend_style();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::_internal_legend_style() const {
  const ::TSP::Reference* p = _impl_.legend_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::legend_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.legend_style)
  return _internal_legend_style();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_legend_style(
    ::TSP::Reference* legend_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  _impl_.legend_style_ = legend_style;
  if (legend_style) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.legend_style)
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_legend_style() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::unsafe_arena_release_legend_style() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.legend_style)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TSP::Reference* temp = _impl_.legend_style_;
  _impl_.legend_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::_internal_mutable_legend_style() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.legend_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.legend_style_ = p;
  }
  return _impl_.legend_style_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_legend_style() {
  ::TSP::Reference* _msg = _internal_mutable_legend_style();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.legend_style)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_legend_style(::TSP::Reference* legend_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_style_);
  }
  if (legend_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_style));
    if (message_arena != submessage_arena) {
      legend_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.legend_style_ = legend_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.legend_style)
}

// optional .TSP.Reference legend_nonstyle = 4;
inline bool PropertyValueStorageContainerArchive::_internal_has_legend_nonstyle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legend_nonstyle_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_legend_nonstyle() const {
  return _internal_has_legend_nonstyle();
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::_internal_legend_nonstyle() const {
  const ::TSP::Reference* p = _impl_.legend_nonstyle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyValueStorageContainerArchive::legend_nonstyle() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.legend_nonstyle)
  return _internal_legend_nonstyle();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_legend_nonstyle(
    ::TSP::Reference* legend_nonstyle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_nonstyle_);
  }
  _impl_.legend_nonstyle_ = legend_nonstyle;
  if (legend_nonstyle) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.legend_nonstyle)
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::release_legend_nonstyle() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.legend_nonstyle_;
  _impl_.legend_nonstyle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::unsafe_arena_release_legend_nonstyle() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.legend_nonstyle)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TSP::Reference* temp = _impl_.legend_nonstyle_;
  _impl_.legend_nonstyle_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::_internal_mutable_legend_nonstyle() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.legend_nonstyle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.legend_nonstyle_ = p;
  }
  return _impl_.legend_nonstyle_;
}
inline ::TSP::Reference* PropertyValueStorageContainerArchive::mutable_legend_nonstyle() {
  ::TSP::Reference* _msg = _internal_mutable_legend_nonstyle();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.legend_nonstyle)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_legend_nonstyle(::TSP::Reference* legend_nonstyle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.legend_nonstyle_);
  }
  if (legend_nonstyle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(legend_nonstyle));
    if (message_arena != submessage_arena) {
      legend_nonstyle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, legend_nonstyle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.legend_nonstyle_ = legend_nonstyle;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.legend_nonstyle)
}

// optional .TSP.SparseReferenceArray value_axis_styles = 5;
inline bool PropertyValueStorageContainerArchive::_internal_has_value_axis_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_axis_styles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_value_axis_styles() const {
  return _internal_has_value_axis_styles();
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::_internal_value_axis_styles() const {
  const ::TSP::SparseReferenceArray* p = _impl_.value_axis_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::value_axis_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.value_axis_styles)
  return _internal_value_axis_styles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_value_axis_styles(
    ::TSP::SparseReferenceArray* value_axis_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_axis_styles_);
  }
  _impl_.value_axis_styles_ = value_axis_styles;
  if (value_axis_styles) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.value_axis_styles)
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::release_value_axis_styles() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::SparseReferenceArray* temp = _impl_.value_axis_styles_;
  _impl_.value_axis_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::unsafe_arena_release_value_axis_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.value_axis_styles)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TSP::SparseReferenceArray* temp = _impl_.value_axis_styles_;
  _impl_.value_axis_styles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::_internal_mutable_value_axis_styles() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.value_axis_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArenaForAllocation());
    _impl_.value_axis_styles_ = p;
  }
  return _impl_.value_axis_styles_;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::mutable_value_axis_styles() {
  ::TSP::SparseReferenceArray* _msg = _internal_mutable_value_axis_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.value_axis_styles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_value_axis_styles(::TSP::SparseReferenceArray* value_axis_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_axis_styles_);
  }
  if (value_axis_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_axis_styles));
    if (message_arena != submessage_arena) {
      value_axis_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_axis_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.value_axis_styles_ = value_axis_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.value_axis_styles)
}

// optional .TSP.SparseReferenceArray value_axis_nonstyles = 6;
inline bool PropertyValueStorageContainerArchive::_internal_has_value_axis_nonstyles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_axis_nonstyles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_value_axis_nonstyles() const {
  return _internal_has_value_axis_nonstyles();
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::_internal_value_axis_nonstyles() const {
  const ::TSP::SparseReferenceArray* p = _impl_.value_axis_nonstyles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::value_axis_nonstyles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.value_axis_nonstyles)
  return _internal_value_axis_nonstyles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_value_axis_nonstyles(
    ::TSP::SparseReferenceArray* value_axis_nonstyles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_axis_nonstyles_);
  }
  _impl_.value_axis_nonstyles_ = value_axis_nonstyles;
  if (value_axis_nonstyles) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.value_axis_nonstyles)
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::release_value_axis_nonstyles() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::SparseReferenceArray* temp = _impl_.value_axis_nonstyles_;
  _impl_.value_axis_nonstyles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::unsafe_arena_release_value_axis_nonstyles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.value_axis_nonstyles)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TSP::SparseReferenceArray* temp = _impl_.value_axis_nonstyles_;
  _impl_.value_axis_nonstyles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::_internal_mutable_value_axis_nonstyles() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.value_axis_nonstyles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArenaForAllocation());
    _impl_.value_axis_nonstyles_ = p;
  }
  return _impl_.value_axis_nonstyles_;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::mutable_value_axis_nonstyles() {
  ::TSP::SparseReferenceArray* _msg = _internal_mutable_value_axis_nonstyles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.value_axis_nonstyles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_value_axis_nonstyles(::TSP::SparseReferenceArray* value_axis_nonstyles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_axis_nonstyles_);
  }
  if (value_axis_nonstyles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_axis_nonstyles));
    if (message_arena != submessage_arena) {
      value_axis_nonstyles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_axis_nonstyles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.value_axis_nonstyles_ = value_axis_nonstyles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.value_axis_nonstyles)
}

// optional .TSP.SparseReferenceArray category_axis_styles = 7;
inline bool PropertyValueStorageContainerArchive::_internal_has_category_axis_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.category_axis_styles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_category_axis_styles() const {
  return _internal_has_category_axis_styles();
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::_internal_category_axis_styles() const {
  const ::TSP::SparseReferenceArray* p = _impl_.category_axis_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::category_axis_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.category_axis_styles)
  return _internal_category_axis_styles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_category_axis_styles(
    ::TSP::SparseReferenceArray* category_axis_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.category_axis_styles_);
  }
  _impl_.category_axis_styles_ = category_axis_styles;
  if (category_axis_styles) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.category_axis_styles)
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::release_category_axis_styles() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::SparseReferenceArray* temp = _impl_.category_axis_styles_;
  _impl_.category_axis_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::unsafe_arena_release_category_axis_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.category_axis_styles)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TSP::SparseReferenceArray* temp = _impl_.category_axis_styles_;
  _impl_.category_axis_styles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::_internal_mutable_category_axis_styles() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.category_axis_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArenaForAllocation());
    _impl_.category_axis_styles_ = p;
  }
  return _impl_.category_axis_styles_;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::mutable_category_axis_styles() {
  ::TSP::SparseReferenceArray* _msg = _internal_mutable_category_axis_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.category_axis_styles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_category_axis_styles(::TSP::SparseReferenceArray* category_axis_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.category_axis_styles_);
  }
  if (category_axis_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_axis_styles));
    if (message_arena != submessage_arena) {
      category_axis_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_axis_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.category_axis_styles_ = category_axis_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.category_axis_styles)
}

// optional .TSP.SparseReferenceArray category_axis_nonstyles = 8;
inline bool PropertyValueStorageContainerArchive::_internal_has_category_axis_nonstyles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.category_axis_nonstyles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_category_axis_nonstyles() const {
  return _internal_has_category_axis_nonstyles();
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::_internal_category_axis_nonstyles() const {
  const ::TSP::SparseReferenceArray* p = _impl_.category_axis_nonstyles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::category_axis_nonstyles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.category_axis_nonstyles)
  return _internal_category_axis_nonstyles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_category_axis_nonstyles(
    ::TSP::SparseReferenceArray* category_axis_nonstyles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.category_axis_nonstyles_);
  }
  _impl_.category_axis_nonstyles_ = category_axis_nonstyles;
  if (category_axis_nonstyles) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.category_axis_nonstyles)
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::release_category_axis_nonstyles() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::SparseReferenceArray* temp = _impl_.category_axis_nonstyles_;
  _impl_.category_axis_nonstyles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::unsafe_arena_release_category_axis_nonstyles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.category_axis_nonstyles)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TSP::SparseReferenceArray* temp = _impl_.category_axis_nonstyles_;
  _impl_.category_axis_nonstyles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::_internal_mutable_category_axis_nonstyles() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.category_axis_nonstyles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArenaForAllocation());
    _impl_.category_axis_nonstyles_ = p;
  }
  return _impl_.category_axis_nonstyles_;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::mutable_category_axis_nonstyles() {
  ::TSP::SparseReferenceArray* _msg = _internal_mutable_category_axis_nonstyles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.category_axis_nonstyles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_category_axis_nonstyles(::TSP::SparseReferenceArray* category_axis_nonstyles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.category_axis_nonstyles_);
  }
  if (category_axis_nonstyles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(category_axis_nonstyles));
    if (message_arena != submessage_arena) {
      category_axis_nonstyles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, category_axis_nonstyles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.category_axis_nonstyles_ = category_axis_nonstyles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.category_axis_nonstyles)
}

// optional .TSP.SparseReferenceArray series_theme_styles = 9;
inline bool PropertyValueStorageContainerArchive::_internal_has_series_theme_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.series_theme_styles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_series_theme_styles() const {
  return _internal_has_series_theme_styles();
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::_internal_series_theme_styles() const {
  const ::TSP::SparseReferenceArray* p = _impl_.series_theme_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::series_theme_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.series_theme_styles)
  return _internal_series_theme_styles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_series_theme_styles(
    ::TSP::SparseReferenceArray* series_theme_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_theme_styles_);
  }
  _impl_.series_theme_styles_ = series_theme_styles;
  if (series_theme_styles) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_theme_styles)
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::release_series_theme_styles() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::SparseReferenceArray* temp = _impl_.series_theme_styles_;
  _impl_.series_theme_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::unsafe_arena_release_series_theme_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.series_theme_styles)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TSP::SparseReferenceArray* temp = _impl_.series_theme_styles_;
  _impl_.series_theme_styles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::_internal_mutable_series_theme_styles() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.series_theme_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArenaForAllocation());
    _impl_.series_theme_styles_ = p;
  }
  return _impl_.series_theme_styles_;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::mutable_series_theme_styles() {
  ::TSP::SparseReferenceArray* _msg = _internal_mutable_series_theme_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.series_theme_styles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_series_theme_styles(::TSP::SparseReferenceArray* series_theme_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_theme_styles_);
  }
  if (series_theme_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_theme_styles));
    if (message_arena != submessage_arena) {
      series_theme_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_theme_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.series_theme_styles_ = series_theme_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_theme_styles)
}

// optional .TSP.SparseReferenceArray series_private_styles = 10;
inline bool PropertyValueStorageContainerArchive::_internal_has_series_private_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.series_private_styles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_series_private_styles() const {
  return _internal_has_series_private_styles();
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::_internal_series_private_styles() const {
  const ::TSP::SparseReferenceArray* p = _impl_.series_private_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::series_private_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.series_private_styles)
  return _internal_series_private_styles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_series_private_styles(
    ::TSP::SparseReferenceArray* series_private_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_private_styles_);
  }
  _impl_.series_private_styles_ = series_private_styles;
  if (series_private_styles) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_private_styles)
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::release_series_private_styles() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::SparseReferenceArray* temp = _impl_.series_private_styles_;
  _impl_.series_private_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::unsafe_arena_release_series_private_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.series_private_styles)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TSP::SparseReferenceArray* temp = _impl_.series_private_styles_;
  _impl_.series_private_styles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::_internal_mutable_series_private_styles() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.series_private_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArenaForAllocation());
    _impl_.series_private_styles_ = p;
  }
  return _impl_.series_private_styles_;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::mutable_series_private_styles() {
  ::TSP::SparseReferenceArray* _msg = _internal_mutable_series_private_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.series_private_styles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_series_private_styles(::TSP::SparseReferenceArray* series_private_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_private_styles_);
  }
  if (series_private_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_private_styles));
    if (message_arena != submessage_arena) {
      series_private_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_private_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.series_private_styles_ = series_private_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_private_styles)
}

// optional .TSP.SparseReferenceArray series_nonstyles = 11;
inline bool PropertyValueStorageContainerArchive::_internal_has_series_nonstyles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.series_nonstyles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_series_nonstyles() const {
  return _internal_has_series_nonstyles();
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::_internal_series_nonstyles() const {
  const ::TSP::SparseReferenceArray* p = _impl_.series_nonstyles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::series_nonstyles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.series_nonstyles)
  return _internal_series_nonstyles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_series_nonstyles(
    ::TSP::SparseReferenceArray* series_nonstyles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_nonstyles_);
  }
  _impl_.series_nonstyles_ = series_nonstyles;
  if (series_nonstyles) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_nonstyles)
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::release_series_nonstyles() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::SparseReferenceArray* temp = _impl_.series_nonstyles_;
  _impl_.series_nonstyles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::unsafe_arena_release_series_nonstyles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.series_nonstyles)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TSP::SparseReferenceArray* temp = _impl_.series_nonstyles_;
  _impl_.series_nonstyles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::_internal_mutable_series_nonstyles() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.series_nonstyles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArenaForAllocation());
    _impl_.series_nonstyles_ = p;
  }
  return _impl_.series_nonstyles_;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::mutable_series_nonstyles() {
  ::TSP::SparseReferenceArray* _msg = _internal_mutable_series_nonstyles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.series_nonstyles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_series_nonstyles(::TSP::SparseReferenceArray* series_nonstyles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.series_nonstyles_);
  }
  if (series_nonstyles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(series_nonstyles));
    if (message_arena != submessage_arena) {
      series_nonstyles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, series_nonstyles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.series_nonstyles_ = series_nonstyles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.series_nonstyles)
}

// optional .TSP.SparseReferenceArray paragraph_styles = 12;
inline bool PropertyValueStorageContainerArchive::_internal_has_paragraph_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.paragraph_styles_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerArchive::has_paragraph_styles() const {
  return _internal_has_paragraph_styles();
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::_internal_paragraph_styles() const {
  const ::TSP::SparseReferenceArray* p = _impl_.paragraph_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& PropertyValueStorageContainerArchive::paragraph_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerArchive.paragraph_styles)
  return _internal_paragraph_styles();
}
inline void PropertyValueStorageContainerArchive::unsafe_arena_set_allocated_paragraph_styles(
    ::TSP::SparseReferenceArray* paragraph_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.paragraph_styles_);
  }
  _impl_.paragraph_styles_ = paragraph_styles;
  if (paragraph_styles) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerArchive.paragraph_styles)
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::release_paragraph_styles() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::SparseReferenceArray* temp = _impl_.paragraph_styles_;
  _impl_.paragraph_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::unsafe_arena_release_paragraph_styles() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerArchive.paragraph_styles)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::TSP::SparseReferenceArray* temp = _impl_.paragraph_styles_;
  _impl_.paragraph_styles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::_internal_mutable_paragraph_styles() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.paragraph_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArenaForAllocation());
    _impl_.paragraph_styles_ = p;
  }
  return _impl_.paragraph_styles_;
}
inline ::TSP::SparseReferenceArray* PropertyValueStorageContainerArchive::mutable_paragraph_styles() {
  ::TSP::SparseReferenceArray* _msg = _internal_mutable_paragraph_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerArchive.paragraph_styles)
  return _msg;
}
inline void PropertyValueStorageContainerArchive::set_allocated_paragraph_styles(::TSP::SparseReferenceArray* paragraph_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.paragraph_styles_);
  }
  if (paragraph_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(paragraph_styles));
    if (message_arena != submessage_arena) {
      paragraph_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, paragraph_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.paragraph_styles_ = paragraph_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerArchive.paragraph_styles)
}

// -------------------------------------------------------------------

// StylePasteboardDataArchive

// optional .TSS.StyleArchive super = 1;
inline bool StylePasteboardDataArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool StylePasteboardDataArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSS::StyleArchive& StylePasteboardDataArchive::_internal_super() const {
  const ::TSS::StyleArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSS::StyleArchive&>(
      ::TSS::_StyleArchive_default_instance_);
}
inline const ::TSS::StyleArchive& StylePasteboardDataArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.StylePasteboardDataArchive.super)
  return _internal_super();
}
inline void StylePasteboardDataArchive::unsafe_arena_set_allocated_super(
    ::TSS::StyleArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.StylePasteboardDataArchive.super)
}
inline ::TSS::StyleArchive* StylePasteboardDataArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSS::StyleArchive* StylePasteboardDataArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.StylePasteboardDataArchive.super)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSS::StyleArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSS::StyleArchive* StylePasteboardDataArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSS::StyleArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSS::StyleArchive* StylePasteboardDataArchive::mutable_super() {
  ::TSS::StyleArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.StylePasteboardDataArchive.super)
  return _msg;
}
inline void StylePasteboardDataArchive::set_allocated_super(::TSS::StyleArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.StylePasteboardDataArchive.super)
}

// optional .TSCH.PropertyValueStorageContainerArchive style_network = 2;
inline bool StylePasteboardDataArchive::_internal_has_style_network() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.style_network_ != nullptr);
  return value;
}
inline bool StylePasteboardDataArchive::has_style_network() const {
  return _internal_has_style_network();
}
inline void StylePasteboardDataArchive::clear_style_network() {
  if (_impl_.style_network_ != nullptr) _impl_.style_network_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::PropertyValueStorageContainerArchive& StylePasteboardDataArchive::_internal_style_network() const {
  const ::TSCH::PropertyValueStorageContainerArchive* p = _impl_.style_network_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::PropertyValueStorageContainerArchive&>(
      ::TSCH::_PropertyValueStorageContainerArchive_default_instance_);
}
inline const ::TSCH::PropertyValueStorageContainerArchive& StylePasteboardDataArchive::style_network() const {
  // @@protoc_insertion_point(field_get:TSCH.StylePasteboardDataArchive.style_network)
  return _internal_style_network();
}
inline void StylePasteboardDataArchive::unsafe_arena_set_allocated_style_network(
    ::TSCH::PropertyValueStorageContainerArchive* style_network) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.style_network_);
  }
  _impl_.style_network_ = style_network;
  if (style_network) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.StylePasteboardDataArchive.style_network)
}
inline ::TSCH::PropertyValueStorageContainerArchive* StylePasteboardDataArchive::release_style_network() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = _impl_.style_network_;
  _impl_.style_network_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* StylePasteboardDataArchive::unsafe_arena_release_style_network() {
  // @@protoc_insertion_point(field_release:TSCH.StylePasteboardDataArchive.style_network)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::PropertyValueStorageContainerArchive* temp = _impl_.style_network_;
  _impl_.style_network_ = nullptr;
  return temp;
}
inline ::TSCH::PropertyValueStorageContainerArchive* StylePasteboardDataArchive::_internal_mutable_style_network() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.style_network_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::PropertyValueStorageContainerArchive>(GetArenaForAllocation());
    _impl_.style_network_ = p;
  }
  return _impl_.style_network_;
}
inline ::TSCH::PropertyValueStorageContainerArchive* StylePasteboardDataArchive::mutable_style_network() {
  ::TSCH::PropertyValueStorageContainerArchive* _msg = _internal_mutable_style_network();
  // @@protoc_insertion_point(field_mutable:TSCH.StylePasteboardDataArchive.style_network)
  return _msg;
}
inline void StylePasteboardDataArchive::set_allocated_style_network(::TSCH::PropertyValueStorageContainerArchive* style_network) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.style_network_;
  }
  if (style_network) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(style_network);
    if (message_arena != submessage_arena) {
      style_network = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, style_network, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.style_network_ = style_network;
  // @@protoc_insertion_point(field_set_allocated:TSCH.StylePasteboardDataArchive.style_network)
}

// optional bool copied_from_entire_chart = 3;
inline bool StylePasteboardDataArchive::_internal_has_copied_from_entire_chart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StylePasteboardDataArchive::has_copied_from_entire_chart() const {
  return _internal_has_copied_from_entire_chart();
}
inline void StylePasteboardDataArchive::clear_copied_from_entire_chart() {
  _impl_.copied_from_entire_chart_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool StylePasteboardDataArchive::_internal_copied_from_entire_chart() const {
  return _impl_.copied_from_entire_chart_;
}
inline bool StylePasteboardDataArchive::copied_from_entire_chart() const {
  // @@protoc_insertion_point(field_get:TSCH.StylePasteboardDataArchive.copied_from_entire_chart)
  return _internal_copied_from_entire_chart();
}
inline void StylePasteboardDataArchive::_internal_set_copied_from_entire_chart(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.copied_from_entire_chart_ = value;
}
inline void StylePasteboardDataArchive::set_copied_from_entire_chart(bool value) {
  _internal_set_copied_from_entire_chart(value);
  // @@protoc_insertion_point(field_set:TSCH.StylePasteboardDataArchive.copied_from_entire_chart)
}

// -------------------------------------------------------------------

// ChartSelectionPathTypeArchive

// optional string path_type = 1;
inline bool ChartSelectionPathTypeArchive::_internal_has_path_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartSelectionPathTypeArchive::has_path_type() const {
  return _internal_has_path_type();
}
inline void ChartSelectionPathTypeArchive::clear_path_type() {
  _impl_.path_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChartSelectionPathTypeArchive::path_type() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathTypeArchive.path_type)
  return _internal_path_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartSelectionPathTypeArchive::set_path_type(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.path_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartSelectionPathTypeArchive.path_type)
}
inline std::string* ChartSelectionPathTypeArchive::mutable_path_type() {
  std::string* _s = _internal_mutable_path_type();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathTypeArchive.path_type)
  return _s;
}
inline const std::string& ChartSelectionPathTypeArchive::_internal_path_type() const {
  return _impl_.path_type_.Get();
}
inline void ChartSelectionPathTypeArchive::_internal_set_path_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartSelectionPathTypeArchive::_internal_mutable_path_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartSelectionPathTypeArchive::release_path_type() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionPathTypeArchive.path_type)
  if (!_internal_has_path_type()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.path_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_type_.IsDefault()) {
    _impl_.path_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartSelectionPathTypeArchive::set_allocated_path_type(std::string* path_type) {
  if (path_type != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_type_.SetAllocated(path_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_type_.IsDefault()) {
    _impl_.path_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionPathTypeArchive.path_type)
}

// optional string path_name = 2;
inline bool ChartSelectionPathTypeArchive::_internal_has_path_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSelectionPathTypeArchive::has_path_name() const {
  return _internal_has_path_name();
}
inline void ChartSelectionPathTypeArchive::clear_path_name() {
  _impl_.path_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ChartSelectionPathTypeArchive::path_name() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathTypeArchive.path_name)
  return _internal_path_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChartSelectionPathTypeArchive::set_path_name(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.path_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TSCH.ChartSelectionPathTypeArchive.path_name)
}
inline std::string* ChartSelectionPathTypeArchive::mutable_path_name() {
  std::string* _s = _internal_mutable_path_name();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathTypeArchive.path_name)
  return _s;
}
inline const std::string& ChartSelectionPathTypeArchive::_internal_path_name() const {
  return _impl_.path_name_.Get();
}
inline void ChartSelectionPathTypeArchive::_internal_set_path_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.path_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChartSelectionPathTypeArchive::_internal_mutable_path_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.path_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChartSelectionPathTypeArchive::release_path_name() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionPathTypeArchive.path_name)
  if (!_internal_has_path_name()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.path_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_name_.IsDefault()) {
    _impl_.path_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChartSelectionPathTypeArchive::set_allocated_path_name(std::string* path_name) {
  if (path_name != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.path_name_.SetAllocated(path_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.path_name_.IsDefault()) {
    _impl_.path_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionPathTypeArchive.path_name)
}

// -------------------------------------------------------------------

// ChartAxisIDArchive

// optional .TSCH.AxisType axis_type = 1;
inline bool ChartAxisIDArchive::_internal_has_axis_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChartAxisIDArchive::has_axis_type() const {
  return _internal_has_axis_type();
}
inline void ChartAxisIDArchive::clear_axis_type() {
  _impl_.axis_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::TSCH::AxisType ChartAxisIDArchive::_internal_axis_type() const {
  return static_cast< ::TSCH::AxisType >(_impl_.axis_type_);
}
inline ::TSCH::AxisType ChartAxisIDArchive::axis_type() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartAxisIDArchive.axis_type)
  return _internal_axis_type();
}
inline void ChartAxisIDArchive::_internal_set_axis_type(::TSCH::AxisType value) {
  assert(::TSCH::AxisType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.axis_type_ = value;
}
inline void ChartAxisIDArchive::set_axis_type(::TSCH::AxisType value) {
  _internal_set_axis_type(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartAxisIDArchive.axis_type)
}

// optional uint32 ordinal = 2;
inline bool ChartAxisIDArchive::_internal_has_ordinal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartAxisIDArchive::has_ordinal() const {
  return _internal_has_ordinal();
}
inline void ChartAxisIDArchive::clear_ordinal() {
  _impl_.ordinal_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ChartAxisIDArchive::_internal_ordinal() const {
  return _impl_.ordinal_;
}
inline uint32_t ChartAxisIDArchive::ordinal() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartAxisIDArchive.ordinal)
  return _internal_ordinal();
}
inline void ChartAxisIDArchive::_internal_set_ordinal(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ordinal_ = value;
}
inline void ChartAxisIDArchive::set_ordinal(uint32_t value) {
  _internal_set_ordinal(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartAxisIDArchive.ordinal)
}

// -------------------------------------------------------------------

// ChartSelectionPathArgumentArchive

// optional uint32 number = 1;
inline bool ChartSelectionPathArgumentArchive::_internal_has_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartSelectionPathArgumentArchive::has_number() const {
  return _internal_has_number();
}
inline void ChartSelectionPathArgumentArchive::clear_number() {
  _impl_.number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t ChartSelectionPathArgumentArchive::_internal_number() const {
  return _impl_.number_;
}
inline uint32_t ChartSelectionPathArgumentArchive::number() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathArgumentArchive.number)
  return _internal_number();
}
inline void ChartSelectionPathArgumentArchive::_internal_set_number(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.number_ = value;
}
inline void ChartSelectionPathArgumentArchive::set_number(uint32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartSelectionPathArgumentArchive.number)
}

// optional .TSCH.ChartAxisIDArchive axis_id = 2;
inline bool ChartSelectionPathArgumentArchive::_internal_has_axis_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.axis_id_ != nullptr);
  return value;
}
inline bool ChartSelectionPathArgumentArchive::has_axis_id() const {
  return _internal_has_axis_id();
}
inline void ChartSelectionPathArgumentArchive::clear_axis_id() {
  if (_impl_.axis_id_ != nullptr) _impl_.axis_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartAxisIDArchive& ChartSelectionPathArgumentArchive::_internal_axis_id() const {
  const ::TSCH::ChartAxisIDArchive* p = _impl_.axis_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartAxisIDArchive&>(
      ::TSCH::_ChartAxisIDArchive_default_instance_);
}
inline const ::TSCH::ChartAxisIDArchive& ChartSelectionPathArgumentArchive::axis_id() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathArgumentArchive.axis_id)
  return _internal_axis_id();
}
inline void ChartSelectionPathArgumentArchive::unsafe_arena_set_allocated_axis_id(
    ::TSCH::ChartAxisIDArchive* axis_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.axis_id_);
  }
  _impl_.axis_id_ = axis_id;
  if (axis_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSelectionPathArgumentArchive.axis_id)
}
inline ::TSCH::ChartAxisIDArchive* ChartSelectionPathArgumentArchive::release_axis_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartAxisIDArchive* temp = _impl_.axis_id_;
  _impl_.axis_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* ChartSelectionPathArgumentArchive::unsafe_arena_release_axis_id() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionPathArgumentArchive.axis_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartAxisIDArchive* temp = _impl_.axis_id_;
  _impl_.axis_id_ = nullptr;
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* ChartSelectionPathArgumentArchive::_internal_mutable_axis_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.axis_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartAxisIDArchive>(GetArenaForAllocation());
    _impl_.axis_id_ = p;
  }
  return _impl_.axis_id_;
}
inline ::TSCH::ChartAxisIDArchive* ChartSelectionPathArgumentArchive::mutable_axis_id() {
  ::TSCH::ChartAxisIDArchive* _msg = _internal_mutable_axis_id();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathArgumentArchive.axis_id)
  return _msg;
}
inline void ChartSelectionPathArgumentArchive::set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.axis_id_;
  }
  if (axis_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(axis_id);
    if (message_arena != submessage_arena) {
      axis_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.axis_id_ = axis_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionPathArgumentArchive.axis_id)
}

// -------------------------------------------------------------------

// ChartSelectionPathArchive

// optional .TSCH.ChartSelectionPathTypeArchive path_type = 1;
inline bool ChartSelectionPathArchive::_internal_has_path_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.path_type_ != nullptr);
  return value;
}
inline bool ChartSelectionPathArchive::has_path_type() const {
  return _internal_has_path_type();
}
inline void ChartSelectionPathArchive::clear_path_type() {
  if (_impl_.path_type_ != nullptr) _impl_.path_type_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartSelectionPathTypeArchive& ChartSelectionPathArchive::_internal_path_type() const {
  const ::TSCH::ChartSelectionPathTypeArchive* p = _impl_.path_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartSelectionPathTypeArchive&>(
      ::TSCH::_ChartSelectionPathTypeArchive_default_instance_);
}
inline const ::TSCH::ChartSelectionPathTypeArchive& ChartSelectionPathArchive::path_type() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathArchive.path_type)
  return _internal_path_type();
}
inline void ChartSelectionPathArchive::unsafe_arena_set_allocated_path_type(
    ::TSCH::ChartSelectionPathTypeArchive* path_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.path_type_);
  }
  _impl_.path_type_ = path_type;
  if (path_type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSelectionPathArchive.path_type)
}
inline ::TSCH::ChartSelectionPathTypeArchive* ChartSelectionPathArchive::release_path_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartSelectionPathTypeArchive* temp = _impl_.path_type_;
  _impl_.path_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartSelectionPathTypeArchive* ChartSelectionPathArchive::unsafe_arena_release_path_type() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionPathArchive.path_type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartSelectionPathTypeArchive* temp = _impl_.path_type_;
  _impl_.path_type_ = nullptr;
  return temp;
}
inline ::TSCH::ChartSelectionPathTypeArchive* ChartSelectionPathArchive::_internal_mutable_path_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.path_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartSelectionPathTypeArchive>(GetArenaForAllocation());
    _impl_.path_type_ = p;
  }
  return _impl_.path_type_;
}
inline ::TSCH::ChartSelectionPathTypeArchive* ChartSelectionPathArchive::mutable_path_type() {
  ::TSCH::ChartSelectionPathTypeArchive* _msg = _internal_mutable_path_type();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathArchive.path_type)
  return _msg;
}
inline void ChartSelectionPathArchive::set_allocated_path_type(::TSCH::ChartSelectionPathTypeArchive* path_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.path_type_;
  }
  if (path_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(path_type);
    if (message_arena != submessage_arena) {
      path_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path_type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_type_ = path_type;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionPathArchive.path_type)
}

// optional .TSCH.ChartSelectionPathArchive sub_selection = 2;
inline bool ChartSelectionPathArchive::_internal_has_sub_selection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sub_selection_ != nullptr);
  return value;
}
inline bool ChartSelectionPathArchive::has_sub_selection() const {
  return _internal_has_sub_selection();
}
inline void ChartSelectionPathArchive::clear_sub_selection() {
  if (_impl_.sub_selection_ != nullptr) _impl_.sub_selection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TSCH::ChartSelectionPathArchive& ChartSelectionPathArchive::_internal_sub_selection() const {
  const ::TSCH::ChartSelectionPathArchive* p = _impl_.sub_selection_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartSelectionPathArchive&>(
      ::TSCH::_ChartSelectionPathArchive_default_instance_);
}
inline const ::TSCH::ChartSelectionPathArchive& ChartSelectionPathArchive::sub_selection() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathArchive.sub_selection)
  return _internal_sub_selection();
}
inline void ChartSelectionPathArchive::unsafe_arena_set_allocated_sub_selection(
    ::TSCH::ChartSelectionPathArchive* sub_selection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sub_selection_);
  }
  _impl_.sub_selection_ = sub_selection;
  if (sub_selection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSelectionPathArchive.sub_selection)
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionPathArchive::release_sub_selection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartSelectionPathArchive* temp = _impl_.sub_selection_;
  _impl_.sub_selection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionPathArchive::unsafe_arena_release_sub_selection() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionPathArchive.sub_selection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSCH::ChartSelectionPathArchive* temp = _impl_.sub_selection_;
  _impl_.sub_selection_ = nullptr;
  return temp;
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionPathArchive::_internal_mutable_sub_selection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sub_selection_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartSelectionPathArchive>(GetArenaForAllocation());
    _impl_.sub_selection_ = p;
  }
  return _impl_.sub_selection_;
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionPathArchive::mutable_sub_selection() {
  ::TSCH::ChartSelectionPathArchive* _msg = _internal_mutable_sub_selection();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathArchive.sub_selection)
  return _msg;
}
inline void ChartSelectionPathArchive::set_allocated_sub_selection(::TSCH::ChartSelectionPathArchive* sub_selection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.sub_selection_;
  }
  if (sub_selection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sub_selection);
    if (message_arena != submessage_arena) {
      sub_selection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_selection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sub_selection_ = sub_selection;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionPathArchive.sub_selection)
}

// repeated .TSCH.ChartSelectionPathArgumentArchive arguments = 3;
inline int ChartSelectionPathArchive::_internal_arguments_size() const {
  return _impl_.arguments_.size();
}
inline int ChartSelectionPathArchive::arguments_size() const {
  return _internal_arguments_size();
}
inline void ChartSelectionPathArchive::clear_arguments() {
  _impl_.arguments_.Clear();
}
inline ::TSCH::ChartSelectionPathArgumentArchive* ChartSelectionPathArchive::mutable_arguments(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionPathArchive.arguments)
  return _impl_.arguments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >*
ChartSelectionPathArchive::mutable_arguments() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartSelectionPathArchive.arguments)
  return &_impl_.arguments_;
}
inline const ::TSCH::ChartSelectionPathArgumentArchive& ChartSelectionPathArchive::_internal_arguments(int index) const {
  return _impl_.arguments_.Get(index);
}
inline const ::TSCH::ChartSelectionPathArgumentArchive& ChartSelectionPathArchive::arguments(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionPathArchive.arguments)
  return _internal_arguments(index);
}
inline ::TSCH::ChartSelectionPathArgumentArchive* ChartSelectionPathArchive::_internal_add_arguments() {
  return _impl_.arguments_.Add();
}
inline ::TSCH::ChartSelectionPathArgumentArchive* ChartSelectionPathArchive::add_arguments() {
  ::TSCH::ChartSelectionPathArgumentArchive* _add = _internal_add_arguments();
  // @@protoc_insertion_point(field_add:TSCH.ChartSelectionPathArchive.arguments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArgumentArchive >&
ChartSelectionPathArchive::arguments() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartSelectionPathArchive.arguments)
  return _impl_.arguments_;
}

// -------------------------------------------------------------------

// ChartSelectionArchive

// optional .TSD.DrawableSelectionArchive super = 3;
inline bool ChartSelectionArchive::_internal_has_super() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.super_ != nullptr);
  return value;
}
inline bool ChartSelectionArchive::has_super() const {
  return _internal_has_super();
}
inline const ::TSD::DrawableSelectionArchive& ChartSelectionArchive::_internal_super() const {
  const ::TSD::DrawableSelectionArchive* p = _impl_.super_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSD::DrawableSelectionArchive&>(
      ::TSD::_DrawableSelectionArchive_default_instance_);
}
inline const ::TSD::DrawableSelectionArchive& ChartSelectionArchive::super() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionArchive.super)
  return _internal_super();
}
inline void ChartSelectionArchive::unsafe_arena_set_allocated_super(
    ::TSD::DrawableSelectionArchive* super) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  _impl_.super_ = super;
  if (super) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSelectionArchive.super)
}
inline ::TSD::DrawableSelectionArchive* ChartSelectionArchive::release_super() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::DrawableSelectionArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSD::DrawableSelectionArchive* ChartSelectionArchive::unsafe_arena_release_super() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionArchive.super)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSD::DrawableSelectionArchive* temp = _impl_.super_;
  _impl_.super_ = nullptr;
  return temp;
}
inline ::TSD::DrawableSelectionArchive* ChartSelectionArchive::_internal_mutable_super() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.super_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSD::DrawableSelectionArchive>(GetArenaForAllocation());
    _impl_.super_ = p;
  }
  return _impl_.super_;
}
inline ::TSD::DrawableSelectionArchive* ChartSelectionArchive::mutable_super() {
  ::TSD::DrawableSelectionArchive* _msg = _internal_mutable_super();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionArchive.super)
  return _msg;
}
inline void ChartSelectionArchive::set_allocated_super(::TSD::DrawableSelectionArchive* super) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.super_);
  }
  if (super) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(super));
    if (message_arena != submessage_arena) {
      super = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, super, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.super_ = super;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionArchive.super)
}

// optional .TSP.Reference chart = 1;
inline bool ChartSelectionArchive::_internal_has_chart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_ != nullptr);
  return value;
}
inline bool ChartSelectionArchive::has_chart() const {
  return _internal_has_chart();
}
inline const ::TSP::Reference& ChartSelectionArchive::_internal_chart() const {
  const ::TSP::Reference* p = _impl_.chart_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartSelectionArchive::chart() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionArchive.chart)
  return _internal_chart();
}
inline void ChartSelectionArchive::unsafe_arena_set_allocated_chart(
    ::TSP::Reference* chart) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_);
  }
  _impl_.chart_ = chart;
  if (chart) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartSelectionArchive.chart)
}
inline ::TSP::Reference* ChartSelectionArchive::release_chart() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_;
  _impl_.chart_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartSelectionArchive::unsafe_arena_release_chart() {
  // @@protoc_insertion_point(field_release:TSCH.ChartSelectionArchive.chart)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_;
  _impl_.chart_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartSelectionArchive::_internal_mutable_chart() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chart_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_ = p;
  }
  return _impl_.chart_;
}
inline ::TSP::Reference* ChartSelectionArchive::mutable_chart() {
  ::TSP::Reference* _msg = _internal_mutable_chart();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionArchive.chart)
  return _msg;
}
inline void ChartSelectionArchive::set_allocated_chart(::TSP::Reference* chart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_);
  }
  if (chart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart));
    if (message_arena != submessage_arena) {
      chart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chart_ = chart;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartSelectionArchive.chart)
}

// repeated .TSCH.ChartSelectionPathArchive paths = 2;
inline int ChartSelectionArchive::_internal_paths_size() const {
  return _impl_.paths_.size();
}
inline int ChartSelectionArchive::paths_size() const {
  return _internal_paths_size();
}
inline void ChartSelectionArchive::clear_paths() {
  _impl_.paths_.Clear();
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionArchive::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartSelectionArchive.paths)
  return _impl_.paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >*
ChartSelectionArchive::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartSelectionArchive.paths)
  return &_impl_.paths_;
}
inline const ::TSCH::ChartSelectionPathArchive& ChartSelectionArchive::_internal_paths(int index) const {
  return _impl_.paths_.Get(index);
}
inline const ::TSCH::ChartSelectionPathArchive& ChartSelectionArchive::paths(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartSelectionArchive.paths)
  return _internal_paths(index);
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionArchive::_internal_add_paths() {
  return _impl_.paths_.Add();
}
inline ::TSCH::ChartSelectionPathArchive* ChartSelectionArchive::add_paths() {
  ::TSCH::ChartSelectionPathArchive* _add = _internal_add_paths();
  // @@protoc_insertion_point(field_add:TSCH.ChartSelectionArchive.paths)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartSelectionPathArchive >&
ChartSelectionArchive::paths() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartSelectionArchive.paths)
  return _impl_.paths_;
}

// -------------------------------------------------------------------

// ChartCDESelectionArchive

// optional .TSP.Reference chart = 1;
inline bool ChartCDESelectionArchive::_internal_has_chart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_ != nullptr);
  return value;
}
inline bool ChartCDESelectionArchive::has_chart() const {
  return _internal_has_chart();
}
inline const ::TSP::Reference& ChartCDESelectionArchive::_internal_chart() const {
  const ::TSP::Reference* p = _impl_.chart_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartCDESelectionArchive::chart() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCDESelectionArchive.chart)
  return _internal_chart();
}
inline void ChartCDESelectionArchive::unsafe_arena_set_allocated_chart(
    ::TSP::Reference* chart) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_);
  }
  _impl_.chart_ = chart;
  if (chart) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartCDESelectionArchive.chart)
}
inline ::TSP::Reference* ChartCDESelectionArchive::release_chart() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_;
  _impl_.chart_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartCDESelectionArchive::unsafe_arena_release_chart() {
  // @@protoc_insertion_point(field_release:TSCH.ChartCDESelectionArchive.chart)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_;
  _impl_.chart_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartCDESelectionArchive::_internal_mutable_chart() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chart_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_ = p;
  }
  return _impl_.chart_;
}
inline ::TSP::Reference* ChartCDESelectionArchive::mutable_chart() {
  ::TSP::Reference* _msg = _internal_mutable_chart();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartCDESelectionArchive.chart)
  return _msg;
}
inline void ChartCDESelectionArchive::set_allocated_chart(::TSP::Reference* chart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_);
  }
  if (chart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart));
    if (message_arena != submessage_arena) {
      chart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chart_ = chart;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartCDESelectionArchive.chart)
}

// optional int32 selection_type = 2;
inline bool ChartCDESelectionArchive::_internal_has_selection_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartCDESelectionArchive::has_selection_type() const {
  return _internal_has_selection_type();
}
inline void ChartCDESelectionArchive::clear_selection_type() {
  _impl_.selection_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ChartCDESelectionArchive::_internal_selection_type() const {
  return _impl_.selection_type_;
}
inline int32_t ChartCDESelectionArchive::selection_type() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCDESelectionArchive.selection_type)
  return _internal_selection_type();
}
inline void ChartCDESelectionArchive::_internal_set_selection_type(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.selection_type_ = value;
}
inline void ChartCDESelectionArchive::set_selection_type(int32_t value) {
  _internal_set_selection_type(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartCDESelectionArchive.selection_type)
}

// optional uint32 row_location = 3;
inline bool ChartCDESelectionArchive::_internal_has_row_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChartCDESelectionArchive::has_row_location() const {
  return _internal_has_row_location();
}
inline void ChartCDESelectionArchive::clear_row_location() {
  _impl_.row_location_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t ChartCDESelectionArchive::_internal_row_location() const {
  return _impl_.row_location_;
}
inline uint32_t ChartCDESelectionArchive::row_location() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCDESelectionArchive.row_location)
  return _internal_row_location();
}
inline void ChartCDESelectionArchive::_internal_set_row_location(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.row_location_ = value;
}
inline void ChartCDESelectionArchive::set_row_location(uint32_t value) {
  _internal_set_row_location(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartCDESelectionArchive.row_location)
}

// optional uint32 row_length = 4;
inline bool ChartCDESelectionArchive::_internal_has_row_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChartCDESelectionArchive::has_row_length() const {
  return _internal_has_row_length();
}
inline void ChartCDESelectionArchive::clear_row_length() {
  _impl_.row_length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t ChartCDESelectionArchive::_internal_row_length() const {
  return _impl_.row_length_;
}
inline uint32_t ChartCDESelectionArchive::row_length() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCDESelectionArchive.row_length)
  return _internal_row_length();
}
inline void ChartCDESelectionArchive::_internal_set_row_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.row_length_ = value;
}
inline void ChartCDESelectionArchive::set_row_length(uint32_t value) {
  _internal_set_row_length(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartCDESelectionArchive.row_length)
}

// optional uint32 column_location = 5;
inline bool ChartCDESelectionArchive::_internal_has_column_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChartCDESelectionArchive::has_column_location() const {
  return _internal_has_column_location();
}
inline void ChartCDESelectionArchive::clear_column_location() {
  _impl_.column_location_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t ChartCDESelectionArchive::_internal_column_location() const {
  return _impl_.column_location_;
}
inline uint32_t ChartCDESelectionArchive::column_location() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCDESelectionArchive.column_location)
  return _internal_column_location();
}
inline void ChartCDESelectionArchive::_internal_set_column_location(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.column_location_ = value;
}
inline void ChartCDESelectionArchive::set_column_location(uint32_t value) {
  _internal_set_column_location(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartCDESelectionArchive.column_location)
}

// optional uint32 column_length = 6;
inline bool ChartCDESelectionArchive::_internal_has_column_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChartCDESelectionArchive::has_column_length() const {
  return _internal_has_column_length();
}
inline void ChartCDESelectionArchive::clear_column_length() {
  _impl_.column_length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t ChartCDESelectionArchive::_internal_column_length() const {
  return _impl_.column_length_;
}
inline uint32_t ChartCDESelectionArchive::column_length() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartCDESelectionArchive.column_length)
  return _internal_column_length();
}
inline void ChartCDESelectionArchive::_internal_set_column_length(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.column_length_ = value;
}
inline void ChartCDESelectionArchive::set_column_length(uint32_t value) {
  _internal_set_column_length(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartCDESelectionArchive.column_length)
}

// -------------------------------------------------------------------

// ChartUIState

// optional .TSP.Reference chart = 1;
inline bool ChartUIState::_internal_has_chart() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.chart_ != nullptr);
  return value;
}
inline bool ChartUIState::has_chart() const {
  return _internal_has_chart();
}
inline const ::TSP::Reference& ChartUIState::_internal_chart() const {
  const ::TSP::Reference* p = _impl_.chart_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartUIState::chart() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.chart)
  return _internal_chart();
}
inline void ChartUIState::unsafe_arena_set_allocated_chart(
    ::TSP::Reference* chart) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_);
  }
  _impl_.chart_ = chart;
  if (chart) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartUIState.chart)
}
inline ::TSP::Reference* ChartUIState::release_chart() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_;
  _impl_.chart_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartUIState::unsafe_arena_release_chart() {
  // @@protoc_insertion_point(field_release:TSCH.ChartUIState.chart)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.chart_;
  _impl_.chart_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartUIState::_internal_mutable_chart() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.chart_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.chart_ = p;
  }
  return _impl_.chart_;
}
inline ::TSP::Reference* ChartUIState::mutable_chart() {
  ::TSP::Reference* _msg = _internal_mutable_chart();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartUIState.chart)
  return _msg;
}
inline void ChartUIState::set_allocated_chart(::TSP::Reference* chart) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.chart_);
  }
  if (chart) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chart));
    if (message_arena != submessage_arena) {
      chart = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chart, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chart_ = chart;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartUIState.chart)
}

// optional int32 cde_last_row_selected = 2;
inline bool ChartUIState::_internal_has_cde_last_row_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChartUIState::has_cde_last_row_selected() const {
  return _internal_has_cde_last_row_selected();
}
inline void ChartUIState::clear_cde_last_row_selected() {
  _impl_.cde_last_row_selected_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t ChartUIState::_internal_cde_last_row_selected() const {
  return _impl_.cde_last_row_selected_;
}
inline int32_t ChartUIState::cde_last_row_selected() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.cde_last_row_selected)
  return _internal_cde_last_row_selected();
}
inline void ChartUIState::_internal_set_cde_last_row_selected(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cde_last_row_selected_ = value;
}
inline void ChartUIState::set_cde_last_row_selected(int32_t value) {
  _internal_set_cde_last_row_selected(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartUIState.cde_last_row_selected)
}

// optional int32 cde_last_col_selected = 3;
inline bool ChartUIState::_internal_has_cde_last_col_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChartUIState::has_cde_last_col_selected() const {
  return _internal_has_cde_last_col_selected();
}
inline void ChartUIState::clear_cde_last_col_selected() {
  _impl_.cde_last_col_selected_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ChartUIState::_internal_cde_last_col_selected() const {
  return _impl_.cde_last_col_selected_;
}
inline int32_t ChartUIState::cde_last_col_selected() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.cde_last_col_selected)
  return _internal_cde_last_col_selected();
}
inline void ChartUIState::_internal_set_cde_last_col_selected(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.cde_last_col_selected_ = value;
}
inline void ChartUIState::set_cde_last_col_selected(int32_t value) {
  _internal_set_cde_last_col_selected(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartUIState.cde_last_col_selected)
}

// optional int32 cde_last_row_count = 4;
inline bool ChartUIState::_internal_has_cde_last_row_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChartUIState::has_cde_last_row_count() const {
  return _internal_has_cde_last_row_count();
}
inline void ChartUIState::clear_cde_last_row_count() {
  _impl_.cde_last_row_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ChartUIState::_internal_cde_last_row_count() const {
  return _impl_.cde_last_row_count_;
}
inline int32_t ChartUIState::cde_last_row_count() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.cde_last_row_count)
  return _internal_cde_last_row_count();
}
inline void ChartUIState::_internal_set_cde_last_row_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.cde_last_row_count_ = value;
}
inline void ChartUIState::set_cde_last_row_count(int32_t value) {
  _internal_set_cde_last_row_count(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartUIState.cde_last_row_count)
}

// optional int32 cde_last_col_count = 5;
inline bool ChartUIState::_internal_has_cde_last_col_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChartUIState::has_cde_last_col_count() const {
  return _internal_has_cde_last_col_count();
}
inline void ChartUIState::clear_cde_last_col_count() {
  _impl_.cde_last_col_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline int32_t ChartUIState::_internal_cde_last_col_count() const {
  return _impl_.cde_last_col_count_;
}
inline int32_t ChartUIState::cde_last_col_count() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.cde_last_col_count)
  return _internal_cde_last_col_count();
}
inline void ChartUIState::_internal_set_cde_last_col_count(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.cde_last_col_count_ = value;
}
inline void ChartUIState::set_cde_last_col_count(int32_t value) {
  _internal_set_cde_last_col_count(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartUIState.cde_last_col_count)
}

// optional bool cde_use_full_keyboard = 6;
inline bool ChartUIState::_internal_has_cde_use_full_keyboard() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ChartUIState::has_cde_use_full_keyboard() const {
  return _internal_has_cde_use_full_keyboard();
}
inline void ChartUIState::clear_cde_use_full_keyboard() {
  _impl_.cde_use_full_keyboard_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool ChartUIState::_internal_cde_use_full_keyboard() const {
  return _impl_.cde_use_full_keyboard_;
}
inline bool ChartUIState::cde_use_full_keyboard() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.cde_use_full_keyboard)
  return _internal_cde_use_full_keyboard();
}
inline void ChartUIState::_internal_set_cde_use_full_keyboard(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.cde_use_full_keyboard_ = value;
}
inline void ChartUIState::set_cde_use_full_keyboard(bool value) {
  _internal_set_cde_use_full_keyboard(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartUIState.cde_use_full_keyboard)
}

// optional int32 multi_data_set_index = 7;
inline bool ChartUIState::_internal_has_multi_data_set_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ChartUIState::has_multi_data_set_index() const {
  return _internal_has_multi_data_set_index();
}
inline void ChartUIState::clear_multi_data_set_index() {
  _impl_.multi_data_set_index_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline int32_t ChartUIState::_internal_multi_data_set_index() const {
  return _impl_.multi_data_set_index_;
}
inline int32_t ChartUIState::multi_data_set_index() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.multi_data_set_index)
  return _internal_multi_data_set_index();
}
inline void ChartUIState::_internal_set_multi_data_set_index(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.multi_data_set_index_ = value;
}
inline void ChartUIState::set_multi_data_set_index(int32_t value) {
  _internal_set_multi_data_set_index(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartUIState.multi_data_set_index)
}

// optional bool is_valid_multi_data_set_index = 8;
inline bool ChartUIState::_internal_has_is_valid_multi_data_set_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ChartUIState::has_is_valid_multi_data_set_index() const {
  return _internal_has_is_valid_multi_data_set_index();
}
inline void ChartUIState::clear_is_valid_multi_data_set_index() {
  _impl_.is_valid_multi_data_set_index_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool ChartUIState::_internal_is_valid_multi_data_set_index() const {
  return _impl_.is_valid_multi_data_set_index_;
}
inline bool ChartUIState::is_valid_multi_data_set_index() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartUIState.is_valid_multi_data_set_index)
  return _internal_is_valid_multi_data_set_index();
}
inline void ChartUIState::_internal_set_is_valid_multi_data_set_index(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.is_valid_multi_data_set_index_ = value;
}
inline void ChartUIState::set_is_valid_multi_data_set_index(bool value) {
  _internal_set_is_valid_multi_data_set_index(value);
  // @@protoc_insertion_point(field_set:TSCH.ChartUIState.is_valid_multi_data_set_index)
}

// -------------------------------------------------------------------

// ChartUIStateMultiDataIndexUpgrade

// -------------------------------------------------------------------

// ChartFormatStructExtensions

// -------------------------------------------------------------------

// ChartReferenceLineNonStyleItem

// required .TSP.Reference non_style = 1;
inline bool ChartReferenceLineNonStyleItem::_internal_has_non_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.non_style_ != nullptr);
  return value;
}
inline bool ChartReferenceLineNonStyleItem::has_non_style() const {
  return _internal_has_non_style();
}
inline const ::TSP::Reference& ChartReferenceLineNonStyleItem::_internal_non_style() const {
  const ::TSP::Reference* p = _impl_.non_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartReferenceLineNonStyleItem::non_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartReferenceLineNonStyleItem.non_style)
  return _internal_non_style();
}
inline void ChartReferenceLineNonStyleItem::unsafe_arena_set_allocated_non_style(
    ::TSP::Reference* non_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.non_style_);
  }
  _impl_.non_style_ = non_style;
  if (non_style) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartReferenceLineNonStyleItem.non_style)
}
inline ::TSP::Reference* ChartReferenceLineNonStyleItem::release_non_style() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.non_style_;
  _impl_.non_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartReferenceLineNonStyleItem::unsafe_arena_release_non_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartReferenceLineNonStyleItem.non_style)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.non_style_;
  _impl_.non_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartReferenceLineNonStyleItem::_internal_mutable_non_style() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.non_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.non_style_ = p;
  }
  return _impl_.non_style_;
}
inline ::TSP::Reference* ChartReferenceLineNonStyleItem::mutable_non_style() {
  ::TSP::Reference* _msg = _internal_mutable_non_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartReferenceLineNonStyleItem.non_style)
  return _msg;
}
inline void ChartReferenceLineNonStyleItem::set_allocated_non_style(::TSP::Reference* non_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.non_style_);
  }
  if (non_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(non_style));
    if (message_arena != submessage_arena) {
      non_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.non_style_ = non_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartReferenceLineNonStyleItem.non_style)
}

// required .TSP.UUID uuid = 2;
inline bool ChartReferenceLineNonStyleItem::_internal_has_uuid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.uuid_ != nullptr);
  return value;
}
inline bool ChartReferenceLineNonStyleItem::has_uuid() const {
  return _internal_has_uuid();
}
inline const ::TSP::UUID& ChartReferenceLineNonStyleItem::_internal_uuid() const {
  const ::TSP::UUID* p = _impl_.uuid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::UUID&>(
      ::TSP::_UUID_default_instance_);
}
inline const ::TSP::UUID& ChartReferenceLineNonStyleItem::uuid() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartReferenceLineNonStyleItem.uuid)
  return _internal_uuid();
}
inline void ChartReferenceLineNonStyleItem::unsafe_arena_set_allocated_uuid(
    ::TSP::UUID* uuid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uuid_);
  }
  _impl_.uuid_ = uuid;
  if (uuid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartReferenceLineNonStyleItem.uuid)
}
inline ::TSP::UUID* ChartReferenceLineNonStyleItem::release_uuid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.uuid_;
  _impl_.uuid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::UUID* ChartReferenceLineNonStyleItem::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_release:TSCH.ChartReferenceLineNonStyleItem.uuid)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::UUID* temp = _impl_.uuid_;
  _impl_.uuid_ = nullptr;
  return temp;
}
inline ::TSP::UUID* ChartReferenceLineNonStyleItem::_internal_mutable_uuid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.uuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::UUID>(GetArenaForAllocation());
    _impl_.uuid_ = p;
  }
  return _impl_.uuid_;
}
inline ::TSP::UUID* ChartReferenceLineNonStyleItem::mutable_uuid() {
  ::TSP::UUID* _msg = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartReferenceLineNonStyleItem.uuid)
  return _msg;
}
inline void ChartReferenceLineNonStyleItem::set_allocated_uuid(::TSP::UUID* uuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.uuid_);
  }
  if (uuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(uuid));
    if (message_arena != submessage_arena) {
      uuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uuid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.uuid_ = uuid;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartReferenceLineNonStyleItem.uuid)
}

// -------------------------------------------------------------------

// ChartAxisReferenceLineNonStylesArchive

// required .TSCH.ChartAxisIDArchive axis_id = 1;
inline bool ChartAxisReferenceLineNonStylesArchive::_internal_has_axis_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.axis_id_ != nullptr);
  return value;
}
inline bool ChartAxisReferenceLineNonStylesArchive::has_axis_id() const {
  return _internal_has_axis_id();
}
inline void ChartAxisReferenceLineNonStylesArchive::clear_axis_id() {
  if (_impl_.axis_id_ != nullptr) _impl_.axis_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartAxisIDArchive& ChartAxisReferenceLineNonStylesArchive::_internal_axis_id() const {
  const ::TSCH::ChartAxisIDArchive* p = _impl_.axis_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartAxisIDArchive&>(
      ::TSCH::_ChartAxisIDArchive_default_instance_);
}
inline const ::TSCH::ChartAxisIDArchive& ChartAxisReferenceLineNonStylesArchive::axis_id() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartAxisReferenceLineNonStylesArchive.axis_id)
  return _internal_axis_id();
}
inline void ChartAxisReferenceLineNonStylesArchive::unsafe_arena_set_allocated_axis_id(
    ::TSCH::ChartAxisIDArchive* axis_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.axis_id_);
  }
  _impl_.axis_id_ = axis_id;
  if (axis_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartAxisReferenceLineNonStylesArchive.axis_id)
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineNonStylesArchive::release_axis_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartAxisIDArchive* temp = _impl_.axis_id_;
  _impl_.axis_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineNonStylesArchive::unsafe_arena_release_axis_id() {
  // @@protoc_insertion_point(field_release:TSCH.ChartAxisReferenceLineNonStylesArchive.axis_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartAxisIDArchive* temp = _impl_.axis_id_;
  _impl_.axis_id_ = nullptr;
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineNonStylesArchive::_internal_mutable_axis_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.axis_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartAxisIDArchive>(GetArenaForAllocation());
    _impl_.axis_id_ = p;
  }
  return _impl_.axis_id_;
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineNonStylesArchive::mutable_axis_id() {
  ::TSCH::ChartAxisIDArchive* _msg = _internal_mutable_axis_id();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartAxisReferenceLineNonStylesArchive.axis_id)
  return _msg;
}
inline void ChartAxisReferenceLineNonStylesArchive::set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.axis_id_;
  }
  if (axis_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(axis_id);
    if (message_arena != submessage_arena) {
      axis_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.axis_id_ = axis_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartAxisReferenceLineNonStylesArchive.axis_id)
}

// repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
inline int ChartAxisReferenceLineNonStylesArchive::_internal_reference_line_non_style_items_size() const {
  return _impl_.reference_line_non_style_items_.size();
}
inline int ChartAxisReferenceLineNonStylesArchive::reference_line_non_style_items_size() const {
  return _internal_reference_line_non_style_items_size();
}
inline void ChartAxisReferenceLineNonStylesArchive::clear_reference_line_non_style_items() {
  _impl_.reference_line_non_style_items_.Clear();
}
inline ::TSCH::ChartReferenceLineNonStyleItem* ChartAxisReferenceLineNonStylesArchive::mutable_reference_line_non_style_items(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartAxisReferenceLineNonStylesArchive.reference_line_non_style_items)
  return _impl_.reference_line_non_style_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartReferenceLineNonStyleItem >*
ChartAxisReferenceLineNonStylesArchive::mutable_reference_line_non_style_items() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartAxisReferenceLineNonStylesArchive.reference_line_non_style_items)
  return &_impl_.reference_line_non_style_items_;
}
inline const ::TSCH::ChartReferenceLineNonStyleItem& ChartAxisReferenceLineNonStylesArchive::_internal_reference_line_non_style_items(int index) const {
  return _impl_.reference_line_non_style_items_.Get(index);
}
inline const ::TSCH::ChartReferenceLineNonStyleItem& ChartAxisReferenceLineNonStylesArchive::reference_line_non_style_items(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartAxisReferenceLineNonStylesArchive.reference_line_non_style_items)
  return _internal_reference_line_non_style_items(index);
}
inline ::TSCH::ChartReferenceLineNonStyleItem* ChartAxisReferenceLineNonStylesArchive::_internal_add_reference_line_non_style_items() {
  return _impl_.reference_line_non_style_items_.Add();
}
inline ::TSCH::ChartReferenceLineNonStyleItem* ChartAxisReferenceLineNonStylesArchive::add_reference_line_non_style_items() {
  ::TSCH::ChartReferenceLineNonStyleItem* _add = _internal_add_reference_line_non_style_items();
  // @@protoc_insertion_point(field_add:TSCH.ChartAxisReferenceLineNonStylesArchive.reference_line_non_style_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartReferenceLineNonStyleItem >&
ChartAxisReferenceLineNonStylesArchive::reference_line_non_style_items() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartAxisReferenceLineNonStylesArchive.reference_line_non_style_items)
  return _impl_.reference_line_non_style_items_;
}

// -------------------------------------------------------------------

// ChartAxisReferenceLineStylesArchive

// required .TSCH.ChartAxisIDArchive axis_id = 1;
inline bool ChartAxisReferenceLineStylesArchive::_internal_has_axis_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.axis_id_ != nullptr);
  return value;
}
inline bool ChartAxisReferenceLineStylesArchive::has_axis_id() const {
  return _internal_has_axis_id();
}
inline void ChartAxisReferenceLineStylesArchive::clear_axis_id() {
  if (_impl_.axis_id_ != nullptr) _impl_.axis_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartAxisIDArchive& ChartAxisReferenceLineStylesArchive::_internal_axis_id() const {
  const ::TSCH::ChartAxisIDArchive* p = _impl_.axis_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartAxisIDArchive&>(
      ::TSCH::_ChartAxisIDArchive_default_instance_);
}
inline const ::TSCH::ChartAxisIDArchive& ChartAxisReferenceLineStylesArchive::axis_id() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartAxisReferenceLineStylesArchive.axis_id)
  return _internal_axis_id();
}
inline void ChartAxisReferenceLineStylesArchive::unsafe_arena_set_allocated_axis_id(
    ::TSCH::ChartAxisIDArchive* axis_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.axis_id_);
  }
  _impl_.axis_id_ = axis_id;
  if (axis_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartAxisReferenceLineStylesArchive.axis_id)
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineStylesArchive::release_axis_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartAxisIDArchive* temp = _impl_.axis_id_;
  _impl_.axis_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineStylesArchive::unsafe_arena_release_axis_id() {
  // @@protoc_insertion_point(field_release:TSCH.ChartAxisReferenceLineStylesArchive.axis_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartAxisIDArchive* temp = _impl_.axis_id_;
  _impl_.axis_id_ = nullptr;
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineStylesArchive::_internal_mutable_axis_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.axis_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartAxisIDArchive>(GetArenaForAllocation());
    _impl_.axis_id_ = p;
  }
  return _impl_.axis_id_;
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineStylesArchive::mutable_axis_id() {
  ::TSCH::ChartAxisIDArchive* _msg = _internal_mutable_axis_id();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartAxisReferenceLineStylesArchive.axis_id)
  return _msg;
}
inline void ChartAxisReferenceLineStylesArchive::set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.axis_id_;
  }
  if (axis_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(axis_id);
    if (message_arena != submessage_arena) {
      axis_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.axis_id_ = axis_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartAxisReferenceLineStylesArchive.axis_id)
}

// optional .TSP.SparseReferenceArray reference_line_styles = 2;
inline bool ChartAxisReferenceLineStylesArchive::_internal_has_reference_line_styles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.reference_line_styles_ != nullptr);
  return value;
}
inline bool ChartAxisReferenceLineStylesArchive::has_reference_line_styles() const {
  return _internal_has_reference_line_styles();
}
inline const ::TSP::SparseReferenceArray& ChartAxisReferenceLineStylesArchive::_internal_reference_line_styles() const {
  const ::TSP::SparseReferenceArray* p = _impl_.reference_line_styles_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::SparseReferenceArray&>(
      ::TSP::_SparseReferenceArray_default_instance_);
}
inline const ::TSP::SparseReferenceArray& ChartAxisReferenceLineStylesArchive::reference_line_styles() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartAxisReferenceLineStylesArchive.reference_line_styles)
  return _internal_reference_line_styles();
}
inline void ChartAxisReferenceLineStylesArchive::unsafe_arena_set_allocated_reference_line_styles(
    ::TSP::SparseReferenceArray* reference_line_styles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_line_styles_);
  }
  _impl_.reference_line_styles_ = reference_line_styles;
  if (reference_line_styles) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartAxisReferenceLineStylesArchive.reference_line_styles)
}
inline ::TSP::SparseReferenceArray* ChartAxisReferenceLineStylesArchive::release_reference_line_styles() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::SparseReferenceArray* temp = _impl_.reference_line_styles_;
  _impl_.reference_line_styles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::SparseReferenceArray* ChartAxisReferenceLineStylesArchive::unsafe_arena_release_reference_line_styles() {
  // @@protoc_insertion_point(field_release:TSCH.ChartAxisReferenceLineStylesArchive.reference_line_styles)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TSP::SparseReferenceArray* temp = _impl_.reference_line_styles_;
  _impl_.reference_line_styles_ = nullptr;
  return temp;
}
inline ::TSP::SparseReferenceArray* ChartAxisReferenceLineStylesArchive::_internal_mutable_reference_line_styles() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.reference_line_styles_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::SparseReferenceArray>(GetArenaForAllocation());
    _impl_.reference_line_styles_ = p;
  }
  return _impl_.reference_line_styles_;
}
inline ::TSP::SparseReferenceArray* ChartAxisReferenceLineStylesArchive::mutable_reference_line_styles() {
  ::TSP::SparseReferenceArray* _msg = _internal_mutable_reference_line_styles();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartAxisReferenceLineStylesArchive.reference_line_styles)
  return _msg;
}
inline void ChartAxisReferenceLineStylesArchive::set_allocated_reference_line_styles(::TSP::SparseReferenceArray* reference_line_styles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.reference_line_styles_);
  }
  if (reference_line_styles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reference_line_styles));
    if (message_arena != submessage_arena) {
      reference_line_styles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference_line_styles, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.reference_line_styles_ = reference_line_styles;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartAxisReferenceLineStylesArchive.reference_line_styles)
}

// -------------------------------------------------------------------

// ChartReferenceLinesArchive

// repeated .TSCH.ChartAxisReferenceLineNonStylesArchive reference_line_non_styles_map = 1;
inline int ChartReferenceLinesArchive::_internal_reference_line_non_styles_map_size() const {
  return _impl_.reference_line_non_styles_map_.size();
}
inline int ChartReferenceLinesArchive::reference_line_non_styles_map_size() const {
  return _internal_reference_line_non_styles_map_size();
}
inline void ChartReferenceLinesArchive::clear_reference_line_non_styles_map() {
  _impl_.reference_line_non_styles_map_.Clear();
}
inline ::TSCH::ChartAxisReferenceLineNonStylesArchive* ChartReferenceLinesArchive::mutable_reference_line_non_styles_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartReferenceLinesArchive.reference_line_non_styles_map)
  return _impl_.reference_line_non_styles_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineNonStylesArchive >*
ChartReferenceLinesArchive::mutable_reference_line_non_styles_map() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartReferenceLinesArchive.reference_line_non_styles_map)
  return &_impl_.reference_line_non_styles_map_;
}
inline const ::TSCH::ChartAxisReferenceLineNonStylesArchive& ChartReferenceLinesArchive::_internal_reference_line_non_styles_map(int index) const {
  return _impl_.reference_line_non_styles_map_.Get(index);
}
inline const ::TSCH::ChartAxisReferenceLineNonStylesArchive& ChartReferenceLinesArchive::reference_line_non_styles_map(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartReferenceLinesArchive.reference_line_non_styles_map)
  return _internal_reference_line_non_styles_map(index);
}
inline ::TSCH::ChartAxisReferenceLineNonStylesArchive* ChartReferenceLinesArchive::_internal_add_reference_line_non_styles_map() {
  return _impl_.reference_line_non_styles_map_.Add();
}
inline ::TSCH::ChartAxisReferenceLineNonStylesArchive* ChartReferenceLinesArchive::add_reference_line_non_styles_map() {
  ::TSCH::ChartAxisReferenceLineNonStylesArchive* _add = _internal_add_reference_line_non_styles_map();
  // @@protoc_insertion_point(field_add:TSCH.ChartReferenceLinesArchive.reference_line_non_styles_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineNonStylesArchive >&
ChartReferenceLinesArchive::reference_line_non_styles_map() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartReferenceLinesArchive.reference_line_non_styles_map)
  return _impl_.reference_line_non_styles_map_;
}

// repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
inline int ChartReferenceLinesArchive::_internal_reference_line_styles_map_size() const {
  return _impl_.reference_line_styles_map_.size();
}
inline int ChartReferenceLinesArchive::reference_line_styles_map_size() const {
  return _internal_reference_line_styles_map_size();
}
inline void ChartReferenceLinesArchive::clear_reference_line_styles_map() {
  _impl_.reference_line_styles_map_.Clear();
}
inline ::TSCH::ChartAxisReferenceLineStylesArchive* ChartReferenceLinesArchive::mutable_reference_line_styles_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartReferenceLinesArchive.reference_line_styles_map)
  return _impl_.reference_line_styles_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineStylesArchive >*
ChartReferenceLinesArchive::mutable_reference_line_styles_map() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartReferenceLinesArchive.reference_line_styles_map)
  return &_impl_.reference_line_styles_map_;
}
inline const ::TSCH::ChartAxisReferenceLineStylesArchive& ChartReferenceLinesArchive::_internal_reference_line_styles_map(int index) const {
  return _impl_.reference_line_styles_map_.Get(index);
}
inline const ::TSCH::ChartAxisReferenceLineStylesArchive& ChartReferenceLinesArchive::reference_line_styles_map(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartReferenceLinesArchive.reference_line_styles_map)
  return _internal_reference_line_styles_map(index);
}
inline ::TSCH::ChartAxisReferenceLineStylesArchive* ChartReferenceLinesArchive::_internal_add_reference_line_styles_map() {
  return _impl_.reference_line_styles_map_.Add();
}
inline ::TSCH::ChartAxisReferenceLineStylesArchive* ChartReferenceLinesArchive::add_reference_line_styles_map() {
  ::TSCH::ChartAxisReferenceLineStylesArchive* _add = _internal_add_reference_line_styles_map();
  // @@protoc_insertion_point(field_add:TSCH.ChartReferenceLinesArchive.reference_line_styles_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineStylesArchive >&
ChartReferenceLinesArchive::reference_line_styles_map() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartReferenceLinesArchive.reference_line_styles_map)
  return _impl_.reference_line_styles_map_;
}

// optional .TSP.Reference theme_preset_reference_line_style = 3;
inline bool ChartReferenceLinesArchive::_internal_has_theme_preset_reference_line_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_preset_reference_line_style_ != nullptr);
  return value;
}
inline bool ChartReferenceLinesArchive::has_theme_preset_reference_line_style() const {
  return _internal_has_theme_preset_reference_line_style();
}
inline const ::TSP::Reference& ChartReferenceLinesArchive::_internal_theme_preset_reference_line_style() const {
  const ::TSP::Reference* p = _impl_.theme_preset_reference_line_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& ChartReferenceLinesArchive::theme_preset_reference_line_style() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartReferenceLinesArchive.theme_preset_reference_line_style)
  return _internal_theme_preset_reference_line_style();
}
inline void ChartReferenceLinesArchive::unsafe_arena_set_allocated_theme_preset_reference_line_style(
    ::TSP::Reference* theme_preset_reference_line_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_preset_reference_line_style_);
  }
  _impl_.theme_preset_reference_line_style_ = theme_preset_reference_line_style;
  if (theme_preset_reference_line_style) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartReferenceLinesArchive.theme_preset_reference_line_style)
}
inline ::TSP::Reference* ChartReferenceLinesArchive::release_theme_preset_reference_line_style() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.theme_preset_reference_line_style_;
  _impl_.theme_preset_reference_line_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* ChartReferenceLinesArchive::unsafe_arena_release_theme_preset_reference_line_style() {
  // @@protoc_insertion_point(field_release:TSCH.ChartReferenceLinesArchive.theme_preset_reference_line_style)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.theme_preset_reference_line_style_;
  _impl_.theme_preset_reference_line_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* ChartReferenceLinesArchive::_internal_mutable_theme_preset_reference_line_style() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.theme_preset_reference_line_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_preset_reference_line_style_ = p;
  }
  return _impl_.theme_preset_reference_line_style_;
}
inline ::TSP::Reference* ChartReferenceLinesArchive::mutable_theme_preset_reference_line_style() {
  ::TSP::Reference* _msg = _internal_mutable_theme_preset_reference_line_style();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartReferenceLinesArchive.theme_preset_reference_line_style)
  return _msg;
}
inline void ChartReferenceLinesArchive::set_allocated_theme_preset_reference_line_style(::TSP::Reference* theme_preset_reference_line_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_preset_reference_line_style_);
  }
  if (theme_preset_reference_line_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_preset_reference_line_style));
    if (message_arena != submessage_arena) {
      theme_preset_reference_line_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme_preset_reference_line_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.theme_preset_reference_line_style_ = theme_preset_reference_line_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartReferenceLinesArchive.theme_preset_reference_line_style)
}

// -------------------------------------------------------------------

// ChartPresetReferenceLineStylesArchive

// repeated .TSP.Reference reference_line_styles = 1;
inline int ChartPresetReferenceLineStylesArchive::_internal_reference_line_styles_size() const {
  return _impl_.reference_line_styles_.size();
}
inline int ChartPresetReferenceLineStylesArchive::reference_line_styles_size() const {
  return _internal_reference_line_styles_size();
}
inline ::TSP::Reference* ChartPresetReferenceLineStylesArchive::mutable_reference_line_styles(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartPresetReferenceLineStylesArchive.reference_line_styles)
  return _impl_.reference_line_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >*
ChartPresetReferenceLineStylesArchive::mutable_reference_line_styles() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartPresetReferenceLineStylesArchive.reference_line_styles)
  return &_impl_.reference_line_styles_;
}
inline const ::TSP::Reference& ChartPresetReferenceLineStylesArchive::_internal_reference_line_styles(int index) const {
  return _impl_.reference_line_styles_.Get(index);
}
inline const ::TSP::Reference& ChartPresetReferenceLineStylesArchive::reference_line_styles(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartPresetReferenceLineStylesArchive.reference_line_styles)
  return _internal_reference_line_styles(index);
}
inline ::TSP::Reference* ChartPresetReferenceLineStylesArchive::_internal_add_reference_line_styles() {
  return _impl_.reference_line_styles_.Add();
}
inline ::TSP::Reference* ChartPresetReferenceLineStylesArchive::add_reference_line_styles() {
  ::TSP::Reference* _add = _internal_add_reference_line_styles();
  // @@protoc_insertion_point(field_add:TSCH.ChartPresetReferenceLineStylesArchive.reference_line_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSP::Reference >&
ChartPresetReferenceLineStylesArchive::reference_line_styles() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartPresetReferenceLineStylesArchive.reference_line_styles)
  return _impl_.reference_line_styles_;
}

// -------------------------------------------------------------------

// ChartAxisReferenceLineSparseNonStylesArchive

// required .TSCH.ChartAxisIDArchive axis_id = 1;
inline bool ChartAxisReferenceLineSparseNonStylesArchive::_internal_has_axis_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.axis_id_ != nullptr);
  return value;
}
inline bool ChartAxisReferenceLineSparseNonStylesArchive::has_axis_id() const {
  return _internal_has_axis_id();
}
inline void ChartAxisReferenceLineSparseNonStylesArchive::clear_axis_id() {
  if (_impl_.axis_id_ != nullptr) _impl_.axis_id_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TSCH::ChartAxisIDArchive& ChartAxisReferenceLineSparseNonStylesArchive::_internal_axis_id() const {
  const ::TSCH::ChartAxisIDArchive* p = _impl_.axis_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSCH::ChartAxisIDArchive&>(
      ::TSCH::_ChartAxisIDArchive_default_instance_);
}
inline const ::TSCH::ChartAxisIDArchive& ChartAxisReferenceLineSparseNonStylesArchive::axis_id() const {
  // @@protoc_insertion_point(field_get:TSCH.ChartAxisReferenceLineSparseNonStylesArchive.axis_id)
  return _internal_axis_id();
}
inline void ChartAxisReferenceLineSparseNonStylesArchive::unsafe_arena_set_allocated_axis_id(
    ::TSCH::ChartAxisIDArchive* axis_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.axis_id_);
  }
  _impl_.axis_id_ = axis_id;
  if (axis_id) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.ChartAxisReferenceLineSparseNonStylesArchive.axis_id)
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineSparseNonStylesArchive::release_axis_id() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartAxisIDArchive* temp = _impl_.axis_id_;
  _impl_.axis_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineSparseNonStylesArchive::unsafe_arena_release_axis_id() {
  // @@protoc_insertion_point(field_release:TSCH.ChartAxisReferenceLineSparseNonStylesArchive.axis_id)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSCH::ChartAxisIDArchive* temp = _impl_.axis_id_;
  _impl_.axis_id_ = nullptr;
  return temp;
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineSparseNonStylesArchive::_internal_mutable_axis_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.axis_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSCH::ChartAxisIDArchive>(GetArenaForAllocation());
    _impl_.axis_id_ = p;
  }
  return _impl_.axis_id_;
}
inline ::TSCH::ChartAxisIDArchive* ChartAxisReferenceLineSparseNonStylesArchive::mutable_axis_id() {
  ::TSCH::ChartAxisIDArchive* _msg = _internal_mutable_axis_id();
  // @@protoc_insertion_point(field_mutable:TSCH.ChartAxisReferenceLineSparseNonStylesArchive.axis_id)
  return _msg;
}
inline void ChartAxisReferenceLineSparseNonStylesArchive::set_allocated_axis_id(::TSCH::ChartAxisIDArchive* axis_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.axis_id_;
  }
  if (axis_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(axis_id);
    if (message_arena != submessage_arena) {
      axis_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, axis_id, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.axis_id_ = axis_id;
  // @@protoc_insertion_point(field_set_allocated:TSCH.ChartAxisReferenceLineSparseNonStylesArchive.axis_id)
}

// repeated .TSCH.ChartReferenceLineNonStyleItem reference_line_non_style_items = 2;
inline int ChartAxisReferenceLineSparseNonStylesArchive::_internal_reference_line_non_style_items_size() const {
  return _impl_.reference_line_non_style_items_.size();
}
inline int ChartAxisReferenceLineSparseNonStylesArchive::reference_line_non_style_items_size() const {
  return _internal_reference_line_non_style_items_size();
}
inline void ChartAxisReferenceLineSparseNonStylesArchive::clear_reference_line_non_style_items() {
  _impl_.reference_line_non_style_items_.Clear();
}
inline ::TSCH::ChartReferenceLineNonStyleItem* ChartAxisReferenceLineSparseNonStylesArchive::mutable_reference_line_non_style_items(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.ChartAxisReferenceLineSparseNonStylesArchive.reference_line_non_style_items)
  return _impl_.reference_line_non_style_items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartReferenceLineNonStyleItem >*
ChartAxisReferenceLineSparseNonStylesArchive::mutable_reference_line_non_style_items() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.ChartAxisReferenceLineSparseNonStylesArchive.reference_line_non_style_items)
  return &_impl_.reference_line_non_style_items_;
}
inline const ::TSCH::ChartReferenceLineNonStyleItem& ChartAxisReferenceLineSparseNonStylesArchive::_internal_reference_line_non_style_items(int index) const {
  return _impl_.reference_line_non_style_items_.Get(index);
}
inline const ::TSCH::ChartReferenceLineNonStyleItem& ChartAxisReferenceLineSparseNonStylesArchive::reference_line_non_style_items(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.ChartAxisReferenceLineSparseNonStylesArchive.reference_line_non_style_items)
  return _internal_reference_line_non_style_items(index);
}
inline ::TSCH::ChartReferenceLineNonStyleItem* ChartAxisReferenceLineSparseNonStylesArchive::_internal_add_reference_line_non_style_items() {
  return _impl_.reference_line_non_style_items_.Add();
}
inline ::TSCH::ChartReferenceLineNonStyleItem* ChartAxisReferenceLineSparseNonStylesArchive::add_reference_line_non_style_items() {
  ::TSCH::ChartReferenceLineNonStyleItem* _add = _internal_add_reference_line_non_style_items();
  // @@protoc_insertion_point(field_add:TSCH.ChartAxisReferenceLineSparseNonStylesArchive.reference_line_non_style_items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartReferenceLineNonStyleItem >&
ChartAxisReferenceLineSparseNonStylesArchive::reference_line_non_style_items() const {
  // @@protoc_insertion_point(field_list:TSCH.ChartAxisReferenceLineSparseNonStylesArchive.reference_line_non_style_items)
  return _impl_.reference_line_non_style_items_;
}

// -------------------------------------------------------------------

// PropertyValueStorageContainerReferenceLinesArchive

// repeated .TSCH.ChartAxisReferenceLineSparseNonStylesArchive reference_line_non_styles_map = 1;
inline int PropertyValueStorageContainerReferenceLinesArchive::_internal_reference_line_non_styles_map_size() const {
  return _impl_.reference_line_non_styles_map_.size();
}
inline int PropertyValueStorageContainerReferenceLinesArchive::reference_line_non_styles_map_size() const {
  return _internal_reference_line_non_styles_map_size();
}
inline void PropertyValueStorageContainerReferenceLinesArchive::clear_reference_line_non_styles_map() {
  _impl_.reference_line_non_styles_map_.Clear();
}
inline ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive* PropertyValueStorageContainerReferenceLinesArchive::mutable_reference_line_non_styles_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_non_styles_map)
  return _impl_.reference_line_non_styles_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive >*
PropertyValueStorageContainerReferenceLinesArchive::mutable_reference_line_non_styles_map() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_non_styles_map)
  return &_impl_.reference_line_non_styles_map_;
}
inline const ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive& PropertyValueStorageContainerReferenceLinesArchive::_internal_reference_line_non_styles_map(int index) const {
  return _impl_.reference_line_non_styles_map_.Get(index);
}
inline const ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive& PropertyValueStorageContainerReferenceLinesArchive::reference_line_non_styles_map(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_non_styles_map)
  return _internal_reference_line_non_styles_map(index);
}
inline ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive* PropertyValueStorageContainerReferenceLinesArchive::_internal_add_reference_line_non_styles_map() {
  return _impl_.reference_line_non_styles_map_.Add();
}
inline ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive* PropertyValueStorageContainerReferenceLinesArchive::add_reference_line_non_styles_map() {
  ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive* _add = _internal_add_reference_line_non_styles_map();
  // @@protoc_insertion_point(field_add:TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_non_styles_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineSparseNonStylesArchive >&
PropertyValueStorageContainerReferenceLinesArchive::reference_line_non_styles_map() const {
  // @@protoc_insertion_point(field_list:TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_non_styles_map)
  return _impl_.reference_line_non_styles_map_;
}

// repeated .TSCH.ChartAxisReferenceLineStylesArchive reference_line_styles_map = 2;
inline int PropertyValueStorageContainerReferenceLinesArchive::_internal_reference_line_styles_map_size() const {
  return _impl_.reference_line_styles_map_.size();
}
inline int PropertyValueStorageContainerReferenceLinesArchive::reference_line_styles_map_size() const {
  return _internal_reference_line_styles_map_size();
}
inline void PropertyValueStorageContainerReferenceLinesArchive::clear_reference_line_styles_map() {
  _impl_.reference_line_styles_map_.Clear();
}
inline ::TSCH::ChartAxisReferenceLineStylesArchive* PropertyValueStorageContainerReferenceLinesArchive::mutable_reference_line_styles_map(int index) {
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_styles_map)
  return _impl_.reference_line_styles_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineStylesArchive >*
PropertyValueStorageContainerReferenceLinesArchive::mutable_reference_line_styles_map() {
  // @@protoc_insertion_point(field_mutable_list:TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_styles_map)
  return &_impl_.reference_line_styles_map_;
}
inline const ::TSCH::ChartAxisReferenceLineStylesArchive& PropertyValueStorageContainerReferenceLinesArchive::_internal_reference_line_styles_map(int index) const {
  return _impl_.reference_line_styles_map_.Get(index);
}
inline const ::TSCH::ChartAxisReferenceLineStylesArchive& PropertyValueStorageContainerReferenceLinesArchive::reference_line_styles_map(int index) const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_styles_map)
  return _internal_reference_line_styles_map(index);
}
inline ::TSCH::ChartAxisReferenceLineStylesArchive* PropertyValueStorageContainerReferenceLinesArchive::_internal_add_reference_line_styles_map() {
  return _impl_.reference_line_styles_map_.Add();
}
inline ::TSCH::ChartAxisReferenceLineStylesArchive* PropertyValueStorageContainerReferenceLinesArchive::add_reference_line_styles_map() {
  ::TSCH::ChartAxisReferenceLineStylesArchive* _add = _internal_add_reference_line_styles_map();
  // @@protoc_insertion_point(field_add:TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_styles_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TSCH::ChartAxisReferenceLineStylesArchive >&
PropertyValueStorageContainerReferenceLinesArchive::reference_line_styles_map() const {
  // @@protoc_insertion_point(field_list:TSCH.PropertyValueStorageContainerReferenceLinesArchive.reference_line_styles_map)
  return _impl_.reference_line_styles_map_;
}

// optional .TSP.Reference theme_preset_reference_line_style = 3;
inline bool PropertyValueStorageContainerReferenceLinesArchive::_internal_has_theme_preset_reference_line_style() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.theme_preset_reference_line_style_ != nullptr);
  return value;
}
inline bool PropertyValueStorageContainerReferenceLinesArchive::has_theme_preset_reference_line_style() const {
  return _internal_has_theme_preset_reference_line_style();
}
inline const ::TSP::Reference& PropertyValueStorageContainerReferenceLinesArchive::_internal_theme_preset_reference_line_style() const {
  const ::TSP::Reference* p = _impl_.theme_preset_reference_line_style_;
  return p != nullptr ? *p : reinterpret_cast<const ::TSP::Reference&>(
      ::TSP::_Reference_default_instance_);
}
inline const ::TSP::Reference& PropertyValueStorageContainerReferenceLinesArchive::theme_preset_reference_line_style() const {
  // @@protoc_insertion_point(field_get:TSCH.PropertyValueStorageContainerReferenceLinesArchive.theme_preset_reference_line_style)
  return _internal_theme_preset_reference_line_style();
}
inline void PropertyValueStorageContainerReferenceLinesArchive::unsafe_arena_set_allocated_theme_preset_reference_line_style(
    ::TSP::Reference* theme_preset_reference_line_style) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_preset_reference_line_style_);
  }
  _impl_.theme_preset_reference_line_style_ = theme_preset_reference_line_style;
  if (theme_preset_reference_line_style) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TSCH.PropertyValueStorageContainerReferenceLinesArchive.theme_preset_reference_line_style)
}
inline ::TSP::Reference* PropertyValueStorageContainerReferenceLinesArchive::release_theme_preset_reference_line_style() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.theme_preset_reference_line_style_;
  _impl_.theme_preset_reference_line_style_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerReferenceLinesArchive::unsafe_arena_release_theme_preset_reference_line_style() {
  // @@protoc_insertion_point(field_release:TSCH.PropertyValueStorageContainerReferenceLinesArchive.theme_preset_reference_line_style)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TSP::Reference* temp = _impl_.theme_preset_reference_line_style_;
  _impl_.theme_preset_reference_line_style_ = nullptr;
  return temp;
}
inline ::TSP::Reference* PropertyValueStorageContainerReferenceLinesArchive::_internal_mutable_theme_preset_reference_line_style() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.theme_preset_reference_line_style_ == nullptr) {
    auto* p = CreateMaybeMessage<::TSP::Reference>(GetArenaForAllocation());
    _impl_.theme_preset_reference_line_style_ = p;
  }
  return _impl_.theme_preset_reference_line_style_;
}
inline ::TSP::Reference* PropertyValueStorageContainerReferenceLinesArchive::mutable_theme_preset_reference_line_style() {
  ::TSP::Reference* _msg = _internal_mutable_theme_preset_reference_line_style();
  // @@protoc_insertion_point(field_mutable:TSCH.PropertyValueStorageContainerReferenceLinesArchive.theme_preset_reference_line_style)
  return _msg;
}
inline void PropertyValueStorageContainerReferenceLinesArchive::set_allocated_theme_preset_reference_line_style(::TSP::Reference* theme_preset_reference_line_style) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.theme_preset_reference_line_style_);
  }
  if (theme_preset_reference_line_style) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(theme_preset_reference_line_style));
    if (message_arena != submessage_arena) {
      theme_preset_reference_line_style = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, theme_preset_reference_line_style, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.theme_preset_reference_line_style_ = theme_preset_reference_line_style;
  // @@protoc_insertion_point(field_set_allocated:TSCH.PropertyValueStorageContainerReferenceLinesArchive.theme_preset_reference_line_style)
}

// -------------------------------------------------------------------

// CollaboratorCDECursorSubselectionArchive

// optional int32 row_location = 1;
inline bool CollaboratorCDECursorSubselectionArchive::_internal_has_row_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CollaboratorCDECursorSubselectionArchive::has_row_location() const {
  return _internal_has_row_location();
}
inline void CollaboratorCDECursorSubselectionArchive::clear_row_location() {
  _impl_.row_location_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int32_t CollaboratorCDECursorSubselectionArchive::_internal_row_location() const {
  return _impl_.row_location_;
}
inline int32_t CollaboratorCDECursorSubselectionArchive::row_location() const {
  // @@protoc_insertion_point(field_get:TSCH.CollaboratorCDECursorSubselectionArchive.row_location)
  return _internal_row_location();
}
inline void CollaboratorCDECursorSubselectionArchive::_internal_set_row_location(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.row_location_ = value;
}
inline void CollaboratorCDECursorSubselectionArchive::set_row_location(int32_t value) {
  _internal_set_row_location(value);
  // @@protoc_insertion_point(field_set:TSCH.CollaboratorCDECursorSubselectionArchive.row_location)
}

// optional int32 row_length = 2;
inline bool CollaboratorCDECursorSubselectionArchive::_internal_has_row_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CollaboratorCDECursorSubselectionArchive::has_row_length() const {
  return _internal_has_row_length();
}
inline void CollaboratorCDECursorSubselectionArchive::clear_row_length() {
  _impl_.row_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline int32_t CollaboratorCDECursorSubselectionArchive::_internal_row_length() const {
  return _impl_.row_length_;
}
inline int32_t CollaboratorCDECursorSubselectionArchive::row_length() const {
  // @@protoc_insertion_point(field_get:TSCH.CollaboratorCDECursorSubselectionArchive.row_length)
  return _internal_row_length();
}
inline void CollaboratorCDECursorSubselectionArchive::_internal_set_row_length(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.row_length_ = value;
}
inline void CollaboratorCDECursorSubselectionArchive::set_row_length(int32_t value) {
  _internal_set_row_length(value);
  // @@protoc_insertion_point(field_set:TSCH.CollaboratorCDECursorSubselectionArchive.row_length)
}

// optional int32 column_location = 3;
inline bool CollaboratorCDECursorSubselectionArchive::_internal_has_column_location() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CollaboratorCDECursorSubselectionArchive::has_column_location() const {
  return _internal_has_column_location();
}
inline void CollaboratorCDECursorSubselectionArchive::clear_column_location() {
  _impl_.column_location_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t CollaboratorCDECursorSubselectionArchive::_internal_column_location() const {
  return _impl_.column_location_;
}
inline int32_t CollaboratorCDECursorSubselectionArchive::column_location() const {
  // @@protoc_insertion_point(field_get:TSCH.CollaboratorCDECursorSubselectionArchive.column_location)
  return _internal_column_location();
}
inline void CollaboratorCDECursorSubselectionArchive::_internal_set_column_location(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.column_location_ = value;
}
inline void CollaboratorCDECursorSubselectionArchive::set_column_location(int32_t value) {
  _internal_set_column_location(value);
  // @@protoc_insertion_point(field_set:TSCH.CollaboratorCDECursorSubselectionArchive.column_location)
}

// optional int32 column_length = 4;
inline bool CollaboratorCDECursorSubselectionArchive::_internal_has_column_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CollaboratorCDECursorSubselectionArchive::has_column_length() const {
  return _internal_has_column_length();
}
inline void CollaboratorCDECursorSubselectionArchive::clear_column_length() {
  _impl_.column_length_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t CollaboratorCDECursorSubselectionArchive::_internal_column_length() const {
  return _impl_.column_length_;
}
inline int32_t CollaboratorCDECursorSubselectionArchive::column_length() const {
  // @@protoc_insertion_point(field_get:TSCH.CollaboratorCDECursorSubselectionArchive.column_length)
  return _internal_column_length();
}
inline void CollaboratorCDECursorSubselectionArchive::_internal_set_column_length(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.column_length_ = value;
}
inline void CollaboratorCDECursorSubselectionArchive::set_column_length(int32_t value) {
  _internal_set_column_length(value);
  // @@protoc_insertion_point(field_set:TSCH.CollaboratorCDECursorSubselectionArchive.column_length)
}

// -------------------------------------------------------------------

// CollaboratorChartTitleCursorSubselectionArchive

// optional bool chart_title_selected = 1;
inline bool CollaboratorChartTitleCursorSubselectionArchive::_internal_has_chart_title_selected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CollaboratorChartTitleCursorSubselectionArchive::has_chart_title_selected() const {
  return _internal_has_chart_title_selected();
}
inline void CollaboratorChartTitleCursorSubselectionArchive::clear_chart_title_selected() {
  _impl_.chart_title_selected_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CollaboratorChartTitleCursorSubselectionArchive::_internal_chart_title_selected() const {
  return _impl_.chart_title_selected_;
}
inline bool CollaboratorChartTitleCursorSubselectionArchive::chart_title_selected() const {
  // @@protoc_insertion_point(field_get:TSCH.CollaboratorChartTitleCursorSubselectionArchive.chart_title_selected)
  return _internal_chart_title_selected();
}
inline void CollaboratorChartTitleCursorSubselectionArchive::_internal_set_chart_title_selected(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chart_title_selected_ = value;
}
inline void CollaboratorChartTitleCursorSubselectionArchive::set_chart_title_selected(bool value) {
  _internal_set_chart_title_selected(value);
  // @@protoc_insertion_point(field_set:TSCH.CollaboratorChartTitleCursorSubselectionArchive.chart_title_selected)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSCH

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TSCHArchives_2eproto
